{"source_tokens": ["#NEWLINE#", "def execute(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "not", "self", ".", "args", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "pc", ".", "update_output", "(", "'Bestow what authority upon whom?\\n'", ")", "#NEWLINE#", "return", "#NEWLINE#", "#UNINDENT#", "exp", "=", "'(?P<permission>(god)|(dm)|(builder)|(admin))[ ]?(to)?(on)?(upon)?([ ]+(?P<npc>npc))?([ ]+(?P<player>\\\\w+))'", "#NEWLINE#", "match", "=", "re", ".", "match", "(", "exp", ",", "self", ".", "args", ".", "lower", "(", ")", ",", "re", ".", "I", ")", "#NEWLINE#", "if", "(", "not", "match", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "pc", ".", "update_output", "(", "'Type \"help bestow\" for help on this command.'", ")", "#NEWLINE#", "return", "#NEWLINE#", "#UNINDENT#", "(", "perm", ",", "npc", ",", "player", ")", "=", "match", ".", "group", "(", "'permission'", ",", "'npc'", ",", "'player'", ")", "#NEWLINE#", "if", "npc", ":", "#NEWLINE#", "#INDENT#", "error", "=", "\"Npc doesn't exist.\"", "#NEWLINE#", "if", "(", "not", "self", ".", "pc", ".", "location", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "pc", ".", "update_output", "(", "error", ")", "#NEWLINE#", "return", "#NEWLINE#", "#UNINDENT#", "player", "=", "self", ".", "pc", ".", "location", ".", "get_npc_by_kw", "(", "player", ")", "#NEWLINE#", "self", ".", "pc", ".", "update_output", "(", "'WARNING: giving npcs wider permissions can be dangerous. See \"help bestow\".'", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "player", "=", "self", ".", "world", ".", "get_player", "(", "player", ")", "#NEWLINE#", "#UNINDENT#", "permission", "=", "globals", "(", ")", ".", "get", "(", "perm", ".", "upper", "(", ")", ")", "#NEWLINE#", "if", "(", "not", "player", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "pc", ".", "update_output", "(", "\"That player isn't on right now.\"", ")", "#NEWLINE#", "return", "#NEWLINE#", "#UNINDENT#", "if", "(", "not", "permission", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "pc", ".", "update_output", "(", "'Valid permission types are: god, dm, builder, and admin.'", ")", "#NEWLINE#", "return", "#NEWLINE#", "#UNINDENT#", "if", "(", "player", ".", "permissions", "&", "permission", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "pc", ".", "update_output", "(", "(", "'%s already has that authority.'", "%", "player", ".", "fancy_name", "(", ")", ")", ")", "#NEWLINE#", "return", "#NEWLINE#", "#UNINDENT#", "player", ".", "permissions", "=", "(", "player", ".", "permissions", "|", "permission", ")", "#NEWLINE#", "if", "(", "not", "player", ".", "is_npc", "(", ")", ")", ":", "#NEWLINE#", "#INDENT#", "player", ".", "save", "(", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "world", ".", "play_log", ".", "info", "(", "(", "'%s bestowed the authority of %s upon %s.'", "%", "(", "self", ".", "pc", ".", "fancy_name", "(", ")", ",", "perm", ".", "upper", "(", ")", ",", "player", ".", "fancy_name", "(", ")", ")", ")", ")", "#NEWLINE#", "self", ".", "pc", ".", "update_output", "(", "(", "'%s now has the privilige of being %s.'", "%", "(", "player", ".", "fancy_name", "(", ")", ",", "perm", ".", "upper", "(", ")", ")", ")", ")", "#NEWLINE#", "player", ".", "update_output", "(", "(", "'%s has bestowed the authority of %s upon you!'", "%", "(", "self", ".", "pc", ".", "fancy_name", "(", ")", ",", "perm", ".", "upper", "(", ")", ")", ")", ")", "#NEWLINE#", "self", ".", "world", ".", "tell_players", "(", "(", "'%s has bestowed the authority of %s upon %s!'", "%", "(", "self", ".", "pc", ".", "fancy_name", "(", ")", ",", "perm", ".", "upper", "(", ")", ",", "player", ".", "fancy_name", "(", ")", ")", ")", ",", "[", "self", ".", "pc", ".", "name", ",", "player", ".", "name", "]", ")"], "edges": [[7, 9, 7, "enum_FIELD"], [28, 31, 7, "enum_FIELD"], [32, 40, 7, "enum_FIELD"], [54, 56, 7, "enum_FIELD"], [73, 87, 7, "enum_FIELD"], [95, 94, 7, "enum_FIELD"], [164, 172, 7, "enum_FIELD"], [180, 182, 7, "enum_FIELD"], [200, 202, 7, "enum_FIELD"], [220, 225, 7, "enum_FIELD"], [250, 259, 7, "enum_FIELD"], [263, 265, 7, "enum_FIELD"], [281, 289, 7, "enum_FIELD"], [316, 322, 7, "enum_FIELD"], [341, 345, 7, "enum_FIELD"], [366, 398, 7, "enum_FIELD"], [9, 11, 7, "enum_FIELD"], [16, 22, 7, "enum_FIELD"], [40, 36, 7, "enum_FIELD"], [56, 57, 7, "enum_FIELD"], [61, 67, 7, "enum_FIELD"], [87, 83, 7, "enum_FIELD"], [97, 100, 7, "enum_FIELD"], [102, 104, 7, "enum_FIELD"], [125, 135, 7, "enum_FIELD"], [138, 144, 7, "enum_FIELD"], [152, 160, 7, "enum_FIELD"], [172, 170, 7, "enum_FIELD"], [182, 183, 7, "enum_FIELD"], [187, 193, 7, "enum_FIELD"], [202, 203, 7, "enum_FIELD"], [207, 213, 7, "enum_FIELD"], [225, 223, 7, "enum_FIELD"], [225, 226, 7, "enum_FIELD"], [230, 236, 7, "enum_FIELD"], [252, 251, 7, "enum_FIELD"], [259, 257, 7, "enum_FIELD"], [259, 260, 7, "enum_FIELD"], [265, 269, 7, "enum_FIELD"], [274, 278, 7, "enum_FIELD"], [289, 287, 7, "enum_FIELD"], [322, 320, 7, "enum_FIELD"], [345, 343, 7, "enum_FIELD"], [398, 370, 7, "enum_FIELD"], [11, 10, 7, "enum_FIELD"], [22, 20, 7, "enum_FIELD"], [36, 35, 7, "enum_FIELD"], [46, 44, 7, "enum_FIELD"], [50, 49, 7, "enum_FIELD"], [67, 65, 7, "enum_FIELD"], [83, 82, 7, "enum_FIELD"], [104, 108, 7, "enum_FIELD"], [113, 119, 7, "enum_FIELD"], [135, 133, 7, "enum_FIELD"], [144, 142, 7, "enum_FIELD"], [160, 158, 7, "enum_FIELD"], [170, 168, 7, "enum_FIELD"], [176, 174, 7, "enum_FIELD"], [193, 191, 7, "enum_FIELD"], [213, 211, 7, "enum_FIELD"], [223, 222, 7, "enum_FIELD"], [236, 234, 7, "enum_FIELD"], [257, 256, 7, "enum_FIELD"], [269, 267, 7, "enum_FIELD"], [278, 276, 7, "enum_FIELD"], [287, 285, 7, "enum_FIELD"], [292, 291, 7, "enum_FIELD"], [292, 301, 7, "enum_FIELD"], [320, 318, 7, "enum_FIELD"], [325, 324, 7, "enum_FIELD"], [325, 332, 7, "enum_FIELD"], [343, 342, 7, "enum_FIELD"], [348, 347, 7, "enum_FIELD"], [348, 357, 7, "enum_FIELD"], [370, 368, 7, "enum_FIELD"], [375, 374, 7, "enum_FIELD"], [375, 384, 7, "enum_FIELD"], [20, 18, 7, "enum_FIELD"], [44, 42, 7, "enum_FIELD"], [65, 63, 7, "enum_FIELD"], [108, 106, 7, "enum_FIELD"], [119, 117, 7, "enum_FIELD"], [133, 131, 7, "enum_FIELD"], [142, 140, 7, "enum_FIELD"], [158, 156, 7, "enum_FIELD"], [168, 167, 7, "enum_FIELD"], [174, 173, 7, "enum_FIELD"], [191, 189, 7, "enum_FIELD"], [211, 209, 7, "enum_FIELD"], [234, 232, 7, "enum_FIELD"], [239, 238, 7, "enum_FIELD"], [239, 243, 7, "enum_FIELD"], [267, 266, 7, "enum_FIELD"], [276, 275, 7, "enum_FIELD"], [285, 283, 7, "enum_FIELD"], [318, 317, 7, "enum_FIELD"], [368, 367, 7, "enum_FIELD"], [403, 401, 7, "enum_FIELD"], [407, 406, 7, "enum_FIELD"], [18, 17, 7, "enum_FIELD"], [42, 41, 7, "enum_FIELD"], [63, 62, 7, "enum_FIELD"], [106, 105, 7, "enum_FIELD"], [117, 115, 7, "enum_FIELD"], [131, 129, 7, "enum_FIELD"], [140, 139, 7, "enum_FIELD"], [156, 155, 7, "enum_FIELD"], [189, 188, 7, "enum_FIELD"], [209, 208, 7, "enum_FIELD"], [232, 231, 7, "enum_FIELD"], [243, 241, 7, "enum_FIELD"], [283, 282, 7, "enum_FIELD"], [299, 297, 7, "enum_FIELD"], [305, 303, 7, "enum_FIELD"], [311, 309, 7, "enum_FIELD"], [330, 328, 7, "enum_FIELD"], [336, 334, 7, "enum_FIELD"], [355, 353, 7, "enum_FIELD"], [361, 359, 7, "enum_FIELD"], [382, 380, 7, "enum_FIELD"], [388, 386, 7, "enum_FIELD"], [394, 392, 7, "enum_FIELD"], [401, 400, 7, "enum_FIELD"], [115, 114, 7, "enum_FIELD"], [129, 128, 7, "enum_FIELD"], [241, 240, 7, "enum_FIELD"], [297, 295, 7, "enum_FIELD"], [303, 302, 7, "enum_FIELD"], [309, 308, 7, "enum_FIELD"], [328, 327, 7, "enum_FIELD"], [334, 333, 7, "enum_FIELD"], [353, 351, 7, "enum_FIELD"], [359, 358, 7, "enum_FIELD"], [380, 378, 7, "enum_FIELD"], [386, 385, 7, "enum_FIELD"], [392, 391, 7, "enum_FIELD"], [295, 294, 7, "enum_FIELD"], [351, 350, 7, "enum_FIELD"], [378, 377, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [10, 2, 10, "enum_LAST_LEXICAL_USE"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 16, 9, "enum_NEXT_SYNTAX"], [17, 10, 10, "enum_LAST_LEXICAL_USE"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 26, 9, "enum_NEXT_SYNTAX"], [26, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [39, 29, 10, "enum_LAST_LEXICAL_USE"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [41, 17, 10, "enum_LAST_LEXICAL_USE"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [49, 35, 10, "enum_LAST_LEXICAL_USE"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [57, 33, 10, "enum_LAST_LEXICAL_USE"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 61, 9, "enum_NEXT_SYNTAX"], [62, 41, 10, "enum_LAST_LEXICAL_USE"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 71, 9, "enum_NEXT_SYNTAX"], [71, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [82, 57, 10, "enum_LAST_LEXICAL_USE"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 93, 9, "enum_NEXT_SYNTAX"], [94, 77, 10, "enum_LAST_LEXICAL_USE"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [105, 62, 10, "enum_LAST_LEXICAL_USE"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 113, 9, "enum_NEXT_SYNTAX"], [114, 105, 10, "enum_LAST_LEXICAL_USE"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [120, 98, 10, "enum_LAST_LEXICAL_USE"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 123, 9, "enum_NEXT_SYNTAX"], [123, 125, 9, "enum_NEXT_SYNTAX"], [126, 79, 10, "enum_LAST_LEXICAL_USE"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [128, 114, 10, "enum_LAST_LEXICAL_USE"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [136, 126, 10, "enum_LAST_LEXICAL_USE"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [139, 128, 10, "enum_LAST_LEXICAL_USE"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 152, 9, "enum_NEXT_SYNTAX"], [153, 136, 10, "enum_LAST_LEXICAL_USE"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [155, 139, 10, "enum_LAST_LEXICAL_USE"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [161, 153, 10, "enum_LAST_LEXICAL_USE"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [173, 75, 10, "enum_LAST_LEXICAL_USE"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [183, 161, 10, "enum_LAST_LEXICAL_USE"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 184, 9, "enum_NEXT_SYNTAX"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 187, 9, "enum_NEXT_SYNTAX"], [188, 155, 10, "enum_LAST_LEXICAL_USE"], [187, 188, 9, "enum_NEXT_SYNTAX"], [188, 189, 9, "enum_NEXT_SYNTAX"], [189, 190, 9, "enum_NEXT_SYNTAX"], [190, 191, 9, "enum_NEXT_SYNTAX"], [191, 192, 9, "enum_NEXT_SYNTAX"], [192, 193, 9, "enum_NEXT_SYNTAX"], [193, 194, 9, "enum_NEXT_SYNTAX"], [194, 195, 9, "enum_NEXT_SYNTAX"], [195, 197, 9, "enum_NEXT_SYNTAX"], [197, 200, 9, "enum_NEXT_SYNTAX"], [200, 201, 9, "enum_NEXT_SYNTAX"], [201, 202, 9, "enum_NEXT_SYNTAX"], [203, 165, 10, "enum_LAST_LEXICAL_USE"], [202, 203, 9, "enum_NEXT_SYNTAX"], [203, 204, 9, "enum_NEXT_SYNTAX"], [204, 205, 9, "enum_NEXT_SYNTAX"], [205, 207, 9, "enum_NEXT_SYNTAX"], [208, 188, 10, "enum_LAST_LEXICAL_USE"], [207, 208, 9, "enum_NEXT_SYNTAX"], [208, 209, 9, "enum_NEXT_SYNTAX"], [209, 210, 9, "enum_NEXT_SYNTAX"], [210, 211, 9, "enum_NEXT_SYNTAX"], [211, 212, 9, "enum_NEXT_SYNTAX"], [212, 213, 9, "enum_NEXT_SYNTAX"], [213, 214, 9, "enum_NEXT_SYNTAX"], [214, 215, 9, "enum_NEXT_SYNTAX"], [215, 217, 9, "enum_NEXT_SYNTAX"], [217, 220, 9, "enum_NEXT_SYNTAX"], [220, 221, 9, "enum_NEXT_SYNTAX"], [222, 183, 10, "enum_LAST_LEXICAL_USE"], [221, 222, 9, "enum_NEXT_SYNTAX"], [222, 223, 9, "enum_NEXT_SYNTAX"], [223, 224, 9, "enum_NEXT_SYNTAX"], [224, 225, 9, "enum_NEXT_SYNTAX"], [226, 203, 10, "enum_LAST_LEXICAL_USE"], [225, 226, 9, "enum_NEXT_SYNTAX"], [226, 227, 9, "enum_NEXT_SYNTAX"], [227, 228, 9, "enum_NEXT_SYNTAX"], [228, 230, 9, "enum_NEXT_SYNTAX"], [231, 208, 10, "enum_LAST_LEXICAL_USE"], [230, 231, 9, "enum_NEXT_SYNTAX"], [231, 232, 9, "enum_NEXT_SYNTAX"], [232, 233, 9, "enum_NEXT_SYNTAX"], [233, 234, 9, "enum_NEXT_SYNTAX"], [234, 235, 9, "enum_NEXT_SYNTAX"], [235, 236, 9, "enum_NEXT_SYNTAX"], [236, 237, 9, "enum_NEXT_SYNTAX"], [237, 238, 9, "enum_NEXT_SYNTAX"], [238, 239, 9, "enum_NEXT_SYNTAX"], [240, 222, 10, "enum_LAST_LEXICAL_USE"], [239, 240, 9, "enum_NEXT_SYNTAX"], [240, 241, 9, "enum_NEXT_SYNTAX"], [241, 242, 9, "enum_NEXT_SYNTAX"], [242, 243, 9, "enum_NEXT_SYNTAX"], [243, 244, 9, "enum_NEXT_SYNTAX"], [244, 245, 9, "enum_NEXT_SYNTAX"], [245, 246, 9, "enum_NEXT_SYNTAX"], [246, 248, 9, "enum_NEXT_SYNTAX"], [248, 250, 9, "enum_NEXT_SYNTAX"], [251, 240, 10, "enum_LAST_LEXICAL_USE"], [250, 251, 9, "enum_NEXT_SYNTAX"], [251, 252, 9, "enum_NEXT_SYNTAX"], [252, 253, 9, "enum_NEXT_SYNTAX"], [253, 254, 9, "enum_NEXT_SYNTAX"], [254, 255, 9, "enum_NEXT_SYNTAX"], [256, 251, 10, "enum_LAST_LEXICAL_USE"], [255, 256, 9, "enum_NEXT_SYNTAX"], [256, 257, 9, "enum_NEXT_SYNTAX"], [257, 258, 9, "enum_NEXT_SYNTAX"], [258, 259, 9, "enum_NEXT_SYNTAX"], [260, 226, 10, "enum_LAST_LEXICAL_USE"], [259, 260, 9, "enum_NEXT_SYNTAX"], [260, 261, 9, "enum_NEXT_SYNTAX"], [261, 263, 9, "enum_NEXT_SYNTAX"], [263, 264, 9, "enum_NEXT_SYNTAX"], [264, 265, 9, "enum_NEXT_SYNTAX"], [266, 256, 10, "enum_LAST_LEXICAL_USE"], [265, 266, 9, "enum_NEXT_SYNTAX"], [266, 267, 9, "enum_NEXT_SYNTAX"], [267, 268, 9, "enum_NEXT_SYNTAX"], [268, 269, 9, "enum_NEXT_SYNTAX"], [269, 270, 9, "enum_NEXT_SYNTAX"], [270, 271, 9, "enum_NEXT_SYNTAX"], [271, 272, 9, "enum_NEXT_SYNTAX"], [272, 274, 9, "enum_NEXT_SYNTAX"], [275, 266, 10, "enum_LAST_LEXICAL_USE"], [274, 275, 9, "enum_NEXT_SYNTAX"], [275, 276, 9, "enum_NEXT_SYNTAX"], [276, 277, 9, "enum_NEXT_SYNTAX"], [277, 278, 9, "enum_NEXT_SYNTAX"], [278, 279, 9, "enum_NEXT_SYNTAX"], [279, 281, 9, "enum_NEXT_SYNTAX"], [282, 231, 10, "enum_LAST_LEXICAL_USE"], [281, 282, 9, "enum_NEXT_SYNTAX"], [282, 283, 9, "enum_NEXT_SYNTAX"], [283, 284, 9, "enum_NEXT_SYNTAX"], [284, 285, 9, "enum_NEXT_SYNTAX"], [285, 286, 9, "enum_NEXT_SYNTAX"], [286, 287, 9, "enum_NEXT_SYNTAX"], [287, 288, 9, "enum_NEXT_SYNTAX"], [288, 289, 9, "enum_NEXT_SYNTAX"], [289, 290, 9, "enum_NEXT_SYNTAX"], [290, 291, 9, "enum_NEXT_SYNTAX"], [291, 292, 9, "enum_NEXT_SYNTAX"], [292, 293, 9, "enum_NEXT_SYNTAX"], [294, 282, 10, "enum_LAST_LEXICAL_USE"], [293, 294, 9, "enum_NEXT_SYNTAX"], [294, 295, 9, "enum_NEXT_SYNTAX"], [295, 296, 9, "enum_NEXT_SYNTAX"], [296, 297, 9, "enum_NEXT_SYNTAX"], [297, 298, 9, "enum_NEXT_SYNTAX"], [298, 299, 9, "enum_NEXT_SYNTAX"], [299, 300, 9, "enum_NEXT_SYNTAX"], [300, 301, 9, "enum_NEXT_SYNTAX"], [302, 173, 10, "enum_LAST_LEXICAL_USE"], [301, 302, 9, "enum_NEXT_SYNTAX"], [302, 303, 9, "enum_NEXT_SYNTAX"], [303, 304, 9, "enum_NEXT_SYNTAX"], [304, 305, 9, "enum_NEXT_SYNTAX"], [305, 306, 9, "enum_NEXT_SYNTAX"], [306, 307, 9, "enum_NEXT_SYNTAX"], [308, 275, 10, "enum_LAST_LEXICAL_USE"], [307, 308, 9, "enum_NEXT_SYNTAX"], [308, 309, 9, "enum_NEXT_SYNTAX"], [309, 310, 9, "enum_NEXT_SYNTAX"], [310, 311, 9, "enum_NEXT_SYNTAX"], [311, 312, 9, "enum_NEXT_SYNTAX"], [312, 313, 9, "enum_NEXT_SYNTAX"], [313, 314, 9, "enum_NEXT_SYNTAX"], [314, 315, 9, "enum_NEXT_SYNTAX"], [315, 316, 9, "enum_NEXT_SYNTAX"], [317, 294, 10, "enum_LAST_LEXICAL_USE"], [316, 317, 9, "enum_NEXT_SYNTAX"], [317, 318, 9, "enum_NEXT_SYNTAX"], [318, 319, 9, "enum_NEXT_SYNTAX"], [319, 320, 9, "enum_NEXT_SYNTAX"], [320, 321, 9, "enum_NEXT_SYNTAX"], [321, 322, 9, "enum_NEXT_SYNTAX"], [322, 323, 9, "enum_NEXT_SYNTAX"], [323, 324, 9, "enum_NEXT_SYNTAX"], [324, 325, 9, "enum_NEXT_SYNTAX"], [325, 326, 9, "enum_NEXT_SYNTAX"], [327, 308, 10, "enum_LAST_LEXICAL_USE"], [326, 327, 9, "enum_NEXT_SYNTAX"], [327, 328, 9, "enum_NEXT_SYNTAX"], [328, 329, 9, "enum_NEXT_SYNTAX"], [329, 330, 9, "enum_NEXT_SYNTAX"], [330, 331, 9, "enum_NEXT_SYNTAX"], [331, 332, 9, "enum_NEXT_SYNTAX"], [333, 302, 10, "enum_LAST_LEXICAL_USE"], [332, 333, 9, "enum_NEXT_SYNTAX"], [333, 334, 9, "enum_NEXT_SYNTAX"], [334, 335, 9, "enum_NEXT_SYNTAX"], [335, 336, 9, "enum_NEXT_SYNTAX"], [336, 337, 9, "enum_NEXT_SYNTAX"], [337, 338, 9, "enum_NEXT_SYNTAX"], [338, 339, 9, "enum_NEXT_SYNTAX"], [339, 340, 9, "enum_NEXT_SYNTAX"], [340, 341, 9, "enum_NEXT_SYNTAX"], [342, 327, 10, "enum_LAST_LEXICAL_USE"], [341, 342, 9, "enum_NEXT_SYNTAX"], [342, 343, 9, "enum_NEXT_SYNTAX"], [343, 344, 9, "enum_NEXT_SYNTAX"], [344, 345, 9, "enum_NEXT_SYNTAX"], [345, 346, 9, "enum_NEXT_SYNTAX"], [346, 347, 9, "enum_NEXT_SYNTAX"], [347, 348, 9, "enum_NEXT_SYNTAX"], [348, 349, 9, "enum_NEXT_SYNTAX"], [350, 317, 10, "enum_LAST_LEXICAL_USE"], [349, 350, 9, "enum_NEXT_SYNTAX"], [350, 351, 9, "enum_NEXT_SYNTAX"], [351, 352, 9, "enum_NEXT_SYNTAX"], [352, 353, 9, "enum_NEXT_SYNTAX"], [353, 354, 9, "enum_NEXT_SYNTAX"], [354, 355, 9, "enum_NEXT_SYNTAX"], [355, 356, 9, "enum_NEXT_SYNTAX"], [356, 357, 9, "enum_NEXT_SYNTAX"], [358, 333, 10, "enum_LAST_LEXICAL_USE"], [357, 358, 9, "enum_NEXT_SYNTAX"], [358, 359, 9, "enum_NEXT_SYNTAX"], [359, 360, 9, "enum_NEXT_SYNTAX"], [360, 361, 9, "enum_NEXT_SYNTAX"], [361, 362, 9, "enum_NEXT_SYNTAX"], [362, 363, 9, "enum_NEXT_SYNTAX"], [363, 364, 9, "enum_NEXT_SYNTAX"], [364, 365, 9, "enum_NEXT_SYNTAX"], [365, 366, 9, "enum_NEXT_SYNTAX"], [367, 350, 10, "enum_LAST_LEXICAL_USE"], [366, 367, 9, "enum_NEXT_SYNTAX"], [367, 368, 9, "enum_NEXT_SYNTAX"], [368, 369, 9, "enum_NEXT_SYNTAX"], [369, 370, 9, "enum_NEXT_SYNTAX"], [370, 371, 9, "enum_NEXT_SYNTAX"], [371, 372, 9, "enum_NEXT_SYNTAX"], [372, 373, 9, "enum_NEXT_SYNTAX"], [373, 374, 9, "enum_NEXT_SYNTAX"], [374, 375, 9, "enum_NEXT_SYNTAX"], [375, 376, 9, "enum_NEXT_SYNTAX"], [377, 367, 10, "enum_LAST_LEXICAL_USE"], [376, 377, 9, "enum_NEXT_SYNTAX"], [377, 378, 9, "enum_NEXT_SYNTAX"], [378, 379, 9, "enum_NEXT_SYNTAX"], [379, 380, 9, "enum_NEXT_SYNTAX"], [380, 381, 9, "enum_NEXT_SYNTAX"], [381, 382, 9, "enum_NEXT_SYNTAX"], [382, 383, 9, "enum_NEXT_SYNTAX"], [383, 384, 9, "enum_NEXT_SYNTAX"], [385, 358, 10, "enum_LAST_LEXICAL_USE"], [384, 385, 9, "enum_NEXT_SYNTAX"], [385, 386, 9, "enum_NEXT_SYNTAX"], [386, 387, 9, "enum_NEXT_SYNTAX"], [387, 388, 9, "enum_NEXT_SYNTAX"], [388, 389, 9, "enum_NEXT_SYNTAX"], [389, 390, 9, "enum_NEXT_SYNTAX"], [391, 342, 10, "enum_LAST_LEXICAL_USE"], [390, 391, 9, "enum_NEXT_SYNTAX"], [391, 392, 9, "enum_NEXT_SYNTAX"], [392, 393, 9, "enum_NEXT_SYNTAX"], [393, 394, 9, "enum_NEXT_SYNTAX"], [394, 395, 9, "enum_NEXT_SYNTAX"], [395, 396, 9, "enum_NEXT_SYNTAX"], [396, 397, 9, "enum_NEXT_SYNTAX"], [397, 398, 9, "enum_NEXT_SYNTAX"], [398, 399, 9, "enum_NEXT_SYNTAX"], [400, 377, 10, "enum_LAST_LEXICAL_USE"], [399, 400, 9, "enum_NEXT_SYNTAX"], [400, 401, 9, "enum_NEXT_SYNTAX"], [401, 402, 9, "enum_NEXT_SYNTAX"], [402, 403, 9, "enum_NEXT_SYNTAX"], [403, 404, 9, "enum_NEXT_SYNTAX"], [404, 405, 9, "enum_NEXT_SYNTAX"], [406, 391, 10, "enum_LAST_LEXICAL_USE"], [405, 406, 9, "enum_NEXT_SYNTAX"], [406, 407, 9, "enum_NEXT_SYNTAX"], [407, 408, 9, "enum_NEXT_SYNTAX"], [408, 409, 9, "enum_NEXT_SYNTAX"], [409, 410, 9, "enum_NEXT_SYNTAX"], [9, 28, 1, "enum_CFG_NEXT"], [9, 16, 1, "enum_CFG_NEXT"], [16, 26, 1, "enum_CFG_NEXT"], [28, 32, 1, "enum_CFG_NEXT"], [32, 56, 1, "enum_CFG_NEXT"], [56, 73, 1, "enum_CFG_NEXT"], [56, 61, 1, "enum_CFG_NEXT"], [61, 71, 1, "enum_CFG_NEXT"], [73, 94, 1, "enum_CFG_NEXT"], [94, 97, 1, "enum_CFG_NEXT"], [94, 152, 1, "enum_CFG_NEXT"], [97, 104, 1, "enum_CFG_NEXT"], [104, 113, 1, "enum_CFG_NEXT"], [104, 125, 1, "enum_CFG_NEXT"], [113, 123, 1, "enum_CFG_NEXT"], [125, 138, 1, "enum_CFG_NEXT"], [138, 164, 1, "enum_CFG_NEXT"], [152, 164, 1, "enum_CFG_NEXT"], [164, 182, 1, "enum_CFG_NEXT"], [182, 202, 1, "enum_CFG_NEXT"], [182, 187, 1, "enum_CFG_NEXT"], [187, 197, 1, "enum_CFG_NEXT"], [202, 225, 1, "enum_CFG_NEXT"], [202, 207, 1, "enum_CFG_NEXT"], [207, 217, 1, "enum_CFG_NEXT"], [225, 230, 1, "enum_CFG_NEXT"], [225, 250, 1, "enum_CFG_NEXT"], [230, 248, 1, "enum_CFG_NEXT"], [250, 265, 1, "enum_CFG_NEXT"], [265, 281, 1, "enum_CFG_NEXT"], [265, 274, 1, "enum_CFG_NEXT"], [274, 281, 1, "enum_CFG_NEXT"], [281, 316, 1, "enum_CFG_NEXT"], [316, 341, 1, "enum_CFG_NEXT"], [341, 366, 1, "enum_CFG_NEXT"], [10, 2, 3, "enum_LAST_WRITE"], [17, 10, 2, "enum_LAST_READ"], [17, 2, 3, "enum_LAST_WRITE"], [39, 29, 3, "enum_LAST_WRITE"], [41, 10, 2, "enum_LAST_READ"], [41, 2, 3, "enum_LAST_WRITE"], [49, 35, 2, "enum_LAST_READ"], [57, 33, 3, "enum_LAST_WRITE"], [62, 41, 2, "enum_LAST_READ"], [62, 2, 3, "enum_LAST_WRITE"], [82, 57, 2, "enum_LAST_READ"], [82, 33, 3, "enum_LAST_WRITE"], [94, 77, 3, "enum_LAST_WRITE"], [105, 41, 2, "enum_LAST_READ"], [105, 2, 3, "enum_LAST_WRITE"], [114, 105, 2, "enum_LAST_READ"], [114, 2, 3, "enum_LAST_WRITE"], [120, 98, 3, "enum_LAST_WRITE"], [128, 105, 2, "enum_LAST_READ"], [128, 2, 3, "enum_LAST_WRITE"], [136, 79, 3, "enum_LAST_WRITE"], [126, 136, 2, "enum_LAST_READ"], [126, 79, 3, "enum_LAST_WRITE"], [139, 128, 2, "enum_LAST_READ"], [139, 2, 3, "enum_LAST_WRITE"], [155, 41, 2, "enum_LAST_READ"], [155, 2, 3, "enum_LAST_WRITE"], [161, 79, 3, "enum_LAST_WRITE"], [153, 161, 2, "enum_LAST_READ"], [153, 79, 3, "enum_LAST_WRITE"], [173, 75, 3, "enum_LAST_WRITE"], [183, 136, 2, "enum_LAST_READ"], [183, 161, 2, "enum_LAST_READ"], [183, 126, 3, "enum_LAST_WRITE"], [183, 153, 3, "enum_LAST_WRITE"], [188, 139, 2, "enum_LAST_READ"], [188, 155, 2, "enum_LAST_READ"], [188, 2, 3, "enum_LAST_WRITE"], [203, 165, 3, "enum_LAST_WRITE"], [208, 139, 2, "enum_LAST_READ"], [208, 155, 2, "enum_LAST_READ"], [208, 2, 3, "enum_LAST_WRITE"], [222, 183, 2, "enum_LAST_READ"], [222, 126, 3, "enum_LAST_WRITE"], [222, 153, 3, "enum_LAST_WRITE"], [226, 203, 2, "enum_LAST_READ"], [226, 165, 3, "enum_LAST_WRITE"], [231, 139, 2, "enum_LAST_READ"], [231, 155, 2, "enum_LAST_READ"], [231, 2, 3, "enum_LAST_WRITE"], [240, 222, 2, "enum_LAST_READ"], [240, 126, 3, "enum_LAST_WRITE"], [240, 153, 3, "enum_LAST_WRITE"], [256, 222, 2, "enum_LAST_READ"], [256, 126, 3, "enum_LAST_WRITE"], [256, 153, 3, "enum_LAST_WRITE"], [260, 226, 2, "enum_LAST_READ"], [260, 165, 3, "enum_LAST_WRITE"], [251, 256, 2, "enum_LAST_READ"], [251, 126, 3, "enum_LAST_WRITE"], [251, 153, 3, "enum_LAST_WRITE"], [266, 251, 2, "enum_LAST_READ"], [266, 126, 3, "enum_LAST_WRITE"], [266, 153, 3, "enum_LAST_WRITE"], [275, 266, 2, "enum_LAST_READ"], [275, 126, 3, "enum_LAST_WRITE"], [275, 153, 3, "enum_LAST_WRITE"], [282, 139, 2, "enum_LAST_READ"], [282, 155, 2, "enum_LAST_READ"], [282, 2, 3, "enum_LAST_WRITE"], [294, 282, 2, "enum_LAST_READ"], [294, 2, 3, "enum_LAST_WRITE"], [302, 173, 2, "enum_LAST_READ"], [302, 75, 3, "enum_LAST_WRITE"], [308, 275, 2, "enum_LAST_READ"], [308, 266, 2, "enum_LAST_READ"], [308, 126, 3, "enum_LAST_WRITE"], [308, 153, 3, "enum_LAST_WRITE"], [317, 294, 2, "enum_LAST_READ"], [317, 2, 3, "enum_LAST_WRITE"], [327, 308, 2, "enum_LAST_READ"], [327, 126, 3, "enum_LAST_WRITE"], [327, 153, 3, "enum_LAST_WRITE"], [333, 302, 2, "enum_LAST_READ"], [333, 75, 3, "enum_LAST_WRITE"], [342, 327, 2, "enum_LAST_READ"], [342, 126, 3, "enum_LAST_WRITE"], [342, 153, 3, "enum_LAST_WRITE"], [350, 317, 2, "enum_LAST_READ"], [350, 2, 3, "enum_LAST_WRITE"], [358, 333, 2, "enum_LAST_READ"], [358, 75, 3, "enum_LAST_WRITE"], [367, 350, 2, "enum_LAST_READ"], [367, 2, 3, "enum_LAST_WRITE"], [377, 367, 2, "enum_LAST_READ"], [377, 2, 3, "enum_LAST_WRITE"], [385, 358, 2, "enum_LAST_READ"], [385, 75, 3, "enum_LAST_WRITE"], [391, 342, 2, "enum_LAST_READ"], [391, 126, 3, "enum_LAST_WRITE"], [391, 153, 3, "enum_LAST_WRITE"], [400, 377, 2, "enum_LAST_READ"], [400, 2, 3, "enum_LAST_WRITE"], [406, 391, 2, "enum_LAST_READ"], [406, 126, 3, "enum_LAST_WRITE"], [406, 153, 3, "enum_LAST_WRITE"], [33, 39, 4, "enum_COMPUTED_FROM"], [33, 35, 4, "enum_COMPUTED_FROM"], [33, 49, 4, "enum_COMPUTED_FROM"], [33, 41, 4, "enum_COMPUTED_FROM"], [76, 82, 4, "enum_COMPUTED_FROM"], [165, 167, 4, "enum_COMPUTED_FROM"], [165, 173, 4, "enum_COMPUTED_FROM"], [252, 260, 4, "enum_COMPUTED_FROM"], [252, 256, 4, "enum_COMPUTED_FROM"], [126, 136, 4, "enum_COMPUTED_FROM"], [126, 128, 4, "enum_COMPUTED_FROM"], [153, 161, 4, "enum_COMPUTED_FROM"], [153, 155, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "shinymud", "repo": "ShinyMUD", "path": "src/shinymud/commands/commands.py", "id": 50385, "has_bug": false, "code_full": "import re\nfrom typing import Any, Optional\n\n\nclass Locaiton:\n    def get_npc_by_kw(self, player: str) -> Optional[\"Player\"]:\n        pass\n\nclass Player:\n    name: str\n    permissions: int\n    location: Locaiton\n\n    def fancy_name(self) -> str:\n        return \"\"\n    \n    def is_npc(self) -> bool:\n        return False\n    \n    def save(self):\n        pass\n\n    def update_output(self, message: str):\n        pass\n\nclass World:\n    def get_player(self, name: str) -> Optional[Player]:\n        pass\n\n    def tell_players(self, message: str, players: list[str]):\n        pass\n\n    @property\n    def play_log(self) -> Any:\n        pass\n\n\nclass Class:\n    pc: Player\n    args: str\n    world: World\n\n    def execute(self) -> None:\n        if not self.args:\n            self.pc.update_output(\"Bestow what authority upon whom?\n\")\n            return\n        exp: str = \"(?P<permission>(god)|(dm)|(builder)|(admin))[ ]?(to)?(on)?(upon)?([ ]+(?P<npc>npc))?([ ]+(?P<player>\\w+))\"\n        match: Optional[re.Match] = re.match(exp, self.args.lower(), re.I)\n        if not match:\n            self.pc.update_output('Type \"help bestow\" for help on this command.')\n            return\n        (perm, npc, player) = match.group(\"permission\", \"npc\", \"player\")\n        if npc:\n            error: str = \"Npc doesn't exist.\"\n            if not self.pc.location:\n                self.pc.update_output(error)\n                return\n            player: Optional[Player] = self.pc.location.get_npc_by_kw(player)\n            self.pc.update_output(\n                'WARNING: giving npcs wider permissions can be dangerous. See \"help bestow\".'\n            )\n        else:\n            player: Optional[Player] = self.world.get_player(player)\n        permission: Optional[int] = globals().get(perm.upper())\n        if not player:\n            self.pc.update_output(\"That player isn't on right now.\")\n            return\n        if not permission:\n            self.pc.update_output(\n                \"Valid permission types are: god, dm, builder, and admin.\"\n            )\n            return\n        if player.permissions & permission:\n            self.pc.update_output((\"%s already has that authority.\" % player.fancy_name()))\n            return\n        player.permissions = player.permissions | permission\n        if not player.is_npc():\n            player.save()\n        self.world.play_log.info(\n            (\n                \"%s bestowed the authority of %s upon %s.\"\n                % (self.pc.fancy_name(), perm.upper(), player.fancy_name())\n            )\n        )\n        self.pc.update_output(\n            (\"%s now has the privilige of being %s.\" % (player.fancy_name(), perm.upper()))\n        )\n        player.update_output(\n            (\n                \"%s has bestowed the authority of %s upon you!\"\n                % (self.pc.fancy_name(), perm.upper())\n            )\n        )\n        self.world.tell_players(\n            (\n                \"%s has bestowed the authority of %s upon %s!\"\n                % (self.pc.fancy_name(), perm.upper(), player.fancy_name())\n            ),\n            [self.pc.name, player.name],\n        )\n\n", "code": "def execute(self) -> None:\n    if not self.args:\n        self.pc.update_output(\"Bestow what authority upon whom?\n\")\n        return\n    exp: str = \"(?P<permission>(god)|(dm)|(builder)|(admin))[ ]?(to)?(on)?(upon)?([ ]+(?P<npc>npc))?([ ]+(?P<player>\\w+))\"\n    match: Optional[re.Match] = re.match(exp, self.args.lower(), re.I)\n    if not match:\n        self.pc.update_output('Type \"help bestow\" for help on this command.')\n        return\n    (perm, npc, player) = match.group(\"permission\", \"npc\", \"player\")\n    if npc:\n        error: str = \"Npc doesn't exist.\"\n        if not self.pc.location:\n            self.pc.update_output(error)\n            return\n        player: Optional[Player] = self.pc.location.get_npc_by_kw(player)\n        self.pc.update_output(\n            'WARNING: giving npcs wider permissions can be dangerous. See \"help bestow\".'\n        )\n    else:\n        player: Optional[Player] = self.world.get_player(player)\n    permission: Optional[int] = globals().get(perm.upper())\n    if not player:\n        self.pc.update_output(\"That player isn't on right now.\")\n        return\n    if not permission:\n        self.pc.update_output(\n            \"Valid permission types are: god, dm, builder, and admin.\"\n        )\n        return\n    if player.permissions & permission:\n        self.pc.update_output((\"%s already has that authority.\" % player.fancy_name()))\n        return\n    player.permissions = player.permissions | permission\n    if not player.is_npc():\n        player.save()\n    self.world.play_log.info(\n        (\n            \"%s bestowed the authority of %s upon %s.\"\n            % (self.pc.fancy_name(), perm.upper(), player.fancy_name())\n        )\n    )\n    self.pc.update_output(\n        (\"%s now has the privilige of being %s.\" % (player.fancy_name(), perm.upper()))\n    )\n    player.update_output(\n        (\n            \"%s has bestowed the authority of %s upon you!\"\n            % (self.pc.fancy_name(), perm.upper())\n        )\n    )\n    self.world.tell_players(\n        (\n            \"%s has bestowed the authority of %s upon %s!\"\n            % (self.pc.fancy_name(), perm.upper(), player.fancy_name())\n        ),\n        [self.pc.name, player.name],\n    )\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "3f659d8be4468c9a8745b8797f5f96c2bc86533c"}
{"source_tokens": ["#NEWLINE#", "def _eval_inverse(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "return", "MatMul", "(", "*", "[", "(", "arg", ".", "inverse", "(", ")", "if", "isinstance", "(", "arg", ",", "MatrixExpr", ")", "else", "(", "arg", "**", "(", "-", "1", ")", ")", ")", "for", "arg", "in", "self", ".", "args", "[", ":", ":", "(", "-", "1", ")", "]", "]", ")", ".", "doit", "(", ")", "#NEWLINE#", "#UNINDENT#", "except", "ShapeError", ":", "#NEWLINE#", "#INDENT#", "from", "sympy.matrices.expressions.inverse", "import", "Inverse", "#NEWLINE#", "return", "Inverse", "(", "self", ")"], "edges": [[11, 57, 7, "enum_FIELD"], [61, 62, 7, "enum_FIELD"], [57, 55, 7, "enum_FIELD"], [71, 73, 7, "enum_FIELD"], [55, 13, 7, "enum_FIELD"], [73, 72, 7, "enum_FIELD"], [13, 12, 7, "enum_FIELD"], [14, 15, 7, "enum_FIELD"], [15, 22, 7, "enum_FIELD"], [22, 26, 7, "enum_FIELD"], [22, 20, 7, "enum_FIELD"], [22, 32, 7, "enum_FIELD"], [39, 40, 7, "enum_FIELD"], [39, 45, 7, "enum_FIELD"], [26, 23, 7, "enum_FIELD"], [20, 18, 7, "enum_FIELD"], [32, 31, 7, "enum_FIELD"], [32, 34, 7, "enum_FIELD"], [45, 43, 7, "enum_FIELD"], [45, 46, 7, "enum_FIELD"], [18, 17, 7, "enum_FIELD"], [34, 35, 7, "enum_FIELD"], [43, 42, 7, "enum_FIELD"], [46, 49, 7, "enum_FIELD"], [49, 50, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [25, 17, 10, "enum_LAST_LEXICAL_USE"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [31, 25, 10, "enum_LAST_LEXICAL_USE"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [40, 31, 10, "enum_LAST_LEXICAL_USE"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [42, 2, 10, "enum_LAST_LEXICAL_USE"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [74, 42, 10, "enum_LAST_LEXICAL_USE"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [11, 62, 1, "enum_CFG_NEXT"], [62, 67, 1, "enum_CFG_NEXT"], [67, 71, 1, "enum_CFG_NEXT"], [17, 25, 2, "enum_LAST_READ"], [31, 17, 2, "enum_LAST_READ"], [40, 31, 2, "enum_LAST_READ"], [42, 2, 3, "enum_LAST_WRITE"], [74, 42, 2, "enum_LAST_READ"], [74, 2, 3, "enum_LAST_WRITE"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "sympy", "repo": "sympy", "path": "sympy/matrices/expressions/matmul.py", "id": 53524, "has_bug": false, "type_checked_mypy": true, "type_checked_pytype": true, "type_error_label": "", "hash": "b3a7107fdf9c527b7d15875a6384887f2bdb83cb", "code_full": "from typing import Any, List\n\n\nclass MatMul:\n    def doit(self) -> \"MatMul\":\n        return self\n\nclass ShapeError(Exception):\n    pass\n\nclass MatrixExpr:\n    def inverse(self) -> \"MatrixExpr\":\n        return self\n\nargs: List[Any] = []\n\ndef _eval_inverse(self) -> \"MatMul\":\n    try:\n        return MatMul(*[(arg.inverse() if isinstance(arg,MatrixExpr) else (arg**(-1))) for arg in self.args[::(-1)]]).doit()\n    except ShapeError:\n        from sympy.matrices.expressions.inverse import Inverse\n        return Inverse(self)\n", "code": "def _eval_inverse(self) -> \"MatMul\":\n    try:\n        return MatMul(*[(arg.inverse() if isinstance(arg,MatrixExpr) else (arg**(-1))) for arg in self.args[::(-1)]]).doit()\n    except ShapeError:\n        from sympy.matrices.expressions.inverse import Inverse\n        return Inverse(self)\n"}
{"source_tokens": ["#NEWLINE#", "def read_location(", "val", ")", ":", "#NEWLINE#", "#INDENT#", "loc", "=", "val", ".", "split", "(", "','", ")", "#NEWLINE#", "return", "world", ".", "get_location", "(", "loc", "[", "0", "]", ",", "loc", "[", "1", "]", ")"], "edges": [[6, 12, 7, "enum_FIELD"], [16, 25, 7, "enum_FIELD"], [12, 10, 7, "enum_FIELD"], [25, 18, 7, "enum_FIELD"], [10, 9, 7, "enum_FIELD"], [18, 17, 7, "enum_FIELD"], [22, 21, 7, "enum_FIELD"], [22, 23, 7, "enum_FIELD"], [27, 26, 7, "enum_FIELD"], [27, 28, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [9, 2, 10, "enum_LAST_LEXICAL_USE"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [21, 7, 10, "enum_LAST_LEXICAL_USE"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [26, 21, 10, "enum_LAST_LEXICAL_USE"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [6, 16, 1, "enum_CFG_NEXT"], [9, 2, 3, "enum_LAST_WRITE"], [21, 7, 3, "enum_LAST_WRITE"], [26, 21, 2, "enum_LAST_READ"], [26, 7, 3, "enum_LAST_WRITE"], [7, 9, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "shinymud", "repo": "ShinyMUD", "path": "src/shinymud/models/shiny_types.py", "id": 50235, "has_bug": false, "code_full": "\nfrom typing import Any\n\n\nclass World:\n    def get_location(self, area_name: str, room_id: str) -> Any:\n        pass\n\nworld = World()\n\ndef read_location(val: str) -> Any:\n    loc: list[str]=val.split(',')\n    return world.get_location(loc[0],loc[1])\n", "code": "def read_location(val: str) -> Any:\n    loc: list[str]=val.split(',')\n    return world.get_location(loc[0],loc[1])\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "3f659d8be4468c9a8745b8797f5f96c2bc86533c"}
{"source_tokens": ["#NEWLINE#", "@", "classmethod", "#NEWLINE#", "def __setgluestate__(", "cls", ",", "rec", ",", "context", ")", ":", "#NEWLINE#", "#INDENT#", "result", "=", "cls", "(", ")", "#NEWLINE#", "(", "yield", "result", ")", "#NEWLINE#", "result", ".", "subset_state", "=", "context", ".", "object", "(", "rec", "[", "'state'", "]", ")", "#NEWLINE#", "result", ".", "label", "=", "rec", "[", "'label'", "]", "#NEWLINE#", "result", ".", "style", "=", "context", ".", "object", "(", "rec", "[", "'style'", "]", ")", "#NEWLINE#", "result", ".", "style", ".", "parent", "=", "result", "#NEWLINE#", "result", ".", "subsets", "=", "list", "(", "map", "(", "context", ".", "object", ",", "rec", "[", "'subsets'", "]", ")", ")"], "edges": [[1, 6, 7, "enum_FIELD"], [13, 17, 7, "enum_FIELD"], [19, 21, 7, "enum_FIELD"], [24, 32, 7, "enum_FIELD"], [38, 44, 7, "enum_FIELD"], [47, 55, 7, "enum_FIELD"], [61, 68, 7, "enum_FIELD"], [69, 75, 7, "enum_FIELD"], [17, 16, 7, "enum_FIELD"], [21, 22, 7, "enum_FIELD"], [26, 25, 7, "enum_FIELD"], [32, 30, 7, "enum_FIELD"], [40, 39, 7, "enum_FIELD"], [44, 43, 7, "enum_FIELD"], [44, 45, 7, "enum_FIELD"], [49, 48, 7, "enum_FIELD"], [55, 53, 7, "enum_FIELD"], [65, 63, 7, "enum_FIELD"], [71, 70, 7, "enum_FIELD"], [75, 74, 7, "enum_FIELD"], [30, 29, 7, "enum_FIELD"], [34, 33, 7, "enum_FIELD"], [34, 35, 7, "enum_FIELD"], [53, 52, 7, "enum_FIELD"], [57, 56, 7, "enum_FIELD"], [57, 58, 7, "enum_FIELD"], [63, 62, 7, "enum_FIELD"], [81, 76, 7, "enum_FIELD"], [79, 78, 7, "enum_FIELD"], [83, 82, 7, "enum_FIELD"], [83, 84, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [16, 5, 10, "enum_LAST_LEXICAL_USE"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [22, 14, 10, "enum_LAST_LEXICAL_USE"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [25, 22, 10, "enum_LAST_LEXICAL_USE"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [29, 9, 10, "enum_LAST_LEXICAL_USE"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [33, 7, 10, "enum_LAST_LEXICAL_USE"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [39, 25, 10, "enum_LAST_LEXICAL_USE"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [43, 33, 10, "enum_LAST_LEXICAL_USE"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [48, 39, 10, "enum_LAST_LEXICAL_USE"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [52, 29, 10, "enum_LAST_LEXICAL_USE"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [56, 43, 10, "enum_LAST_LEXICAL_USE"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [62, 48, 10, "enum_LAST_LEXICAL_USE"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [68, 62, 10, "enum_LAST_LEXICAL_USE"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [70, 68, 10, "enum_LAST_LEXICAL_USE"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [78, 52, 10, "enum_LAST_LEXICAL_USE"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [82, 56, 10, "enum_LAST_LEXICAL_USE"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [2, 1, 1, "enum_CFG_NEXT"], [6, 13, 1, "enum_CFG_NEXT"], [13, 19, 1, "enum_CFG_NEXT"], [19, 24, 1, "enum_CFG_NEXT"], [24, 38, 1, "enum_CFG_NEXT"], [38, 47, 1, "enum_CFG_NEXT"], [47, 61, 1, "enum_CFG_NEXT"], [61, 69, 1, "enum_CFG_NEXT"], [16, 5, 3, "enum_LAST_WRITE"], [22, 14, 3, "enum_LAST_WRITE"], [29, 9, 3, "enum_LAST_WRITE"], [33, 7, 3, "enum_LAST_WRITE"], [25, 22, 2, "enum_LAST_READ"], [25, 14, 3, "enum_LAST_WRITE"], [43, 33, 2, "enum_LAST_READ"], [43, 7, 3, "enum_LAST_WRITE"], [39, 25, 2, "enum_LAST_READ"], [39, 14, 3, "enum_LAST_WRITE"], [52, 29, 2, "enum_LAST_READ"], [52, 9, 3, "enum_LAST_WRITE"], [56, 43, 2, "enum_LAST_READ"], [56, 7, 3, "enum_LAST_WRITE"], [48, 39, 2, "enum_LAST_READ"], [48, 14, 3, "enum_LAST_WRITE"], [68, 48, 2, "enum_LAST_READ"], [68, 14, 3, "enum_LAST_WRITE"], [62, 68, 2, "enum_LAST_READ"], [62, 14, 3, "enum_LAST_WRITE"], [78, 52, 2, "enum_LAST_READ"], [78, 9, 3, "enum_LAST_WRITE"], [82, 56, 2, "enum_LAST_READ"], [82, 7, 3, "enum_LAST_WRITE"], [70, 62, 2, "enum_LAST_READ"], [70, 14, 3, "enum_LAST_WRITE"], [14, 16, 4, "enum_COMPUTED_FROM"], [26, 29, 4, "enum_COMPUTED_FROM"], [26, 33, 4, "enum_COMPUTED_FROM"], [40, 43, 4, "enum_COMPUTED_FROM"], [49, 52, 4, "enum_COMPUTED_FROM"], [49, 56, 4, "enum_COMPUTED_FROM"], [65, 68, 4, "enum_COMPUTED_FROM"], [71, 74, 4, "enum_COMPUTED_FROM"], [71, 76, 4, "enum_COMPUTED_FROM"], [71, 78, 4, "enum_COMPUTED_FROM"], [71, 82, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "glue-viz", "repo": "glue", "path": "glue/core/subset_group.py", "id": 16964, "has_bug": false, "code_full": "from typing import Any, Dict, Generator, List\n\n\nclass Context:\n    def object(self, rec: Dict[str, Any]) -> Any:\n        pass\n\n\nclass Class:\n    subset_state: Any\n    label: str\n    style: Any\n    subsets: List[Any]\n\n    @classmethod\n    def __setgluestate__(cls: type[\"Class\"], rec: Dict[str, Any], context: Context) -> Generator['Class', None, None]:\n        result = cls()\n        yield result\n        result.subset_state = context.object(rec[\"state\"])\n        result.label = rec[\"label\"]\n        result.style = context.object(rec[\"style\"])\n        result.style.parent = result\n        result.subsets = list(map(context.object, rec[\"subsets\"]))\n", "code": "@classmethod\ndef __setgluestate__(cls: type[\"Class\"], rec: Dict[str, Any], context: Context) -> Generator['Class', None, None]:\n    result = cls()\n    yield result\n    result.subset_state = context.object(rec[\"state\"])\n    result.label = rec[\"label\"]\n    result.style = context.object(rec[\"style\"])\n    result.style.parent = result\n    result.subsets = list(map(context.object, rec[\"subsets\"]))\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "bbffefc8980b2b75522a0d276eede7be1b4d5235"}
{"source_tokens": ["#NEWLINE#", "def ask_program(", "message", ")", ":", "#NEWLINE#", "#INDENT#", "'Ask the user to enter a path\\n    to a program.\\n\\n    Look for it in PATH. If not found,\\n    ask the user to enter the full path.\\n\\n    If still not found, give up ...\\n    '", "#NEWLINE#", "keep_going", "=", "True", "#NEWLINE#", "while", "keep_going", ":", "#NEWLINE#", "#INDENT#", "full_path", "=", "ask_string", "(", "message", ")", "#NEWLINE#", "if", "(", "not", "full_path", ")", ":", "#NEWLINE#", "#INDENT#", "break", "#NEWLINE#", "#UNINDENT#", "full_path", "=", "qisys", ".", "sh", ".", "to_native_path", "(", "full_path", ")", "#NEWLINE#", "if", "(", "not", "os", ".", "path", ".", "exists", "(", "full_path", ")", ")", ":", "#NEWLINE#", "#INDENT#", "ui", ".", "error", "(", "(", "'%s does not exist'", "%", "full_path", ")", ")", "#NEWLINE#", "keep_going", "=", "ask_yes_no", "(", "'continue?'", ")", "#NEWLINE#", "continue", "#NEWLINE#", "#UNINDENT#", "if", "(", "not", "os", ".", "access", "(", "full_path", ",", "os", ".", "X_OK", ")", ")", ":", "#NEWLINE#", "#INDENT#", "ui", ".", "error", "(", "(", "'%s is not a valid executable!'", "%", "full_path", ")", ")", "#NEWLINE#", "keep_going", "=", "ask_yes_no", "(", "'continue?'", ")", "#NEWLINE#", "continue", "#NEWLINE#", "#UNINDENT#", "return", "full_path"], "edges": [[6, 7, 7, "enum_FIELD"], [8, 11, 7, "enum_FIELD"], [13, 14, 7, "enum_FIELD"], [17, 21, 7, "enum_FIELD"], [25, 27, 7, "enum_FIELD"], [35, 43, 7, "enum_FIELD"], [47, 49, 7, "enum_FIELD"], [83, 85, 7, "enum_FIELD"], [121, 122, 7, "enum_FIELD"], [21, 20, 7, "enum_FIELD"], [27, 28, 7, "enum_FIELD"], [43, 41, 7, "enum_FIELD"], [49, 55, 7, "enum_FIELD"], [61, 65, 7, "enum_FIELD"], [72, 76, 7, "enum_FIELD"], [85, 91, 7, "enum_FIELD"], [99, 103, 7, "enum_FIELD"], [110, 114, 7, "enum_FIELD"], [41, 39, 7, "enum_FIELD"], [55, 53, 7, "enum_FIELD"], [65, 63, 7, "enum_FIELD"], [76, 75, 7, "enum_FIELD"], [91, 87, 7, "enum_FIELD"], [103, 101, 7, "enum_FIELD"], [114, 113, 7, "enum_FIELD"], [39, 38, 7, "enum_FIELD"], [53, 51, 7, "enum_FIELD"], [63, 62, 7, "enum_FIELD"], [68, 67, 7, "enum_FIELD"], [68, 69, 7, "enum_FIELD"], [87, 86, 7, "enum_FIELD"], [93, 92, 7, "enum_FIELD"], [101, 100, 7, "enum_FIELD"], [106, 105, 7, "enum_FIELD"], [106, 107, 7, "enum_FIELD"], [51, 50, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 13, 9, "enum_NEXT_SYNTAX"], [14, 9, 10, "enum_LAST_LEXICAL_USE"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [22, 2, 10, "enum_LAST_LEXICAL_USE"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [28, 18, 10, "enum_LAST_LEXICAL_USE"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 33, 9, "enum_NEXT_SYNTAX"], [33, 35, 9, "enum_NEXT_SYNTAX"], [36, 28, 10, "enum_LAST_LEXICAL_USE"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [44, 36, 10, "enum_LAST_LEXICAL_USE"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [56, 44, 10, "enum_LAST_LEXICAL_USE"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [69, 56, 10, "enum_LAST_LEXICAL_USE"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [73, 14, 10, "enum_LAST_LEXICAL_USE"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 80, 9, "enum_NEXT_SYNTAX"], [80, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [86, 50, 10, "enum_LAST_LEXICAL_USE"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [90, 69, 10, "enum_LAST_LEXICAL_USE"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [92, 86, 10, "enum_LAST_LEXICAL_USE"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 99, 9, "enum_NEXT_SYNTAX"], [100, 62, 10, "enum_LAST_LEXICAL_USE"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [107, 90, 10, "enum_LAST_LEXICAL_USE"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [111, 73, 10, "enum_LAST_LEXICAL_USE"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [113, 75, 10, "enum_LAST_LEXICAL_USE"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 118, 9, "enum_NEXT_SYNTAX"], [118, 121, 9, "enum_NEXT_SYNTAX"], [122, 107, 10, "enum_LAST_LEXICAL_USE"], [121, 122, 9, "enum_NEXT_SYNTAX"], [6, 8, 1, "enum_CFG_NEXT"], [8, 14, 1, "enum_CFG_NEXT"], [14, 17, 1, "enum_CFG_NEXT"], [17, 27, 1, "enum_CFG_NEXT"], [27, 35, 1, "enum_CFG_NEXT"], [35, 49, 1, "enum_CFG_NEXT"], [49, 85, 1, "enum_CFG_NEXT"], [49, 61, 1, "enum_CFG_NEXT"], [61, 72, 1, "enum_CFG_NEXT"], [72, 14, 1, "enum_CFG_NEXT"], [85, 99, 1, "enum_CFG_NEXT"], [85, 121, 1, "enum_CFG_NEXT"], [99, 110, 1, "enum_CFG_NEXT"], [110, 14, 1, "enum_CFG_NEXT"], [14, 14, 2, "enum_LAST_READ"], [14, 73, 3, "enum_LAST_WRITE"], [14, 9, 3, "enum_LAST_WRITE"], [14, 111, 3, "enum_LAST_WRITE"], [20, 20, 2, "enum_LAST_READ"], [22, 22, 2, "enum_LAST_READ"], [22, 2, 3, "enum_LAST_WRITE"], [18, 107, 2, "enum_LAST_READ"], [18, 69, 2, "enum_LAST_READ"], [18, 36, 3, "enum_LAST_WRITE"], [28, 107, 2, "enum_LAST_READ"], [28, 69, 2, "enum_LAST_READ"], [28, 18, 3, "enum_LAST_WRITE"], [38, 38, 2, "enum_LAST_READ"], [44, 28, 2, "enum_LAST_READ"], [44, 18, 3, "enum_LAST_WRITE"], [36, 44, 2, "enum_LAST_READ"], [36, 18, 3, "enum_LAST_WRITE"], [50, 50, 2, "enum_LAST_READ"], [50, 92, 2, "enum_LAST_READ"], [56, 44, 2, "enum_LAST_READ"], [56, 36, 3, "enum_LAST_WRITE"], [62, 100, 2, "enum_LAST_READ"], [62, 62, 2, "enum_LAST_READ"], [69, 56, 2, "enum_LAST_READ"], [69, 36, 3, "enum_LAST_WRITE"], [75, 113, 2, "enum_LAST_READ"], [75, 75, 2, "enum_LAST_READ"], [73, 14, 2, "enum_LAST_READ"], [73, 73, 3, "enum_LAST_WRITE"], [73, 9, 3, "enum_LAST_WRITE"], [73, 111, 3, "enum_LAST_WRITE"], [86, 50, 2, "enum_LAST_READ"], [90, 56, 2, "enum_LAST_READ"], [90, 36, 3, "enum_LAST_WRITE"], [92, 86, 2, "enum_LAST_READ"], [100, 100, 2, "enum_LAST_READ"], [100, 62, 2, "enum_LAST_READ"], [107, 90, 2, "enum_LAST_READ"], [107, 36, 3, "enum_LAST_WRITE"], [113, 113, 2, "enum_LAST_READ"], [113, 75, 2, "enum_LAST_READ"], [111, 14, 2, "enum_LAST_READ"], [111, 73, 3, "enum_LAST_WRITE"], [111, 9, 3, "enum_LAST_WRITE"], [111, 111, 3, "enum_LAST_WRITE"], [122, 90, 2, "enum_LAST_READ"], [122, 36, 3, "enum_LAST_WRITE"], [18, 20, 4, "enum_COMPUTED_FROM"], [18, 22, 4, "enum_COMPUTED_FROM"], [36, 44, 4, "enum_COMPUTED_FROM"], [36, 38, 4, "enum_COMPUTED_FROM"], [73, 75, 4, "enum_COMPUTED_FROM"], [111, 113, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "aldebaran", "repo": "qibuild", "path": "python/qisys/interact.py", "id": 9885, "has_bug": false, "code_full": "import os\nfrom typing import Any, Optional\n\n\ndef ask_string(message) -> Optional[str]:\n    return \"\"\n\nqisys: Any = None\nui: Any = None\n\ndef ask_yes_no(message) -> bool:\n    return False\n\ndef ask_program(message: Optional[str]) -> Optional[str]:\n    \"\"\"\n    Ask the user to enter a path to a program.\n    Look for it in PATH. If not found,\n    ask the user to enter the full path.\n    If still not found, give up ...\n    \"\"\"\n    keep_going = True\n    while keep_going:\n        full_path = ask_string(message)\n        if not full_path:\n            break\n        full_path: str = qisys.sh.to_native_path(full_path)\n        if not os.path.exists(full_path):\n            ui.error(\"%s does not exist\" % full_path)\n            keep_going = ask_yes_no(\"continue?\")\n            continue\n        if not os.access(full_path, os.X_OK):\n            ui.error(\"%s is not a valid executable!\" % full_path)\n            keep_going = ask_yes_no(\"continue?\")\n            continue\n        return full_path\n", "code": "def ask_program(message: Optional[str]) -> Optional[str]:\n    \"\"\"\n    Ask the user to enter a path to a program.\n    Look for it in PATH. If not found,\n    ask the user to enter the full path.\n    If still not found, give up ...\n    \"\"\"\n    keep_going = True\n    while keep_going:\n        full_path = ask_string(message)\n        if not full_path:\n            break\n        full_path: str = qisys.sh.to_native_path(full_path)\n        if not os.path.exists(full_path):\n            ui.error(\"%s does not exist\" % full_path)\n            keep_going = ask_yes_no(\"continue?\")\n            continue\n        if not os.access(full_path, os.X_OK):\n            ui.error(\"%s is not a valid executable!\" % full_path)\n            keep_going = ask_yes_no(\"continue?\")\n            continue\n        return full_path\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "efea6fa3744664348717fe5e8df708a3cf392072"}
{"source_tokens": ["#NEWLINE#", "def setUser(", "self", ",", "user", ",", "flush", "=", "True", ")", ":", "#NEWLINE#", "#INDENT#", "'Sets a user (given its id) to the IrcUser given it.'", "#NEWLINE#", "self", ".", "nextId", "=", "max", "(", "self", ".", "nextId", ",", "user", ".", "id", ")", "#NEWLINE#", "try", ":", "#NEWLINE#", "#INDENT#", "if", "(", "self", ".", "getUserId", "(", "user", ".", "name", ")", "!=", "user", ".", "id", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "DuplicateHostmask", "(", "user", ".", "name", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "except", "KeyError", ":", "#NEWLINE#", "#INDENT#", "pass", "#NEWLINE#", "#UNINDENT#", "for", "hostmask", "in", "user", ".", "hostmasks", ":", "#NEWLINE#", "#INDENT#", "for", "(", "i", ",", "u", ")", "in", "self", ".", "items", "(", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "i", "==", "user", ".", "id", ")", ":", "#NEWLINE#", "#INDENT#", "continue", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "u", ".", "checkHostmask", "(", "hostmask", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "DuplicateHostmask", "(", "hostmask", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "for", "otherHostmask", "in", "u", ".", "hostmasks", ":", "#NEWLINE#", "#INDENT#", "if", "ircutils", ".", "hostmaskPatternEqual", "(", "hostmask", ",", "otherHostmask", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "DuplicateHostmask", "(", "hostmask", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "self", ".", "invalidateCache", "(", "user", ".", "id", ")", "#NEWLINE#", "self", ".", "users", "[", "user", ".", "id", "]", "=", "user", "#NEWLINE#", "if", "flush", ":", "#NEWLINE#", "#INDENT#", "self", ".", "flush", "(", ")"], "edges": [[1, 5, 7, "enum_FIELD"], [12, 13, 7, "enum_FIELD"], [14, 24, 7, "enum_FIELD"], [72, 71, 7, "enum_FIELD"], [72, 74, 7, "enum_FIELD"], [160, 164, 7, "enum_FIELD"], [169, 179, 7, "enum_FIELD"], [181, 182, 7, "enum_FIELD"], [16, 15, 7, "enum_FIELD"], [24, 19, 7, "enum_FIELD"], [34, 44, 7, "enum_FIELD"], [62, 63, 7, "enum_FIELD"], [74, 73, 7, "enum_FIELD"], [85, 82, 7, "enum_FIELD"], [85, 89, 7, "enum_FIELD"], [164, 162, 7, "enum_FIELD"], [173, 171, 7, "enum_FIELD"], [173, 175, 7, "enum_FIELD"], [185, 189, 7, "enum_FIELD"], [22, 21, 7, "enum_FIELD"], [26, 25, 7, "enum_FIELD"], [44, 39, 7, "enum_FIELD"], [52, 54, 7, "enum_FIELD"], [89, 87, 7, "enum_FIELD"], [102, 97, 7, "enum_FIELD"], [132, 131, 7, "enum_FIELD"], [132, 134, 7, "enum_FIELD"], [162, 161, 7, "enum_FIELD"], [166, 165, 7, "enum_FIELD"], [171, 170, 7, "enum_FIELD"], [175, 174, 7, "enum_FIELD"], [189, 187, 7, "enum_FIELD"], [39, 37, 7, "enum_FIELD"], [46, 45, 7, "enum_FIELD"], [54, 53, 7, "enum_FIELD"], [87, 86, 7, "enum_FIELD"], [97, 96, 7, "enum_FIELD"], [112, 116, 7, "enum_FIELD"], [134, 133, 7, "enum_FIELD"], [139, 145, 7, "enum_FIELD"], [187, 186, 7, "enum_FIELD"], [37, 36, 7, "enum_FIELD"], [41, 40, 7, "enum_FIELD"], [56, 55, 7, "enum_FIELD"], [99, 98, 7, "enum_FIELD"], [116, 114, 7, "enum_FIELD"], [122, 124, 7, "enum_FIELD"], [145, 141, 7, "enum_FIELD"], [151, 153, 7, "enum_FIELD"], [114, 113, 7, "enum_FIELD"], [124, 123, 7, "enum_FIELD"], [141, 140, 7, "enum_FIELD"], [153, 152, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [15, 2, 10, "enum_LAST_LEXICAL_USE"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [21, 15, 10, "enum_LAST_LEXICAL_USE"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [25, 4, 10, "enum_LAST_LEXICAL_USE"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [36, 21, 10, "enum_LAST_LEXICAL_USE"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [40, 25, 10, "enum_LAST_LEXICAL_USE"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [45, 40, 10, "enum_LAST_LEXICAL_USE"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [55, 45, 10, "enum_LAST_LEXICAL_USE"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 67, 9, "enum_NEXT_SYNTAX"], [67, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [73, 55, 10, "enum_LAST_LEXICAL_USE"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [86, 36, 10, "enum_LAST_LEXICAL_USE"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [96, 81, 10, "enum_LAST_LEXICAL_USE"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [98, 73, 10, "enum_LAST_LEXICAL_USE"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 105, 9, "enum_NEXT_SYNTAX"], [105, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 112, 9, "enum_NEXT_SYNTAX"], [113, 83, 10, "enum_LAST_LEXICAL_USE"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [117, 71, 10, "enum_LAST_LEXICAL_USE"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 122, 9, "enum_NEXT_SYNTAX"], [123, 53, 10, "enum_LAST_LEXICAL_USE"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [125, 117, 10, "enum_LAST_LEXICAL_USE"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [133, 113, 10, "enum_LAST_LEXICAL_USE"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [144, 125, 10, "enum_LAST_LEXICAL_USE"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [146, 131, 10, "enum_LAST_LEXICAL_USE"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 151, 9, "enum_NEXT_SYNTAX"], [152, 123, 10, "enum_LAST_LEXICAL_USE"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [154, 144, 10, "enum_LAST_LEXICAL_USE"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 160, 9, "enum_NEXT_SYNTAX"], [161, 86, 10, "enum_LAST_LEXICAL_USE"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [165, 98, 10, "enum_LAST_LEXICAL_USE"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [170, 161, 10, "enum_LAST_LEXICAL_USE"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [174, 165, 10, "enum_LAST_LEXICAL_USE"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 178, 9, "enum_NEXT_SYNTAX"], [179, 174, 10, "enum_LAST_LEXICAL_USE"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 181, 9, "enum_NEXT_SYNTAX"], [182, 6, 10, "enum_LAST_LEXICAL_USE"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 185, 9, "enum_NEXT_SYNTAX"], [186, 170, 10, "enum_LAST_LEXICAL_USE"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [187, 188, 9, "enum_NEXT_SYNTAX"], [188, 189, 9, "enum_NEXT_SYNTAX"], [189, 190, 9, "enum_NEXT_SYNTAX"], [8, 1, 1, "enum_CFG_NEXT"], [5, 12, 1, "enum_CFG_NEXT"], [12, 14, 1, "enum_CFG_NEXT"], [14, 44, 1, "enum_CFG_NEXT"], [44, 74, 1, "enum_CFG_NEXT"], [44, 52, 1, "enum_CFG_NEXT"], [44, 63, 1, "enum_CFG_NEXT"], [52, 63, 1, "enum_CFG_NEXT"], [63, 74, 1, "enum_CFG_NEXT"], [74, 71, 1, "enum_CFG_NEXT"], [71, 160, 1, "enum_CFG_NEXT"], [71, 89, 1, "enum_CFG_NEXT"], [89, 82, 1, "enum_CFG_NEXT"], [82, 71, 1, "enum_CFG_NEXT"], [82, 97, 1, "enum_CFG_NEXT"], [97, 116, 1, "enum_CFG_NEXT"], [97, 82, 1, "enum_CFG_NEXT"], [116, 134, 1, "enum_CFG_NEXT"], [116, 122, 1, "enum_CFG_NEXT"], [134, 131, 1, "enum_CFG_NEXT"], [131, 82, 1, "enum_CFG_NEXT"], [131, 145, 1, "enum_CFG_NEXT"], [145, 131, 1, "enum_CFG_NEXT"], [145, 151, 1, "enum_CFG_NEXT"], [160, 169, 1, "enum_CFG_NEXT"], [169, 182, 1, "enum_CFG_NEXT"], [182, 185, 1, "enum_CFG_NEXT"], [21, 2, 3, "enum_LAST_WRITE"], [25, 4, 3, "enum_LAST_WRITE"], [15, 21, 2, "enum_LAST_READ"], [15, 2, 3, "enum_LAST_WRITE"], [36, 15, 2, "enum_LAST_READ"], [36, 2, 3, "enum_LAST_WRITE"], [40, 25, 2, "enum_LAST_READ"], [40, 4, 3, "enum_LAST_WRITE"], [45, 40, 2, "enum_LAST_READ"], [45, 4, 3, "enum_LAST_WRITE"], [55, 45, 2, "enum_LAST_READ"], [55, 4, 3, "enum_LAST_WRITE"], [73, 55, 2, "enum_LAST_READ"], [73, 45, 2, "enum_LAST_READ"], [73, 4, 3, "enum_LAST_WRITE"], [71, 144, 2, "enum_LAST_READ"], [71, 117, 2, "enum_LAST_READ"], [71, 71, 3, "enum_LAST_WRITE"], [86, 36, 2, "enum_LAST_READ"], [86, 86, 2, "enum_LAST_READ"], [86, 2, 3, "enum_LAST_WRITE"], [81, 96, 2, "enum_LAST_READ"], [81, 81, 3, "enum_LAST_WRITE"], [83, 133, 2, "enum_LAST_READ"], [83, 83, 3, "enum_LAST_WRITE"], [96, 96, 2, "enum_LAST_READ"], [96, 81, 3, "enum_LAST_WRITE"], [98, 98, 2, "enum_LAST_READ"], [98, 73, 2, "enum_LAST_READ"], [98, 4, 3, "enum_LAST_WRITE"], [113, 133, 2, "enum_LAST_READ"], [113, 83, 3, "enum_LAST_WRITE"], [117, 144, 2, "enum_LAST_READ"], [117, 117, 2, "enum_LAST_READ"], [117, 71, 3, "enum_LAST_WRITE"], [123, 53, 2, "enum_LAST_READ"], [125, 117, 2, "enum_LAST_READ"], [125, 71, 3, "enum_LAST_WRITE"], [133, 113, 2, "enum_LAST_READ"], [133, 83, 3, "enum_LAST_WRITE"], [131, 146, 2, "enum_LAST_READ"], [131, 131, 3, "enum_LAST_WRITE"], [140, 140, 2, "enum_LAST_READ"], [144, 144, 2, "enum_LAST_READ"], [144, 117, 2, "enum_LAST_READ"], [144, 71, 3, "enum_LAST_WRITE"], [146, 146, 2, "enum_LAST_READ"], [146, 131, 3, "enum_LAST_WRITE"], [152, 53, 2, "enum_LAST_READ"], [154, 144, 2, "enum_LAST_READ"], [154, 71, 3, "enum_LAST_WRITE"], [161, 36, 2, "enum_LAST_READ"], [161, 86, 2, "enum_LAST_READ"], [161, 2, 3, "enum_LAST_WRITE"], [165, 98, 2, "enum_LAST_READ"], [165, 73, 2, "enum_LAST_READ"], [165, 4, 3, "enum_LAST_WRITE"], [179, 165, 2, "enum_LAST_READ"], [179, 4, 3, "enum_LAST_WRITE"], [170, 161, 2, "enum_LAST_READ"], [170, 2, 3, "enum_LAST_WRITE"], [174, 179, 2, "enum_LAST_READ"], [174, 4, 3, "enum_LAST_WRITE"], [182, 6, 3, "enum_LAST_WRITE"], [186, 170, 2, "enum_LAST_READ"], [186, 2, 3, "enum_LAST_WRITE"], [16, 19, 4, "enum_COMPUTED_FROM"], [16, 21, 4, "enum_COMPUTED_FROM"], [16, 25, 4, "enum_COMPUTED_FROM"], [173, 179, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "ProgVal", "repo": "Limnoria", "path": "src/ircdb.py", "id": 6863, "has_bug": false, "code_full": "from typing import Any, Dict, Iterable, List, Tuple\n\nircutils: Any = None\nclass DuplicateHostmask(Exception):\n    def __init__(self, name: str, hostmask: Any):\n        self.name = name\n        self.hostmask = hostmask\n\nclass IrcUser:\n    id: int\n    name: str\n    hostmasks: List[str]\n\n    def checkHostmask(self, hostmask: Any) -> bool:\n        return False\n\nclass Class:\n    nextId: int\n    users: Dict[int, IrcUser]\n\n    def getUserId(self, name: str) -> int:\n        return 0\n    \n    def flush(self):\n        pass\n\n    def invalidateCache(self, id: int):\n        pass\n\n    def items(self) -> Iterable[Tuple[int, IrcUser]]:\n        return {}.items()\n\n    def setUser(self, user: IrcUser, flush: bool=True):\n        \"\"\"Sets a user (given its id) to the IrcUser given it.\"\"\"\n        self.nextId = max(self.nextId, user.id)\n        try:\n            if self.getUserId(user.name) != user.id:\n                raise DuplicateHostmask(user.name, user.name)\n        except KeyError:\n            pass\n        for hostmask in user.hostmasks:\n            for (i, u) in self.items():\n                if i == user.id:\n                    continue\n                elif u.checkHostmask(hostmask):\n                    # We used to remove the hostmask here, but it's not\n                    # appropriate for us both to remove the hostmask and to\n                    # raise an exception.  So instead, we'll raise an\n                    # exception, but be nice and give the offending hostmask\n                    # back at the same time.\n                    raise DuplicateHostmask(u.name, hostmask)\n                for otherHostmask in u.hostmasks:\n                    if ircutils.hostmaskPatternEqual(hostmask, otherHostmask):\n                        raise DuplicateHostmask(u.name, hostmask)\n        self.invalidateCache(user.id)\n        self.users[user.id] = user\n        if flush:\n            self.flush()\n", "code": "def setUser(self, user: IrcUser, flush: bool=True):\n    \"\"\"Sets a user (given its id) to the IrcUser given it.\"\"\"\n    self.nextId = max(self.nextId, user.id)\n    try:\n        if self.getUserId(user.name) != user.id:\n            raise DuplicateHostmask(user.name, user.name)\n    except KeyError:\n        pass\n    for hostmask in user.hostmasks:\n        for (i, u) in self.items():\n            if i == user.id:\n                continue\n            elif u.checkHostmask(hostmask):\n                # We used to remove the hostmask here, but it's not\n                # appropriate for us both to remove the hostmask and to\n                # raise an exception.  So instead, we'll raise an\n                # exception, but be nice and give the offending hostmask\n                # back at the same time.\n                raise DuplicateHostmask(u.name, hostmask)\n            for otherHostmask in u.hostmasks:\n                if ircutils.hostmaskPatternEqual(hostmask, otherHostmask):\n                    raise DuplicateHostmask(u.name, hostmask)\n    self.invalidateCache(user.id)\n    self.users[user.id] = user\n    if flush:\n        self.flush()\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "d0a484c11c8155b0b5361623b1867bade9d2e962"}
{"source_tokens": ["#NEWLINE#", "def rs_puiseux(", "f", ",", "p", ",", "x", ",", "prec", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n    Return the puiseux series for `f(p, x, prec)`.\\n\\n    To be used when function ``f`` is implemented only for regular series.\\n\\n    Examples\\n    ========\\n\\n    >>> from sympy.polys.domains import QQ\\n    >>> from sympy.polys.rings import ring\\n    >>> from sympy.polys.ring_series import rs_puiseux, rs_exp\\n    >>> R, x = ring('x', QQ)\\n    >>> p = x**QQ(2,5) + x**QQ(2,3) + x\\n    >>> rs_puiseux(rs_exp,p, x, 1)\\n    1/2*x**(4/5) + x**(2/3) + x**(2/5) + 1\\n    \"", "#NEWLINE#", "index", "=", "p", ".", "ring", ".", "gens", ".", "index", "(", "x", ")", "#NEWLINE#", "n", "=", "1", "#NEWLINE#", "for", "k", "in", "p", ":", "#NEWLINE#", "#INDENT#", "power", "=", "k", "[", "index", "]", "#NEWLINE#", "if", "isinstance", "(", "power", ",", "Rational", ")", ":", "#NEWLINE#", "#INDENT#", "(", "num", ",", "den", ")", "=", "power", ".", "as_numer_denom", "(", ")", "#NEWLINE#", "n", "=", "int", "(", "(", "(", "n", "*", "den", ")", "//", "igcd", "(", "n", ",", "den", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "power", "!=", "int", "(", "power", ")", ")", ":", "#NEWLINE#", "#INDENT#", "(", "num", ",", "den", ")", "=", "(", "power", ".", "numerator", ",", "power", ".", "denominator", ")", "#NEWLINE#", "n", "=", "int", "(", "(", "(", "n", "*", "den", ")", "//", "igcd", "(", "n", ",", "den", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "if", "(", "n", "!=", "1", ")", ":", "#NEWLINE#", "#INDENT#", "p1", "=", "pow_xin", "(", "p", ",", "index", ",", "n", ")", "#NEWLINE#", "r", "=", "f", "(", "p1", ",", "x", ",", "(", "prec", "*", "n", ")", ")", "#NEWLINE#", "n1", "=", "QQ", "(", "1", ",", "n", ")", "#NEWLINE#", "if", "isinstance", "(", "r", ",", "tuple", ")", ":", "#NEWLINE#", "#INDENT#", "r", "=", "tuple", "(", "[", "pow_xin", "(", "rx", ",", "index", ",", "n1", ")", "for", "rx", "in", "r", "]", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "r", "=", "pow_xin", "(", "r", ",", "index", ",", "n1", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "r", "=", "f", "(", "p", ",", "x", ",", "prec", ")", "#NEWLINE#", "#UNINDENT#", "return", "r"], "edges": [[1, 5, 7, "enum_FIELD"], [12, 13, 7, "enum_FIELD"], [14, 24, 7, "enum_FIELD"], [27, 30, 7, "enum_FIELD"], [34, 33, 7, "enum_FIELD"], [34, 35, 7, "enum_FIELD"], [150, 147, 7, "enum_FIELD"], [252, 253, 7, "enum_FIELD"], [24, 22, 7, "enum_FIELD"], [38, 42, 7, "enum_FIELD"], [53, 50, 7, "enum_FIELD"], [147, 146, 7, "enum_FIELD"], [152, 158, 7, "enum_FIELD"], [163, 169, 7, "enum_FIELD"], [178, 184, 7, "enum_FIELD"], [195, 192, 7, "enum_FIELD"], [239, 245, 7, "enum_FIELD"], [22, 20, 7, "enum_FIELD"], [42, 41, 7, "enum_FIELD"], [42, 43, 7, "enum_FIELD"], [50, 47, 7, "enum_FIELD"], [55, 65, 7, "enum_FIELD"], [67, 71, 7, "enum_FIELD"], [93, 96, 7, "enum_FIELD"], [158, 155, 7, "enum_FIELD"], [169, 166, 7, "enum_FIELD"], [184, 181, 7, "enum_FIELD"], [192, 189, 7, "enum_FIELD"], [197, 201, 7, "enum_FIELD"], [222, 228, 7, "enum_FIELD"], [245, 242, 7, "enum_FIELD"], [20, 18, 7, "enum_FIELD"], [65, 63, 7, "enum_FIELD"], [71, 70, 7, "enum_FIELD"], [96, 95, 7, "enum_FIELD"], [104, 115, 7, "enum_FIELD"], [120, 124, 7, "enum_FIELD"], [174, 173, 7, "enum_FIELD"], [174, 175, 7, "enum_FIELD"], [201, 200, 7, "enum_FIELD"], [228, 225, 7, "enum_FIELD"], [18, 17, 7, "enum_FIELD"], [63, 62, 7, "enum_FIELD"], [78, 75, 7, "enum_FIELD"], [78, 82, 7, "enum_FIELD"], [98, 97, 7, "enum_FIELD"], [124, 123, 7, "enum_FIELD"], [202, 206, 7, "enum_FIELD"], [75, 74, 7, "enum_FIELD"], [75, 76, 7, "enum_FIELD"], [82, 79, 7, "enum_FIELD"], [113, 112, 7, "enum_FIELD"], [117, 116, 7, "enum_FIELD"], [131, 128, 7, "enum_FIELD"], [131, 135, 7, "enum_FIELD"], [206, 203, 7, "enum_FIELD"], [211, 212, 7, "enum_FIELD"], [211, 214, 7, "enum_FIELD"], [128, 127, 7, "enum_FIELD"], [128, 129, 7, "enum_FIELD"], [135, 132, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [17, 4, 10, "enum_LAST_LEXICAL_USE"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [25, 6, 10, "enum_LAST_LEXICAL_USE"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [35, 17, 10, "enum_LAST_LEXICAL_USE"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [41, 33, 10, "enum_LAST_LEXICAL_USE"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [43, 15, 10, "enum_LAST_LEXICAL_USE"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [49, 39, 10, "enum_LAST_LEXICAL_USE"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [62, 49, 10, "enum_LAST_LEXICAL_USE"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [68, 28, 10, "enum_LAST_LEXICAL_USE"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [74, 68, 10, "enum_LAST_LEXICAL_USE"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [76, 59, 10, "enum_LAST_LEXICAL_USE"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [81, 74, 10, "enum_LAST_LEXICAL_USE"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [83, 76, 10, "enum_LAST_LEXICAL_USE"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [95, 62, 10, "enum_LAST_LEXICAL_USE"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [97, 70, 10, "enum_LAST_LEXICAL_USE"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [99, 95, 10, "enum_LAST_LEXICAL_USE"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [106, 57, 10, "enum_LAST_LEXICAL_USE"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [108, 83, 10, "enum_LAST_LEXICAL_USE"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [112, 99, 10, "enum_LAST_LEXICAL_USE"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [116, 112, 10, "enum_LAST_LEXICAL_USE"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [121, 81, 10, "enum_LAST_LEXICAL_USE"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [123, 97, 10, "enum_LAST_LEXICAL_USE"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [127, 121, 10, "enum_LAST_LEXICAL_USE"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [129, 108, 10, "enum_LAST_LEXICAL_USE"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [132, 79, 10, "enum_LAST_LEXICAL_USE"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [134, 127, 10, "enum_LAST_LEXICAL_USE"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [136, 129, 10, "enum_LAST_LEXICAL_USE"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [146, 134, 10, "enum_LAST_LEXICAL_USE"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [157, 35, 10, "enum_LAST_LEXICAL_USE"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [159, 43, 10, "enum_LAST_LEXICAL_USE"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [161, 146, 10, "enum_LAST_LEXICAL_USE"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [166, 2, 10, "enum_LAST_LEXICAL_USE"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [168, 153, 10, "enum_LAST_LEXICAL_USE"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [170, 25, 10, "enum_LAST_LEXICAL_USE"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [173, 8, 10, "enum_LAST_LEXICAL_USE"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [175, 161, 10, "enum_LAST_LEXICAL_USE"], [174, 175, 9, "enum_NEXT_SYNTAX"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 184, 9, "enum_NEXT_SYNTAX"], [185, 175, 10, "enum_LAST_LEXICAL_USE"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 188, 9, "enum_NEXT_SYNTAX"], [189, 47, 10, "enum_LAST_LEXICAL_USE"], [188, 189, 9, "enum_NEXT_SYNTAX"], [189, 190, 9, "enum_NEXT_SYNTAX"], [191, 164, 10, "enum_LAST_LEXICAL_USE"], [190, 191, 9, "enum_NEXT_SYNTAX"], [191, 192, 9, "enum_NEXT_SYNTAX"], [192, 193, 9, "enum_NEXT_SYNTAX"], [193, 194, 9, "enum_NEXT_SYNTAX"], [194, 195, 9, "enum_NEXT_SYNTAX"], [195, 197, 9, "enum_NEXT_SYNTAX"], [198, 191, 10, "enum_LAST_LEXICAL_USE"], [197, 198, 9, "enum_NEXT_SYNTAX"], [198, 199, 9, "enum_NEXT_SYNTAX"], [200, 193, 10, "enum_LAST_LEXICAL_USE"], [199, 200, 9, "enum_NEXT_SYNTAX"], [200, 201, 9, "enum_NEXT_SYNTAX"], [201, 202, 9, "enum_NEXT_SYNTAX"], [203, 155, 10, "enum_LAST_LEXICAL_USE"], [202, 203, 9, "enum_NEXT_SYNTAX"], [203, 204, 9, "enum_NEXT_SYNTAX"], [204, 205, 9, "enum_NEXT_SYNTAX"], [205, 206, 9, "enum_NEXT_SYNTAX"], [207, 159, 10, "enum_LAST_LEXICAL_USE"], [206, 207, 9, "enum_NEXT_SYNTAX"], [207, 208, 9, "enum_NEXT_SYNTAX"], [209, 179, 10, "enum_LAST_LEXICAL_USE"], [208, 209, 9, "enum_NEXT_SYNTAX"], [209, 210, 9, "enum_NEXT_SYNTAX"], [210, 211, 9, "enum_NEXT_SYNTAX"], [212, 205, 10, "enum_LAST_LEXICAL_USE"], [211, 212, 9, "enum_NEXT_SYNTAX"], [212, 213, 9, "enum_NEXT_SYNTAX"], [214, 198, 10, "enum_LAST_LEXICAL_USE"], [213, 214, 9, "enum_NEXT_SYNTAX"], [214, 215, 9, "enum_NEXT_SYNTAX"], [215, 216, 9, "enum_NEXT_SYNTAX"], [216, 219, 9, "enum_NEXT_SYNTAX"], [219, 220, 9, "enum_NEXT_SYNTAX"], [220, 222, 9, "enum_NEXT_SYNTAX"], [223, 214, 10, "enum_LAST_LEXICAL_USE"], [222, 223, 9, "enum_NEXT_SYNTAX"], [223, 224, 9, "enum_NEXT_SYNTAX"], [225, 203, 10, "enum_LAST_LEXICAL_USE"], [224, 225, 9, "enum_NEXT_SYNTAX"], [225, 226, 9, "enum_NEXT_SYNTAX"], [227, 223, 10, "enum_LAST_LEXICAL_USE"], [226, 227, 9, "enum_NEXT_SYNTAX"], [227, 228, 9, "enum_NEXT_SYNTAX"], [229, 207, 10, "enum_LAST_LEXICAL_USE"], [228, 229, 9, "enum_NEXT_SYNTAX"], [229, 230, 9, "enum_NEXT_SYNTAX"], [231, 209, 10, "enum_LAST_LEXICAL_USE"], [230, 231, 9, "enum_NEXT_SYNTAX"], [231, 232, 9, "enum_NEXT_SYNTAX"], [232, 236, 9, "enum_NEXT_SYNTAX"], [236, 237, 9, "enum_NEXT_SYNTAX"], [237, 239, 9, "enum_NEXT_SYNTAX"], [240, 227, 10, "enum_LAST_LEXICAL_USE"], [239, 240, 9, "enum_NEXT_SYNTAX"], [240, 241, 9, "enum_NEXT_SYNTAX"], [242, 166, 10, "enum_LAST_LEXICAL_USE"], [241, 242, 9, "enum_NEXT_SYNTAX"], [242, 243, 9, "enum_NEXT_SYNTAX"], [244, 157, 10, "enum_LAST_LEXICAL_USE"], [243, 244, 9, "enum_NEXT_SYNTAX"], [244, 245, 9, "enum_NEXT_SYNTAX"], [246, 170, 10, "enum_LAST_LEXICAL_USE"], [245, 246, 9, "enum_NEXT_SYNTAX"], [246, 247, 9, "enum_NEXT_SYNTAX"], [248, 173, 10, "enum_LAST_LEXICAL_USE"], [247, 248, 9, "enum_NEXT_SYNTAX"], [248, 249, 9, "enum_NEXT_SYNTAX"], [249, 252, 9, "enum_NEXT_SYNTAX"], [253, 240, 10, "enum_LAST_LEXICAL_USE"], [252, 253, 9, "enum_NEXT_SYNTAX"], [5, 12, 1, "enum_CFG_NEXT"], [12, 14, 1, "enum_CFG_NEXT"], [14, 27, 1, "enum_CFG_NEXT"], [27, 35, 1, "enum_CFG_NEXT"], [35, 33, 1, "enum_CFG_NEXT"], [33, 38, 1, "enum_CFG_NEXT"], [33, 147, 1, "enum_CFG_NEXT"], [38, 50, 1, "enum_CFG_NEXT"], [50, 55, 1, "enum_CFG_NEXT"], [50, 96, 1, "enum_CFG_NEXT"], [55, 67, 1, "enum_CFG_NEXT"], [67, 33, 1, "enum_CFG_NEXT"], [96, 104, 1, "enum_CFG_NEXT"], [96, 33, 1, "enum_CFG_NEXT"], [104, 120, 1, "enum_CFG_NEXT"], [120, 33, 1, "enum_CFG_NEXT"], [147, 152, 1, "enum_CFG_NEXT"], [147, 239, 1, "enum_CFG_NEXT"], [152, 163, 1, "enum_CFG_NEXT"], [163, 178, 1, "enum_CFG_NEXT"], [178, 192, 1, "enum_CFG_NEXT"], [192, 222, 1, "enum_CFG_NEXT"], [192, 197, 1, "enum_CFG_NEXT"], [197, 252, 1, "enum_CFG_NEXT"], [222, 252, 1, "enum_CFG_NEXT"], [239, 252, 1, "enum_CFG_NEXT"], [17, 4, 3, "enum_LAST_WRITE"], [25, 6, 3, "enum_LAST_WRITE"], [35, 17, 2, "enum_LAST_READ"], [35, 4, 3, "enum_LAST_WRITE"], [33, 41, 2, "enum_LAST_READ"], [33, 33, 3, "enum_LAST_WRITE"], [41, 41, 2, "enum_LAST_READ"], [41, 33, 3, "enum_LAST_WRITE"], [43, 43, 2, "enum_LAST_READ"], [43, 15, 3, "enum_LAST_WRITE"], [39, 62, 2, "enum_LAST_READ"], [39, 116, 2, "enum_LAST_READ"], [39, 99, 2, "enum_LAST_READ"], [39, 39, 3, "enum_LAST_WRITE"], [47, 47, 2, "enum_LAST_READ"], [49, 62, 2, "enum_LAST_READ"], [49, 116, 2, "enum_LAST_READ"], [49, 99, 2, "enum_LAST_READ"], [49, 39, 3, "enum_LAST_WRITE"], [51, 51, 2, "enum_LAST_READ"], [62, 49, 2, "enum_LAST_READ"], [62, 39, 3, "enum_LAST_WRITE"], [57, 106, 3, "enum_LAST_WRITE"], [57, 57, 3, "enum_LAST_WRITE"], [59, 83, 2, "enum_LAST_READ"], [59, 136, 2, "enum_LAST_READ"], [59, 108, 3, "enum_LAST_WRITE"], [59, 59, 3, "enum_LAST_WRITE"], [70, 97, 2, "enum_LAST_READ"], [70, 70, 2, "enum_LAST_READ"], [70, 123, 2, "enum_LAST_READ"], [74, 134, 2, "enum_LAST_READ"], [74, 81, 2, "enum_LAST_READ"], [74, 28, 3, "enum_LAST_WRITE"], [74, 68, 3, "enum_LAST_WRITE"], [74, 121, 3, "enum_LAST_WRITE"], [76, 83, 2, "enum_LAST_READ"], [76, 136, 2, "enum_LAST_READ"], [76, 59, 3, "enum_LAST_WRITE"], [79, 132, 2, "enum_LAST_READ"], [79, 79, 2, "enum_LAST_READ"], [81, 74, 2, "enum_LAST_READ"], [81, 28, 3, "enum_LAST_WRITE"], [81, 68, 3, "enum_LAST_WRITE"], [81, 121, 3, "enum_LAST_WRITE"], [83, 76, 2, "enum_LAST_READ"], [83, 59, 3, "enum_LAST_WRITE"], [68, 81, 2, "enum_LAST_READ"], [68, 28, 3, "enum_LAST_WRITE"], [68, 68, 3, "enum_LAST_WRITE"], [68, 121, 3, "enum_LAST_WRITE"], [95, 49, 2, "enum_LAST_READ"], [95, 39, 3, "enum_LAST_WRITE"], [97, 97, 2, "enum_LAST_READ"], [97, 70, 2, "enum_LAST_READ"], [97, 123, 2, "enum_LAST_READ"], [99, 95, 2, "enum_LAST_READ"], [99, 39, 3, "enum_LAST_WRITE"], [112, 99, 2, "enum_LAST_READ"], [112, 39, 3, "enum_LAST_WRITE"], [116, 112, 2, "enum_LAST_READ"], [116, 39, 3, "enum_LAST_WRITE"], [106, 106, 3, "enum_LAST_WRITE"], [106, 57, 3, "enum_LAST_WRITE"], [108, 83, 2, "enum_LAST_READ"], [108, 136, 2, "enum_LAST_READ"], [108, 108, 3, "enum_LAST_WRITE"], [108, 59, 3, "enum_LAST_WRITE"], [123, 97, 2, "enum_LAST_READ"], [127, 134, 2, "enum_LAST_READ"], [127, 81, 2, "enum_LAST_READ"], [127, 28, 3, "enum_LAST_WRITE"], [127, 68, 3, "enum_LAST_WRITE"], [127, 121, 3, "enum_LAST_WRITE"], [129, 83, 2, "enum_LAST_READ"], [129, 136, 2, "enum_LAST_READ"], [129, 108, 3, "enum_LAST_WRITE"], [132, 132, 2, "enum_LAST_READ"], [132, 79, 2, "enum_LAST_READ"], [134, 127, 2, "enum_LAST_READ"], [134, 28, 3, "enum_LAST_WRITE"], [134, 68, 3, "enum_LAST_WRITE"], [134, 121, 3, "enum_LAST_WRITE"], [136, 129, 2, "enum_LAST_READ"], [136, 108, 3, "enum_LAST_WRITE"], [121, 134, 2, "enum_LAST_READ"], [121, 28, 3, "enum_LAST_WRITE"], [121, 68, 3, "enum_LAST_WRITE"], [121, 121, 3, "enum_LAST_WRITE"], [146, 134, 2, "enum_LAST_READ"], [146, 81, 2, "enum_LAST_READ"], [146, 28, 3, "enum_LAST_WRITE"], [146, 68, 3, "enum_LAST_WRITE"], [146, 121, 3, "enum_LAST_WRITE"], [157, 35, 2, "enum_LAST_READ"], [157, 4, 3, "enum_LAST_WRITE"], [159, 43, 2, "enum_LAST_READ"], [159, 15, 3, "enum_LAST_WRITE"], [161, 146, 2, "enum_LAST_READ"], [161, 28, 3, "enum_LAST_WRITE"], [161, 68, 3, "enum_LAST_WRITE"], [161, 121, 3, "enum_LAST_WRITE"], [166, 2, 3, "enum_LAST_WRITE"], [168, 153, 3, "enum_LAST_WRITE"], [170, 25, 2, "enum_LAST_READ"], [170, 6, 3, "enum_LAST_WRITE"], [173, 8, 3, "enum_LAST_WRITE"], [175, 161, 2, "enum_LAST_READ"], [175, 28, 3, "enum_LAST_WRITE"], [175, 68, 3, "enum_LAST_WRITE"], [175, 121, 3, "enum_LAST_WRITE"], [185, 175, 2, "enum_LAST_READ"], [185, 28, 3, "enum_LAST_WRITE"], [185, 68, 3, "enum_LAST_WRITE"], [185, 121, 3, "enum_LAST_WRITE"], [189, 47, 2, "enum_LAST_READ"], [191, 164, 3, "enum_LAST_WRITE"], [200, 193, 2, "enum_LAST_READ"], [203, 155, 2, "enum_LAST_READ"], [207, 159, 2, "enum_LAST_READ"], [207, 15, 3, "enum_LAST_WRITE"], [209, 179, 3, "enum_LAST_WRITE"], [212, 205, 2, "enum_LAST_READ"], [214, 191, 2, "enum_LAST_READ"], [214, 164, 3, "enum_LAST_WRITE"], [198, 214, 2, "enum_LAST_READ"], [198, 164, 3, "enum_LAST_WRITE"], [225, 155, 2, "enum_LAST_READ"], [227, 191, 2, "enum_LAST_READ"], [227, 164, 3, "enum_LAST_WRITE"], [229, 159, 2, "enum_LAST_READ"], [229, 15, 3, "enum_LAST_WRITE"], [231, 179, 3, "enum_LAST_WRITE"], [223, 227, 2, "enum_LAST_READ"], [223, 164, 3, "enum_LAST_WRITE"], [242, 2, 3, "enum_LAST_WRITE"], [244, 35, 2, "enum_LAST_READ"], [244, 4, 3, "enum_LAST_WRITE"], [246, 25, 2, "enum_LAST_READ"], [246, 6, 3, "enum_LAST_WRITE"], [248, 8, 3, "enum_LAST_WRITE"], [253, 227, 2, "enum_LAST_READ"], [253, 214, 2, "enum_LAST_READ"], [253, 198, 3, "enum_LAST_WRITE"], [253, 223, 3, "enum_LAST_WRITE"], [253, 240, 3, "enum_LAST_WRITE"], [15, 25, 4, "enum_COMPUTED_FROM"], [15, 17, 4, "enum_COMPUTED_FROM"], [39, 41, 4, "enum_COMPUTED_FROM"], [39, 43, 4, "enum_COMPUTED_FROM"], [153, 155, 4, "enum_COMPUTED_FROM"], [153, 157, 4, "enum_COMPUTED_FROM"], [153, 159, 4, "enum_COMPUTED_FROM"], [153, 161, 4, "enum_COMPUTED_FROM"], [164, 166, 4, "enum_COMPUTED_FROM"], [164, 168, 4, "enum_COMPUTED_FROM"], [164, 170, 4, "enum_COMPUTED_FROM"], [164, 173, 4, "enum_COMPUTED_FROM"], [164, 175, 4, "enum_COMPUTED_FROM"], [179, 181, 4, "enum_COMPUTED_FROM"], [179, 185, 4, "enum_COMPUTED_FROM"], [240, 242, 4, "enum_COMPUTED_FROM"], [240, 244, 4, "enum_COMPUTED_FROM"], [240, 246, 4, "enum_COMPUTED_FROM"], [240, 248, 4, "enum_COMPUTED_FROM"], [58, 62, 4, "enum_COMPUTED_FROM"], [68, 70, 4, "enum_COMPUTED_FROM"], [68, 74, 4, "enum_COMPUTED_FROM"], [68, 76, 4, "enum_COMPUTED_FROM"], [68, 79, 4, "enum_COMPUTED_FROM"], [68, 81, 4, "enum_COMPUTED_FROM"], [68, 83, 4, "enum_COMPUTED_FROM"], [198, 200, 4, "enum_COMPUTED_FROM"], [198, 203, 4, "enum_COMPUTED_FROM"], [198, 205, 4, "enum_COMPUTED_FROM"], [198, 207, 4, "enum_COMPUTED_FROM"], [198, 209, 4, "enum_COMPUTED_FROM"], [198, 212, 4, "enum_COMPUTED_FROM"], [198, 214, 4, "enum_COMPUTED_FROM"], [223, 225, 4, "enum_COMPUTED_FROM"], [223, 227, 4, "enum_COMPUTED_FROM"], [223, 229, 4, "enum_COMPUTED_FROM"], [223, 231, 4, "enum_COMPUTED_FROM"], [107, 112, 4, "enum_COMPUTED_FROM"], [107, 116, 4, "enum_COMPUTED_FROM"], [121, 123, 4, "enum_COMPUTED_FROM"], [121, 127, 4, "enum_COMPUTED_FROM"], [121, 129, 4, "enum_COMPUTED_FROM"], [121, 132, 4, "enum_COMPUTED_FROM"], [121, 134, 4, "enum_COMPUTED_FROM"], [121, 136, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "sympy", "repo": "sympy", "path": "sympy/polys/ring_series.py", "id": 57884, "has_bug": false, "code_full": "from typing import Any, Dict, Iterable, List, Tuple\n\nircutils: Any = None\nclass DuplicateHostmask(Exception):\n    def __init__(self, name: str, hostmask: Any):\n        self.name = name\n        self.hostmask = hostmask\n\nclass IrcUser:\n    id: int\n    name: str\n    hostmasks: List[str]\n\n    def checkHostmask(self, hostmask: Any) -> bool:\n        return False\n\nclass Class:\n    nextId: int\n    users: Dict[int, IrcUser]\n\n    def getUserId(self, name: str) -> int:\n        return 0\n    \n    def flush(self):\n        pass\n\n    def invalidateCache(self, id: int):\n        pass\n\n    def items(self) -> Iterable[Tuple[int, IrcUser]]:\n        return {}.items()\n\n    def setUser(self, user: IrcUser, flush: bool=True):\n        \"\"\"Sets a user (given its id) to the IrcUser given it.\"\"\"\n        self.nextId = max(self.nextId, user.id)\n        try:\n            if self.getUserId(user.name) != user.id:\n                raise DuplicateHostmask(user.name, user.name)\n        except KeyError:\n            pass\n        for hostmask in user.hostmasks:\n            for (i, u) in self.items():\n                if i == user.id:\n                    continue\n                elif u.checkHostmask(hostmask):\n                    # We used to remove the hostmask here, but it's not\n                    # appropriate for us both to remove the hostmask and to\n                    # raise an exception.  So instead, we'll raise an\n                    # exception, but be nice and give the offending hostmask\n                    # back at the same time.\n                    raise DuplicateHostmask(u.name, hostmask)\n                for otherHostmask in u.hostmasks:\n                    if ircutils.hostmaskPatternEqual(hostmask, otherHostmask):\n                        raise DuplicateHostmask(u.name, hostmask)\n        self.invalidateCache(user.id)\n        self.users[user.id] = user\n        if flush:\n            self.flush()\n", "code": "def setUser(self, user: IrcUser, flush: bool=True):\n    \"\"\"Sets a user (given its id) to the IrcUser given it.\"\"\"\n    self.nextId = max(self.nextId, user.id)\n    try:\n        if self.getUserId(user.name) != user.id:\n            raise DuplicateHostmask(user.name, user.name)\n    except KeyError:\n        pass\n    for hostmask in user.hostmasks:\n        for (i, u) in self.items():\n            if i == user.id:\n                continue\n            elif u.checkHostmask(hostmask):\n                # We used to remove the hostmask here, but it's not\n                # appropriate for us both to remove the hostmask and to\n                # raise an exception.  So instead, we'll raise an\n                # exception, but be nice and give the offending hostmask\n                # back at the same time.\n                raise DuplicateHostmask(u.name, hostmask)\n            for otherHostmask in u.hostmasks:\n                if ircutils.hostmaskPatternEqual(hostmask, otherHostmask):\n                    raise DuplicateHostmask(u.name, hostmask)\n    self.invalidateCache(user.id)\n    self.users[user.id] = user\n    if flush:\n        self.flush()\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "7d773eb18daaef3c54f34d1ac6cbc5b83a5bb16c"}
{"source_tokens": ["#NEWLINE#", "@", "parakeet", ".", "jit", "#NEWLINE#", "def matmult(", "X", ",", "Y", ")", ":", "#NEWLINE#", "#INDENT#", "return", "np", ".", "array", "(", "[", "[", "np", ".", "dot", "(", "x", ",", "y", ")", "for", "y", "in", "Y", ".", "T", "]", "for", "x", "in", "X", "]", ")"], "edges": [[1, 8, 7, "enum_FIELD"], [14, 18, 7, "enum_FIELD"], [3, 2, 7, "enum_FIELD"], [18, 16, 7, "enum_FIELD"], [16, 15, 7, "enum_FIELD"], [19, 20, 7, "enum_FIELD"], [20, 26, 7, "enum_FIELD"], [36, 37, 7, "enum_FIELD"], [36, 39, 7, "enum_FIELD"], [26, 22, 7, "enum_FIELD"], [29, 30, 7, "enum_FIELD"], [29, 33, 7, "enum_FIELD"], [22, 21, 7, "enum_FIELD"], [33, 32, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [21, 15, 10, "enum_LAST_LEXICAL_USE"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [30, 27, 10, "enum_LAST_LEXICAL_USE"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [32, 9, 10, "enum_LAST_LEXICAL_USE"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [37, 25, 10, "enum_LAST_LEXICAL_USE"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [39, 7, 10, "enum_LAST_LEXICAL_USE"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [3, 1, 1, "enum_CFG_NEXT"], [8, 14, 1, "enum_CFG_NEXT"], [21, 15, 2, "enum_LAST_READ"], [30, 27, 2, "enum_LAST_READ"], [32, 9, 3, "enum_LAST_WRITE"], [37, 25, 2, "enum_LAST_READ"], [39, 7, 3, "enum_LAST_WRITE"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "iskandr", "repo": "parakeet", "path": "examples/matmult.py", "id": 21338, "has_bug": false, "code_full": "from typing import Any, Dict, Iterable, List, Tuple\n\nircutils: Any = None\nclass DuplicateHostmask(Exception):\n    def __init__(self, name: str, hostmask: Any):\n        self.name = name\n        self.hostmask = hostmask\n\nclass IrcUser:\n    id: int\n    name: str\n    hostmasks: List[str]\n\n    def checkHostmask(self, hostmask: Any) -> bool:\n        return False\n\nclass Class:\n    nextId: int\n    users: Dict[int, IrcUser]\n\n    def getUserId(self, name: str) -> int:\n        return 0\n    \n    def flush(self):\n        pass\n\n    def invalidateCache(self, id: int):\n        pass\n\n    def items(self) -> Iterable[Tuple[int, IrcUser]]:\n        return {}.items()\n\n    def setUser(self, user: IrcUser, flush: bool=True):\n        \"\"\"Sets a user (given its id) to the IrcUser given it.\"\"\"\n        self.nextId = max(self.nextId, user.id)\n        try:\n            if self.getUserId(user.name) != user.id:\n                raise DuplicateHostmask(user.name, user.name)\n        except KeyError:\n            pass\n        for hostmask in user.hostmasks:\n            for (i, u) in self.items():\n                if i == user.id:\n                    continue\n                elif u.checkHostmask(hostmask):\n                    # We used to remove the hostmask here, but it's not\n                    # appropriate for us both to remove the hostmask and to\n                    # raise an exception.  So instead, we'll raise an\n                    # exception, but be nice and give the offending hostmask\n                    # back at the same time.\n                    raise DuplicateHostmask(u.name, hostmask)\n                for otherHostmask in u.hostmasks:\n                    if ircutils.hostmaskPatternEqual(hostmask, otherHostmask):\n                        raise DuplicateHostmask(u.name, hostmask)\n        self.invalidateCache(user.id)\n        self.users[user.id] = user\n        if flush:\n            self.flush()\n", "code": "def setUser(self, user: IrcUser, flush: bool=True):\n    \"\"\"Sets a user (given its id) to the IrcUser given it.\"\"\"\n    self.nextId = max(self.nextId, user.id)\n    try:\n        if self.getUserId(user.name) != user.id:\n            raise DuplicateHostmask(user.name, user.name)\n    except KeyError:\n        pass\n    for hostmask in user.hostmasks:\n        for (i, u) in self.items():\n            if i == user.id:\n                continue\n            elif u.checkHostmask(hostmask):\n                # We used to remove the hostmask here, but it's not\n                # appropriate for us both to remove the hostmask and to\n                # raise an exception.  So instead, we'll raise an\n                # exception, but be nice and give the offending hostmask\n                # back at the same time.\n                raise DuplicateHostmask(u.name, hostmask)\n            for otherHostmask in u.hostmasks:\n                if ircutils.hostmaskPatternEqual(hostmask, otherHostmask):\n                    raise DuplicateHostmask(u.name, hostmask)\n    self.invalidateCache(user.id)\n    self.users[user.id] = user\n    if flush:\n        self.flush()\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "4a9c38d04961a513ff3582f124f1a876ef9b8fd0"}
{"source_tokens": ["#NEWLINE#", "def __init__(", "self", ",", "tabs", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Constructor\\n\\n        @param tabs: the tabs configuration as list of names or tuples\\n                     (label, name)\\n    '", "#NEWLINE#", "if", "(", "not", "tabs", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "tabs", "=", "[", "]", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "self", ".", "tabs", "=", "[", "S3ComponentTab", "(", "t", ")", "for", "t", "in", "tabs", "if", "t", "]"], "edges": [[1, 3, 7, "enum_FIELD"], [10, 11, 7, "enum_FIELD"], [18, 15, 7, "enum_FIELD"], [15, 16, 7, "enum_FIELD"], [20, 25, 7, "enum_FIELD"], [32, 37, 7, "enum_FIELD"], [22, 21, 7, "enum_FIELD"], [34, 33, 7, "enum_FIELD"], [37, 39, 7, "enum_FIELD"], [39, 38, 7, "enum_FIELD"], [44, 43, 7, "enum_FIELD"], [44, 45, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [16, 4, 10, "enum_LAST_LEXICAL_USE"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 20, 9, "enum_NEXT_SYNTAX"], [21, 2, 10, "enum_LAST_LEXICAL_USE"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 32, 9, "enum_NEXT_SYNTAX"], [33, 21, 10, "enum_LAST_LEXICAL_USE"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [43, 40, 10, "enum_LAST_LEXICAL_USE"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [45, 16, 10, "enum_LAST_LEXICAL_USE"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [47, 43, 10, "enum_LAST_LEXICAL_USE"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [6, 1, 1, "enum_CFG_NEXT"], [3, 10, 1, "enum_CFG_NEXT"], [10, 15, 1, "enum_CFG_NEXT"], [15, 32, 1, "enum_CFG_NEXT"], [15, 20, 1, "enum_CFG_NEXT"], [16, 4, 3, "enum_LAST_WRITE"], [21, 2, 3, "enum_LAST_WRITE"], [43, 40, 2, "enum_LAST_READ"], [45, 16, 2, "enum_LAST_READ"], [45, 4, 3, "enum_LAST_WRITE"], [47, 40, 2, "enum_LAST_READ"], [47, 43, 3, "enum_LAST_WRITE"], [33, 2, 3, "enum_LAST_WRITE"], [34, 38, 4, "enum_COMPUTED_FROM"], [34, 40, 4, "enum_COMPUTED_FROM"], [34, 43, 4, "enum_COMPUTED_FROM"], [34, 45, 4, "enum_COMPUTED_FROM"], [34, 47, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "sahana", "repo": "eden", "path": "modules/s3/s3navigation.py", "id": 45521, "has_bug": false, "code_full": "from typing import Any, List\n\n\nclass S3ComponentTab:\n    t: Any\n\n    def __init__(self, t: Any) -> None:\n        self.t = t\n\n\nclass Class:\n    tabs: List[S3ComponentTab]\n\n    def __init__(self, tabs=None):\n        \"\"\"\n            Args:\n                tabs: the tabs configuration as list of names or tuples\n                        (label, component or method or function/)\n                        (label, component or method or function/, vars)\n                        (label, component, vars, method)\n        \"\"\"\n\n        if not tabs:\n            self.tabs = []\n        else:\n            self.tabs = [S3ComponentTab(t) for t in tabs if t]\n", "code": "def __init__(self, tabs=None):\n    \"\"\"\n        Args:\n            tabs: the tabs configuration as list of names or tuples\n                    (label, component or method or function/)\n                    (label, component or method or function/, vars)\n                    (label, component, vars, method)\n    \"\"\"\n\n    if not tabs:\n        self.tabs = []\n    else:\n        self.tabs = [S3ComponentTab(t) for t in tabs if t]\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "5d84024286c10082e2966cf5ada3516cb492b657"}
{"source_tokens": ["#NEWLINE#", "def __repr__(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "return", "(", "textwrap", ".", "dedent", "(", "'\\nStoragePolicyCollection([\\n    %s\\n])\\n'", ")", "%", "',\\n    '", ".", "join", "(", "(", "repr", "(", "p", ")", "for", "p", "in", "self", ")", ")", ")", ".", "strip", "(", ")"], "edges": [[7, 34, 7, "enum_FIELD"], [34, 32, 7, "enum_FIELD"], [32, 15, 7, "enum_FIELD"], [15, 12, 7, "enum_FIELD"], [15, 19, 7, "enum_FIELD"], [12, 10, 7, "enum_FIELD"], [19, 17, 7, "enum_FIELD"], [10, 9, 7, "enum_FIELD"], [17, 16, 7, "enum_FIELD"], [20, 22, 7, "enum_FIELD"], [22, 21, 7, "enum_FIELD"], [25, 26, 7, "enum_FIELD"], [25, 28, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [26, 23, 10, "enum_LAST_LEXICAL_USE"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [28, 2, 10, "enum_LAST_LEXICAL_USE"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [26, 23, 2, "enum_LAST_READ"], [28, 2, 3, "enum_LAST_WRITE"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "openstack", "repo": "swift", "path": "swift/common/storage_policy.py", "id": 35650, "has_bug": false, "code_full": "import textwrap\nfrom typing import Any\n\n\nclass Class(object):\n    def __len__(self) -> int:\n        return 0\n    \n    def __getitem__(self, key) -> Any:\n        pass\n\n    def __iter__(self):\n        return iter([])\n\n    def __repr__(self):\n        return (textwrap.dedent(\"\"\"\n    StoragePolicyCollection([\n        %s\n    ])\n    \"\"\") % ',\n    '.join(repr(p) for p in self)).strip()\n", "code": "def __repr__(self):\n    return (textwrap.dedent(\"\"\"\nStoragePolicyCollection([\n    %s\n])\n\"\"\") % ',\n    '.join(repr(p) for p in self)).strip()\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "12bc79bf01e7619e4dc6ad549566702a289af62b"}
{"source_tokens": ["#NEWLINE#", "def delete_access_key(", "self", ",", "access_key_id", ",", "user_name", ")", ":", "#NEWLINE#", "#INDENT#", "user", "=", "self", ".", "get_user", "(", "user_name", ")", "#NEWLINE#", "user", ".", "delete_access_key", "(", "access_key_id", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [10, 16, 7, "enum_FIELD"], [19, 23, 7, "enum_FIELD"], [16, 14, 7, "enum_FIELD"], [23, 21, 7, "enum_FIELD"], [14, 13, 7, "enum_FIELD"], [21, 20, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [13, 2, 10, "enum_LAST_LEXICAL_USE"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [17, 6, 10, "enum_LAST_LEXICAL_USE"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [20, 11, 10, "enum_LAST_LEXICAL_USE"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [24, 4, 10, "enum_LAST_LEXICAL_USE"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [3, 10, 1, "enum_CFG_NEXT"], [10, 19, 1, "enum_CFG_NEXT"], [13, 2, 3, "enum_LAST_WRITE"], [17, 6, 3, "enum_LAST_WRITE"], [20, 11, 3, "enum_LAST_WRITE"], [24, 4, 3, "enum_LAST_WRITE"], [11, 17, 4, "enum_COMPUTED_FROM"], [11, 13, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "spulec", "repo": "moto", "path": "moto/iam/models.py", "id": 52359, "has_bug": false, "code_full": "\nclass User:\n    def __init__(self, user_name: str):\n        self.user_name = user_name\n\n    def delete_access_key(self, access_key_id: str):\n        pass\n\nclass Class:\n    def get_user(self,user_name: str):\n        return User(user_name)\n\n    def delete_access_key(self,access_key_id: str,user_name: str):\n        user=self.get_user(user_name)\n        user.delete_access_key(access_key_id)\n", "code": "def delete_access_key(self,access_key_id: str,user_name: str):\n    user=self.get_user(user_name)\n    user.delete_access_key(access_key_id)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "1415a9359675c28a4a2e0138a5f011342ee3016c"}
{"source_tokens": ["#NEWLINE#", "def flavorspec_delete(", "catalog", ",", "name", ")", ":", "#NEWLINE#", "#INDENT#", "catalog", ".", "delete_flavorspec", "(", "name", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [8, 12, 7, "enum_FIELD"], [12, 10, 7, "enum_FIELD"], [10, 9, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 8, 9, "enum_NEXT_SYNTAX"], [9, 2, 10, "enum_LAST_LEXICAL_USE"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [13, 4, 10, "enum_LAST_LEXICAL_USE"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [3, 8, 1, "enum_CFG_NEXT"], [9, 2, 3, "enum_LAST_WRITE"], [13, 4, 3, "enum_LAST_WRITE"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "mindsnacks", "repo": "Zinc", "path": "src/zinc/cli.py", "id": 26145, "has_bug": false, "code_full": "\nfrom typing import Any\n\n\ndef flavorspec_delete(catalog: Any,name: str):\n    catalog.delete_flavorspec(name)\n", "code": "def flavorspec_delete(catalog: Any,name: str):\n    catalog.delete_flavorspec(name)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "3b6810585344f031da081d3ac52fb88a1bd42f5d"}
{"source_tokens": ["#NEWLINE#", "def check(", "self", ",", "capability", ",", "ignoreOwner", "=", "False", ")", ":", "#NEWLINE#", "#INDENT#", "\"Returns the appropriate boolean for whether a given capability is\\n    'allowed' given its (or its anticapability's) presence in the set.\\n    \"", "#NEWLINE#", "capability", "=", "ircutils", ".", "toLower", "(", "capability", ")", "#NEWLINE#", "if", "self", ".", "__parent", ".", "__contains__", "(", "capability", ")", ":", "#NEWLINE#", "#INDENT#", "return", "True", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "self", ".", "__parent", ".", "__contains__", "(", "_invert", "(", "capability", ")", ")", ":", "#NEWLINE#", "#INDENT#", "return", "False", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "raise", "KeyError"], "edges": [[1, 5, 7, "enum_FIELD"], [12, 13, 7, "enum_FIELD"], [14, 20, 7, "enum_FIELD"], [33, 30, 7, "enum_FIELD"], [20, 18, 7, "enum_FIELD"], [30, 28, 7, "enum_FIELD"], [36, 37, 7, "enum_FIELD"], [56, 50, 7, "enum_FIELD"], [18, 17, 7, "enum_FIELD"], [28, 26, 7, "enum_FIELD"], [50, 48, 7, "enum_FIELD"], [59, 60, 7, "enum_FIELD"], [67, 68, 7, "enum_FIELD"], [26, 25, 7, "enum_FIELD"], [48, 46, 7, "enum_FIELD"], [52, 51, 7, "enum_FIELD"], [46, 45, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [15, 4, 10, "enum_LAST_LEXICAL_USE"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [21, 15, 10, "enum_LAST_LEXICAL_USE"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 24, 9, "enum_NEXT_SYNTAX"], [25, 2, 10, "enum_LAST_LEXICAL_USE"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [31, 21, 10, "enum_LAST_LEXICAL_USE"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 44, 9, "enum_NEXT_SYNTAX"], [45, 25, 10, "enum_LAST_LEXICAL_USE"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [53, 31, 10, "enum_LAST_LEXICAL_USE"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [8, 1, 1, "enum_CFG_NEXT"], [5, 12, 1, "enum_CFG_NEXT"], [12, 14, 1, "enum_CFG_NEXT"], [14, 30, 1, "enum_CFG_NEXT"], [30, 50, 1, "enum_CFG_NEXT"], [30, 36, 1, "enum_CFG_NEXT"], [50, 59, 1, "enum_CFG_NEXT"], [50, 67, 1, "enum_CFG_NEXT"], [21, 4, 3, "enum_LAST_WRITE"], [15, 21, 2, "enum_LAST_READ"], [15, 4, 3, "enum_LAST_WRITE"], [25, 2, 3, "enum_LAST_WRITE"], [31, 21, 2, "enum_LAST_READ"], [31, 15, 3, "enum_LAST_WRITE"], [45, 25, 2, "enum_LAST_READ"], [45, 2, 3, "enum_LAST_WRITE"], [53, 31, 2, "enum_LAST_READ"], [53, 15, 3, "enum_LAST_WRITE"], [15, 21, 4, "enum_COMPUTED_FROM"], [15, 17, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "ProgVal", "repo": "Limnoria", "path": "src/ircdb.py", "id": 6777, "has_bug": false, "code_full": "from typing import Set\n\n\nclass ircutils:\n    @staticmethod\n    def toLower(capability: str) -> str:\n        return \"\"\n\ndef _invert(capability: str) -> str:\n    return \"\"\n\nclass Class:\n    __parent: Set\n\n    def check(self, capability: str, ignoreOwner: bool=False) -> bool:\n        \"\"\"Returns the appropriate boolean for whether a given capability is\n        'allowed' given its (or its anticapability's) presence in the set.\n        \"\"\"\n        capability = ircutils.toLower(capability)\n        if self.__parent.__contains__(capability):\n            return True\n        elif self.__parent.__contains__(_invert(capability)):\n            return False\n        else:\n            raise KeyError\n", "code": "def check(self, capability: str, ignoreOwner: bool=False) -> bool:\n    \"\"\"Returns the appropriate boolean for whether a given capability is\n    'allowed' given its (or its anticapability's) presence in the set.\n    \"\"\"\n    capability = ircutils.toLower(capability)\n    if self.__parent.__contains__(capability):\n        return True\n    elif self.__parent.__contains__(_invert(capability)):\n        return False\n    else:\n        raise KeyError\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "d0a484c11c8155b0b5361623b1867bade9d2e962"}
{"source_tokens": ["#NEWLINE#", "def make_node(", "self", ",", "images", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    .. todo::\\n\\n        WRITEME\\n    '", "#NEWLINE#", "images", "=", "as_cuda_ndarray_variable", "(", "images", ")", "#NEWLINE#", "assert", "(", "images", ".", "ndim", "==", "4", ")", "#NEWLINE#", "channels_broadcastable", "=", "images", ".", "type", ".", "broadcastable", "[", "0", "]", "#NEWLINE#", "batch_broadcastable", "=", "images", ".", "type", ".", "broadcastable", "[", "3", "]", "#NEWLINE#", "rows_broadcastable", "=", "False", "#NEWLINE#", "cols_broadcastable", "=", "False", "#NEWLINE#", "targets_broadcastable", "=", "(", "channels_broadcastable", ",", "rows_broadcastable", ",", "cols_broadcastable", ",", "batch_broadcastable", ")", "#NEWLINE#", "targets_type", "=", "CudaNdarrayType", "(", "broadcastable", "=", "targets_broadcastable", ")", "#NEWLINE#", "targets", "=", "targets_type", "(", ")", "#NEWLINE#", "seed", "=", "self", ".", "seed_state", "#NEWLINE#", "seed", "=", "as_cuda_ndarray_variable", "(", "seed", ")", "#NEWLINE#", "return", "Apply", "(", "self", ",", "[", "images", ",", "seed", "]", ",", "[", "targets", "]", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [8, 9, 7, "enum_FIELD"], [10, 14, 7, "enum_FIELD"], [18, 23, 7, "enum_FIELD"], [26, 34, 7, "enum_FIELD"], [37, 45, 7, "enum_FIELD"], [48, 51, 7, "enum_FIELD"], [52, 55, 7, "enum_FIELD"], [56, 63, 7, "enum_FIELD"], [68, 72, 7, "enum_FIELD"], [77, 81, 7, "enum_FIELD"], [83, 87, 7, "enum_FIELD"], [89, 93, 7, "enum_FIELD"], [97, 101, 7, "enum_FIELD"], [14, 13, 7, "enum_FIELD"], [23, 21, 7, "enum_FIELD"], [34, 32, 7, "enum_FIELD"], [34, 35, 7, "enum_FIELD"], [45, 43, 7, "enum_FIELD"], [45, 46, 7, "enum_FIELD"], [72, 71, 7, "enum_FIELD"], [81, 80, 7, "enum_FIELD"], [87, 86, 7, "enum_FIELD"], [93, 92, 7, "enum_FIELD"], [101, 98, 7, "enum_FIELD"], [21, 20, 7, "enum_FIELD"], [32, 30, 7, "enum_FIELD"], [43, 41, 7, "enum_FIELD"], [73, 75, 7, "enum_FIELD"], [30, 29, 7, "enum_FIELD"], [41, 40, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [11, 4, 10, "enum_LAST_LEXICAL_USE"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [15, 11, 10, "enum_LAST_LEXICAL_USE"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [20, 15, 10, "enum_LAST_LEXICAL_USE"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [29, 20, 10, "enum_LAST_LEXICAL_USE"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [40, 29, 10, "enum_LAST_LEXICAL_USE"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [60, 27, 10, "enum_LAST_LEXICAL_USE"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [62, 49, 10, "enum_LAST_LEXICAL_USE"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [64, 53, 10, "enum_LAST_LEXICAL_USE"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [66, 38, 10, "enum_LAST_LEXICAL_USE"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [75, 57, 10, "enum_LAST_LEXICAL_USE"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [80, 69, 10, "enum_LAST_LEXICAL_USE"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [86, 2, 10, "enum_LAST_LEXICAL_USE"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [90, 84, 10, "enum_LAST_LEXICAL_USE"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [92, 13, 10, "enum_LAST_LEXICAL_USE"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [94, 90, 10, "enum_LAST_LEXICAL_USE"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [100, 86, 10, "enum_LAST_LEXICAL_USE"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [103, 40, 10, "enum_LAST_LEXICAL_USE"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [105, 94, 10, "enum_LAST_LEXICAL_USE"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [109, 78, 10, "enum_LAST_LEXICAL_USE"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [3, 8, 1, "enum_CFG_NEXT"], [8, 10, 1, "enum_CFG_NEXT"], [10, 18, 1, "enum_CFG_NEXT"], [18, 26, 1, "enum_CFG_NEXT"], [26, 37, 1, "enum_CFG_NEXT"], [37, 48, 1, "enum_CFG_NEXT"], [48, 52, 1, "enum_CFG_NEXT"], [52, 56, 1, "enum_CFG_NEXT"], [56, 68, 1, "enum_CFG_NEXT"], [68, 77, 1, "enum_CFG_NEXT"], [77, 83, 1, "enum_CFG_NEXT"], [83, 89, 1, "enum_CFG_NEXT"], [89, 97, 1, "enum_CFG_NEXT"], [15, 4, 3, "enum_LAST_WRITE"], [11, 15, 2, "enum_LAST_READ"], [11, 4, 3, "enum_LAST_WRITE"], [20, 15, 2, "enum_LAST_READ"], [20, 11, 3, "enum_LAST_WRITE"], [29, 20, 2, "enum_LAST_READ"], [29, 11, 3, "enum_LAST_WRITE"], [40, 29, 2, "enum_LAST_READ"], [40, 11, 3, "enum_LAST_WRITE"], [60, 27, 3, "enum_LAST_WRITE"], [62, 49, 3, "enum_LAST_WRITE"], [64, 53, 3, "enum_LAST_WRITE"], [66, 38, 3, "enum_LAST_WRITE"], [75, 57, 3, "enum_LAST_WRITE"], [80, 69, 3, "enum_LAST_WRITE"], [86, 2, 3, "enum_LAST_WRITE"], [92, 13, 2, "enum_LAST_READ"], [94, 84, 3, "enum_LAST_WRITE"], [90, 94, 2, "enum_LAST_READ"], [90, 84, 3, "enum_LAST_WRITE"], [100, 86, 2, "enum_LAST_READ"], [100, 2, 3, "enum_LAST_WRITE"], [103, 40, 2, "enum_LAST_READ"], [103, 11, 3, "enum_LAST_WRITE"], [105, 94, 2, "enum_LAST_READ"], [105, 90, 3, "enum_LAST_WRITE"], [109, 78, 3, "enum_LAST_WRITE"], [11, 13, 4, "enum_COMPUTED_FROM"], [11, 15, 4, "enum_COMPUTED_FROM"], [27, 29, 4, "enum_COMPUTED_FROM"], [38, 40, 4, "enum_COMPUTED_FROM"], [57, 60, 4, "enum_COMPUTED_FROM"], [57, 62, 4, "enum_COMPUTED_FROM"], [57, 64, 4, "enum_COMPUTED_FROM"], [57, 66, 4, "enum_COMPUTED_FROM"], [69, 71, 4, "enum_COMPUTED_FROM"], [69, 75, 4, "enum_COMPUTED_FROM"], [78, 80, 4, "enum_COMPUTED_FROM"], [84, 86, 4, "enum_COMPUTED_FROM"], [90, 92, 4, "enum_COMPUTED_FROM"], [90, 94, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "lisa-lab", "repo": "pylearn2", "path": "pylearn2/sandbox/cuda_convnet/stochastic_pool.py", "id": 24940, "has_bug": false, "code_full": "from typing import Any, Tuple\n\nfrom theano.gof import Apply\nfrom theano.gpuarray.type import GpuArrayType\nfrom theano.sandbox.cuda import CudaNdarrayType\n\n\ndef as_cuda_ndarray_variable(x: Any) -> Any:\n    pass\n\nclass Class:\n    seed_state: Any\n\n    def make_node(self, images: GpuArrayType) -> Apply:\n        \"\"\"\n        .. todo::\n\n            WRITEME\n        \"\"\"\n        images = as_cuda_ndarray_variable(images)\n\n        assert images.ndim == 4\n\n        channels_broadcastable: bool = images.type.broadcastable[0]\n        batch_broadcastable: bool = images.type.broadcastable[3]\n\n        rows_broadcastable: bool = False\n        cols_broadcastable: bool = False\n\n        targets_broadcastable: Tuple[bool, bool, bool, bool] = (channels_broadcastable, rows_broadcastable,\n                cols_broadcastable, batch_broadcastable)\n        targets_type = CudaNdarrayType(broadcastable=targets_broadcastable)\n        targets = targets_type()\n        seed: int = self.seed_state\n        seed = as_cuda_ndarray_variable(seed)\n        return Apply(self, [images, seed], [targets])\n", "code": "def make_node(self, images: GpuArrayType) -> Apply:\n    \"\"\"\n    .. todo::\n\n        WRITEME\n    \"\"\"\n    images = as_cuda_ndarray_variable(images)\n\n    assert images.ndim == 4\n\n    channels_broadcastable: bool = images.type.broadcastable[0]\n    batch_broadcastable: bool = images.type.broadcastable[3]\n\n    rows_broadcastable: bool = False\n    cols_broadcastable: bool = False\n\n    targets_broadcastable: Tuple[bool, bool, bool, bool] = (channels_broadcastable, rows_broadcastable,\n            cols_broadcastable, batch_broadcastable)\n    targets_type = CudaNdarrayType(broadcastable=targets_broadcastable)\n    targets = targets_type()\n    seed: int = self.seed_state\n    seed = as_cuda_ndarray_variable(seed)\n    return Apply(self, [images, seed], [targets])\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "2fc659be5dd8670608a402a770accaf9ae4dfb6b"}
{"source_tokens": ["#NEWLINE#", "def deserialize(", "self", ",", "channel", ",", "id", ",", "L", ")", ":", "#NEWLINE#", "#INDENT#", "(", "seen", ",", "saying", ")", "=", "L", "#NEWLINE#", "return", "(", "float", "(", "seen", ")", ",", "saying", ")"], "edges": [[1, 5, 7, "enum_FIELD"], [12, 19, 7, "enum_FIELD"], [21, 27, 7, "enum_FIELD"], [24, 23, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [19, 8, 10, "enum_LAST_LEXICAL_USE"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [25, 14, 10, "enum_LAST_LEXICAL_USE"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [28, 16, 10, "enum_LAST_LEXICAL_USE"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [5, 12, 1, "enum_CFG_NEXT"], [12, 21, 1, "enum_CFG_NEXT"], [19, 8, 3, "enum_LAST_WRITE"], [25, 14, 3, "enum_LAST_WRITE"], [28, 16, 3, "enum_LAST_WRITE"], [15, 19, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "ProgVal", "repo": "Limnoria", "path": "plugins/Seen/plugin.py", "id": 6232, "has_bug": false, "code_full": "from typing import Any, Tuple\n\n\ndef deserialize(self, channel: Any, id: Any, L: Tuple[Any, Any]) -> Tuple[float, Any]:\n    (seen, saying) = L\n    return (float(seen), saying)\n", "code": "def deserialize(self, channel: Any, id: Any, L: Tuple[Any, Any]) -> Tuple[float, Any]:\n    (seen, saying) = L\n    return (float(seen), saying)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "7cd700b4ae7cf4d7b4f5a19581ee19d3a91abdea"}
{"source_tokens": ["#NEWLINE#", "@", "Utils", ".", "timeIt", "#NEWLINE#", "def run(", "self", ",", "m0", ")", ":", "#NEWLINE#", "#INDENT#", "'run(m0)\\n\\n        Runs the inversion!\\n\\n    '", "#NEWLINE#", "self", ".", "invProb", ".", "startup", "(", "m0", ")", "#NEWLINE#", "self", ".", "directiveList", ".", "call", "(", "'initialize'", ")", "#NEWLINE#", "self", ".", "m", "=", "self", ".", "opt", ".", "minimize", "(", "self", ".", "invProb", ".", "evalFunction", ",", "self", ".", "invProb", ".", "curModel", ")", "#NEWLINE#", "self", ".", "directiveList", ".", "call", "(", "'finish'", ")", "#NEWLINE#", "return", "self", ".", "m"], "edges": [[1, 8, 7, "enum_FIELD"], [13, 14, 7, "enum_FIELD"], [15, 21, 7, "enum_FIELD"], [24, 30, 7, "enum_FIELD"], [33, 49, 7, "enum_FIELD"], [56, 62, 7, "enum_FIELD"], [66, 68, 7, "enum_FIELD"], [3, 2, 7, "enum_FIELD"], [21, 19, 7, "enum_FIELD"], [30, 28, 7, "enum_FIELD"], [35, 34, 7, "enum_FIELD"], [49, 41, 7, "enum_FIELD"], [62, 60, 7, "enum_FIELD"], [68, 67, 7, "enum_FIELD"], [19, 17, 7, "enum_FIELD"], [28, 26, 7, "enum_FIELD"], [41, 39, 7, "enum_FIELD"], [47, 45, 7, "enum_FIELD"], [53, 51, 7, "enum_FIELD"], [60, 58, 7, "enum_FIELD"], [17, 16, 7, "enum_FIELD"], [26, 25, 7, "enum_FIELD"], [39, 38, 7, "enum_FIELD"], [45, 44, 7, "enum_FIELD"], [51, 50, 7, "enum_FIELD"], [58, 57, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [16, 7, 10, "enum_LAST_LEXICAL_USE"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [22, 9, 10, "enum_LAST_LEXICAL_USE"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [25, 16, 10, "enum_LAST_LEXICAL_USE"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [34, 25, 10, "enum_LAST_LEXICAL_USE"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [38, 34, 10, "enum_LAST_LEXICAL_USE"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [44, 38, 10, "enum_LAST_LEXICAL_USE"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [50, 44, 10, "enum_LAST_LEXICAL_USE"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [57, 50, 10, "enum_LAST_LEXICAL_USE"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 66, 9, "enum_NEXT_SYNTAX"], [67, 57, 10, "enum_LAST_LEXICAL_USE"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [3, 1, 1, "enum_CFG_NEXT"], [8, 13, 1, "enum_CFG_NEXT"], [13, 15, 1, "enum_CFG_NEXT"], [15, 24, 1, "enum_CFG_NEXT"], [24, 33, 1, "enum_CFG_NEXT"], [33, 56, 1, "enum_CFG_NEXT"], [56, 66, 1, "enum_CFG_NEXT"], [16, 7, 3, "enum_LAST_WRITE"], [22, 9, 3, "enum_LAST_WRITE"], [25, 16, 2, "enum_LAST_READ"], [25, 7, 3, "enum_LAST_WRITE"], [38, 25, 2, "enum_LAST_READ"], [38, 7, 3, "enum_LAST_WRITE"], [44, 38, 2, "enum_LAST_READ"], [44, 7, 3, "enum_LAST_WRITE"], [50, 44, 2, "enum_LAST_READ"], [50, 7, 3, "enum_LAST_WRITE"], [34, 50, 2, "enum_LAST_READ"], [34, 7, 3, "enum_LAST_WRITE"], [57, 34, 2, "enum_LAST_READ"], [57, 7, 3, "enum_LAST_WRITE"], [67, 57, 2, "enum_LAST_READ"], [67, 7, 3, "enum_LAST_WRITE"], [35, 38, 4, "enum_COMPUTED_FROM"], [35, 44, 4, "enum_COMPUTED_FROM"], [35, 50, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "simpeg", "repo": "simpeg", "path": "SimPEG/Inversion.py", "id": 51015, "has_bug": false, "code_full": "from typing import Any\n\nimport numpy as np\n\n\nclass DirectiveList:\n    def call(self, name: str):\n        pass\n\nclass Class:\n    invProb: Any\n    directiveList: DirectiveList\n    opt: Any\n    m: Any\n\n\n    def run(self, m0: Any) -> Any:\n            \"\"\"run(m0)\n\n                Runs the inversion!\n\n            \"\"\"\n            self.invProb.startup(m0)\n            self.directiveList.call('initialize')\n            print('model has any nan: {:b}'.format(np.any(np.isnan(self.invProb.model))))\n            self.m = self.opt.minimize(self.invProb.evalFunction, self.invProb.model)\n            self.directiveList.call('finish')\n\n            return self.m\n", "code": "def run(self, m0: Any) -> Any:\n        \"\"\"run(m0)\n\n            Runs the inversion!\n\n        \"\"\"\n        self.invProb.startup(m0)\n        self.directiveList.call('initialize')\n        print('model has any nan: {:b}'.format(np.any(np.isnan(self.invProb.model))))\n        self.m = self.opt.minimize(self.invProb.evalFunction, self.invProb.model)\n        self.directiveList.call('finish')\n\n        return self.m\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "0e4258525e50ddf6db21e83330bd5b61a9117533"}
{"source_tokens": ["#NEWLINE#", "def _cellC(", "self", ",", "p", ")", ":", "#NEWLINE#", "#INDENT#", "'Cell center of a single cell (without origin correction), given a pointer.'", "#NEWLINE#", "return", "(", "(", "np", ".", "array", "(", "self", ".", "_cellH", "(", "p", ")", ")", "/", "2.0", ")", "+", "self", ".", "_cellN", "(", "p", ")", ")", ".", "tolist", "(", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [8, 9, 7, "enum_FIELD"], [11, 38, 7, "enum_FIELD"], [38, 36, 7, "enum_FIELD"], [36, 28, 7, "enum_FIELD"], [28, 25, 7, "enum_FIELD"], [28, 32, 7, "enum_FIELD"], [25, 17, 7, "enum_FIELD"], [25, 26, 7, "enum_FIELD"], [32, 30, 7, "enum_FIELD"], [17, 15, 7, "enum_FIELD"], [30, 29, 7, "enum_FIELD"], [15, 14, 7, "enum_FIELD"], [21, 19, 7, "enum_FIELD"], [19, 18, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [18, 2, 10, "enum_LAST_LEXICAL_USE"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [22, 4, 10, "enum_LAST_LEXICAL_USE"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [29, 18, 10, "enum_LAST_LEXICAL_USE"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [33, 22, 10, "enum_LAST_LEXICAL_USE"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [3, 8, 1, "enum_CFG_NEXT"], [8, 11, 1, "enum_CFG_NEXT"], [18, 2, 3, "enum_LAST_WRITE"], [22, 4, 3, "enum_LAST_WRITE"], [29, 18, 2, "enum_LAST_READ"], [29, 2, 3, "enum_LAST_WRITE"], [33, 22, 2, "enum_LAST_READ"], [33, 4, 3, "enum_LAST_WRITE"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "simpeg", "repo": "simpeg", "path": "SimPEG/Mesh/TreeMesh.py", "id": 50994, "has_bug": false, "code_full": "from typing import Any, List, Union\n\nimport numpy as np\n\n\nclass Class:\n    def _cellH(self, p: Union[int, List, np.ndarray]) -> List[float]:\n        return []\n\n    def _cellN(self, p: Union[int, List, np.ndarray]) -> List[float]:\n        return []\n\n    def _cellC(self, p: Union[int, List, np.ndarray]) -> List[float]:\n        \"\"\"Cell center of a single cell (without origin correction), given a pointer.\"\"\"\n        return (np.array(self._cellH(p))/2.0 + self._cellN(p)).tolist()\n", "code": "def _cellC(self, p: Union[int, List, np.ndarray]) -> List[float]:\n    \"\"\"Cell center of a single cell (without origin correction), given a pointer.\"\"\"\n    return (np.array(self._cellH(p))/2.0 + self._cellN(p)).tolist()\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "616b7a85a43452641ccdbfb057e388fa47c8df39"}
{"source_tokens": ["#NEWLINE#", "def testCallsLoadProviderAndChecksRequirements(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "flag_values", "=", "self", ".", "createNonPresentFlags", "(", ")", "#NEWLINE#", "flag_values", ".", "ignore_package_requirements", "=", "False", "#NEWLINE#", "with", "mock", ".", "patch", "(", "(", "providers", ".", "__name__", "+", "'.LoadProvider'", ")", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "_spec_class", "(", "_COMPONENT", ",", "flag_values", ",", "**", "self", ".", "_kwargs", ")", "#NEWLINE#", "providers", ".", "LoadProvider", ".", "assert_called_once_with", "(", "'GCP'", ",", "False", ")"], "edges": [[6, 12, 7, "enum_FIELD"], [14, 19, 7, "enum_FIELD"], [12, 10, 7, "enum_FIELD"], [16, 15, 7, "enum_FIELD"], [36, 42, 7, "enum_FIELD"], [50, 58, 7, "enum_FIELD"], [10, 9, 7, "enum_FIELD"], [25, 23, 7, "enum_FIELD"], [42, 38, 7, "enum_FIELD"], [58, 54, 7, "enum_FIELD"], [23, 22, 7, "enum_FIELD"], [30, 28, 7, "enum_FIELD"], [30, 31, 7, "enum_FIELD"], [38, 37, 7, "enum_FIELD"], [45, 47, 7, "enum_FIELD"], [54, 52, 7, "enum_FIELD"], [28, 27, 7, "enum_FIELD"], [47, 46, 7, "enum_FIELD"], [52, 51, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [9, 2, 10, "enum_LAST_LEXICAL_USE"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [15, 7, 10, "enum_LAST_LEXICAL_USE"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 36, 9, "enum_NEXT_SYNTAX"], [37, 9, 10, "enum_LAST_LEXICAL_USE"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [43, 15, 10, "enum_LAST_LEXICAL_USE"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [46, 37, 10, "enum_LAST_LEXICAL_USE"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [51, 27, 10, "enum_LAST_LEXICAL_USE"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [6, 14, 1, "enum_CFG_NEXT"], [9, 2, 3, "enum_LAST_WRITE"], [15, 7, 3, "enum_LAST_WRITE"], [7, 9, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "GoogleCloudPlatform", "repo": "PerfKitBenchmarker", "path": "tests/configs/benchmark_config_spec_test.py", "id": 5421, "has_bug": false, "code_full": "from typing import Any, Callable\n\nimport mock\n\nproviders: Any = None\n_COMPONENT: str = \"\"\n\nclass Class:\n    _spec_class: Callable\n    _kwargs: dict\n\n    def createNonPresentFlags(self) -> Any:\n        pass\n\n    def testCallsLoadProviderAndChecksRequirements(self) -> None:\n        flag_values: Any = self.createNonPresentFlags()\n        flag_values.ignore_package_requirements = False\n        with mock.patch(providers.__name__ + '.LoadProvider'):\n            self._spec_class(_COMPONENT, flag_values, **self._kwargs)\n            providers.LoadProvider.assert_called_once_with('GCP', False)\n", "code": "def testCallsLoadProviderAndChecksRequirements(self) -> None:\n    flag_values: Any = self.createNonPresentFlags()\n    flag_values.ignore_package_requirements = False\n    with mock.patch(providers.__name__ + '.LoadProvider'):\n        self._spec_class(_COMPONENT, flag_values, **self._kwargs)\n        providers.LoadProvider.assert_called_once_with('GCP', False)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "565c18b8fd3dd19b4ffc196aa889f9c711f30da1"}
{"source_tokens": ["#NEWLINE#", "def test_thread_closed_reopened_again(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "with", "self", ".", "_get_swap_context", "(", ")", ":", "#NEWLINE#", "#INDENT#", "user_id", "=", "'uid'", "#NEWLINE#", "exp_id", "=", "'eid'", "#NEWLINE#", "thread_id_1", "=", "'tid1'", "#NEWLINE#", "self", ".", "save_new_valid_exploration", "(", "exp_id", ",", "'owner'", ")", "#NEWLINE#", "thread_1", "=", "feedback_models", ".", "FeedbackThreadModel", ".", "create", "(", "exp_id", ",", "thread_id_1", ")", "#NEWLINE#", "thread_1", ".", "exploration_id", "=", "exp_id", "#NEWLINE#", "thread_1", ".", "put", "(", ")", "#NEWLINE#", "self", ".", "_run_job_and_check_results", "(", "exp_id", ",", "{", "'num_open_threads'", ":", "1", ",", "'num_total_threads'", ":", "1", "}", ")", "#NEWLINE#", "ModifiedFeedbackAnalyticsAggregator", ".", "stop_computation", "(", "user_id", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "self", ".", "count_jobs_in_taskqueue", "(", ")", ",", "0", ")", "#NEWLINE#", "thread", "=", "feedback_models", ".", "FeedbackThreadModel", ".", "get_by_exp_and_thread_id", "(", "exp_id", ",", "thread_id_1", ")", "#NEWLINE#", "thread", ".", "status", "=", "feedback_models", ".", "STATUS_CHOICES_FIXED", "#NEWLINE#", "thread", ".", "put", "(", ")", "#NEWLINE#", "self", ".", "_run_job_and_check_results", "(", "exp_id", ",", "{", "'num_open_threads'", ":", "0", ",", "'num_total_threads'", ":", "1", "}", ")", "#NEWLINE#", "ModifiedFeedbackAnalyticsAggregator", ".", "stop_computation", "(", "user_id", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "self", ".", "count_jobs_in_taskqueue", "(", ")", ",", "0", ")", "#NEWLINE#", "thread", "=", "feedback_models", ".", "FeedbackThreadModel", ".", "get_by_exp_and_thread_id", "(", "exp_id", ",", "thread_id_1", ")", "#NEWLINE#", "thread", ".", "status", "=", "feedback_models", ".", "STATUS_CHOICES_OPEN", "#NEWLINE#", "thread", ".", "put", "(", ")", "#NEWLINE#", "self", ".", "_run_job_and_check_results", "(", "exp_id", ",", "{", "'num_open_threads'", ":", "1", ",", "'num_total_threads'", ":", "1", "}", ")"], "edges": [[15, 18, 7, "enum_FIELD"], [19, 22, 7, "enum_FIELD"], [23, 26, 7, "enum_FIELD"], [27, 33, 7, "enum_FIELD"], [36, 46, 7, "enum_FIELD"], [49, 54, 7, "enum_FIELD"], [55, 59, 7, "enum_FIELD"], [61, 67, 7, "enum_FIELD"], [78, 82, 7, "enum_FIELD"], [85, 95, 7, "enum_FIELD"], [98, 108, 7, "enum_FIELD"], [111, 117, 7, "enum_FIELD"], [119, 123, 7, "enum_FIELD"], [125, 131, 7, "enum_FIELD"], [142, 146, 7, "enum_FIELD"], [149, 159, 7, "enum_FIELD"], [162, 172, 7, "enum_FIELD"], [175, 181, 7, "enum_FIELD"], [183, 187, 7, "enum_FIELD"], [189, 195, 7, "enum_FIELD"], [11, 9, 7, "enum_FIELD"], [33, 29, 7, "enum_FIELD"], [46, 42, 7, "enum_FIELD"], [51, 50, 7, "enum_FIELD"], [59, 57, 7, "enum_FIELD"], [67, 63, 7, "enum_FIELD"], [82, 80, 7, "enum_FIELD"], [95, 87, 7, "enum_FIELD"], [108, 104, 7, "enum_FIELD"], [113, 112, 7, "enum_FIELD"], [117, 116, 7, "enum_FIELD"], [123, 121, 7, "enum_FIELD"], [131, 127, 7, "enum_FIELD"], [146, 144, 7, "enum_FIELD"], [159, 151, 7, "enum_FIELD"], [172, 168, 7, "enum_FIELD"], [177, 176, 7, "enum_FIELD"], [181, 180, 7, "enum_FIELD"], [187, 185, 7, "enum_FIELD"], [195, 191, 7, "enum_FIELD"], [9, 8, 7, "enum_FIELD"], [29, 28, 7, "enum_FIELD"], [42, 40, 7, "enum_FIELD"], [57, 56, 7, "enum_FIELD"], [63, 62, 7, "enum_FIELD"], [80, 79, 7, "enum_FIELD"], [87, 86, 7, "enum_FIELD"], [93, 91, 7, "enum_FIELD"], [104, 102, 7, "enum_FIELD"], [121, 120, 7, "enum_FIELD"], [127, 126, 7, "enum_FIELD"], [144, 143, 7, "enum_FIELD"], [151, 150, 7, "enum_FIELD"], [157, 155, 7, "enum_FIELD"], [168, 166, 7, "enum_FIELD"], [185, 184, 7, "enum_FIELD"], [191, 190, 7, "enum_FIELD"], [40, 39, 7, "enum_FIELD"], [91, 90, 7, "enum_FIELD"], [102, 101, 7, "enum_FIELD"], [155, 154, 7, "enum_FIELD"], [166, 165, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 7, 9, "enum_NEXT_SYNTAX"], [8, 2, 10, "enum_LAST_LEXICAL_USE"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [28, 8, 10, "enum_LAST_LEXICAL_USE"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [32, 20, 10, "enum_LAST_LEXICAL_USE"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [45, 32, 10, "enum_LAST_LEXICAL_USE"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [47, 24, 10, "enum_LAST_LEXICAL_USE"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [50, 37, 10, "enum_LAST_LEXICAL_USE"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [54, 45, 10, "enum_LAST_LEXICAL_USE"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [56, 50, 10, "enum_LAST_LEXICAL_USE"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [62, 28, 10, "enum_LAST_LEXICAL_USE"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [66, 54, 10, "enum_LAST_LEXICAL_USE"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [83, 16, 10, "enum_LAST_LEXICAL_USE"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [86, 62, 10, "enum_LAST_LEXICAL_USE"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [90, 86, 10, "enum_LAST_LEXICAL_USE"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [101, 39, 10, "enum_LAST_LEXICAL_USE"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [107, 66, 10, "enum_LAST_LEXICAL_USE"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [109, 47, 10, "enum_LAST_LEXICAL_USE"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [112, 99, 10, "enum_LAST_LEXICAL_USE"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [116, 101, 10, "enum_LAST_LEXICAL_USE"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [120, 112, 10, "enum_LAST_LEXICAL_USE"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [126, 90, 10, "enum_LAST_LEXICAL_USE"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [130, 107, 10, "enum_LAST_LEXICAL_USE"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [143, 79, 10, "enum_LAST_LEXICAL_USE"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [147, 83, 10, "enum_LAST_LEXICAL_USE"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [150, 126, 10, "enum_LAST_LEXICAL_USE"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [154, 150, 10, "enum_LAST_LEXICAL_USE"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [163, 120, 10, "enum_LAST_LEXICAL_USE"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [165, 116, 10, "enum_LAST_LEXICAL_USE"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [171, 130, 10, "enum_LAST_LEXICAL_USE"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [173, 109, 10, "enum_LAST_LEXICAL_USE"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [176, 163, 10, "enum_LAST_LEXICAL_USE"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [180, 165, 10, "enum_LAST_LEXICAL_USE"], [179, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [184, 176, 10, "enum_LAST_LEXICAL_USE"], [183, 184, 9, "enum_NEXT_SYNTAX"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [187, 188, 9, "enum_NEXT_SYNTAX"], [188, 189, 9, "enum_NEXT_SYNTAX"], [190, 154, 10, "enum_LAST_LEXICAL_USE"], [189, 190, 9, "enum_NEXT_SYNTAX"], [190, 191, 9, "enum_NEXT_SYNTAX"], [191, 192, 9, "enum_NEXT_SYNTAX"], [192, 193, 9, "enum_NEXT_SYNTAX"], [194, 171, 10, "enum_LAST_LEXICAL_USE"], [193, 194, 9, "enum_NEXT_SYNTAX"], [194, 195, 9, "enum_NEXT_SYNTAX"], [195, 196, 9, "enum_NEXT_SYNTAX"], [196, 197, 9, "enum_NEXT_SYNTAX"], [197, 198, 9, "enum_NEXT_SYNTAX"], [198, 199, 9, "enum_NEXT_SYNTAX"], [199, 200, 9, "enum_NEXT_SYNTAX"], [200, 201, 9, "enum_NEXT_SYNTAX"], [201, 202, 9, "enum_NEXT_SYNTAX"], [202, 203, 9, "enum_NEXT_SYNTAX"], [203, 204, 9, "enum_NEXT_SYNTAX"], [204, 205, 9, "enum_NEXT_SYNTAX"], [37, 45, 4, "enum_COMPUTED_FROM"], [37, 47, 4, "enum_COMPUTED_FROM"], [37, 39, 4, "enum_COMPUTED_FROM"], [51, 54, 4, "enum_COMPUTED_FROM"], [99, 107, 4, "enum_COMPUTED_FROM"], [99, 109, 4, "enum_COMPUTED_FROM"], [99, 101, 4, "enum_COMPUTED_FROM"], [113, 116, 4, "enum_COMPUTED_FROM"], [163, 171, 4, "enum_COMPUTED_FROM"], [163, 173, 4, "enum_COMPUTED_FROM"], [163, 165, 4, "enum_COMPUTED_FROM"], [177, 180, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "oppia", "repo": "oppia", "path": "core/domain/feedback_jobs_continuous_test.py", "id": 37393, "has_bug": false, "code_full": "\nfrom typing import Any, Dict\n\n\nclass feedback_models:\n    STATUS_CHOICES_FIXED: str\n    STATUS_CHOICES_OPEN: str\n\n    class FeedbackThreadModel:\n        exploration_id: str\n        status: str\n\n        @classmethod\n        def create(cls, exp_id: str, thread_id: str) -> \"feedback_models.FeedbackThreadModel\":\n            return cls()\n\n        @classmethod\n        def get_by_exp_and_thread_id(cls, exp_id: str, thread_id: str) -> \"feedback_models.FeedbackThreadModel\":\n            return cls()\n        \n        def put(self):\n            pass\n\n\nclass ModifiedFeedbackAnalyticsAggregator:\n\n    @classmethod\n    def stop_computation(cls, user_id: str):\n        pass\n\n\nclass taskqueue_services:\n    QUEUE_NAME_CONTINUOUS_JOBS: str\n\nclass Class:\n    def _get_swap_context(self) -> Any:\n        pass\n\n    def save_new_valid_exploration(self, exp_id: str, owner: str):\n        pass\n\n    def _run_job_and_check_results(self, exp_id: str, expected_output: Dict):\n        pass\n\n    def count_jobs_in_taskqueue(self, queue_name: str) -> int:\n        return 0\n    \n    def assertEqual(self, a: Any, b: Any) -> bool:\n        return True\n\n    def test_thread_closed_reopened_again(self) -> None:\n        with self._get_swap_context():\n            # Create test objects.\n            user_id: str = 'uid'\n            exp_id: str = 'eid'\n            thread_id_1: str = 'tid1'\n            self.save_new_valid_exploration(exp_id, 'owner')\n            thread_1 = feedback_models.FeedbackThreadModel.create(\n                exp_id, thread_id_1)\n            thread_1.exploration_id = exp_id\n            thread_1.put()\n\n            # Start job.\n            self._run_job_and_check_results(exp_id, {\n                'num_open_threads': 1,\n                'num_total_threads': 1,\n            })\n\n            # Stop job.\n            ModifiedFeedbackAnalyticsAggregator.stop_computation(user_id)\n            self.assertEqual(\n                self.count_jobs_in_taskqueue(\n                    taskqueue_services.QUEUE_NAME_CONTINUOUS_JOBS), 0)\n\n            # Close thread.\n            thread: feedback_models.FeedbackThreadModel = (feedback_models.FeedbackThreadModel.\n                        get_by_exp_and_thread_id(exp_id, thread_id_1))\n            thread.status = feedback_models.STATUS_CHOICES_FIXED\n            thread.put()\n\n            # Restart job.\n            self._run_job_and_check_results(exp_id, {\n                'num_open_threads': 0,\n                'num_total_threads': 1,\n            })\n\n            # Stop job.\n            ModifiedFeedbackAnalyticsAggregator.stop_computation(user_id)\n            self.assertEqual(\n                self.count_jobs_in_taskqueue(\n                    taskqueue_services.QUEUE_NAME_CONTINUOUS_JOBS), 0)\n\n            # Reopen thread.\n            thread = (feedback_models.FeedbackThreadModel.\n                        get_by_exp_and_thread_id(exp_id, thread_id_1))\n            thread.status = feedback_models.STATUS_CHOICES_OPEN\n            thread.put()\n\n            # Restart job.\n            self._run_job_and_check_results(exp_id, {\n                'num_open_threads': 1,\n                'num_total_threads': 1,\n            })\n", "code": "def test_thread_closed_reopened_again(self) -> None:\n    with self._get_swap_context():\n        # Create test objects.\n        user_id: str = 'uid'\n        exp_id: str = 'eid'\n        thread_id_1: str = 'tid1'\n        self.save_new_valid_exploration(exp_id, 'owner')\n        thread_1 = feedback_models.FeedbackThreadModel.create(\n            exp_id, thread_id_1)\n        thread_1.exploration_id = exp_id\n        thread_1.put()\n\n        # Start job.\n        self._run_job_and_check_results(exp_id, {\n            'num_open_threads': 1,\n            'num_total_threads': 1,\n        })\n\n        # Stop job.\n        ModifiedFeedbackAnalyticsAggregator.stop_computation(user_id)\n        self.assertEqual(\n            self.count_jobs_in_taskqueue(\n                taskqueue_services.QUEUE_NAME_CONTINUOUS_JOBS), 0)\n\n        # Close thread.\n        thread: feedback_models.FeedbackThreadModel = (feedback_models.FeedbackThreadModel.\n                    get_by_exp_and_thread_id(exp_id, thread_id_1))\n        thread.status = feedback_models.STATUS_CHOICES_FIXED\n        thread.put()\n\n        # Restart job.\n        self._run_job_and_check_results(exp_id, {\n            'num_open_threads': 0,\n            'num_total_threads': 1,\n        })\n\n        # Stop job.\n        ModifiedFeedbackAnalyticsAggregator.stop_computation(user_id)\n        self.assertEqual(\n            self.count_jobs_in_taskqueue(\n                taskqueue_services.QUEUE_NAME_CONTINUOUS_JOBS), 0)\n\n        # Reopen thread.\n        thread = (feedback_models.FeedbackThreadModel.\n                    get_by_exp_and_thread_id(exp_id, thread_id_1))\n        thread.status = feedback_models.STATUS_CHOICES_OPEN\n        thread.put()\n\n        # Restart job.\n        self._run_job_and_check_results(exp_id, {\n            'num_open_threads': 1,\n            'num_total_threads': 1,\n        })\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "bc32097c5c0f1a8cad1ef9b428bfbad3211a41c9"}
{"source_tokens": ["#NEWLINE#", "def add_job(", "self", ",", "job", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "job", ".", "id", "in", "self", ".", "_jobs_index", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "ConflictingIdError", "(", "job", ".", "id", ")", "#NEWLINE#", "#UNINDENT#", "timestamp", "=", "datetime_to_utc_timestamp", "(", "job", ".", "next_run_time", ")", "#NEWLINE#", "index", "=", "self", ".", "_get_job_index", "(", "timestamp", ",", "job", ".", "id", ")", "#NEWLINE#", "self", ".", "_jobs", ".", "insert", "(", "index", ",", "(", "job", ",", "timestamp", ")", ")", "#NEWLINE#", "self", ".", "_jobs_index", "[", "job", ".", "id", "]", "=", "(", "job", ",", "timestamp", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [9, 14, 7, "enum_FIELD"], [30, 34, 7, "enum_FIELD"], [39, 47, 7, "enum_FIELD"], [52, 60, 7, "enum_FIELD"], [67, 79, 7, "enum_FIELD"], [14, 12, 7, "enum_FIELD"], [22, 24, 7, "enum_FIELD"], [34, 33, 7, "enum_FIELD"], [47, 43, 7, "enum_FIELD"], [60, 56, 7, "enum_FIELD"], [71, 69, 7, "enum_FIELD"], [71, 73, 7, "enum_FIELD"], [12, 11, 7, "enum_FIELD"], [16, 15, 7, "enum_FIELD"], [24, 23, 7, "enum_FIELD"], [36, 35, 7, "enum_FIELD"], [43, 42, 7, "enum_FIELD"], [49, 48, 7, "enum_FIELD"], [56, 54, 7, "enum_FIELD"], [69, 68, 7, "enum_FIELD"], [73, 72, 7, "enum_FIELD"], [26, 25, 7, "enum_FIELD"], [54, 53, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [11, 4, 10, "enum_LAST_LEXICAL_USE"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [15, 2, 10, "enum_LAST_LEXICAL_USE"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [25, 11, 10, "enum_LAST_LEXICAL_USE"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [35, 25, 10, "enum_LAST_LEXICAL_USE"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [42, 15, 10, "enum_LAST_LEXICAL_USE"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [46, 31, 10, "enum_LAST_LEXICAL_USE"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [48, 35, 10, "enum_LAST_LEXICAL_USE"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [53, 42, 10, "enum_LAST_LEXICAL_USE"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [59, 40, 10, "enum_LAST_LEXICAL_USE"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [62, 48, 10, "enum_LAST_LEXICAL_USE"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [64, 46, 10, "enum_LAST_LEXICAL_USE"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [68, 53, 10, "enum_LAST_LEXICAL_USE"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [72, 62, 10, "enum_LAST_LEXICAL_USE"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [78, 72, 10, "enum_LAST_LEXICAL_USE"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [80, 64, 10, "enum_LAST_LEXICAL_USE"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [3, 14, 1, "enum_CFG_NEXT"], [14, 30, 1, "enum_CFG_NEXT"], [14, 22, 1, "enum_CFG_NEXT"], [30, 39, 1, "enum_CFG_NEXT"], [39, 52, 1, "enum_CFG_NEXT"], [52, 67, 1, "enum_CFG_NEXT"], [11, 4, 3, "enum_LAST_WRITE"], [15, 2, 3, "enum_LAST_WRITE"], [25, 11, 2, "enum_LAST_READ"], [25, 4, 3, "enum_LAST_WRITE"], [35, 11, 2, "enum_LAST_READ"], [35, 4, 3, "enum_LAST_WRITE"], [42, 15, 2, "enum_LAST_READ"], [42, 2, 3, "enum_LAST_WRITE"], [46, 31, 3, "enum_LAST_WRITE"], [48, 35, 2, "enum_LAST_READ"], [48, 4, 3, "enum_LAST_WRITE"], [53, 42, 2, "enum_LAST_READ"], [53, 2, 3, "enum_LAST_WRITE"], [59, 40, 3, "enum_LAST_WRITE"], [62, 48, 2, "enum_LAST_READ"], [62, 4, 3, "enum_LAST_WRITE"], [64, 46, 2, "enum_LAST_READ"], [64, 31, 3, "enum_LAST_WRITE"], [78, 62, 2, "enum_LAST_READ"], [78, 4, 3, "enum_LAST_WRITE"], [80, 64, 2, "enum_LAST_READ"], [80, 31, 3, "enum_LAST_WRITE"], [68, 53, 2, "enum_LAST_READ"], [68, 2, 3, "enum_LAST_WRITE"], [72, 78, 2, "enum_LAST_READ"], [72, 4, 3, "enum_LAST_WRITE"], [31, 33, 4, "enum_COMPUTED_FROM"], [31, 35, 4, "enum_COMPUTED_FROM"], [40, 46, 4, "enum_COMPUTED_FROM"], [40, 42, 4, "enum_COMPUTED_FROM"], [40, 48, 4, "enum_COMPUTED_FROM"], [71, 78, 4, "enum_COMPUTED_FROM"], [71, 80, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "agronholm", "repo": "apscheduler", "path": "apscheduler/jobstores/memory.py", "id": 8603, "has_bug": false, "code_full": "from datetime import datetime\nfrom typing import Any, Dict, List, Tuple\n\n\nclass ConflictingIdError(Exception):\n    def __init__(self, id: str):\n        self.id = id\n\nclass Job:\n    def __init__(self, id: str, next_run_time: datetime):\n        self.id = id\n        self.next_run_time = next_run_time\n\ndef datetime_to_utc_timestamp(dt: datetime) -> float:\n    return 0\n\nclass Class:\n    _jobs: List[Tuple[Job, float]]\n    _jobs_index: Dict[str, Tuple[Job, float]] \n\n    def _get_job_index(self, timestamp: float, job_id: str) -> int:\n        return 0\n\n    def add_job(self, job: Job):\n        if job.id in self._jobs_index:\n            raise ConflictingIdError(job.id)\n\n        timestamp: float = datetime_to_utc_timestamp(job.next_run_time)\n        index: int = self._get_job_index(timestamp, job.id)\n        self._jobs.insert(index, (job, timestamp))\n        self._jobs_index[job.id] = (job, timestamp)\n", "code": "def add_job(self, job: Job):\n    if job.id in self._jobs_index:\n        raise ConflictingIdError(job.id)\n\n    timestamp: float = datetime_to_utc_timestamp(job.next_run_time)\n    index: int = self._get_job_index(timestamp, job.id)\n    self._jobs.insert(index, (job, timestamp))\n    self._jobs_index[job.id] = (job, timestamp)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "e24e29f6b0b621e7a9d20d3aee6e5941ce118726"}
{"source_tokens": ["#NEWLINE#", "def _display_completed_job(", "self", ",", "totals", ",", "timestmp", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Generate a summary flash message for a completed import job\\n\\n        @param totals: the job totals as tuple\\n                       (total imported, total errors, total ignored)\\n        @param timestmp: the timestamp of the completion\\n    '", "#NEWLINE#", "messages", "=", "self", ".", "messages", "#NEWLINE#", "msg", "=", "(", "'%s - %s - %s'", "%", "(", "messages", ".", "commit_total_records_imported", ",", "messages", ".", "commit_total_errors", ",", "messages", ".", "commit_total_records_ignored", ")", ")", "#NEWLINE#", "msg", "=", "(", "msg", "%", "totals", ")", "#NEWLINE#", "if", "(", "timestmp", "!=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "current", ".", "session", ".", "flash", "=", "(", "messages", ".", "job_completed", "%", "(", "self", ".", "date_represent", "(", "timestmp", ")", ",", "msg", ")", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "totals", "[", "1", "]", "is not", "0", ")", ":", "#NEWLINE#", "#INDENT#", "current", ".", "session", ".", "error", "=", "msg", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "totals", "[", "2", "]", "is not", "0", ")", ":", "#NEWLINE#", "#INDENT#", "current", ".", "session", ".", "warning", "=", "msg", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "current", ".", "session", ".", "flash", "=", "msg"], "edges": [[1, 5, 7, "enum_FIELD"], [12, 13, 7, "enum_FIELD"], [14, 18, 7, "enum_FIELD"], [20, 25, 7, "enum_FIELD"], [40, 45, 7, "enum_FIELD"], [55, 52, 7, "enum_FIELD"], [18, 17, 7, "enum_FIELD"], [25, 24, 7, "enum_FIELD"], [25, 30, 7, "enum_FIELD"], [45, 44, 7, "enum_FIELD"], [45, 46, 7, "enum_FIELD"], [52, 51, 7, "enum_FIELD"], [57, 68, 7, "enum_FIELD"], [95, 92, 7, "enum_FIELD"], [61, 59, 7, "enum_FIELD"], [68, 66, 7, "enum_FIELD"], [68, 76, 7, "enum_FIELD"], [92, 89, 7, "enum_FIELD"], [97, 104, 7, "enum_FIELD"], [120, 117, 7, "enum_FIELD"], [28, 27, 7, "enum_FIELD"], [32, 31, 7, "enum_FIELD"], [36, 35, 7, "enum_FIELD"], [59, 58, 7, "enum_FIELD"], [66, 65, 7, "enum_FIELD"], [89, 88, 7, "enum_FIELD"], [89, 90, 7, "enum_FIELD"], [101, 99, 7, "enum_FIELD"], [117, 114, 7, "enum_FIELD"], [122, 129, 7, "enum_FIELD"], [135, 142, 7, "enum_FIELD"], [73, 71, 7, "enum_FIELD"], [99, 98, 7, "enum_FIELD"], [114, 113, 7, "enum_FIELD"], [114, 115, 7, "enum_FIELD"], [126, 124, 7, "enum_FIELD"], [139, 137, 7, "enum_FIELD"], [71, 70, 7, "enum_FIELD"], [124, 123, 7, "enum_FIELD"], [137, 136, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [17, 2, 10, "enum_LAST_LEXICAL_USE"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [27, 15, 10, "enum_LAST_LEXICAL_USE"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [31, 27, 10, "enum_LAST_LEXICAL_USE"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [35, 31, 10, "enum_LAST_LEXICAL_USE"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [41, 21, 10, "enum_LAST_LEXICAL_USE"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [44, 41, 10, "enum_LAST_LEXICAL_USE"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [46, 4, 10, "enum_LAST_LEXICAL_USE"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [51, 6, 10, "enum_LAST_LEXICAL_USE"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [65, 35, 10, "enum_LAST_LEXICAL_USE"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [70, 17, 10, "enum_LAST_LEXICAL_USE"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [74, 51, 10, "enum_LAST_LEXICAL_USE"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [77, 44, 10, "enum_LAST_LEXICAL_USE"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [88, 46, 10, "enum_LAST_LEXICAL_USE"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 97, 9, "enum_NEXT_SYNTAX"], [98, 58, 10, "enum_LAST_LEXICAL_USE"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [104, 77, 10, "enum_LAST_LEXICAL_USE"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [113, 88, 10, "enum_LAST_LEXICAL_USE"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 122, 9, "enum_NEXT_SYNTAX"], [123, 98, 10, "enum_LAST_LEXICAL_USE"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [129, 104, 10, "enum_LAST_LEXICAL_USE"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 135, 9, "enum_NEXT_SYNTAX"], [136, 123, 10, "enum_LAST_LEXICAL_USE"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [142, 129, 10, "enum_LAST_LEXICAL_USE"], [141, 142, 9, "enum_NEXT_SYNTAX"], [8, 1, 1, "enum_CFG_NEXT"], [5, 12, 1, "enum_CFG_NEXT"], [12, 14, 1, "enum_CFG_NEXT"], [14, 20, 1, "enum_CFG_NEXT"], [20, 40, 1, "enum_CFG_NEXT"], [40, 52, 1, "enum_CFG_NEXT"], [52, 92, 1, "enum_CFG_NEXT"], [52, 57, 1, "enum_CFG_NEXT"], [92, 117, 1, "enum_CFG_NEXT"], [92, 97, 1, "enum_CFG_NEXT"], [117, 135, 1, "enum_CFG_NEXT"], [117, 122, 1, "enum_CFG_NEXT"], [17, 2, 3, "enum_LAST_WRITE"], [27, 15, 3, "enum_LAST_WRITE"], [31, 27, 2, "enum_LAST_READ"], [31, 15, 3, "enum_LAST_WRITE"], [35, 31, 2, "enum_LAST_READ"], [35, 15, 3, "enum_LAST_WRITE"], [44, 21, 3, "enum_LAST_WRITE"], [46, 4, 3, "enum_LAST_WRITE"], [41, 44, 2, "enum_LAST_READ"], [41, 21, 3, "enum_LAST_WRITE"], [51, 6, 3, "enum_LAST_WRITE"], [65, 35, 2, "enum_LAST_READ"], [65, 15, 3, "enum_LAST_WRITE"], [70, 17, 2, "enum_LAST_READ"], [70, 2, 3, "enum_LAST_WRITE"], [74, 51, 2, "enum_LAST_READ"], [74, 6, 3, "enum_LAST_WRITE"], [77, 44, 2, "enum_LAST_READ"], [77, 41, 3, "enum_LAST_WRITE"], [88, 46, 2, "enum_LAST_READ"], [88, 4, 3, "enum_LAST_WRITE"], [104, 44, 2, "enum_LAST_READ"], [104, 41, 3, "enum_LAST_WRITE"], [113, 88, 2, "enum_LAST_READ"], [113, 4, 3, "enum_LAST_WRITE"], [129, 44, 2, "enum_LAST_READ"], [129, 41, 3, "enum_LAST_WRITE"], [142, 44, 2, "enum_LAST_READ"], [142, 41, 3, "enum_LAST_WRITE"], [15, 17, 4, "enum_COMPUTED_FROM"], [21, 27, 4, "enum_COMPUTED_FROM"], [21, 31, 4, "enum_COMPUTED_FROM"], [21, 35, 4, "enum_COMPUTED_FROM"], [41, 44, 4, "enum_COMPUTED_FROM"], [41, 46, 4, "enum_COMPUTED_FROM"], [61, 65, 4, "enum_COMPUTED_FROM"], [61, 77, 4, "enum_COMPUTED_FROM"], [61, 74, 4, "enum_COMPUTED_FROM"], [61, 70, 4, "enum_COMPUTED_FROM"], [101, 104, 4, "enum_COMPUTED_FROM"], [126, 129, 4, "enum_COMPUTED_FROM"], [139, 142, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "sahana", "repo": "eden", "path": "modules/s3/s3import.py", "id": 46019, "has_bug": false, "code_full": "from typing import Any, Optional, Tuple\n\n\nclass Messages:\n    commit_total_records_imported: str\n    commit_total_errors: str\n    commit_total_records_ignored: str\n    job_completed: str\n\nclass Sesssion:\n    flash: str\n    error: str\n    warning: str\n\nclass Current:\n    session: Sesssion\n\ncurrent = Current()\n\nclass Class:\n    messages: Messages\n\n    def date_represent(self, timestmp: Any) -> str:\n        return \"\"\n\n    def _display_completed_job(self, totals: Tuple[int, int, int], timestmp: Optional[Any] = None):\n        \"\"\"\n            Generate a summary flash message for a completed import job\n\n            Args:\n                totals: the job totals as tuple\n                        (total imported, total errors, total ignored)\n                timestmp: the timestamp of the completion\n        \"\"\"\n\n        messages = self.messages\n        msg: str = \"%s - %s - %s\" %                 (messages.commit_total_records_imported,\n                messages.commit_total_errors,\n                messages.commit_total_records_ignored)\n        msg = msg % totals\n\n        if timestmp != None:\n            current.session.flash = messages.job_completed %                                         (self.date_represent(timestmp), msg)\n        elif totals[1] != 0:\n            current.session.error = msg\n        elif totals[2] != 0:\n            current.session.warning = msg\n        else:\n            current.session.flash = msg\n", "code": "def _display_completed_job(self, totals: Tuple[int, int, int], timestmp: Optional[Any] = None):\n    \"\"\"\n        Generate a summary flash message for a completed import job\n\n        Args:\n            totals: the job totals as tuple\n                    (total imported, total errors, total ignored)\n            timestmp: the timestamp of the completion\n    \"\"\"\n\n    messages = self.messages\n    msg: str = \"%s - %s - %s\" %             (messages.commit_total_records_imported,\n            messages.commit_total_errors,\n            messages.commit_total_records_ignored)\n    msg = msg % totals\n\n    if timestmp != None:\n        current.session.flash = messages.job_completed %                                     (self.date_represent(timestmp), msg)\n    elif totals[1] != 0:\n        current.session.error = msg\n    elif totals[2] != 0:\n        current.session.warning = msg\n    else:\n        current.session.flash = msg\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "71d5fbef7220a30fbd32f52a5c02400a3177e021"}
{"source_tokens": ["#NEWLINE#", "def test_01_simple_open(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "g", "=", "self", ".", "_load_example", "(", ")", "#NEWLINE#", "assert", "(", "len", "(", "g", ".", "store", ")", "==", "449", ")"], "edges": [[6, 12, 7, "enum_FIELD"], [15, 23, 7, "enum_FIELD"], [12, 10, 7, "enum_FIELD"], [23, 18, 7, "enum_FIELD"], [10, 9, 7, "enum_FIELD"], [18, 17, 7, "enum_FIELD"], [20, 19, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [9, 2, 10, "enum_LAST_LEXICAL_USE"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [19, 7, 10, "enum_LAST_LEXICAL_USE"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [6, 15, 1, "enum_CFG_NEXT"], [9, 2, 3, "enum_LAST_WRITE"], [19, 7, 3, "enum_LAST_WRITE"], [7, 9, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "RDFLib", "repo": "rdflib", "path": "test/test_nquads.py", "id": 7180, "has_bug": false, "code_full": "from typing import Sized\n\n\nclass ConjunctiveGraph:\n    store: Sized\n\n\nclass Class:\n    def _load_example(self) -> ConjunctiveGraph:\n        return ConjunctiveGraph()\n\n    def test_01_simple_open(self):\n        g: ConjunctiveGraph = self._load_example()\n        assert len(g.store) == 449\n", "code": "def test_01_simple_open(self):\n    g: ConjunctiveGraph = self._load_example()\n    assert len(g.store) == 449\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "9bfa17b6fe4b9d10ecda4ef5f62a2944461b1c91"}
{"source_tokens": ["#NEWLINE#", "def _recurse(", "o", ",", "dct", ",", "depth", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "(", "max_depth", ">=", "0", ")", "and", "(", "depth", ">", "max_depth", ")", ")", ":", "#NEWLINE#", "#INDENT#", "return", "#NEWLINE#", "#UNINDENT#", "for", "ref", "in", "get_referents", "(", "o", ")", ":", "#NEWLINE#", "#INDENT#", "idr", "=", "id", "(", "ref", ")", "#NEWLINE#", "if", "(", "not", "(", "idr", "in", "dct", ")", ")", ":", "#NEWLINE#", "#INDENT#", "dct", "[", "idr", "]", "=", "(", "ref", ",", "getsizeof", "(", "ref", ",", "default", "=", "0", ")", ")", "#NEWLINE#", "_recurse", "(", "ref", ",", "dct", ",", "(", "depth", "+", "1", ")", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [11, 18, 7, "enum_FIELD"], [33, 32, 7, "enum_FIELD"], [33, 35, 7, "enum_FIELD"], [35, 34, 7, "enum_FIELD"], [40, 44, 7, "enum_FIELD"], [48, 50, 7, "enum_FIELD"], [15, 14, 7, "enum_FIELD"], [21, 20, 7, "enum_FIELD"], [44, 43, 7, "enum_FIELD"], [50, 53, 7, "enum_FIELD"], [59, 67, 7, "enum_FIELD"], [77, 81, 7, "enum_FIELD"], [53, 52, 7, "enum_FIELD"], [61, 60, 7, "enum_FIELD"], [61, 62, 7, "enum_FIELD"], [81, 78, 7, "enum_FIELD"], [71, 68, 7, "enum_FIELD"], [86, 85, 7, "enum_FIELD"], [86, 87, 7, "enum_FIELD"], [72, 74, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [20, 6, 10, "enum_LAST_LEXICAL_USE"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [22, 14, 10, "enum_LAST_LEXICAL_USE"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 28, 9, "enum_NEXT_SYNTAX"], [28, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [36, 2, 10, "enum_LAST_LEXICAL_USE"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [45, 32, 10, "enum_LAST_LEXICAL_USE"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [52, 41, 10, "enum_LAST_LEXICAL_USE"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [54, 4, 10, "enum_LAST_LEXICAL_USE"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 59, 9, "enum_NEXT_SYNTAX"], [60, 54, 10, "enum_LAST_LEXICAL_USE"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [62, 52, 10, "enum_LAST_LEXICAL_USE"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [66, 45, 10, "enum_LAST_LEXICAL_USE"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [70, 66, 10, "enum_LAST_LEXICAL_USE"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [80, 70, 10, "enum_LAST_LEXICAL_USE"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [82, 60, 10, "enum_LAST_LEXICAL_USE"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [85, 20, 10, "enum_LAST_LEXICAL_USE"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [3, 18, 1, "enum_CFG_NEXT"], [18, 35, 1, "enum_CFG_NEXT"], [18, 28, 1, "enum_CFG_NEXT"], [35, 32, 1, "enum_CFG_NEXT"], [32, 40, 1, "enum_CFG_NEXT"], [40, 50, 1, "enum_CFG_NEXT"], [50, 32, 1, "enum_CFG_NEXT"], [50, 59, 1, "enum_CFG_NEXT"], [59, 77, 1, "enum_CFG_NEXT"], [77, 32, 1, "enum_CFG_NEXT"], [20, 6, 3, "enum_LAST_WRITE"], [22, 14, 2, "enum_LAST_READ"], [36, 2, 3, "enum_LAST_WRITE"], [32, 80, 2, "enum_LAST_READ"], [32, 45, 2, "enum_LAST_READ"], [32, 32, 3, "enum_LAST_WRITE"], [43, 43, 2, "enum_LAST_READ"], [45, 80, 2, "enum_LAST_READ"], [45, 45, 2, "enum_LAST_READ"], [45, 32, 3, "enum_LAST_WRITE"], [41, 62, 2, "enum_LAST_READ"], [41, 52, 2, "enum_LAST_READ"], [41, 41, 3, "enum_LAST_WRITE"], [52, 62, 2, "enum_LAST_READ"], [52, 52, 2, "enum_LAST_READ"], [52, 41, 3, "enum_LAST_WRITE"], [54, 82, 2, "enum_LAST_READ"], [54, 54, 2, "enum_LAST_READ"], [54, 4, 3, "enum_LAST_WRITE"], [66, 45, 2, "enum_LAST_READ"], [66, 32, 3, "enum_LAST_WRITE"], [68, 68, 2, "enum_LAST_READ"], [70, 66, 2, "enum_LAST_READ"], [70, 32, 3, "enum_LAST_WRITE"], [60, 54, 2, "enum_LAST_READ"], [60, 4, 3, "enum_LAST_WRITE"], [62, 52, 2, "enum_LAST_READ"], [62, 41, 3, "enum_LAST_WRITE"], [78, 78, 2, "enum_LAST_READ"], [80, 70, 2, "enum_LAST_READ"], [80, 32, 3, "enum_LAST_WRITE"], [82, 60, 2, "enum_LAST_READ"], [82, 4, 3, "enum_LAST_WRITE"], [85, 85, 2, "enum_LAST_READ"], [85, 20, 2, "enum_LAST_READ"], [85, 6, 3, "enum_LAST_WRITE"], [41, 43, 4, "enum_COMPUTED_FROM"], [41, 45, 4, "enum_COMPUTED_FROM"], [61, 66, 4, "enum_COMPUTED_FROM"], [61, 68, 4, "enum_COMPUTED_FROM"], [61, 70, 4, "enum_COMPUTED_FROM"], [81, 1, 11, "enum_CALLS"], [28, 81, 5, "enum_RETURNS_TO"], [80, 2, 6, "enum_FORMAL_ARG_NAME"], [82, 4, 6, "enum_FORMAL_ARG_NAME"], [86, 6, 6, "enum_FORMAL_ARG_NAME"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "evennia", "repo": "evennia", "path": "evennia/utils/utils.py", "id": 15463, "has_bug": false, "code_full": "from typing import Sized\n\n\nclass ConjunctiveGraph:\n    store: Sized\n\n\nclass Class:\n    def _load_example(self) -> ConjunctiveGraph:\n        return ConjunctiveGraph()\n\n    def test_01_simple_open(self):\n        g: ConjunctiveGraph = self._load_example()\n        assert len(g.store) == 449\n", "code": "def test_01_simple_open(self):\n    g: ConjunctiveGraph = self._load_example()\n    assert len(g.store) == 449\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "958b333a5939f55bc4ad58768a76334dda9ef885"}
{"source_tokens": ["#NEWLINE#", "def test_get_node_network_mapping(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "create_more_nodes", "(", ")", "#NEWLINE#", "nm", "=", "objects", ".", "Cluster", ".", "get_network_manager", "(", "self", ".", "cluster", ")", "#NEWLINE#", "node_roles_vs_networks", "=", "[", "(", "[", "'controller'", "]", ",", "[", "(", "'public'", ",", "'br-ex'", ")", ",", "(", "'management'", ",", "'br-mgmt'", ")", ",", "(", "'fuelweb_admin'", ",", "'br-fw-admin'", ")", "]", ")", ",", "(", "[", "'compute'", "]", ",", "[", "(", "'private'", ",", "'br-prv'", ")", ",", "(", "'storage'", ",", "'br-storage'", ")", ",", "(", "'management'", ",", "'br-mgmt'", ")", ",", "(", "'fuelweb_admin'", ",", "'br-fw-admin'", ")", "]", ")", ",", "(", "[", "'cinder'", "]", ",", "[", "(", "'storage'", ",", "'br-storage'", ")", ",", "(", "'management'", ",", "'br-mgmt'", ")", ",", "(", "'fuelweb_admin'", ",", "'br-fw-admin'", ")", "]", ")", ",", "(", "[", "'compute'", ",", "'cinder'", "]", ",", "[", "(", "'private'", ",", "'br-prv'", ")", ",", "(", "'storage'", ",", "'br-storage'", ")", ",", "(", "'management'", ",", "'br-mgmt'", ")", ",", "(", "'fuelweb_admin'", ",", "'br-fw-admin'", ")", "]", ")", ",", "(", "[", "'controller'", ",", "'cinder'", "]", ",", "[", "(", "'public'", ",", "'br-ex'", ")", ",", "(", "'storage'", ",", "'br-storage'", ")", ",", "(", "'management'", ",", "'br-mgmt'", ")", ",", "(", "'fuelweb_admin'", ",", "'br-fw-admin'", ")", "]", ")", "]", "#NEWLINE#", "for", "node", "in", "self", ".", "env", ".", "nodes", ":", "#NEWLINE#", "#INDENT#", "net_names_and_eps", "=", "nm", ".", "get_node_network_mapping", "(", "node", ")", "#NEWLINE#", "for", "(", "node_roles", ",", "networks", ")", "in", "node_roles_vs_networks", ":", "#NEWLINE#", "#INDENT#", "if", "(", "node", ".", "all_roles", "==", "set", "(", "node_roles", ")", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "assertItemsEqual", "(", "net_names_and_eps", ",", "networks", ")"], "edges": [[6, 10, 7, "enum_FIELD"], [12, 20, 7, "enum_FIELD"], [25, 86, 7, "enum_FIELD"], [184, 183, 7, "enum_FIELD"], [184, 188, 7, "enum_FIELD"], [10, 8, 7, "enum_FIELD"], [20, 18, 7, "enum_FIELD"], [188, 186, 7, "enum_FIELD"], [192, 198, 7, "enum_FIELD"], [208, 205, 7, "enum_FIELD"], [208, 209, 7, "enum_FIELD"], [8, 7, 7, "enum_FIELD"], [18, 16, 7, "enum_FIELD"], [22, 21, 7, "enum_FIELD"], [186, 185, 7, "enum_FIELD"], [198, 196, 7, "enum_FIELD"], [213, 218, 7, "enum_FIELD"], [16, 15, 7, "enum_FIELD"], [196, 195, 7, "enum_FIELD"], [218, 216, 7, "enum_FIELD"], [226, 232, 7, "enum_FIELD"], [216, 215, 7, "enum_FIELD"], [220, 219, 7, "enum_FIELD"], [232, 228, 7, "enum_FIELD"], [228, 227, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [7, 2, 10, "enum_LAST_LEXICAL_USE"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [21, 7, 10, "enum_LAST_LEXICAL_USE"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 180, 9, "enum_NEXT_SYNTAX"], [180, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 184, 9, "enum_NEXT_SYNTAX"], [185, 21, 10, "enum_LAST_LEXICAL_USE"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [187, 188, 9, "enum_NEXT_SYNTAX"], [188, 189, 9, "enum_NEXT_SYNTAX"], [189, 190, 9, "enum_NEXT_SYNTAX"], [190, 192, 9, "enum_NEXT_SYNTAX"], [192, 193, 9, "enum_NEXT_SYNTAX"], [193, 194, 9, "enum_NEXT_SYNTAX"], [195, 13, 10, "enum_LAST_LEXICAL_USE"], [194, 195, 9, "enum_NEXT_SYNTAX"], [195, 196, 9, "enum_NEXT_SYNTAX"], [196, 197, 9, "enum_NEXT_SYNTAX"], [197, 198, 9, "enum_NEXT_SYNTAX"], [199, 183, 10, "enum_LAST_LEXICAL_USE"], [198, 199, 9, "enum_NEXT_SYNTAX"], [199, 200, 9, "enum_NEXT_SYNTAX"], [200, 202, 9, "enum_NEXT_SYNTAX"], [202, 203, 9, "enum_NEXT_SYNTAX"], [203, 204, 9, "enum_NEXT_SYNTAX"], [204, 205, 9, "enum_NEXT_SYNTAX"], [205, 206, 9, "enum_NEXT_SYNTAX"], [206, 207, 9, "enum_NEXT_SYNTAX"], [207, 208, 9, "enum_NEXT_SYNTAX"], [209, 26, 10, "enum_LAST_LEXICAL_USE"], [208, 209, 9, "enum_NEXT_SYNTAX"], [209, 210, 9, "enum_NEXT_SYNTAX"], [210, 213, 9, "enum_NEXT_SYNTAX"], [213, 214, 9, "enum_NEXT_SYNTAX"], [215, 199, 10, "enum_LAST_LEXICAL_USE"], [214, 215, 9, "enum_NEXT_SYNTAX"], [215, 216, 9, "enum_NEXT_SYNTAX"], [216, 217, 9, "enum_NEXT_SYNTAX"], [217, 218, 9, "enum_NEXT_SYNTAX"], [218, 219, 9, "enum_NEXT_SYNTAX"], [219, 220, 9, "enum_NEXT_SYNTAX"], [221, 204, 10, "enum_LAST_LEXICAL_USE"], [220, 221, 9, "enum_NEXT_SYNTAX"], [221, 222, 9, "enum_NEXT_SYNTAX"], [222, 223, 9, "enum_NEXT_SYNTAX"], [223, 224, 9, "enum_NEXT_SYNTAX"], [224, 226, 9, "enum_NEXT_SYNTAX"], [227, 185, 10, "enum_LAST_LEXICAL_USE"], [226, 227, 9, "enum_NEXT_SYNTAX"], [227, 228, 9, "enum_NEXT_SYNTAX"], [228, 229, 9, "enum_NEXT_SYNTAX"], [229, 230, 9, "enum_NEXT_SYNTAX"], [231, 193, 10, "enum_LAST_LEXICAL_USE"], [230, 231, 9, "enum_NEXT_SYNTAX"], [231, 232, 9, "enum_NEXT_SYNTAX"], [233, 206, 10, "enum_LAST_LEXICAL_USE"], [232, 233, 9, "enum_NEXT_SYNTAX"], [233, 234, 9, "enum_NEXT_SYNTAX"], [6, 12, 1, "enum_CFG_NEXT"], [12, 25, 1, "enum_CFG_NEXT"], [25, 188, 1, "enum_CFG_NEXT"], [188, 183, 1, "enum_CFG_NEXT"], [183, 192, 1, "enum_CFG_NEXT"], [192, 209, 1, "enum_CFG_NEXT"], [209, 205, 1, "enum_CFG_NEXT"], [205, 183, 1, "enum_CFG_NEXT"], [205, 218, 1, "enum_CFG_NEXT"], [218, 226, 1, "enum_CFG_NEXT"], [218, 205, 1, "enum_CFG_NEXT"], [226, 205, 1, "enum_CFG_NEXT"], [7, 2, 3, "enum_LAST_WRITE"], [21, 7, 2, "enum_LAST_READ"], [21, 2, 3, "enum_LAST_WRITE"], [185, 21, 2, "enum_LAST_READ"], [185, 2, 3, "enum_LAST_WRITE"], [183, 199, 2, "enum_LAST_READ"], [183, 215, 2, "enum_LAST_READ"], [183, 183, 3, "enum_LAST_WRITE"], [195, 195, 2, "enum_LAST_READ"], [195, 13, 3, "enum_LAST_WRITE"], [199, 199, 2, "enum_LAST_READ"], [199, 215, 2, "enum_LAST_READ"], [199, 183, 3, "enum_LAST_WRITE"], [193, 231, 2, "enum_LAST_READ"], [193, 193, 3, "enum_LAST_WRITE"], [209, 209, 2, "enum_LAST_READ"], [209, 26, 3, "enum_LAST_WRITE"], [204, 221, 2, "enum_LAST_READ"], [204, 204, 3, "enum_LAST_WRITE"], [206, 233, 2, "enum_LAST_READ"], [206, 206, 3, "enum_LAST_WRITE"], [215, 199, 2, "enum_LAST_READ"], [215, 215, 2, "enum_LAST_READ"], [215, 183, 3, "enum_LAST_WRITE"], [219, 219, 2, "enum_LAST_READ"], [221, 221, 2, "enum_LAST_READ"], [221, 204, 3, "enum_LAST_WRITE"], [227, 227, 2, "enum_LAST_READ"], [227, 185, 2, "enum_LAST_READ"], [227, 2, 3, "enum_LAST_WRITE"], [231, 231, 2, "enum_LAST_READ"], [231, 193, 3, "enum_LAST_WRITE"], [233, 233, 2, "enum_LAST_READ"], [233, 206, 3, "enum_LAST_WRITE"], [13, 21, 4, "enum_COMPUTED_FROM"], [13, 15, 4, "enum_COMPUTED_FROM"], [193, 199, 4, "enum_COMPUTED_FROM"], [193, 195, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "openstack", "repo": "fuel-web", "path": "nailgun/nailgun/test/integration/test_orchestrator_serializer_70.py", "id": 35197, "has_bug": false, "code_full": "from typing import Any, List, Tuple\nfrom unittest import TestCase\n\nobjects: Any = None\n\nclass Node:\n    all_roles: List[str]\n\nclass Environment:\n    nodes: List[Node]\n\nclass Class(TestCase):\n    cluster: Any\n    env: Environment\n\n    def assertItemsEqual(self, a: Any, b: Any):\n        pass\n\n    def create_more_nodes(self):\n        pass\n\n    def test_get_node_network_mapping(self):\n        self.create_more_nodes()\n        nm: Any = objects.Cluster.get_network_manager(self.cluster)\n\n        # according to the template different node roles have different sets of\n        # networks (endpoints and network names here)\n        node_roles_vs_networks: List[Tuple[List[str], List[Tuple[str, str]]]] = [\n            (['controller'], [('public', 'br-ex'),\n                                ('management', 'br-mgmt'),\n                                ('fuelweb_admin', 'br-fw-admin')]),\n            (['compute'], [('private', 'br-prv'),\n                            ('storage', 'br-storage'),\n                            ('management', 'br-mgmt'),\n                            ('fuelweb_admin', 'br-fw-admin')]),\n            (['cinder'], [('storage', 'br-storage'),\n                            ('management', 'br-mgmt'),\n                            ('fuelweb_admin', 'br-fw-admin')]),\n            (['compute', 'cinder'], [('private', 'br-prv'),\n                                        ('storage', 'br-storage'),\n                                        ('management', 'br-mgmt'),\n                                        ('fuelweb_admin', 'br-fw-admin')]),\n            (['controller', 'cinder'], [('public', 'br-ex'),\n                                        ('storage', 'br-storage'),\n                                        ('management', 'br-mgmt'),\n                                        ('fuelweb_admin', 'br-fw-admin')])]\n\n        for node in self.env.nodes:\n            net_names_and_eps: Any = nm.get_node_network_mapping(node)\n            for node_roles, networks in node_roles_vs_networks:\n                if node.all_roles == set(node_roles):\n                    self.assertItemsEqual(net_names_and_eps, networks)\n", "code": "def test_get_node_network_mapping(self):\n    self.create_more_nodes()\n    nm: Any = objects.Cluster.get_network_manager(self.cluster)\n\n    # according to the template different node roles have different sets of\n    # networks (endpoints and network names here)\n    node_roles_vs_networks: List[Tuple[List[str], List[Tuple[str, str]]]] = [\n        (['controller'], [('public', 'br-ex'),\n                            ('management', 'br-mgmt'),\n                            ('fuelweb_admin', 'br-fw-admin')]),\n        (['compute'], [('private', 'br-prv'),\n                        ('storage', 'br-storage'),\n                        ('management', 'br-mgmt'),\n                        ('fuelweb_admin', 'br-fw-admin')]),\n        (['cinder'], [('storage', 'br-storage'),\n                        ('management', 'br-mgmt'),\n                        ('fuelweb_admin', 'br-fw-admin')]),\n        (['compute', 'cinder'], [('private', 'br-prv'),\n                                    ('storage', 'br-storage'),\n                                    ('management', 'br-mgmt'),\n                                    ('fuelweb_admin', 'br-fw-admin')]),\n        (['controller', 'cinder'], [('public', 'br-ex'),\n                                    ('storage', 'br-storage'),\n                                    ('management', 'br-mgmt'),\n                                    ('fuelweb_admin', 'br-fw-admin')])]\n\n    for node in self.env.nodes:\n        net_names_and_eps: Any = nm.get_node_network_mapping(node)\n        for node_roles, networks in node_roles_vs_networks:\n            if node.all_roles == set(node_roles):\n                self.assertItemsEqual(net_names_and_eps, networks)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "bac4afcb34276f1d9110a89fbb426de4a3e40d1c"}
{"source_tokens": ["#NEWLINE#", "def get_rgb_image_as_buffer(", "self", ",", "output", "=", "None", ",", "format", "=", "'png'", ",", "quality", "=", "90", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "not", "have_PIL", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "ImageViewCvError", "(", "'Please install PIL to use this method'", ")", "#NEWLINE#", "#UNINDENT#", "if", "(", "self", ".", "surface", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "ImageViewCvError", "(", "'No CV surface defined'", ")", "#NEWLINE#", "#UNINDENT#", "ibuf", "=", "output", "#NEWLINE#", "if", "(", "ibuf", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "ibuf", "=", "BytesIO", "(", ")", "#NEWLINE#", "#UNINDENT#", "image", "=", "PILimage", ".", "fromarray", "(", "self", ".", "surface", ")", "#NEWLINE#", "image", ".", "save", "(", "ibuf", ",", "format", "=", "format", ",", "quality", "=", "quality", ")", "#NEWLINE#", "if", "(", "output", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "return", "None", "#NEWLINE#", "#UNINDENT#", "return", "ibuf", ".", "getvalue", "(", ")"], "edges": [[1, 7, 7, "enum_FIELD"], [19, 21, 7, "enum_FIELD"], [34, 39, 7, "enum_FIELD"], [51, 54, 7, "enum_FIELD"], [56, 59, 7, "enum_FIELD"], [71, 77, 7, "enum_FIELD"], [82, 88, 7, "enum_FIELD"], [98, 101, 7, "enum_FIELD"], [111, 115, 7, "enum_FIELD"], [21, 22, 7, "enum_FIELD"], [27, 29, 7, "enum_FIELD"], [39, 37, 7, "enum_FIELD"], [45, 47, 7, "enum_FIELD"], [59, 58, 7, "enum_FIELD"], [64, 68, 7, "enum_FIELD"], [77, 75, 7, "enum_FIELD"], [88, 84, 7, "enum_FIELD"], [101, 100, 7, "enum_FIELD"], [107, 108, 7, "enum_FIELD"], [115, 113, 7, "enum_FIELD"], [29, 28, 7, "enum_FIELD"], [37, 36, 7, "enum_FIELD"], [47, 46, 7, "enum_FIELD"], [68, 67, 7, "enum_FIELD"], [75, 74, 7, "enum_FIELD"], [79, 78, 7, "enum_FIELD"], [84, 83, 7, "enum_FIELD"], [89, 91, 7, "enum_FIELD"], [93, 95, 7, "enum_FIELD"], [113, 112, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [36, 2, 10, "enum_LAST_LEXICAL_USE"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 45, 9, "enum_NEXT_SYNTAX"], [46, 28, 10, "enum_LAST_LEXICAL_USE"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [54, 4, 10, "enum_LAST_LEXICAL_USE"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [58, 52, 10, "enum_LAST_LEXICAL_USE"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 64, 9, "enum_NEXT_SYNTAX"], [65, 58, 10, "enum_LAST_LEXICAL_USE"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [78, 36, 10, "enum_LAST_LEXICAL_USE"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [83, 72, 10, "enum_LAST_LEXICAL_USE"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [87, 65, 10, "enum_LAST_LEXICAL_USE"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [91, 8, 10, "enum_LAST_LEXICAL_USE"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [95, 12, 10, "enum_LAST_LEXICAL_USE"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [100, 54, 10, "enum_LAST_LEXICAL_USE"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 111, 9, "enum_NEXT_SYNTAX"], [112, 87, 10, "enum_LAST_LEXICAL_USE"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [6, 10, 1, "enum_CFG_NEXT"], [10, 14, 1, "enum_CFG_NEXT"], [14, 1, 1, "enum_CFG_NEXT"], [7, 21, 1, "enum_CFG_NEXT"], [21, 39, 1, "enum_CFG_NEXT"], [21, 27, 1, "enum_CFG_NEXT"], [39, 45, 1, "enum_CFG_NEXT"], [39, 51, 1, "enum_CFG_NEXT"], [51, 59, 1, "enum_CFG_NEXT"], [59, 64, 1, "enum_CFG_NEXT"], [59, 71, 1, "enum_CFG_NEXT"], [64, 71, 1, "enum_CFG_NEXT"], [71, 82, 1, "enum_CFG_NEXT"], [82, 101, 1, "enum_CFG_NEXT"], [101, 111, 1, "enum_CFG_NEXT"], [101, 107, 1, "enum_CFG_NEXT"], [36, 2, 3, "enum_LAST_WRITE"], [54, 4, 3, "enum_LAST_WRITE"], [58, 52, 3, "enum_LAST_WRITE"], [65, 58, 2, "enum_LAST_READ"], [65, 52, 3, "enum_LAST_WRITE"], [78, 36, 2, "enum_LAST_READ"], [78, 2, 3, "enum_LAST_WRITE"], [83, 72, 3, "enum_LAST_WRITE"], [87, 58, 2, "enum_LAST_READ"], [87, 52, 3, "enum_LAST_WRITE"], [87, 65, 3, "enum_LAST_WRITE"], [91, 8, 3, "enum_LAST_WRITE"], [95, 12, 3, "enum_LAST_WRITE"], [100, 54, 2, "enum_LAST_READ"], [100, 4, 3, "enum_LAST_WRITE"], [112, 87, 2, "enum_LAST_READ"], [112, 52, 3, "enum_LAST_WRITE"], [112, 65, 3, "enum_LAST_WRITE"], [52, 54, 4, "enum_COMPUTED_FROM"], [72, 74, 4, "enum_COMPUTED_FROM"], [72, 78, 4, "enum_COMPUTED_FROM"], [65, 67, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "ejeschke", "repo": "ginga", "path": "ginga/cvw/ImageViewCv.py", "id": 14635, "has_bug": false, "code_full": "from io import BytesIO\nfrom typing import Any, Optional, Union\n\nimport numpy as np\nfrom PIL import Image as PILimage\n\n\nclass ImageViewAggError(Exception):\n    pass\n\nhave_PIL: bool = True\n\nclass Class:\n    surface: Any\n\n    def get_image_as_array(self) -> np.ndarray:\n        return np.zeros((1, 1))\n\n    def get_rgb_image_as_buffer(self, output: Optional[BytesIO]=None, format: str='png', quality: int=90)-> Optional[bytes]:\n        if not have_PIL:\n            raise ImageViewAggError(\"Please install PIL to use this method\")\n\n        if self.surface is None:\n            raise ImageViewAggError(\"No AGG surface defined\")\n\n        obuf: Optional[BytesIO] = output\n        if obuf is None:\n            obuf: BytesIO = BytesIO()\n\n        # Get current surface as an array\n        arr8: np.ndarray = self.get_image_as_array()\n\n        # make a PIL image\n        image: PILimage.Image = PILimage.fromarray(arr8)\n\n        image.save(obuf, format=format, quality=quality)\n        if not (output is None):\n            return None\n        return obuf.getvalue()\n", "code": "def get_rgb_image_as_buffer(self, output: Optional[BytesIO]=None, format: str='png', quality: int=90)-> Optional[bytes]:\n    if not have_PIL:\n        raise ImageViewAggError(\"Please install PIL to use this method\")\n\n    if self.surface is None:\n        raise ImageViewAggError(\"No AGG surface defined\")\n\n    obuf: Optional[BytesIO] = output\n    if obuf is None:\n        obuf: BytesIO = BytesIO()\n\n    # Get current surface as an array\n    arr8: np.ndarray = self.get_image_as_array()\n\n    # make a PIL image\n    image: PILimage.Image = PILimage.fromarray(arr8)\n\n    image.save(obuf, format=format, quality=quality)\n    if not (output is None):\n        return None\n    return obuf.getvalue()\n", "type_checked_pytype": true, "type_checked_mypy": false, "type_error_label": "union-attr", "hash": "a201d5a2b0c49173b4d53179c82a867acda8f438"}
{"source_tokens": ["#NEWLINE#", "def addBuddy(", "self", ",", "alias", ",", "q2qaddr", ")", ":", "#NEWLINE#", "#INDENT#", "temp", "=", "self", ".", "buddiesfile", ".", "temporarySibling", "(", ")", "#NEWLINE#", "try", ":", "#NEWLINE#", "#INDENT#", "origdata", "=", "self", ".", "buddiesfile", ".", "open", "(", ")", ".", "read", "(", ")", "#NEWLINE#", "#UNINDENT#", "except", "IOError", ":", "#NEWLINE#", "#INDENT#", "origdata", "=", "''", "#NEWLINE#", "#UNINDENT#", "moredata", "=", "(", "'\\n%s <%s>'", "%", "(", "alias", ",", "q2qaddr", ")", ")", "#NEWLINE#", "ftemp", "=", "temp", ".", "open", "(", "'w'", ")", "#NEWLINE#", "ftemp", ".", "write", "(", "origdata", ")", "#NEWLINE#", "ftemp", ".", "write", "(", "moredata", ")", "#NEWLINE#", "ftemp", ".", "close", "(", ")", "#NEWLINE#", "temp", ".", "moveTo", "(", "self", ".", "buddiesfile", ")", "#NEWLINE#", "self", ".", "parseBuddies", "(", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [10, 18, 7, "enum_FIELD"], [49, 54, 7, "enum_FIELD"], [61, 67, 7, "enum_FIELD"], [70, 74, 7, "enum_FIELD"], [77, 81, 7, "enum_FIELD"], [84, 88, 7, "enum_FIELD"], [90, 94, 7, "enum_FIELD"], [99, 103, 7, "enum_FIELD"], [18, 16, 7, "enum_FIELD"], [24, 36, 7, "enum_FIELD"], [40, 41, 7, "enum_FIELD"], [54, 53, 7, "enum_FIELD"], [54, 57, 7, "enum_FIELD"], [67, 65, 7, "enum_FIELD"], [74, 72, 7, "enum_FIELD"], [81, 79, 7, "enum_FIELD"], [88, 86, 7, "enum_FIELD"], [94, 92, 7, "enum_FIELD"], [103, 101, 7, "enum_FIELD"], [16, 14, 7, "enum_FIELD"], [36, 34, 7, "enum_FIELD"], [44, 47, 7, "enum_FIELD"], [65, 64, 7, "enum_FIELD"], [72, 71, 7, "enum_FIELD"], [79, 78, 7, "enum_FIELD"], [86, 85, 7, "enum_FIELD"], [92, 91, 7, "enum_FIELD"], [96, 95, 7, "enum_FIELD"], [101, 100, 7, "enum_FIELD"], [14, 13, 7, "enum_FIELD"], [34, 32, 7, "enum_FIELD"], [32, 30, 7, "enum_FIELD"], [30, 28, 7, "enum_FIELD"], [28, 27, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [13, 2, 10, "enum_LAST_LEXICAL_USE"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [27, 13, 10, "enum_LAST_LEXICAL_USE"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 44, 9, "enum_NEXT_SYNTAX"], [45, 25, 10, "enum_LAST_LEXICAL_USE"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [56, 4, 10, "enum_LAST_LEXICAL_USE"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [58, 6, 10, "enum_LAST_LEXICAL_USE"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [64, 11, 10, "enum_LAST_LEXICAL_USE"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [71, 62, 10, "enum_LAST_LEXICAL_USE"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [75, 45, 10, "enum_LAST_LEXICAL_USE"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [78, 71, 10, "enum_LAST_LEXICAL_USE"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [82, 50, 10, "enum_LAST_LEXICAL_USE"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [85, 78, 10, "enum_LAST_LEXICAL_USE"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [91, 64, 10, "enum_LAST_LEXICAL_USE"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [95, 27, 10, "enum_LAST_LEXICAL_USE"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [100, 95, 10, "enum_LAST_LEXICAL_USE"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [3, 10, 1, "enum_CFG_NEXT"], [10, 24, 1, "enum_CFG_NEXT"], [24, 49, 1, "enum_CFG_NEXT"], [24, 41, 1, "enum_CFG_NEXT"], [41, 44, 1, "enum_CFG_NEXT"], [44, 49, 1, "enum_CFG_NEXT"], [49, 61, 1, "enum_CFG_NEXT"], [61, 70, 1, "enum_CFG_NEXT"], [70, 77, 1, "enum_CFG_NEXT"], [77, 84, 1, "enum_CFG_NEXT"], [84, 90, 1, "enum_CFG_NEXT"], [90, 99, 1, "enum_CFG_NEXT"], [13, 2, 3, "enum_LAST_WRITE"], [27, 13, 2, "enum_LAST_READ"], [27, 2, 3, "enum_LAST_WRITE"], [45, 25, 3, "enum_LAST_WRITE"], [56, 4, 3, "enum_LAST_WRITE"], [58, 6, 3, "enum_LAST_WRITE"], [64, 11, 3, "enum_LAST_WRITE"], [71, 62, 3, "enum_LAST_WRITE"], [75, 45, 3, "enum_LAST_WRITE"], [75, 25, 3, "enum_LAST_WRITE"], [78, 71, 2, "enum_LAST_READ"], [78, 62, 3, "enum_LAST_WRITE"], [82, 50, 3, "enum_LAST_WRITE"], [85, 78, 2, "enum_LAST_READ"], [85, 62, 3, "enum_LAST_WRITE"], [91, 64, 2, "enum_LAST_READ"], [91, 11, 3, "enum_LAST_WRITE"], [95, 27, 2, "enum_LAST_READ"], [95, 2, 3, "enum_LAST_WRITE"], [100, 95, 2, "enum_LAST_READ"], [100, 2, 3, "enum_LAST_WRITE"], [11, 13, 4, "enum_COMPUTED_FROM"], [50, 56, 4, "enum_COMPUTED_FROM"], [50, 58, 4, "enum_COMPUTED_FROM"], [62, 64, 4, "enum_COMPUTED_FROM"], [25, 27, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "twisted", "repo": "vertex", "path": "vertex/gtk2hack.py", "id": 60023, "has_bug": false, "code_full": "\nfrom typing import IO, Any\n\n\nclass Class:\n    buddiesfile: Any\n\n    def parseBuddies(self):\n        pass\n\n    def addBuddy(self, alias: str, q2qaddr: str):\n        temp: Any = self.buddiesfile.temporarySibling()\n        try:\n            origdata: str = self.buddiesfile.open().read()\n        except IOError:\n            origdata: str = ''\n        moredata: str = '\n%s <%s>' % (alias, q2qaddr)\n        ftemp: IO = temp.open('w')\n        ftemp.write(origdata)\n        ftemp.write(moredata)\n        ftemp.close()\n        temp.moveTo(self.buddiesfile)\n        self.parseBuddies()\n", "code": "def addBuddy(self, alias: str, q2qaddr: str):\n    temp: Any = self.buddiesfile.temporarySibling()\n    try:\n        origdata: str = self.buddiesfile.open().read()\n    except IOError:\n        origdata: str = ''\n    moredata: str = '\n%s <%s>' % (alias, q2qaddr)\n    ftemp: IO = temp.open('w')\n    ftemp.write(origdata)\n    ftemp.write(moredata)\n    ftemp.close()\n    temp.moveTo(self.buddiesfile)\n    self.parseBuddies()\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "09e9f9d689d94040f0e5917407980abcd18a0b56"}
{"source_tokens": ["#NEWLINE#", "def safe_get(", "section", ",", "option", ",", "default", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "return", "cfg", ".", "get", "(", "section", ",", "option", ")", "#NEWLINE#", "#UNINDENT#", "except", "(", "ConfigParser", ".", "NoSectionError", ",", "ConfigParser", ".", "NoOptionError", ")", ":", "#NEWLINE#", "#INDENT#", "return", "default"], "edges": [[1, 5, 7, "enum_FIELD"], [17, 23, 7, "enum_FIELD"], [28, 33, 7, "enum_FIELD"], [23, 19, 7, "enum_FIELD"], [41, 42, 7, "enum_FIELD"], [19, 18, 7, "enum_FIELD"], [31, 30, 7, "enum_FIELD"], [35, 34, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [22, 2, 10, "enum_LAST_LEXICAL_USE"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [24, 4, 10, "enum_LAST_LEXICAL_USE"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [34, 30, 10, "enum_LAST_LEXICAL_USE"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 41, 9, "enum_NEXT_SYNTAX"], [42, 6, 10, "enum_LAST_LEXICAL_USE"], [41, 42, 9, "enum_NEXT_SYNTAX"], [8, 1, 1, "enum_CFG_NEXT"], [5, 17, 1, "enum_CFG_NEXT"], [17, 33, 1, "enum_CFG_NEXT"], [33, 41, 1, "enum_CFG_NEXT"], [22, 2, 3, "enum_LAST_WRITE"], [24, 4, 3, "enum_LAST_WRITE"], [34, 30, 2, "enum_LAST_READ"], [42, 6, 3, "enum_LAST_WRITE"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "rackspace", "repo": "pyrax", "path": "pyrax/__init__.py", "id": 43256, "has_bug": false, "code_full": "from typing import Any, Optional\n\nimport six.moves.configparser as ConfigParser\n\ncfg = ConfigParser.SafeConfigParser()\n\ndef safe_get(section: str,option: str,default: Optional[Any]=None) -> Optional[Any]:\n    try:\n        return cfg.get(section,option)\n    except (ConfigParser.NoSectionError,ConfigParser.NoOptionError):\n        return default\n", "code": "def safe_get(section: str,option: str,default: Optional[Any]=None) -> Optional[Any]:\n    try:\n        return cfg.get(section,option)\n    except (ConfigParser.NoSectionError,ConfigParser.NoOptionError):\n        return default\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "6cbe6708da5f18467e5859e4005ebd5f365182b0"}
{"source_tokens": ["#NEWLINE#", "def test_set_1d_simple_slice(", ")", ":", "#NEWLINE#", "#INDENT#", "x", "=", "np", ".", "array", "(", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", "]", ")", "#NEWLINE#", "idx", "=", "slice", "(", "2", ",", "4", ")", "#NEWLINE#", "y", "=", "[", "10", ",", "20", "]", "#NEWLINE#", "x2", "=", "x", ".", "copy", "(", ")", "#NEWLINE#", "x", "[", "idx", "]", "=", "y", "#NEWLINE#", "testing_helpers", ".", "expect", "(", "setidx", ",", "[", "x2", ",", "idx", ",", "y", "]", ",", "x", ")"], "edges": [[5, 11, 7, "enum_FIELD"], [26, 32, 7, "enum_FIELD"], [35, 40, 7, "enum_FIELD"], [43, 49, 7, "enum_FIELD"], [51, 57, 7, "enum_FIELD"], [58, 64, 7, "enum_FIELD"], [11, 9, 7, "enum_FIELD"], [32, 29, 7, "enum_FIELD"], [49, 47, 7, "enum_FIELD"], [53, 52, 7, "enum_FIELD"], [53, 54, 7, "enum_FIELD"], [64, 60, 7, "enum_FIELD"], [9, 8, 7, "enum_FIELD"], [47, 46, 7, "enum_FIELD"], [60, 59, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [46, 6, 10, "enum_LAST_LEXICAL_USE"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [52, 46, 10, "enum_LAST_LEXICAL_USE"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [54, 27, 10, "enum_LAST_LEXICAL_USE"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [57, 36, 10, "enum_LAST_LEXICAL_USE"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [66, 44, 10, "enum_LAST_LEXICAL_USE"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [68, 54, 10, "enum_LAST_LEXICAL_USE"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [70, 57, 10, "enum_LAST_LEXICAL_USE"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [73, 52, 10, "enum_LAST_LEXICAL_USE"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [5, 26, 1, "enum_CFG_NEXT"], [26, 35, 1, "enum_CFG_NEXT"], [35, 43, 1, "enum_CFG_NEXT"], [43, 51, 1, "enum_CFG_NEXT"], [51, 58, 1, "enum_CFG_NEXT"], [46, 6, 3, "enum_LAST_WRITE"], [57, 36, 3, "enum_LAST_WRITE"], [52, 46, 2, "enum_LAST_READ"], [52, 6, 3, "enum_LAST_WRITE"], [54, 27, 3, "enum_LAST_WRITE"], [66, 44, 3, "enum_LAST_WRITE"], [68, 54, 2, "enum_LAST_READ"], [68, 27, 3, "enum_LAST_WRITE"], [70, 57, 2, "enum_LAST_READ"], [70, 36, 3, "enum_LAST_WRITE"], [73, 52, 2, "enum_LAST_READ"], [73, 6, 3, "enum_LAST_WRITE"], [6, 8, 4, "enum_COMPUTED_FROM"], [27, 29, 4, "enum_COMPUTED_FROM"], [44, 46, 4, "enum_COMPUTED_FROM"], [53, 57, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "iskandr", "repo": "parakeet", "path": "test/arrays/test_assign_slice.py", "id": 21070, "has_bug": false, "code_full": "from typing import Any, Callable, List\n\nimport numpy as np\n\n\ndef setidx(x: np.ndarray, idx: slice, y: List[int]) -> np.ndarray:\n    return x\n\n\nclass testing_helpers:\n    @staticmethod\n    def expect(fn: Callable, args: Any, expected: Any):\n        pass\n\n\ndef test_set_1d_simple_slice():\n    x: np.ndarray = np.array([1,2,3,4,5,6]) \n    idx: slice = slice(2,4)\n    y: List[int] = [10, 20]\n    x2: np.ndarray = x.copy()\n    x[idx] = y\n    testing_helpers.expect(setidx, [x2, idx, y], x)\n", "code": "def test_set_1d_simple_slice():\n    x: np.ndarray = np.array([1,2,3,4,5,6]) \n    idx: slice = slice(2,4)\n    y: List[int] = [10, 20]\n    x2: np.ndarray = x.copy()\n    x[idx] = y\n    testing_helpers.expect(setidx, [x2, idx, y], x)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "28028577cf13c2e6c54b3bf1d43604a9002e96ab"}
{"source_tokens": ["#NEWLINE#", "def test_record_object_list_name_field(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'Testing ChangeDescription.record_field_change with an object list\\n    (using name_field)\\n    '", "#NEWLINE#", "class DummyObject", "(", "object", ")", ":", "#NEWLINE#", "#INDENT#", "def __init__(", "self", ",", "id", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "id", "=", "id", "#NEWLINE#", "self", ".", "text", "=", "(", "'Object %s'", "%", "id", ")", "#NEWLINE#", "#UNINDENT#", "def get_absolute_url(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "return", "(", "'http://localhost/%s'", "%", "self", ".", "id", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "objs", "=", "[", "DummyObject", "(", "i", ")", "for", "i", "in", "range", "(", "4", ")", "]", "#NEWLINE#", "old_value", "=", "[", "objs", "[", "0", "]", ",", "objs", "[", "1", "]", ",", "objs", "[", "2", "]", "]", "#NEWLINE#", "new_value", "=", "[", "objs", "[", "1", "]", ",", "objs", "[", "2", "]", ",", "objs", "[", "3", "]", "]", "#NEWLINE#", "changedesc", "=", "ChangeDescription", "(", ")", "#NEWLINE#", "changedesc", ".", "record_field_change", "(", "'test'", ",", "old_value", ",", "new_value", ",", "'text'", ")", "#NEWLINE#", "self", ".", "assertIn", "(", "'test'", ",", "changedesc", ".", "fields_changed", ")", "#NEWLINE#", "self", ".", "assertIn", "(", "'old'", ",", "changedesc", ".", "fields_changed", "[", "'test'", "]", ")", "#NEWLINE#", "self", ".", "assertIn", "(", "'new'", ",", "changedesc", ".", "fields_changed", "[", "'test'", "]", ")", "#NEWLINE#", "self", ".", "assertIn", "(", "'added'", ",", "changedesc", ".", "fields_changed", "[", "'test'", "]", ")", "#NEWLINE#", "self", ".", "assertIn", "(", "'removed'", ",", "changedesc", ".", "fields_changed", "[", "'test'", "]", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "set", "(", "changedesc", ".", "fields_changed", "[", "'test'", "]", "[", "'old'", "]", ")", ",", "set", "(", "[", "(", "obj", ".", "text", ",", "obj", ".", "get_absolute_url", "(", ")", ",", "obj", ".", "id", ")", "for", "obj", "in", "old_value", "]", ")", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "set", "(", "changedesc", ".", "fields_changed", "[", "'test'", "]", "[", "'new'", "]", ")", ",", "set", "(", "[", "(", "obj", ".", "text", ",", "obj", ".", "get_absolute_url", "(", ")", ",", "obj", ".", "id", ")", "for", "obj", "in", "new_value", "]", ")", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "set", "(", "changedesc", ".", "fields_changed", "[", "'test'", "]", "[", "'added'", "]", ")", ",", "set", "(", "[", "(", "new_value", "[", "2", "]", ".", "text", ",", "new_value", "[", "2", "]", ".", "get_absolute_url", "(", ")", ",", "new_value", "[", "2", "]", ".", "id", ")", "]", ")", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "set", "(", "changedesc", ".", "fields_changed", "[", "'test'", "]", "[", "'removed'", "]", ")", ",", "set", "(", "[", "(", "old_value", "[", "0", "]", ".", "text", ",", "old_value", "[", "0", "]", ".", "get_absolute_url", "(", ")", ",", "old_value", "[", "0", "]", ".", "id", ")", "]", ")", ")"], "edges": [[6, 7, 7, "enum_FIELD"], [57, 60, 7, "enum_FIELD"], [73, 81, 7, "enum_FIELD"], [92, 100, 7, "enum_FIELD"], [111, 115, 7, "enum_FIELD"], [117, 125, 7, "enum_FIELD"], [130, 136, 7, "enum_FIELD"], [141, 147, 7, "enum_FIELD"], [155, 161, 7, "enum_FIELD"], [169, 175, 7, "enum_FIELD"], [183, 189, 7, "enum_FIELD"], [197, 214, 7, "enum_FIELD"], [240, 257, 7, "enum_FIELD"], [283, 300, 7, "enum_FIELD"], [331, 348, 7, "enum_FIELD"], [20, 18, 7, "enum_FIELD"], [60, 62, 7, "enum_FIELD"], [115, 114, 7, "enum_FIELD"], [125, 119, 7, "enum_FIELD"], [136, 132, 7, "enum_FIELD"], [147, 143, 7, "enum_FIELD"], [161, 157, 7, "enum_FIELD"], [175, 171, 7, "enum_FIELD"], [189, 185, 7, "enum_FIELD"], [214, 199, 7, "enum_FIELD"], [257, 242, 7, "enum_FIELD"], [300, 285, 7, "enum_FIELD"], [348, 333, 7, "enum_FIELD"], [23, 28, 7, "enum_FIELD"], [29, 36, 7, "enum_FIELD"], [47, 50, 7, "enum_FIELD"], [62, 61, 7, "enum_FIELD"], [65, 66, 7, "enum_FIELD"], [65, 69, 7, "enum_FIELD"], [78, 77, 7, "enum_FIELD"], [78, 79, 7, "enum_FIELD"], [83, 82, 7, "enum_FIELD"], [83, 84, 7, "enum_FIELD"], [88, 87, 7, "enum_FIELD"], [88, 89, 7, "enum_FIELD"], [97, 96, 7, "enum_FIELD"], [97, 98, 7, "enum_FIELD"], [102, 101, 7, "enum_FIELD"], [102, 103, 7, "enum_FIELD"], [107, 106, 7, "enum_FIELD"], [107, 108, 7, "enum_FIELD"], [119, 118, 7, "enum_FIELD"], [132, 131, 7, "enum_FIELD"], [138, 137, 7, "enum_FIELD"], [143, 142, 7, "enum_FIELD"], [151, 149, 7, "enum_FIELD"], [151, 152, 7, "enum_FIELD"], [157, 156, 7, "enum_FIELD"], [165, 163, 7, "enum_FIELD"], [165, 166, 7, "enum_FIELD"], [171, 170, 7, "enum_FIELD"], [179, 177, 7, "enum_FIELD"], [179, 180, 7, "enum_FIELD"], [185, 184, 7, "enum_FIELD"], [193, 191, 7, "enum_FIELD"], [193, 194, 7, "enum_FIELD"], [199, 198, 7, "enum_FIELD"], [203, 202, 7, "enum_FIELD"], [216, 215, 7, "enum_FIELD"], [242, 241, 7, "enum_FIELD"], [246, 245, 7, "enum_FIELD"], [259, 258, 7, "enum_FIELD"], [285, 284, 7, "enum_FIELD"], [289, 288, 7, "enum_FIELD"], [302, 301, 7, "enum_FIELD"], [333, 332, 7, "enum_FIELD"], [337, 336, 7, "enum_FIELD"], [350, 349, 7, "enum_FIELD"], [25, 24, 7, "enum_FIELD"], [31, 30, 7, "enum_FIELD"], [36, 35, 7, "enum_FIELD"], [36, 37, 7, "enum_FIELD"], [50, 49, 7, "enum_FIELD"], [50, 52, 7, "enum_FIELD"], [69, 68, 7, "enum_FIELD"], [149, 148, 7, "enum_FIELD"], [163, 162, 7, "enum_FIELD"], [177, 176, 7, "enum_FIELD"], [191, 190, 7, "enum_FIELD"], [210, 207, 7, "enum_FIELD"], [210, 211, 7, "enum_FIELD"], [217, 222, 7, "enum_FIELD"], [253, 250, 7, "enum_FIELD"], [253, 254, 7, "enum_FIELD"], [260, 265, 7, "enum_FIELD"], [296, 293, 7, "enum_FIELD"], [296, 297, 7, "enum_FIELD"], [344, 341, 7, "enum_FIELD"], [344, 345, 7, "enum_FIELD"], [52, 51, 7, "enum_FIELD"], [207, 205, 7, "enum_FIELD"], [207, 208, 7, "enum_FIELD"], [233, 234, 7, "enum_FIELD"], [233, 236, 7, "enum_FIELD"], [250, 248, 7, "enum_FIELD"], [250, 251, 7, "enum_FIELD"], [276, 277, 7, "enum_FIELD"], [276, 279, 7, "enum_FIELD"], [293, 291, 7, "enum_FIELD"], [293, 294, 7, "enum_FIELD"], [341, 339, 7, "enum_FIELD"], [341, 342, 7, "enum_FIELD"], [205, 204, 7, "enum_FIELD"], [220, 219, 7, "enum_FIELD"], [226, 224, 7, "enum_FIELD"], [230, 229, 7, "enum_FIELD"], [248, 247, 7, "enum_FIELD"], [263, 262, 7, "enum_FIELD"], [269, 267, 7, "enum_FIELD"], [273, 272, 7, "enum_FIELD"], [291, 290, 7, "enum_FIELD"], [309, 306, 7, "enum_FIELD"], [318, 316, 7, "enum_FIELD"], [325, 322, 7, "enum_FIELD"], [339, 338, 7, "enum_FIELD"], [357, 354, 7, "enum_FIELD"], [366, 364, 7, "enum_FIELD"], [373, 370, 7, "enum_FIELD"], [224, 223, 7, "enum_FIELD"], [267, 266, 7, "enum_FIELD"], [306, 305, 7, "enum_FIELD"], [306, 307, 7, "enum_FIELD"], [316, 313, 7, "enum_FIELD"], [322, 321, 7, "enum_FIELD"], [322, 323, 7, "enum_FIELD"], [354, 353, 7, "enum_FIELD"], [354, 355, 7, "enum_FIELD"], [364, 361, 7, "enum_FIELD"], [370, 369, 7, "enum_FIELD"], [370, 371, 7, "enum_FIELD"], [313, 312, 7, "enum_FIELD"], [313, 314, 7, "enum_FIELD"], [361, 360, 7, "enum_FIELD"], [361, 362, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 16, 9, "enum_NEXT_SYNTAX"], [17, 2, 10, "enum_LAST_LEXICAL_USE"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 23, 9, "enum_NEXT_SYNTAX"], [24, 17, 10, "enum_LAST_LEXICAL_USE"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [28, 19, 10, "enum_LAST_LEXICAL_USE"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [30, 24, 10, "enum_LAST_LEXICAL_USE"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [37, 28, 10, "enum_LAST_LEXICAL_USE"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 41, 9, "enum_NEXT_SYNTAX"], [42, 30, 10, "enum_LAST_LEXICAL_USE"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [51, 42, 10, "enum_LAST_LEXICAL_USE"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [66, 63, 10, "enum_LAST_LEXICAL_USE"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [77, 58, 10, "enum_LAST_LEXICAL_USE"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [82, 77, 10, "enum_LAST_LEXICAL_USE"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [87, 82, 10, "enum_LAST_LEXICAL_USE"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [96, 87, 10, "enum_LAST_LEXICAL_USE"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [101, 96, 10, "enum_LAST_LEXICAL_USE"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [106, 101, 10, "enum_LAST_LEXICAL_USE"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [118, 112, 10, "enum_LAST_LEXICAL_USE"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [124, 74, 10, "enum_LAST_LEXICAL_USE"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [126, 93, 10, "enum_LAST_LEXICAL_USE"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [131, 51, 10, "enum_LAST_LEXICAL_USE"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [137, 118, 10, "enum_LAST_LEXICAL_USE"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [142, 131, 10, "enum_LAST_LEXICAL_USE"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [148, 137, 10, "enum_LAST_LEXICAL_USE"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [156, 142, 10, "enum_LAST_LEXICAL_USE"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [162, 148, 10, "enum_LAST_LEXICAL_USE"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [170, 156, 10, "enum_LAST_LEXICAL_USE"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [176, 162, 10, "enum_LAST_LEXICAL_USE"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [184, 170, 10, "enum_LAST_LEXICAL_USE"], [183, 184, 9, "enum_NEXT_SYNTAX"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [187, 188, 9, "enum_NEXT_SYNTAX"], [188, 189, 9, "enum_NEXT_SYNTAX"], [190, 176, 10, "enum_LAST_LEXICAL_USE"], [189, 190, 9, "enum_NEXT_SYNTAX"], [190, 191, 9, "enum_NEXT_SYNTAX"], [191, 192, 9, "enum_NEXT_SYNTAX"], [192, 193, 9, "enum_NEXT_SYNTAX"], [193, 194, 9, "enum_NEXT_SYNTAX"], [194, 195, 9, "enum_NEXT_SYNTAX"], [195, 196, 9, "enum_NEXT_SYNTAX"], [196, 197, 9, "enum_NEXT_SYNTAX"], [198, 184, 10, "enum_LAST_LEXICAL_USE"], [197, 198, 9, "enum_NEXT_SYNTAX"], [198, 199, 9, "enum_NEXT_SYNTAX"], [199, 200, 9, "enum_NEXT_SYNTAX"], [200, 201, 9, "enum_NEXT_SYNTAX"], [201, 202, 9, "enum_NEXT_SYNTAX"], [202, 203, 9, "enum_NEXT_SYNTAX"], [204, 190, 10, "enum_LAST_LEXICAL_USE"], [203, 204, 9, "enum_NEXT_SYNTAX"], [204, 205, 9, "enum_NEXT_SYNTAX"], [205, 206, 9, "enum_NEXT_SYNTAX"], [206, 207, 9, "enum_NEXT_SYNTAX"], [207, 208, 9, "enum_NEXT_SYNTAX"], [208, 209, 9, "enum_NEXT_SYNTAX"], [209, 210, 9, "enum_NEXT_SYNTAX"], [210, 211, 9, "enum_NEXT_SYNTAX"], [211, 212, 9, "enum_NEXT_SYNTAX"], [212, 213, 9, "enum_NEXT_SYNTAX"], [213, 214, 9, "enum_NEXT_SYNTAX"], [215, 202, 10, "enum_LAST_LEXICAL_USE"], [214, 215, 9, "enum_NEXT_SYNTAX"], [215, 216, 9, "enum_NEXT_SYNTAX"], [216, 217, 9, "enum_NEXT_SYNTAX"], [217, 218, 9, "enum_NEXT_SYNTAX"], [218, 219, 9, "enum_NEXT_SYNTAX"], [219, 220, 9, "enum_NEXT_SYNTAX"], [220, 221, 9, "enum_NEXT_SYNTAX"], [221, 222, 9, "enum_NEXT_SYNTAX"], [223, 219, 10, "enum_LAST_LEXICAL_USE"], [222, 223, 9, "enum_NEXT_SYNTAX"], [223, 224, 9, "enum_NEXT_SYNTAX"], [224, 225, 9, "enum_NEXT_SYNTAX"], [225, 226, 9, "enum_NEXT_SYNTAX"], [226, 227, 9, "enum_NEXT_SYNTAX"], [227, 228, 9, "enum_NEXT_SYNTAX"], [229, 223, 10, "enum_LAST_LEXICAL_USE"], [228, 229, 9, "enum_NEXT_SYNTAX"], [229, 230, 9, "enum_NEXT_SYNTAX"], [230, 231, 9, "enum_NEXT_SYNTAX"], [231, 232, 9, "enum_NEXT_SYNTAX"], [232, 233, 9, "enum_NEXT_SYNTAX"], [234, 229, 10, "enum_LAST_LEXICAL_USE"], [233, 234, 9, "enum_NEXT_SYNTAX"], [234, 235, 9, "enum_NEXT_SYNTAX"], [236, 124, 10, "enum_LAST_LEXICAL_USE"], [235, 236, 9, "enum_NEXT_SYNTAX"], [236, 237, 9, "enum_NEXT_SYNTAX"], [237, 238, 9, "enum_NEXT_SYNTAX"], [238, 239, 9, "enum_NEXT_SYNTAX"], [239, 240, 9, "enum_NEXT_SYNTAX"], [241, 198, 10, "enum_LAST_LEXICAL_USE"], [240, 241, 9, "enum_NEXT_SYNTAX"], [241, 242, 9, "enum_NEXT_SYNTAX"], [242, 243, 9, "enum_NEXT_SYNTAX"], [243, 244, 9, "enum_NEXT_SYNTAX"], [245, 215, 10, "enum_LAST_LEXICAL_USE"], [244, 245, 9, "enum_NEXT_SYNTAX"], [245, 246, 9, "enum_NEXT_SYNTAX"], [247, 204, 10, "enum_LAST_LEXICAL_USE"], [246, 247, 9, "enum_NEXT_SYNTAX"], [247, 248, 9, "enum_NEXT_SYNTAX"], [248, 249, 9, "enum_NEXT_SYNTAX"], [249, 250, 9, "enum_NEXT_SYNTAX"], [250, 251, 9, "enum_NEXT_SYNTAX"], [251, 252, 9, "enum_NEXT_SYNTAX"], [252, 253, 9, "enum_NEXT_SYNTAX"], [253, 254, 9, "enum_NEXT_SYNTAX"], [254, 255, 9, "enum_NEXT_SYNTAX"], [255, 256, 9, "enum_NEXT_SYNTAX"], [256, 257, 9, "enum_NEXT_SYNTAX"], [258, 245, 10, "enum_LAST_LEXICAL_USE"], [257, 258, 9, "enum_NEXT_SYNTAX"], [258, 259, 9, "enum_NEXT_SYNTAX"], [259, 260, 9, "enum_NEXT_SYNTAX"], [260, 261, 9, "enum_NEXT_SYNTAX"], [262, 234, 10, "enum_LAST_LEXICAL_USE"], [261, 262, 9, "enum_NEXT_SYNTAX"], [262, 263, 9, "enum_NEXT_SYNTAX"], [263, 264, 9, "enum_NEXT_SYNTAX"], [264, 265, 9, "enum_NEXT_SYNTAX"], [266, 262, 10, "enum_LAST_LEXICAL_USE"], [265, 266, 9, "enum_NEXT_SYNTAX"], [266, 267, 9, "enum_NEXT_SYNTAX"], [267, 268, 9, "enum_NEXT_SYNTAX"], [268, 269, 9, "enum_NEXT_SYNTAX"], [269, 270, 9, "enum_NEXT_SYNTAX"], [270, 271, 9, "enum_NEXT_SYNTAX"], [272, 266, 10, "enum_LAST_LEXICAL_USE"], [271, 272, 9, "enum_NEXT_SYNTAX"], [272, 273, 9, "enum_NEXT_SYNTAX"], [273, 274, 9, "enum_NEXT_SYNTAX"], [274, 275, 9, "enum_NEXT_SYNTAX"], [275, 276, 9, "enum_NEXT_SYNTAX"], [277, 272, 10, "enum_LAST_LEXICAL_USE"], [276, 277, 9, "enum_NEXT_SYNTAX"], [277, 278, 9, "enum_NEXT_SYNTAX"], [279, 126, 10, "enum_LAST_LEXICAL_USE"], [278, 279, 9, "enum_NEXT_SYNTAX"], [279, 280, 9, "enum_NEXT_SYNTAX"], [280, 281, 9, "enum_NEXT_SYNTAX"], [281, 282, 9, "enum_NEXT_SYNTAX"], [282, 283, 9, "enum_NEXT_SYNTAX"], [284, 241, 10, "enum_LAST_LEXICAL_USE"], [283, 284, 9, "enum_NEXT_SYNTAX"], [284, 285, 9, "enum_NEXT_SYNTAX"], [285, 286, 9, "enum_NEXT_SYNTAX"], [286, 287, 9, "enum_NEXT_SYNTAX"], [288, 258, 10, "enum_LAST_LEXICAL_USE"], [287, 288, 9, "enum_NEXT_SYNTAX"], [288, 289, 9, "enum_NEXT_SYNTAX"], [290, 247, 10, "enum_LAST_LEXICAL_USE"], [289, 290, 9, "enum_NEXT_SYNTAX"], [290, 291, 9, "enum_NEXT_SYNTAX"], [291, 292, 9, "enum_NEXT_SYNTAX"], [292, 293, 9, "enum_NEXT_SYNTAX"], [293, 294, 9, "enum_NEXT_SYNTAX"], [294, 295, 9, "enum_NEXT_SYNTAX"], [295, 296, 9, "enum_NEXT_SYNTAX"], [296, 297, 9, "enum_NEXT_SYNTAX"], [297, 298, 9, "enum_NEXT_SYNTAX"], [298, 299, 9, "enum_NEXT_SYNTAX"], [299, 300, 9, "enum_NEXT_SYNTAX"], [301, 288, 10, "enum_LAST_LEXICAL_USE"], [300, 301, 9, "enum_NEXT_SYNTAX"], [301, 302, 9, "enum_NEXT_SYNTAX"], [302, 303, 9, "enum_NEXT_SYNTAX"], [303, 304, 9, "enum_NEXT_SYNTAX"], [305, 279, 10, "enum_LAST_LEXICAL_USE"], [304, 305, 9, "enum_NEXT_SYNTAX"], [305, 306, 9, "enum_NEXT_SYNTAX"], [306, 307, 9, "enum_NEXT_SYNTAX"], [307, 308, 9, "enum_NEXT_SYNTAX"], [308, 309, 9, "enum_NEXT_SYNTAX"], [309, 310, 9, "enum_NEXT_SYNTAX"], [310, 311, 9, "enum_NEXT_SYNTAX"], [312, 305, 10, "enum_LAST_LEXICAL_USE"], [311, 312, 9, "enum_NEXT_SYNTAX"], [312, 313, 9, "enum_NEXT_SYNTAX"], [313, 314, 9, "enum_NEXT_SYNTAX"], [314, 315, 9, "enum_NEXT_SYNTAX"], [315, 316, 9, "enum_NEXT_SYNTAX"], [316, 317, 9, "enum_NEXT_SYNTAX"], [317, 318, 9, "enum_NEXT_SYNTAX"], [318, 319, 9, "enum_NEXT_SYNTAX"], [319, 320, 9, "enum_NEXT_SYNTAX"], [321, 312, 10, "enum_LAST_LEXICAL_USE"], [320, 321, 9, "enum_NEXT_SYNTAX"], [321, 322, 9, "enum_NEXT_SYNTAX"], [322, 323, 9, "enum_NEXT_SYNTAX"], [323, 324, 9, "enum_NEXT_SYNTAX"], [324, 325, 9, "enum_NEXT_SYNTAX"], [325, 326, 9, "enum_NEXT_SYNTAX"], [326, 327, 9, "enum_NEXT_SYNTAX"], [327, 328, 9, "enum_NEXT_SYNTAX"], [328, 329, 9, "enum_NEXT_SYNTAX"], [329, 330, 9, "enum_NEXT_SYNTAX"], [330, 331, 9, "enum_NEXT_SYNTAX"], [332, 284, 10, "enum_LAST_LEXICAL_USE"], [331, 332, 9, "enum_NEXT_SYNTAX"], [332, 333, 9, "enum_NEXT_SYNTAX"], [333, 334, 9, "enum_NEXT_SYNTAX"], [334, 335, 9, "enum_NEXT_SYNTAX"], [336, 301, 10, "enum_LAST_LEXICAL_USE"], [335, 336, 9, "enum_NEXT_SYNTAX"], [336, 337, 9, "enum_NEXT_SYNTAX"], [338, 290, 10, "enum_LAST_LEXICAL_USE"], [337, 338, 9, "enum_NEXT_SYNTAX"], [338, 339, 9, "enum_NEXT_SYNTAX"], [339, 340, 9, "enum_NEXT_SYNTAX"], [340, 341, 9, "enum_NEXT_SYNTAX"], [341, 342, 9, "enum_NEXT_SYNTAX"], [342, 343, 9, "enum_NEXT_SYNTAX"], [343, 344, 9, "enum_NEXT_SYNTAX"], [344, 345, 9, "enum_NEXT_SYNTAX"], [345, 346, 9, "enum_NEXT_SYNTAX"], [346, 347, 9, "enum_NEXT_SYNTAX"], [347, 348, 9, "enum_NEXT_SYNTAX"], [349, 336, 10, "enum_LAST_LEXICAL_USE"], [348, 349, 9, "enum_NEXT_SYNTAX"], [349, 350, 9, "enum_NEXT_SYNTAX"], [350, 351, 9, "enum_NEXT_SYNTAX"], [351, 352, 9, "enum_NEXT_SYNTAX"], [353, 236, 10, "enum_LAST_LEXICAL_USE"], [352, 353, 9, "enum_NEXT_SYNTAX"], [353, 354, 9, "enum_NEXT_SYNTAX"], [354, 355, 9, "enum_NEXT_SYNTAX"], [355, 356, 9, "enum_NEXT_SYNTAX"], [356, 357, 9, "enum_NEXT_SYNTAX"], [357, 358, 9, "enum_NEXT_SYNTAX"], [358, 359, 9, "enum_NEXT_SYNTAX"], [360, 353, 10, "enum_LAST_LEXICAL_USE"], [359, 360, 9, "enum_NEXT_SYNTAX"], [360, 361, 9, "enum_NEXT_SYNTAX"], [361, 362, 9, "enum_NEXT_SYNTAX"], [362, 363, 9, "enum_NEXT_SYNTAX"], [363, 364, 9, "enum_NEXT_SYNTAX"], [364, 365, 9, "enum_NEXT_SYNTAX"], [365, 366, 9, "enum_NEXT_SYNTAX"], [366, 367, 9, "enum_NEXT_SYNTAX"], [367, 368, 9, "enum_NEXT_SYNTAX"], [369, 360, 10, "enum_LAST_LEXICAL_USE"], [368, 369, 9, "enum_NEXT_SYNTAX"], [369, 370, 9, "enum_NEXT_SYNTAX"], [370, 371, 9, "enum_NEXT_SYNTAX"], [371, 372, 9, "enum_NEXT_SYNTAX"], [372, 373, 9, "enum_NEXT_SYNTAX"], [373, 374, 9, "enum_NEXT_SYNTAX"], [374, 375, 9, "enum_NEXT_SYNTAX"], [375, 376, 9, "enum_NEXT_SYNTAX"], [376, 377, 9, "enum_NEXT_SYNTAX"], [377, 378, 9, "enum_NEXT_SYNTAX"], [6, 20, 1, "enum_CFG_NEXT"], [20, 43, 1, "enum_CFG_NEXT"], [18, 23, 1, "enum_CFG_NEXT"], [23, 29, 1, "enum_CFG_NEXT"], [43, 10, 1, "enum_CFG_NEXT"], [10, 57, 1, "enum_CFG_NEXT"], [57, 73, 1, "enum_CFG_NEXT"], [73, 92, 1, "enum_CFG_NEXT"], [92, 111, 1, "enum_CFG_NEXT"], [111, 117, 1, "enum_CFG_NEXT"], [117, 130, 1, "enum_CFG_NEXT"], [130, 141, 1, "enum_CFG_NEXT"], [141, 155, 1, "enum_CFG_NEXT"], [155, 169, 1, "enum_CFG_NEXT"], [169, 183, 1, "enum_CFG_NEXT"], [183, 197, 1, "enum_CFG_NEXT"], [197, 240, 1, "enum_CFG_NEXT"], [240, 283, 1, "enum_CFG_NEXT"], [283, 331, 1, "enum_CFG_NEXT"], [28, 19, 3, "enum_LAST_WRITE"], [24, 17, 3, "enum_LAST_WRITE"], [37, 28, 2, "enum_LAST_READ"], [37, 19, 3, "enum_LAST_WRITE"], [30, 24, 2, "enum_LAST_READ"], [30, 17, 3, "enum_LAST_WRITE"], [51, 42, 3, "enum_LAST_WRITE"], [61, 10, 3, "enum_LAST_WRITE"], [66, 63, 2, "enum_LAST_READ"], [77, 58, 3, "enum_LAST_WRITE"], [82, 77, 2, "enum_LAST_READ"], [82, 58, 3, "enum_LAST_WRITE"], [87, 82, 2, "enum_LAST_READ"], [87, 58, 3, "enum_LAST_WRITE"], [96, 87, 2, "enum_LAST_READ"], [96, 58, 3, "enum_LAST_WRITE"], [101, 96, 2, "enum_LAST_READ"], [101, 58, 3, "enum_LAST_WRITE"], [106, 101, 2, "enum_LAST_READ"], [106, 58, 3, "enum_LAST_WRITE"], [118, 112, 3, "enum_LAST_WRITE"], [124, 74, 3, "enum_LAST_WRITE"], [126, 93, 3, "enum_LAST_WRITE"], [131, 2, 3, "enum_LAST_WRITE"], [137, 118, 2, "enum_LAST_READ"], [137, 112, 3, "enum_LAST_WRITE"], [142, 131, 2, "enum_LAST_READ"], [142, 2, 3, "enum_LAST_WRITE"], [148, 137, 2, "enum_LAST_READ"], [148, 112, 3, "enum_LAST_WRITE"], [156, 142, 2, "enum_LAST_READ"], [156, 2, 3, "enum_LAST_WRITE"], [162, 148, 2, "enum_LAST_READ"], [162, 112, 3, "enum_LAST_WRITE"], [170, 156, 2, "enum_LAST_READ"], [170, 2, 3, "enum_LAST_WRITE"], [176, 162, 2, "enum_LAST_READ"], [176, 112, 3, "enum_LAST_WRITE"], [184, 170, 2, "enum_LAST_READ"], [184, 2, 3, "enum_LAST_WRITE"], [190, 176, 2, "enum_LAST_READ"], [190, 112, 3, "enum_LAST_WRITE"], [198, 184, 2, "enum_LAST_READ"], [198, 2, 3, "enum_LAST_WRITE"], [204, 190, 2, "enum_LAST_READ"], [204, 112, 3, "enum_LAST_WRITE"], [215, 202, 2, "enum_LAST_READ"], [223, 219, 2, "enum_LAST_READ"], [229, 223, 2, "enum_LAST_READ"], [234, 229, 2, "enum_LAST_READ"], [236, 124, 2, "enum_LAST_READ"], [236, 74, 3, "enum_LAST_WRITE"], [241, 198, 2, "enum_LAST_READ"], [241, 2, 3, "enum_LAST_WRITE"], [245, 215, 2, "enum_LAST_READ"], [247, 204, 2, "enum_LAST_READ"], [247, 112, 3, "enum_LAST_WRITE"], [258, 245, 2, "enum_LAST_READ"], [262, 229, 2, "enum_LAST_READ"], [262, 234, 3, "enum_LAST_WRITE"], [266, 262, 2, "enum_LAST_READ"], [266, 234, 3, "enum_LAST_WRITE"], [272, 266, 2, "enum_LAST_READ"], [272, 234, 3, "enum_LAST_WRITE"], [277, 272, 2, "enum_LAST_READ"], [277, 234, 3, "enum_LAST_WRITE"], [279, 126, 2, "enum_LAST_READ"], [279, 93, 3, "enum_LAST_WRITE"], [284, 241, 2, "enum_LAST_READ"], [284, 2, 3, "enum_LAST_WRITE"], [288, 258, 2, "enum_LAST_READ"], [290, 247, 2, "enum_LAST_READ"], [290, 112, 3, "enum_LAST_WRITE"], [301, 288, 2, "enum_LAST_READ"], [305, 279, 2, "enum_LAST_READ"], [305, 93, 3, "enum_LAST_WRITE"], [312, 305, 2, "enum_LAST_READ"], [312, 93, 3, "enum_LAST_WRITE"], [321, 312, 2, "enum_LAST_READ"], [321, 93, 3, "enum_LAST_WRITE"], [332, 284, 2, "enum_LAST_READ"], [332, 2, 3, "enum_LAST_WRITE"], [336, 301, 2, "enum_LAST_READ"], [338, 290, 2, "enum_LAST_READ"], [338, 112, 3, "enum_LAST_WRITE"], [349, 336, 2, "enum_LAST_READ"], [353, 236, 2, "enum_LAST_READ"], [353, 74, 3, "enum_LAST_WRITE"], [360, 353, 2, "enum_LAST_READ"], [360, 74, 3, "enum_LAST_WRITE"], [369, 360, 2, "enum_LAST_READ"], [369, 74, 3, "enum_LAST_WRITE"], [58, 61, 4, "enum_COMPUTED_FROM"], [58, 63, 4, "enum_COMPUTED_FROM"], [58, 66, 4, "enum_COMPUTED_FROM"], [58, 68, 4, "enum_COMPUTED_FROM"], [74, 77, 4, "enum_COMPUTED_FROM"], [74, 82, 4, "enum_COMPUTED_FROM"], [74, 87, 4, "enum_COMPUTED_FROM"], [93, 96, 4, "enum_COMPUTED_FROM"], [93, 101, 4, "enum_COMPUTED_FROM"], [93, 106, 4, "enum_COMPUTED_FROM"], [112, 114, 4, "enum_COMPUTED_FROM"], [25, 28, 4, "enum_COMPUTED_FROM"], [31, 37, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "reviewboard", "repo": "reviewboard", "path": "reviewboard/changedescs/tests.py", "id": 44487, "has_bug": false, "code_full": "\nimport unittest\nfrom typing import Any, Dict, List\n\n\nclass ChangeDescription:\n    fields_changed: Dict = {}\n\n    def record_field_change(self, field_name: str, old_value: List[Any], new_value: List[Any], name_field: str):\n        pass\n\n\nclass Class(unittest.TestCase):\n    def test_record_object_list_name_field(self):\n        \"\"\"Testing ChangeDescription.record_field_change with an object list\n        (using name_field)\n        \"\"\"\n        class DummyObject(object):\n            def __init__(self, id):\n                self.id = id\n                self.text = \"Object %s\" % id\n\n            def get_absolute_url(self):\n                return \"http://localhost/%s\" % self.id\n\n        objs: List[Any] = [DummyObject(i) for i in range(4)]\n        old_value: List[Any] = [objs[0], objs[1], objs[2]]\n        new_value: List[Any] = [objs[1], objs[2], objs[3]]\n\n        changedesc: ChangeDescription = ChangeDescription()\n        changedesc.record_field_change(\"test\", old_value, new_value, \"text\")\n\n        self.assertIn(\"test\", changedesc.fields_changed)\n        self.assertIn(\"old\", changedesc.fields_changed[\"test\"])\n        self.assertIn(\"new\", changedesc.fields_changed[\"test\"])\n        self.assertIn(\"added\", changedesc.fields_changed[\"test\"])\n        self.assertIn(\"removed\", changedesc.fields_changed[\"test\"])\n        self.assertEqual(set(changedesc.fields_changed[\"test\"][\"old\"]),\n                            set([(obj.text, obj.get_absolute_url(), obj.id)\n                                for obj in old_value]))\n        self.assertEqual(set(changedesc.fields_changed[\"test\"][\"new\"]),\n                            set([(obj.text, obj.get_absolute_url(), obj.id)\n                                for obj in new_value]))\n        self.assertEqual(set(changedesc.fields_changed[\"test\"][\"added\"]),\n                            set([(new_value[2].text,\n                                new_value[2].get_absolute_url(),\n                                new_value[2].id)]))\n        self.assertEqual(set(changedesc.fields_changed[\"test\"][\"removed\"]),\n                            set([(old_value[0].text,\n                                old_value[0].get_absolute_url(),\n                                old_value[0].id)]))\n", "code": "def test_record_object_list_name_field(self):\n    \"\"\"Testing ChangeDescription.record_field_change with an object list\n    (using name_field)\n    \"\"\"\n    class DummyObject(object):\n        def __init__(self, id):\n            self.id = id\n            self.text = \"Object %s\" % id\n\n        def get_absolute_url(self):\n            return \"http://localhost/%s\" % self.id\n\n    objs: List[Any] = [DummyObject(i) for i in range(4)]\n    old_value: List[Any] = [objs[0], objs[1], objs[2]]\n    new_value: List[Any] = [objs[1], objs[2], objs[3]]\n\n    changedesc: ChangeDescription = ChangeDescription()\n    changedesc.record_field_change(\"test\", old_value, new_value, \"text\")\n\n    self.assertIn(\"test\", changedesc.fields_changed)\n    self.assertIn(\"old\", changedesc.fields_changed[\"test\"])\n    self.assertIn(\"new\", changedesc.fields_changed[\"test\"])\n    self.assertIn(\"added\", changedesc.fields_changed[\"test\"])\n    self.assertIn(\"removed\", changedesc.fields_changed[\"test\"])\n    self.assertEqual(set(changedesc.fields_changed[\"test\"][\"old\"]),\n                        set([(obj.text, obj.get_absolute_url(), obj.id)\n                            for obj in old_value]))\n    self.assertEqual(set(changedesc.fields_changed[\"test\"][\"new\"]),\n                        set([(obj.text, obj.get_absolute_url(), obj.id)\n                            for obj in new_value]))\n    self.assertEqual(set(changedesc.fields_changed[\"test\"][\"added\"]),\n                        set([(new_value[2].text,\n                            new_value[2].get_absolute_url(),\n                            new_value[2].id)]))\n    self.assertEqual(set(changedesc.fields_changed[\"test\"][\"removed\"]),\n                        set([(old_value[0].text,\n                            old_value[0].get_absolute_url(),\n                            old_value[0].id)]))\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "bd30dc5d56a5b3f043f29d568b68f7c10402fef6"}
{"source_tokens": ["#NEWLINE#", "def get_results_df(", "db", ",", "rev", ")", ":", "#NEWLINE#", "#INDENT#", "'Takes a git commit hash and returns a Dataframe of benchmark results\\n    '", "#NEWLINE#", "bench", "=", "DataFrame", "(", "db", ".", "get_benchmarks", "(", ")", ")", "#NEWLINE#", "results", "=", "DataFrame", "(", "map", "(", "list", ",", "db", ".", "get_rev_results", "(", "rev", ")", ".", "values", "(", ")", ")", ")", "#NEWLINE#", "results", ".", "columns", "=", "db", ".", "_results", ".", "c", ".", "keys", "(", ")", "#NEWLINE#", "results", "=", "results", ".", "join", "(", "bench", "[", "'name'", "]", ",", "on", "=", "'checksum'", ")", ".", "set_index", "(", "'checksum'", ")", "#NEWLINE#", "return", "results"], "edges": [[1, 3, 7, "enum_FIELD"], [8, 9, 7, "enum_FIELD"], [10, 14, 7, "enum_FIELD"], [21, 25, 7, "enum_FIELD"], [42, 54, 7, "enum_FIELD"], [56, 74, 7, "enum_FIELD"], [78, 79, 7, "enum_FIELD"], [14, 13, 7, "enum_FIELD"], [25, 24, 7, "enum_FIELD"], [44, 43, 7, "enum_FIELD"], [54, 52, 7, "enum_FIELD"], [74, 72, 7, "enum_FIELD"], [18, 16, 7, "enum_FIELD"], [29, 26, 7, "enum_FIELD"], [52, 50, 7, "enum_FIELD"], [72, 67, 7, "enum_FIELD"], [16, 15, 7, "enum_FIELD"], [38, 36, 7, "enum_FIELD"], [50, 48, 7, "enum_FIELD"], [67, 60, 7, "enum_FIELD"], [36, 33, 7, "enum_FIELD"], [48, 47, 7, "enum_FIELD"], [60, 59, 7, "enum_FIELD"], [64, 63, 7, "enum_FIELD"], [64, 65, 7, "enum_FIELD"], [68, 70, 7, "enum_FIELD"], [33, 31, 7, "enum_FIELD"], [31, 30, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [15, 2, 10, "enum_LAST_LEXICAL_USE"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [24, 13, 10, "enum_LAST_LEXICAL_USE"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [30, 15, 10, "enum_LAST_LEXICAL_USE"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [34, 4, 10, "enum_LAST_LEXICAL_USE"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [43, 22, 10, "enum_LAST_LEXICAL_USE"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [47, 30, 10, "enum_LAST_LEXICAL_USE"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [57, 43, 10, "enum_LAST_LEXICAL_USE"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [59, 57, 10, "enum_LAST_LEXICAL_USE"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [63, 11, 10, "enum_LAST_LEXICAL_USE"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 78, 9, "enum_NEXT_SYNTAX"], [79, 59, 10, "enum_LAST_LEXICAL_USE"], [78, 79, 9, "enum_NEXT_SYNTAX"], [3, 8, 1, "enum_CFG_NEXT"], [8, 10, 1, "enum_CFG_NEXT"], [10, 21, 1, "enum_CFG_NEXT"], [21, 42, 1, "enum_CFG_NEXT"], [42, 56, 1, "enum_CFG_NEXT"], [56, 78, 1, "enum_CFG_NEXT"], [15, 2, 3, "enum_LAST_WRITE"], [24, 13, 2, "enum_LAST_READ"], [30, 15, 2, "enum_LAST_READ"], [30, 2, 3, "enum_LAST_WRITE"], [34, 4, 3, "enum_LAST_WRITE"], [47, 30, 2, "enum_LAST_READ"], [47, 2, 3, "enum_LAST_WRITE"], [43, 22, 3, "enum_LAST_WRITE"], [59, 43, 2, "enum_LAST_READ"], [59, 22, 3, "enum_LAST_WRITE"], [63, 11, 3, "enum_LAST_WRITE"], [57, 59, 2, "enum_LAST_READ"], [57, 22, 3, "enum_LAST_WRITE"], [79, 59, 2, "enum_LAST_READ"], [79, 57, 3, "enum_LAST_WRITE"], [11, 13, 4, "enum_COMPUTED_FROM"], [11, 15, 4, "enum_COMPUTED_FROM"], [22, 24, 4, "enum_COMPUTED_FROM"], [22, 26, 4, "enum_COMPUTED_FROM"], [22, 28, 4, "enum_COMPUTED_FROM"], [22, 34, 4, "enum_COMPUTED_FROM"], [22, 30, 4, "enum_COMPUTED_FROM"], [44, 47, 4, "enum_COMPUTED_FROM"], [57, 59, 4, "enum_COMPUTED_FROM"], [57, 63, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "pydata", "repo": "pandas", "path": "vb_suite/test_perf.py", "id": 39109, "has_bug": false, "code_full": "from typing import Any, Dict, List\n\nfrom pandas import DataFrame\n\n\nclass Database:\n    _results: Any\n    \n    def get_benchmarks(self) -> List:\n        return []\n    \n    def get_rev_results(self, rev: str) -> Dict:\n        return {}\n\n\ndef get_results_df(db: Database, rev: str) -> DataFrame:\n    \"\"\"Takes a git commit hash and returns a Dataframe of benchmark results\n    \"\"\"\n    bench: DataFrame = DataFrame(db.get_benchmarks())\n    results: DataFrame = DataFrame(map(list,db.get_rev_results(rev).values()))\n\n    # Sinch vbench.db._reg_rev_results returns an unlabeled dict,\n    # we have to break encapsulation a bit.\n    results.columns = db._results.c.keys()\n    results: DataFrame = results.join(bench['name'], on='checksum').set_index(\"checksum\")\n    return results\n", "code": "def get_results_df(db: Database, rev: str) -> DataFrame:\n    \"\"\"Takes a git commit hash and returns a Dataframe of benchmark results\n    \"\"\"\n    bench: DataFrame = DataFrame(db.get_benchmarks())\n    results: DataFrame = DataFrame(map(list,db.get_rev_results(rev).values()))\n\n    # Sinch vbench.db._reg_rev_results returns an unlabeled dict,\n    # we have to break encapsulation a bit.\n    results.columns = db._results.c.keys()\n    results: DataFrame = results.join(bench['name'], on='checksum').set_index(\"checksum\")\n    return results\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "366241386282272328333256b6e267a68f8133a4"}
{"source_tokens": ["#NEWLINE#", "def test_doxydeps(", "doc_worktree", ",", "tmpdir", ")", ":", "#NEWLINE#", "#INDENT#", "sphinx_proj", "=", "doc_worktree", ".", "add_test_project", "(", "'libworld-sphinx'", ")", "#NEWLINE#", "doxy_proj", "=", "doc_worktree", ".", "add_test_project", "(", "'libworld'", ")", "#NEWLINE#", "doc_builder", "=", "qidoc", ".", "builder", ".", "DocBuilder", "(", "doc_worktree", ",", "'libworld-sphinx'", ")", "#NEWLINE#", "doc_builder", ".", "configure", "(", ")", "#NEWLINE#", "doc_builder", ".", "build", "(", ")", "#NEWLINE#", "link", "=", "find_link", "(", "sphinx_proj", ".", "index_html", ",", "'answer()'", ")", "#NEWLINE#", "assert", "os", ".", "path", ".", "exists", "(", "link", ")", "#NEWLINE#", "doc_builder", ".", "install", "(", "tmpdir", ".", "strpath", ")", "#NEWLINE#", "link", "=", "find_link", "(", "tmpdir", ".", "join", "(", "'index.html'", ")", ".", "strpath", ",", "'answer()'", ")", "#NEWLINE#", "assert", "(", "not", "os", ".", "path", ".", "isabs", "(", "link", ")", ")", "#NEWLINE#", "assert", "tmpdir", ".", "join", "(", "link", ")", ".", "check", "(", "file", "=", "True", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [8, 14, 7, "enum_FIELD"], [17, 23, 7, "enum_FIELD"], [26, 36, 7, "enum_FIELD"], [39, 43, 7, "enum_FIELD"], [45, 49, 7, "enum_FIELD"], [51, 59, 7, "enum_FIELD"], [63, 69, 7, "enum_FIELD"], [72, 76, 7, "enum_FIELD"], [81, 94, 7, "enum_FIELD"], [98, 100, 7, "enum_FIELD"], [111, 120, 7, "enum_FIELD"], [14, 12, 7, "enum_FIELD"], [23, 21, 7, "enum_FIELD"], [36, 32, 7, "enum_FIELD"], [43, 41, 7, "enum_FIELD"], [49, 47, 7, "enum_FIELD"], [59, 54, 7, "enum_FIELD"], [69, 67, 7, "enum_FIELD"], [76, 74, 7, "enum_FIELD"], [94, 84, 7, "enum_FIELD"], [100, 106, 7, "enum_FIELD"], [120, 118, 7, "enum_FIELD"], [12, 11, 7, "enum_FIELD"], [21, 20, 7, "enum_FIELD"], [32, 30, 7, "enum_FIELD"], [41, 40, 7, "enum_FIELD"], [47, 46, 7, "enum_FIELD"], [57, 56, 7, "enum_FIELD"], [67, 65, 7, "enum_FIELD"], [74, 73, 7, "enum_FIELD"], [78, 77, 7, "enum_FIELD"], [92, 89, 7, "enum_FIELD"], [106, 104, 7, "enum_FIELD"], [118, 115, 7, "enum_FIELD"], [121, 123, 7, "enum_FIELD"], [30, 29, 7, "enum_FIELD"], [65, 64, 7, "enum_FIELD"], [89, 87, 7, "enum_FIELD"], [104, 102, 7, "enum_FIELD"], [115, 113, 7, "enum_FIELD"], [87, 86, 7, "enum_FIELD"], [102, 101, 7, "enum_FIELD"], [113, 112, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [11, 2, 10, "enum_LAST_LEXICAL_USE"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [20, 11, 10, "enum_LAST_LEXICAL_USE"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [35, 20, 10, "enum_LAST_LEXICAL_USE"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [40, 27, 10, "enum_LAST_LEXICAL_USE"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [46, 40, 10, "enum_LAST_LEXICAL_USE"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [56, 9, 10, "enum_LAST_LEXICAL_USE"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [70, 52, 10, "enum_LAST_LEXICAL_USE"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [73, 46, 10, "enum_LAST_LEXICAL_USE"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [77, 4, 10, "enum_LAST_LEXICAL_USE"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [82, 70, 10, "enum_LAST_LEXICAL_USE"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [84, 54, 10, "enum_LAST_LEXICAL_USE"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [86, 77, 10, "enum_LAST_LEXICAL_USE"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [101, 64, 10, "enum_LAST_LEXICAL_USE"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [107, 82, 10, "enum_LAST_LEXICAL_USE"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 111, 9, "enum_NEXT_SYNTAX"], [112, 86, 10, "enum_LAST_LEXICAL_USE"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [116, 107, 10, "enum_LAST_LEXICAL_USE"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [3, 8, 1, "enum_CFG_NEXT"], [8, 17, 1, "enum_CFG_NEXT"], [17, 26, 1, "enum_CFG_NEXT"], [26, 39, 1, "enum_CFG_NEXT"], [39, 45, 1, "enum_CFG_NEXT"], [45, 51, 1, "enum_CFG_NEXT"], [51, 63, 1, "enum_CFG_NEXT"], [63, 72, 1, "enum_CFG_NEXT"], [72, 81, 1, "enum_CFG_NEXT"], [81, 98, 1, "enum_CFG_NEXT"], [98, 111, 1, "enum_CFG_NEXT"], [11, 2, 3, "enum_LAST_WRITE"], [20, 11, 2, "enum_LAST_READ"], [20, 2, 3, "enum_LAST_WRITE"], [35, 20, 2, "enum_LAST_READ"], [35, 2, 3, "enum_LAST_WRITE"], [40, 27, 3, "enum_LAST_WRITE"], [46, 40, 2, "enum_LAST_READ"], [46, 27, 3, "enum_LAST_WRITE"], [56, 9, 3, "enum_LAST_WRITE"], [70, 52, 3, "enum_LAST_WRITE"], [73, 46, 2, "enum_LAST_READ"], [73, 27, 3, "enum_LAST_WRITE"], [77, 4, 3, "enum_LAST_WRITE"], [84, 54, 2, "enum_LAST_READ"], [86, 77, 2, "enum_LAST_READ"], [86, 4, 3, "enum_LAST_WRITE"], [82, 70, 2, "enum_LAST_READ"], [82, 52, 3, "enum_LAST_WRITE"], [101, 64, 2, "enum_LAST_READ"], [107, 70, 2, "enum_LAST_READ"], [107, 82, 3, "enum_LAST_WRITE"], [112, 86, 2, "enum_LAST_READ"], [112, 4, 3, "enum_LAST_WRITE"], [116, 107, 2, "enum_LAST_READ"], [116, 82, 3, "enum_LAST_WRITE"], [9, 11, 4, "enum_COMPUTED_FROM"], [18, 20, 4, "enum_COMPUTED_FROM"], [27, 35, 4, "enum_COMPUTED_FROM"], [27, 29, 4, "enum_COMPUTED_FROM"], [52, 54, 4, "enum_COMPUTED_FROM"], [52, 56, 4, "enum_COMPUTED_FROM"], [82, 84, 4, "enum_COMPUTED_FROM"], [82, 86, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "aldebaran", "repo": "qibuild", "path": "python/qidoc/test/test_sphinx.py", "id": 9169, "has_bug": false, "code_full": "import os\nfrom pathlib import Path\nfrom typing import Any\n\nqidoc: Any = None\n\n\ndef find_link(path: str, text: str) -> str:\n    return \"\"\n\n\nclass TestProject:\n    name: str\n    index_html: str\n\n    def __init__(self, name: str) -> None:\n        self.name = name\n\n\nclass DocWorkTree:\n    def add_test_project(self, name: str) -> TestProject:\n        return TestProject(name)\n    \n\nclass TmpDir:\n    path: str\n\n    @property\n    def strpath(self) -> str:\n        return \"\"\n\n    def join(self, file_name: str) -> \"TmpDir\":\n        return self\n\n    def check(self, file: bool = False) -> bool:\n        return False\n\n\ndef test_doxydeps(doc_worktree: DocWorkTree, tmpdir: TmpDir):\n    \"\"\" Test DoxyDeps \"\"\"\n    sphinx_proj: TestProject = doc_worktree.add_test_project(\"libworld-sphinx\")\n    _doxy_proj: TestProject = doc_worktree.add_test_project(\"libworld\")\n    doc_builder: Any = qidoc.builder.DocBuilder(doc_worktree, \"libworld-sphinx\")\n    doc_builder.configure()\n    doc_builder.build()\n    link: str = find_link(sphinx_proj.index_html, \"answer()\")\n    assert os.path.exists(link)\n    doc_builder.install(tmpdir.strpath)\n    link: str = find_link(tmpdir.join(\"index.html\").strpath, \"answer()\")\n    assert not os.path.isabs(link)\n    assert tmpdir.join(link).check(file=True)\n", "code": "def test_doxydeps(doc_worktree: DocWorkTree, tmpdir: TmpDir):\n    \"\"\" Test DoxyDeps \"\"\"\n    sphinx_proj: TestProject = doc_worktree.add_test_project(\"libworld-sphinx\")\n    _doxy_proj: TestProject = doc_worktree.add_test_project(\"libworld\")\n    doc_builder: Any = qidoc.builder.DocBuilder(doc_worktree, \"libworld-sphinx\")\n    doc_builder.configure()\n    doc_builder.build()\n    link: str = find_link(sphinx_proj.index_html, \"answer()\")\n    assert os.path.exists(link)\n    doc_builder.install(tmpdir.strpath)\n    link: str = find_link(tmpdir.join(\"index.html\").strpath, \"answer()\")\n    assert not os.path.isabs(link)\n    assert tmpdir.join(link).check(file=True)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "f4f37245a264a3cea032853fc2ed2da38f898ea3"}
{"source_tokens": ["#NEWLINE#", "def test_cannot_edit_user_credential(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "credential", "=", "factory_logical", ".", "CredentialFactory", "(", "database", "=", "self", ".", "database", ")", "#NEWLINE#", "self", ".", "assertTrue", "(", "credential", ".", "pk", ")", "#NEWLINE#", "credential", ".", "user", "=", "'super3'", "#NEWLINE#", "self", ".", "assertRaises", "(", "AttributeError", ",", "credential", ".", "save", ")"], "edges": [[6, 12, 7, "enum_FIELD"], [19, 23, 7, "enum_FIELD"], [28, 33, 7, "enum_FIELD"], [34, 40, 7, "enum_FIELD"], [12, 10, 7, "enum_FIELD"], [23, 21, 7, "enum_FIELD"], [30, 29, 7, "enum_FIELD"], [40, 36, 7, "enum_FIELD"], [10, 9, 7, "enum_FIELD"], [13, 16, 7, "enum_FIELD"], [21, 20, 7, "enum_FIELD"], [25, 24, 7, "enum_FIELD"], [36, 35, 7, "enum_FIELD"], [42, 41, 7, "enum_FIELD"], [16, 15, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [15, 2, 10, "enum_LAST_LEXICAL_USE"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [20, 15, 10, "enum_LAST_LEXICAL_USE"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [24, 7, 10, "enum_LAST_LEXICAL_USE"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [29, 24, 10, "enum_LAST_LEXICAL_USE"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [35, 20, 10, "enum_LAST_LEXICAL_USE"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [41, 29, 10, "enum_LAST_LEXICAL_USE"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [6, 19, 1, "enum_CFG_NEXT"], [19, 28, 1, "enum_CFG_NEXT"], [28, 34, 1, "enum_CFG_NEXT"], [15, 2, 3, "enum_LAST_WRITE"], [20, 15, 2, "enum_LAST_READ"], [20, 2, 3, "enum_LAST_WRITE"], [24, 7, 3, "enum_LAST_WRITE"], [29, 24, 2, "enum_LAST_READ"], [29, 7, 3, "enum_LAST_WRITE"], [35, 20, 2, "enum_LAST_READ"], [35, 2, 3, "enum_LAST_WRITE"], [41, 29, 2, "enum_LAST_READ"], [41, 7, 3, "enum_LAST_WRITE"], [7, 9, 4, "enum_COMPUTED_FROM"], [7, 15, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "globocom", "repo": "database-as-a-service", "path": "dbaas/logical/tests/test_credential.py", "id": 15964, "has_bug": false, "code_full": "import unittest\nfrom typing import Any\n\nfactory_logical: Any = None\n\n\nclass Class(unittest.TestCase):\n    database: Any\n\n    def test_cannot_edit_user_credential(self):\n        credential = factory_logical.CredentialFactory(database=self.database)\n\n        self.assertTrue(credential.pk)\n\n        credential.user = \"super3\"\n\n        self.assertRaises(AttributeError, credential.save)\n", "code": "def test_cannot_edit_user_credential(self):\n    credential = factory_logical.CredentialFactory(database=self.database)\n\n    self.assertTrue(credential.pk)\n\n    credential.user = \"super3\"\n\n    self.assertRaises(AttributeError, credential.save)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "c1b9cb3c17a9f85ce1c5fe1c1977d803c2bdca73"}
{"source_tokens": ["#NEWLINE#", "def test_greedy_max2(", ")", ":", "#NEWLINE#", "#INDENT#", "G", "=", "G1", "(", ")", "#NEWLINE#", "del", "G", "[", "1", "]", "[", "0", "]", "[", "0", "]", "[", "'weight'", "]", "#NEWLINE#", "B", "=", "branchings", ".", "greedy_branching", "(", "G", ",", "default", "=", "6", ")", "#NEWLINE#", "edges", "=", "[", "(", "1", ",", "0", ",", "6", ")", ",", "(", "1", ",", "5", ",", "13", ")", ",", "(", "7", ",", "6", ",", "15", ")", ",", "(", "2", ",", "1", ",", "17", ")", ",", "(", "3", ",", "4", ",", "17", ")", ",", "(", "8", ",", "7", ",", "18", ")", ",", "(", "2", ",", "3", ",", "21", ")", ",", "(", "6", ",", "2", ",", "21", ")", "]", "#NEWLINE#", "B_", "=", "build_branching", "(", "edges", ")", "#NEWLINE#", "assert_equal_branchings", "(", "B", ",", "B_", ")"], "edges": [[5, 9, 7, "enum_FIELD"], [26, 34, 7, "enum_FIELD"], [39, 74, 7, "enum_FIELD"], [107, 111, 7, "enum_FIELD"], [114, 118, 7, "enum_FIELD"], [9, 8, 7, "enum_FIELD"], [23, 20, 7, "enum_FIELD"], [23, 24, 7, "enum_FIELD"], [34, 30, 7, "enum_FIELD"], [111, 110, 7, "enum_FIELD"], [118, 115, 7, "enum_FIELD"], [20, 17, 7, "enum_FIELD"], [20, 21, 7, "enum_FIELD"], [30, 29, 7, "enum_FIELD"], [35, 37, 7, "enum_FIELD"], [17, 14, 7, "enum_FIELD"], [17, 18, 7, "enum_FIELD"], [14, 13, 7, "enum_FIELD"], [14, 15, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 12, 9, "enum_NEXT_SYNTAX"], [13, 6, 10, "enum_LAST_LEXICAL_USE"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [33, 13, 10, "enum_LAST_LEXICAL_USE"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [112, 40, 10, "enum_LAST_LEXICAL_USE"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [117, 27, 10, "enum_LAST_LEXICAL_USE"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [119, 108, 10, "enum_LAST_LEXICAL_USE"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [5, 12, 1, "enum_CFG_NEXT"], [12, 26, 1, "enum_CFG_NEXT"], [26, 39, 1, "enum_CFG_NEXT"], [39, 107, 1, "enum_CFG_NEXT"], [107, 114, 1, "enum_CFG_NEXT"], [13, 6, 3, "enum_LAST_WRITE"], [33, 13, 2, "enum_LAST_READ"], [33, 6, 3, "enum_LAST_WRITE"], [112, 40, 3, "enum_LAST_WRITE"], [117, 27, 3, "enum_LAST_WRITE"], [119, 108, 3, "enum_LAST_WRITE"], [6, 8, 4, "enum_COMPUTED_FROM"], [27, 33, 4, "enum_COMPUTED_FROM"], [27, 29, 4, "enum_COMPUTED_FROM"], [108, 110, 4, "enum_COMPUTED_FROM"], [108, 112, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "networkx", "repo": "networkx", "path": "networkx/algorithms/tree/tests/test_branchings.py", "id": 27136, "has_bug": false, "code_full": "from typing import List, Tuple\n\nimport networkx as nx\nfrom networkx.algorithms import branchings\n\n\ndef G1() -> nx.DiGraph:\n    return nx.DiGraph()\n\n\ndef build_branching(edges: List[Tuple[int, int, int]]) -> nx.DiGraph:\n    return nx.DiGraph()\n\n\ndef assert_equal_branchings(B1: nx.DiGraph, B2: nx.DiGraph):\n    pass\n\n\ndef test_greedy_max2():\n    # Different default weight.\n    #\n    G: nx.DiGraph = G1()\n    del G[1][0][0][\"weight\"]\n    B: nx.DiGraph = branchings.greedy_branching(G, default=6)\n    # Chosen so that edge (3,0,5) is not selected and (1,0,6) is instead.\n\n    edges = [\n        (1, 0, 6),\n        (1, 5, 13),\n        (7, 6, 15),\n        (2, 1, 17),\n        (3, 4, 17),\n        (8, 7, 18),\n        (2, 3, 21),\n        (6, 2, 21),\n    ]\n    B_: nx.DiGraph = build_branching(edges)\n    assert_equal_branchings(B, B_)\n", "code": "def test_greedy_max2():\n    # Different default weight.\n    #\n    G: nx.DiGraph = G1()\n    del G[1][0][0][\"weight\"]\n    B: nx.DiGraph = branchings.greedy_branching(G, default=6)\n    # Chosen so that edge (3,0,5) is not selected and (1,0,6) is instead.\n\n    edges = [\n        (1, 0, 6),\n        (1, 5, 13),\n        (7, 6, 15),\n        (2, 1, 17),\n        (3, 4, 17),\n        (8, 7, 18),\n        (2, 3, 21),\n        (6, 2, 21),\n    ]\n    B_: nx.DiGraph = build_branching(edges)\n    assert_equal_branchings(B, B_)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "53c5b0466862f73816e371bc23afe4a45edab5b4"}
{"source_tokens": ["#NEWLINE#", "def get_fields(", "self", ",", "tablename", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Get the fields to include/exclude for the specified table.\\n\\n        @param tablename: the tablename\\n        @return: tuple of lists (include, exclude) of fields to\\n                 include or exclude. None indicates \"all fields\",\\n                 whereas an empty list indicates \"no fields\".\\n    '", "#NEWLINE#", "ANY", "=", "'ANY'", "#NEWLINE#", "default", "=", "(", "None", ",", "None", ")", "#NEWLINE#", "tree", "=", "self", ".", "tree", "#NEWLINE#", "if", "(", "not", "tree", ")", ":", "#NEWLINE#", "#INDENT#", "return", "default", "#NEWLINE#", "#UNINDENT#", "if", "(", "self", ".", "select", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "__inspect", "(", ")", "#NEWLINE#", "#UNINDENT#", "def find_match(", "items", ",", "tablename", ",", "default", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "tablename", "in", "items", ")", ":", "#NEWLINE#", "#INDENT#", "match", "=", "items", "[", "tablename", "]", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "match", "=", "False", "#NEWLINE#", "maxlen", "=", "0", "#NEWLINE#", "for", "(", "tn", ",", "fields", ")", "in", "items", ".", "iteritems", "(", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "'*'", "in", "tn", ")", ":", "#NEWLINE#", "#INDENT#", "m", "=", "re", ".", "match", "(", "tn", ".", "replace", "(", "'*'", ",", "'.*'", ")", ",", "tablename", ")", "#NEWLINE#", "if", "(", "not", "m", ")", ":", "#NEWLINE#", "#INDENT#", "continue", "#NEWLINE#", "#UNINDENT#", "l", "=", "m", ".", "span", "(", ")", "[", "(", "-", "1", ")", "]", "#NEWLINE#", "if", "(", "l", ">", "maxlen", ")", ":", "#NEWLINE#", "#INDENT#", "match", "=", "fields", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "if", "(", "match", "is", "False", ")", ":", "#NEWLINE#", "#INDENT#", "match", "=", "items", ".", "get", "(", "ANY", ",", "default", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "return", "match", "#NEWLINE#", "#UNINDENT#", "select", "=", "find_match", "(", "self", ".", "select", ",", "tablename", ",", "None", ")", "#NEWLINE#", "skip", "=", "find_match", "(", "self", ".", "skip", ",", "tablename", ",", "set", "(", ")", ")", "#NEWLINE#", "if", "skip", ":", "#NEWLINE#", "#INDENT#", "if", "select", ":", "#NEWLINE#", "#INDENT#", "include", "=", "[", "fn", "for", "fn", "in", "select", "if", "(", "fn", "not in", "skip", ")", "]", "#NEWLINE#", "exclude", "=", "[", "fn", "for", "fn", "in", "skip", "if", "(", "fn", "not in", "select", ")", "]", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "include", "=", "None", "#NEWLINE#", "exclude", "=", "list", "(", "skip", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "include", "=", "(", "list", "(", "select", ")", "if", "select", "else", "None", ")", "#NEWLINE#", "exclude", "=", "[", "]", "#NEWLINE#", "#UNINDENT#", "return", "(", "include", ",", "exclude", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [8, 9, 7, "enum_FIELD"], [10, 13, 7, "enum_FIELD"], [14, 19, 7, "enum_FIELD"], [22, 26, 7, "enum_FIELD"], [29, 31, 7, "enum_FIELD"], [41, 46, 7, "enum_FIELD"], [65, 61, 7, "enum_FIELD"], [206, 214, 7, "enum_FIELD"], [219, 227, 7, "enum_FIELD"], [237, 236, 7, "enum_FIELD"], [318, 321, 7, "enum_FIELD"], [26, 25, 7, "enum_FIELD"], [31, 32, 7, "enum_FIELD"], [37, 38, 7, "enum_FIELD"], [46, 44, 7, "enum_FIELD"], [51, 55, 7, "enum_FIELD"], [75, 72, 7, "enum_FIELD"], [203, 204, 7, "enum_FIELD"], [214, 209, 7, "enum_FIELD"], [227, 222, 7, "enum_FIELD"], [242, 241, 7, "enum_FIELD"], [298, 306, 7, "enum_FIELD"], [311, 314, 7, "enum_FIELD"], [44, 43, 7, "enum_FIELD"], [55, 53, 7, "enum_FIELD"], [72, 71, 7, "enum_FIELD"], [77, 81, 7, "enum_FIELD"], [89, 92, 7, "enum_FIELD"], [93, 96, 7, "enum_FIELD"], [104, 101, 7, "enum_FIELD"], [104, 108, 7, "enum_FIELD"], [181, 184, 7, "enum_FIELD"], [212, 211, 7, "enum_FIELD"], [225, 224, 7, "enum_FIELD"], [231, 230, 7, "enum_FIELD"], [244, 247, 7, "enum_FIELD"], [260, 263, 7, "enum_FIELD"], [281, 284, 7, "enum_FIELD"], [285, 289, 7, "enum_FIELD"], [306, 307, 7, "enum_FIELD"], [306, 303, 7, "enum_FIELD"], [306, 309, 7, "enum_FIELD"], [53, 52, 7, "enum_FIELD"], [81, 80, 7, "enum_FIELD"], [81, 82, 7, "enum_FIELD"], [108, 106, 7, "enum_FIELD"], [113, 116, 7, "enum_FIELD"], [184, 183, 7, "enum_FIELD"], [189, 197, 7, "enum_FIELD"], [247, 248, 7, "enum_FIELD"], [263, 264, 7, "enum_FIELD"], [289, 288, 7, "enum_FIELD"], [303, 302, 7, "enum_FIELD"], [106, 105, 7, "enum_FIELD"], [116, 115, 7, "enum_FIELD"], [121, 136, 7, "enum_FIELD"], [140, 142, 7, "enum_FIELD"], [150, 158, 7, "enum_FIELD"], [165, 168, 7, "enum_FIELD"], [197, 193, 7, "enum_FIELD"], [251, 250, 7, "enum_FIELD"], [251, 252, 7, "enum_FIELD"], [267, 266, 7, "enum_FIELD"], [267, 268, 7, "enum_FIELD"], [136, 125, 7, "enum_FIELD"], [142, 143, 7, "enum_FIELD"], [158, 156, 7, "enum_FIELD"], [158, 160, 7, "enum_FIELD"], [168, 167, 7, "enum_FIELD"], [173, 176, 7, "enum_FIELD"], [193, 192, 7, "enum_FIELD"], [256, 255, 7, "enum_FIELD"], [272, 271, 7, "enum_FIELD"], [125, 124, 7, "enum_FIELD"], [133, 129, 7, "enum_FIELD"], [156, 154, 7, "enum_FIELD"], [160, 161, 7, "enum_FIELD"], [129, 128, 7, "enum_FIELD"], [154, 153, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [25, 2, 10, "enum_LAST_LEXICAL_USE"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [32, 23, 10, "enum_LAST_LEXICAL_USE"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 37, 9, "enum_NEXT_SYNTAX"], [38, 15, 10, "enum_LAST_LEXICAL_USE"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [43, 25, 10, "enum_LAST_LEXICAL_USE"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 51, 9, "enum_NEXT_SYNTAX"], [52, 43, 10, "enum_LAST_LEXICAL_USE"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [62, 4, 10, "enum_LAST_LEXICAL_USE"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [64, 38, 10, "enum_LAST_LEXICAL_USE"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [71, 62, 10, "enum_LAST_LEXICAL_USE"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [73, 60, 10, "enum_LAST_LEXICAL_USE"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [80, 73, 10, "enum_LAST_LEXICAL_USE"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [82, 71, 10, "enum_LAST_LEXICAL_USE"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 89, 9, "enum_NEXT_SYNTAX"], [90, 78, 10, "enum_LAST_LEXICAL_USE"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [105, 80, 10, "enum_LAST_LEXICAL_USE"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [117, 100, 10, "enum_LAST_LEXICAL_USE"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [128, 117, 10, "enum_LAST_LEXICAL_USE"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [137, 82, 10, "enum_LAST_LEXICAL_USE"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [143, 122, 10, "enum_LAST_LEXICAL_USE"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 148, 9, "enum_NEXT_SYNTAX"], [148, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [153, 143, 10, "enum_LAST_LEXICAL_USE"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [167, 151, 10, "enum_LAST_LEXICAL_USE"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [169, 94, 10, "enum_LAST_LEXICAL_USE"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 173, 9, "enum_NEXT_SYNTAX"], [174, 90, 10, "enum_LAST_LEXICAL_USE"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [176, 102, 10, "enum_LAST_LEXICAL_USE"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [183, 174, 10, "enum_LAST_LEXICAL_USE"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 184, 9, "enum_NEXT_SYNTAX"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [187, 189, 9, "enum_NEXT_SYNTAX"], [190, 183, 10, "enum_LAST_LEXICAL_USE"], [189, 190, 9, "enum_NEXT_SYNTAX"], [190, 191, 9, "enum_NEXT_SYNTAX"], [192, 105, 10, "enum_LAST_LEXICAL_USE"], [191, 192, 9, "enum_NEXT_SYNTAX"], [192, 193, 9, "enum_NEXT_SYNTAX"], [193, 194, 9, "enum_NEXT_SYNTAX"], [194, 195, 9, "enum_NEXT_SYNTAX"], [196, 11, 10, "enum_LAST_LEXICAL_USE"], [195, 196, 9, "enum_NEXT_SYNTAX"], [196, 197, 9, "enum_NEXT_SYNTAX"], [198, 64, 10, "enum_LAST_LEXICAL_USE"], [197, 198, 9, "enum_NEXT_SYNTAX"], [198, 199, 9, "enum_NEXT_SYNTAX"], [199, 203, 9, "enum_NEXT_SYNTAX"], [204, 190, 10, "enum_LAST_LEXICAL_USE"], [203, 204, 9, "enum_NEXT_SYNTAX"], [204, 206, 9, "enum_NEXT_SYNTAX"], [206, 207, 9, "enum_NEXT_SYNTAX"], [207, 208, 9, "enum_NEXT_SYNTAX"], [208, 209, 9, "enum_NEXT_SYNTAX"], [209, 210, 9, "enum_NEXT_SYNTAX"], [211, 52, 10, "enum_LAST_LEXICAL_USE"], [210, 211, 9, "enum_NEXT_SYNTAX"], [211, 212, 9, "enum_NEXT_SYNTAX"], [212, 213, 9, "enum_NEXT_SYNTAX"], [213, 214, 9, "enum_NEXT_SYNTAX"], [215, 137, 10, "enum_LAST_LEXICAL_USE"], [214, 215, 9, "enum_NEXT_SYNTAX"], [215, 216, 9, "enum_NEXT_SYNTAX"], [216, 217, 9, "enum_NEXT_SYNTAX"], [217, 218, 9, "enum_NEXT_SYNTAX"], [218, 219, 9, "enum_NEXT_SYNTAX"], [219, 220, 9, "enum_NEXT_SYNTAX"], [220, 221, 9, "enum_NEXT_SYNTAX"], [222, 209, 10, "enum_LAST_LEXICAL_USE"], [221, 222, 9, "enum_NEXT_SYNTAX"], [222, 223, 9, "enum_NEXT_SYNTAX"], [224, 211, 10, "enum_LAST_LEXICAL_USE"], [223, 224, 9, "enum_NEXT_SYNTAX"], [224, 225, 9, "enum_NEXT_SYNTAX"], [225, 226, 9, "enum_NEXT_SYNTAX"], [226, 227, 9, "enum_NEXT_SYNTAX"], [228, 215, 10, "enum_LAST_LEXICAL_USE"], [227, 228, 9, "enum_NEXT_SYNTAX"], [228, 229, 9, "enum_NEXT_SYNTAX"], [229, 230, 9, "enum_NEXT_SYNTAX"], [230, 231, 9, "enum_NEXT_SYNTAX"], [231, 232, 9, "enum_NEXT_SYNTAX"], [232, 233, 9, "enum_NEXT_SYNTAX"], [233, 235, 9, "enum_NEXT_SYNTAX"], [236, 220, 10, "enum_LAST_LEXICAL_USE"], [235, 236, 9, "enum_NEXT_SYNTAX"], [236, 237, 9, "enum_NEXT_SYNTAX"], [237, 240, 9, "enum_NEXT_SYNTAX"], [241, 207, 10, "enum_LAST_LEXICAL_USE"], [240, 241, 9, "enum_NEXT_SYNTAX"], [241, 242, 9, "enum_NEXT_SYNTAX"], [242, 244, 9, "enum_NEXT_SYNTAX"], [244, 245, 9, "enum_NEXT_SYNTAX"], [245, 246, 9, "enum_NEXT_SYNTAX"], [246, 247, 9, "enum_NEXT_SYNTAX"], [247, 248, 9, "enum_NEXT_SYNTAX"], [248, 249, 9, "enum_NEXT_SYNTAX"], [250, 248, 10, "enum_LAST_LEXICAL_USE"], [249, 250, 9, "enum_NEXT_SYNTAX"], [250, 251, 9, "enum_NEXT_SYNTAX"], [252, 241, 10, "enum_LAST_LEXICAL_USE"], [251, 252, 9, "enum_NEXT_SYNTAX"], [252, 253, 9, "enum_NEXT_SYNTAX"], [253, 254, 9, "enum_NEXT_SYNTAX"], [255, 250, 10, "enum_LAST_LEXICAL_USE"], [254, 255, 9, "enum_NEXT_SYNTAX"], [255, 256, 9, "enum_NEXT_SYNTAX"], [257, 236, 10, "enum_LAST_LEXICAL_USE"], [256, 257, 9, "enum_NEXT_SYNTAX"], [257, 258, 9, "enum_NEXT_SYNTAX"], [258, 259, 9, "enum_NEXT_SYNTAX"], [259, 260, 9, "enum_NEXT_SYNTAX"], [260, 261, 9, "enum_NEXT_SYNTAX"], [261, 262, 9, "enum_NEXT_SYNTAX"], [262, 263, 9, "enum_NEXT_SYNTAX"], [264, 255, 10, "enum_LAST_LEXICAL_USE"], [263, 264, 9, "enum_NEXT_SYNTAX"], [264, 265, 9, "enum_NEXT_SYNTAX"], [266, 264, 10, "enum_LAST_LEXICAL_USE"], [265, 266, 9, "enum_NEXT_SYNTAX"], [266, 267, 9, "enum_NEXT_SYNTAX"], [268, 257, 10, "enum_LAST_LEXICAL_USE"], [267, 268, 9, "enum_NEXT_SYNTAX"], [268, 269, 9, "enum_NEXT_SYNTAX"], [269, 270, 9, "enum_NEXT_SYNTAX"], [271, 266, 10, "enum_LAST_LEXICAL_USE"], [270, 271, 9, "enum_NEXT_SYNTAX"], [271, 272, 9, "enum_NEXT_SYNTAX"], [273, 252, 10, "enum_LAST_LEXICAL_USE"], [272, 273, 9, "enum_NEXT_SYNTAX"], [273, 274, 9, "enum_NEXT_SYNTAX"], [274, 275, 9, "enum_NEXT_SYNTAX"], [275, 278, 9, "enum_NEXT_SYNTAX"], [278, 279, 9, "enum_NEXT_SYNTAX"], [279, 281, 9, "enum_NEXT_SYNTAX"], [282, 245, 10, "enum_LAST_LEXICAL_USE"], [281, 282, 9, "enum_NEXT_SYNTAX"], [282, 283, 9, "enum_NEXT_SYNTAX"], [283, 284, 9, "enum_NEXT_SYNTAX"], [284, 285, 9, "enum_NEXT_SYNTAX"], [286, 261, 10, "enum_LAST_LEXICAL_USE"], [285, 286, 9, "enum_NEXT_SYNTAX"], [286, 287, 9, "enum_NEXT_SYNTAX"], [287, 288, 9, "enum_NEXT_SYNTAX"], [288, 289, 9, "enum_NEXT_SYNTAX"], [290, 268, 10, "enum_LAST_LEXICAL_USE"], [289, 290, 9, "enum_NEXT_SYNTAX"], [290, 291, 9, "enum_NEXT_SYNTAX"], [291, 295, 9, "enum_NEXT_SYNTAX"], [295, 296, 9, "enum_NEXT_SYNTAX"], [296, 298, 9, "enum_NEXT_SYNTAX"], [299, 282, 10, "enum_LAST_LEXICAL_USE"], [298, 299, 9, "enum_NEXT_SYNTAX"], [299, 300, 9, "enum_NEXT_SYNTAX"], [300, 301, 9, "enum_NEXT_SYNTAX"], [302, 288, 10, "enum_LAST_LEXICAL_USE"], [301, 302, 9, "enum_NEXT_SYNTAX"], [302, 303, 9, "enum_NEXT_SYNTAX"], [304, 273, 10, "enum_LAST_LEXICAL_USE"], [303, 304, 9, "enum_NEXT_SYNTAX"], [304, 305, 9, "enum_NEXT_SYNTAX"], [305, 306, 9, "enum_NEXT_SYNTAX"], [307, 304, 10, "enum_LAST_LEXICAL_USE"], [306, 307, 9, "enum_NEXT_SYNTAX"], [307, 308, 9, "enum_NEXT_SYNTAX"], [308, 309, 9, "enum_NEXT_SYNTAX"], [309, 310, 9, "enum_NEXT_SYNTAX"], [310, 311, 9, "enum_NEXT_SYNTAX"], [312, 286, 10, "enum_LAST_LEXICAL_USE"], [311, 312, 9, "enum_NEXT_SYNTAX"], [312, 313, 9, "enum_NEXT_SYNTAX"], [313, 314, 9, "enum_NEXT_SYNTAX"], [314, 315, 9, "enum_NEXT_SYNTAX"], [315, 318, 9, "enum_NEXT_SYNTAX"], [318, 319, 9, "enum_NEXT_SYNTAX"], [320, 299, 10, "enum_LAST_LEXICAL_USE"], [319, 320, 9, "enum_NEXT_SYNTAX"], [320, 321, 9, "enum_NEXT_SYNTAX"], [322, 312, 10, "enum_LAST_LEXICAL_USE"], [321, 322, 9, "enum_NEXT_SYNTAX"], [322, 323, 9, "enum_NEXT_SYNTAX"], [3, 8, 1, "enum_CFG_NEXT"], [8, 10, 1, "enum_CFG_NEXT"], [10, 14, 1, "enum_CFG_NEXT"], [14, 22, 1, "enum_CFG_NEXT"], [22, 31, 1, "enum_CFG_NEXT"], [31, 46, 1, "enum_CFG_NEXT"], [31, 37, 1, "enum_CFG_NEXT"], [46, 65, 1, "enum_CFG_NEXT"], [46, 51, 1, "enum_CFG_NEXT"], [51, 65, 1, "enum_CFG_NEXT"], [65, 206, 1, "enum_CFG_NEXT"], [61, 72, 1, "enum_CFG_NEXT"], [72, 77, 1, "enum_CFG_NEXT"], [72, 89, 1, "enum_CFG_NEXT"], [77, 203, 1, "enum_CFG_NEXT"], [89, 93, 1, "enum_CFG_NEXT"], [93, 108, 1, "enum_CFG_NEXT"], [108, 101, 1, "enum_CFG_NEXT"], [101, 116, 1, "enum_CFG_NEXT"], [101, 184, 1, "enum_CFG_NEXT"], [116, 101, 1, "enum_CFG_NEXT"], [116, 121, 1, "enum_CFG_NEXT"], [121, 142, 1, "enum_CFG_NEXT"], [142, 101, 1, "enum_CFG_NEXT"], [142, 150, 1, "enum_CFG_NEXT"], [150, 168, 1, "enum_CFG_NEXT"], [168, 101, 1, "enum_CFG_NEXT"], [168, 173, 1, "enum_CFG_NEXT"], [173, 101, 1, "enum_CFG_NEXT"], [184, 203, 1, "enum_CFG_NEXT"], [184, 189, 1, "enum_CFG_NEXT"], [189, 203, 1, "enum_CFG_NEXT"], [206, 219, 1, "enum_CFG_NEXT"], [219, 236, 1, "enum_CFG_NEXT"], [236, 298, 1, "enum_CFG_NEXT"], [236, 241, 1, "enum_CFG_NEXT"], [241, 281, 1, "enum_CFG_NEXT"], [241, 244, 1, "enum_CFG_NEXT"], [244, 260, 1, "enum_CFG_NEXT"], [260, 318, 1, "enum_CFG_NEXT"], [281, 285, 1, "enum_CFG_NEXT"], [285, 318, 1, "enum_CFG_NEXT"], [298, 311, 1, "enum_CFG_NEXT"], [311, 318, 1, "enum_CFG_NEXT"], [25, 2, 3, "enum_LAST_WRITE"], [32, 23, 3, "enum_LAST_WRITE"], [38, 15, 3, "enum_LAST_WRITE"], [43, 25, 2, "enum_LAST_READ"], [43, 2, 3, "enum_LAST_WRITE"], [52, 43, 2, "enum_LAST_READ"], [52, 2, 3, "enum_LAST_WRITE"], [71, 62, 3, "enum_LAST_WRITE"], [73, 60, 3, "enum_LAST_WRITE"], [80, 73, 2, "enum_LAST_READ"], [80, 60, 3, "enum_LAST_WRITE"], [82, 71, 2, "enum_LAST_READ"], [82, 62, 3, "enum_LAST_WRITE"], [105, 73, 2, "enum_LAST_READ"], [105, 60, 3, "enum_LAST_WRITE"], [100, 117, 2, "enum_LAST_READ"], [100, 128, 2, "enum_LAST_READ"], [100, 100, 3, "enum_LAST_WRITE"], [102, 176, 2, "enum_LAST_READ"], [102, 102, 3, "enum_LAST_WRITE"], [117, 117, 2, "enum_LAST_READ"], [117, 128, 2, "enum_LAST_READ"], [117, 100, 3, "enum_LAST_WRITE"], [124, 124, 2, "enum_LAST_READ"], [128, 117, 2, "enum_LAST_READ"], [128, 100, 3, "enum_LAST_WRITE"], [137, 71, 2, "enum_LAST_READ"], [137, 137, 2, "enum_LAST_READ"], [137, 62, 3, "enum_LAST_WRITE"], [122, 143, 2, "enum_LAST_READ"], [122, 153, 2, "enum_LAST_READ"], [122, 122, 3, "enum_LAST_WRITE"], [143, 143, 2, "enum_LAST_READ"], [143, 153, 2, "enum_LAST_READ"], [143, 122, 3, "enum_LAST_WRITE"], [153, 143, 2, "enum_LAST_READ"], [153, 122, 3, "enum_LAST_WRITE"], [151, 167, 2, "enum_LAST_READ"], [151, 151, 3, "enum_LAST_WRITE"], [167, 167, 2, "enum_LAST_READ"], [167, 151, 3, "enum_LAST_WRITE"], [169, 169, 2, "enum_LAST_READ"], [169, 94, 3, "enum_LAST_WRITE"], [176, 176, 2, "enum_LAST_READ"], [176, 102, 3, "enum_LAST_WRITE"], [174, 174, 3, "enum_LAST_WRITE"], [174, 90, 3, "enum_LAST_WRITE"], [183, 174, 3, "enum_LAST_WRITE"], [183, 90, 3, "enum_LAST_WRITE"], [192, 105, 2, "enum_LAST_READ"], [192, 60, 3, "enum_LAST_WRITE"], [198, 64, 3, "enum_LAST_WRITE"], [190, 183, 2, "enum_LAST_READ"], [190, 174, 3, "enum_LAST_WRITE"], [190, 90, 3, "enum_LAST_WRITE"], [204, 183, 2, "enum_LAST_READ"], [204, 174, 3, "enum_LAST_WRITE"], [204, 190, 3, "enum_LAST_WRITE"], [204, 90, 3, "enum_LAST_WRITE"], [204, 78, 3, "enum_LAST_WRITE"], [209, 65, 3, "enum_LAST_WRITE"], [211, 43, 2, "enum_LAST_READ"], [211, 52, 2, "enum_LAST_READ"], [211, 2, 3, "enum_LAST_WRITE"], [215, 4, 3, "enum_LAST_WRITE"], [222, 209, 2, "enum_LAST_READ"], [222, 65, 3, "enum_LAST_WRITE"], [224, 211, 2, "enum_LAST_READ"], [224, 2, 3, "enum_LAST_WRITE"], [228, 215, 2, "enum_LAST_READ"], [228, 4, 3, "enum_LAST_WRITE"], [236, 220, 3, "enum_LAST_WRITE"], [241, 207, 3, "enum_LAST_WRITE"], [250, 248, 2, "enum_LAST_READ"], [252, 241, 2, "enum_LAST_READ"], [252, 207, 3, "enum_LAST_WRITE"], [255, 248, 2, "enum_LAST_READ"], [255, 250, 3, "enum_LAST_WRITE"], [257, 236, 2, "enum_LAST_READ"], [257, 220, 3, "enum_LAST_WRITE"], [264, 255, 2, "enum_LAST_READ"], [264, 250, 3, "enum_LAST_WRITE"], [266, 264, 2, "enum_LAST_READ"], [266, 250, 3, "enum_LAST_WRITE"], [268, 257, 2, "enum_LAST_READ"], [268, 220, 3, "enum_LAST_WRITE"], [271, 264, 2, "enum_LAST_READ"], [271, 266, 3, "enum_LAST_WRITE"], [273, 252, 2, "enum_LAST_READ"], [273, 207, 3, "enum_LAST_WRITE"], [290, 236, 2, "enum_LAST_READ"], [290, 220, 3, "enum_LAST_WRITE"], [307, 207, 3, "enum_LAST_WRITE"], [304, 307, 2, "enum_LAST_READ"], [304, 207, 3, "enum_LAST_WRITE"], [320, 299, 3, "enum_LAST_WRITE"], [320, 282, 3, "enum_LAST_WRITE"], [320, 245, 3, "enum_LAST_WRITE"], [322, 261, 3, "enum_LAST_WRITE"], [322, 312, 3, "enum_LAST_WRITE"], [322, 286, 3, "enum_LAST_WRITE"], [23, 25, 4, "enum_COMPUTED_FROM"], [207, 209, 4, "enum_COMPUTED_FROM"], [207, 215, 4, "enum_COMPUTED_FROM"], [207, 211, 4, "enum_COMPUTED_FROM"], [220, 222, 4, "enum_COMPUTED_FROM"], [220, 228, 4, "enum_COMPUTED_FROM"], [220, 224, 4, "enum_COMPUTED_FROM"], [220, 230, 4, "enum_COMPUTED_FROM"], [299, 307, 4, "enum_COMPUTED_FROM"], [299, 302, 4, "enum_COMPUTED_FROM"], [299, 304, 4, "enum_COMPUTED_FROM"], [78, 80, 4, "enum_COMPUTED_FROM"], [78, 82, 4, "enum_COMPUTED_FROM"], [245, 248, 4, "enum_COMPUTED_FROM"], [245, 250, 4, "enum_COMPUTED_FROM"], [245, 252, 4, "enum_COMPUTED_FROM"], [245, 255, 4, "enum_COMPUTED_FROM"], [245, 257, 4, "enum_COMPUTED_FROM"], [261, 264, 4, "enum_COMPUTED_FROM"], [261, 266, 4, "enum_COMPUTED_FROM"], [261, 268, 4, "enum_COMPUTED_FROM"], [261, 271, 4, "enum_COMPUTED_FROM"], [261, 273, 4, "enum_COMPUTED_FROM"], [286, 288, 4, "enum_COMPUTED_FROM"], [286, 290, 4, "enum_COMPUTED_FROM"], [190, 196, 4, "enum_COMPUTED_FROM"], [190, 198, 4, "enum_COMPUTED_FROM"], [190, 192, 4, "enum_COMPUTED_FROM"], [122, 137, 4, "enum_COMPUTED_FROM"], [122, 124, 4, "enum_COMPUTED_FROM"], [122, 128, 4, "enum_COMPUTED_FROM"], [151, 153, 4, "enum_COMPUTED_FROM"], [174, 176, 4, "enum_COMPUTED_FROM"], [214, 65, 11, "enum_CALLS"], [203, 214, 5, "enum_RETURNS_TO"], [212, 60, 6, "enum_FORMAL_ARG_NAME"], [215, 62, 6, "enum_FORMAL_ARG_NAME"], [217, 64, 6, "enum_FORMAL_ARG_NAME"], [227, 65, 11, "enum_CALLS"], [203, 227, 5, "enum_RETURNS_TO"], [225, 60, 6, "enum_FORMAL_ARG_NAME"], [228, 62, 6, "enum_FORMAL_ARG_NAME"], [231, 64, 6, "enum_FORMAL_ARG_NAME"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "sahana", "repo": "eden", "path": "modules/s3/s3xml.py", "id": 46730, "has_bug": false, "code_full": "import re\nfrom typing import Any, Dict, List, Optional, Set, Tuple\n\n\nclass Class:\n    tree: Any\n    select: Dict\n    skip: Dict\n\n    def __inspect(self):\n        pass\n\n    def get_fields(self, tablename: str) -> Tuple[Optional[List[str]], Optional[List[str]]]:\n        \"\"\"\n            Get the fields to include/exclude for the specified table.\n\n            Args:\n                tablename: the tablename\n\n            Returns:\n                tuple of lists (include, exclude) of fields to\n                include or exclude. None indicates \"all fields\",\n                whereas an empty list indicates \"no fields\".\n        \"\"\"\n\n        ANY: str = \"ANY\"\n        default: Tuple = (None, None)\n\n        tree = self.tree\n        if not tree:\n            return default\n\n        if self.select is None:\n            self.__inspect()\n\n        def find_match(items: Dict[str, Any], tablename: str, default: Optional[Set]) -> Optional[Any]:\n\n            if tablename in items:\n                match: Any = items[tablename]\n            else:\n                match: Any = False\n                maxlen: int = -1\n                for tn, fields in items.items():\n                    if \"*\" in tn:\n                        l: int = len(tn) - tn.count(\"*\")\n                        if l > maxlen and re.match(tn.replace(\"*\", \".*\"), tablename):\n                            match = fields\n                            maxlen = l\n                if match is False:\n                    match = items.get(ANY, default)\n            return match\n\n        select: Any = find_match(self.select, tablename, None)\n        skip: Any = find_match(self.skip, tablename, set())\n\n        if skip:\n            if select:\n                include: Optional[List] = [fn for fn in select if fn not in skip]\n                exclude: List = [fn for fn in skip if fn not in select]\n            else:\n                include: Optional[List] = None\n                exclude: List = list(skip)\n        else:\n            include: Optional[List] = list(select) if select else None\n            exclude: List = []\n\n        return (include, exclude)\n", "code": "def get_fields(self, tablename: str) -> Tuple[Optional[List[str]], Optional[List[str]]]:\n    \"\"\"\n        Get the fields to include/exclude for the specified table.\n\n        Args:\n            tablename: the tablename\n\n        Returns:\n            tuple of lists (include, exclude) of fields to\n            include or exclude. None indicates \"all fields\",\n            whereas an empty list indicates \"no fields\".\n    \"\"\"\n\n    ANY: str = \"ANY\"\n    default: Tuple = (None, None)\n\n    tree = self.tree\n    if not tree:\n        return default\n\n    if self.select is None:\n        self.__inspect()\n\n    def find_match(items: Dict[str, Any], tablename: str, default: Optional[Set]) -> Optional[Any]:\n\n        if tablename in items:\n            match: Any = items[tablename]\n        else:\n            match: Any = False\n            maxlen: int = -1\n            for tn, fields in items.items():\n                if \"*\" in tn:\n                    l: int = len(tn) - tn.count(\"*\")\n                    if l > maxlen and re.match(tn.replace(\"*\", \".*\"), tablename):\n                        match = fields\n                        maxlen = l\n            if match is False:\n                match = items.get(ANY, default)\n        return match\n\n    select: Any = find_match(self.select, tablename, None)\n    skip: Any = find_match(self.skip, tablename, set())\n\n    if skip:\n        if select:\n            include: Optional[List] = [fn for fn in select if fn not in skip]\n            exclude: List = [fn for fn in skip if fn not in select]\n        else:\n            include: Optional[List] = None\n            exclude: List = list(skip)\n    else:\n        include: Optional[List] = list(select) if select else None\n        exclude: List = []\n\n    return (include, exclude)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "cbbab1573649e024b3f1642185275d5d4626c5bf"}
{"source_tokens": ["#NEWLINE#", "def store(", "name", ")", ":", "#NEWLINE#", "#INDENT#", "k", "=", "Key", "(", "bucket", ",", "(", "prefix", "+", "name", ")", ")", "#NEWLINE#", "k", ".", "set_contents_from_string", "(", "'somedata'", ")"], "edges": [[6, 12, 7, "enum_FIELD"], [19, 23, 7, "enum_FIELD"], [12, 9, 7, "enum_FIELD"], [23, 21, 7, "enum_FIELD"], [15, 14, 7, "enum_FIELD"], [15, 16, 7, "enum_FIELD"], [21, 20, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [16, 2, 10, "enum_LAST_LEXICAL_USE"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [20, 7, 10, "enum_LAST_LEXICAL_USE"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [6, 19, 1, "enum_CFG_NEXT"], [16, 2, 3, "enum_LAST_WRITE"], [20, 7, 3, "enum_LAST_WRITE"], [7, 9, 4, "enum_COMPUTED_FROM"], [7, 11, 4, "enum_COMPUTED_FROM"], [7, 14, 4, "enum_COMPUTED_FROM"], [7, 16, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "spulec", "repo": "moto", "path": "tests/test_s3bucket_path/test_s3bucket_path.py", "id": 52994, "has_bug": false, "code_full": "from typing import Any\n\n\nclass Key:\n    bucket: Any\n    data: str\n\n    def __init__(self, bucket: Any, data: str):\n        self.bucket = bucket\n        self.data = data\n\n    def set_contents_from_string(self, data: str):\n        pass\n\n\nbucket: Any = None\ndata: str = \"\"\nprefix: str = \"\"\n\n\ndef store(name: str):\n    k = Key(bucket, prefix + name)\n    k.set_contents_from_string(\"somedata\")\n", "code": "def store(name: str):\n    k = Key(bucket, prefix + name)\n    k.set_contents_from_string(\"somedata\")\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "96e5b1993d7f2451443bfabff4265029ac6625af"}
{"source_tokens": ["#NEWLINE#", "def draw_message(", "self", ",", "cr", ",", "width", ",", "height", ",", "message", ")", ":", "#NEWLINE#", "#INDENT#", "(", "r", ",", "g", ",", "b", ")", "=", "self", ".", "img_fg", "#NEWLINE#", "cr", ".", "set_source_rgb", "(", "r", ",", "g", ",", "b", ")", "#NEWLINE#", "cr", ".", "select_font_face", "(", "self", ".", "t_", "[", "'onscreen_ff'", "]", ")", "#NEWLINE#", "cr", ".", "set_font_size", "(", "24.0", ")", "#NEWLINE#", "(", "a", ",", "b", ",", "wd", ",", "ht", ",", "i", ",", "j", ")", "=", "cr", ".", "text_extents", "(", "message", ")", "#NEWLINE#", "y", "=", "(", "(", "(", "height", "//", "3", ")", "*", "2", ")", "-", "(", "ht", "//", "2", ")", ")", "#NEWLINE#", "x", "=", "(", "(", "width", "//", "2", ")", "-", "(", "wd", "//", "2", ")", ")", "#NEWLINE#", "cr", ".", "move_to", "(", "x", ",", "y", ")", "#NEWLINE#", "cr", ".", "show_text", "(", "message", ")"], "edges": [[1, 5, 7, "enum_FIELD"], [14, 24, 7, "enum_FIELD"], [26, 32, 7, "enum_FIELD"], [37, 41, 7, "enum_FIELD"], [49, 53, 7, "enum_FIELD"], [56, 74, 7, "enum_FIELD"], [77, 90, 7, "enum_FIELD"], [97, 106, 7, "enum_FIELD"], [113, 119, 7, "enum_FIELD"], [122, 126, 7, "enum_FIELD"], [24, 23, 7, "enum_FIELD"], [32, 28, 7, "enum_FIELD"], [41, 39, 7, "enum_FIELD"], [53, 51, 7, "enum_FIELD"], [74, 72, 7, "enum_FIELD"], [90, 87, 7, "enum_FIELD"], [90, 93, 7, "enum_FIELD"], [106, 103, 7, "enum_FIELD"], [106, 109, 7, "enum_FIELD"], [119, 115, 7, "enum_FIELD"], [126, 124, 7, "enum_FIELD"], [28, 27, 7, "enum_FIELD"], [39, 38, 7, "enum_FIELD"], [45, 43, 7, "enum_FIELD"], [45, 46, 7, "enum_FIELD"], [51, 50, 7, "enum_FIELD"], [72, 71, 7, "enum_FIELD"], [87, 84, 7, "enum_FIELD"], [87, 88, 7, "enum_FIELD"], [93, 92, 7, "enum_FIELD"], [93, 94, 7, "enum_FIELD"], [103, 102, 7, "enum_FIELD"], [103, 104, 7, "enum_FIELD"], [109, 108, 7, "enum_FIELD"], [109, 110, 7, "enum_FIELD"], [115, 114, 7, "enum_FIELD"], [124, 123, 7, "enum_FIELD"], [43, 42, 7, "enum_FIELD"], [84, 83, 7, "enum_FIELD"], [84, 85, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [23, 2, 10, "enum_LAST_LEXICAL_USE"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [27, 4, 10, "enum_LAST_LEXICAL_USE"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [31, 16, 10, "enum_LAST_LEXICAL_USE"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [33, 18, 10, "enum_LAST_LEXICAL_USE"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [35, 20, 10, "enum_LAST_LEXICAL_USE"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [38, 27, 10, "enum_LAST_LEXICAL_USE"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [42, 23, 10, "enum_LAST_LEXICAL_USE"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [50, 38, 10, "enum_LAST_LEXICAL_USE"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [60, 35, 10, "enum_LAST_LEXICAL_USE"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [71, 50, 10, "enum_LAST_LEXICAL_USE"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [75, 10, 10, "enum_LAST_LEXICAL_USE"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [83, 8, 10, "enum_LAST_LEXICAL_USE"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [92, 64, 10, "enum_LAST_LEXICAL_USE"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [102, 6, 10, "enum_LAST_LEXICAL_USE"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [108, 62, 10, "enum_LAST_LEXICAL_USE"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [114, 71, 10, "enum_LAST_LEXICAL_USE"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [118, 98, 10, "enum_LAST_LEXICAL_USE"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [120, 78, 10, "enum_LAST_LEXICAL_USE"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [123, 114, 10, "enum_LAST_LEXICAL_USE"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [127, 75, 10, "enum_LAST_LEXICAL_USE"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [5, 14, 1, "enum_CFG_NEXT"], [14, 26, 1, "enum_CFG_NEXT"], [26, 37, 1, "enum_CFG_NEXT"], [37, 49, 1, "enum_CFG_NEXT"], [49, 56, 1, "enum_CFG_NEXT"], [56, 77, 1, "enum_CFG_NEXT"], [77, 97, 1, "enum_CFG_NEXT"], [97, 113, 1, "enum_CFG_NEXT"], [113, 122, 1, "enum_CFG_NEXT"], [23, 2, 3, "enum_LAST_WRITE"], [27, 4, 3, "enum_LAST_WRITE"], [31, 16, 3, "enum_LAST_WRITE"], [33, 18, 3, "enum_LAST_WRITE"], [35, 20, 3, "enum_LAST_WRITE"], [38, 27, 2, "enum_LAST_READ"], [38, 4, 3, "enum_LAST_WRITE"], [42, 23, 2, "enum_LAST_READ"], [42, 2, 3, "enum_LAST_WRITE"], [50, 38, 2, "enum_LAST_READ"], [50, 4, 3, "enum_LAST_WRITE"], [71, 50, 2, "enum_LAST_READ"], [71, 4, 3, "enum_LAST_WRITE"], [75, 10, 3, "enum_LAST_WRITE"], [60, 35, 2, "enum_LAST_READ"], [60, 20, 3, "enum_LAST_WRITE"], [83, 8, 3, "enum_LAST_WRITE"], [92, 64, 3, "enum_LAST_WRITE"], [102, 6, 3, "enum_LAST_WRITE"], [108, 62, 3, "enum_LAST_WRITE"], [114, 71, 2, "enum_LAST_READ"], [114, 4, 3, "enum_LAST_WRITE"], [118, 98, 3, "enum_LAST_WRITE"], [120, 78, 3, "enum_LAST_WRITE"], [123, 114, 2, "enum_LAST_READ"], [123, 4, 3, "enum_LAST_WRITE"], [127, 75, 2, "enum_LAST_READ"], [127, 10, 3, "enum_LAST_WRITE"], [17, 23, 4, "enum_COMPUTED_FROM"], [63, 75, 4, "enum_COMPUTED_FROM"], [63, 71, 4, "enum_COMPUTED_FROM"], [78, 92, 4, "enum_COMPUTED_FROM"], [78, 83, 4, "enum_COMPUTED_FROM"], [98, 102, 4, "enum_COMPUTED_FROM"], [98, 108, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "ejeschke", "repo": "ginga", "path": "ginga/cairow/ImageViewCairo.py", "id": 13564, "has_bug": false, "code_full": "from typing import Tuple\n\nimport cairo\n\n\nclass Drawer:\n    img_fg: Tuple[float, float, float]\n    t_: dict\n\n    def draw_message(self, cr: cairo.Context, width: int, height: int, message: str):\n        r, g, b = self.img_fg\n        #cr.set_source_rgb(1.0, 1.0, 1.0)\n        cr.set_source_rgb(r, g, b)\n        cr.select_font_face(self.t_['onscreen_ff'])\n        cr.set_font_size(24.0)\n        a, b, wd, ht, i, j = cr.text_extents(message)\n        y: int = ((height // 3) * 2) - (ht // 2)\n        x: int = (width // 2) - (wd // 2)\n        cr.move_to(x, y)\n        cr.show_text(message)\n", "code": "def draw_message(self, cr: cairo.Context, width: int, height: int, message: str):\n    r, g, b = self.img_fg\n    #cr.set_source_rgb(1.0, 1.0, 1.0)\n    cr.set_source_rgb(r, g, b)\n    cr.select_font_face(self.t_['onscreen_ff'])\n    cr.set_font_size(24.0)\n    a, b, wd, ht, i, j = cr.text_extents(message)\n    y: int = ((height // 3) * 2) - (ht // 2)\n    x: int = (width // 2) - (wd // 2)\n    cr.move_to(x, y)\n    cr.show_text(message)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "7a26a366ec3c9a79a767dcf64ebbe1c6dbc05383"}
{"source_tokens": ["#NEWLINE#", "def test_assemble_xml_file(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'Test writing a table'", "#NEWLINE#", "self", ".", "maxDiff", "=", "None", "#NEWLINE#", "worksheet", "=", "Worksheet", "(", ")", "#NEWLINE#", "worksheet", ".", "worksheet_meta", "=", "WorksheetMeta", "(", ")", "#NEWLINE#", "worksheet", ".", "str_table", "=", "SharedStringTable", "(", ")", "#NEWLINE#", "worksheet", ".", "add_table", "(", "'C4:F13'", ",", "{", "'header_row'", ":", "False", "}", ")", "#NEWLINE#", "worksheet", ".", "_prepare_tables", "(", "1", ",", "{", "}", ")", "#NEWLINE#", "fh", "=", "StringIO", "(", ")", "#NEWLINE#", "table", "=", "Table", "(", ")", "#NEWLINE#", "table", ".", "_set_filehandle", "(", "fh", ")", "#NEWLINE#", "table", ".", "_set_properties", "(", "worksheet", ".", "tables", "[", "0", "]", ")", "#NEWLINE#", "table", ".", "_assemble_xml_file", "(", ")", "#NEWLINE#", "exp", "=", "_xml_to_list", "(", "'\\n            <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\\n            <table xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" id=\"1\" name=\"Table1\" displayName=\"Table1\" ref=\"C4:F13\" headerRowCount=\"0\" totalsRowShown=\"0\">\\n              <tableColumns count=\"4\">\\n                <tableColumn id=\"1\" name=\"Column1\"/>\\n                <tableColumn id=\"2\" name=\"Column2\"/>\\n                <tableColumn id=\"3\" name=\"Column3\"/>\\n                <tableColumn id=\"4\" name=\"Column4\"/>\\n              </tableColumns>\\n              <tableStyleInfo name=\"TableStyleMedium9\" showFirstColumn=\"0\" showLastColumn=\"0\" showRowStripes=\"1\" showColumnStripes=\"0\"/>\\n            </table>\\n            '", ")", "#NEWLINE#", "got", "=", "_xml_to_list", "(", "fh", ".", "getvalue", "(", ")", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "got", ",", "exp", ")"], "edges": [[6, 7, 7, "enum_FIELD"], [8, 13, 7, "enum_FIELD"], [14, 18, 7, "enum_FIELD"], [20, 26, 7, "enum_FIELD"], [28, 34, 7, "enum_FIELD"], [36, 42, 7, "enum_FIELD"], [49, 55, 7, "enum_FIELD"], [59, 63, 7, "enum_FIELD"], [65, 69, 7, "enum_FIELD"], [71, 75, 7, "enum_FIELD"], [78, 82, 7, "enum_FIELD"], [90, 94, 7, "enum_FIELD"], [96, 100, 7, "enum_FIELD"], [103, 107, 7, "enum_FIELD"], [114, 120, 7, "enum_FIELD"], [10, 9, 7, "enum_FIELD"], [18, 17, 7, "enum_FIELD"], [22, 21, 7, "enum_FIELD"], [26, 25, 7, "enum_FIELD"], [30, 29, 7, "enum_FIELD"], [34, 33, 7, "enum_FIELD"], [42, 38, 7, "enum_FIELD"], [55, 51, 7, "enum_FIELD"], [63, 62, 7, "enum_FIELD"], [69, 68, 7, "enum_FIELD"], [75, 73, 7, "enum_FIELD"], [82, 80, 7, "enum_FIELD"], [94, 92, 7, "enum_FIELD"], [100, 99, 7, "enum_FIELD"], [107, 106, 7, "enum_FIELD"], [120, 116, 7, "enum_FIELD"], [38, 37, 7, "enum_FIELD"], [51, 50, 7, "enum_FIELD"], [73, 72, 7, "enum_FIELD"], [80, 79, 7, "enum_FIELD"], [86, 84, 7, "enum_FIELD"], [86, 87, 7, "enum_FIELD"], [92, 91, 7, "enum_FIELD"], [111, 109, 7, "enum_FIELD"], [116, 115, 7, "enum_FIELD"], [84, 83, 7, "enum_FIELD"], [109, 108, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [9, 2, 10, "enum_LAST_LEXICAL_USE"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [21, 15, 10, "enum_LAST_LEXICAL_USE"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [29, 21, 10, "enum_LAST_LEXICAL_USE"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [37, 29, 10, "enum_LAST_LEXICAL_USE"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [50, 37, 10, "enum_LAST_LEXICAL_USE"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [72, 66, 10, "enum_LAST_LEXICAL_USE"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [76, 60, 10, "enum_LAST_LEXICAL_USE"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [79, 72, 10, "enum_LAST_LEXICAL_USE"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [83, 50, 10, "enum_LAST_LEXICAL_USE"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [91, 79, 10, "enum_LAST_LEXICAL_USE"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [106, 99, 10, "enum_LAST_LEXICAL_USE"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [108, 76, 10, "enum_LAST_LEXICAL_USE"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [115, 9, 10, "enum_LAST_LEXICAL_USE"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [119, 104, 10, "enum_LAST_LEXICAL_USE"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [121, 97, 10, "enum_LAST_LEXICAL_USE"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [6, 8, 1, "enum_CFG_NEXT"], [8, 14, 1, "enum_CFG_NEXT"], [14, 20, 1, "enum_CFG_NEXT"], [20, 28, 1, "enum_CFG_NEXT"], [28, 36, 1, "enum_CFG_NEXT"], [36, 49, 1, "enum_CFG_NEXT"], [49, 59, 1, "enum_CFG_NEXT"], [59, 65, 1, "enum_CFG_NEXT"], [65, 71, 1, "enum_CFG_NEXT"], [71, 78, 1, "enum_CFG_NEXT"], [78, 90, 1, "enum_CFG_NEXT"], [90, 96, 1, "enum_CFG_NEXT"], [96, 103, 1, "enum_CFG_NEXT"], [103, 114, 1, "enum_CFG_NEXT"], [9, 2, 3, "enum_LAST_WRITE"], [21, 15, 3, "enum_LAST_WRITE"], [29, 21, 2, "enum_LAST_READ"], [29, 15, 3, "enum_LAST_WRITE"], [37, 29, 2, "enum_LAST_READ"], [37, 15, 3, "enum_LAST_WRITE"], [50, 37, 2, "enum_LAST_READ"], [50, 15, 3, "enum_LAST_WRITE"], [72, 66, 3, "enum_LAST_WRITE"], [76, 60, 3, "enum_LAST_WRITE"], [79, 72, 2, "enum_LAST_READ"], [79, 66, 3, "enum_LAST_WRITE"], [83, 50, 2, "enum_LAST_READ"], [83, 15, 3, "enum_LAST_WRITE"], [91, 79, 2, "enum_LAST_READ"], [91, 66, 3, "enum_LAST_WRITE"], [106, 99, 2, "enum_LAST_READ"], [108, 76, 2, "enum_LAST_READ"], [108, 60, 3, "enum_LAST_WRITE"], [115, 9, 2, "enum_LAST_READ"], [115, 2, 3, "enum_LAST_WRITE"], [119, 104, 3, "enum_LAST_WRITE"], [121, 97, 3, "enum_LAST_WRITE"], [15, 17, 4, "enum_COMPUTED_FROM"], [22, 25, 4, "enum_COMPUTED_FROM"], [30, 33, 4, "enum_COMPUTED_FROM"], [60, 62, 4, "enum_COMPUTED_FROM"], [66, 68, 4, "enum_COMPUTED_FROM"], [97, 99, 4, "enum_COMPUTED_FROM"], [104, 106, 4, "enum_COMPUTED_FROM"], [104, 108, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "jmcnamara", "repo": "XlsxWriter", "path": "xlsxwriter/test/table/test_table05.py", "id": 22407, "has_bug": false, "code_full": "import unittest\nimport xml.etree.ElementTree as ET\nfrom io import StringIO\nfrom typing import Any, Dict, List\n\n\ndef _xml_to_list(xml_str: str) -> list:\n    return []\n\nclass WorksheetMeta:\n    pass\n\nclass SharedStringTable:\n    pass\n\n\nclass Table:\n    filehandle: StringIO\n    properties: Dict[str, Any]\n\n    def _set_filehandle(self, filehandle: StringIO):\n        pass\n\n    def _set_properties(self, properties: Dict[str, Any]):\n        pass\n       \n    def _assemble_xml_file(self):\n        pass\n\n\nclass Worksheet:\n    worksheet_meta: WorksheetMeta\n    str_table: SharedStringTable\n    tables: List[Dict[str, Any]]\n\n    def add_table(self, ref: str, properties: Dict[str, Any]):\n        pass\n\n    def _prepare_tables(self, table_id: int, table: Dict[str, Any]):\n        pass\n\n\nclass Class(unittest.TestCase):\n    maxDiff: Any\n\n    def test_assemble_xml_file(self):\n        \"\"\"Test writing a table\"\"\"\n        self.maxDiff = None\n\n        worksheet: Worksheet = Worksheet()\n        worksheet.worksheet_meta = WorksheetMeta()\n        worksheet.str_table = SharedStringTable()\n\n        worksheet.add_table(\"C4:F13\", {\"header_row\": False})\n        worksheet._prepare_tables(1, {})\n\n        fh: StringIO = StringIO()\n        table: Table = Table()\n        table._set_filehandle(fh)\n\n        table._set_properties(worksheet.tables[0])\n\n        table._assemble_xml_file()\n\n        exp: List = _xml_to_list(\n            \"\"\"\n                <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n                <table xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" id=\"1\" name=\"Table1\" displayName=\"Table1\" ref=\"C4:F13\" headerRowCount=\"0\" totalsRowShown=\"0\">\n                    <tableColumns count=\"4\">\n                    <tableColumn id=\"1\" name=\"Column1\"/>\n                    <tableColumn id=\"2\" name=\"Column2\"/>\n                    <tableColumn id=\"3\" name=\"Column3\"/>\n                    <tableColumn id=\"4\" name=\"Column4\"/>\n                    </tableColumns>\n                    <tableStyleInfo name=\"TableStyleMedium9\" showFirstColumn=\"0\" showLastColumn=\"0\" showRowStripes=\"1\" showColumnStripes=\"0\"/>\n                </table>\n                \"\"\"\n        )\n\n        got: List = _xml_to_list(fh.getvalue())\n\n        self.assertEqual(got, exp)\n", "code": "def test_assemble_xml_file(self):\n    \"\"\"Test writing a table\"\"\"\n    self.maxDiff = None\n\n    worksheet: Worksheet = Worksheet()\n    worksheet.worksheet_meta = WorksheetMeta()\n    worksheet.str_table = SharedStringTable()\n\n    worksheet.add_table(\"C4:F13\", {\"header_row\": False})\n    worksheet._prepare_tables(1, {})\n\n    fh: StringIO = StringIO()\n    table: Table = Table()\n    table._set_filehandle(fh)\n\n    table._set_properties(worksheet.tables[0])\n\n    table._assemble_xml_file()\n\n    exp: List = _xml_to_list(\n        \"\"\"\n            <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n            <table xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" id=\"1\" name=\"Table1\" displayName=\"Table1\" ref=\"C4:F13\" headerRowCount=\"0\" totalsRowShown=\"0\">\n                <tableColumns count=\"4\">\n                <tableColumn id=\"1\" name=\"Column1\"/>\n                <tableColumn id=\"2\" name=\"Column2\"/>\n                <tableColumn id=\"3\" name=\"Column3\"/>\n                <tableColumn id=\"4\" name=\"Column4\"/>\n                </tableColumns>\n                <tableStyleInfo name=\"TableStyleMedium9\" showFirstColumn=\"0\" showLastColumn=\"0\" showRowStripes=\"1\" showColumnStripes=\"0\"/>\n            </table>\n            \"\"\"\n    )\n\n    got: List = _xml_to_list(fh.getvalue())\n\n    self.assertEqual(got, exp)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "97dd7c91d68cf4fd0f0af9cecd850ccdc6cfd43a"}
{"source_tokens": ["#NEWLINE#", "def _GetFlowName(", "self", ",", "request", ")", ":", "#NEWLINE#", "#INDENT#", "return", "os", ".", "path", ".", "basename", "(", "request", ".", "REQ", ".", "get", "(", "'flow_path'", ",", "''", ")", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [9, 15, 7, "enum_FIELD"], [15, 13, 7, "enum_FIELD"], [13, 11, 7, "enum_FIELD"], [23, 19, 7, "enum_FIELD"], [11, 10, 7, "enum_FIELD"], [19, 17, 7, "enum_FIELD"], [17, 16, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [16, 4, 10, "enum_LAST_LEXICAL_USE"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [3, 9, 1, "enum_CFG_NEXT"], [16, 4, 3, "enum_LAST_WRITE"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "google", "repo": "grr", "path": "grr/gui/plugins/flow_management.py", "id": 19857, "has_bug": false, "code_full": "import os\nfrom typing import Dict\n\n\nclass Request:\n    REQ: Dict = {}\n\n\ndef _GetFlowName(self, request: Request) -> str:\n    return os.path.basename(request.REQ.get(\"flow_path\", \"\"))\n", "code": "def _GetFlowName(self, request: Request) -> str:\n    return os.path.basename(request.REQ.get(\"flow_path\", \"\"))\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "ad774293fabf10262cccdeb7f834d61c1fdf7144"}
{"source_tokens": ["#NEWLINE#", "@", "requires_auth", "#NEWLINE#", "def ping(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'Ping this hook.\\n\\n    :returns: bool\\n    '", "#NEWLINE#", "url", "=", "self", ".", "_build_url", "(", "'pings'", ",", "base_url", "=", "self", ".", "_api", ")", "#NEWLINE#", "return", "self", ".", "_boolean", "(", "self", ".", "_post", "(", "url", ")", ",", "204", ",", "404", ")"], "edges": [[9, 10, 7, "enum_FIELD"], [11, 19, 7, "enum_FIELD"], [27, 38, 7, "enum_FIELD"], [19, 15, 7, "enum_FIELD"], [38, 29, 7, "enum_FIELD"], [15, 14, 7, "enum_FIELD"], [20, 23, 7, "enum_FIELD"], [29, 28, 7, "enum_FIELD"], [35, 33, 7, "enum_FIELD"], [23, 22, 7, "enum_FIELD"], [33, 32, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [14, 5, 10, "enum_LAST_LEXICAL_USE"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [22, 14, 10, "enum_LAST_LEXICAL_USE"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 27, 9, "enum_NEXT_SYNTAX"], [28, 22, 10, "enum_LAST_LEXICAL_USE"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [32, 28, 10, "enum_LAST_LEXICAL_USE"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [36, 12, 10, "enum_LAST_LEXICAL_USE"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [2, 1, 1, "enum_CFG_NEXT"], [9, 11, 1, "enum_CFG_NEXT"], [11, 27, 1, "enum_CFG_NEXT"], [14, 5, 3, "enum_LAST_WRITE"], [22, 14, 2, "enum_LAST_READ"], [22, 5, 3, "enum_LAST_WRITE"], [28, 22, 2, "enum_LAST_READ"], [28, 5, 3, "enum_LAST_WRITE"], [32, 28, 2, "enum_LAST_READ"], [32, 5, 3, "enum_LAST_WRITE"], [36, 12, 3, "enum_LAST_WRITE"], [12, 14, 4, "enum_COMPUTED_FROM"], [12, 22, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "sigmavirus24", "repo": "github3.py", "path": "github3/repos/hook.py", "id": 50450, "has_bug": false, "code_full": "class Class:\n    _api: str\n\n    def _build_url(self, arg1: str, base_url: str) -> str:\n        return \"\"\n\n    def _post(self, url: str) -> str:\n        return \"\"\n\n    def _boolean(self, arg1: str, arg2: int, arg3: int) -> bool:\n        return True\n\n    def ping(self) -> bool:\n        \"\"\"Ping this hook.\n\n        :returns: bool\n        \"\"\"\n        url = self._build_url('pings', base_url=self._api)\n        return self._boolean(self._post(url), 204, 404)\n", "code": "def ping(self) -> bool:\n    \"\"\"Ping this hook.\n\n    :returns: bool\n    \"\"\"\n    url = self._build_url('pings', base_url=self._api)\n    return self._boolean(self._post(url), 204, 404)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "7af6a9909a1bbedd73194c3f64a90b36680d41b5"}
{"source_tokens": ["#NEWLINE#", "def neg_in_paren(", "x", ",", "i", ",", "j", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "i", "%", "2", ")", ":", "#NEWLINE#", "#INDENT#", "return", "(", "(", "'(%s)'", "if", "(", "x", "<", "0", ")", "else", "'%s'", ")", "%", "x", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "pass"], "edges": [[1, 3, 7, "enum_FIELD"], [17, 14, 7, "enum_FIELD"], [14, 13, 7, "enum_FIELD"], [14, 15, 7, "enum_FIELD"], [20, 33, 7, "enum_FIELD"], [33, 24, 7, "enum_FIELD"], [33, 34, 7, "enum_FIELD"], [24, 27, 7, "enum_FIELD"], [24, 23, 7, "enum_FIELD"], [24, 31, 7, "enum_FIELD"], [27, 26, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [13, 4, 10, "enum_LAST_LEXICAL_USE"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [26, 2, 10, "enum_LAST_LEXICAL_USE"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [34, 26, 10, "enum_LAST_LEXICAL_USE"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 42, 9, "enum_NEXT_SYNTAX"], [3, 14, 1, "enum_CFG_NEXT"], [14, 20, 1, "enum_CFG_NEXT"], [13, 4, 3, "enum_LAST_WRITE"], [26, 2, 3, "enum_LAST_WRITE"], [34, 26, 2, "enum_LAST_READ"], [34, 2, 3, "enum_LAST_WRITE"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "sympy", "repo": "sympy", "path": "sympy/printing/tests/test_tableform.py", "id": 56142, "has_bug": false, "code_full": "from typing import Any, Optional\n\n\ndef neg_in_paren(x: int,i: int,j: Any) -> Optional[str]:\n    if (i%2):\n        return (('(%s)' if (x<0) else '%s')%x)\n    else:\n        pass\n", "code": "def neg_in_paren(x: int,i: int,j: Any) -> Optional[str]:\n    if (i%2):\n        return (('(%s)' if (x<0) else '%s')%x)\n    else:\n        pass\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "7035752a165aa37e8a07e5e71da49801fd3c21ed"}
{"source_tokens": ["#NEWLINE#", "def get_content_caching(", "self", ",", "loadbalancer", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Returns the content caching setting for the given load balancer.\\n    '", "#NEWLINE#", "uri", "=", "(", "'/loadbalancers/%s/contentcaching'", "%", "utils", ".", "get_id", "(", "loadbalancer", ")", ")", "#NEWLINE#", "(", "resp", ",", "body", ")", "=", "self", ".", "api", ".", "method_get", "(", "uri", ")", "#NEWLINE#", "ret", "=", "body", ".", "get", "(", "'contentCaching'", ",", "{", "}", ")", ".", "get", "(", "'enabled'", ",", "False", ")", "#NEWLINE#", "return", "ret"], "edges": [[1, 3, 7, "enum_FIELD"], [8, 9, 7, "enum_FIELD"], [10, 15, 7, "enum_FIELD"], [23, 35, 7, "enum_FIELD"], [38, 54, 7, "enum_FIELD"], [58, 59, 7, "enum_FIELD"], [15, 14, 7, "enum_FIELD"], [15, 19, 7, "enum_FIELD"], [35, 33, 7, "enum_FIELD"], [54, 50, 7, "enum_FIELD"], [19, 17, 7, "enum_FIELD"], [33, 31, 7, "enum_FIELD"], [50, 46, 7, "enum_FIELD"], [17, 16, 7, "enum_FIELD"], [31, 30, 7, "enum_FIELD"], [46, 42, 7, "enum_FIELD"], [42, 41, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [20, 4, 10, "enum_LAST_LEXICAL_USE"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [30, 2, 10, "enum_LAST_LEXICAL_USE"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [36, 11, 10, "enum_LAST_LEXICAL_USE"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [41, 27, 10, "enum_LAST_LEXICAL_USE"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 58, 9, "enum_NEXT_SYNTAX"], [59, 39, 10, "enum_LAST_LEXICAL_USE"], [58, 59, 9, "enum_NEXT_SYNTAX"], [3, 8, 1, "enum_CFG_NEXT"], [8, 10, 1, "enum_CFG_NEXT"], [10, 23, 1, "enum_CFG_NEXT"], [23, 38, 1, "enum_CFG_NEXT"], [38, 58, 1, "enum_CFG_NEXT"], [20, 4, 3, "enum_LAST_WRITE"], [30, 2, 3, "enum_LAST_WRITE"], [36, 11, 3, "enum_LAST_WRITE"], [41, 27, 3, "enum_LAST_WRITE"], [59, 39, 3, "enum_LAST_WRITE"], [11, 20, 4, "enum_COMPUTED_FROM"], [11, 16, 4, "enum_COMPUTED_FROM"], [26, 36, 4, "enum_COMPUTED_FROM"], [26, 30, 4, "enum_COMPUTED_FROM"], [39, 41, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "rackspace", "repo": "pyrax", "path": "pyrax/cloudloadbalancers.py", "id": 43241, "has_bug": false, "code_full": "from typing import Any, Dict, Tuple\n\n\nclass utils:\n    @staticmethod\n    def get_id(loadbalancer: Any) -> str:\n        return \"\"\n\n\nclass API:\n    def method_get(self, uri: str) -> Tuple[Any, Dict[str, Any]]:\n        return {}, {}\n\n\nclass LoadBalancer:\n    id: str\n\n\nclass Class:\n    api: API\n\n    def get_content_caching(self, loadbalancer: Any) -> bool:\n        \"\"\"\n        Returns the content caching setting for the given load balancer.\n        \"\"\"\n        uri: str = \"/loadbalancers/%s/contentcaching\" % utils.get_id(loadbalancer)\n        resp, body = self.api.method_get(uri)\n        ret: bool = body.get(\"contentCaching\", {}).get(\"enabled\", False)\n        return ret\n\n", "code": "def get_content_caching(self, loadbalancer: Any) -> bool:\n    \"\"\"\n    Returns the content caching setting for the given load balancer.\n    \"\"\"\n    uri: str = \"/loadbalancers/%s/contentcaching\" % utils.get_id(loadbalancer)\n    resp, body = self.api.method_get(uri)\n    ret: bool = body.get(\"contentCaching\", {}).get(\"enabled\", False)\n    return ret\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "9b57abd9584ade44f254b6c527962e08d0b1f003"}
{"source_tokens": ["#NEWLINE#", "def constant(", "numchips", ")", ":", "#NEWLINE#", "#INDENT#", "step", "=", "(", "255.0", "/", "(", "numchips", "-", "1", ")", ")", "#NEWLINE#", "start", "=", "0.0", "#NEWLINE#", "seq", "=", "[", "]", "#NEWLINE#", "while", "(", "numchips", ">", "0", ")", ":", "#NEWLINE#", "#INDENT#", "seq", ".", "append", "(", "int", "(", "start", ")", ")", "#NEWLINE#", "start", "=", "(", "start", "+", "step", ")", "#NEWLINE#", "numchips", "=", "(", "numchips", "-", "1", ")", "#NEWLINE#", "#UNINDENT#", "return", "seq"], "edges": [[6, 11, 7, "enum_FIELD"], [18, 21, 7, "enum_FIELD"], [22, 25, 7, "enum_FIELD"], [28, 31, 7, "enum_FIELD"], [64, 65, 7, "enum_FIELD"], [11, 10, 7, "enum_FIELD"], [11, 14, 7, "enum_FIELD"], [31, 30, 7, "enum_FIELD"], [36, 40, 7, "enum_FIELD"], [46, 51, 7, "enum_FIELD"], [54, 59, 7, "enum_FIELD"], [14, 13, 7, "enum_FIELD"], [14, 15, 7, "enum_FIELD"], [40, 38, 7, "enum_FIELD"], [51, 50, 7, "enum_FIELD"], [51, 52, 7, "enum_FIELD"], [59, 58, 7, "enum_FIELD"], [59, 60, 7, "enum_FIELD"], [38, 37, 7, "enum_FIELD"], [42, 41, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [13, 2, 10, "enum_LAST_LEXICAL_USE"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [30, 13, 10, "enum_LAST_LEXICAL_USE"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 36, 9, "enum_NEXT_SYNTAX"], [37, 23, 10, "enum_LAST_LEXICAL_USE"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [43, 19, 10, "enum_LAST_LEXICAL_USE"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [47, 43, 10, "enum_LAST_LEXICAL_USE"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [50, 47, 10, "enum_LAST_LEXICAL_USE"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [52, 7, 10, "enum_LAST_LEXICAL_USE"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [55, 30, 10, "enum_LAST_LEXICAL_USE"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [58, 55, 10, "enum_LAST_LEXICAL_USE"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 64, 9, "enum_NEXT_SYNTAX"], [65, 37, 10, "enum_LAST_LEXICAL_USE"], [64, 65, 9, "enum_NEXT_SYNTAX"], [6, 18, 1, "enum_CFG_NEXT"], [18, 22, 1, "enum_CFG_NEXT"], [22, 31, 1, "enum_CFG_NEXT"], [31, 36, 1, "enum_CFG_NEXT"], [31, 64, 1, "enum_CFG_NEXT"], [36, 46, 1, "enum_CFG_NEXT"], [46, 54, 1, "enum_CFG_NEXT"], [54, 31, 1, "enum_CFG_NEXT"], [13, 2, 3, "enum_LAST_WRITE"], [30, 58, 2, "enum_LAST_READ"], [30, 13, 2, "enum_LAST_READ"], [30, 55, 3, "enum_LAST_WRITE"], [30, 2, 3, "enum_LAST_WRITE"], [37, 37, 2, "enum_LAST_READ"], [37, 23, 3, "enum_LAST_WRITE"], [41, 41, 2, "enum_LAST_READ"], [43, 50, 2, "enum_LAST_READ"], [43, 47, 3, "enum_LAST_WRITE"], [43, 19, 3, "enum_LAST_WRITE"], [50, 43, 2, "enum_LAST_READ"], [50, 47, 3, "enum_LAST_WRITE"], [50, 19, 3, "enum_LAST_WRITE"], [52, 52, 2, "enum_LAST_READ"], [52, 7, 3, "enum_LAST_WRITE"], [47, 50, 2, "enum_LAST_READ"], [47, 47, 3, "enum_LAST_WRITE"], [47, 19, 3, "enum_LAST_WRITE"], [58, 30, 2, "enum_LAST_READ"], [58, 55, 3, "enum_LAST_WRITE"], [58, 2, 3, "enum_LAST_WRITE"], [55, 58, 2, "enum_LAST_READ"], [55, 55, 3, "enum_LAST_WRITE"], [55, 2, 3, "enum_LAST_WRITE"], [65, 37, 2, "enum_LAST_READ"], [65, 23, 3, "enum_LAST_WRITE"], [7, 13, 4, "enum_COMPUTED_FROM"], [47, 50, 4, "enum_COMPUTED_FROM"], [47, 52, 4, "enum_COMPUTED_FROM"], [55, 58, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "Southpaw-TACTIC", "repo": "TACTIC", "path": "src/context/client/tactic-api-python-4.0.api04/Tools/pynche/StripViewer.py", "id": 7733, "has_bug": false, "code_full": "from typing import List\n\n\ndef constant(numchips: int) -> List[int]:\n    step: float = 255.0 / (numchips - 1)\n    start: float = 0.0\n    seq: List[int] = []\n    while numchips > 0:\n        seq.append(int(start))\n        start: float = start + step\n        numchips=(numchips-1)\n    return seq\n", "code": "def constant(numchips: int) -> List[int]:\n    step: float = 255.0 / (numchips - 1)\n    start: float = 0.0\n    seq: List[int] = []\n    while numchips > 0:\n        seq.append(int(start))\n        start: float = start + step\n        numchips=(numchips-1)\n    return seq\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "90adbb7b566899f5ec01cee630771ff9e8ab19e8"}
{"source_tokens": ["#NEWLINE#", "def fmt_date_or_none(", "date", ",", "fmt", "=", "'%Y-%m-%d'", ")", ":", "#NEWLINE#", "#INDENT#", "if", "date", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "return", "date", ".", "strftime", "(", "fmt", ")", "#NEWLINE#", "#UNINDENT#", "except", "ValueError", ":", "#NEWLINE#", "#INDENT#", "raise", "HTTPError", "(", "http", ".", "BAD_REQUEST", ",", "data", "=", "dict", "(", "message_long", "=", "'Year entered must be after 1900'", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "return", "None"], "edges": [[1, 3, 7, "enum_FIELD"], [11, 12, 7, "enum_FIELD"], [53, 54, 7, "enum_FIELD"], [20, 24, 7, "enum_FIELD"], [29, 30, 7, "enum_FIELD"], [24, 22, 7, "enum_FIELD"], [34, 40, 7, "enum_FIELD"], [22, 21, 7, "enum_FIELD"], [40, 35, 7, "enum_FIELD"], [38, 37, 7, "enum_FIELD"], [41, 44, 7, "enum_FIELD"], [44, 43, 7, "enum_FIELD"], [45, 47, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 11, 9, "enum_NEXT_SYNTAX"], [12, 2, 10, "enum_LAST_LEXICAL_USE"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 20, 9, "enum_NEXT_SYNTAX"], [21, 12, 10, "enum_LAST_LEXICAL_USE"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [25, 4, 10, "enum_LAST_LEXICAL_USE"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [6, 1, 1, "enum_CFG_NEXT"], [3, 12, 1, "enum_CFG_NEXT"], [12, 20, 1, "enum_CFG_NEXT"], [12, 53, 1, "enum_CFG_NEXT"], [20, 30, 1, "enum_CFG_NEXT"], [30, 34, 1, "enum_CFG_NEXT"], [12, 2, 3, "enum_LAST_WRITE"], [21, 12, 2, "enum_LAST_READ"], [21, 2, 3, "enum_LAST_WRITE"], [25, 4, 3, "enum_LAST_WRITE"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "CenterForOpenScience", "repo": "osf.io", "path": "website/profile/views.py", "id": 1668, "has_bug": false, "code_full": "import http.client as http\nfrom datetime import datetime\nfrom typing import Optional\n\n\nclass HTTPError(Exception):\n    status_code: int\n    data: Optional[dict]\n\n    def __init__(self, status_code: int, data: Optional[dict] = None):\n        pass\n\ndef fmt_date_or_none(date: Optional[datetime], fmt: str='%Y-%m-%d') -> Optional[str]:\n    if date:\n        try:\n            return date.strftime(fmt)\n        except ValueError:\n            raise HTTPError(\n                http.BAD_REQUEST,\n                data=dict(message_long='Year entered must be after 1900')\n            )\n    return None\n", "code": "def fmt_date_or_none(date: Optional[datetime], fmt: str='%Y-%m-%d') -> Optional[str]:\n    if date:\n        try:\n            return date.strftime(fmt)\n        except ValueError:\n            raise HTTPError(\n                http.BAD_REQUEST,\n                data=dict(message_long='Year entered must be after 1900')\n            )\n    return None\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "142cbc14f5ed9cc3ede5bb6475fabe04fcfa3bd7"}
{"source_tokens": ["#NEWLINE#", "@", "classmethod", "#NEWLINE#", "def get_url(", "self", ",", "price_estimate", ",", "action", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "price_estimate", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "price_estimate", "=", "PriceEstimateFactory", "(", ")", "#NEWLINE#", "#UNINDENT#", "url", "=", "(", "'http://testserver'", "+", "reverse", "(", "'priceestimate-detail'", ",", "kwargs", "=", "{", "'uuid'", ":", "price_estimate", ".", "uuid", "}", ")", ")", "#NEWLINE#", "return", "(", "url", "if", "(", "action", "is", "None", ")", "else", "(", "(", "url", "+", "action", ")", "+", "'/'", ")", ")"], "edges": [[1, 8, 7, "enum_FIELD"], [16, 19, 7, "enum_FIELD"], [31, 36, 7, "enum_FIELD"], [53, 56, 7, "enum_FIELD"], [19, 18, 7, "enum_FIELD"], [24, 28, 7, "enum_FIELD"], [36, 35, 7, "enum_FIELD"], [36, 40, 7, "enum_FIELD"], [56, 59, 7, "enum_FIELD"], [56, 55, 7, "enum_FIELD"], [56, 69, 7, "enum_FIELD"], [28, 27, 7, "enum_FIELD"], [40, 37, 7, "enum_FIELD"], [59, 58, 7, "enum_FIELD"], [69, 66, 7, "enum_FIELD"], [69, 70, 7, "enum_FIELD"], [41, 45, 7, "enum_FIELD"], [66, 65, 7, "enum_FIELD"], [66, 67, 7, "enum_FIELD"], [47, 46, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [18, 7, 10, "enum_LAST_LEXICAL_USE"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 24, 9, "enum_NEXT_SYNTAX"], [25, 18, 10, "enum_LAST_LEXICAL_USE"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [46, 25, 10, "enum_LAST_LEXICAL_USE"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [55, 32, 10, "enum_LAST_LEXICAL_USE"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [58, 9, 10, "enum_LAST_LEXICAL_USE"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [65, 55, 10, "enum_LAST_LEXICAL_USE"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [67, 58, 10, "enum_LAST_LEXICAL_USE"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [11, 2, 1, "enum_CFG_NEXT"], [2, 1, 1, "enum_CFG_NEXT"], [8, 19, 1, "enum_CFG_NEXT"], [19, 24, 1, "enum_CFG_NEXT"], [19, 31, 1, "enum_CFG_NEXT"], [24, 31, 1, "enum_CFG_NEXT"], [31, 53, 1, "enum_CFG_NEXT"], [18, 7, 3, "enum_LAST_WRITE"], [25, 18, 2, "enum_LAST_READ"], [25, 7, 3, "enum_LAST_WRITE"], [46, 18, 2, "enum_LAST_READ"], [46, 7, 3, "enum_LAST_WRITE"], [46, 25, 3, "enum_LAST_WRITE"], [58, 9, 3, "enum_LAST_WRITE"], [55, 32, 3, "enum_LAST_WRITE"], [65, 55, 2, "enum_LAST_READ"], [65, 32, 3, "enum_LAST_WRITE"], [67, 58, 2, "enum_LAST_READ"], [67, 9, 3, "enum_LAST_WRITE"], [32, 37, 4, "enum_COMPUTED_FROM"], [32, 46, 4, "enum_COMPUTED_FROM"], [25, 27, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "opennode", "repo": "nodeconductor", "path": "nodeconductor/cost_tracking/tests/factories.py", "id": 32693, "has_bug": false, "code_full": "from typing import Any, Optional\n\nfrom django.urls import reverse\n\n\nclass PriceEstimateFactory():\n    uuid: str\n\n\nclass Class:\n    @classmethod\n    def get_url(self, price_estimate: Optional[PriceEstimateFactory], action: Optional[Any]=None):\n        if price_estimate is None:\n            price_estimate = PriceEstimateFactory()\n        url = 'http://testserver' + reverse('priceestimate-detail', kwargs={'uuid': price_estimate.uuid})\n        return url if action is None else url + action + '/'\n", "code": "def get_url(self, price_estimate: Optional[PriceEstimateFactory], action: Optional[Any]=None):\n    if price_estimate is None:\n        price_estimate = PriceEstimateFactory()\n    url = 'http://testserver' + reverse('priceestimate-detail', kwargs={'uuid': price_estimate.uuid})\n    return url if action is None else url + action + '/'\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "89f014078e2a3e03405a4b339324a7eaef9b3e7f"}
{"source_tokens": ["#NEWLINE#", "def get_pool_memory(", "pool", ")", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "import", "psutil", "#NEWLINE#", "p", "=", "psutil", ".", "Process", "(", "pool", ".", "_pool", "[", "0", "]", ".", "pid", ")", "#NEWLINE#", "return", "(", "p", ".", "memory_info", "(", ")", ".", "rss", ">>", "20", ")", "#NEWLINE#", "#UNINDENT#", "except", "Exception", ":", "#NEWLINE#", "#INDENT#", "return", "0"], "edges": [[13, 19, 7, "enum_FIELD"], [30, 39, 7, "enum_FIELD"], [44, 45, 7, "enum_FIELD"], [19, 17, 7, "enum_FIELD"], [39, 37, 7, "enum_FIELD"], [39, 40, 7, "enum_FIELD"], [49, 50, 7, "enum_FIELD"], [17, 16, 7, "enum_FIELD"], [26, 23, 7, "enum_FIELD"], [37, 35, 7, "enum_FIELD"], [23, 21, 7, "enum_FIELD"], [23, 24, 7, "enum_FIELD"], [35, 33, 7, "enum_FIELD"], [21, 20, 7, "enum_FIELD"], [33, 32, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [20, 2, 10, "enum_LAST_LEXICAL_USE"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [32, 14, 10, "enum_LAST_LEXICAL_USE"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [11, 13, 1, "enum_CFG_NEXT"], [13, 30, 1, "enum_CFG_NEXT"], [30, 45, 1, "enum_CFG_NEXT"], [45, 49, 1, "enum_CFG_NEXT"], [20, 2, 3, "enum_LAST_WRITE"], [32, 14, 3, "enum_LAST_WRITE"], [14, 16, 4, "enum_COMPUTED_FROM"], [14, 20, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "douban", "repo": "dpark", "path": "dpark/executor.py", "id": 12620, "has_bug": false, "code_full": "from typing import Any\n\n\ndef get_pool_memory(pool: Any) -> int:\n    try:\n        import psutil\n        p: psutil.Process = psutil.Process(pool._pool[0].pid)\n        return p.get_memory_info()[0] >> 20\n    except Exception:\n        return 0\n", "code": "def get_pool_memory(pool: Any) -> int:\n    try:\n        import psutil\n        p: psutil.Process = psutil.Process(pool._pool[0].pid)\n        return p.get_memory_info()[0] >> 20\n    except Exception:\n        return 0\n", "type_checked_pytype": false, "type_checked_mypy": true, "type_error_label": "attribute-error", "hash": "f7217de6a7436c5a67b01a0fb83cdae3bf0fef6e"}
{"source_tokens": ["#NEWLINE#", "def __nonzero__(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "msg", "=", "\"Don't convert Expr to bool. Please call Expr.eval method to evaluate expression.\"", "#NEWLINE#", "raise", "RuntimeError", "(", "msg", ")"], "edges": [[6, 9, 7, "enum_FIELD"], [11, 13, 7, "enum_FIELD"], [13, 12, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [14, 7, 10, "enum_LAST_LEXICAL_USE"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [6, 11, 1, "enum_CFG_NEXT"], [14, 7, 3, "enum_LAST_WRITE"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "pfnet", "repo": "chainer", "path": "chainer/utils/type_check.py", "id": 37766, "has_bug": false, "code_full": "def __nonzero__(self):\n    msg: str=\"Don't convert Expr to bool. Please call Expr.eval method to evaluate expression.\"\n    raise RuntimeError(msg)\n", "code": "def __nonzero__(self):\n    msg: str=\"Don't convert Expr to bool. Please call Expr.eval method to evaluate expression.\"\n    raise RuntimeError(msg)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "a65143c2019e6403b35ea12ec1bbf7ea73bc32e2"}
{"source_tokens": ["#NEWLINE#", "def test_update_fail_on_wrong_fields(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "new_data_suites", "=", "[", "[", "{", "'id'", ":", "self", ".", "vip_ids", "[", "0", "]", ",", "'network'", ":", "self", ".", "non_existing_id", ",", "'wrong_field'", ":", "'value'", "}", "]", "]", "#NEWLINE#", "for", "new_data", "in", "new_data_suites", ":", "#NEWLINE#", "#INDENT#", "resp", "=", "self", ".", "app", ".", "patch", "(", "reverse", "(", "self", ".", "handler_name", ",", "kwargs", "=", "{", "'cluster_id'", ":", "self", ".", "cluster", "[", "'id'", "]", "}", ")", ",", "params", "=", "jsonutils", ".", "dumps", "(", "new_data", ")", ",", "headers", "=", "self", ".", "default_headers", ",", "expect_errors", "=", "True", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "400", ",", "resp", ".", "status_code", ")"], "edges": [[6, 9, 7, "enum_FIELD"], [36, 35, 7, "enum_FIELD"], [36, 37, 7, "enum_FIELD"], [40, 77, 7, "enum_FIELD"], [88, 94, 7, "enum_FIELD"], [77, 46, 7, "enum_FIELD"], [94, 90, 7, "enum_FIELD"], [46, 44, 7, "enum_FIELD"], [54, 49, 7, "enum_FIELD"], [69, 74, 7, "enum_FIELD"], [78, 81, 7, "enum_FIELD"], [84, 86, 7, "enum_FIELD"], [90, 89, 7, "enum_FIELD"], [96, 95, 7, "enum_FIELD"], [17, 15, 7, "enum_FIELD"], [17, 18, 7, "enum_FIELD"], [24, 23, 7, "enum_FIELD"], [44, 43, 7, "enum_FIELD"], [52, 51, 7, "enum_FIELD"], [55, 59, 7, "enum_FIELD"], [74, 72, 7, "enum_FIELD"], [81, 80, 7, "enum_FIELD"], [15, 14, 7, "enum_FIELD"], [72, 71, 7, "enum_FIELD"], [63, 61, 7, "enum_FIELD"], [63, 64, 7, "enum_FIELD"], [61, 60, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [14, 2, 10, "enum_LAST_LEXICAL_USE"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [23, 14, 10, "enum_LAST_LEXICAL_USE"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [37, 7, 10, "enum_LAST_LEXICAL_USE"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [43, 23, 10, "enum_LAST_LEXICAL_USE"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [51, 43, 10, "enum_LAST_LEXICAL_USE"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [60, 51, 10, "enum_LAST_LEXICAL_USE"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [75, 35, 10, "enum_LAST_LEXICAL_USE"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [80, 60, 10, "enum_LAST_LEXICAL_USE"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [89, 80, 10, "enum_LAST_LEXICAL_USE"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [95, 41, 10, "enum_LAST_LEXICAL_USE"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [6, 37, 1, "enum_CFG_NEXT"], [37, 35, 1, "enum_CFG_NEXT"], [35, 40, 1, "enum_CFG_NEXT"], [40, 88, 1, "enum_CFG_NEXT"], [88, 35, 1, "enum_CFG_NEXT"], [14, 2, 3, "enum_LAST_WRITE"], [23, 14, 2, "enum_LAST_READ"], [23, 2, 3, "enum_LAST_WRITE"], [37, 7, 3, "enum_LAST_WRITE"], [35, 75, 2, "enum_LAST_READ"], [35, 35, 3, "enum_LAST_WRITE"], [43, 89, 2, "enum_LAST_READ"], [43, 23, 2, "enum_LAST_READ"], [43, 2, 3, "enum_LAST_WRITE"], [49, 49, 2, "enum_LAST_READ"], [51, 43, 2, "enum_LAST_READ"], [51, 2, 3, "enum_LAST_WRITE"], [60, 51, 2, "enum_LAST_READ"], [60, 2, 3, "enum_LAST_WRITE"], [71, 71, 2, "enum_LAST_READ"], [75, 75, 2, "enum_LAST_READ"], [75, 35, 3, "enum_LAST_WRITE"], [80, 60, 2, "enum_LAST_READ"], [80, 2, 3, "enum_LAST_WRITE"], [41, 95, 2, "enum_LAST_READ"], [41, 41, 3, "enum_LAST_WRITE"], [89, 80, 2, "enum_LAST_READ"], [89, 2, 3, "enum_LAST_WRITE"], [95, 95, 2, "enum_LAST_READ"], [95, 41, 3, "enum_LAST_WRITE"], [7, 23, 4, "enum_COMPUTED_FROM"], [7, 14, 4, "enum_COMPUTED_FROM"], [41, 49, 4, "enum_COMPUTED_FROM"], [41, 43, 4, "enum_COMPUTED_FROM"], [41, 51, 4, "enum_COMPUTED_FROM"], [41, 75, 4, "enum_COMPUTED_FROM"], [41, 80, 4, "enum_COMPUTED_FROM"], [41, 71, 4, "enum_COMPUTED_FROM"], [41, 60, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "openstack", "repo": "fuel-web", "path": "nailgun/nailgun/test/integration/test_ip_addrs_management.py", "id": 34856, "has_bug": false, "code_full": "import json as jsonutils\nimport unittest\nfrom typing import Any, Dict, List\n\nfrom django.urls import reverse\n\n\nclass Class(unittest.TestCase):\n    vip_ids: List[int]\n    non_existing_id: int\n    cluster: Dict[str, Any]\n    handler_name: str\n    default_headers: Dict[str, str]\n    app: Any\n\n    def test_update_fail_on_wrong_fields(self):\n        new_data_suites: List[List[Dict[str, Any]]] = [\n            [{\n                'id': self.vip_ids[0],\n                \"network\": self.non_existing_id,\n                \"wrong_field\": \"value\"\n            }]\n        ]\n        for new_data in new_data_suites:\n            resp = self.app.patch(\n                reverse(\n                    self.handler_name,\n                    kwargs={\n                        'cluster_id': self.cluster['id']\n                    }\n                ),\n                params=jsonutils.dumps(new_data),\n                headers=self.default_headers,\n                expect_errors=True\n            )\n            self.assertEqual(400, resp.status_code)\n", "code": "def test_update_fail_on_wrong_fields(self):\n    new_data_suites: List[List[Dict[str, Any]]] = [\n        [{\n            'id': self.vip_ids[0],\n            \"network\": self.non_existing_id,\n            \"wrong_field\": \"value\"\n        }]\n    ]\n    for new_data in new_data_suites:\n        resp = self.app.patch(\n            reverse(\n                self.handler_name,\n                kwargs={\n                    'cluster_id': self.cluster['id']\n                }\n            ),\n            params=jsonutils.dumps(new_data),\n            headers=self.default_headers,\n            expect_errors=True\n        )\n        self.assertEqual(400, resp.status_code)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "f9e8386157447c1cbc951fbf3e047ca001bd97b2"}
{"source_tokens": ["#NEWLINE#", "def equalContents(", "arr1", ",", "arr2", ")", ":", "#NEWLINE#", "#INDENT#", "'Checks if the set of unique elements of arr1 and arr2 are equivalent.\\n    '", "#NEWLINE#", "return", "(", "frozenset", "(", "arr1", ")", "==", "frozenset", "(", "arr2", ")", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [8, 9, 7, "enum_FIELD"], [11, 17, 7, "enum_FIELD"], [17, 14, 7, "enum_FIELD"], [14, 13, 7, "enum_FIELD"], [19, 18, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [15, 2, 10, "enum_LAST_LEXICAL_USE"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [18, 13, 10, "enum_LAST_LEXICAL_USE"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [20, 4, 10, "enum_LAST_LEXICAL_USE"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [3, 8, 1, "enum_CFG_NEXT"], [8, 11, 1, "enum_CFG_NEXT"], [15, 2, 3, "enum_LAST_WRITE"], [18, 13, 2, "enum_LAST_READ"], [20, 4, 3, "enum_LAST_WRITE"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "pydata", "repo": "pandas", "path": "pandas/util/testing.py", "id": 39786, "has_bug": false, "code_full": "from typing import Any, List\n\n\ndef equalContents(arr1: List[Any], arr2: List[Any]) -> bool:\n    \"\"\"Checks if the set of unique elements of arr1 and arr2 are equivalent.\n    \"\"\"\n    return frozenset(arr1) == frozenset(arr2)\n", "code": "def equalContents(arr1: List[Any], arr2: List[Any]) -> bool:\n    \"\"\"Checks if the set of unique elements of arr1 and arr2 are equivalent.\n    \"\"\"\n    return frozenset(arr1) == frozenset(arr2)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "83fe3f3157b766eb497bdffd7ed3f57a3706859d"}
{"source_tokens": ["#NEWLINE#", "def test_create_fitshdu_from_filename(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'Regression test on `FitsHDU.fromfile`'", "#NEWLINE#", "a", "=", "np", ".", "arange", "(", "100", ")", "#NEWLINE#", "phdu", "=", "fits", ".", "PrimaryHDU", "(", "data", "=", "a", ")", "#NEWLINE#", "phdu", ".", "header", "[", "'TEST1'", "]", "=", "'A'", "#NEWLINE#", "phdu", ".", "header", "[", "'TEST2'", "]", "=", "'B'", "#NEWLINE#", "imghdu", "=", "fits", ".", "ImageHDU", "(", "data", "=", "(", "a", "+", "1", ")", ")", "#NEWLINE#", "phdu", ".", "header", "[", "'TEST3'", "]", "=", "'C'", "#NEWLINE#", "phdu", ".", "header", "[", "'TEST4'", "]", "=", "'D'", "#NEWLINE#", "hdul", "=", "fits", ".", "HDUList", "(", "[", "phdu", ",", "imghdu", "]", ")", "#NEWLINE#", "hdul", ".", "writeto", "(", "self", ".", "temp", "(", "'test.fits'", ")", ")", "#NEWLINE#", "fitshdu", "=", "fits", ".", "FitsHDU", ".", "fromfile", "(", "self", ".", "temp", "(", "'test.fits'", ")", ")", "#NEWLINE#", "hdul2", "=", "fitshdu", ".", "hdulist", "#NEWLINE#", "assert", "(", "len", "(", "hdul2", ")", "==", "2", ")", "#NEWLINE#", "assert", "fits", ".", "FITSDiff", "(", "hdul", ",", "hdul2", ")", ".", "identical"], "edges": [[6, 7, 7, "enum_FIELD"], [8, 14, 7, "enum_FIELD"], [17, 23, 7, "enum_FIELD"], [28, 36, 7, "enum_FIELD"], [37, 45, 7, "enum_FIELD"], [46, 52, 7, "enum_FIELD"], [61, 69, 7, "enum_FIELD"], [70, 78, 7, "enum_FIELD"], [79, 85, 7, "enum_FIELD"], [92, 96, 7, "enum_FIELD"], [104, 112, 7, "enum_FIELD"], [120, 124, 7, "enum_FIELD"], [127, 133, 7, "enum_FIELD"], [137, 146, 7, "enum_FIELD"], [14, 12, 7, "enum_FIELD"], [23, 21, 7, "enum_FIELD"], [32, 30, 7, "enum_FIELD"], [32, 33, 7, "enum_FIELD"], [41, 39, 7, "enum_FIELD"], [41, 42, 7, "enum_FIELD"], [52, 50, 7, "enum_FIELD"], [65, 63, 7, "enum_FIELD"], [65, 66, 7, "enum_FIELD"], [74, 72, 7, "enum_FIELD"], [74, 75, 7, "enum_FIELD"], [85, 83, 7, "enum_FIELD"], [96, 94, 7, "enum_FIELD"], [112, 110, 7, "enum_FIELD"], [124, 123, 7, "enum_FIELD"], [133, 130, 7, "enum_FIELD"], [146, 143, 7, "enum_FIELD"], [12, 11, 7, "enum_FIELD"], [21, 20, 7, "enum_FIELD"], [24, 26, 7, "enum_FIELD"], [30, 29, 7, "enum_FIELD"], [39, 38, 7, "enum_FIELD"], [50, 49, 7, "enum_FIELD"], [53, 57, 7, "enum_FIELD"], [63, 62, 7, "enum_FIELD"], [72, 71, 7, "enum_FIELD"], [83, 82, 7, "enum_FIELD"], [94, 93, 7, "enum_FIELD"], [100, 98, 7, "enum_FIELD"], [110, 108, 7, "enum_FIELD"], [116, 114, 7, "enum_FIELD"], [130, 129, 7, "enum_FIELD"], [143, 139, 7, "enum_FIELD"], [57, 56, 7, "enum_FIELD"], [57, 58, 7, "enum_FIELD"], [98, 97, 7, "enum_FIELD"], [108, 107, 7, "enum_FIELD"], [114, 113, 7, "enum_FIELD"], [139, 138, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [26, 9, 10, "enum_LAST_LEXICAL_USE"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [29, 18, 10, "enum_LAST_LEXICAL_USE"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [38, 29, 10, "enum_LAST_LEXICAL_USE"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [49, 20, 10, "enum_LAST_LEXICAL_USE"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [56, 26, 10, "enum_LAST_LEXICAL_USE"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [62, 38, 10, "enum_LAST_LEXICAL_USE"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [71, 62, 10, "enum_LAST_LEXICAL_USE"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [82, 49, 10, "enum_LAST_LEXICAL_USE"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [87, 71, 10, "enum_LAST_LEXICAL_USE"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [89, 47, 10, "enum_LAST_LEXICAL_USE"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [93, 80, 10, "enum_LAST_LEXICAL_USE"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [97, 2, 10, "enum_LAST_LEXICAL_USE"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [107, 82, 10, "enum_LAST_LEXICAL_USE"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [113, 97, 10, "enum_LAST_LEXICAL_USE"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [123, 105, 10, "enum_LAST_LEXICAL_USE"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [131, 121, 10, "enum_LAST_LEXICAL_USE"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 137, 9, "enum_NEXT_SYNTAX"], [138, 107, 10, "enum_LAST_LEXICAL_USE"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [142, 93, 10, "enum_LAST_LEXICAL_USE"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [144, 131, 10, "enum_LAST_LEXICAL_USE"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [6, 8, 1, "enum_CFG_NEXT"], [8, 17, 1, "enum_CFG_NEXT"], [17, 28, 1, "enum_CFG_NEXT"], [28, 37, 1, "enum_CFG_NEXT"], [37, 46, 1, "enum_CFG_NEXT"], [46, 61, 1, "enum_CFG_NEXT"], [61, 70, 1, "enum_CFG_NEXT"], [70, 79, 1, "enum_CFG_NEXT"], [79, 92, 1, "enum_CFG_NEXT"], [92, 104, 1, "enum_CFG_NEXT"], [104, 120, 1, "enum_CFG_NEXT"], [120, 127, 1, "enum_CFG_NEXT"], [127, 137, 1, "enum_CFG_NEXT"], [26, 9, 3, "enum_LAST_WRITE"], [29, 18, 3, "enum_LAST_WRITE"], [38, 29, 2, "enum_LAST_READ"], [38, 18, 3, "enum_LAST_WRITE"], [49, 20, 2, "enum_LAST_READ"], [56, 26, 2, "enum_LAST_READ"], [56, 9, 3, "enum_LAST_WRITE"], [62, 38, 2, "enum_LAST_READ"], [62, 18, 3, "enum_LAST_WRITE"], [71, 62, 2, "enum_LAST_READ"], [71, 18, 3, "enum_LAST_WRITE"], [82, 49, 2, "enum_LAST_READ"], [87, 71, 2, "enum_LAST_READ"], [87, 18, 3, "enum_LAST_WRITE"], [89, 47, 3, "enum_LAST_WRITE"], [93, 80, 3, "enum_LAST_WRITE"], [97, 2, 3, "enum_LAST_WRITE"], [107, 82, 2, "enum_LAST_READ"], [113, 97, 2, "enum_LAST_READ"], [113, 2, 3, "enum_LAST_WRITE"], [123, 105, 3, "enum_LAST_WRITE"], [131, 121, 3, "enum_LAST_WRITE"], [138, 107, 2, "enum_LAST_READ"], [142, 93, 2, "enum_LAST_READ"], [142, 80, 3, "enum_LAST_WRITE"], [144, 131, 2, "enum_LAST_READ"], [144, 121, 3, "enum_LAST_WRITE"], [9, 11, 4, "enum_COMPUTED_FROM"], [18, 20, 4, "enum_COMPUTED_FROM"], [18, 26, 4, "enum_COMPUTED_FROM"], [47, 49, 4, "enum_COMPUTED_FROM"], [47, 56, 4, "enum_COMPUTED_FROM"], [80, 82, 4, "enum_COMPUTED_FROM"], [80, 87, 4, "enum_COMPUTED_FROM"], [80, 89, 4, "enum_COMPUTED_FROM"], [105, 107, 4, "enum_COMPUTED_FROM"], [105, 113, 4, "enum_COMPUTED_FROM"], [121, 123, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "spacetelescope", "repo": "PyFITS", "path": "pyfits/tests/test_nonstandard.py", "id": 52170, "has_bug": false, "code_full": "from typing import Any\n\nimport numpy as np\n\nfits: Any = None\n\n\nclass Class:\n    def temp(self, filename: str) -> str:\n        return \"\"\n\n    def test_create_fitshdu_from_filename(self):\n        \"\"\"Regression test on `FitsHDU.fromfile`\"\"\"\n\n        # Build up a simple test FITS file\n        a: np.ndarray = np.arange(100)\n        phdu: Any = fits.PrimaryHDU(data=a)\n        phdu.header['TEST1'] = 'A'\n        phdu.header['TEST2'] = 'B'\n        imghdu: Any = fits.ImageHDU(data=a + 1)\n        phdu.header['TEST3'] = 'C'\n        phdu.header['TEST4'] = 'D'\n\n        hdul: Any = fits.HDUList([phdu, imghdu])\n        hdul.writeto(self.temp('test.fits'))\n\n        fitshdu: Any = fits.FitsHDU.fromfile(self.temp('test.fits'))\n        hdul2 = fitshdu.hdulist\n\n        assert len(hdul2) == 2\n        assert fits.FITSDiff(hdul, hdul2).identical\n", "code": "def test_create_fitshdu_from_filename(self):\n    \"\"\"Regression test on `FitsHDU.fromfile`\"\"\"\n\n    # Build up a simple test FITS file\n    a: np.ndarray = np.arange(100)\n    phdu: Any = fits.PrimaryHDU(data=a)\n    phdu.header['TEST1'] = 'A'\n    phdu.header['TEST2'] = 'B'\n    imghdu: Any = fits.ImageHDU(data=a + 1)\n    phdu.header['TEST3'] = 'C'\n    phdu.header['TEST4'] = 'D'\n\n    hdul: Any = fits.HDUList([phdu, imghdu])\n    hdul.writeto(self.temp('test.fits'))\n\n    fitshdu: Any = fits.FitsHDU.fromfile(self.temp('test.fits'))\n    hdul2 = fitshdu.hdulist\n\n    assert len(hdul2) == 2\n    assert fits.FITSDiff(hdul, hdul2).identical\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "7fba26b463e2704f0cb7a24db17b50c12f59c40a"}
{"source_tokens": ["#NEWLINE#", "def getValidator(", "schema", ",", "schema_store", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Get a L{jsonschema} validator for C{schema}.\\n\\n    @param schema: The JSON Schema to validate against.\\n    @type schema: L{dict}\\n\\n    @param dict schema_store: A mapping between schema paths\\n        (e.g. ``b/v1/types.json``) and the JSON schema structure.\\n    '", "#NEWLINE#", "resolver", "=", "LocalRefResolver", "(", "base_uri", "=", "b''", ",", "referrer", "=", "schema", ",", "store", "=", "schema_store", ")", "#NEWLINE#", "resolver", ".", "resolution_scope", "=", "b''", "#NEWLINE#", "return", "validator_for", "(", "schema", ")", "(", "schema", ",", "resolver", "=", "resolver", ",", "format_checker", "=", "draft4_format_checker", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [8, 9, 7, "enum_FIELD"], [10, 18, 7, "enum_FIELD"], [27, 32, 7, "enum_FIELD"], [34, 41, 7, "enum_FIELD"], [18, 13, 7, "enum_FIELD"], [29, 28, 7, "enum_FIELD"], [41, 36, 7, "enum_FIELD"], [15, 17, 7, "enum_FIELD"], [19, 21, 7, "enum_FIELD"], [23, 25, 7, "enum_FIELD"], [36, 35, 7, "enum_FIELD"], [42, 44, 7, "enum_FIELD"], [46, 48, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [21, 2, 10, "enum_LAST_LEXICAL_USE"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [25, 4, 10, "enum_LAST_LEXICAL_USE"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [28, 11, 10, "enum_LAST_LEXICAL_USE"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [37, 21, 10, "enum_LAST_LEXICAL_USE"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [40, 37, 10, "enum_LAST_LEXICAL_USE"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [44, 28, 10, "enum_LAST_LEXICAL_USE"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [3, 8, 1, "enum_CFG_NEXT"], [8, 10, 1, "enum_CFG_NEXT"], [10, 27, 1, "enum_CFG_NEXT"], [27, 34, 1, "enum_CFG_NEXT"], [21, 2, 3, "enum_LAST_WRITE"], [25, 4, 3, "enum_LAST_WRITE"], [28, 11, 3, "enum_LAST_WRITE"], [37, 21, 2, "enum_LAST_READ"], [37, 2, 3, "enum_LAST_WRITE"], [40, 37, 2, "enum_LAST_READ"], [40, 2, 3, "enum_LAST_WRITE"], [44, 28, 2, "enum_LAST_READ"], [44, 11, 3, "enum_LAST_WRITE"], [11, 13, 4, "enum_COMPUTED_FROM"], [11, 21, 4, "enum_COMPUTED_FROM"], [11, 25, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "ClusterHQ", "repo": "flocker", "path": "flocker/restapi/_schema.py", "id": 3284, "has_bug": false, "code_full": "from typing import Any, Dict\n\nfrom jsonschema import Draft4Validator, RefResolver, validator_for\n\n\nclass LocalRefResolver(RefResolver):\n    def __init__(self, base_uri: bytes, referrer: Dict[str, Any], store: Dict[str, Any]):\n        pass\n\ndraft4_format_checker: Any = None\n\n\ndef getValidator(\n    schema: Dict[str, Any], schema_store: Dict[str, Any]\n) -> Draft4Validator:\n    \"\"\"\n    Get a L{jsonschema} validator for C{schema}.\n\n    @param schema: The JSON Schema to validate against.\n    @type schema: L{dict}\n\n    @param dict schema_store: A mapping between schema paths\n        (e.g. ``b/v1/types.json``) and the JSON schema structure.\n    \"\"\"\n    # The base_uri here isn't correct for the schema,\n    # but does give proper relative paths.\n    resolver: LocalRefResolver = LocalRefResolver(\n        base_uri=b\"\", referrer=schema, store=schema_store\n    )\n    return validator_for(schema)(\n        schema, resolver=resolver, format_checker=draft4_format_checker\n    )\n", "code": "def getValidator(\n    schema: Dict[str, Any], schema_store: Dict[str, Any]\n) -> Draft4Validator:\n    \"\"\"\n    Get a L{jsonschema} validator for C{schema}.\n\n    @param schema: The JSON Schema to validate against.\n    @type schema: L{dict}\n\n    @param dict schema_store: A mapping between schema paths\n        (e.g. ``b/v1/types.json``) and the JSON schema structure.\n    \"\"\"\n    # The base_uri here isn't correct for the schema,\n    # but does give proper relative paths.\n    resolver: LocalRefResolver = LocalRefResolver(\n        base_uri=b\"\", referrer=schema, store=schema_store\n    )\n    return validator_for(schema)(\n        schema, resolver=resolver, format_checker=draft4_format_checker\n    )\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "bd54163640737db9390d7206f063567c8e5d0e1c"}
{"source_tokens": ["#NEWLINE#", "def __init__(", "self", ",", "pype", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "pype", "=", "pype", "#NEWLINE#", "self", ".", "initialDelay", "=", "5.0", "#NEWLINE#", "self", ".", "factor", "=", "1.5", "#NEWLINE#", "self", ".", "maxDelay", "=", "30.0", "#NEWLINE#", "self", ".", "clients", "=", "set", "(", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [8, 13, 7, "enum_FIELD"], [14, 19, 7, "enum_FIELD"], [20, 25, 7, "enum_FIELD"], [26, 31, 7, "enum_FIELD"], [32, 38, 7, "enum_FIELD"], [10, 9, 7, "enum_FIELD"], [16, 15, 7, "enum_FIELD"], [22, 21, 7, "enum_FIELD"], [28, 27, 7, "enum_FIELD"], [34, 33, 7, "enum_FIELD"], [38, 37, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 8, 9, "enum_NEXT_SYNTAX"], [9, 2, 10, "enum_LAST_LEXICAL_USE"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [13, 4, 10, "enum_LAST_LEXICAL_USE"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [15, 9, 10, "enum_LAST_LEXICAL_USE"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [21, 15, 10, "enum_LAST_LEXICAL_USE"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [27, 21, 10, "enum_LAST_LEXICAL_USE"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [33, 27, 10, "enum_LAST_LEXICAL_USE"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [3, 8, 1, "enum_CFG_NEXT"], [8, 14, 1, "enum_CFG_NEXT"], [14, 20, 1, "enum_CFG_NEXT"], [20, 26, 1, "enum_CFG_NEXT"], [26, 32, 1, "enum_CFG_NEXT"], [13, 4, 3, "enum_LAST_WRITE"], [9, 2, 3, "enum_LAST_WRITE"], [15, 9, 2, "enum_LAST_READ"], [15, 2, 3, "enum_LAST_WRITE"], [21, 15, 2, "enum_LAST_READ"], [21, 2, 3, "enum_LAST_WRITE"], [27, 21, 2, "enum_LAST_READ"], [27, 2, 3, "enum_LAST_WRITE"], [33, 27, 2, "enum_LAST_READ"], [33, 2, 3, "enum_LAST_WRITE"], [10, 13, 4, "enum_COMPUTED_FROM"], [34, 37, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "tmm1", "repo": "graphite", "path": "misc/carbon-relay/pyped.py", "id": 58295, "has_bug": false, "code_full": "from typing import Any\n\n\nclass Class:\n    pype: Any\n    initialDelay: float\n    factor: float\n    maxDelay: float\n    clients: set\n\n    def __init__(self,pype: Any):\n        self.pype = pype\n        self.initialDelay = 5.0\n        self.factor = 1.5\n        self.maxDelay = 30.0\n        self.clients = set()\n", "code": "def __init__(self,pype: Any):\n    self.pype = pype\n    self.initialDelay = 5.0\n    self.factor = 1.5\n    self.maxDelay = 30.0\n    self.clients = set()\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "c7e26afba7a8c721174262a1be5e5034414d4c3f"}
{"source_tokens": ["#NEWLINE#", "def check_password_hash(", "pw_hash", ",", "password", ")", ":", "#NEWLINE#", "#INDENT#", "'Checks a hashed password against a password.\\n\\n    Returns `True` if the password matched, `False` otherwise.\\n    '", "#NEWLINE#", "return", "constant_time_compare", "(", "bcrypt", ".", "hashpw", "(", "unicode", "(", "password", ")", ".", "encode", "(", "'utf-8'", ")", ",", "unicode", "(", "pw_hash", ")", ".", "encode", "(", "'utf-8'", ")", ")", ",", "pw_hash", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [8, 9, 7, "enum_FIELD"], [11, 38, 7, "enum_FIELD"], [38, 12, 7, "enum_FIELD"], [27, 15, 7, "enum_FIELD"], [15, 14, 7, "enum_FIELD"], [24, 22, 7, "enum_FIELD"], [34, 32, 7, "enum_FIELD"], [22, 19, 7, "enum_FIELD"], [32, 29, 7, "enum_FIELD"], [19, 18, 7, "enum_FIELD"], [29, 28, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [20, 4, 10, "enum_LAST_LEXICAL_USE"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [28, 18, 10, "enum_LAST_LEXICAL_USE"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [30, 2, 10, "enum_LAST_LEXICAL_USE"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [39, 30, 10, "enum_LAST_LEXICAL_USE"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [3, 8, 1, "enum_CFG_NEXT"], [8, 11, 1, "enum_CFG_NEXT"], [20, 4, 3, "enum_LAST_WRITE"], [28, 18, 2, "enum_LAST_READ"], [30, 2, 3, "enum_LAST_WRITE"], [39, 30, 2, "enum_LAST_READ"], [39, 2, 3, "enum_LAST_WRITE"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "CenterForOpenScience", "repo": "osf.io", "path": "framework/bcrypt/__init__.py", "id": 999, "has_bug": false, "code_full": "\n\nimport bcrypt\n\n\ndef constant_time_compare(val1: bytes, val2: str) -> bool:\n    return False\n\n\ndef check_password_hash(pw_hash: str, password: str) -> bool:\n    \"\"\"Checks a hashed password against a password.\n\n    Returns `True` if the password matched, `False` otherwise.\n    \"\"\"\n\n    return constant_time_compare(\n        bcrypt.hashpw(\n            password.encode(),\n            pw_hash.encode()\n        ),\n        pw_hash\n    )\n", "code": "def check_password_hash(pw_hash: str, password: str) -> bool:\n    \"\"\"Checks a hashed password against a password.\n\n    Returns `True` if the password matched, `False` otherwise.\n    \"\"\"\n\n    return constant_time_compare(\n        bcrypt.hashpw(\n            password.encode(),\n            pw_hash.encode()\n        ),\n        pw_hash\n    )\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "e77ca44d89ff237689e9ff8b11b6508646340415"}
{"source_tokens": ["#NEWLINE#", "def test_clt_backwards_aliases(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "clt", "=", "self", ".", "client", "#NEWLINE#", "self", ".", "assertEqual", "(", "clt", ".", "list_containers", ",", "clt", ".", "list_container_names", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "clt", ".", "delete_container", ",", "clt", ".", "delete", ")"], "edges": [[6, 10, 7, "enum_FIELD"], [12, 20, 7, "enum_FIELD"], [25, 33, 7, "enum_FIELD"], [10, 9, 7, "enum_FIELD"], [20, 14, 7, "enum_FIELD"], [33, 27, 7, "enum_FIELD"], [14, 13, 7, "enum_FIELD"], [18, 17, 7, "enum_FIELD"], [22, 21, 7, "enum_FIELD"], [27, 26, 7, "enum_FIELD"], [31, 30, 7, "enum_FIELD"], [35, 34, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [9, 2, 10, "enum_LAST_LEXICAL_USE"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [13, 9, 10, "enum_LAST_LEXICAL_USE"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [17, 7, 10, "enum_LAST_LEXICAL_USE"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [21, 17, 10, "enum_LAST_LEXICAL_USE"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [26, 13, 10, "enum_LAST_LEXICAL_USE"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [30, 21, 10, "enum_LAST_LEXICAL_USE"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [34, 30, 10, "enum_LAST_LEXICAL_USE"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [6, 12, 1, "enum_CFG_NEXT"], [12, 25, 1, "enum_CFG_NEXT"], [9, 2, 3, "enum_LAST_WRITE"], [13, 9, 2, "enum_LAST_READ"], [13, 2, 3, "enum_LAST_WRITE"], [17, 7, 3, "enum_LAST_WRITE"], [21, 17, 2, "enum_LAST_READ"], [21, 7, 3, "enum_LAST_WRITE"], [26, 13, 2, "enum_LAST_READ"], [26, 2, 3, "enum_LAST_WRITE"], [30, 21, 2, "enum_LAST_READ"], [30, 7, 3, "enum_LAST_WRITE"], [34, 30, 2, "enum_LAST_READ"], [34, 7, 3, "enum_LAST_WRITE"], [7, 9, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "rackspace", "repo": "pyrax", "path": "tests/unit/test_object_storage.py", "id": 43928, "has_bug": false, "code_full": "import unittest\nfrom typing import Any, List\n\n\nclass Class:\n    list_container_names: List[str]\n    list_containers: List[str]\n    delete_container: Any\n    delete: Any\n\n\nclass TestClass(unittest.TestCase):\n    client: Class\n\n    def test_clt_backwards_aliases(self):\n        clt = self.client\n        self.assertEqual(clt.list_containers, clt.list_container_names)\n        self.assertEqual(clt.delete_container, clt.delete)\n", "code": "def test_clt_backwards_aliases(self):\n    clt = self.client\n    self.assertEqual(clt.list_containers, clt.list_container_names)\n    self.assertEqual(clt.delete_container, clt.delete)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "1707495523a4e222b871d654f40ad1a2b439dad6"}
{"source_tokens": ["#NEWLINE#", "def is_increasing(", "f", ",", "interval", "=", "S", ".", "Reals", ",", "symbol", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Returns if a function is increasing or not, in the given\\n    ``Interval``.\\n\\n    Examples\\n    ========\\n\\n    >>> from sympy import is_increasing\\n    >>> from sympy.abc import x, y\\n    >>> from sympy import S, Interval, oo\\n    >>> is_increasing(x**3 - 3*x**2 + 4*x, S.Reals)\\n    True\\n    >>> is_increasing(-x**2, Interval(-oo, 0))\\n    True\\n    >>> is_increasing(-x**2, Interval(0, oo))\\n    False\\n    >>> is_increasing(4*x**3 - 6*x**2 - 72*x + 30, Interval(-2, 3))\\n    False\\n    >>> is_increasing(x**2 + y, Interval(1, 2), x)\\n    True\\n\\n    '", "#NEWLINE#", "f", "=", "sympify", "(", "f", ")", "#NEWLINE#", "free_sym", "=", "f", ".", "free_symbols", "#NEWLINE#", "if", "(", "symbol", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "len", "(", "free_sym", ")", ">", "1", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "NotImplementedError", "(", "'is_increasing has not yet been implemented for all multivariate expressions'", ")", "#NEWLINE#", "#UNINDENT#", "if", "(", "len", "(", "free_sym", ")", "==", "0", ")", ":", "#NEWLINE#", "#INDENT#", "return", "True", "#NEWLINE#", "#UNINDENT#", "symbol", "=", "free_sym", ".", "pop", "(", ")", "#NEWLINE#", "#UNINDENT#", "df", "=", "f", ".", "diff", "(", "symbol", ")", "#NEWLINE#", "df_nonneg_interval", "=", "solveset", "(", "(", "df", ">=", "0", ")", ",", "symbol", ",", "domain", "=", "S", ".", "Reals", ")", "#NEWLINE#", "return", "interval", ".", "is_subset", "(", "df_nonneg_interval", ")"], "edges": [[1, 5, 7, "enum_FIELD"], [16, 17, 7, "enum_FIELD"], [18, 22, 7, "enum_FIELD"], [25, 29, 7, "enum_FIELD"], [32, 35, 7, "enum_FIELD"], [84, 90, 7, "enum_FIELD"], [93, 103, 7, "enum_FIELD"], [113, 117, 7, "enum_FIELD"], [7, 6, 7, "enum_FIELD"], [22, 21, 7, "enum_FIELD"], [29, 28, 7, "enum_FIELD"], [35, 34, 7, "enum_FIELD"], [41, 47, 7, "enum_FIELD"], [60, 66, 7, "enum_FIELD"], [75, 81, 7, "enum_FIELD"], [90, 88, 7, "enum_FIELD"], [103, 96, 7, "enum_FIELD"], [117, 115, 7, "enum_FIELD"], [47, 44, 7, "enum_FIELD"], [53, 55, 7, "enum_FIELD"], [66, 63, 7, "enum_FIELD"], [72, 73, 7, "enum_FIELD"], [81, 79, 7, "enum_FIELD"], [88, 87, 7, "enum_FIELD"], [100, 99, 7, "enum_FIELD"], [106, 109, 7, "enum_FIELD"], [115, 114, 7, "enum_FIELD"], [44, 43, 7, "enum_FIELD"], [55, 54, 7, "enum_FIELD"], [63, 62, 7, "enum_FIELD"], [79, 78, 7, "enum_FIELD"], [109, 108, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [19, 2, 10, "enum_LAST_LEXICAL_USE"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [23, 19, 10, "enum_LAST_LEXICAL_USE"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [28, 23, 10, "enum_LAST_LEXICAL_USE"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [34, 10, 10, "enum_LAST_LEXICAL_USE"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [45, 26, 10, "enum_LAST_LEXICAL_USE"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [62, 43, 10, "enum_LAST_LEXICAL_USE"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [64, 45, 10, "enum_LAST_LEXICAL_USE"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 75, 9, "enum_NEXT_SYNTAX"], [76, 34, 10, "enum_LAST_LEXICAL_USE"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [78, 64, 10, "enum_LAST_LEXICAL_USE"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [87, 28, 10, "enum_LAST_LEXICAL_USE"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [91, 76, 10, "enum_LAST_LEXICAL_USE"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [99, 85, 10, "enum_LAST_LEXICAL_USE"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [104, 91, 10, "enum_LAST_LEXICAL_USE"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [108, 6, 10, "enum_LAST_LEXICAL_USE"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 113, 9, "enum_NEXT_SYNTAX"], [114, 4, 10, "enum_LAST_LEXICAL_USE"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [118, 94, 10, "enum_LAST_LEXICAL_USE"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [7, 12, 1, "enum_CFG_NEXT"], [12, 1, 1, "enum_CFG_NEXT"], [5, 16, 1, "enum_CFG_NEXT"], [16, 18, 1, "enum_CFG_NEXT"], [18, 25, 1, "enum_CFG_NEXT"], [25, 35, 1, "enum_CFG_NEXT"], [35, 47, 1, "enum_CFG_NEXT"], [35, 84, 1, "enum_CFG_NEXT"], [47, 53, 1, "enum_CFG_NEXT"], [47, 66, 1, "enum_CFG_NEXT"], [66, 75, 1, "enum_CFG_NEXT"], [66, 72, 1, "enum_CFG_NEXT"], [75, 84, 1, "enum_CFG_NEXT"], [84, 93, 1, "enum_CFG_NEXT"], [93, 113, 1, "enum_CFG_NEXT"], [23, 2, 3, "enum_LAST_WRITE"], [19, 23, 2, "enum_LAST_READ"], [19, 2, 3, "enum_LAST_WRITE"], [28, 23, 2, "enum_LAST_READ"], [28, 19, 3, "enum_LAST_WRITE"], [34, 10, 3, "enum_LAST_WRITE"], [45, 26, 3, "enum_LAST_WRITE"], [62, 43, 2, "enum_LAST_READ"], [64, 45, 2, "enum_LAST_READ"], [64, 26, 3, "enum_LAST_WRITE"], [78, 64, 2, "enum_LAST_READ"], [78, 26, 3, "enum_LAST_WRITE"], [76, 34, 2, "enum_LAST_READ"], [76, 10, 3, "enum_LAST_WRITE"], [87, 28, 2, "enum_LAST_READ"], [87, 19, 3, "enum_LAST_WRITE"], [91, 34, 2, "enum_LAST_READ"], [91, 76, 3, "enum_LAST_WRITE"], [91, 10, 3, "enum_LAST_WRITE"], [99, 85, 3, "enum_LAST_WRITE"], [104, 91, 2, "enum_LAST_READ"], [104, 76, 3, "enum_LAST_WRITE"], [104, 10, 3, "enum_LAST_WRITE"], [114, 4, 3, "enum_LAST_WRITE"], [118, 94, 3, "enum_LAST_WRITE"], [19, 21, 4, "enum_COMPUTED_FROM"], [19, 23, 4, "enum_COMPUTED_FROM"], [26, 28, 4, "enum_COMPUTED_FROM"], [85, 91, 4, "enum_COMPUTED_FROM"], [85, 87, 4, "enum_COMPUTED_FROM"], [94, 96, 4, "enum_COMPUTED_FROM"], [94, 104, 4, "enum_COMPUTED_FROM"], [94, 99, 4, "enum_COMPUTED_FROM"], [94, 108, 4, "enum_COMPUTED_FROM"], [76, 78, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "sympy", "repo": "sympy", "path": "sympy/calculus/singularities.py", "id": 55043, "has_bug": false, "code_full": "\n\nfrom typing import Any, List, Optional, Set, Union\n\nfrom sympy import Expr, Interval, S, Symbol, solveset, sympify\n\n\ndef is_increasing(f: Union[Expr, str], interval: Interval=S.Reals, symbol: Optional[Symbol]=None) -> bool:\n    \"\"\"\n    Returns if a function is increasing or not, in the given\n    ``Interval``.\n\n    Examples\n    ========\n\n    >>> from sympy import is_increasing\n    >>> from sympy.abc import x, y\n    >>> from sympy import S, Interval, oo\n    >>> is_increasing(x**3 - 3*x**2 + 4*x, S.Reals)\n    True\n    >>> is_increasing(-x**2, Interval(-oo, 0))\n    True\n    >>> is_increasing(-x**2, Interval(0, oo))\n    False\n    >>> is_increasing(4*x**3 - 6*x**2 - 72*x + 30, Interval(-2, 3))\n    False\n    >>> is_increasing(x**2 + y, Interval(1, 2), x)\n    True\n\n    \"\"\"\n    f: Any = sympify(f)\n    free_sym: List[Symbol] = f.free_symbols\n\n    if symbol is None:\n        if len(free_sym) > 1:\n            raise NotImplementedError('is_increasing has not yet been implemented '\n                                        'for all multivariate expressions')\n        if len(free_sym) == 0:\n            return True\n        symbol: Symbol = free_sym.pop()\n\n    df = f.diff(symbol)\n    df_nonneg_interval: Set = solveset(df >= 0, symbol, domain=S.Reals)\n    return interval.is_subset(df_nonneg_interval)\n", "code": "def is_increasing(f: Union[Expr, str], interval: Interval=S.Reals, symbol: Optional[Symbol]=None) -> bool:\n    \"\"\"\n    Returns if a function is increasing or not, in the given\n    ``Interval``.\n\n    Examples\n    ========\n\n    >>> from sympy import is_increasing\n    >>> from sympy.abc import x, y\n    >>> from sympy import S, Interval, oo\n    >>> is_increasing(x**3 - 3*x**2 + 4*x, S.Reals)\n    True\n    >>> is_increasing(-x**2, Interval(-oo, 0))\n    True\n    >>> is_increasing(-x**2, Interval(0, oo))\n    False\n    >>> is_increasing(4*x**3 - 6*x**2 - 72*x + 30, Interval(-2, 3))\n    False\n    >>> is_increasing(x**2 + y, Interval(1, 2), x)\n    True\n\n    \"\"\"\n    f: Any = sympify(f)\n    free_sym: List[Symbol] = f.free_symbols\n\n    if symbol is None:\n        if len(free_sym) > 1:\n            raise NotImplementedError('is_increasing has not yet been implemented '\n                                        'for all multivariate expressions')\n        if len(free_sym) == 0:\n            return True\n        symbol: Symbol = free_sym.pop()\n\n    df = f.diff(symbol)\n    df_nonneg_interval: Set = solveset(df >= 0, symbol, domain=S.Reals)\n    return interval.is_subset(df_nonneg_interval)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "6d3eb2c91c8c6a0abf52ee5c0dd4bdf3dd6e60f9"}
{"source_tokens": ["#NEWLINE#", "def __call__(", "self", ",", "environ", ",", "start_response", ")", ":", "#NEWLINE#", "#INDENT#", "response_body", "=", "[", "]", "#NEWLINE#", "def catching_start_response(", "status", ",", "headers", ",", "exc_info", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "start_response", "(", "status", ",", "headers", ",", "exc_info", ")", "#NEWLINE#", "return", "response_body", ".", "append", "#NEWLINE#", "#UNINDENT#", "def runapp(", ")", ":", "#NEWLINE#", "#INDENT#", "appiter", "=", "self", ".", "_app", "(", "environ", ",", "catching_start_response", ")", "#NEWLINE#", "response_body", ".", "extend", "(", "appiter", ")", "#NEWLINE#", "if", "hasattr", "(", "appiter", ",", "'close'", ")", ":", "#NEWLINE#", "#INDENT#", "appiter", ".", "close", "(", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "handler_name", "=", "(", "environ", ".", "get", "(", "'PATH_INFO'", ")", ".", "strip", "(", "'/'", ")", ".", "replace", "(", "'/'", ",", "'.'", ")", "or", "'root'", ")", "#NEWLINE#", "profiler", "=", "Profiler", "(", "environ", "[", "'REQUEST_METHOD'", "]", ",", "handler_name", ")", "#NEWLINE#", "profiler", ".", "profiler", ".", "runcall", "(", "runapp", ")", "#NEWLINE#", "body", "=", "b''", ".", "join", "(", "response_body", ")", "#NEWLINE#", "profiler", ".", "save_data", "(", ")", "#NEWLINE#", "return", "[", "body", "]"], "edges": [[1, 3, 7, "enum_FIELD"], [10, 13, 7, "enum_FIELD"], [24, 20, 7, "enum_FIELD"], [83, 105, 7, "enum_FIELD"], [108, 117, 7, "enum_FIELD"], [120, 126, 7, "enum_FIELD"], [129, 135, 7, "enum_FIELD"], [138, 142, 7, "enum_FIELD"], [145, 146, 7, "enum_FIELD"], [27, 31, 7, "enum_FIELD"], [37, 39, 7, "enum_FIELD"], [47, 55, 7, "enum_FIELD"], [58, 62, 7, "enum_FIELD"], [66, 70, 7, "enum_FIELD"], [117, 111, 7, "enum_FIELD"], [126, 124, 7, "enum_FIELD"], [135, 133, 7, "enum_FIELD"], [142, 140, 7, "enum_FIELD"], [31, 28, 7, "enum_FIELD"], [39, 38, 7, "enum_FIELD"], [55, 51, 7, "enum_FIELD"], [62, 60, 7, "enum_FIELD"], [70, 67, 7, "enum_FIELD"], [75, 79, 7, "enum_FIELD"], [102, 98, 7, "enum_FIELD"], [114, 113, 7, "enum_FIELD"], [114, 115, 7, "enum_FIELD"], [124, 122, 7, "enum_FIELD"], [133, 132, 7, "enum_FIELD"], [140, 139, 7, "enum_FIELD"], [51, 50, 7, "enum_FIELD"], [60, 59, 7, "enum_FIELD"], [79, 77, 7, "enum_FIELD"], [98, 95, 7, "enum_FIELD"], [122, 121, 7, "enum_FIELD"], [77, 76, 7, "enum_FIELD"], [95, 93, 7, "enum_FIELD"], [93, 90, 7, "enum_FIELD"], [90, 88, 7, "enum_FIELD"], [88, 87, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 27, 9, "enum_NEXT_SYNTAX"], [28, 6, 10, "enum_LAST_LEXICAL_USE"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [30, 17, 10, "enum_LAST_LEXICAL_USE"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [32, 19, 10, "enum_LAST_LEXICAL_USE"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [34, 21, 10, "enum_LAST_LEXICAL_USE"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 37, 9, "enum_NEXT_SYNTAX"], [38, 11, 10, "enum_LAST_LEXICAL_USE"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [50, 2, 10, "enum_LAST_LEXICAL_USE"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [54, 4, 10, "enum_LAST_LEXICAL_USE"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [59, 38, 10, "enum_LAST_LEXICAL_USE"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [63, 48, 10, "enum_LAST_LEXICAL_USE"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [69, 63, 10, "enum_LAST_LEXICAL_USE"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 75, 9, "enum_NEXT_SYNTAX"], [76, 69, 10, "enum_LAST_LEXICAL_USE"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [87, 54, 10, "enum_LAST_LEXICAL_USE"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [113, 87, 10, "enum_LAST_LEXICAL_USE"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [118, 84, 10, "enum_LAST_LEXICAL_USE"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [121, 109, 10, "enum_LAST_LEXICAL_USE"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [136, 59, 10, "enum_LAST_LEXICAL_USE"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [139, 121, 10, "enum_LAST_LEXICAL_USE"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [147, 130, 10, "enum_LAST_LEXICAL_USE"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [3, 10, 1, "enum_CFG_NEXT"], [10, 23, 1, "enum_CFG_NEXT"], [23, 24, 1, "enum_CFG_NEXT"], [24, 44, 1, "enum_CFG_NEXT"], [20, 27, 1, "enum_CFG_NEXT"], [27, 37, 1, "enum_CFG_NEXT"], [44, 83, 1, "enum_CFG_NEXT"], [47, 58, 1, "enum_CFG_NEXT"], [58, 70, 1, "enum_CFG_NEXT"], [70, 75, 1, "enum_CFG_NEXT"], [83, 108, 1, "enum_CFG_NEXT"], [108, 120, 1, "enum_CFG_NEXT"], [120, 129, 1, "enum_CFG_NEXT"], [129, 138, 1, "enum_CFG_NEXT"], [138, 145, 1, "enum_CFG_NEXT"], [30, 17, 3, "enum_LAST_WRITE"], [32, 19, 3, "enum_LAST_WRITE"], [34, 21, 3, "enum_LAST_WRITE"], [63, 48, 3, "enum_LAST_WRITE"], [69, 63, 2, "enum_LAST_READ"], [69, 48, 3, "enum_LAST_WRITE"], [76, 69, 2, "enum_LAST_READ"], [76, 48, 3, "enum_LAST_WRITE"], [87, 4, 3, "enum_LAST_WRITE"], [113, 87, 2, "enum_LAST_READ"], [113, 4, 3, "enum_LAST_WRITE"], [118, 84, 3, "enum_LAST_WRITE"], [121, 109, 3, "enum_LAST_WRITE"], [127, 44, 3, "enum_LAST_WRITE"], [136, 11, 3, "enum_LAST_WRITE"], [139, 121, 2, "enum_LAST_READ"], [139, 109, 3, "enum_LAST_WRITE"], [147, 130, 3, "enum_LAST_WRITE"], [84, 87, 4, "enum_COMPUTED_FROM"], [109, 111, 4, "enum_COMPUTED_FROM"], [109, 118, 4, "enum_COMPUTED_FROM"], [109, 113, 4, "enum_COMPUTED_FROM"], [130, 136, 4, "enum_COMPUTED_FROM"], [48, 54, 4, "enum_COMPUTED_FROM"], [48, 56, 4, "enum_COMPUTED_FROM"], [48, 50, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "openstack", "repo": "fuel-web", "path": "nailgun/nailgun/test/performance/profiler.py", "id": 35097, "has_bug": false, "code_full": "\nfrom typing import Any, Callable, Dict, List, Tuple\n\n\nclass Profiler:\n    profiler: Any\n\n    def __init__(self, method: str, handler_name: str) -> None:\n        pass\n\n    def save_data(self) -> None:\n        pass\n\n\nclass Class:\n    def _app(self, environ: Dict[str, Any], start_response: Callable) -> List[bytes]:\n        return []\n\n    def __call__(self, environ: Dict[str, Any], start_response: Callable) -> List[bytes]:\n        response_body: List[bytes] = []\n\n        def catching_start_response(status: str, headers: List[Tuple], exc_info: Any=None) -> Callable[[bytes], None]:\n            start_response(status, headers, exc_info)\n            return response_body.append\n\n        def runapp():\n            appiter: List[bytes] = self._app(environ, catching_start_response)\n            response_body.extend(appiter)\n            if hasattr(appiter, 'close'):\n                appiter.close()\n\n        handler_name: str = environ.get('PATH_INFO').strip('/').replace('/', '.')             or 'root'\n        profiler = Profiler(environ['REQUEST_METHOD'], handler_name)\n        profiler.profiler.runcall(runapp)\n        body = b''.join(response_body)\n        profiler.save_data()\n        return [body]\n", "code": "def __call__(self, environ: Dict[str, Any], start_response: Callable) -> List[bytes]:\n    response_body: List[bytes] = []\n\n    def catching_start_response(status: str, headers: List[Tuple], exc_info: Any=None) -> Callable[[bytes], None]:\n        start_response(status, headers, exc_info)\n        return response_body.append\n\n    def runapp():\n        appiter: List[bytes] = self._app(environ, catching_start_response)\n        response_body.extend(appiter)\n        if hasattr(appiter, 'close'):\n            appiter.close()\n\n    handler_name: str = environ.get('PATH_INFO').strip('/').replace('/', '.')         or 'root'\n    profiler = Profiler(environ['REQUEST_METHOD'], handler_name)\n    profiler.profiler.runcall(runapp)\n    body = b''.join(response_body)\n    profiler.save_data()\n    return [body]\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "attribute-error,other", "hash": "4d097dd448550ade1090573be1906a6a1e4724e2"}
{"source_tokens": ["#NEWLINE#", "def detailxy(", "self", ",", "canvas", ",", "button", ",", "data_x", ",", "data_y", ")", ":", "#NEWLINE#", "#INDENT#", "'Motion event in the pick fits window.  Show the pointing\\n    information under the cursor.\\n    '", "#NEWLINE#", "if", "(", "button", "==", "0", ")", ":", "#NEWLINE#", "#INDENT#", "fitsimage", "=", "self", ".", "fv", ".", "getfocus_fitsimage", "(", ")", "#NEWLINE#", "if", "(", "fitsimage", "!=", "self", ".", "fitsimage", ")", ":", "#NEWLINE#", "#INDENT#", "return", "True", "#NEWLINE#", "#UNINDENT#", "data_x", "=", "(", "data_x", "+", "self", ".", "pick_x1", ")", "#NEWLINE#", "data_y", "=", "(", "data_y", "+", "self", ".", "pick_y1", ")", "#NEWLINE#", "return", "self", ".", "fv", ".", "showxy", "(", "self", ".", "fitsimage", ",", "data_x", ",", "data_y", ")"], "edges": [[1, 5, 7, "enum_FIELD"], [14, 15, 7, "enum_FIELD"], [17, 20, 7, "enum_FIELD"], [20, 19, 7, "enum_FIELD"], [25, 33, 7, "enum_FIELD"], [36, 39, 7, "enum_FIELD"], [50, 55, 7, "enum_FIELD"], [60, 65, 7, "enum_FIELD"], [71, 81, 7, "enum_FIELD"], [33, 31, 7, "enum_FIELD"], [39, 38, 7, "enum_FIELD"], [47, 48, 7, "enum_FIELD"], [55, 54, 7, "enum_FIELD"], [55, 57, 7, "enum_FIELD"], [65, 64, 7, "enum_FIELD"], [65, 67, 7, "enum_FIELD"], [81, 75, 7, "enum_FIELD"], [31, 29, 7, "enum_FIELD"], [41, 40, 7, "enum_FIELD"], [57, 56, 7, "enum_FIELD"], [67, 66, 7, "enum_FIELD"], [75, 73, 7, "enum_FIELD"], [79, 78, 7, "enum_FIELD"], [29, 28, 7, "enum_FIELD"], [73, 72, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [19, 6, 10, "enum_LAST_LEXICAL_USE"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [28, 2, 10, "enum_LAST_LEXICAL_USE"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [38, 26, 10, "enum_LAST_LEXICAL_USE"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [40, 28, 10, "enum_LAST_LEXICAL_USE"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 50, 9, "enum_NEXT_SYNTAX"], [51, 8, 10, "enum_LAST_LEXICAL_USE"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [54, 51, 10, "enum_LAST_LEXICAL_USE"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [56, 40, 10, "enum_LAST_LEXICAL_USE"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [61, 10, 10, "enum_LAST_LEXICAL_USE"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [64, 61, 10, "enum_LAST_LEXICAL_USE"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [66, 56, 10, "enum_LAST_LEXICAL_USE"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 71, 9, "enum_NEXT_SYNTAX"], [72, 66, 10, "enum_LAST_LEXICAL_USE"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [78, 72, 10, "enum_LAST_LEXICAL_USE"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [82, 54, 10, "enum_LAST_LEXICAL_USE"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [84, 64, 10, "enum_LAST_LEXICAL_USE"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [5, 14, 1, "enum_CFG_NEXT"], [14, 20, 1, "enum_CFG_NEXT"], [20, 25, 1, "enum_CFG_NEXT"], [25, 39, 1, "enum_CFG_NEXT"], [39, 50, 1, "enum_CFG_NEXT"], [39, 47, 1, "enum_CFG_NEXT"], [50, 60, 1, "enum_CFG_NEXT"], [60, 71, 1, "enum_CFG_NEXT"], [19, 6, 3, "enum_LAST_WRITE"], [28, 2, 3, "enum_LAST_WRITE"], [38, 26, 3, "enum_LAST_WRITE"], [40, 28, 2, "enum_LAST_READ"], [40, 2, 3, "enum_LAST_WRITE"], [54, 8, 3, "enum_LAST_WRITE"], [56, 40, 2, "enum_LAST_READ"], [56, 2, 3, "enum_LAST_WRITE"], [51, 54, 2, "enum_LAST_READ"], [51, 8, 3, "enum_LAST_WRITE"], [64, 10, 3, "enum_LAST_WRITE"], [66, 56, 2, "enum_LAST_READ"], [66, 2, 3, "enum_LAST_WRITE"], [61, 64, 2, "enum_LAST_READ"], [61, 10, 3, "enum_LAST_WRITE"], [72, 66, 2, "enum_LAST_READ"], [72, 2, 3, "enum_LAST_WRITE"], [78, 72, 2, "enum_LAST_READ"], [78, 2, 3, "enum_LAST_WRITE"], [82, 54, 2, "enum_LAST_READ"], [82, 51, 3, "enum_LAST_WRITE"], [84, 64, 2, "enum_LAST_READ"], [84, 61, 3, "enum_LAST_WRITE"], [26, 28, 4, "enum_COMPUTED_FROM"], [51, 54, 4, "enum_COMPUTED_FROM"], [51, 56, 4, "enum_COMPUTED_FROM"], [61, 64, 4, "enum_COMPUTED_FROM"], [61, 66, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "ejeschke", "repo": "ginga", "path": "ginga/misc/plugins/Pick.py", "id": 14664, "has_bug": false, "code_full": "from typing import Any\n\n\nclass FV:\n    def getfocus_viewer(self) -> Any:\n        pass\n\n    def showxy(self, chviewer: Any, data_x: float, data_y: float) -> Any:\n        pass\n\n\nclass Class:\n    fv: FV\n    fitsimage: Any\n    pick_x1: float\n    pick_y1: float\n\n    def detailxy(self, canvas: Any, button: int, data_x: float, data_y: float) -> Any:\n        \"\"\"Motion event in the pick fits window.  Show the pointing\n        information under the cursor.\n        \"\"\"\n        if button == 0:\n            # TODO: we could track the focus changes to make this check\n            # more efficient\n            chviewer: Any = self.fv.getfocus_viewer()\n            # Don't update global information if our chviewer isn't focused\n            if chviewer != self.fitsimage:\n                return True\n\n            # Add offsets from cutout\n            data_x: float = data_x + self.pick_x1\n            data_y: float = data_y + self.pick_y1\n\n            return self.fv.showxy(chviewer, data_x, data_y)\n", "code": "def detailxy(self, canvas: Any, button: int, data_x: float, data_y: float) -> Any:\n    \"\"\"Motion event in the pick fits window.  Show the pointing\n    information under the cursor.\n    \"\"\"\n    if button == 0:\n        # TODO: we could track the focus changes to make this check\n        # more efficient\n        chviewer: Any = self.fv.getfocus_viewer()\n        # Don't update global information if our chviewer isn't focused\n        if chviewer != self.fitsimage:\n            return True\n\n        # Add offsets from cutout\n        data_x: float = data_x + self.pick_x1\n        data_y: float = data_y + self.pick_y1\n\n        return self.fv.showxy(chviewer, data_x, data_y)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "c2139e6f3c70489b17cf05a669de9c27e906cc0d"}
{"source_tokens": ["#NEWLINE#", "def get(", "self", ",", "request", ",", "project_id", ",", "usergroup_id", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Deletes the user group.\\n\\n    Parameter\\n    ---------\\n    request : django.http.HttpRequest\\n        Object representing the request\\n    project_id : int\\n        Identifies the project in the database\\n    usergroup_id : int\\n        Identifies the user group in the database\\n\\n    Returns\\n    -------\\n    django.http.HttpResponseRedirect\\n        Redirects to user group list if user group is deleted, user group\\n        settings if project is locked\\n    django.http.HttpResponse\\n        Rendered template, if project or user group does not exist\\n    '", "#NEWLINE#", "context", "=", "self", ".", "get_context_data", "(", "project_id", ",", "usergroup_id", ")", "#NEWLINE#", "usergroup", "=", "context", ".", "get", "(", "'usergroup'", ")", "#NEWLINE#", "if", "usergroup", ":", "#NEWLINE#", "#INDENT#", "if", "usergroup", ".", "project", ".", "islocked", ":", "#NEWLINE#", "#INDENT#", "messages", ".", "error", "(", "self", ".", "request", ",", "'The project is locked. User group cannot be deleted.'", ")", "#NEWLINE#", "return", "redirect", "(", "'admin:usergroup_settings'", ",", "project_id", "=", "project_id", ",", "usergroup_id", "=", "usergroup_id", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "usergroup", ".", "delete", "(", ")", "#NEWLINE#", "messages", ".", "success", "(", "self", ".", "request", ",", "'The user group has been deleted.'", ")", "#NEWLINE#", "return", "redirect", "(", "'admin:usergroup_list'", ",", "project_id", "=", "project_id", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "return", "self", ".", "render_to_response", "(", "context", ")"], "edges": [[1, 5, 7, "enum_FIELD"], [12, 13, 7, "enum_FIELD"], [14, 22, 7, "enum_FIELD"], [25, 31, 7, "enum_FIELD"], [35, 36, 7, "enum_FIELD"], [108, 112, 7, "enum_FIELD"], [22, 18, 7, "enum_FIELD"], [31, 29, 7, "enum_FIELD"], [46, 44, 7, "enum_FIELD"], [112, 110, 7, "enum_FIELD"], [18, 17, 7, "enum_FIELD"], [29, 28, 7, "enum_FIELD"], [44, 42, 7, "enum_FIELD"], [48, 56, 7, "enum_FIELD"], [60, 64, 7, "enum_FIELD"], [78, 82, 7, "enum_FIELD"], [84, 92, 7, "enum_FIELD"], [96, 100, 7, "enum_FIELD"], [110, 109, 7, "enum_FIELD"], [42, 41, 7, "enum_FIELD"], [56, 50, 7, "enum_FIELD"], [64, 61, 7, "enum_FIELD"], [82, 80, 7, "enum_FIELD"], [92, 86, 7, "enum_FIELD"], [100, 97, 7, "enum_FIELD"], [50, 49, 7, "enum_FIELD"], [54, 53, 7, "enum_FIELD"], [65, 67, 7, "enum_FIELD"], [69, 71, 7, "enum_FIELD"], [80, 79, 7, "enum_FIELD"], [86, 85, 7, "enum_FIELD"], [90, 89, 7, "enum_FIELD"], [101, 103, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [17, 2, 10, "enum_LAST_LEXICAL_USE"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [21, 6, 10, "enum_LAST_LEXICAL_USE"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [23, 8, 10, "enum_LAST_LEXICAL_USE"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [28, 15, 10, "enum_LAST_LEXICAL_USE"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 35, 9, "enum_NEXT_SYNTAX"], [36, 26, 10, "enum_LAST_LEXICAL_USE"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 40, 9, "enum_NEXT_SYNTAX"], [41, 36, 10, "enum_LAST_LEXICAL_USE"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [53, 17, 10, "enum_LAST_LEXICAL_USE"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [67, 21, 10, "enum_LAST_LEXICAL_USE"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [71, 23, 10, "enum_LAST_LEXICAL_USE"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 78, 9, "enum_NEXT_SYNTAX"], [79, 41, 10, "enum_LAST_LEXICAL_USE"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [85, 49, 10, "enum_LAST_LEXICAL_USE"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [89, 53, 10, "enum_LAST_LEXICAL_USE"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 96, 9, "enum_NEXT_SYNTAX"], [97, 61, 10, "enum_LAST_LEXICAL_USE"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [103, 67, 10, "enum_LAST_LEXICAL_USE"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 108, 9, "enum_NEXT_SYNTAX"], [109, 89, 10, "enum_LAST_LEXICAL_USE"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [113, 28, 10, "enum_LAST_LEXICAL_USE"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [5, 12, 1, "enum_CFG_NEXT"], [12, 14, 1, "enum_CFG_NEXT"], [14, 25, 1, "enum_CFG_NEXT"], [25, 36, 1, "enum_CFG_NEXT"], [36, 44, 1, "enum_CFG_NEXT"], [36, 108, 1, "enum_CFG_NEXT"], [44, 78, 1, "enum_CFG_NEXT"], [44, 48, 1, "enum_CFG_NEXT"], [48, 60, 1, "enum_CFG_NEXT"], [78, 84, 1, "enum_CFG_NEXT"], [84, 96, 1, "enum_CFG_NEXT"], [17, 2, 3, "enum_LAST_WRITE"], [21, 6, 3, "enum_LAST_WRITE"], [23, 8, 3, "enum_LAST_WRITE"], [28, 15, 3, "enum_LAST_WRITE"], [36, 26, 3, "enum_LAST_WRITE"], [41, 36, 2, "enum_LAST_READ"], [41, 26, 3, "enum_LAST_WRITE"], [53, 17, 2, "enum_LAST_READ"], [53, 2, 3, "enum_LAST_WRITE"], [67, 21, 2, "enum_LAST_READ"], [67, 6, 3, "enum_LAST_WRITE"], [71, 23, 2, "enum_LAST_READ"], [71, 8, 3, "enum_LAST_WRITE"], [79, 41, 2, "enum_LAST_READ"], [79, 26, 3, "enum_LAST_WRITE"], [89, 17, 2, "enum_LAST_READ"], [89, 2, 3, "enum_LAST_WRITE"], [103, 21, 2, "enum_LAST_READ"], [103, 6, 3, "enum_LAST_WRITE"], [109, 17, 2, "enum_LAST_READ"], [109, 2, 3, "enum_LAST_WRITE"], [113, 28, 2, "enum_LAST_READ"], [113, 15, 3, "enum_LAST_WRITE"], [15, 21, 4, "enum_COMPUTED_FROM"], [15, 23, 4, "enum_COMPUTED_FROM"], [15, 17, 4, "enum_COMPUTED_FROM"], [26, 28, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "ExCiteS", "repo": "geokey", "path": "geokey/users/views.py", "id": 4664, "has_bug": false, "code_full": "from typing import Any, Dict, Optional\n\nfrom django.contrib import messages\nfrom django.http import HttpRequest, HttpResponse, HttpResponseRedirect\nfrom django.shortcuts import redirect\n\n\nclass Class:\n    request: Any\n\n    def get_context_data(self, project_id: int, usergroup_id: int) -> Dict[str, Any]:\n        return {}\n    \n    def render_to_response(self, context: Dict[str, Any]) -> HttpResponse:\n        return HttpResponse()\n\n    def get(self, request: HttpRequest, project_id: int, usergroup_id: int) -> HttpResponse:\n        \"\"\"\n        Deletes the user group.\n\n        Parameter\n        ---------\n        request : django.http.HttpRequest\n            Object representing the request\n        project_id : int\n            Identifies the project in the database\n        usergroup_id : int\n            Identifies the user group in the database\n\n        Returns\n        -------\n        django.http.HttpResponseRedirect\n            Redirects to user group list if user group is deleted, user group\n            settings if project is locked\n        django.http.HttpResponse\n            Rendered template, if project or user group does not exist\n        \"\"\"\n\n        context: Dict[str, Any] = self.get_context_data(project_id, usergroup_id)\n        usergroup: Optional[Any] = context.get('usergroup')\n\n        if usergroup:\n            if usergroup.project.islocked:\n                messages.error(\n                    self.request,\n                    'The project is locked. User group cannot be deleted.'\n                )\n                return redirect(\n                    'admin:usergroup_settings',\n                    project_id=project_id,\n                    usergroup_id=usergroup_id\n                )\n            else:\n                usergroup.delete()\n\n                messages.success(\n                    self.request,\n                    'The user group has been deleted.'\n                )\n\n                return redirect('admin:usergroup_list', project_id=project_id)\n\n        return self.render_to_response(context)\n", "code": "def get(self, request: HttpRequest, project_id: int, usergroup_id: int) -> HttpResponse:\n    \"\"\"\n    Deletes the user group.\n\n    Parameter\n    ---------\n    request : django.http.HttpRequest\n        Object representing the request\n    project_id : int\n        Identifies the project in the database\n    usergroup_id : int\n        Identifies the user group in the database\n\n    Returns\n    -------\n    django.http.HttpResponseRedirect\n        Redirects to user group list if user group is deleted, user group\n        settings if project is locked\n    django.http.HttpResponse\n        Rendered template, if project or user group does not exist\n    \"\"\"\n\n    context: Dict[str, Any] = self.get_context_data(project_id, usergroup_id)\n    usergroup: Optional[Any] = context.get('usergroup')\n\n    if usergroup:\n        if usergroup.project.islocked:\n            messages.error(\n                self.request,\n                'The project is locked. User group cannot be deleted.'\n            )\n            return redirect(\n                'admin:usergroup_settings',\n                project_id=project_id,\n                usergroup_id=usergroup_id\n            )\n        else:\n            usergroup.delete()\n\n            messages.success(\n                self.request,\n                'The user group has been deleted.'\n            )\n\n            return redirect('admin:usergroup_list', project_id=project_id)\n\n    return self.render_to_response(context)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "6a6753ee384ed0fb9c07838dff1ddd1370228891"}
{"source_tokens": ["#NEWLINE#", "def _send_payments(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "payments_to_send", "=", "{", "}", "#NEWLINE#", "for", "(", "address", ",", "points", ")", "in", "self", ".", "queued_payments", ".", "items", "(", ")", ":", "#NEWLINE#", "#INDENT#", "log", ".", "info", "(", "'Should be sending %s points to %s'", ",", "str", "(", "points", ")", ",", "str", "(", "address", ")", ")", "#NEWLINE#", "payments_to_send", "[", "address", "]", "=", "points", "#NEWLINE#", "self", ".", "total_reserved_points", "-=", "points", "#NEWLINE#", "self", ".", "wallet_balance", "-=", "points", "#NEWLINE#", "del", "self", ".", "queued_payments", "[", "address", "]", "#NEWLINE#", "#UNINDENT#", "if", "payments_to_send", ":", "#NEWLINE#", "#INDENT#", "log", ".", "info", "(", "'Creating a transaction with outputs %s'", ",", "str", "(", "payments_to_send", ")", ")", "#NEWLINE#", "d", "=", "self", ".", "_do_send_many", "(", "payments_to_send", ")", "#NEWLINE#", "d", ".", "addCallback", "(", "(", "lambda", "txid", ":", "log", ".", "debug", "(", "'Sent transaction %s'", ",", "txid", ")", ")", ")", "#NEWLINE#", "return", "d", "#NEWLINE#", "#UNINDENT#", "log", ".", "info", "(", "'There were no payments to send'", ")", "#NEWLINE#", "return", "defer", ".", "succeed", "(", "True", ")"], "edges": [[6, 9, 7, "enum_FIELD"], [18, 15, 7, "enum_FIELD"], [18, 24, 7, "enum_FIELD"], [74, 75, 7, "enum_FIELD"], [122, 126, 7, "enum_FIELD"], [130, 134, 7, "enum_FIELD"], [24, 22, 7, "enum_FIELD"], [28, 34, 7, "enum_FIELD"], [45, 51, 7, "enum_FIELD"], [52, 54, 7, "enum_FIELD"], [52, 57, 7, "enum_FIELD"], [58, 60, 7, "enum_FIELD"], [58, 63, 7, "enum_FIELD"], [78, 84, 7, "enum_FIELD"], [90, 96, 7, "enum_FIELD"], [99, 103, 7, "enum_FIELD"], [119, 120, 7, "enum_FIELD"], [126, 124, 7, "enum_FIELD"], [134, 132, 7, "enum_FIELD"], [22, 20, 7, "enum_FIELD"], [34, 30, 7, "enum_FIELD"], [47, 46, 7, "enum_FIELD"], [47, 48, 7, "enum_FIELD"], [54, 53, 7, "enum_FIELD"], [60, 59, 7, "enum_FIELD"], [69, 67, 7, "enum_FIELD"], [69, 70, 7, "enum_FIELD"], [84, 80, 7, "enum_FIELD"], [96, 94, 7, "enum_FIELD"], [103, 101, 7, "enum_FIELD"], [124, 123, 7, "enum_FIELD"], [132, 131, 7, "enum_FIELD"], [20, 19, 7, "enum_FIELD"], [30, 29, 7, "enum_FIELD"], [36, 35, 7, "enum_FIELD"], [41, 40, 7, "enum_FIELD"], [67, 66, 7, "enum_FIELD"], [80, 79, 7, "enum_FIELD"], [86, 85, 7, "enum_FIELD"], [94, 93, 7, "enum_FIELD"], [101, 100, 7, "enum_FIELD"], [105, 113, 7, "enum_FIELD"], [113, 109, 7, "enum_FIELD"], [109, 108, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [19, 2, 10, "enum_LAST_LEXICAL_USE"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [37, 16, 10, "enum_LAST_LEXICAL_USE"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [40, 35, 10, "enum_LAST_LEXICAL_USE"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [42, 14, 10, "enum_LAST_LEXICAL_USE"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [46, 7, 10, "enum_LAST_LEXICAL_USE"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [48, 42, 10, "enum_LAST_LEXICAL_USE"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [51, 37, 10, "enum_LAST_LEXICAL_USE"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [53, 19, 10, "enum_LAST_LEXICAL_USE"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [57, 51, 10, "enum_LAST_LEXICAL_USE"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [59, 53, 10, "enum_LAST_LEXICAL_USE"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [63, 57, 10, "enum_LAST_LEXICAL_USE"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 65, 9, "enum_NEXT_SYNTAX"], [66, 59, 10, "enum_LAST_LEXICAL_USE"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [70, 48, 10, "enum_LAST_LEXICAL_USE"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 74, 9, "enum_NEXT_SYNTAX"], [75, 46, 10, "enum_LAST_LEXICAL_USE"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 78, 9, "enum_NEXT_SYNTAX"], [79, 29, 10, "enum_LAST_LEXICAL_USE"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [85, 40, 10, "enum_LAST_LEXICAL_USE"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [87, 75, 10, "enum_LAST_LEXICAL_USE"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [93, 66, 10, "enum_LAST_LEXICAL_USE"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [97, 87, 10, "enum_LAST_LEXICAL_USE"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [100, 91, 10, "enum_LAST_LEXICAL_USE"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [108, 79, 10, "enum_LAST_LEXICAL_USE"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [114, 106, 10, "enum_LAST_LEXICAL_USE"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 119, 9, "enum_NEXT_SYNTAX"], [120, 100, 10, "enum_LAST_LEXICAL_USE"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 122, 9, "enum_NEXT_SYNTAX"], [123, 108, 10, "enum_LAST_LEXICAL_USE"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [6, 24, 1, "enum_CFG_NEXT"], [24, 15, 1, "enum_CFG_NEXT"], [15, 75, 1, "enum_CFG_NEXT"], [15, 28, 1, "enum_CFG_NEXT"], [28, 45, 1, "enum_CFG_NEXT"], [45, 52, 1, "enum_CFG_NEXT"], [52, 58, 1, "enum_CFG_NEXT"], [58, 65, 1, "enum_CFG_NEXT"], [65, 15, 1, "enum_CFG_NEXT"], [75, 78, 1, "enum_CFG_NEXT"], [75, 122, 1, "enum_CFG_NEXT"], [78, 90, 1, "enum_CFG_NEXT"], [90, 99, 1, "enum_CFG_NEXT"], [99, 119, 1, "enum_CFG_NEXT"], [122, 130, 1, "enum_CFG_NEXT"], [19, 2, 3, "enum_LAST_WRITE"], [14, 70, 2, "enum_LAST_READ"], [14, 14, 3, "enum_LAST_WRITE"], [16, 63, 2, "enum_LAST_READ"], [16, 16, 3, "enum_LAST_WRITE"], [29, 29, 2, "enum_LAST_READ"], [35, 40, 2, "enum_LAST_READ"], [37, 63, 2, "enum_LAST_READ"], [37, 16, 3, "enum_LAST_WRITE"], [40, 35, 2, "enum_LAST_READ"], [42, 70, 2, "enum_LAST_READ"], [42, 14, 3, "enum_LAST_WRITE"], [51, 37, 2, "enum_LAST_READ"], [51, 16, 3, "enum_LAST_WRITE"], [46, 46, 2, "enum_LAST_READ"], [46, 7, 3, "enum_LAST_WRITE"], [48, 42, 2, "enum_LAST_READ"], [48, 14, 3, "enum_LAST_WRITE"], [57, 51, 2, "enum_LAST_READ"], [57, 16, 3, "enum_LAST_WRITE"], [53, 19, 2, "enum_LAST_READ"], [53, 66, 2, "enum_LAST_READ"], [53, 2, 3, "enum_LAST_WRITE"], [63, 57, 2, "enum_LAST_READ"], [63, 16, 3, "enum_LAST_WRITE"], [59, 53, 2, "enum_LAST_READ"], [59, 2, 3, "enum_LAST_WRITE"], [66, 59, 2, "enum_LAST_READ"], [66, 2, 3, "enum_LAST_WRITE"], [70, 48, 2, "enum_LAST_READ"], [70, 14, 3, "enum_LAST_WRITE"], [75, 46, 2, "enum_LAST_READ"], [75, 7, 3, "enum_LAST_WRITE"], [79, 29, 2, "enum_LAST_READ"], [85, 40, 2, "enum_LAST_READ"], [87, 75, 2, "enum_LAST_READ"], [87, 7, 3, "enum_LAST_WRITE"], [93, 19, 2, "enum_LAST_READ"], [93, 66, 2, "enum_LAST_READ"], [93, 2, 3, "enum_LAST_WRITE"], [97, 87, 2, "enum_LAST_READ"], [97, 7, 3, "enum_LAST_WRITE"], [100, 91, 3, "enum_LAST_WRITE"], [108, 79, 2, "enum_LAST_READ"], [114, 106, 3, "enum_LAST_WRITE"], [120, 100, 2, "enum_LAST_READ"], [120, 91, 3, "enum_LAST_WRITE"], [123, 29, 2, "enum_LAST_READ"], [47, 51, 4, "enum_COMPUTED_FROM"], [91, 97, 4, "enum_COMPUTED_FROM"], [91, 93, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "lbryio", "repo": "lbry", "path": "lbrynet/core/LBRYcrdWallet.py", "id": 23414, "has_bug": false, "code_full": "import logging\nfrom typing import Any, Dict\n\nfrom twisted.internet import defer\n\nlog = logging.getLogger(__name__)\n\nclass Class:\n    queued_payments: Dict[str, int]\n    total_reserved_points: float\n    wallet_balance: float\n\n    def _do_send_many(self, payments_to_send: Dict[str, float]) -> defer.Deferred:\n        pass\n\n    def _send_payments(self) -> defer.Deferred:\n        payments_to_send: Dict[str, float] = {}\n        for address, points in self.queued_payments.items():\n            log.info(\"Should be sending %s points to %s\", str(points), str(address))\n            payments_to_send[address] = points\n            self.total_reserved_points -= points\n            self.wallet_balance -= points\n            del self.queued_payments[address]\n        if payments_to_send:\n            log.info(\"Creating a transaction with outputs %s\", str(payments_to_send))\n            d: defer.Deferred = self._do_send_many(payments_to_send)\n            d.addCallback(lambda txid: log.debug(\"Sent transaction %s\", txid))\n            return d\n        log.info(\"There were no payments to send\")\n        return defer.succeed(True)\n", "code": "def _send_payments(self) -> defer.Deferred:\n    payments_to_send: Dict[str, float] = {}\n    for address, points in self.queued_payments.items():\n        log.info(\"Should be sending %s points to %s\", str(points), str(address))\n        payments_to_send[address] = points\n        self.total_reserved_points -= points\n        self.wallet_balance -= points\n        del self.queued_payments[address]\n    if payments_to_send:\n        log.info(\"Creating a transaction with outputs %s\", str(payments_to_send))\n        d: defer.Deferred = self._do_send_many(payments_to_send)\n        d.addCallback(lambda txid: log.debug(\"Sent transaction %s\", txid))\n        return d\n    log.info(\"There were no payments to send\")\n    return defer.succeed(True)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "08b612575ce53e8a649bca5950fd1081ce50e889"}
{"source_tokens": ["#NEWLINE#", "def create_node(", "self", ",", "hostname", ",", "image_id", "=", "None", ",", "size_id", "=", "None", ",", "**kwds", ")", ":", "#NEWLINE#", "#INDENT#", "image_id", "=", "self", ".", "_get_image_id", "(", ")", "#NEWLINE#", "image", "=", "self", ".", "_image_from_id", "(", "image_id", ")", "#NEWLINE#", "size_id", "=", "self", ".", "_get_size_id", "(", ")", "#NEWLINE#", "size", "=", "self", ".", "_size_from_id", "(", "size_id", ")", "#NEWLINE#", "if", "(", "'ex_keyname'", "not in", "kwds", ")", ":", "#NEWLINE#", "#INDENT#", "kwds", "[", "'ex_keyname'", "]", "=", "self", ".", "_driver_options", "(", ")", "[", "'ex_keyname'", "]", "#NEWLINE#", "#UNINDENT#", "node", "=", "self", ".", "conn", ".", "create_node", "(", "name", "=", "hostname", ",", "image", "=", "image", ",", "size", "=", "size", ",", "**", "kwds", ")", "#NEWLINE#", "return", "node"], "edges": [[1, 9, 7, "enum_FIELD"], [18, 24, 7, "enum_FIELD"], [26, 32, 7, "enum_FIELD"], [35, 41, 7, "enum_FIELD"], [43, 49, 7, "enum_FIELD"], [53, 56, 7, "enum_FIELD"], [76, 92, 7, "enum_FIELD"], [101, 102, 7, "enum_FIELD"], [24, 22, 7, "enum_FIELD"], [32, 30, 7, "enum_FIELD"], [41, 39, 7, "enum_FIELD"], [49, 47, 7, "enum_FIELD"], [56, 55, 7, "enum_FIELD"], [61, 72, 7, "enum_FIELD"], [92, 82, 7, "enum_FIELD"], [22, 21, 7, "enum_FIELD"], [30, 29, 7, "enum_FIELD"], [39, 38, 7, "enum_FIELD"], [47, 46, 7, "enum_FIELD"], [63, 62, 7, "enum_FIELD"], [63, 64, 7, "enum_FIELD"], [72, 70, 7, "enum_FIELD"], [72, 73, 7, "enum_FIELD"], [82, 80, 7, "enum_FIELD"], [85, 87, 7, "enum_FIELD"], [89, 91, 7, "enum_FIELD"], [93, 95, 7, "enum_FIELD"], [97, 98, 7, "enum_FIELD"], [70, 68, 7, "enum_FIELD"], [80, 79, 7, "enum_FIELD"], [68, 67, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 18, 9, "enum_NEXT_SYNTAX"], [19, 6, 10, "enum_LAST_LEXICAL_USE"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [21, 2, 10, "enum_LAST_LEXICAL_USE"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [29, 21, 10, "enum_LAST_LEXICAL_USE"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [33, 19, 10, "enum_LAST_LEXICAL_USE"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [36, 10, 10, "enum_LAST_LEXICAL_USE"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [38, 29, 10, "enum_LAST_LEXICAL_USE"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [46, 38, 10, "enum_LAST_LEXICAL_USE"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [50, 36, 10, "enum_LAST_LEXICAL_USE"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 61, 9, "enum_NEXT_SYNTAX"], [62, 57, 10, "enum_LAST_LEXICAL_USE"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [67, 46, 10, "enum_LAST_LEXICAL_USE"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [79, 67, 10, "enum_LAST_LEXICAL_USE"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [87, 4, 10, "enum_LAST_LEXICAL_USE"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [91, 27, 10, "enum_LAST_LEXICAL_USE"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [95, 44, 10, "enum_LAST_LEXICAL_USE"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [98, 62, 10, "enum_LAST_LEXICAL_USE"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 101, 9, "enum_NEXT_SYNTAX"], [102, 77, 10, "enum_LAST_LEXICAL_USE"], [101, 102, 9, "enum_NEXT_SYNTAX"], [8, 12, 1, "enum_CFG_NEXT"], [12, 1, 1, "enum_CFG_NEXT"], [9, 18, 1, "enum_CFG_NEXT"], [18, 26, 1, "enum_CFG_NEXT"], [26, 35, 1, "enum_CFG_NEXT"], [35, 43, 1, "enum_CFG_NEXT"], [43, 56, 1, "enum_CFG_NEXT"], [56, 76, 1, "enum_CFG_NEXT"], [56, 61, 1, "enum_CFG_NEXT"], [61, 76, 1, "enum_CFG_NEXT"], [76, 101, 1, "enum_CFG_NEXT"], [21, 2, 3, "enum_LAST_WRITE"], [19, 6, 3, "enum_LAST_WRITE"], [29, 21, 2, "enum_LAST_READ"], [29, 2, 3, "enum_LAST_WRITE"], [33, 19, 3, "enum_LAST_WRITE"], [38, 29, 2, "enum_LAST_READ"], [38, 2, 3, "enum_LAST_WRITE"], [36, 10, 3, "enum_LAST_WRITE"], [46, 38, 2, "enum_LAST_READ"], [46, 2, 3, "enum_LAST_WRITE"], [50, 36, 3, "enum_LAST_WRITE"], [67, 46, 2, "enum_LAST_READ"], [67, 2, 3, "enum_LAST_WRITE"], [62, 57, 2, "enum_LAST_READ"], [79, 67, 2, "enum_LAST_READ"], [79, 46, 2, "enum_LAST_READ"], [79, 2, 3, "enum_LAST_WRITE"], [87, 4, 3, "enum_LAST_WRITE"], [91, 27, 3, "enum_LAST_WRITE"], [95, 44, 3, "enum_LAST_WRITE"], [98, 62, 2, "enum_LAST_READ"], [98, 57, 2, "enum_LAST_READ"], [102, 77, 3, "enum_LAST_WRITE"], [19, 21, 4, "enum_COMPUTED_FROM"], [27, 33, 4, "enum_COMPUTED_FROM"], [27, 29, 4, "enum_COMPUTED_FROM"], [36, 38, 4, "enum_COMPUTED_FROM"], [44, 50, 4, "enum_COMPUTED_FROM"], [44, 46, 4, "enum_COMPUTED_FROM"], [77, 87, 4, "enum_COMPUTED_FROM"], [77, 91, 4, "enum_COMPUTED_FROM"], [77, 95, 4, "enum_COMPUTED_FROM"], [77, 98, 4, "enum_COMPUTED_FROM"], [77, 79, 4, "enum_COMPUTED_FROM"], [63, 67, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "chapmanb", "repo": "cloudbiolinux", "path": "cloudbio/deploy/vmlauncher/__init__.py", "id": 10340, "has_bug": false, "code_full": "from typing import Any, Dict, Optional\n\n\nclass Connection:\n    def create_node(self, name: str, image: Any, size: Any, **kwargs: Dict[str, Any]) -> Any:\n        pass\n\nclass Class:\n    conn: Connection\n\n    def _get_image_id(self) -> str:\n        return \"\"\n\n    def _image_from_id(self, image_id: Optional[str]) -> Any:\n        pass\n\n    def _get_size_id(self) -> str:\n        return \"\"\n    \n    def _size_from_id(self, size_id: Optional[str]) -> Any:\n        pass\n\n    def _driver_options(self) -> Dict[str, Any]:\n        return {}\n\n    def create_node(self, hostname: str, image_id: Optional[str]=None, size_id: Optional[str]=None, **kwds) -> Any:\n        image_id: str = self._get_image_id()\n        image: Any = self._image_from_id(image_id)\n        size_id: str = self._get_size_id()\n        size: Any = self._size_from_id(size_id)\n        if 'ex_keyname' not in kwds:\n            kwds['ex_keyname'] = self._driver_options()[\"keypair_name\"]\n        node = self.conn.create_node(name=hostname,\n                                        image=image,\n                                        size=size,\n                                        **kwds)\n        return node\n", "code": "def create_node(self, hostname: str, image_id: Optional[str]=None, size_id: Optional[str]=None, **kwds) -> Any:\n    image_id: str = self._get_image_id()\n    image: Any = self._image_from_id(image_id)\n    size_id: str = self._get_size_id()\n    size: Any = self._size_from_id(size_id)\n    if 'ex_keyname' not in kwds:\n        kwds['ex_keyname'] = self._driver_options()[\"keypair_name\"]\n    node = self.conn.create_node(name=hostname,\n                                    image=image,\n                                    size=size,\n                                    **kwds)\n    return node\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "70ff91711a54fe4f4b7c527916fd7b03495f1d2a"}
{"source_tokens": ["#NEWLINE#", "def test_main(", ")", ":", "#NEWLINE#", "#INDENT#", "app", "=", "get_qapp", "(", ")", "#NEWLINE#", "w", "=", "QMessageBox", "(", "QMessageBox", ".", "Critical", ",", "'Error'", ",", "'An error occurred'", ")", "#NEWLINE#", "w", ".", "setDetailedText", "(", "'Spam'", ")", "#NEWLINE#", "w", ".", "select_all", "(", ")", "#NEWLINE#", "w", ".", "copy_detailed", "(", ")", "#NEWLINE#", "assert", "(", "app", ".", "clipboard", "(", ")", ".", "text", "(", ")", "==", "'Spam'", ")", "#NEWLINE#", "app", ".", "quit", "(", ")"], "edges": [[5, 9, 7, "enum_FIELD"], [11, 19, 7, "enum_FIELD"], [24, 28, 7, "enum_FIELD"], [31, 35, 7, "enum_FIELD"], [37, 41, 7, "enum_FIELD"], [44, 55, 7, "enum_FIELD"], [58, 62, 7, "enum_FIELD"], [9, 8, 7, "enum_FIELD"], [19, 14, 7, "enum_FIELD"], [28, 26, 7, "enum_FIELD"], [35, 33, 7, "enum_FIELD"], [41, 39, 7, "enum_FIELD"], [55, 53, 7, "enum_FIELD"], [62, 60, 7, "enum_FIELD"], [17, 16, 7, "enum_FIELD"], [26, 25, 7, "enum_FIELD"], [33, 32, 7, "enum_FIELD"], [39, 38, 7, "enum_FIELD"], [53, 51, 7, "enum_FIELD"], [60, 59, 7, "enum_FIELD"], [51, 49, 7, "enum_FIELD"], [49, 47, 7, "enum_FIELD"], [47, 46, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [16, 14, 10, "enum_LAST_LEXICAL_USE"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [25, 12, 10, "enum_LAST_LEXICAL_USE"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [32, 25, 10, "enum_LAST_LEXICAL_USE"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [38, 32, 10, "enum_LAST_LEXICAL_USE"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [46, 6, 10, "enum_LAST_LEXICAL_USE"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [59, 46, 10, "enum_LAST_LEXICAL_USE"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [5, 11, 1, "enum_CFG_NEXT"], [11, 24, 1, "enum_CFG_NEXT"], [24, 31, 1, "enum_CFG_NEXT"], [31, 37, 1, "enum_CFG_NEXT"], [37, 44, 1, "enum_CFG_NEXT"], [44, 58, 1, "enum_CFG_NEXT"], [16, 14, 2, "enum_LAST_READ"], [25, 12, 3, "enum_LAST_WRITE"], [32, 25, 2, "enum_LAST_READ"], [32, 12, 3, "enum_LAST_WRITE"], [38, 32, 2, "enum_LAST_READ"], [38, 12, 3, "enum_LAST_WRITE"], [46, 6, 3, "enum_LAST_WRITE"], [59, 46, 2, "enum_LAST_READ"], [59, 6, 3, "enum_LAST_WRITE"], [6, 8, 4, "enum_COMPUTED_FROM"], [12, 14, 4, "enum_COMPUTED_FROM"], [12, 16, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "glue-viz", "repo": "glue", "path": "glue/utils/qt/tests/test_qmessagebox_widget.py", "id": 16601, "has_bug": false, "code_full": "from typing import Any\n\n\nclass QApplication:\n    def clipboard(self) -> Any:\n        pass\n\n    def quit(self):\n        pass\n\n\ndef get_qapp():\n    return QApplication()\n\n\nclass QMessageBox:\n    Critical: int = 0\n\n    def __init__(self, icon: int, title: str, text: str):\n        pass\n\n    def setDetailedText(self, text: str):\n        pass\n\n    def select_all(self):\n        pass\n\n    def copy_detailed(self):\n        pass\n\n\ndef test_main():\n\n    app: QApplication = get_qapp()\n\n    w = QMessageBox(QMessageBox.Critical, \"Error\", \"An error occurred\")\n    w.setDetailedText(\"Spam\")\n    w.select_all()\n    w.copy_detailed()\n\n    assert app.clipboard().text() == \"Spam\"\n\n    app.quit()\n", "code": "def test_main():\n\n    app: QApplication = get_qapp()\n\n    w = QMessageBox(QMessageBox.Critical, \"Error\", \"An error occurred\")\n    w.setDetailedText(\"Spam\")\n    w.select_all()\n    w.copy_detailed()\n\n    assert app.clipboard().text() == \"Spam\"\n\n    app.quit()\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "e36f292a72241c24d7f967bdc265bac68024f4b9"}
{"source_tokens": ["#NEWLINE#", "def __new__(", "cls", ",", "center", "=", "None", ",", "hradius", "=", "None", ",", "vradius", "=", "None", ",", "eccentricity", "=", "None", ",", "**kwargs", ")", ":", "#NEWLINE#", "#INDENT#", "hradius", "=", "sympify", "(", "hradius", ")", "#NEWLINE#", "vradius", "=", "sympify", "(", "vradius", ")", "#NEWLINE#", "eccentricity", "=", "sympify", "(", "eccentricity", ")", "#NEWLINE#", "if", "(", "center", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "center", "=", "Point", "(", "0", ",", "0", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "center", "=", "Point", "(", "center", ")", "#NEWLINE#", "#UNINDENT#", "if", "(", "len", "(", "center", ")", "!=", "2", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "ValueError", "(", "'The center of \"{0}\" must be a two dimensional point'", ".", "format", "(", "cls", ")", ")", "#NEWLINE#", "#UNINDENT#", "if", "(", "len", "(", "list", "(", "filter", "(", "None", ",", "(", "hradius", ",", "vradius", ",", "eccentricity", ")", ")", ")", ")", "!=", "2", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "ValueError", "(", "'Exactly two arguments of \"hradius\", \"vradius\", and \"eccentricity\" must not be None.\"'", ")", "#NEWLINE#", "#UNINDENT#", "if", "(", "eccentricity", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "hradius", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "hradius", "=", "(", "vradius", "/", "sqrt", "(", "(", "1", "-", "(", "eccentricity", "**", "2", ")", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "vradius", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "vradius", "=", "(", "hradius", "*", "sqrt", "(", "(", "1", "-", "(", "eccentricity", "**", "2", ")", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "if", "(", "hradius", "==", "vradius", ")", ":", "#NEWLINE#", "#INDENT#", "return", "Circle", "(", "center", ",", "hradius", ",", "**", "kwargs", ")", "#NEWLINE#", "#UNINDENT#", "return", "GeometryEntity", ".", "__new__", "(", "cls", ",", "center", ",", "hradius", ",", "vradius", ",", "**", "kwargs", ")"], "edges": [[1, 11, 7, "enum_FIELD"], [24, 28, 7, "enum_FIELD"], [31, 35, 7, "enum_FIELD"], [38, 42, 7, "enum_FIELD"], [52, 49, 7, "enum_FIELD"], [77, 83, 7, "enum_FIELD"], [101, 121, 7, "enum_FIELD"], [134, 137, 7, "enum_FIELD"], [207, 210, 7, "enum_FIELD"], [228, 236, 7, "enum_FIELD"], [28, 27, 7, "enum_FIELD"], [35, 34, 7, "enum_FIELD"], [42, 41, 7, "enum_FIELD"], [49, 48, 7, "enum_FIELD"], [54, 60, 7, "enum_FIELD"], [68, 72, 7, "enum_FIELD"], [83, 80, 7, "enum_FIELD"], [89, 91, 7, "enum_FIELD"], [121, 104, 7, "enum_FIELD"], [127, 129, 7, "enum_FIELD"], [137, 136, 7, "enum_FIELD"], [149, 146, 7, "enum_FIELD"], [210, 209, 7, "enum_FIELD"], [216, 220, 7, "enum_FIELD"], [236, 230, 7, "enum_FIELD"], [60, 57, 7, "enum_FIELD"], [72, 71, 7, "enum_FIELD"], [80, 79, 7, "enum_FIELD"], [91, 90, 7, "enum_FIELD"], [104, 103, 7, "enum_FIELD"], [129, 128, 7, "enum_FIELD"], [146, 145, 7, "enum_FIELD"], [151, 156, 7, "enum_FIELD"], [176, 179, 7, "enum_FIELD"], [220, 217, 7, "enum_FIELD"], [230, 229, 7, "enum_FIELD"], [241, 242, 7, "enum_FIELD"], [95, 93, 7, "enum_FIELD"], [106, 105, 7, "enum_FIELD"], [156, 155, 7, "enum_FIELD"], [156, 158, 7, "enum_FIELD"], [179, 178, 7, "enum_FIELD"], [184, 189, 7, "enum_FIELD"], [223, 224, 7, "enum_FIELD"], [93, 92, 7, "enum_FIELD"], [110, 107, 7, "enum_FIELD"], [158, 157, 7, "enum_FIELD"], [189, 188, 7, "enum_FIELD"], [189, 191, 7, "enum_FIELD"], [161, 160, 7, "enum_FIELD"], [161, 164, 7, "enum_FIELD"], [191, 190, 7, "enum_FIELD"], [164, 163, 7, "enum_FIELD"], [164, 165, 7, "enum_FIELD"], [194, 193, 7, "enum_FIELD"], [194, 197, 7, "enum_FIELD"], [197, 196, 7, "enum_FIELD"], [197, 198, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 24, 9, "enum_NEXT_SYNTAX"], [25, 8, 10, "enum_LAST_LEXICAL_USE"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [29, 25, 10, "enum_LAST_LEXICAL_USE"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [32, 12, 10, "enum_LAST_LEXICAL_USE"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [34, 27, 10, "enum_LAST_LEXICAL_USE"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [36, 32, 10, "enum_LAST_LEXICAL_USE"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [39, 16, 10, "enum_LAST_LEXICAL_USE"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [41, 34, 10, "enum_LAST_LEXICAL_USE"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [43, 39, 10, "enum_LAST_LEXICAL_USE"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [48, 4, 10, "enum_LAST_LEXICAL_USE"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 54, 9, "enum_NEXT_SYNTAX"], [55, 48, 10, "enum_LAST_LEXICAL_USE"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 68, 9, "enum_NEXT_SYNTAX"], [69, 55, 10, "enum_LAST_LEXICAL_USE"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [71, 57, 10, "enum_LAST_LEXICAL_USE"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [73, 69, 10, "enum_LAST_LEXICAL_USE"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [81, 73, 10, "enum_LAST_LEXICAL_USE"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [96, 2, 10, "enum_LAST_LEXICAL_USE"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [103, 79, 10, "enum_LAST_LEXICAL_USE"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [112, 29, 10, "enum_LAST_LEXICAL_USE"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [114, 36, 10, "enum_LAST_LEXICAL_USE"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [116, 43, 10, "enum_LAST_LEXICAL_USE"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 127, 9, "enum_NEXT_SYNTAX"], [128, 90, 10, "enum_LAST_LEXICAL_USE"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [136, 116, 10, "enum_LAST_LEXICAL_USE"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [145, 112, 10, "enum_LAST_LEXICAL_USE"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 151, 9, "enum_NEXT_SYNTAX"], [152, 145, 10, "enum_LAST_LEXICAL_USE"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [155, 114, 10, "enum_LAST_LEXICAL_USE"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [163, 136, 10, "enum_LAST_LEXICAL_USE"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [178, 155, 10, "enum_LAST_LEXICAL_USE"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 184, 9, "enum_NEXT_SYNTAX"], [185, 178, 10, "enum_LAST_LEXICAL_USE"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [188, 152, 10, "enum_LAST_LEXICAL_USE"], [187, 188, 9, "enum_NEXT_SYNTAX"], [188, 189, 9, "enum_NEXT_SYNTAX"], [190, 157, 10, "enum_LAST_LEXICAL_USE"], [189, 190, 9, "enum_NEXT_SYNTAX"], [190, 191, 9, "enum_NEXT_SYNTAX"], [191, 192, 9, "enum_NEXT_SYNTAX"], [192, 193, 9, "enum_NEXT_SYNTAX"], [193, 194, 9, "enum_NEXT_SYNTAX"], [194, 195, 9, "enum_NEXT_SYNTAX"], [196, 163, 10, "enum_LAST_LEXICAL_USE"], [195, 196, 9, "enum_NEXT_SYNTAX"], [196, 197, 9, "enum_NEXT_SYNTAX"], [197, 198, 9, "enum_NEXT_SYNTAX"], [198, 199, 9, "enum_NEXT_SYNTAX"], [199, 200, 9, "enum_NEXT_SYNTAX"], [200, 201, 9, "enum_NEXT_SYNTAX"], [201, 202, 9, "enum_NEXT_SYNTAX"], [202, 207, 9, "enum_NEXT_SYNTAX"], [207, 208, 9, "enum_NEXT_SYNTAX"], [209, 188, 10, "enum_LAST_LEXICAL_USE"], [208, 209, 9, "enum_NEXT_SYNTAX"], [209, 210, 9, "enum_NEXT_SYNTAX"], [211, 185, 10, "enum_LAST_LEXICAL_USE"], [210, 211, 9, "enum_NEXT_SYNTAX"], [211, 212, 9, "enum_NEXT_SYNTAX"], [212, 213, 9, "enum_NEXT_SYNTAX"], [213, 216, 9, "enum_NEXT_SYNTAX"], [216, 217, 9, "enum_NEXT_SYNTAX"], [217, 218, 9, "enum_NEXT_SYNTAX"], [219, 81, 10, "enum_LAST_LEXICAL_USE"], [218, 219, 9, "enum_NEXT_SYNTAX"], [219, 220, 9, "enum_NEXT_SYNTAX"], [221, 209, 10, "enum_LAST_LEXICAL_USE"], [220, 221, 9, "enum_NEXT_SYNTAX"], [221, 222, 9, "enum_NEXT_SYNTAX"], [222, 223, 9, "enum_NEXT_SYNTAX"], [223, 224, 9, "enum_NEXT_SYNTAX"], [224, 225, 9, "enum_NEXT_SYNTAX"], [225, 228, 9, "enum_NEXT_SYNTAX"], [228, 229, 9, "enum_NEXT_SYNTAX"], [229, 230, 9, "enum_NEXT_SYNTAX"], [230, 231, 9, "enum_NEXT_SYNTAX"], [231, 232, 9, "enum_NEXT_SYNTAX"], [233, 96, 10, "enum_LAST_LEXICAL_USE"], [232, 233, 9, "enum_NEXT_SYNTAX"], [233, 234, 9, "enum_NEXT_SYNTAX"], [235, 219, 10, "enum_LAST_LEXICAL_USE"], [234, 235, 9, "enum_NEXT_SYNTAX"], [235, 236, 9, "enum_NEXT_SYNTAX"], [237, 221, 10, "enum_LAST_LEXICAL_USE"], [236, 237, 9, "enum_NEXT_SYNTAX"], [237, 238, 9, "enum_NEXT_SYNTAX"], [239, 211, 10, "enum_LAST_LEXICAL_USE"], [238, 239, 9, "enum_NEXT_SYNTAX"], [239, 240, 9, "enum_NEXT_SYNTAX"], [240, 241, 9, "enum_NEXT_SYNTAX"], [242, 224, 10, "enum_LAST_LEXICAL_USE"], [241, 242, 9, "enum_NEXT_SYNTAX"], [242, 243, 9, "enum_NEXT_SYNTAX"], [6, 10, 1, "enum_CFG_NEXT"], [10, 14, 1, "enum_CFG_NEXT"], [14, 18, 1, "enum_CFG_NEXT"], [18, 1, 1, "enum_CFG_NEXT"], [11, 24, 1, "enum_CFG_NEXT"], [24, 31, 1, "enum_CFG_NEXT"], [31, 38, 1, "enum_CFG_NEXT"], [38, 49, 1, "enum_CFG_NEXT"], [49, 54, 1, "enum_CFG_NEXT"], [49, 68, 1, "enum_CFG_NEXT"], [54, 83, 1, "enum_CFG_NEXT"], [68, 83, 1, "enum_CFG_NEXT"], [83, 89, 1, "enum_CFG_NEXT"], [83, 121, 1, "enum_CFG_NEXT"], [121, 127, 1, "enum_CFG_NEXT"], [121, 137, 1, "enum_CFG_NEXT"], [137, 210, 1, "enum_CFG_NEXT"], [137, 146, 1, "enum_CFG_NEXT"], [146, 151, 1, "enum_CFG_NEXT"], [146, 179, 1, "enum_CFG_NEXT"], [151, 210, 1, "enum_CFG_NEXT"], [179, 210, 1, "enum_CFG_NEXT"], [179, 184, 1, "enum_CFG_NEXT"], [184, 210, 1, "enum_CFG_NEXT"], [210, 228, 1, "enum_CFG_NEXT"], [210, 216, 1, "enum_CFG_NEXT"], [29, 8, 3, "enum_LAST_WRITE"], [25, 29, 2, "enum_LAST_READ"], [25, 8, 3, "enum_LAST_WRITE"], [34, 27, 2, "enum_LAST_READ"], [36, 12, 3, "enum_LAST_WRITE"], [32, 36, 2, "enum_LAST_READ"], [32, 12, 3, "enum_LAST_WRITE"], [41, 34, 2, "enum_LAST_READ"], [43, 16, 3, "enum_LAST_WRITE"], [39, 43, 2, "enum_LAST_READ"], [39, 16, 3, "enum_LAST_WRITE"], [48, 4, 3, "enum_LAST_WRITE"], [55, 48, 2, "enum_LAST_READ"], [55, 4, 3, "enum_LAST_WRITE"], [73, 48, 2, "enum_LAST_READ"], [73, 4, 3, "enum_LAST_WRITE"], [69, 73, 2, "enum_LAST_READ"], [69, 4, 3, "enum_LAST_WRITE"], [81, 48, 2, "enum_LAST_READ"], [81, 73, 2, "enum_LAST_READ"], [81, 55, 3, "enum_LAST_WRITE"], [81, 69, 3, "enum_LAST_WRITE"], [96, 2, 3, "enum_LAST_WRITE"], [103, 79, 2, "enum_LAST_READ"], [112, 29, 2, "enum_LAST_READ"], [112, 25, 3, "enum_LAST_WRITE"], [114, 36, 2, "enum_LAST_READ"], [114, 32, 3, "enum_LAST_WRITE"], [116, 43, 2, "enum_LAST_READ"], [116, 39, 3, "enum_LAST_WRITE"], [136, 116, 2, "enum_LAST_READ"], [136, 39, 3, "enum_LAST_WRITE"], [145, 112, 2, "enum_LAST_READ"], [145, 25, 3, "enum_LAST_WRITE"], [155, 114, 2, "enum_LAST_READ"], [155, 32, 3, "enum_LAST_WRITE"], [163, 136, 2, "enum_LAST_READ"], [163, 39, 3, "enum_LAST_WRITE"], [152, 145, 2, "enum_LAST_READ"], [152, 25, 3, "enum_LAST_WRITE"], [178, 114, 2, "enum_LAST_READ"], [178, 32, 3, "enum_LAST_WRITE"], [188, 145, 2, "enum_LAST_READ"], [188, 25, 3, "enum_LAST_WRITE"], [196, 136, 2, "enum_LAST_READ"], [196, 39, 3, "enum_LAST_WRITE"], [185, 178, 2, "enum_LAST_READ"], [185, 32, 3, "enum_LAST_WRITE"], [209, 112, 2, "enum_LAST_READ"], [209, 188, 2, "enum_LAST_READ"], [209, 145, 2, "enum_LAST_READ"], [209, 152, 3, "enum_LAST_WRITE"], [209, 25, 3, "enum_LAST_WRITE"], [211, 114, 2, "enum_LAST_READ"], [211, 155, 2, "enum_LAST_READ"], [211, 178, 2, "enum_LAST_READ"], [211, 32, 3, "enum_LAST_WRITE"], [211, 185, 3, "enum_LAST_WRITE"], [219, 81, 2, "enum_LAST_READ"], [219, 55, 3, "enum_LAST_WRITE"], [219, 69, 3, "enum_LAST_WRITE"], [221, 209, 2, "enum_LAST_READ"], [221, 152, 3, "enum_LAST_WRITE"], [221, 25, 3, "enum_LAST_WRITE"], [233, 2, 3, "enum_LAST_WRITE"], [235, 81, 2, "enum_LAST_READ"], [235, 55, 3, "enum_LAST_WRITE"], [235, 69, 3, "enum_LAST_WRITE"], [237, 209, 2, "enum_LAST_READ"], [237, 152, 3, "enum_LAST_WRITE"], [237, 25, 3, "enum_LAST_WRITE"], [239, 211, 2, "enum_LAST_READ"], [239, 32, 3, "enum_LAST_WRITE"], [239, 185, 3, "enum_LAST_WRITE"], [25, 27, 4, "enum_COMPUTED_FROM"], [25, 29, 4, "enum_COMPUTED_FROM"], [32, 34, 4, "enum_COMPUTED_FROM"], [32, 36, 4, "enum_COMPUTED_FROM"], [39, 41, 4, "enum_COMPUTED_FROM"], [39, 43, 4, "enum_COMPUTED_FROM"], [55, 57, 4, "enum_COMPUTED_FROM"], [69, 71, 4, "enum_COMPUTED_FROM"], [69, 73, 4, "enum_COMPUTED_FROM"], [152, 155, 4, "enum_COMPUTED_FROM"], [152, 157, 4, "enum_COMPUTED_FROM"], [152, 163, 4, "enum_COMPUTED_FROM"], [185, 188, 4, "enum_COMPUTED_FROM"], [185, 190, 4, "enum_COMPUTED_FROM"], [185, 196, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "sympy", "repo": "sympy", "path": "sympy/geometry/ellipse.py", "id": 56411, "has_bug": false, "code_full": "from typing import Any, Optional\n\nfrom sympy import sqrt, sympify\nfrom sympy.geometry import Circle, GeometryEntity, Point\n\n\nclass Ellipse:\n    def __new__(\n        cls, center: Optional[Point]=None, hradius: Optional[float]=None, vradius: Optional[float]=None, eccentricity: Optional[float]=None,\n            **kwargs) -> GeometryEntity:\n        hradius: float = sympify(hradius)\n        vradius: float = sympify(vradius)\n\n        eccentricity: float = sympify(eccentricity)\n\n        if center is None:\n            center = Point(0, 0)\n        else:\n            center = Point(center, dim=2)\n\n        if len(center) != 2:\n            raise ValueError('The center of \"{0}\" must be a two dimensional point'.format(cls))\n\n        if len(list(filter(None, (hradius, vradius, eccentricity)))) != 2:\n            raise ValueError('Exactly two arguments of \"hradius\", '\n                '\"vradius\", and \"eccentricity\" must not be None.\"')\n\n        if eccentricity is not None:\n            if hradius is None:\n                hradius: float = vradius / sqrt(1 - eccentricity**2)\n            elif vradius is None:\n                vradius: float = hradius * sqrt(1 - eccentricity**2)\n\n        if hradius == vradius:\n            return Circle(center, hradius, **kwargs)\n\n        return GeometryEntity.__new__(cls, center, hradius, vradius, **kwargs)\n", "code": "def __new__(\n    cls, center: Optional[Point]=None, hradius: Optional[float]=None, vradius: Optional[float]=None, eccentricity: Optional[float]=None,\n        **kwargs) -> GeometryEntity:\n    hradius: float = sympify(hradius)\n    vradius: float = sympify(vradius)\n\n    eccentricity: float = sympify(eccentricity)\n\n    if center is None:\n        center = Point(0, 0)\n    else:\n        center = Point(center, dim=2)\n\n    if len(center) != 2:\n        raise ValueError('The center of \"{0}\" must be a two dimensional point'.format(cls))\n\n    if len(list(filter(None, (hradius, vradius, eccentricity)))) != 2:\n        raise ValueError('Exactly two arguments of \"hradius\", '\n            '\"vradius\", and \"eccentricity\" must not be None.\"')\n\n    if eccentricity is not None:\n        if hradius is None:\n            hradius: float = vradius / sqrt(1 - eccentricity**2)\n        elif vradius is None:\n            vradius: float = hradius * sqrt(1 - eccentricity**2)\n\n    if hradius == vradius:\n        return Circle(center, hradius, **kwargs)\n\n    return GeometryEntity.__new__(cls, center, hradius, vradius, **kwargs)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "3ece4ea7b1b77bd36958ea5a2b820ec38f7eda37"}
{"source_tokens": ["#NEWLINE#", "def np_real_floor_impl(", "context", ",", "builder", ",", "sig", ",", "args", ")", ":", "#NEWLINE#", "#INDENT#", "_check_arity_and_homogeneity", "(", "sig", ",", "args", ",", "1", ")", "#NEWLINE#", "return", "mathimpl", ".", "call_fp_intrinsic", "(", "builder", ",", "'llvm.floor'", ",", "args", ")"], "edges": [[1, 5, 7, "enum_FIELD"], [12, 16, 7, "enum_FIELD"], [22, 28, 7, "enum_FIELD"], [16, 13, 7, "enum_FIELD"], [28, 24, 7, "enum_FIELD"], [24, 23, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [15, 6, 10, "enum_LAST_LEXICAL_USE"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [17, 8, 10, "enum_LAST_LEXICAL_USE"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [27, 4, 10, "enum_LAST_LEXICAL_USE"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [31, 17, 10, "enum_LAST_LEXICAL_USE"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [5, 12, 1, "enum_CFG_NEXT"], [12, 22, 1, "enum_CFG_NEXT"], [15, 6, 3, "enum_LAST_WRITE"], [17, 8, 3, "enum_LAST_WRITE"], [27, 4, 3, "enum_LAST_WRITE"], [31, 17, 2, "enum_LAST_READ"], [31, 8, 3, "enum_LAST_WRITE"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "numba", "repo": "numba", "path": "numba/targets/npyfuncs.py", "id": 30416, "has_bug": false, "code_full": "from typing import Any\n\nfrom numba.core.typing import signature\n\n\ndef _check_arity_and_homogeneity(sig: signature, args: Any, arity: int):\n    pass\n\n\nclass mathimpl:\n    @staticmethod\n    def call_fp_intrinsic(builder: Any, intrinsic: str, args: Any) -> Any:\n        pass\n\n\ndef np_real_floor_impl(context: Any, builder: Any, sig: signature, args: Any) -> Any:\n    _check_arity_and_homogeneity(sig, args, 1)\n\n    return mathimpl.call_fp_intrinsic(builder, 'llvm.floor', args)\n", "code": "def np_real_floor_impl(context: Any, builder: Any, sig: signature, args: Any) -> Any:\n    _check_arity_and_homogeneity(sig, args, 1)\n\n    return mathimpl.call_fp_intrinsic(builder, 'llvm.floor', args)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "fa79983920577d63bebdd7a6fa83e8991fef47d9"}
{"source_tokens": ["#NEWLINE#", "def _get_raw_data(", "self", ",", "shape", ",", "code", ",", "offset", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n    Return raw array from either the HDU's memory buffer or underlying\\n    file.\\n    \"", "#NEWLINE#", "if", "isinstance", "(", "shape", ",", "int", ")", ":", "#NEWLINE#", "#INDENT#", "shape", "=", "(", "shape", ",", ")", "#NEWLINE#", "#UNINDENT#", "if", "self", ".", "_buffer", ":", "#NEWLINE#", "#INDENT#", "return", "np", ".", "ndarray", "(", "shape", ",", "dtype", "=", "code", ",", "buffer", "=", "self", ".", "_buffer", ",", "offset", "=", "offset", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "self", ".", "_file", ":", "#NEWLINE#", "#INDENT#", "return", "self", ".", "_file", ".", "readarray", "(", "offset", "=", "offset", ",", "dtype", "=", "code", ",", "shape", "=", "shape", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "return", "None"], "edges": [[1, 5, 7, "enum_FIELD"], [12, 13, 7, "enum_FIELD"], [15, 19, 7, "enum_FIELD"], [37, 35, 7, "enum_FIELD"], [19, 16, 7, "enum_FIELD"], [24, 29, 7, "enum_FIELD"], [35, 34, 7, "enum_FIELD"], [40, 50, 7, "enum_FIELD"], [71, 69, 7, "enum_FIELD"], [50, 42, 7, "enum_FIELD"], [69, 68, 7, "enum_FIELD"], [74, 84, 7, "enum_FIELD"], [99, 100, 7, "enum_FIELD"], [42, 41, 7, "enum_FIELD"], [47, 49, 7, "enum_FIELD"], [51, 54, 7, "enum_FIELD"], [57, 59, 7, "enum_FIELD"], [84, 78, 7, "enum_FIELD"], [54, 53, 7, "enum_FIELD"], [78, 76, 7, "enum_FIELD"], [81, 83, 7, "enum_FIELD"], [85, 87, 7, "enum_FIELD"], [89, 91, 7, "enum_FIELD"], [76, 75, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [18, 4, 10, "enum_LAST_LEXICAL_USE"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 24, 9, "enum_NEXT_SYNTAX"], [25, 18, 10, "enum_LAST_LEXICAL_USE"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [28, 25, 10, "enum_LAST_LEXICAL_USE"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 33, 9, "enum_NEXT_SYNTAX"], [34, 2, 10, "enum_LAST_LEXICAL_USE"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [45, 28, 10, "enum_LAST_LEXICAL_USE"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [49, 6, 10, "enum_LAST_LEXICAL_USE"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [53, 34, 10, "enum_LAST_LEXICAL_USE"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [59, 8, 10, "enum_LAST_LEXICAL_USE"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 67, 9, "enum_NEXT_SYNTAX"], [68, 53, 10, "enum_LAST_LEXICAL_USE"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 74, 9, "enum_NEXT_SYNTAX"], [75, 68, 10, "enum_LAST_LEXICAL_USE"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [83, 59, 10, "enum_LAST_LEXICAL_USE"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [87, 49, 10, "enum_LAST_LEXICAL_USE"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [91, 45, 10, "enum_LAST_LEXICAL_USE"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [5, 12, 1, "enum_CFG_NEXT"], [12, 19, 1, "enum_CFG_NEXT"], [19, 24, 1, "enum_CFG_NEXT"], [19, 35, 1, "enum_CFG_NEXT"], [24, 35, 1, "enum_CFG_NEXT"], [35, 69, 1, "enum_CFG_NEXT"], [35, 40, 1, "enum_CFG_NEXT"], [69, 99, 1, "enum_CFG_NEXT"], [69, 74, 1, "enum_CFG_NEXT"], [18, 4, 3, "enum_LAST_WRITE"], [28, 18, 2, "enum_LAST_READ"], [28, 4, 3, "enum_LAST_WRITE"], [25, 28, 2, "enum_LAST_READ"], [25, 4, 3, "enum_LAST_WRITE"], [34, 2, 3, "enum_LAST_WRITE"], [45, 18, 2, "enum_LAST_READ"], [45, 28, 2, "enum_LAST_READ"], [45, 4, 3, "enum_LAST_WRITE"], [45, 25, 3, "enum_LAST_WRITE"], [49, 6, 3, "enum_LAST_WRITE"], [53, 34, 2, "enum_LAST_READ"], [53, 2, 3, "enum_LAST_WRITE"], [59, 8, 3, "enum_LAST_WRITE"], [68, 34, 2, "enum_LAST_READ"], [68, 2, 3, "enum_LAST_WRITE"], [75, 68, 2, "enum_LAST_READ"], [75, 2, 3, "enum_LAST_WRITE"], [83, 8, 3, "enum_LAST_WRITE"], [87, 6, 3, "enum_LAST_WRITE"], [91, 18, 2, "enum_LAST_READ"], [91, 28, 2, "enum_LAST_READ"], [91, 4, 3, "enum_LAST_WRITE"], [91, 25, 3, "enum_LAST_WRITE"], [25, 28, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "spacetelescope", "repo": "PyFITS", "path": "pyfits/hdu/base.py", "id": 51843, "has_bug": false, "code_full": "\nfrom typing import Any, Optional, Tuple, Union\n\nimport numpy as np\n\n\nclass Class:\n    _buffer: Optional[bytes] = None\n    _file: Optional[Any] = None\n\n    def _get_raw_data(self, shape: Union[int, Tuple], code: str, offset: int) -> Optional[np.ndarray]:\n        \"\"\"\n        Return raw array from either the HDU's memory buffer or underlying\n        file.\n        \"\"\"\n\n        if isinstance(shape, int):\n            shape: Tuple = (shape,)\n\n        if self._buffer:\n            return np.ndarray(shape, dtype=code, buffer=self._buffer,\n                                offset=offset)\n        elif self._file:\n            return self._file.readarray(offset=offset, dtype=code, shape=shape)\n        else:\n            return None\n", "code": "def _get_raw_data(self, shape: Union[int, Tuple], code: str, offset: int) -> Optional[np.ndarray]:\n    \"\"\"\n    Return raw array from either the HDU's memory buffer or underlying\n    file.\n    \"\"\"\n\n    if isinstance(shape, int):\n        shape: Tuple = (shape,)\n\n    if self._buffer:\n        return np.ndarray(shape, dtype=code, buffer=self._buffer,\n                            offset=offset)\n    elif self._file:\n        return self._file.readarray(offset=offset, dtype=code, shape=shape)\n    else:\n        return None\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "94edcc36e8bbb780c1a70ad1526816a30da34c4a"}
{"source_tokens": ["#NEWLINE#", "def per(", "rep", ",", "dom", "=", "dom", ",", "gens", "=", "gens", ",", "remove", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "remove", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "gens", "=", "(", "gens", "[", ":", "remove", "]", "+", "gens", "[", "(", "remove", "+", "1", ")", ":", "]", ")", "#NEWLINE#", "if", "(", "not", "gens", ")", ":", "#NEWLINE#", "#INDENT#", "return", "dom", ".", "to_sympy", "(", "rep", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "return", "cls", ".", "new", "(", "rep", ",", "*", "gens", ")"], "edges": [[1, 7, 7, "enum_FIELD"], [19, 22, 7, "enum_FIELD"], [66, 72, 7, "enum_FIELD"], [22, 21, 7, "enum_FIELD"], [27, 36, 7, "enum_FIELD"], [48, 50, 7, "enum_FIELD"], [72, 68, 7, "enum_FIELD"], [36, 32, 7, "enum_FIELD"], [36, 38, 7, "enum_FIELD"], [50, 51, 7, "enum_FIELD"], [56, 60, 7, "enum_FIELD"], [68, 67, 7, "enum_FIELD"], [73, 74, 7, "enum_FIELD"], [32, 31, 7, "enum_FIELD"], [32, 33, 7, "enum_FIELD"], [38, 37, 7, "enum_FIELD"], [38, 44, 7, "enum_FIELD"], [60, 58, 7, "enum_FIELD"], [33, 34, 7, "enum_FIELD"], [44, 41, 7, "enum_FIELD"], [58, 57, 7, "enum_FIELD"], [41, 40, 7, "enum_FIELD"], [41, 42, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [6, 4, 10, "enum_LAST_LEXICAL_USE"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [10, 8, 10, "enum_LAST_LEXICAL_USE"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [21, 12, 10, "enum_LAST_LEXICAL_USE"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 27, 9, "enum_NEXT_SYNTAX"], [28, 10, 10, "enum_LAST_LEXICAL_USE"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [31, 28, 10, "enum_LAST_LEXICAL_USE"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [34, 21, 10, "enum_LAST_LEXICAL_USE"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [37, 31, 10, "enum_LAST_LEXICAL_USE"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [40, 34, 10, "enum_LAST_LEXICAL_USE"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [51, 37, 10, "enum_LAST_LEXICAL_USE"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 56, 9, "enum_NEXT_SYNTAX"], [57, 6, 10, "enum_LAST_LEXICAL_USE"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [61, 2, 10, "enum_LAST_LEXICAL_USE"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [71, 61, 10, "enum_LAST_LEXICAL_USE"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [74, 51, 10, "enum_LAST_LEXICAL_USE"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [6, 10, 1, "enum_CFG_NEXT"], [10, 14, 1, "enum_CFG_NEXT"], [14, 1, 1, "enum_CFG_NEXT"], [7, 22, 1, "enum_CFG_NEXT"], [22, 27, 1, "enum_CFG_NEXT"], [22, 66, 1, "enum_CFG_NEXT"], [27, 50, 1, "enum_CFG_NEXT"], [50, 66, 1, "enum_CFG_NEXT"], [50, 56, 1, "enum_CFG_NEXT"], [21, 12, 3, "enum_LAST_WRITE"], [31, 8, 3, "enum_LAST_WRITE"], [34, 21, 2, "enum_LAST_READ"], [34, 12, 3, "enum_LAST_WRITE"], [37, 31, 2, "enum_LAST_READ"], [37, 8, 3, "enum_LAST_WRITE"], [40, 34, 2, "enum_LAST_READ"], [40, 12, 3, "enum_LAST_WRITE"], [28, 37, 2, "enum_LAST_READ"], [28, 8, 3, "enum_LAST_WRITE"], [51, 37, 2, "enum_LAST_READ"], [51, 28, 3, "enum_LAST_WRITE"], [57, 4, 3, "enum_LAST_WRITE"], [61, 2, 3, "enum_LAST_WRITE"], [71, 2, 3, "enum_LAST_WRITE"], [74, 51, 2, "enum_LAST_READ"], [74, 28, 3, "enum_LAST_WRITE"], [74, 8, 3, "enum_LAST_WRITE"], [28, 31, 4, "enum_COMPUTED_FROM"], [28, 37, 4, "enum_COMPUTED_FROM"], [28, 34, 4, "enum_COMPUTED_FROM"], [28, 40, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "sympy", "repo": "sympy", "path": "sympy/polys/polytools.py", "id": 57417, "has_bug": false, "code_full": "from typing import Any, List, Optional\n\nfrom sympy.polys.domains.domainelement import DomainElement\n\n\nclass cls:\n    @classmethod\n    def new(cls, rep: DomainElement, *gens: Any) -> Any:\n        pass\n\n\ndom: Any = None\ngens: List = []\n\n\ndef per(rep: DomainElement, dom: Any=dom, gens: List=gens, remove: Optional[int]=None) -> cls:\n    if remove is not None:\n        gens: List = gens[:remove] + gens[remove + 1:]\n\n        if not gens:\n            return dom.to_sympy(rep)\n\n    return cls.new(rep, *gens)\n", "code": "def per(rep: DomainElement, dom: Any=dom, gens: List=gens, remove: Optional[int]=None) -> cls:\n    if remove is not None:\n        gens: List = gens[:remove] + gens[remove + 1:]\n\n        if not gens:\n            return dom.to_sympy(rep)\n\n    return cls.new(rep, *gens)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "9a61a90a249e157a6bcf9f2d6c292d2ea5460fef"}
{"source_tokens": ["#NEWLINE#", "def build_set_evade(", "self", ",", "params", ",", "player", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "evade", "=", "(", "self", ".", "parse_value", "(", "params", ")", "or", "0", ")", "#NEWLINE#", "self", ".", "save", "(", ")", "#NEWLINE#", "return", "(", "'set evade to '", "+", "str", "(", "self", ".", "evade", ")", ")"], "edges": [[1, 5, 7, "enum_FIELD"], [12, 24, 7, "enum_FIELD"], [27, 31, 7, "enum_FIELD"], [34, 37, 7, "enum_FIELD"], [14, 13, 7, "enum_FIELD"], [31, 29, 7, "enum_FIELD"], [37, 36, 7, "enum_FIELD"], [37, 39, 7, "enum_FIELD"], [21, 19, 7, "enum_FIELD"], [29, 28, 7, "enum_FIELD"], [39, 38, 7, "enum_FIELD"], [19, 18, 7, "enum_FIELD"], [41, 40, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 12, 9, "enum_NEXT_SYNTAX"], [13, 2, 10, "enum_LAST_LEXICAL_USE"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [18, 13, 10, "enum_LAST_LEXICAL_USE"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [22, 4, 10, "enum_LAST_LEXICAL_USE"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [28, 18, 10, "enum_LAST_LEXICAL_USE"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [40, 28, 10, "enum_LAST_LEXICAL_USE"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [8, 1, 1, "enum_CFG_NEXT"], [5, 12, 1, "enum_CFG_NEXT"], [12, 27, 1, "enum_CFG_NEXT"], [27, 34, 1, "enum_CFG_NEXT"], [18, 2, 3, "enum_LAST_WRITE"], [22, 4, 3, "enum_LAST_WRITE"], [13, 18, 2, "enum_LAST_READ"], [13, 2, 3, "enum_LAST_WRITE"], [28, 13, 2, "enum_LAST_READ"], [28, 2, 3, "enum_LAST_WRITE"], [40, 28, 2, "enum_LAST_READ"], [40, 2, 3, "enum_LAST_WRITE"], [14, 22, 4, "enum_COMPUTED_FROM"], [14, 18, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "shinymud", "repo": "ShinyMUD", "path": "src/shinymud/models/item_types.py", "id": 50138, "has_bug": false, "code_full": "from typing import Any, Optional\n\n\nclass Class:\n    evade: int = 0\n\n    def save(self):\n        pass\n\n    def parse_value(self, params: Any) -> Optional[int]:\n        return None\n\n    def build_set_evade(self, params: Any, player: Optional[Any]=None) -> str:\n        self.evade = self.parse_value(params) or 0\n        self.save()\n        return \"set evade to \" + str(self.evade)\n", "code": "def build_set_evade(self, params: Any, player: Optional[Any]=None) -> str:\n    self.evade = self.parse_value(params) or 0\n    self.save()\n    return \"set evade to \" + str(self.evade)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "3f659d8be4468c9a8745b8797f5f96c2bc86533c"}
{"source_tokens": ["#NEWLINE#", "def cbAccept(", "self", ",", "rc", ",", "bytes", ",", "evt", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "handleAccept", "(", "rc", ",", "evt", ")", "#NEWLINE#", "if", "(", "not", "(", "self", ".", "disconnecting", "or", "self", ".", "disconnected", ")", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "doAccept", "(", ")"], "edges": [[1, 5, 7, "enum_FIELD"], [12, 18, 7, "enum_FIELD"], [22, 24, 7, "enum_FIELD"], [18, 14, 7, "enum_FIELD"], [24, 29, 7, "enum_FIELD"], [37, 41, 7, "enum_FIELD"], [14, 13, 7, "enum_FIELD"], [41, 39, 7, "enum_FIELD"], [27, 26, 7, "enum_FIELD"], [31, 30, 7, "enum_FIELD"], [39, 38, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 12, 9, "enum_NEXT_SYNTAX"], [13, 2, 10, "enum_LAST_LEXICAL_USE"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [17, 4, 10, "enum_LAST_LEXICAL_USE"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [19, 8, 10, "enum_LAST_LEXICAL_USE"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [26, 13, 10, "enum_LAST_LEXICAL_USE"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [30, 26, 10, "enum_LAST_LEXICAL_USE"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 37, 9, "enum_NEXT_SYNTAX"], [38, 30, 10, "enum_LAST_LEXICAL_USE"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [5, 12, 1, "enum_CFG_NEXT"], [12, 24, 1, "enum_CFG_NEXT"], [24, 37, 1, "enum_CFG_NEXT"], [13, 2, 3, "enum_LAST_WRITE"], [17, 4, 3, "enum_LAST_WRITE"], [19, 8, 3, "enum_LAST_WRITE"], [26, 13, 2, "enum_LAST_READ"], [26, 2, 3, "enum_LAST_WRITE"], [30, 26, 2, "enum_LAST_READ"], [30, 2, 3, "enum_LAST_WRITE"], [38, 30, 2, "enum_LAST_READ"], [38, 2, 3, "enum_LAST_WRITE"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "twisted", "repo": "twisted", "path": "twisted/internet/iocpreactor/tcp.py", "id": 59129, "has_bug": false, "code_full": "from typing import Any\n\n\nclass Class:\n    disconnected: bool = False\n    disconnecting: bool = False\n\n    def handleAccept(self, rc: int, evt: Any):\n        pass\n\n    def doAccept(self):\n        pass\n\n    def cbAccept(self, rc: int, bytes: Any, evt: Any):\n        self.handleAccept(rc, evt)\n        if not (self.disconnecting or self.disconnected):\n            self.doAccept()\n", "code": "def cbAccept(self, rc: int, bytes: Any, evt: Any):\n    self.handleAccept(rc, evt)\n    if not (self.disconnecting or self.disconnected):\n        self.doAccept()\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "8537a1f6b93728ec9ef8b39963d3fbbd761d43b1"}
{"source_tokens": ["#NEWLINE#", "def testBan(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "channel", "=", "'#osu'", "#NEWLINE#", "ban", "=", "'*!*@*.edu'", "#NEWLINE#", "exception", "=", "'*!*@*ohio-state.edu'", "#NEWLINE#", "noException", "=", "ircmsgs", ".", "ban", "(", "channel", ",", "ban", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "ircutils", ".", "separateModes", "(", "noException", ".", "args", "[", "1", ":", "]", ")", ",", "[", "(", "'+b'", ",", "ban", ")", "]", ")", "#NEWLINE#", "withException", "=", "ircmsgs", ".", "ban", "(", "channel", ",", "ban", ",", "exception", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "ircutils", ".", "separateModes", "(", "withException", ".", "args", "[", "1", ":", "]", ")", ",", "[", "(", "'+b'", ",", "ban", ")", ",", "(", "'+e'", ",", "exception", ")", "]", ")"], "edges": [[6, 9, 7, "enum_FIELD"], [10, 13, 7, "enum_FIELD"], [14, 17, 7, "enum_FIELD"], [18, 26, 7, "enum_FIELD"], [29, 46, 7, "enum_FIELD"], [55, 63, 7, "enum_FIELD"], [68, 85, 7, "enum_FIELD"], [26, 22, 7, "enum_FIELD"], [46, 31, 7, "enum_FIELD"], [63, 59, 7, "enum_FIELD"], [85, 70, 7, "enum_FIELD"], [22, 21, 7, "enum_FIELD"], [31, 30, 7, "enum_FIELD"], [37, 35, 7, "enum_FIELD"], [59, 58, 7, "enum_FIELD"], [70, 69, 7, "enum_FIELD"], [76, 74, 7, "enum_FIELD"], [35, 34, 7, "enum_FIELD"], [41, 39, 7, "enum_FIELD"], [41, 43, 7, "enum_FIELD"], [74, 73, 7, "enum_FIELD"], [80, 78, 7, "enum_FIELD"], [80, 82, 7, "enum_FIELD"], [39, 38, 7, "enum_FIELD"], [43, 42, 7, "enum_FIELD"], [78, 77, 7, "enum_FIELD"], [82, 81, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [25, 7, 10, "enum_LAST_LEXICAL_USE"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [27, 11, 10, "enum_LAST_LEXICAL_USE"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [30, 2, 10, "enum_LAST_LEXICAL_USE"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [38, 19, 10, "enum_LAST_LEXICAL_USE"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [51, 27, 10, "enum_LAST_LEXICAL_USE"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [58, 21, 10, "enum_LAST_LEXICAL_USE"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [62, 25, 10, "enum_LAST_LEXICAL_USE"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [64, 51, 10, "enum_LAST_LEXICAL_USE"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [66, 15, 10, "enum_LAST_LEXICAL_USE"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [69, 30, 10, "enum_LAST_LEXICAL_USE"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [73, 34, 10, "enum_LAST_LEXICAL_USE"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [77, 56, 10, "enum_LAST_LEXICAL_USE"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [90, 64, 10, "enum_LAST_LEXICAL_USE"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [96, 66, 10, "enum_LAST_LEXICAL_USE"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [6, 10, 1, "enum_CFG_NEXT"], [10, 14, 1, "enum_CFG_NEXT"], [14, 18, 1, "enum_CFG_NEXT"], [18, 29, 1, "enum_CFG_NEXT"], [29, 55, 1, "enum_CFG_NEXT"], [55, 68, 1, "enum_CFG_NEXT"], [25, 7, 3, "enum_LAST_WRITE"], [27, 11, 3, "enum_LAST_WRITE"], [30, 2, 3, "enum_LAST_WRITE"], [38, 19, 3, "enum_LAST_WRITE"], [51, 27, 2, "enum_LAST_READ"], [51, 11, 3, "enum_LAST_WRITE"], [58, 21, 2, "enum_LAST_READ"], [62, 25, 2, "enum_LAST_READ"], [62, 7, 3, "enum_LAST_WRITE"], [64, 51, 2, "enum_LAST_READ"], [64, 11, 3, "enum_LAST_WRITE"], [66, 15, 3, "enum_LAST_WRITE"], [69, 30, 2, "enum_LAST_READ"], [69, 2, 3, "enum_LAST_WRITE"], [73, 34, 2, "enum_LAST_READ"], [77, 56, 3, "enum_LAST_WRITE"], [90, 64, 2, "enum_LAST_READ"], [90, 11, 3, "enum_LAST_WRITE"], [96, 66, 2, "enum_LAST_READ"], [96, 15, 3, "enum_LAST_WRITE"], [19, 25, 4, "enum_COMPUTED_FROM"], [19, 27, 4, "enum_COMPUTED_FROM"], [19, 21, 4, "enum_COMPUTED_FROM"], [56, 62, 4, "enum_COMPUTED_FROM"], [56, 64, 4, "enum_COMPUTED_FROM"], [56, 66, 4, "enum_COMPUTED_FROM"], [56, 58, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "ProgVal", "repo": "Limnoria", "path": "test/test_ircmsgs.py", "id": 6737, "has_bug": false, "code_full": "import unittest\nfrom typing import Any\n\nimport supybot.ircmsgs as ircmsgs\nimport supybot.ircutils as ircutils\n\n\nclass Class(unittest.TestCase):\n    def testBan(self):\n        channel: str = '#osu'\n        ban: str = '*!*@*.edu'\n        exception: str = '*!*@*ohio-state.edu'\n        noException: Any = ircmsgs.ban(channel, ban)\n        self.assertEqual(ircutils.separateModes(noException.args[1:]),\n                            [('+b', ban)])\n        withException: Any = ircmsgs.ban(channel, ban, exception)\n        self.assertEqual(ircutils.separateModes(withException.args[1:]),\n                            [('+b', ban), ('+e', exception)])\n", "code": "def testBan(self):\n    channel: str = '#osu'\n    ban: str = '*!*@*.edu'\n    exception: str = '*!*@*ohio-state.edu'\n    noException: Any = ircmsgs.ban(channel, ban)\n    self.assertEqual(ircutils.separateModes(noException.args[1:]),\n                        [('+b', ban)])\n    withException: Any = ircmsgs.ban(channel, ban, exception)\n    self.assertEqual(ircutils.separateModes(withException.args[1:]),\n                        [('+b', ban), ('+e', exception)])\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "314fad36eb65e91f31a5dcf8b82a05758057ebf2"}
{"source_tokens": ["#NEWLINE#", "def test_institution_banner_path_none(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "inst", "=", "InstitutionFactory", "(", ")", "#NEWLINE#", "inst", ".", "banner_name", "=", "None", "#NEWLINE#", "assert_is_none", "(", "inst", ".", "banner_path", ",", "None", ")"], "edges": [[6, 10, 7, "enum_FIELD"], [12, 17, 7, "enum_FIELD"], [18, 24, 7, "enum_FIELD"], [10, 9, 7, "enum_FIELD"], [14, 13, 7, "enum_FIELD"], [24, 19, 7, "enum_FIELD"], [22, 21, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [13, 7, 10, "enum_LAST_LEXICAL_USE"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [21, 13, 10, "enum_LAST_LEXICAL_USE"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [6, 12, 1, "enum_CFG_NEXT"], [12, 18, 1, "enum_CFG_NEXT"], [13, 7, 3, "enum_LAST_WRITE"], [21, 13, 2, "enum_LAST_READ"], [21, 7, 3, "enum_LAST_WRITE"], [7, 9, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "CenterForOpenScience", "repo": "osf.io", "path": "tests/test_institution_model.py", "id": 2125, "has_bug": false, "code_full": "from typing import Any, Optional\n\n\nclass InstitutionFactory:\n    banner_name: Optional[str] = None\n    banner_path: Any = None\n\n\ndef assert_is_none(value, none):\n    pass\n\n\ndef test_institution_banner_path_none(self):\n    inst: InstitutionFactory = InstitutionFactory()\n    inst.banner_name = None\n    assert_is_none(inst.banner_path, None)\n", "code": "def test_institution_banner_path_none(self):\n    inst: InstitutionFactory = InstitutionFactory()\n    inst.banner_name = None\n    assert_is_none(inst.banner_path, None)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "4fab9ae510a0d5b6a9848129c0a7735e8100c966"}
{"source_tokens": ["#NEWLINE#", "def __getattr__(", "self", ",", "attr", ")", ":", "#NEWLINE#", "#INDENT#", "return", "self", ".", "tagged", "(", "attr", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [9, 13, 7, "enum_FIELD"], [13, 11, 7, "enum_FIELD"], [11, 10, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 9, 9, "enum_NEXT_SYNTAX"], [10, 2, 10, "enum_LAST_LEXICAL_USE"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [14, 4, 10, "enum_LAST_LEXICAL_USE"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [3, 9, 1, "enum_CFG_NEXT"], [10, 2, 3, "enum_LAST_WRITE"], [14, 4, 3, "enum_LAST_WRITE"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "ProgVal", "repo": "Limnoria", "path": "src/ircmsgs.py", "id": 6691, "has_bug": false, "code_full": "from typing import Any\n\n\nclass Class:\n    def tagged(self, tag: str) -> Any:\n        pass\n\n    def __getattr__(self, attr: str) -> Any:\n        return self.tagged(attr)\n", "code": "def __getattr__(self, attr: str) -> Any:\n    return self.tagged(attr)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "15d59d1153ae5648533ccaae91c4af70ba901cc8"}
{"source_tokens": ["#NEWLINE#", "def walkfiles(", "root", ")", ":", "#NEWLINE#", "#INDENT#", "return", "(", "os", ".", "path", ".", "join", "(", "dirpath", ",", "f", ")", "for", "(", "dirpath", ",", "_", ",", "files", ")", "in", "os", ".", "walk", "(", "root", ")", "for", "f", "in", "files", ")"], "edges": [[7, 8, 7, "enum_FIELD"], [8, 16, 7, "enum_FIELD"], [16, 12, 7, "enum_FIELD"], [19, 22, 7, "enum_FIELD"], [19, 31, 7, "enum_FIELD"], [34, 35, 7, "enum_FIELD"], [34, 37, 7, "enum_FIELD"], [12, 10, 7, "enum_FIELD"], [31, 29, 7, "enum_FIELD"], [10, 9, 7, "enum_FIELD"], [29, 28, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [21, 15, 10, "enum_LAST_LEXICAL_USE"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [28, 9, 10, "enum_LAST_LEXICAL_USE"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [32, 2, 10, "enum_LAST_LEXICAL_USE"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [35, 17, 10, "enum_LAST_LEXICAL_USE"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [37, 25, 10, "enum_LAST_LEXICAL_USE"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [21, 15, 2, "enum_LAST_READ"], [28, 9, 2, "enum_LAST_READ"], [32, 2, 3, "enum_LAST_WRITE"], [35, 17, 2, "enum_LAST_READ"], [37, 25, 3, "enum_LAST_WRITE"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "onitu", "repo": "onitu", "path": "drivers/local_storage/onitu_local_storage/local_storage.py", "id": 30859, "has_bug": false, "code_full": "import os\nfrom typing import Generator\n\n\ndef walkfiles(root: str) -> Generator[str, None, None]:\n    return (\n        os.path.join(dirpath, f)\n        for dirpath, _, files in os.walk(root) for f in files\n    )\n", "code": "def walkfiles(root: str) -> Generator[str, None, None]:\n    return (\n        os.path.join(dirpath, f)\n        for dirpath, _, files in os.walk(root) for f in files\n    )\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "f7768c6ce21b813304cea6fcb24f1c833a625740"}
{"source_tokens": ["#NEWLINE#", "def bgn_deftp(", "self", ",", "args", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "write", "(", "'<DL>'", ")", "#NEWLINE#", "self", ".", "do_deftpx", "(", "args", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [8, 12, 7, "enum_FIELD"], [15, 19, 7, "enum_FIELD"], [12, 10, 7, "enum_FIELD"], [19, 17, 7, "enum_FIELD"], [10, 9, 7, "enum_FIELD"], [17, 16, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 8, 9, "enum_NEXT_SYNTAX"], [9, 2, 10, "enum_LAST_LEXICAL_USE"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [16, 9, 10, "enum_LAST_LEXICAL_USE"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [20, 4, 10, "enum_LAST_LEXICAL_USE"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [3, 8, 1, "enum_CFG_NEXT"], [8, 15, 1, "enum_CFG_NEXT"], [9, 2, 3, "enum_LAST_WRITE"], [16, 9, 2, "enum_LAST_READ"], [16, 2, 3, "enum_LAST_WRITE"], [20, 4, 3, "enum_LAST_WRITE"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "Southpaw-TACTIC", "repo": "TACTIC", "path": "src/context/client/tactic-api-python-4.0.api04/Tools/Scripts/texi2html.py", "id": 7644, "has_bug": false, "code_full": "\nclass Class:\n    def write(self, *args: str):\n        pass\n\n    def do_deftpx(self, args: str):\n        pass\n\n    def bgn_deftp(self, args: str):\n        self.write('<DL>')\n        self.do_deftpx(args)\n", "code": "def bgn_deftp(self, args: str):\n    self.write('<DL>')\n    self.do_deftpx(args)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "69c969cb6ba616e5b57fed6f24591f502c971536"}
{"source_tokens": ["#NEWLINE#", "def kill_all_tasks_in_cgroup_recursively(", "cgroup", ")", ":", "#NEWLINE#", "#INDENT#", "files", "=", "[", "os", ".", "path", ".", "join", "(", "cgroup", ",", "f", ")", "for", "f", "in", "os", ".", "listdir", "(", "cgroup", ")", "]", "#NEWLINE#", "subdirs", "=", "filter", "(", "os", ".", "path", ".", "isdir", ",", "files", ")", "#NEWLINE#", "for", "subCgroup", "in", "subdirs", ":", "#NEWLINE#", "#INDENT#", "kill_all_tasks_in_cgroup_recursively", "(", "subCgroup", ")", "#NEWLINE#", "remove_cgroup", "(", "subCgroup", ")", "#NEWLINE#", "#UNINDENT#", "kill_all_tasks_in_cgroup", "(", "cgroup", ",", "kill_process_fn", ")"], "edges": [[6, 9, 7, "enum_FIELD"], [30, 40, 7, "enum_FIELD"], [46, 45, 7, "enum_FIELD"], [46, 47, 7, "enum_FIELD"], [61, 65, 7, "enum_FIELD"], [9, 17, 7, "enum_FIELD"], [40, 33, 7, "enum_FIELD"], [50, 52, 7, "enum_FIELD"], [55, 57, 7, "enum_FIELD"], [65, 62, 7, "enum_FIELD"], [17, 13, 7, "enum_FIELD"], [20, 21, 7, "enum_FIELD"], [20, 26, 7, "enum_FIELD"], [38, 36, 7, "enum_FIELD"], [52, 51, 7, "enum_FIELD"], [57, 56, 7, "enum_FIELD"], [13, 11, 7, "enum_FIELD"], [26, 24, 7, "enum_FIELD"], [36, 35, 7, "enum_FIELD"], [11, 10, 7, "enum_FIELD"], [24, 23, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [16, 2, 10, "enum_LAST_LEXICAL_USE"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [21, 18, 10, "enum_LAST_LEXICAL_USE"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [23, 10, 10, "enum_LAST_LEXICAL_USE"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [27, 16, 10, "enum_LAST_LEXICAL_USE"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [35, 23, 10, "enum_LAST_LEXICAL_USE"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [41, 7, 10, "enum_LAST_LEXICAL_USE"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [47, 31, 10, "enum_LAST_LEXICAL_USE"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [53, 45, 10, "enum_LAST_LEXICAL_USE"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [58, 53, 10, "enum_LAST_LEXICAL_USE"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [64, 27, 10, "enum_LAST_LEXICAL_USE"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [6, 30, 1, "enum_CFG_NEXT"], [30, 47, 1, "enum_CFG_NEXT"], [47, 45, 1, "enum_CFG_NEXT"], [45, 50, 1, "enum_CFG_NEXT"], [45, 61, 1, "enum_CFG_NEXT"], [50, 55, 1, "enum_CFG_NEXT"], [55, 45, 1, "enum_CFG_NEXT"], [16, 2, 3, "enum_LAST_WRITE"], [21, 18, 2, "enum_LAST_READ"], [23, 10, 2, "enum_LAST_READ"], [27, 16, 2, "enum_LAST_READ"], [27, 2, 3, "enum_LAST_WRITE"], [35, 23, 2, "enum_LAST_READ"], [41, 7, 3, "enum_LAST_WRITE"], [47, 31, 3, "enum_LAST_WRITE"], [45, 58, 2, "enum_LAST_READ"], [45, 45, 3, "enum_LAST_WRITE"], [51, 51, 2, "enum_LAST_READ"], [53, 58, 2, "enum_LAST_READ"], [53, 45, 3, "enum_LAST_WRITE"], [56, 56, 2, "enum_LAST_READ"], [58, 53, 2, "enum_LAST_READ"], [58, 45, 3, "enum_LAST_WRITE"], [64, 27, 2, "enum_LAST_READ"], [64, 2, 3, "enum_LAST_WRITE"], [7, 16, 4, "enum_COMPUTED_FROM"], [7, 18, 4, "enum_COMPUTED_FROM"], [7, 21, 4, "enum_COMPUTED_FROM"], [7, 27, 4, "enum_COMPUTED_FROM"], [7, 10, 4, "enum_COMPUTED_FROM"], [7, 23, 4, "enum_COMPUTED_FROM"], [31, 33, 4, "enum_COMPUTED_FROM"], [31, 41, 4, "enum_COMPUTED_FROM"], [31, 35, 4, "enum_COMPUTED_FROM"], [52, 1, 11, "enum_CALLS"], [53, 2, 6, "enum_FORMAL_ARG_NAME"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "sosy-lab", "repo": "benchexec", "path": "benchexec/cgroups.py", "id": 51626, "has_bug": false, "code_full": "import os\nfrom typing import Callable, Iterator, List\n\n\ndef kill_process_fn(cgroup: str):\n    pass\n\n\ndef remove_cgroup(cgroup: str):\n    pass\n\n\ndef kill_all_tasks_in_cgroup(cgroup: str, kill_process_fn: Callable[[str], None]):\n    pass\n\n\ndef kill_all_tasks_in_cgroup_recursively(cgroup: str):\n    files: List[str] = [os.path.join(cgroup,f) for f in os.listdir(cgroup)]\n    subdirs: Iterator = filter(os.path.isdir, files)\n\n    for subCgroup in subdirs:\n        kill_all_tasks_in_cgroup_recursively(subCgroup)\n        remove_cgroup(subCgroup)\n\n    kill_all_tasks_in_cgroup(cgroup, kill_process_fn)\n", "code": "def kill_all_tasks_in_cgroup_recursively(cgroup: str):\n    files: List[str] = [os.path.join(cgroup,f) for f in os.listdir(cgroup)]\n    subdirs: Iterator = filter(os.path.isdir, files)\n\n    for subCgroup in subdirs:\n        kill_all_tasks_in_cgroup_recursively(subCgroup)\n        remove_cgroup(subCgroup)\n\n    kill_all_tasks_in_cgroup(cgroup, kill_process_fn)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "4334316e38d740304430187285d305c87dbdc445"}
{"source_tokens": ["#NEWLINE#", "def _chop(", "self", ",", "sdata", ",", "slice_obj", ")", ":", "#NEWLINE#", "#INDENT#", "return", "sdata", ".", "iloc", "[", "slice_obj", "]"], "edges": [[1, 3, 7, "enum_FIELD"], [11, 15, 7, "enum_FIELD"], [15, 13, 7, "enum_FIELD"], [15, 16, 7, "enum_FIELD"], [13, 12, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 11, 9, "enum_NEXT_SYNTAX"], [12, 4, 10, "enum_LAST_LEXICAL_USE"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [16, 6, 10, "enum_LAST_LEXICAL_USE"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [3, 11, 1, "enum_CFG_NEXT"], [12, 4, 3, "enum_LAST_WRITE"], [16, 6, 3, "enum_LAST_WRITE"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "pydata", "repo": "pandas", "path": "pandas/core/groupby.py", "id": 40485, "has_bug": false, "code_full": "from typing import Any, Union\n\nimport pandas as pd\n\n\ndef _chop(self, sdata: Union[pd.DataFrame, pd.Series], slice_obj: Any) -> Union[pd.DataFrame, pd.Series]:\n    return sdata.iloc[slice_obj]\n", "code": "def _chop(self, sdata: Union[pd.DataFrame, pd.Series], slice_obj: Any) -> Union[pd.DataFrame, pd.Series]:\n    return sdata.iloc[slice_obj]\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "0252385a71f8b8738c3223dcc44af001baa79b10"}
{"source_tokens": ["#NEWLINE#", "def clean_default_service(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'Clean the default_service field.\\n\\n    Raises:\\n        django.core.exceptions.ValidationError:\\n            Raised if an unknown service or disabled service is set to be\\n            the default.\\n    '", "#NEWLINE#", "enabled_services", "=", "set", "(", "self", ".", "cleaned_data", "[", "'enabled_services'", "]", ")", "#NEWLINE#", "service_id", "=", "self", ".", "cleaned_data", "[", "'default_service'", "]", "#NEWLINE#", "if", "(", "service_id", "==", "'none'", ")", ":", "#NEWLINE#", "#INDENT#", "default_service", "=", "None", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "not", "avatar_services", ".", "has_service", "(", "service_id", ")", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "ValidationError", "(", "(", "'Unknown service \"%s\".'", "%", "service_id", ")", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "service_id", "not in", "enabled_services", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "ValidationError", "(", "(", "'Cannot set disabled service \"%s\" to default.'", "%", "service_id", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "default_service", "=", "avatar_services", ".", "get", "(", "'avatar_service_id'", ",", "service_id", ")", "#NEWLINE#", "#UNINDENT#", "return", "default_service"], "edges": [[6, 7, 7, "enum_FIELD"], [8, 12, 7, "enum_FIELD"], [20, 26, 7, "enum_FIELD"], [36, 33, 7, "enum_FIELD"], [109, 110, 7, "enum_FIELD"], [12, 11, 7, "enum_FIELD"], [26, 24, 7, "enum_FIELD"], [26, 27, 7, "enum_FIELD"], [33, 32, 7, "enum_FIELD"], [38, 41, 7, "enum_FIELD"], [58, 50, 7, "enum_FIELD"], [96, 104, 7, "enum_FIELD"], [16, 14, 7, "enum_FIELD"], [16, 17, 7, "enum_FIELD"], [24, 23, 7, "enum_FIELD"], [50, 54, 7, "enum_FIELD"], [61, 63, 7, "enum_FIELD"], [76, 79, 7, "enum_FIELD"], [104, 100, 7, "enum_FIELD"], [14, 13, 7, "enum_FIELD"], [54, 52, 7, "enum_FIELD"], [63, 62, 7, "enum_FIELD"], [79, 78, 7, "enum_FIELD"], [85, 87, 7, "enum_FIELD"], [100, 99, 7, "enum_FIELD"], [52, 51, 7, "enum_FIELD"], [66, 65, 7, "enum_FIELD"], [66, 67, 7, "enum_FIELD"], [87, 86, 7, "enum_FIELD"], [90, 89, 7, "enum_FIELD"], [90, 91, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [13, 2, 10, "enum_LAST_LEXICAL_USE"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [23, 13, 10, "enum_LAST_LEXICAL_USE"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [32, 21, 10, "enum_LAST_LEXICAL_USE"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [55, 32, 10, "enum_LAST_LEXICAL_USE"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [67, 55, 10, "enum_LAST_LEXICAL_USE"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [78, 67, 10, "enum_LAST_LEXICAL_USE"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [80, 9, 10, "enum_LAST_LEXICAL_USE"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 85, 9, "enum_NEXT_SYNTAX"], [86, 62, 10, "enum_LAST_LEXICAL_USE"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [91, 78, 10, "enum_LAST_LEXICAL_USE"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 96, 9, "enum_NEXT_SYNTAX"], [97, 39, 10, "enum_LAST_LEXICAL_USE"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [99, 51, 10, "enum_LAST_LEXICAL_USE"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [105, 91, 10, "enum_LAST_LEXICAL_USE"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 109, 9, "enum_NEXT_SYNTAX"], [110, 97, 10, "enum_LAST_LEXICAL_USE"], [109, 110, 9, "enum_NEXT_SYNTAX"], [6, 8, 1, "enum_CFG_NEXT"], [8, 20, 1, "enum_CFG_NEXT"], [20, 33, 1, "enum_CFG_NEXT"], [33, 38, 1, "enum_CFG_NEXT"], [33, 50, 1, "enum_CFG_NEXT"], [38, 109, 1, "enum_CFG_NEXT"], [50, 61, 1, "enum_CFG_NEXT"], [50, 79, 1, "enum_CFG_NEXT"], [79, 85, 1, "enum_CFG_NEXT"], [79, 96, 1, "enum_CFG_NEXT"], [96, 109, 1, "enum_CFG_NEXT"], [13, 2, 3, "enum_LAST_WRITE"], [23, 13, 2, "enum_LAST_READ"], [23, 2, 3, "enum_LAST_WRITE"], [32, 21, 3, "enum_LAST_WRITE"], [55, 32, 2, "enum_LAST_READ"], [55, 21, 3, "enum_LAST_WRITE"], [67, 55, 2, "enum_LAST_READ"], [67, 21, 3, "enum_LAST_WRITE"], [78, 55, 2, "enum_LAST_READ"], [78, 21, 3, "enum_LAST_WRITE"], [80, 9, 3, "enum_LAST_WRITE"], [91, 78, 2, "enum_LAST_READ"], [91, 21, 3, "enum_LAST_WRITE"], [99, 51, 2, "enum_LAST_READ"], [105, 78, 2, "enum_LAST_READ"], [105, 21, 3, "enum_LAST_WRITE"], [110, 97, 3, "enum_LAST_WRITE"], [110, 39, 3, "enum_LAST_WRITE"], [9, 11, 4, "enum_COMPUTED_FROM"], [9, 13, 4, "enum_COMPUTED_FROM"], [21, 23, 4, "enum_COMPUTED_FROM"], [97, 105, 4, "enum_COMPUTED_FROM"], [97, 99, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "reviewboard", "repo": "reviewboard", "path": "reviewboard/admin/forms.py", "id": 44173, "has_bug": false, "code_full": "from typing import Any, Dict, Optional, Set\n\nfrom django.core.exceptions import ValidationError\n\n\nclass AvatarService:\n    def has_service(self, service_id: str) -> bool:\n        return False\n\n    def get(self, field: str, service_id: str) -> Dict[str, Any]:\n        return dict()\n\n\navatar_services = AvatarService()\n\n\nclass Class:\n    cleaned_data: Dict[str, Any]\n\n    def clean_default_service(self) -> Optional[Any]:\n        \"\"\"Clean the default_service field.\n\n        Raises:\n            django.core.exceptions.ValidationError:\n                Raised if an unknown service or disabled service is set to be\n                the default.\n        \"\"\"\n        enabled_services: Set = set(self.cleaned_data['enabled_services'])\n        service_id: str = self.cleaned_data['default_service']\n\n        if service_id == 'none':\n            default_service: Any = None\n        else:\n            if not avatar_services.has_service(service_id):\n                raise ValidationError('Unknown service \"%s\".' % service_id)\n            elif service_id not in enabled_services:\n                raise ValidationError('Cannot set disabled service \"%s\" to '\n                                        'default.'\n                                        % service_id)\n\n            default_service: Any = avatar_services.get('avatar_service_id',\n                                                    service_id)\n\n        return default_service\n", "code": "def clean_default_service(self) -> Optional[Any]:\n    \"\"\"Clean the default_service field.\n\n    Raises:\n        django.core.exceptions.ValidationError:\n            Raised if an unknown service or disabled service is set to be\n            the default.\n    \"\"\"\n    enabled_services: Set = set(self.cleaned_data['enabled_services'])\n    service_id: str = self.cleaned_data['default_service']\n\n    if service_id == 'none':\n        default_service: Any = None\n    else:\n        if not avatar_services.has_service(service_id):\n            raise ValidationError('Unknown service \"%s\".' % service_id)\n        elif service_id not in enabled_services:\n            raise ValidationError('Cannot set disabled service \"%s\" to '\n                                    'default.'\n                                    % service_id)\n\n        default_service: Any = avatar_services.get('avatar_service_id',\n                                                service_id)\n\n    return default_service\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "39e88bc0bb003e2cf857a4dcd7d06a20a217ce25"}
{"source_tokens": ["#NEWLINE#", "def assertFlatteningRaises(", "self", ",", "root", ",", "exn", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Assert flattening a root element raises a particular exception.\\n    '", "#NEWLINE#", "d", "=", "self", ".", "assertFailure", "(", "self", ".", "assertFlattensTo", "(", "root", ",", "b''", ")", ",", "FlattenerError", ")", "#NEWLINE#", "d", ".", "addCallback", "(", "(", "lambda", "exc", ":", "self", ".", "assertIsInstance", "(", "exc", ".", "_exception", ",", "exn", ")", ")", ")", "#NEWLINE#", "return", "d"], "edges": [[1, 3, 7, "enum_FIELD"], [10, 11, 7, "enum_FIELD"], [12, 27, 7, "enum_FIELD"], [30, 34, 7, "enum_FIELD"], [52, 53, 7, "enum_FIELD"], [27, 16, 7, "enum_FIELD"], [34, 32, 7, "enum_FIELD"], [16, 15, 7, "enum_FIELD"], [24, 20, 7, "enum_FIELD"], [32, 31, 7, "enum_FIELD"], [36, 46, 7, "enum_FIELD"], [20, 19, 7, "enum_FIELD"], [46, 40, 7, "enum_FIELD"], [40, 39, 7, "enum_FIELD"], [44, 43, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [15, 2, 10, "enum_LAST_LEXICAL_USE"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [19, 15, 10, "enum_LAST_LEXICAL_USE"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [23, 4, 10, "enum_LAST_LEXICAL_USE"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [31, 13, 10, "enum_LAST_LEXICAL_USE"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [39, 19, 10, "enum_LAST_LEXICAL_USE"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [43, 37, 10, "enum_LAST_LEXICAL_USE"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [47, 6, 10, "enum_LAST_LEXICAL_USE"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 52, 9, "enum_NEXT_SYNTAX"], [53, 31, 10, "enum_LAST_LEXICAL_USE"], [52, 53, 9, "enum_NEXT_SYNTAX"], [3, 10, 1, "enum_CFG_NEXT"], [10, 12, 1, "enum_CFG_NEXT"], [12, 30, 1, "enum_CFG_NEXT"], [30, 52, 1, "enum_CFG_NEXT"], [15, 2, 3, "enum_LAST_WRITE"], [19, 15, 2, "enum_LAST_READ"], [19, 2, 3, "enum_LAST_WRITE"], [23, 4, 3, "enum_LAST_WRITE"], [31, 13, 3, "enum_LAST_WRITE"], [39, 19, 2, "enum_LAST_READ"], [39, 2, 3, "enum_LAST_WRITE"], [43, 37, 3, "enum_LAST_WRITE"], [47, 6, 3, "enum_LAST_WRITE"], [53, 31, 2, "enum_LAST_READ"], [53, 13, 3, "enum_LAST_WRITE"], [13, 28, 4, "enum_COMPUTED_FROM"], [13, 15, 4, "enum_COMPUTED_FROM"], [13, 23, 4, "enum_COMPUTED_FROM"], [13, 19, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "twisted", "repo": "twisted", "path": "twisted/web/test/_util.py", "id": 59219, "has_bug": false, "code_full": "import unittest\nfrom typing import Any, Type\n\nfrom twisted.internet.defer import Deferred\n\n\nclass FlattenerError(Exception):\n    pass\n\n\nclass Class(unittest.TestCase):\n    def assertFailure(self, d: Deferred, exn: Type[Exception]) -> Deferred:\n        return Deferred()\n\n    def assertFlattensTo(self, root: Any, expected: bytes) -> Deferred:\n        return Deferred()\n\n    def assertFlatteningRaises(self, root: Any, exn: Type[Exception]) -> Deferred:\n        \"\"\"\n        Assert flattening a root element raises a particular exception.\n        \"\"\"\n        d = self.assertFailure(self.assertFlattensTo(root, b''), FlattenerError)\n        d.addCallback(lambda exc: self.assertIsInstance(exc._exception, exn))\n        return d\n", "code": "def assertFlatteningRaises(self, root: Any, exn: Type[Exception]) -> Deferred:\n    \"\"\"\n    Assert flattening a root element raises a particular exception.\n    \"\"\"\n    d = self.assertFailure(self.assertFlattensTo(root, b''), FlattenerError)\n    d.addCallback(lambda exc: self.assertIsInstance(exc._exception, exn))\n    return d\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "b5873ea830ff54e336efb957fcff3e853150b1fb"}
{"source_tokens": ["#NEWLINE#", "def test_noncommutative_expand_issue_3757(", ")", ":", "#NEWLINE#", "#INDENT#", "(", "A", ",", "B", ",", "C", ")", "=", "symbols", "(", "'A,B,C'", ",", "commutative", "=", "False", ")", "#NEWLINE#", "assert", "(", "(", "(", "A", "*", "B", ")", "-", "(", "B", "*", "A", ")", ")", "!=", "0", ")", "#NEWLINE#", "assert", "(", "(", "(", "A", "*", "(", "A", "+", "B", ")", ")", "*", "B", ")", ".", "expand", "(", ")", "==", "(", "(", "(", "A", "**", "2", ")", "*", "B", ")", "+", "(", "A", "*", "(", "B", "**", "2", ")", ")", ")", ")", "#NEWLINE#", "assert", "(", "(", "(", "A", "*", "(", "(", "A", "+", "B", ")", "+", "C", ")", ")", "*", "B", ")", ".", "expand", "(", ")", "==", "(", "(", "(", "(", "A", "**", "2", ")", "*", "B", ")", "+", "(", "A", "*", "(", "B", "**", "2", ")", ")", ")", "+", "(", "(", "A", "*", "C", ")", "*", "B", ")", ")", ")"], "edges": [[5, 17, 7, "enum_FIELD"], [23, 38, 7, "enum_FIELD"], [42, 61, 7, "enum_FIELD"], [85, 108, 7, "enum_FIELD"], [17, 14, 7, "enum_FIELD"], [38, 31, 7, "enum_FIELD"], [61, 59, 7, "enum_FIELD"], [108, 106, 7, "enum_FIELD"], [18, 20, 7, "enum_FIELD"], [31, 28, 7, "enum_FIELD"], [31, 34, 7, "enum_FIELD"], [59, 57, 7, "enum_FIELD"], [72, 69, 7, "enum_FIELD"], [72, 75, 7, "enum_FIELD"], [106, 104, 7, "enum_FIELD"], [131, 120, 7, "enum_FIELD"], [131, 138, 7, "enum_FIELD"], [28, 27, 7, "enum_FIELD"], [28, 29, 7, "enum_FIELD"], [34, 33, 7, "enum_FIELD"], [34, 35, 7, "enum_FIELD"], [57, 54, 7, "enum_FIELD"], [69, 66, 7, "enum_FIELD"], [69, 70, 7, "enum_FIELD"], [75, 74, 7, "enum_FIELD"], [75, 78, 7, "enum_FIELD"], [104, 101, 7, "enum_FIELD"], [120, 117, 7, "enum_FIELD"], [120, 123, 7, "enum_FIELD"], [138, 135, 7, "enum_FIELD"], [138, 139, 7, "enum_FIELD"], [54, 47, 7, "enum_FIELD"], [54, 55, 7, "enum_FIELD"], [66, 65, 7, "enum_FIELD"], [66, 67, 7, "enum_FIELD"], [78, 77, 7, "enum_FIELD"], [78, 79, 7, "enum_FIELD"], [101, 90, 7, "enum_FIELD"], [101, 102, 7, "enum_FIELD"], [117, 114, 7, "enum_FIELD"], [117, 118, 7, "enum_FIELD"], [123, 122, 7, "enum_FIELD"], [123, 126, 7, "enum_FIELD"], [135, 134, 7, "enum_FIELD"], [135, 136, 7, "enum_FIELD"], [47, 46, 7, "enum_FIELD"], [47, 50, 7, "enum_FIELD"], [90, 89, 7, "enum_FIELD"], [90, 97, 7, "enum_FIELD"], [114, 113, 7, "enum_FIELD"], [114, 115, 7, "enum_FIELD"], [126, 125, 7, "enum_FIELD"], [126, 127, 7, "enum_FIELD"], [50, 49, 7, "enum_FIELD"], [50, 51, 7, "enum_FIELD"], [97, 94, 7, "enum_FIELD"], [97, 98, 7, "enum_FIELD"], [94, 93, 7, "enum_FIELD"], [94, 95, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [27, 7, 10, "enum_LAST_LEXICAL_USE"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [29, 9, 10, "enum_LAST_LEXICAL_USE"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [33, 29, 10, "enum_LAST_LEXICAL_USE"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [35, 27, 10, "enum_LAST_LEXICAL_USE"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [46, 35, 10, "enum_LAST_LEXICAL_USE"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [49, 46, 10, "enum_LAST_LEXICAL_USE"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [51, 33, 10, "enum_LAST_LEXICAL_USE"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [55, 51, 10, "enum_LAST_LEXICAL_USE"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [65, 49, 10, "enum_LAST_LEXICAL_USE"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [70, 55, 10, "enum_LAST_LEXICAL_USE"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [74, 65, 10, "enum_LAST_LEXICAL_USE"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [77, 70, 10, "enum_LAST_LEXICAL_USE"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [89, 74, 10, "enum_LAST_LEXICAL_USE"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [93, 89, 10, "enum_LAST_LEXICAL_USE"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [95, 77, 10, "enum_LAST_LEXICAL_USE"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [98, 11, 10, "enum_LAST_LEXICAL_USE"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [102, 95, 10, "enum_LAST_LEXICAL_USE"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [113, 93, 10, "enum_LAST_LEXICAL_USE"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [118, 102, 10, "enum_LAST_LEXICAL_USE"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [122, 113, 10, "enum_LAST_LEXICAL_USE"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [125, 118, 10, "enum_LAST_LEXICAL_USE"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [134, 122, 10, "enum_LAST_LEXICAL_USE"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [136, 98, 10, "enum_LAST_LEXICAL_USE"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [139, 125, 10, "enum_LAST_LEXICAL_USE"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [5, 23, 1, "enum_CFG_NEXT"], [23, 42, 1, "enum_CFG_NEXT"], [42, 85, 1, "enum_CFG_NEXT"], [27, 7, 3, "enum_LAST_WRITE"], [29, 9, 3, "enum_LAST_WRITE"], [33, 29, 2, "enum_LAST_READ"], [33, 9, 3, "enum_LAST_WRITE"], [35, 27, 2, "enum_LAST_READ"], [35, 7, 3, "enum_LAST_WRITE"], [46, 35, 2, "enum_LAST_READ"], [46, 7, 3, "enum_LAST_WRITE"], [49, 46, 2, "enum_LAST_READ"], [49, 7, 3, "enum_LAST_WRITE"], [51, 33, 2, "enum_LAST_READ"], [51, 9, 3, "enum_LAST_WRITE"], [55, 51, 2, "enum_LAST_READ"], [55, 9, 3, "enum_LAST_WRITE"], [65, 49, 2, "enum_LAST_READ"], [65, 7, 3, "enum_LAST_WRITE"], [70, 55, 2, "enum_LAST_READ"], [70, 9, 3, "enum_LAST_WRITE"], [74, 65, 2, "enum_LAST_READ"], [74, 7, 3, "enum_LAST_WRITE"], [77, 70, 2, "enum_LAST_READ"], [77, 9, 3, "enum_LAST_WRITE"], [89, 74, 2, "enum_LAST_READ"], [89, 7, 3, "enum_LAST_WRITE"], [93, 89, 2, "enum_LAST_READ"], [93, 7, 3, "enum_LAST_WRITE"], [95, 77, 2, "enum_LAST_READ"], [95, 9, 3, "enum_LAST_WRITE"], [98, 11, 3, "enum_LAST_WRITE"], [102, 95, 2, "enum_LAST_READ"], [102, 9, 3, "enum_LAST_WRITE"], [113, 93, 2, "enum_LAST_READ"], [113, 7, 3, "enum_LAST_WRITE"], [118, 102, 2, "enum_LAST_READ"], [118, 9, 3, "enum_LAST_WRITE"], [122, 113, 2, "enum_LAST_READ"], [122, 7, 3, "enum_LAST_WRITE"], [125, 118, 2, "enum_LAST_READ"], [125, 9, 3, "enum_LAST_WRITE"], [134, 122, 2, "enum_LAST_READ"], [134, 7, 3, "enum_LAST_WRITE"], [136, 98, 2, "enum_LAST_READ"], [136, 11, 3, "enum_LAST_WRITE"], [139, 125, 2, "enum_LAST_READ"], [139, 9, 3, "enum_LAST_WRITE"], [8, 14, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "sympy", "repo": "sympy", "path": "sympy/core/tests/test_expr.py", "id": 56918, "has_bug": false, "code_full": "from sympy import symbols\n\n\ndef test_noncommutative_expand_issue_3757():\n    A, B, C = symbols('A,B,C', commutative=False)\n    assert A*B - B*A != 0\n    assert (A*(A + B)*B).expand() == A**2*B + A*B**2\n    assert (A*(A + B + C)*B).expand() == A**2*B + A*B**2 + A*C*B\n", "code": "def test_noncommutative_expand_issue_3757():\n    A, B, C = symbols('A,B,C', commutative=False)\n    assert A*B - B*A != 0\n    assert (A*(A + B)*B).expand() == A**2*B + A*B**2\n    assert (A*(A + B + C)*B).expand() == A**2*B + A*B**2 + A*C*B\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "25ea11a953ec1a83e73b58d43a1d5f4026e006bc"}
{"source_tokens": ["#NEWLINE#", "def linearize_actual_args(", "fn", ",", "args", ")", ":", "#NEWLINE#", "#INDENT#", "(", "untyped_fn", ",", "closure_args", ")", "=", "unpack_closure", "(", "fn", ")", "#NEWLINE#", "if", "isinstance", "(", "args", ",", "(", "list", ",", "tuple", ")", ")", ":", "#NEWLINE#", "#INDENT#", "args", "=", "ActualArgs", "(", "args", ")", "#NEWLINE#", "#UNINDENT#", "args", "=", "args", ".", "prepend_positional", "(", "closure_args", ")", "#NEWLINE#", "arg_types", "=", "args", ".", "transform", "(", "get_type", ")", "#NEWLINE#", "if", "isinstance", "(", "untyped_fn", ".", "args", ",", "FormalArgs", ")", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "combined_args", "=", "untyped_fn", ".", "args", ".", "linearize_without_defaults", "(", "args", ",", "tuple_elts", ")", "#NEWLINE#", "#UNINDENT#", "except", "UnexpectedKeyword", "as", "e", ":", "#NEWLINE#", "#INDENT#", "e", ".", "fn_name", "=", "fn", ".", "name", "#NEWLINE#", "raise", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "combined_args", "=", "list", "(", "args", ")", "#NEWLINE#", "#UNINDENT#", "return", "(", "untyped_fn", ",", "combined_args", ",", "arg_types", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [8, 16, 7, "enum_FIELD"], [20, 24, 7, "enum_FIELD"], [41, 47, 7, "enum_FIELD"], [50, 56, 7, "enum_FIELD"], [69, 66, 7, "enum_FIELD"], [121, 124, 7, "enum_FIELD"], [16, 15, 7, "enum_FIELD"], [24, 21, 7, "enum_FIELD"], [33, 37, 7, "enum_FIELD"], [47, 45, 7, "enum_FIELD"], [56, 54, 7, "enum_FIELD"], [66, 61, 7, "enum_FIELD"], [112, 116, 7, "enum_FIELD"], [37, 36, 7, "enum_FIELD"], [45, 44, 7, "enum_FIELD"], [54, 53, 7, "enum_FIELD"], [64, 63, 7, "enum_FIELD"], [75, 85, 7, "enum_FIELD"], [92, 91, 7, "enum_FIELD"], [92, 93, 7, "enum_FIELD"], [116, 115, 7, "enum_FIELD"], [85, 81, 7, "enum_FIELD"], [96, 102, 7, "enum_FIELD"], [81, 79, 7, "enum_FIELD"], [98, 97, 7, "enum_FIELD"], [102, 101, 7, "enum_FIELD"], [79, 78, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [17, 2, 10, "enum_LAST_LEXICAL_USE"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [23, 4, 10, "enum_LAST_LEXICAL_USE"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 33, 9, "enum_NEXT_SYNTAX"], [34, 23, 10, "enum_LAST_LEXICAL_USE"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [38, 34, 10, "enum_LAST_LEXICAL_USE"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 41, 9, "enum_NEXT_SYNTAX"], [42, 38, 10, "enum_LAST_LEXICAL_USE"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [44, 42, 10, "enum_LAST_LEXICAL_USE"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [48, 12, 10, "enum_LAST_LEXICAL_USE"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [53, 44, 10, "enum_LAST_LEXICAL_USE"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 60, 9, "enum_NEXT_SYNTAX"], [61, 21, 10, "enum_LAST_LEXICAL_USE"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [63, 10, 10, "enum_LAST_LEXICAL_USE"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [78, 63, 10, "enum_LAST_LEXICAL_USE"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [84, 53, 10, "enum_LAST_LEXICAL_USE"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 96, 9, "enum_NEXT_SYNTAX"], [97, 93, 10, "enum_LAST_LEXICAL_USE"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [101, 17, 10, "enum_LAST_LEXICAL_USE"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 105, 9, "enum_NEXT_SYNTAX"], [105, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 112, 9, "enum_NEXT_SYNTAX"], [113, 76, 10, "enum_LAST_LEXICAL_USE"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [115, 26, 10, "enum_LAST_LEXICAL_USE"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [117, 84, 10, "enum_LAST_LEXICAL_USE"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [123, 78, 10, "enum_LAST_LEXICAL_USE"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [125, 113, 10, "enum_LAST_LEXICAL_USE"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [127, 51, 10, "enum_LAST_LEXICAL_USE"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [3, 8, 1, "enum_CFG_NEXT"], [8, 24, 1, "enum_CFG_NEXT"], [24, 33, 1, "enum_CFG_NEXT"], [24, 41, 1, "enum_CFG_NEXT"], [33, 41, 1, "enum_CFG_NEXT"], [41, 50, 1, "enum_CFG_NEXT"], [50, 66, 1, "enum_CFG_NEXT"], [66, 112, 1, "enum_CFG_NEXT"], [66, 75, 1, "enum_CFG_NEXT"], [75, 121, 1, "enum_CFG_NEXT"], [75, 91, 1, "enum_CFG_NEXT"], [91, 93, 1, "enum_CFG_NEXT"], [93, 96, 1, "enum_CFG_NEXT"], [96, 105, 1, "enum_CFG_NEXT"], [112, 121, 1, "enum_CFG_NEXT"], [17, 2, 3, "enum_LAST_WRITE"], [23, 4, 3, "enum_LAST_WRITE"], [38, 23, 2, "enum_LAST_READ"], [38, 4, 3, "enum_LAST_WRITE"], [34, 38, 2, "enum_LAST_READ"], [34, 4, 3, "enum_LAST_WRITE"], [44, 38, 2, "enum_LAST_READ"], [44, 23, 2, "enum_LAST_READ"], [44, 34, 3, "enum_LAST_WRITE"], [44, 4, 3, "enum_LAST_WRITE"], [48, 12, 3, "enum_LAST_WRITE"], [42, 44, 2, "enum_LAST_READ"], [42, 34, 3, "enum_LAST_WRITE"], [42, 4, 3, "enum_LAST_WRITE"], [53, 44, 2, "enum_LAST_READ"], [53, 42, 3, "enum_LAST_WRITE"], [61, 21, 2, "enum_LAST_READ"], [63, 10, 3, "enum_LAST_WRITE"], [78, 63, 2, "enum_LAST_READ"], [78, 10, 3, "enum_LAST_WRITE"], [84, 53, 2, "enum_LAST_READ"], [84, 42, 3, "enum_LAST_WRITE"], [101, 17, 2, "enum_LAST_READ"], [101, 2, 3, "enum_LAST_WRITE"], [97, 93, 3, "enum_LAST_WRITE"], [115, 26, 2, "enum_LAST_READ"], [117, 53, 2, "enum_LAST_READ"], [117, 42, 3, "enum_LAST_WRITE"], [123, 78, 2, "enum_LAST_READ"], [123, 63, 2, "enum_LAST_READ"], [123, 10, 3, "enum_LAST_WRITE"], [125, 113, 3, "enum_LAST_WRITE"], [125, 76, 3, "enum_LAST_WRITE"], [127, 51, 3, "enum_LAST_WRITE"], [11, 15, 4, "enum_COMPUTED_FROM"], [11, 17, 4, "enum_COMPUTED_FROM"], [42, 48, 4, "enum_COMPUTED_FROM"], [42, 44, 4, "enum_COMPUTED_FROM"], [51, 57, 4, "enum_COMPUTED_FROM"], [51, 53, 4, "enum_COMPUTED_FROM"], [34, 36, 4, "enum_COMPUTED_FROM"], [34, 38, 4, "enum_COMPUTED_FROM"], [113, 115, 4, "enum_COMPUTED_FROM"], [113, 117, 4, "enum_COMPUTED_FROM"], [76, 84, 4, "enum_COMPUTED_FROM"], [76, 86, 4, "enum_COMPUTED_FROM"], [76, 78, 4, "enum_COMPUTED_FROM"], [98, 101, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "iskandr", "repo": "parakeet", "path": "parakeet/type_inference/linearize_args.py", "id": 21639, "has_bug": false, "code_full": "from typing import Any, Iterable, List, Tuple, Union\n\n\ndef unpack_closure(fn: Any) -> Tuple[Any, List]:\n    return None, []\n\n\nclass ActualArgs(Iterable):\n    def __init__(self, args: Union[List, Tuple]):\n        self.args = args\n\n    def prepend_positional(self, args: List) -> \"ActualArgs\":\n        return ActualArgs([])\n\n    def transform(self, fn: Any) -> \"ActualArgs\":\n        return ActualArgs([])\n    \n    def __iter__(self):\n        return iter(self.args)\n\n\nclass UnexpectedKeyword(Exception):\n    fn_name: str = \"\"\n\n\nclass FormalArgs:\n    def linearize_without_defaults(self, args: ActualArgs, tuple_elts: Any) -> List:\n        return []\n\n\ndef get_type(x: Any) -> Any:\n    pass\n\n\ntuple_elts: Any = None\n\n\ndef linearize_actual_args(fn: Any, args: Union[List, Tuple, ActualArgs]) -> Tuple[Any, List[Any], ActualArgs]:\n    untyped_fn, closure_args = unpack_closure(fn)\n    if isinstance(args, (list, tuple)):\n        args: ActualArgs = ActualArgs(args)\n    args = args.prepend_positional(closure_args)\n\n    arg_types: ActualArgs = args.transform(get_type)\n\n    # Drop arguments that are assigned defaults,\n    # since we're assuming those are set in the body\n    # of the function\n    if isinstance(untyped_fn.args, FormalArgs):\n        try:\n            combined_args: List = untyped_fn.args.linearize_without_defaults(args, tuple_elts)\n        except UnexpectedKeyword as e:\n            e.fn_name = fn.name \n        raise \n          \n    else:\n        combined_args = list(args)\n    \n    return untyped_fn, combined_args, arg_types\n", "code": "def linearize_actual_args(fn: Any, args: Union[List, Tuple, ActualArgs]) -> Tuple[Any, List[Any], ActualArgs]:\n    untyped_fn, closure_args = unpack_closure(fn)\n    if isinstance(args, (list, tuple)):\n        args: ActualArgs = ActualArgs(args)\n    args = args.prepend_positional(closure_args)\n\n    arg_types: ActualArgs = args.transform(get_type)\n\n    # Drop arguments that are assigned defaults,\n    # since we're assuming those are set in the body\n    # of the function\n    if isinstance(untyped_fn.args, FormalArgs):\n        try:\n            combined_args: List = untyped_fn.args.linearize_without_defaults(args, tuple_elts)\n        except UnexpectedKeyword as e:\n            e.fn_name = fn.name \n        raise \n          \n    else:\n        combined_args = list(args)\n    \n    return untyped_fn, combined_args, arg_types\n", "type_checked_pytype": true, "type_checked_mypy": false, "type_error_label": "union-attr", "hash": "d9089f999cc4a417d121970b2a447d5e524a3d3b"}
{"source_tokens": ["#NEWLINE#", "def flatten_relationships(", "self", ",", "relationships", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Flattens relationships dictionary which has information needed to create related resource objects.\\n\\n    Validates that formatting of relationships dictionary is correct.\\n    '", "#NEWLINE#", "if", "(", "not", "isinstance", "(", "relationships", ",", "dict", ")", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "ParseError", "(", ")", "#NEWLINE#", "#UNINDENT#", "related_resource", "=", "relationships", ".", "keys", "(", ")", "[", "0", "]", "#NEWLINE#", "if", "(", "(", "not", "isinstance", "(", "relationships", "[", "related_resource", "]", ",", "dict", ")", ")", "or", "(", "related_resource", "==", "'data'", ")", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "ParseError", "(", ")", "#NEWLINE#", "#UNINDENT#", "data", "=", "relationships", "[", "related_resource", "]", ".", "get", "(", "'data'", ")", "#NEWLINE#", "if", "(", "not", "data", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "JSONAPIException", "(", "source", "=", "{", "'pointer'", ":", "'data/relationships/{}/data'", ".", "format", "(", "related_resource", ")", "}", ",", "detail", "=", "NO_DATA_ERROR", ")", "#NEWLINE#", "#UNINDENT#", "target_type", "=", "data", ".", "get", "(", "'type'", ")", "#NEWLINE#", "if", "(", "not", "target_type", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "JSONAPIException", "(", "source", "=", "{", "'pointer'", ":", "'data/relationships/{}/data/type'", ".", "format", "(", "related_resource", ")", "}", ",", "detail", "=", "NO_TYPE_ERROR", ")", "#NEWLINE#", "#UNINDENT#", "id", "=", "data", ".", "get", "(", "'id'", ")", "#NEWLINE#", "return", "{", "'id'", ":", "id", ",", "'target_type'", ":", "target_type", "}"], "edges": [[1, 3, 7, "enum_FIELD"], [8, 9, 7, "enum_FIELD"], [11, 13, 7, "enum_FIELD"], [29, 37, 7, "enum_FIELD"], [41, 55, 7, "enum_FIELD"], [70, 79, 7, "enum_FIELD"], [83, 85, 7, "enum_FIELD"], [112, 118, 7, "enum_FIELD"], [122, 124, 7, "enum_FIELD"], [151, 157, 7, "enum_FIELD"], [161, 166, 7, "enum_FIELD"], [13, 17, 7, "enum_FIELD"], [24, 26, 7, "enum_FIELD"], [37, 35, 7, "enum_FIELD"], [37, 38, 7, "enum_FIELD"], [65, 67, 7, "enum_FIELD"], [79, 77, 7, "enum_FIELD"], [85, 86, 7, "enum_FIELD"], [91, 106, 7, "enum_FIELD"], [118, 116, 7, "enum_FIELD"], [124, 125, 7, "enum_FIELD"], [130, 145, 7, "enum_FIELD"], [157, 155, 7, "enum_FIELD"], [17, 14, 7, "enum_FIELD"], [26, 25, 7, "enum_FIELD"], [35, 33, 7, "enum_FIELD"], [44, 51, 7, "enum_FIELD"], [58, 57, 7, "enum_FIELD"], [67, 66, 7, "enum_FIELD"], [77, 74, 7, "enum_FIELD"], [106, 92, 7, "enum_FIELD"], [116, 115, 7, "enum_FIELD"], [145, 131, 7, "enum_FIELD"], [155, 154, 7, "enum_FIELD"], [33, 32, 7, "enum_FIELD"], [51, 45, 7, "enum_FIELD"], [74, 73, 7, "enum_FIELD"], [74, 75, 7, "enum_FIELD"], [94, 98, 7, "enum_FIELD"], [107, 109, 7, "enum_FIELD"], [133, 137, 7, "enum_FIELD"], [146, 148, 7, "enum_FIELD"], [48, 47, 7, "enum_FIELD"], [48, 49, 7, "enum_FIELD"], [102, 100, 7, "enum_FIELD"], [141, 139, 7, "enum_FIELD"], [100, 99, 7, "enum_FIELD"], [139, 138, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [16, 4, 10, "enum_LAST_LEXICAL_USE"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [32, 16, 10, "enum_LAST_LEXICAL_USE"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [45, 14, 10, "enum_LAST_LEXICAL_USE"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [47, 32, 10, "enum_LAST_LEXICAL_USE"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [49, 30, 10, "enum_LAST_LEXICAL_USE"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [52, 18, 10, "enum_LAST_LEXICAL_USE"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [57, 49, 10, "enum_LAST_LEXICAL_USE"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 65, 9, "enum_NEXT_SYNTAX"], [66, 25, 10, "enum_LAST_LEXICAL_USE"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [73, 47, 10, "enum_LAST_LEXICAL_USE"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [75, 57, 10, "enum_LAST_LEXICAL_USE"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [86, 71, 10, "enum_LAST_LEXICAL_USE"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [103, 75, 10, "enum_LAST_LEXICAL_USE"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [115, 86, 10, "enum_LAST_LEXICAL_USE"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [125, 113, 10, "enum_LAST_LEXICAL_USE"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 130, 9, "enum_NEXT_SYNTAX"], [131, 92, 10, "enum_LAST_LEXICAL_USE"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [142, 103, 10, "enum_LAST_LEXICAL_USE"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [154, 115, 10, "enum_LAST_LEXICAL_USE"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [165, 152, 10, "enum_LAST_LEXICAL_USE"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [169, 125, 10, "enum_LAST_LEXICAL_USE"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [3, 8, 1, "enum_CFG_NEXT"], [8, 13, 1, "enum_CFG_NEXT"], [13, 29, 1, "enum_CFG_NEXT"], [13, 24, 1, "enum_CFG_NEXT"], [29, 55, 1, "enum_CFG_NEXT"], [55, 65, 1, "enum_CFG_NEXT"], [55, 70, 1, "enum_CFG_NEXT"], [70, 85, 1, "enum_CFG_NEXT"], [85, 91, 1, "enum_CFG_NEXT"], [85, 112, 1, "enum_CFG_NEXT"], [112, 124, 1, "enum_CFG_NEXT"], [124, 130, 1, "enum_CFG_NEXT"], [124, 151, 1, "enum_CFG_NEXT"], [151, 161, 1, "enum_CFG_NEXT"], [16, 4, 3, "enum_LAST_WRITE"], [32, 16, 2, "enum_LAST_READ"], [32, 4, 3, "enum_LAST_WRITE"], [45, 14, 2, "enum_LAST_READ"], [47, 32, 2, "enum_LAST_READ"], [47, 4, 3, "enum_LAST_WRITE"], [49, 30, 3, "enum_LAST_WRITE"], [52, 18, 2, "enum_LAST_READ"], [57, 49, 2, "enum_LAST_READ"], [57, 30, 3, "enum_LAST_WRITE"], [73, 47, 2, "enum_LAST_READ"], [73, 4, 3, "enum_LAST_WRITE"], [75, 57, 2, "enum_LAST_READ"], [75, 30, 3, "enum_LAST_WRITE"], [86, 71, 3, "enum_LAST_WRITE"], [103, 75, 2, "enum_LAST_READ"], [103, 30, 3, "enum_LAST_WRITE"], [115, 86, 2, "enum_LAST_READ"], [115, 71, 3, "enum_LAST_WRITE"], [125, 113, 3, "enum_LAST_WRITE"], [142, 75, 2, "enum_LAST_READ"], [142, 30, 3, "enum_LAST_WRITE"], [154, 115, 2, "enum_LAST_READ"], [154, 71, 3, "enum_LAST_WRITE"], [165, 152, 3, "enum_LAST_WRITE"], [169, 125, 2, "enum_LAST_READ"], [169, 113, 3, "enum_LAST_WRITE"], [30, 32, 4, "enum_COMPUTED_FROM"], [71, 73, 4, "enum_COMPUTED_FROM"], [71, 75, 4, "enum_COMPUTED_FROM"], [113, 115, 4, "enum_COMPUTED_FROM"], [152, 154, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "CenterForOpenScience", "repo": "osf.io", "path": "api/base/parsers.py", "id": 2498, "has_bug": false, "code_full": "from typing import Any, Dict, Optional\n\n\nclass ParseError(Exception):\n    pass\n\n\nclass JSONAPIException(Exception):\n    def __init__(self, source: Dict[str, Any], detail: str):\n        pass\n\n\nNO_DATA_ERROR: str = \"\"\nNO_TYPE_ERROR: str = \"\"\n\n\ndef flatten_relationships(self, relationships: Dict[str, Any]) -> Dict[str, Any]:\n    \"\"\"\n    Flattens relationships dictionary which has information needed to create related resource objects.\n\n    Validates that formatting of relationships dictionary is correct.\n    \"\"\"\n    if not isinstance(relationships, dict):\n        raise ParseError()\n\n    # Can only create one type of relationship.\n    related_resource: str = relationships.keys()[0]\n    if not isinstance(relationships[related_resource], dict) or related_resource == 'data':\n        raise ParseError()\n    data: Optional[Dict[str, Any]] = relationships[related_resource].get('data')\n\n    if not data:\n        raise JSONAPIException(source={'pointer': 'data/relationships/{}/data'.format(related_resource)}, detail=NO_DATA_ERROR)\n\n    target_type = data.get('type')\n    if not target_type:\n        raise JSONAPIException(source={'pointer': 'data/relationships/{}/data/type'.format(related_resource)}, detail=NO_TYPE_ERROR)\n\n    id = data.get('id')\n    return {'id': id, 'target_type': target_type}\n", "code": "def flatten_relationships(self, relationships: Dict[str, Any]) -> Dict[str, Any]:\n    \"\"\"\n    Flattens relationships dictionary which has information needed to create related resource objects.\n\n    Validates that formatting of relationships dictionary is correct.\n    \"\"\"\n    if not isinstance(relationships, dict):\n        raise ParseError()\n\n    # Can only create one type of relationship.\n    related_resource: str = relationships.keys()[0]\n    if not isinstance(relationships[related_resource], dict) or related_resource == 'data':\n        raise ParseError()\n    data: Optional[Dict[str, Any]] = relationships[related_resource].get('data')\n\n    if not data:\n        raise JSONAPIException(source={'pointer': 'data/relationships/{}/data'.format(related_resource)}, detail=NO_DATA_ERROR)\n\n    target_type = data.get('type')\n    if not target_type:\n        raise JSONAPIException(source={'pointer': 'data/relationships/{}/data/type'.format(related_resource)}, detail=NO_TYPE_ERROR)\n\n    id = data.get('id')\n    return {'id': id, 'target_type': target_type}\n", "type_checked_pytype": false, "type_checked_mypy": false, "type_error_label": "unsupported-operands", "hash": "e72815b06b0cfab14cacb1a055905edf3f474025"}
{"source_tokens": ["#NEWLINE#", "@", "internationalizeDocstring", "#NEWLINE#", "def status(", "self", ",", "irc", ",", "msg", ",", "args", ")", ":", "#NEWLINE#", "#INDENT#", "'takes no arguments\\n\\n    Returns the status of the bot.\\n    '", "#NEWLINE#", "networks", "=", "{", "}", "#NEWLINE#", "for", "Irc", "in", "world", ".", "ircs", ":", "#NEWLINE#", "#INDENT#", "networks", ".", "setdefault", "(", "Irc", ".", "network", ",", "[", "]", ")", ".", "append", "(", "Irc", ".", "nick", ")", "#NEWLINE#", "#UNINDENT#", "networks", "=", "sorted", "(", "networks", ".", "items", "(", ")", ")", "#NEWLINE#", "networks", "=", "[", "format", "(", "_", "(", "'%s as %L'", ")", ",", "net", ",", "nicks", ")", "for", "(", "net", ",", "nicks", ")", "in", "networks", "]", "#NEWLINE#", "L", "=", "[", "format", "(", "_", "(", "'I am connected to %L.'", ")", ",", "networks", ")", "]", "#NEWLINE#", "if", "world", ".", "profiling", ":", "#NEWLINE#", "#INDENT#", "L", ".", "append", "(", "_", "(", "'I am currently in code profiling mode.'", ")", ")", "#NEWLINE#", "#UNINDENT#", "irc", ".", "reply", "(", "'  '", ".", "join", "(", "L", ")", ")"], "edges": [[1, 8, 7, "enum_FIELD"], [15, 16, 7, "enum_FIELD"], [17, 20, 7, "enum_FIELD"], [25, 24, 7, "enum_FIELD"], [25, 27, 7, "enum_FIELD"], [51, 55, 7, "enum_FIELD"], [62, 65, 7, "enum_FIELD"], [86, 89, 7, "enum_FIELD"], [101, 103, 7, "enum_FIELD"], [118, 122, 7, "enum_FIELD"], [27, 26, 7, "enum_FIELD"], [31, 45, 7, "enum_FIELD"], [55, 54, 7, "enum_FIELD"], [65, 72, 7, "enum_FIELD"], [103, 102, 7, "enum_FIELD"], [107, 111, 7, "enum_FIELD"], [122, 120, 7, "enum_FIELD"], [45, 43, 7, "enum_FIELD"], [59, 57, 7, "enum_FIELD"], [72, 66, 7, "enum_FIELD"], [77, 80, 7, "enum_FIELD"], [77, 84, 7, "enum_FIELD"], [96, 90, 7, "enum_FIELD"], [111, 109, 7, "enum_FIELD"], [120, 119, 7, "enum_FIELD"], [126, 124, 7, "enum_FIELD"], [43, 39, 7, "enum_FIELD"], [47, 46, 7, "enum_FIELD"], [57, 56, 7, "enum_FIELD"], [69, 68, 7, "enum_FIELD"], [93, 92, 7, "enum_FIELD"], [109, 108, 7, "enum_FIELD"], [113, 112, 7, "enum_FIELD"], [124, 123, 7, "enum_FIELD"], [39, 33, 7, "enum_FIELD"], [33, 32, 7, "enum_FIELD"], [37, 36, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 31, 9, "enum_NEXT_SYNTAX"], [32, 18, 10, "enum_LAST_LEXICAL_USE"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [36, 24, 10, "enum_LAST_LEXICAL_USE"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [46, 36, 10, "enum_LAST_LEXICAL_USE"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 51, 9, "enum_NEXT_SYNTAX"], [52, 32, 10, "enum_LAST_LEXICAL_USE"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [56, 52, 10, "enum_LAST_LEXICAL_USE"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [63, 56, 10, "enum_LAST_LEXICAL_USE"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [79, 73, 10, "enum_LAST_LEXICAL_USE"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [81, 75, 10, "enum_LAST_LEXICAL_USE"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [84, 63, 10, "enum_LAST_LEXICAL_USE"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [90, 66, 10, "enum_LAST_LEXICAL_USE"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [92, 68, 10, "enum_LAST_LEXICAL_USE"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [97, 84, 10, "enum_LAST_LEXICAL_USE"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 101, 9, "enum_NEXT_SYNTAX"], [102, 26, 10, "enum_LAST_LEXICAL_USE"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 107, 9, "enum_NEXT_SYNTAX"], [108, 87, 10, "enum_LAST_LEXICAL_USE"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [112, 92, 10, "enum_LAST_LEXICAL_USE"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 118, 9, "enum_NEXT_SYNTAX"], [119, 7, 10, "enum_LAST_LEXICAL_USE"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [127, 108, 10, "enum_LAST_LEXICAL_USE"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [2, 1, 1, "enum_CFG_NEXT"], [8, 15, 1, "enum_CFG_NEXT"], [15, 17, 1, "enum_CFG_NEXT"], [17, 27, 1, "enum_CFG_NEXT"], [27, 24, 1, "enum_CFG_NEXT"], [24, 51, 1, "enum_CFG_NEXT"], [24, 31, 1, "enum_CFG_NEXT"], [31, 24, 1, "enum_CFG_NEXT"], [51, 62, 1, "enum_CFG_NEXT"], [62, 86, 1, "enum_CFG_NEXT"], [86, 103, 1, "enum_CFG_NEXT"], [103, 118, 1, "enum_CFG_NEXT"], [103, 107, 1, "enum_CFG_NEXT"], [107, 118, 1, "enum_CFG_NEXT"], [24, 46, 2, "enum_LAST_READ"], [24, 24, 3, "enum_LAST_WRITE"], [32, 32, 2, "enum_LAST_READ"], [32, 18, 3, "enum_LAST_WRITE"], [36, 46, 2, "enum_LAST_READ"], [36, 24, 3, "enum_LAST_WRITE"], [46, 36, 2, "enum_LAST_READ"], [46, 24, 3, "enum_LAST_WRITE"], [56, 32, 2, "enum_LAST_READ"], [56, 18, 3, "enum_LAST_WRITE"], [52, 56, 2, "enum_LAST_READ"], [52, 18, 3, "enum_LAST_WRITE"], [79, 73, 2, "enum_LAST_READ"], [81, 75, 2, "enum_LAST_READ"], [84, 56, 2, "enum_LAST_READ"], [84, 52, 3, "enum_LAST_WRITE"], [63, 84, 2, "enum_LAST_READ"], [63, 52, 3, "enum_LAST_WRITE"], [90, 66, 2, "enum_LAST_READ"], [92, 68, 2, "enum_LAST_READ"], [97, 84, 2, "enum_LAST_READ"], [97, 63, 3, "enum_LAST_WRITE"], [102, 26, 2, "enum_LAST_READ"], [108, 87, 3, "enum_LAST_WRITE"], [112, 92, 2, "enum_LAST_READ"], [119, 7, 3, "enum_LAST_WRITE"], [127, 108, 2, "enum_LAST_READ"], [127, 87, 3, "enum_LAST_WRITE"], [52, 54, 4, "enum_COMPUTED_FROM"], [52, 56, 4, "enum_COMPUTED_FROM"], [63, 66, 4, "enum_COMPUTED_FROM"], [63, 73, 4, "enum_COMPUTED_FROM"], [63, 75, 4, "enum_COMPUTED_FROM"], [63, 84, 4, "enum_COMPUTED_FROM"], [63, 68, 4, "enum_COMPUTED_FROM"], [63, 79, 4, "enum_COMPUTED_FROM"], [63, 81, 4, "enum_COMPUTED_FROM"], [87, 90, 4, "enum_COMPUTED_FROM"], [87, 97, 4, "enum_COMPUTED_FROM"], [87, 92, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "ProgVal", "repo": "Limnoria", "path": "plugins/Status/plugin.py", "id": 6602, "has_bug": false, "code_full": "from typing import Any, Dict, Iterable, List, Tuple\n\n\ndef format(s: str, *args: Any) -> str:\n    return \"\"\n\n\ndef _(s: str) -> str:\n    return \"\"\n\n\nclass IrcCls:\n    network: str\n    nick: str\n\n\nclass World:\n    ircs: List[IrcCls]\n    profiling: bool\n\n\nworld = World()\n\n\ndef status(self, irc: Any, msg: Any, args: List[Any]):\n    \"\"\"takes no arguments\n\n    Returns the status of the bot.\n    \"\"\"\n    networks: Dict[str, List[str]] = {}\n    for Irc in world.ircs:\n        networks.setdefault(Irc.network, []).append(Irc.nick)\n    networks: Iterable[Tuple[str, List[str]]] = sorted(networks.items())\n    networks: List[str] = [format(_('%s as %L'), net, nicks) for (net,nicks) in networks]\n    L: List[str] = [format(_('I am connected to %L.'), networks)]\n    if world.profiling:\n        L.append(_('I am currently in code profiling mode.'))\n    irc.reply('  '.join(L))\n", "code": "def status(self, irc: Any, msg: Any, args: List[Any]):\n    \"\"\"takes no arguments\n\n    Returns the status of the bot.\n    \"\"\"\n    networks: Dict[str, List[str]] = {}\n    for Irc in world.ircs:\n        networks.setdefault(Irc.network, []).append(Irc.nick)\n    networks: Iterable[Tuple[str, List[str]]] = sorted(networks.items())\n    networks: List[str] = [format(_('%s as %L'), net, nicks) for (net,nicks) in networks]\n    L: List[str] = [format(_('I am connected to %L.'), networks)]\n    if world.profiling:\n        L.append(_('I am currently in code profiling mode.'))\n    irc.reply('  '.join(L))\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "22956a3f4dc9f777a091b46501fede7a4bf0731c"}
{"source_tokens": ["#NEWLINE#", "def normalize_reshape_value(", "origsize", ",", "shape", ")", ":", "#NEWLINE#", "#INDENT#", "num_neg_value", "=", "0", "#NEWLINE#", "for", "s", "in", "shape", ":", "#NEWLINE#", "#INDENT#", "if", "(", "s", "<", "0", ")", ":", "#NEWLINE#", "#INDENT#", "num_neg_value", "+=", "1", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "if", "(", "num_neg_value", "==", "0", ")", ":", "#NEWLINE#", "#INDENT#", "total_size", "=", "1", "#NEWLINE#", "for", "s", "in", "shape", ":", "#NEWLINE#", "#INDENT#", "total_size", "*=", "s", "#NEWLINE#", "#UNINDENT#", "if", "(", "origsize", "!=", "total_size", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "ValueError", "(", "'total size of new array must be unchanged'", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "num_neg_value", "==", "1", ")", ":", "#NEWLINE#", "#INDENT#", "known_size", "=", "1", "#NEWLINE#", "inferred_ax", "=", "0", "#NEWLINE#", "for", "(", "ax", ",", "s", ")", "in", "enumerate", "(", "shape", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "s", ">", "0", ")", ":", "#NEWLINE#", "#INDENT#", "known_size", "*=", "s", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "inferred_ax", "=", "ax", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "if", "(", "(", "origsize", "%", "known_size", ")", ">", "0", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "ValueError", "(", "'total size of new array must be unchanged'", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "shape", "[", "inferred_ax", "]", "=", "(", "origsize", "//", "known_size", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "raise", "ValueError", "(", "'multiple negative shape value'", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [8, 11, 7, "enum_FIELD"], [15, 14, 7, "enum_FIELD"], [15, 16, 7, "enum_FIELD"], [41, 38, 7, "enum_FIELD"], [20, 23, 7, "enum_FIELD"], [38, 37, 7, "enum_FIELD"], [43, 46, 7, "enum_FIELD"], [50, 49, 7, "enum_FIELD"], [50, 51, 7, "enum_FIELD"], [60, 63, 7, "enum_FIELD"], [87, 84, 7, "enum_FIELD"], [23, 22, 7, "enum_FIELD"], [28, 29, 7, "enum_FIELD"], [28, 31, 7, "enum_FIELD"], [54, 55, 7, "enum_FIELD"], [54, 57, 7, "enum_FIELD"], [63, 62, 7, "enum_FIELD"], [69, 71, 7, "enum_FIELD"], [84, 83, 7, "enum_FIELD"], [89, 92, 7, "enum_FIELD"], [93, 96, 7, "enum_FIELD"], [104, 101, 7, "enum_FIELD"], [104, 106, 7, "enum_FIELD"], [146, 143, 7, "enum_FIELD"], [177, 179, 7, "enum_FIELD"], [71, 70, 7, "enum_FIELD"], [106, 105, 7, "enum_FIELD"], [118, 115, 7, "enum_FIELD"], [143, 140, 7, "enum_FIELD"], [149, 151, 7, "enum_FIELD"], [159, 167, 7, "enum_FIELD"], [179, 178, 7, "enum_FIELD"], [115, 114, 7, "enum_FIELD"], [120, 121, 7, "enum_FIELD"], [120, 123, 7, "enum_FIELD"], [129, 132, 7, "enum_FIELD"], [140, 139, 7, "enum_FIELD"], [140, 141, 7, "enum_FIELD"], [151, 150, 7, "enum_FIELD"], [161, 160, 7, "enum_FIELD"], [161, 162, 7, "enum_FIELD"], [167, 166, 7, "enum_FIELD"], [167, 168, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [16, 4, 10, "enum_LAST_LEXICAL_USE"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [22, 14, 10, "enum_LAST_LEXICAL_USE"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 28, 9, "enum_NEXT_SYNTAX"], [29, 9, 10, "enum_LAST_LEXICAL_USE"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [37, 29, 10, "enum_LAST_LEXICAL_USE"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 48, 9, "enum_NEXT_SYNTAX"], [49, 22, 10, "enum_LAST_LEXICAL_USE"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [51, 16, 10, "enum_LAST_LEXICAL_USE"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 54, 9, "enum_NEXT_SYNTAX"], [55, 44, 10, "enum_LAST_LEXICAL_USE"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [57, 49, 10, "enum_LAST_LEXICAL_USE"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [62, 2, 10, "enum_LAST_LEXICAL_USE"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [64, 55, 10, "enum_LAST_LEXICAL_USE"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [83, 37, 10, "enum_LAST_LEXICAL_USE"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [102, 57, 10, "enum_LAST_LEXICAL_USE"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [107, 51, 10, "enum_LAST_LEXICAL_USE"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [114, 102, 10, "enum_LAST_LEXICAL_USE"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 120, 9, "enum_NEXT_SYNTAX"], [121, 90, 10, "enum_LAST_LEXICAL_USE"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [123, 114, 10, "enum_LAST_LEXICAL_USE"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 129, 9, "enum_NEXT_SYNTAX"], [130, 94, 10, "enum_LAST_LEXICAL_USE"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [132, 100, 10, "enum_LAST_LEXICAL_USE"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [139, 62, 10, "enum_LAST_LEXICAL_USE"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [141, 121, 10, "enum_LAST_LEXICAL_USE"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 149, 9, "enum_NEXT_SYNTAX"], [150, 70, 10, "enum_LAST_LEXICAL_USE"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 159, 9, "enum_NEXT_SYNTAX"], [160, 107, 10, "enum_LAST_LEXICAL_USE"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [162, 130, 10, "enum_LAST_LEXICAL_USE"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [166, 139, 10, "enum_LAST_LEXICAL_USE"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [168, 141, 10, "enum_LAST_LEXICAL_USE"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 177, 9, "enum_NEXT_SYNTAX"], [178, 150, 10, "enum_LAST_LEXICAL_USE"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [3, 8, 1, "enum_CFG_NEXT"], [8, 16, 1, "enum_CFG_NEXT"], [16, 14, 1, "enum_CFG_NEXT"], [14, 23, 1, "enum_CFG_NEXT"], [14, 38, 1, "enum_CFG_NEXT"], [23, 14, 1, "enum_CFG_NEXT"], [23, 28, 1, "enum_CFG_NEXT"], [28, 14, 1, "enum_CFG_NEXT"], [38, 84, 1, "enum_CFG_NEXT"], [38, 43, 1, "enum_CFG_NEXT"], [43, 51, 1, "enum_CFG_NEXT"], [51, 49, 1, "enum_CFG_NEXT"], [49, 54, 1, "enum_CFG_NEXT"], [49, 63, 1, "enum_CFG_NEXT"], [54, 49, 1, "enum_CFG_NEXT"], [63, 69, 1, "enum_CFG_NEXT"], [84, 177, 1, "enum_CFG_NEXT"], [84, 89, 1, "enum_CFG_NEXT"], [89, 93, 1, "enum_CFG_NEXT"], [93, 106, 1, "enum_CFG_NEXT"], [106, 101, 1, "enum_CFG_NEXT"], [101, 143, 1, "enum_CFG_NEXT"], [101, 115, 1, "enum_CFG_NEXT"], [115, 129, 1, "enum_CFG_NEXT"], [115, 120, 1, "enum_CFG_NEXT"], [120, 101, 1, "enum_CFG_NEXT"], [129, 101, 1, "enum_CFG_NEXT"], [143, 159, 1, "enum_CFG_NEXT"], [143, 149, 1, "enum_CFG_NEXT"], [16, 4, 3, "enum_LAST_WRITE"], [14, 22, 2, "enum_LAST_READ"], [14, 14, 3, "enum_LAST_WRITE"], [22, 22, 2, "enum_LAST_READ"], [22, 14, 3, "enum_LAST_WRITE"], [29, 29, 2, "enum_LAST_READ"], [29, 9, 3, "enum_LAST_WRITE"], [29, 29, 3, "enum_LAST_WRITE"], [29, 29, 2, "enum_LAST_READ"], [29, 9, 3, "enum_LAST_WRITE"], [29, 29, 3, "enum_LAST_WRITE"], [37, 29, 2, "enum_LAST_READ"], [37, 9, 3, "enum_LAST_WRITE"], [37, 29, 3, "enum_LAST_WRITE"], [51, 16, 2, "enum_LAST_READ"], [51, 4, 3, "enum_LAST_WRITE"], [49, 57, 2, "enum_LAST_READ"], [49, 22, 2, "enum_LAST_READ"], [49, 14, 3, "enum_LAST_WRITE"], [49, 49, 3, "enum_LAST_WRITE"], [57, 57, 2, "enum_LAST_READ"], [57, 22, 2, "enum_LAST_READ"], [57, 49, 3, "enum_LAST_WRITE"], [55, 55, 2, "enum_LAST_READ"], [55, 44, 3, "enum_LAST_WRITE"], [55, 55, 3, "enum_LAST_WRITE"], [55, 55, 2, "enum_LAST_READ"], [55, 44, 3, "enum_LAST_WRITE"], [55, 55, 3, "enum_LAST_WRITE"], [62, 2, 3, "enum_LAST_WRITE"], [64, 55, 2, "enum_LAST_READ"], [64, 44, 3, "enum_LAST_WRITE"], [64, 55, 3, "enum_LAST_WRITE"], [83, 37, 2, "enum_LAST_READ"], [83, 9, 3, "enum_LAST_WRITE"], [83, 29, 3, "enum_LAST_WRITE"], [107, 16, 2, "enum_LAST_READ"], [107, 4, 3, "enum_LAST_WRITE"], [100, 132, 2, "enum_LAST_READ"], [100, 100, 3, "enum_LAST_WRITE"], [102, 114, 2, "enum_LAST_READ"], [102, 123, 2, "enum_LAST_READ"], [102, 22, 2, "enum_LAST_READ"], [102, 14, 3, "enum_LAST_WRITE"], [102, 102, 3, "enum_LAST_WRITE"], [114, 114, 2, "enum_LAST_READ"], [114, 123, 2, "enum_LAST_READ"], [114, 22, 2, "enum_LAST_READ"], [114, 102, 3, "enum_LAST_WRITE"], [123, 114, 2, "enum_LAST_READ"], [123, 102, 3, "enum_LAST_WRITE"], [121, 121, 2, "enum_LAST_READ"], [121, 90, 3, "enum_LAST_WRITE"], [121, 121, 3, "enum_LAST_WRITE"], [121, 121, 2, "enum_LAST_READ"], [121, 90, 3, "enum_LAST_WRITE"], [121, 121, 3, "enum_LAST_WRITE"], [132, 132, 2, "enum_LAST_READ"], [132, 100, 3, "enum_LAST_WRITE"], [130, 94, 3, "enum_LAST_WRITE"], [130, 130, 3, "enum_LAST_WRITE"], [139, 2, 3, "enum_LAST_WRITE"], [141, 121, 2, "enum_LAST_READ"], [141, 90, 3, "enum_LAST_WRITE"], [141, 121, 3, "enum_LAST_WRITE"], [166, 139, 2, "enum_LAST_READ"], [166, 2, 3, "enum_LAST_WRITE"], [168, 141, 2, "enum_LAST_READ"], [168, 90, 3, "enum_LAST_WRITE"], [168, 121, 3, "enum_LAST_WRITE"], [160, 107, 2, "enum_LAST_READ"], [160, 4, 3, "enum_LAST_WRITE"], [162, 94, 3, "enum_LAST_WRITE"], [162, 130, 3, "enum_LAST_WRITE"], [161, 166, 4, "enum_COMPUTED_FROM"], [161, 168, 4, "enum_COMPUTED_FROM"], [130, 132, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "numba", "repo": "numba", "path": "numba/targets/arrayobj.py", "id": 29407, "has_bug": false, "code_full": "from typing import List\n\n\ndef normalize_reshape_value(origsize: int, shape: List[int]):\n    num_neg_value: int = 0\n    for s in shape:\n        if s < 0:\n            num_neg_value += 1\n\n    if num_neg_value == 0:\n        total_size: int = 1\n        for s in shape:\n            total_size *= s\n\n        if origsize != total_size:\n            raise ValueError(\"total size of new array must be unchanged\")\n\n    elif num_neg_value == 1:\n        # infer negative dimension\n        known_size: int = 1\n        inferred_ax: int = 0\n        for ax, s in enumerate(shape):\n            if s > 0:\n                known_size *= s\n            else:\n                inferred_ax = ax\n\n        if origsize % known_size > 0:\n            raise ValueError(\"total size of new array must be unchanged\")\n        else:\n            shape[inferred_ax] = origsize // known_size\n\n    else:\n        raise ValueError(\"multiple negative shape value\")\n", "code": "def normalize_reshape_value(origsize: int, shape: List[int]):\n    num_neg_value: int = 0\n    for s in shape:\n        if s < 0:\n            num_neg_value += 1\n\n    if num_neg_value == 0:\n        total_size: int = 1\n        for s in shape:\n            total_size *= s\n\n        if origsize != total_size:\n            raise ValueError(\"total size of new array must be unchanged\")\n\n    elif num_neg_value == 1:\n        # infer negative dimension\n        known_size: int = 1\n        inferred_ax: int = 0\n        for ax, s in enumerate(shape):\n            if s > 0:\n                known_size *= s\n            else:\n                inferred_ax = ax\n\n        if origsize % known_size > 0:\n            raise ValueError(\"total size of new array must be unchanged\")\n        else:\n            shape[inferred_ax] = origsize // known_size\n\n    else:\n        raise ValueError(\"multiple negative shape value\")\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "6c348e5591367006477b1ed6b7e72bdf8ea7cdea"}
{"source_tokens": ["#NEWLINE#", "def get_value(", "var", ",", "session", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "\" get_value.\\n\\n    Get a variable's value. If no session provided, use default one.\\n\\n    Arguments:\\n        var: `Variable`. The variable to get value from.\\n        session: `Session`. The session to run the op. Default: the default\\n            session.\\n\\n    Returns:\\n        The variable's value.\\n\\n    \"", "#NEWLINE#", "if", "(", "not", "session", ")", ":", "#NEWLINE#", "#INDENT#", "session", "=", "tf", ".", "get_default_session", "(", ")", "#NEWLINE#", "#UNINDENT#", "return", "var", ".", "eval", "(", "session", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [10, 11, 7, "enum_FIELD"], [13, 15, 7, "enum_FIELD"], [30, 34, 7, "enum_FIELD"], [15, 16, 7, "enum_FIELD"], [20, 26, 7, "enum_FIELD"], [34, 32, 7, "enum_FIELD"], [26, 24, 7, "enum_FIELD"], [32, 31, 7, "enum_FIELD"], [24, 23, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [16, 4, 10, "enum_LAST_LEXICAL_USE"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 20, 9, "enum_NEXT_SYNTAX"], [21, 16, 10, "enum_LAST_LEXICAL_USE"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 30, 9, "enum_NEXT_SYNTAX"], [31, 2, 10, "enum_LAST_LEXICAL_USE"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [35, 21, 10, "enum_LAST_LEXICAL_USE"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [6, 1, 1, "enum_CFG_NEXT"], [3, 10, 1, "enum_CFG_NEXT"], [10, 15, 1, "enum_CFG_NEXT"], [15, 30, 1, "enum_CFG_NEXT"], [15, 20, 1, "enum_CFG_NEXT"], [20, 30, 1, "enum_CFG_NEXT"], [16, 4, 3, "enum_LAST_WRITE"], [21, 16, 2, "enum_LAST_READ"], [21, 4, 3, "enum_LAST_WRITE"], [31, 2, 3, "enum_LAST_WRITE"], [35, 16, 2, "enum_LAST_READ"], [35, 21, 3, "enum_LAST_WRITE"], [35, 4, 3, "enum_LAST_WRITE"], [21, 23, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "tflearn", "repo": "tflearn", "path": "tflearn/variables.py", "id": 58144, "has_bug": false, "code_full": "from typing import Any, Optional\n\nimport tensorflow as tf\n\n\ndef get_value(var: tf.Variable, session: Optional[tf.Session] = None) -> Any:\n    \"\"\" get_value.\n\n    Get a variable's value. If no session provided, use default one.\n\n    Arguments:\n        var: `Variable`. The variable to get value from.\n        session: `Session`. The session to run the op. Default: the default\n            session.\n\n    Returns:\n        The variable's value.\n\n    \"\"\"\n    if not session:\n        session = tf.get_default_session()\n    return var.eval(session)\n", "code": "def get_value(var: tf.Variable, session: Optional[tf.Session] = None) -> Any:\n    \"\"\" get_value.\n\n    Get a variable's value. If no session provided, use default one.\n\n    Arguments:\n        var: `Variable`. The variable to get value from.\n        session: `Session`. The session to run the op. Default: the default\n            session.\n\n    Returns:\n        The variable's value.\n\n    \"\"\"\n    if not session:\n        session = tf.get_default_session()\n    return var.eval(session)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "db5176773299b67a2a75c5889fb2aba7fd0fea8a"}
{"source_tokens": ["#NEWLINE#", "@", "utils", ".", "Synchronized", "#NEWLINE#", "def GetValues(", "self", ",", "subject", ",", "attribute", ",", "start", ",", "end", ",", "limit", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "\"Returns the values of the attribute between 'start' and 'end'.\\n\\n  Args:\\n   subject: The subject.\\n   attribute: The attribute.\\n   start: The start timestamp.\\n   end: The end timestamp.\\n   limit: The maximum number of values to return.\\n\\n  Returns:\\n   A list of the form (value, timestamp).\\n  \"", "#NEWLINE#", "subject", "=", "utils", ".", "SmartStr", "(", "subject", ")", "#NEWLINE#", "attribute", "=", "utils", ".", "SmartStr", "(", "attribute", ")", "#NEWLINE#", "query", "=", "'SELECT value, timestamp FROM tbl\\n             WHERE subject = ? AND predicate = ? AND\\n                   timestamp >= ? AND timestamp <= ?\\n             ORDER BY timestamp'", "#NEWLINE#", "if", "limit", ":", "#NEWLINE#", "#INDENT#", "query", "+=", "' LIMIT ?'", "#NEWLINE#", "args", "=", "(", "subject", ",", "attribute", ",", "start", ",", "end", ",", "limit", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "args", "=", "(", "subject", ",", "attribute", ",", "start", ",", "end", ")", "#NEWLINE#", "#UNINDENT#", "data", "=", "self", ".", "Execute", "(", "query", ",", "args", ")", ".", "fetchall", "(", ")", "#NEWLINE#", "return", "data"], "edges": [[1, 12, 7, "enum_FIELD"], [23, 24, 7, "enum_FIELD"], [25, 31, 7, "enum_FIELD"], [34, 40, 7, "enum_FIELD"], [43, 46, 7, "enum_FIELD"], [50, 49, 7, "enum_FIELD"], [88, 101, 7, "enum_FIELD"], [104, 105, 7, "enum_FIELD"], [3, 2, 7, "enum_FIELD"], [31, 29, 7, "enum_FIELD"], [40, 38, 7, "enum_FIELD"], [52, 53, 7, "enum_FIELD"], [52, 55, 7, "enum_FIELD"], [56, 63, 7, "enum_FIELD"], [75, 82, 7, "enum_FIELD"], [101, 99, 7, "enum_FIELD"], [29, 28, 7, "enum_FIELD"], [38, 37, 7, "enum_FIELD"], [99, 96, 7, "enum_FIELD"], [96, 92, 7, "enum_FIELD"], [92, 91, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [26, 9, 10, "enum_LAST_LEXICAL_USE"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [28, 2, 10, "enum_LAST_LEXICAL_USE"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [32, 26, 10, "enum_LAST_LEXICAL_USE"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [35, 11, 10, "enum_LAST_LEXICAL_USE"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [37, 28, 10, "enum_LAST_LEXICAL_USE"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [41, 35, 10, "enum_LAST_LEXICAL_USE"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 48, 9, "enum_NEXT_SYNTAX"], [49, 17, 10, "enum_LAST_LEXICAL_USE"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 52, 9, "enum_NEXT_SYNTAX"], [53, 44, 10, "enum_LAST_LEXICAL_USE"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [60, 32, 10, "enum_LAST_LEXICAL_USE"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [62, 41, 10, "enum_LAST_LEXICAL_USE"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [64, 13, 10, "enum_LAST_LEXICAL_USE"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [66, 15, 10, "enum_LAST_LEXICAL_USE"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [68, 49, 10, "enum_LAST_LEXICAL_USE"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 75, 9, "enum_NEXT_SYNTAX"], [76, 57, 10, "enum_LAST_LEXICAL_USE"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [79, 60, 10, "enum_LAST_LEXICAL_USE"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [81, 62, 10, "enum_LAST_LEXICAL_USE"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [83, 64, 10, "enum_LAST_LEXICAL_USE"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [85, 66, 10, "enum_LAST_LEXICAL_USE"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [91, 7, 10, "enum_LAST_LEXICAL_USE"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [95, 53, 10, "enum_LAST_LEXICAL_USE"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [97, 76, 10, "enum_LAST_LEXICAL_USE"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 104, 9, "enum_NEXT_SYNTAX"], [105, 89, 10, "enum_LAST_LEXICAL_USE"], [104, 105, 9, "enum_NEXT_SYNTAX"], [19, 3, 1, "enum_CFG_NEXT"], [3, 1, 1, "enum_CFG_NEXT"], [12, 23, 1, "enum_CFG_NEXT"], [23, 25, 1, "enum_CFG_NEXT"], [25, 34, 1, "enum_CFG_NEXT"], [34, 43, 1, "enum_CFG_NEXT"], [43, 49, 1, "enum_CFG_NEXT"], [49, 75, 1, "enum_CFG_NEXT"], [49, 52, 1, "enum_CFG_NEXT"], [52, 56, 1, "enum_CFG_NEXT"], [56, 88, 1, "enum_CFG_NEXT"], [75, 88, 1, "enum_CFG_NEXT"], [88, 104, 1, "enum_CFG_NEXT"], [32, 9, 3, "enum_LAST_WRITE"], [26, 32, 2, "enum_LAST_READ"], [26, 9, 3, "enum_LAST_WRITE"], [37, 28, 2, "enum_LAST_READ"], [41, 11, 3, "enum_LAST_WRITE"], [35, 41, 2, "enum_LAST_READ"], [35, 11, 3, "enum_LAST_WRITE"], [49, 17, 3, "enum_LAST_WRITE"], [53, 44, 3, "enum_LAST_WRITE"], [53, 53, 2, "enum_LAST_READ"], [53, 44, 3, "enum_LAST_WRITE"], [60, 32, 2, "enum_LAST_READ"], [60, 26, 3, "enum_LAST_WRITE"], [62, 41, 2, "enum_LAST_READ"], [62, 35, 3, "enum_LAST_WRITE"], [64, 13, 3, "enum_LAST_WRITE"], [66, 15, 3, "enum_LAST_WRITE"], [68, 49, 2, "enum_LAST_READ"], [68, 17, 3, "enum_LAST_WRITE"], [79, 32, 2, "enum_LAST_READ"], [79, 26, 3, "enum_LAST_WRITE"], [81, 41, 2, "enum_LAST_READ"], [81, 35, 3, "enum_LAST_WRITE"], [83, 13, 3, "enum_LAST_WRITE"], [85, 15, 3, "enum_LAST_WRITE"], [91, 7, 3, "enum_LAST_WRITE"], [95, 53, 2, "enum_LAST_READ"], [95, 44, 3, "enum_LAST_WRITE"], [95, 53, 3, "enum_LAST_WRITE"], [97, 76, 3, "enum_LAST_WRITE"], [97, 57, 3, "enum_LAST_WRITE"], [105, 89, 3, "enum_LAST_WRITE"], [26, 32, 4, "enum_COMPUTED_FROM"], [26, 28, 4, "enum_COMPUTED_FROM"], [35, 41, 4, "enum_COMPUTED_FROM"], [35, 37, 4, "enum_COMPUTED_FROM"], [89, 95, 4, "enum_COMPUTED_FROM"], [89, 97, 4, "enum_COMPUTED_FROM"], [89, 91, 4, "enum_COMPUTED_FROM"], [57, 60, 4, "enum_COMPUTED_FROM"], [57, 62, 4, "enum_COMPUTED_FROM"], [57, 64, 4, "enum_COMPUTED_FROM"], [57, 66, 4, "enum_COMPUTED_FROM"], [57, 68, 4, "enum_COMPUTED_FROM"], [76, 79, 4, "enum_COMPUTED_FROM"], [76, 81, 4, "enum_COMPUTED_FROM"], [76, 83, 4, "enum_COMPUTED_FROM"], [76, 85, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "google", "repo": "grr", "path": "grr/lib/data_stores/sqlite_data_store.py", "id": 18747, "has_bug": false, "code_full": "from typing import Any, List, Optional, Tuple\n\n\nclass utils:\n    @staticmethod\n    def SmartStr(value: Any) -> str:\n        return str(value)\n\n\nclass Class:\n\n    def Execute(self, query: str, args: Tuple) -> Any:\n        pass\n\n    def GetValues(self, subject: Any, attribute: Any, start: float, end: float, limit: Optional[int]=None) -> List[Tuple[Any, float]]:\n        \"\"\"Returns the values of the attribute between 'start' and 'end'.\n\n        Args:\n            subject: The subject.\n            attribute: The attribute.\n            start: The start timestamp.\n            end: The end timestamp.\n            limit: The maximum number of values to return.\n\n        Returns:\n            A list of the form (value, timestamp).\n        \"\"\"\n        subject: str = utils.SmartStr(subject)\n        attribute: str = utils.SmartStr(attribute)\n        query: str = \"\"\"SELECT value, timestamp FROM tbl\n                    WHERE subject = ? AND predicate = ? AND\n                            timestamp >= ? AND timestamp <= ?\n                    ORDER BY timestamp\"\"\"\n        if limit:\n            query += \" LIMIT ?\"\n            args: Tuple = (subject, attribute, start, end, limit)\n        else:\n            args: Tuple = (subject, attribute, start, end)\n        data = self.Execute(query, args).fetchall()\n        return data\n", "code": "def GetValues(self, subject: Any, attribute: Any, start: float, end: float, limit: Optional[int]=None) -> List[Tuple[Any, float]]:\n    \"\"\"Returns the values of the attribute between 'start' and 'end'.\n\n    Args:\n        subject: The subject.\n        attribute: The attribute.\n        start: The start timestamp.\n        end: The end timestamp.\n        limit: The maximum number of values to return.\n\n    Returns:\n        A list of the form (value, timestamp).\n    \"\"\"\n    subject: str = utils.SmartStr(subject)\n    attribute: str = utils.SmartStr(attribute)\n    query: str = \"\"\"SELECT value, timestamp FROM tbl\n                WHERE subject = ? AND predicate = ? AND\n                        timestamp >= ? AND timestamp <= ?\n                ORDER BY timestamp\"\"\"\n    if limit:\n        query += \" LIMIT ?\"\n        args: Tuple = (subject, attribute, start, end, limit)\n    else:\n        args: Tuple = (subject, attribute, start, end)\n    data = self.Execute(query, args).fetchall()\n    return data\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "7b0e6c18ea47e5361e36554beebdb9fc112f7350"}
{"source_tokens": ["#NEWLINE#", "def test_get_options_from_ini_no_ini_path_multi_bandit_files(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "target_directory", "=", "self", ".", "useFixture", "(", "fixtures", ".", "TempDir", "(", ")", ")", ".", "path", "#NEWLINE#", "second_config", "=", "'second_config_directory'", "#NEWLINE#", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "target_directory", ",", "second_config", ")", ")", "#NEWLINE#", "bandit_config_one", "=", "os", ".", "path", ".", "join", "(", "target_directory", ",", "'.bandit'", ")", "#NEWLINE#", "bandit_config_two", "=", "os", ".", "path", ".", "join", "(", "target_directory", ",", "second_config", ",", "'.bandit'", ")", "#NEWLINE#", "bandit_files", "=", "[", "bandit_config_one", ",", "bandit_config_two", "]", "#NEWLINE#", "for", "bandit_file", "in", "bandit_files", ":", "#NEWLINE#", "#INDENT#", "with", "open", "(", "bandit_file", ",", "'wt'", ")", "as", "fd", ":", "#NEWLINE#", "#INDENT#", "fd", ".", "write", "(", "bandit_config_content", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "self", ".", "assertRaisesRegex", "(", "SystemExit", ",", "'2'", ",", "bandit", ".", "_get_options_from_ini", ",", "None", ",", "[", "target_directory", "]", ")"], "edges": [[6, 19, 7, "enum_FIELD"], [21, 24, 7, "enum_FIELD"], [25, 29, 7, "enum_FIELD"], [41, 51, 7, "enum_FIELD"], [54, 64, 7, "enum_FIELD"], [69, 74, 7, "enum_FIELD"], [80, 79, 7, "enum_FIELD"], [80, 81, 7, "enum_FIELD"], [105, 113, 7, "enum_FIELD"], [19, 12, 7, "enum_FIELD"], [29, 27, 7, "enum_FIELD"], [51, 47, 7, "enum_FIELD"], [64, 60, 7, "enum_FIELD"], [113, 107, 7, "enum_FIELD"], [12, 10, 7, "enum_FIELD"], [27, 26, 7, "enum_FIELD"], [37, 33, 7, "enum_FIELD"], [47, 45, 7, "enum_FIELD"], [60, 58, 7, "enum_FIELD"], [92, 89, 7, "enum_FIELD"], [92, 93, 7, "enum_FIELD"], [96, 100, 7, "enum_FIELD"], [107, 106, 7, "enum_FIELD"], [115, 114, 7, "enum_FIELD"], [10, 9, 7, "enum_FIELD"], [16, 14, 7, "enum_FIELD"], [33, 31, 7, "enum_FIELD"], [45, 44, 7, "enum_FIELD"], [58, 57, 7, "enum_FIELD"], [89, 86, 7, "enum_FIELD"], [100, 98, 7, "enum_FIELD"], [14, 13, 7, "enum_FIELD"], [31, 30, 7, "enum_FIELD"], [98, 97, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [9, 2, 10, "enum_LAST_LEXICAL_USE"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [30, 26, 10, "enum_LAST_LEXICAL_USE"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [36, 7, 10, "enum_LAST_LEXICAL_USE"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [38, 22, 10, "enum_LAST_LEXICAL_USE"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [44, 30, 10, "enum_LAST_LEXICAL_USE"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [50, 36, 10, "enum_LAST_LEXICAL_USE"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [57, 44, 10, "enum_LAST_LEXICAL_USE"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [63, 50, 10, "enum_LAST_LEXICAL_USE"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [65, 38, 10, "enum_LAST_LEXICAL_USE"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [73, 42, 10, "enum_LAST_LEXICAL_USE"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [75, 55, 10, "enum_LAST_LEXICAL_USE"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [81, 70, 10, "enum_LAST_LEXICAL_USE"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [88, 79, 10, "enum_LAST_LEXICAL_USE"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 96, 9, "enum_NEXT_SYNTAX"], [97, 93, 10, "enum_LAST_LEXICAL_USE"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 105, 9, "enum_NEXT_SYNTAX"], [106, 9, 10, "enum_LAST_LEXICAL_USE"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [121, 63, 10, "enum_LAST_LEXICAL_USE"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [6, 21, 1, "enum_CFG_NEXT"], [21, 25, 1, "enum_CFG_NEXT"], [25, 41, 1, "enum_CFG_NEXT"], [41, 54, 1, "enum_CFG_NEXT"], [54, 69, 1, "enum_CFG_NEXT"], [69, 81, 1, "enum_CFG_NEXT"], [81, 79, 1, "enum_CFG_NEXT"], [79, 105, 1, "enum_CFG_NEXT"], [79, 79, 1, "enum_CFG_NEXT"], [9, 2, 3, "enum_LAST_WRITE"], [30, 26, 2, "enum_LAST_READ"], [36, 7, 3, "enum_LAST_WRITE"], [38, 22, 3, "enum_LAST_WRITE"], [44, 30, 2, "enum_LAST_READ"], [50, 36, 2, "enum_LAST_READ"], [50, 7, 3, "enum_LAST_WRITE"], [57, 44, 2, "enum_LAST_READ"], [63, 50, 2, "enum_LAST_READ"], [63, 7, 3, "enum_LAST_WRITE"], [65, 38, 2, "enum_LAST_READ"], [65, 22, 3, "enum_LAST_WRITE"], [73, 42, 3, "enum_LAST_WRITE"], [75, 55, 3, "enum_LAST_WRITE"], [81, 70, 3, "enum_LAST_WRITE"], [79, 79, 3, "enum_LAST_WRITE"], [106, 9, 2, "enum_LAST_READ"], [106, 2, 3, "enum_LAST_WRITE"], [121, 63, 2, "enum_LAST_READ"], [121, 7, 3, "enum_LAST_WRITE"], [7, 9, 4, "enum_COMPUTED_FROM"], [7, 13, 4, "enum_COMPUTED_FROM"], [42, 50, 4, "enum_COMPUTED_FROM"], [42, 44, 4, "enum_COMPUTED_FROM"], [55, 63, 4, "enum_COMPUTED_FROM"], [55, 65, 4, "enum_COMPUTED_FROM"], [55, 57, 4, "enum_COMPUTED_FROM"], [70, 73, 4, "enum_COMPUTED_FROM"], [70, 75, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "openstack", "repo": "bandit", "path": "tests/unit/cli/test_main.py", "id": 33318, "has_bug": false, "code_full": "import os\nimport unittest\nfrom typing import Any, List\n\n\nclass bandit:\n    @staticmethod\n    def _get_options_from_ini(ini_path: str, target: List[str]):\n        pass\n\n\nclass fixtures:\n    @staticmethod\n    def TempDir() -> Any:\n        pass\n\n\nbandit_config_content: str = \"\"\n\n\nclass Class(unittest.TestCase):\n    def useFixture(self, fixture: Any) -> Any:\n        pass\n\n    def test_get_options_from_ini_no_ini_path_multi_bandit_files(self):\n        # Test that bandit exits when no ini path is provided and the target\n        # directory(s) contain multiple bandit config files (.bandit)\n        target_directory: str = self.useFixture(fixtures.TempDir()).path\n        second_config: str = 'second_config_directory'\n        os.mkdir(os.path.join(target_directory, second_config))\n        bandit_config_one: str = os.path.join(target_directory, '.bandit')\n        bandit_config_two: str = os.path.join(target_directory, second_config,\n                                            '.bandit')\n        bandit_files: List[str] = [bandit_config_one, bandit_config_two]\n        for bandit_file in bandit_files:\n            with open(bandit_file, 'wt') as fd:\n                fd.write(bandit_config_content)\n        self.assertRaisesRegex(SystemExit, '2', bandit._get_options_from_ini,\n                                None, [target_directory])\n", "code": "def test_get_options_from_ini_no_ini_path_multi_bandit_files(self):\n    # Test that bandit exits when no ini path is provided and the target\n    # directory(s) contain multiple bandit config files (.bandit)\n    target_directory: str = self.useFixture(fixtures.TempDir()).path\n    second_config: str = 'second_config_directory'\n    os.mkdir(os.path.join(target_directory, second_config))\n    bandit_config_one: str = os.path.join(target_directory, '.bandit')\n    bandit_config_two: str = os.path.join(target_directory, second_config,\n                                        '.bandit')\n    bandit_files: List[str] = [bandit_config_one, bandit_config_two]\n    for bandit_file in bandit_files:\n        with open(bandit_file, 'wt') as fd:\n            fd.write(bandit_config_content)\n    self.assertRaisesRegex(SystemExit, '2', bandit._get_options_from_ini,\n                            None, [target_directory])\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "00742402aa88447f94c4a8c1c067a9e0dfb8c981"}
{"source_tokens": ["#NEWLINE#", "@", "lower_builtin", "(", "'array.copy'", ",", "types", ".", "Array", ")", "#NEWLINE#", "def array_copy(", "context", ",", "builder", ",", "sig", ",", "args", ")", ":", "#NEWLINE#", "#INDENT#", "return", "_array_copy", "(", "context", ",", "builder", ",", "sig", ",", "args", ")"], "edges": [[1, 15, 7, "enum_FIELD"], [23, 29, 7, "enum_FIELD"], [5, 2, 7, "enum_FIELD"], [29, 24, 7, "enum_FIELD"], [7, 6, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [26, 12, 10, "enum_LAST_LEXICAL_USE"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [28, 14, 10, "enum_LAST_LEXICAL_USE"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [30, 16, 10, "enum_LAST_LEXICAL_USE"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [32, 18, 10, "enum_LAST_LEXICAL_USE"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [5, 1, 1, "enum_CFG_NEXT"], [15, 23, 1, "enum_CFG_NEXT"], [26, 12, 3, "enum_LAST_WRITE"], [28, 14, 3, "enum_LAST_WRITE"], [30, 16, 3, "enum_LAST_WRITE"], [32, 18, 3, "enum_LAST_WRITE"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "numba", "repo": "numba", "path": "numba/targets/arrayobj.py", "id": 29182, "has_bug": false, "code_full": "from typing import Any\n\nfrom numba import types\n\n\ndef _array_copy(context: Any, builder: Any, sig: types.Signature, args: Any) -> Any:\n    pass\n\ndef array_copy(context: Any, builder: Any, sig: types.Signature, args: Any) -> Any:\n    return _array_copy(context, builder, sig, args)\n", "code": "def array_copy(context: Any, builder: Any, sig: types.Signature, args: Any) -> Any:\n    return _array_copy(context, builder, sig, args)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "4e9696bc7f4e1b8c0974f1cb27d35586c37f13d3"}
{"source_tokens": ["#NEWLINE#", "def cb(", "result", ")", ":", "#NEWLINE#", "#INDENT#", "if", "self", ".", "running", ":", "#NEWLINE#", "#INDENT#", "self", ".", "_scheduleFrom", "(", "self", ".", "clock", ".", "seconds", "(", ")", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "(", "d", ",", "self", ".", "_deferred", ")", "=", "(", "self", ".", "_deferred", ",", "None", ")", "#NEWLINE#", "d", ".", "callback", "(", "self", ")"], "edges": [[11, 9, 7, "enum_FIELD"], [9, 8, 7, "enum_FIELD"], [13, 17, 7, "enum_FIELD"], [31, 44, 7, "enum_FIELD"], [47, 51, 7, "enum_FIELD"], [17, 15, 7, "enum_FIELD"], [51, 49, 7, "enum_FIELD"], [15, 14, 7, "enum_FIELD"], [23, 21, 7, "enum_FIELD"], [36, 35, 7, "enum_FIELD"], [42, 41, 7, "enum_FIELD"], [49, 48, 7, "enum_FIELD"], [21, 19, 7, "enum_FIELD"], [19, 18, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 13, 9, "enum_NEXT_SYNTAX"], [14, 8, 10, "enum_LAST_LEXICAL_USE"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [18, 14, 10, "enum_LAST_LEXICAL_USE"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [35, 18, 10, "enum_LAST_LEXICAL_USE"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [41, 35, 10, "enum_LAST_LEXICAL_USE"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [48, 33, 10, "enum_LAST_LEXICAL_USE"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [52, 41, 10, "enum_LAST_LEXICAL_USE"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [9, 31, 1, "enum_CFG_NEXT"], [9, 13, 1, "enum_CFG_NEXT"], [31, 47, 1, "enum_CFG_NEXT"], [14, 8, 2, "enum_LAST_READ"], [18, 14, 2, "enum_LAST_READ"], [41, 8, 2, "enum_LAST_READ"], [35, 41, 2, "enum_LAST_READ"], [48, 33, 3, "enum_LAST_WRITE"], [52, 35, 2, "enum_LAST_READ"], [34, 41, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "twisted", "repo": "twisted", "path": "twisted/internet/task.py", "id": 59145, "has_bug": false, "code_full": "from typing import Any, Optional\n\nfrom twisted.internet.defer import Deferred\n\n\nclass Class:\n    running: bool = False\n    _deferred: Deferred = Deferred()\n    clock: Any = None\n\n    def _scheduleFrom(self, seconds: float):\n        pass\n\n\nself = Class()\n\n\ndef cb(result):\n    if self.running:\n        self._scheduleFrom(self.clock.seconds())\n    else:\n        d, self._deferred = self._deferred, None\n        d.callback(self)\n", "code": "def cb(result):\n    if self.running:\n        self._scheduleFrom(self.clock.seconds())\n    else:\n        d, self._deferred = self._deferred, None\n        d.callback(self)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "b5873ea830ff54e336efb957fcff3e853150b1fb"}
{"source_tokens": ["#NEWLINE#", "def _calculate_datasum(", "self", ",", "blocking", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Calculate the value for the ``DATASUM`` card in the HDU.\\n    '", "#NEWLINE#", "if", "self", ".", "_has_data", ":", "#NEWLINE#", "#INDENT#", "byteorder", "=", "self", ".", "data", ".", "dtype", ".", "fields", "[", "self", ".", "data", ".", "dtype", ".", "names", "[", "0", "]", "]", "[", "0", "]", ".", "str", "[", "0", "]", "#NEWLINE#", "if", "(", "byteorder", "!=", "'>'", ")", ":", "#NEWLINE#", "#INDENT#", "byteswapped", "=", "True", "#NEWLINE#", "d", "=", "self", ".", "data", ".", "byteswap", "(", "True", ")", "#NEWLINE#", "d", ".", "dtype", "=", "d", ".", "dtype", ".", "newbyteorder", "(", "'>'", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "byteswapped", "=", "False", "#NEWLINE#", "d", "=", "self", ".", "data", "#NEWLINE#", "#UNINDENT#", "byte_data", "=", "d", ".", "view", "(", "type", "=", "np", ".", "ndarray", ",", "dtype", "=", "np", ".", "ubyte", ")", "#NEWLINE#", "cs", "=", "self", ".", "_compute_checksum", "(", "byte_data", ",", "blocking", "=", "blocking", ")", "#NEWLINE#", "if", "byteswapped", ":", "#NEWLINE#", "#INDENT#", "d", ".", "byteswap", "(", "True", ")", "#NEWLINE#", "d", ".", "dtype", "=", "d", ".", "dtype", ".", "newbyteorder", "(", "'<'", ")", "#NEWLINE#", "#UNINDENT#", "return", "cs", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "return", "super", "(", "GroupsHDU", ",", "self", ")", ".", "_calculate_datasum", "(", "blocking", "=", "blocking", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [8, 9, 7, "enum_FIELD"], [15, 13, 7, "enum_FIELD"], [13, 12, 7, "enum_FIELD"], [17, 44, 7, "enum_FIELD"], [54, 51, 7, "enum_FIELD"], [100, 112, 7, "enum_FIELD"], [119, 127, 7, "enum_FIELD"], [133, 134, 7, "enum_FIELD"], [159, 160, 7, "enum_FIELD"], [167, 176, 7, "enum_FIELD"], [44, 42, 7, "enum_FIELD"], [44, 45, 7, "enum_FIELD"], [51, 50, 7, "enum_FIELD"], [56, 59, 7, "enum_FIELD"], [60, 68, 7, "enum_FIELD"], [71, 81, 7, "enum_FIELD"], [89, 92, 7, "enum_FIELD"], [93, 97, 7, "enum_FIELD"], [112, 104, 7, "enum_FIELD"], [127, 123, 7, "enum_FIELD"], [137, 141, 7, "enum_FIELD"], [144, 154, 7, "enum_FIELD"], [176, 174, 7, "enum_FIELD"], [42, 39, 7, "enum_FIELD"], [68, 66, 7, "enum_FIELD"], [73, 72, 7, "enum_FIELD"], [81, 79, 7, "enum_FIELD"], [97, 96, 7, "enum_FIELD"], [104, 103, 7, "enum_FIELD"], [107, 110, 7, "enum_FIELD"], [113, 116, 7, "enum_FIELD"], [123, 122, 7, "enum_FIELD"], [128, 130, 7, "enum_FIELD"], [141, 139, 7, "enum_FIELD"], [146, 145, 7, "enum_FIELD"], [154, 152, 7, "enum_FIELD"], [174, 171, 7, "enum_FIELD"], [177, 179, 7, "enum_FIELD"], [39, 27, 7, "enum_FIELD"], [39, 40, 7, "enum_FIELD"], [66, 64, 7, "enum_FIELD"], [79, 77, 7, "enum_FIELD"], [110, 109, 7, "enum_FIELD"], [116, 115, 7, "enum_FIELD"], [139, 138, 7, "enum_FIELD"], [152, 150, 7, "enum_FIELD"], [171, 168, 7, "enum_FIELD"], [27, 25, 7, "enum_FIELD"], [27, 35, 7, "enum_FIELD"], [64, 63, 7, "enum_FIELD"], [77, 76, 7, "enum_FIELD"], [150, 149, 7, "enum_FIELD"], [25, 23, 7, "enum_FIELD"], [35, 33, 7, "enum_FIELD"], [35, 36, 7, "enum_FIELD"], [23, 21, 7, "enum_FIELD"], [33, 31, 7, "enum_FIELD"], [21, 20, 7, "enum_FIELD"], [31, 29, 7, "enum_FIELD"], [29, 28, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 11, 9, "enum_NEXT_SYNTAX"], [12, 2, 10, "enum_LAST_LEXICAL_USE"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [20, 12, 10, "enum_LAST_LEXICAL_USE"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [28, 20, 10, "enum_LAST_LEXICAL_USE"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [50, 18, 10, "enum_LAST_LEXICAL_USE"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [63, 28, 10, "enum_LAST_LEXICAL_USE"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [72, 61, 10, "enum_LAST_LEXICAL_USE"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [76, 72, 10, "enum_LAST_LEXICAL_USE"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 89, 9, "enum_NEXT_SYNTAX"], [90, 57, 10, "enum_LAST_LEXICAL_USE"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [94, 76, 10, "enum_LAST_LEXICAL_USE"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [96, 63, 10, "enum_LAST_LEXICAL_USE"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [103, 94, 10, "enum_LAST_LEXICAL_USE"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [115, 109, 10, "enum_LAST_LEXICAL_USE"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [122, 96, 10, "enum_LAST_LEXICAL_USE"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [126, 101, 10, "enum_LAST_LEXICAL_USE"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [130, 4, 10, "enum_LAST_LEXICAL_USE"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 133, 9, "enum_NEXT_SYNTAX"], [134, 90, 10, "enum_LAST_LEXICAL_USE"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 137, 9, "enum_NEXT_SYNTAX"], [138, 103, 10, "enum_LAST_LEXICAL_USE"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [145, 138, 10, "enum_LAST_LEXICAL_USE"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [149, 145, 10, "enum_LAST_LEXICAL_USE"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 159, 9, "enum_NEXT_SYNTAX"], [160, 120, 10, "enum_LAST_LEXICAL_USE"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [172, 122, 10, "enum_LAST_LEXICAL_USE"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 178, 9, "enum_NEXT_SYNTAX"], [179, 130, 10, "enum_LAST_LEXICAL_USE"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 180, 9, "enum_NEXT_SYNTAX"], [3, 8, 1, "enum_CFG_NEXT"], [8, 13, 1, "enum_CFG_NEXT"], [13, 167, 1, "enum_CFG_NEXT"], [13, 17, 1, "enum_CFG_NEXT"], [17, 51, 1, "enum_CFG_NEXT"], [51, 89, 1, "enum_CFG_NEXT"], [51, 56, 1, "enum_CFG_NEXT"], [56, 60, 1, "enum_CFG_NEXT"], [60, 71, 1, "enum_CFG_NEXT"], [71, 100, 1, "enum_CFG_NEXT"], [89, 93, 1, "enum_CFG_NEXT"], [93, 100, 1, "enum_CFG_NEXT"], [100, 119, 1, "enum_CFG_NEXT"], [119, 134, 1, "enum_CFG_NEXT"], [134, 159, 1, "enum_CFG_NEXT"], [134, 137, 1, "enum_CFG_NEXT"], [137, 144, 1, "enum_CFG_NEXT"], [144, 159, 1, "enum_CFG_NEXT"], [12, 2, 3, "enum_LAST_WRITE"], [20, 12, 2, "enum_LAST_READ"], [20, 2, 3, "enum_LAST_WRITE"], [28, 20, 2, "enum_LAST_READ"], [28, 2, 3, "enum_LAST_WRITE"], [50, 18, 3, "enum_LAST_WRITE"], [63, 28, 2, "enum_LAST_READ"], [63, 2, 3, "enum_LAST_WRITE"], [76, 61, 3, "enum_LAST_WRITE"], [72, 76, 2, "enum_LAST_READ"], [72, 61, 3, "enum_LAST_WRITE"], [96, 28, 2, "enum_LAST_READ"], [96, 2, 3, "enum_LAST_WRITE"], [103, 72, 2, "enum_LAST_READ"], [103, 61, 3, "enum_LAST_WRITE"], [103, 94, 3, "enum_LAST_WRITE"], [115, 109, 2, "enum_LAST_READ"], [122, 63, 2, "enum_LAST_READ"], [122, 96, 2, "enum_LAST_READ"], [122, 2, 3, "enum_LAST_WRITE"], [126, 101, 3, "enum_LAST_WRITE"], [130, 4, 3, "enum_LAST_WRITE"], [134, 57, 3, "enum_LAST_WRITE"], [134, 90, 3, "enum_LAST_WRITE"], [138, 103, 2, "enum_LAST_READ"], [138, 61, 3, "enum_LAST_WRITE"], [138, 94, 3, "enum_LAST_WRITE"], [149, 138, 2, "enum_LAST_READ"], [149, 61, 3, "enum_LAST_WRITE"], [149, 94, 3, "enum_LAST_WRITE"], [145, 149, 2, "enum_LAST_READ"], [145, 61, 3, "enum_LAST_WRITE"], [145, 94, 3, "enum_LAST_WRITE"], [160, 120, 3, "enum_LAST_WRITE"], [172, 12, 2, "enum_LAST_READ"], [172, 2, 3, "enum_LAST_WRITE"], [179, 4, 3, "enum_LAST_WRITE"], [18, 20, 4, "enum_COMPUTED_FROM"], [18, 28, 4, "enum_COMPUTED_FROM"], [101, 103, 4, "enum_COMPUTED_FROM"], [101, 109, 4, "enum_COMPUTED_FROM"], [101, 115, 4, "enum_COMPUTED_FROM"], [120, 126, 4, "enum_COMPUTED_FROM"], [120, 122, 4, "enum_COMPUTED_FROM"], [120, 130, 4, "enum_COMPUTED_FROM"], [61, 63, 4, "enum_COMPUTED_FROM"], [73, 76, 4, "enum_COMPUTED_FROM"], [94, 96, 4, "enum_COMPUTED_FROM"], [146, 149, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "spacetelescope", "repo": "PyFITS", "path": "pyfits/hdu/groups.py", "id": 52045, "has_bug": false, "code_full": "from typing import Any\n\nimport numpy as np\n\n\nclass PrimaryHDU:\n    def _calculate_datasum(self, blocking: bool) -> int:\n        return 0\n\n\nclass GroupsHDU(PrimaryHDU):\n    _has_data: bool\n    data: np.ndarray\n\n    def _compute_checksum(self, data: Any, blocking: bool) -> int:\n        return 0\n    \n    def _calculate_datasum(self, blocking: bool) -> int:\n        \"\"\"\n        Calculate the value for the ``DATASUM`` card in the HDU.\n        \"\"\"\n\n        if self._has_data:\n            # We have the data to be used.\n            # Check the byte order of the data.  If it is little endian we\n            # must swap it before calculating the datasum.\n            # TODO: Maybe check this on a per-field basis instead of assuming\n            # that all fields have the same byte order?\n            byteorder: str =                 self.data.dtype.fields[self.data.dtype.names[0]][0].str[0]\n\n            if byteorder != '>':\n                byteswapped: bool = True\n                d: np.ndarray = self.data.byteswap(True)\n                d.dtype = d.dtype.newbyteorder('>')\n            else:\n                byteswapped: bool = False\n                d: np.ndarray = self.data\n\n            byte_data: np.ndarray = d.view(type=np.ndarray, dtype=np.ubyte)\n\n            cs: Any = self._compute_checksum(byte_data, blocking=blocking)\n\n            # If the data was byteswapped in this method then return it to\n            # its original little-endian order.\n            if byteswapped:\n                d.byteswap(True)\n                d.dtype = d.dtype.newbyteorder('<')\n\n            return cs\n        else:\n            # This is the case where the data has not been read from the file\n            # yet.  We can handle that in a generic manner so we do it in the\n            # base class.  The other possibility is that there is no data at\n            # all.  This can also be handled in a generic manner.\n            return super(GroupsHDU, self)._calculate_datasum(blocking=blocking)\n", "code": "def _calculate_datasum(self, blocking: bool) -> int:\n    \"\"\"\n    Calculate the value for the ``DATASUM`` card in the HDU.\n    \"\"\"\n\n    if self._has_data:\n        # We have the data to be used.\n        # Check the byte order of the data.  If it is little endian we\n        # must swap it before calculating the datasum.\n        # TODO: Maybe check this on a per-field basis instead of assuming\n        # that all fields have the same byte order?\n        byteorder: str =             self.data.dtype.fields[self.data.dtype.names[0]][0].str[0]\n\n        if byteorder != '>':\n            byteswapped: bool = True\n            d: np.ndarray = self.data.byteswap(True)\n            d.dtype = d.dtype.newbyteorder('>')\n        else:\n            byteswapped: bool = False\n            d: np.ndarray = self.data\n\n        byte_data: np.ndarray = d.view(type=np.ndarray, dtype=np.ubyte)\n\n        cs: Any = self._compute_checksum(byte_data, blocking=blocking)\n\n        # If the data was byteswapped in this method then return it to\n        # its original little-endian order.\n        if byteswapped:\n            d.byteswap(True)\n            d.dtype = d.dtype.newbyteorder('<')\n\n        return cs\n    else:\n        # This is the case where the data has not been read from the file\n        # yet.  We can handle that in a generic manner so we do it in the\n        # base class.  The other possibility is that there is no data at\n        # all.  This can also be handled in a generic manner.\n        return super(GroupsHDU, self)._calculate_datasum(blocking=blocking)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "c7449b3563141e1b7e0b70aa2f81c9937f661ddd"}
{"source_tokens": ["#NEWLINE#", "def _check_connectivity(", "G", ")", ":", "#NEWLINE#", "#INDENT#", "result", "=", "k_components", "(", "G", ")", "#NEWLINE#", "for", "(", "k", ",", "components", ")", "in", "result", ".", "items", "(", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "k", "<", "3", ")", ":", "#NEWLINE#", "#INDENT#", "continue", "#NEWLINE#", "#UNINDENT#", "for", "component", "in", "components", ":", "#NEWLINE#", "#INDENT#", "C", "=", "G", ".", "subgraph", "(", "component", ")", "#NEWLINE#", "K", "=", "nx", ".", "node_connectivity", "(", "C", ")", "#NEWLINE#", "assert_true", "(", "(", "K", ">=", "k", ")", ")"], "edges": [[6, 10, 7, "enum_FIELD"], [20, 17, 7, "enum_FIELD"], [20, 24, 7, "enum_FIELD"], [10, 9, 7, "enum_FIELD"], [24, 22, 7, "enum_FIELD"], [29, 32, 7, "enum_FIELD"], [43, 42, 7, "enum_FIELD"], [43, 44, 7, "enum_FIELD"], [22, 21, 7, "enum_FIELD"], [32, 31, 7, "enum_FIELD"], [47, 53, 7, "enum_FIELD"], [56, 62, 7, "enum_FIELD"], [65, 67, 7, "enum_FIELD"], [53, 51, 7, "enum_FIELD"], [62, 60, 7, "enum_FIELD"], [67, 66, 7, "enum_FIELD"], [51, 50, 7, "enum_FIELD"], [60, 59, 7, "enum_FIELD"], [70, 69, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [11, 2, 10, "enum_LAST_LEXICAL_USE"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [21, 7, 10, "enum_LAST_LEXICAL_USE"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [31, 16, 10, "enum_LAST_LEXICAL_USE"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 38, 9, "enum_NEXT_SYNTAX"], [38, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [44, 18, 10, "enum_LAST_LEXICAL_USE"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [50, 11, 10, "enum_LAST_LEXICAL_USE"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [54, 42, 10, "enum_LAST_LEXICAL_USE"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [63, 48, 10, "enum_LAST_LEXICAL_USE"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [69, 57, 10, "enum_LAST_LEXICAL_USE"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [71, 31, 10, "enum_LAST_LEXICAL_USE"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [6, 24, 1, "enum_CFG_NEXT"], [24, 17, 1, "enum_CFG_NEXT"], [17, 32, 1, "enum_CFG_NEXT"], [32, 17, 1, "enum_CFG_NEXT"], [32, 44, 1, "enum_CFG_NEXT"], [44, 42, 1, "enum_CFG_NEXT"], [42, 17, 1, "enum_CFG_NEXT"], [42, 47, 1, "enum_CFG_NEXT"], [47, 56, 1, "enum_CFG_NEXT"], [56, 65, 1, "enum_CFG_NEXT"], [65, 42, 1, "enum_CFG_NEXT"], [11, 2, 3, "enum_LAST_WRITE"], [21, 7, 3, "enum_LAST_WRITE"], [16, 71, 2, "enum_LAST_READ"], [16, 31, 2, "enum_LAST_READ"], [16, 16, 3, "enum_LAST_WRITE"], [18, 44, 2, "enum_LAST_READ"], [18, 18, 3, "enum_LAST_WRITE"], [31, 71, 2, "enum_LAST_READ"], [31, 31, 2, "enum_LAST_READ"], [31, 16, 3, "enum_LAST_WRITE"], [44, 44, 2, "enum_LAST_READ"], [44, 18, 3, "enum_LAST_WRITE"], [42, 54, 2, "enum_LAST_READ"], [42, 42, 3, "enum_LAST_WRITE"], [50, 11, 2, "enum_LAST_READ"], [50, 50, 2, "enum_LAST_READ"], [50, 2, 3, "enum_LAST_WRITE"], [54, 54, 2, "enum_LAST_READ"], [54, 42, 3, "enum_LAST_WRITE"], [48, 63, 2, "enum_LAST_READ"], [48, 48, 3, "enum_LAST_WRITE"], [59, 59, 2, "enum_LAST_READ"], [63, 63, 2, "enum_LAST_READ"], [63, 48, 3, "enum_LAST_WRITE"], [57, 69, 2, "enum_LAST_READ"], [57, 57, 3, "enum_LAST_WRITE"], [66, 66, 2, "enum_LAST_READ"], [69, 69, 2, "enum_LAST_READ"], [69, 57, 3, "enum_LAST_WRITE"], [71, 71, 2, "enum_LAST_READ"], [71, 31, 2, "enum_LAST_READ"], [71, 16, 3, "enum_LAST_WRITE"], [7, 9, 4, "enum_COMPUTED_FROM"], [7, 11, 4, "enum_COMPUTED_FROM"], [48, 54, 4, "enum_COMPUTED_FROM"], [48, 50, 4, "enum_COMPUTED_FROM"], [57, 63, 4, "enum_COMPUTED_FROM"], [57, 59, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "networkx", "repo": "networkx", "path": "networkx/algorithms/approximation/tests/test_kcomponents.py", "id": 26855, "has_bug": false, "code_full": "from typing import Any, Dict, List\n\nimport networkx as nx\n\n\ndef k_components(G: nx.Graph) -> Dict[int, List[List[Any]]]:\n    # Dummy implementation for demonstration purposes\n    return {}\n\n\ndef assert_true(condition: bool):\n    pass\n\n\ndef _check_connectivity(G: nx.Graph):\n    result = k_components(G)\n    for k, components in result.items():\n        if k < 3:\n            continue\n        for component in components:\n            C = G.subgraph(component)\n            K = nx.node_connectivity(C)\n            assert_true(K >= k)\n", "code": "def _check_connectivity(G: nx.Graph):\n    result = k_components(G)\n    for k, components in result.items():\n        if k < 3:\n            continue\n        for component in components:\n            C = G.subgraph(component)\n            K = nx.node_connectivity(C)\n            assert_true(K >= k)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "ff0ab5802d5fbcdedca09ef3324882807af0b77c"}
{"source_tokens": ["#NEWLINE#", "def zip_row_op(", "self", ",", "i", ",", "k", ",", "f", ")", ":", "#NEWLINE#", "#INDENT#", "'In-place operation on row ``i`` using two-arg functor whose args are\\n    interpreted as ``(self[i, j], self[k, j])``.\\n\\n    Examples\\n    ========\\n\\n    >>> from sympy.matrices import SparseMatrix\\n    >>> M = SparseMatrix.eye(3)*2\\n    >>> M[0, 1] = -1\\n    >>> M.zip_row_op(1, 0, lambda v, u: v + 2*u); M\\n    Matrix([\\n    [2, -1, 0],\\n    [4,  0, 0],\\n    [0,  0, 2]])\\n\\n    See Also\\n    ========\\n    row\\n    row_op\\n    col_op\\n\\n    '", "#NEWLINE#", "self", ".", "row_op", "(", "i", ",", "(", "lambda", "v", ",", "j", ":", "f", "(", "v", ",", "self", "[", "(", "k", ",", "j", ")", "]", ")", ")", ")"], "edges": [[1, 5, 7, "enum_FIELD"], [12, 13, 7, "enum_FIELD"], [14, 20, 7, "enum_FIELD"], [20, 16, 7, "enum_FIELD"], [16, 15, 7, "enum_FIELD"], [22, 24, 7, "enum_FIELD"], [22, 30, 7, "enum_FIELD"], [30, 27, 7, "enum_FIELD"], [32, 31, 7, "enum_FIELD"], [32, 35, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [15, 2, 10, "enum_LAST_LEXICAL_USE"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [19, 4, 10, "enum_LAST_LEXICAL_USE"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [27, 8, 10, "enum_LAST_LEXICAL_USE"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [29, 23, 10, "enum_LAST_LEXICAL_USE"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [31, 15, 10, "enum_LAST_LEXICAL_USE"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [34, 6, 10, "enum_LAST_LEXICAL_USE"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [36, 25, 10, "enum_LAST_LEXICAL_USE"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [5, 12, 1, "enum_CFG_NEXT"], [12, 14, 1, "enum_CFG_NEXT"], [15, 2, 3, "enum_LAST_WRITE"], [19, 4, 3, "enum_LAST_WRITE"], [27, 8, 3, "enum_LAST_WRITE"], [29, 23, 3, "enum_LAST_WRITE"], [31, 15, 2, "enum_LAST_READ"], [31, 2, 3, "enum_LAST_WRITE"], [34, 6, 3, "enum_LAST_WRITE"], [36, 25, 3, "enum_LAST_WRITE"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "sympy", "repo": "sympy", "path": "sympy/matrices/sparse.py", "id": 53707, "has_bug": false, "code_full": "from typing import Any, Callable\n\n\nclass Class:\n    def __getitem__(self, key: Any) -> Any:\n        pass\n\n    def row_op(self, i: int, f: Callable[[Any, int], Any]):\n        pass\n\n    def zip_row_op(self, i: int, k: int, f: Callable[[Any, Any], Any]):\n        \"\"\"In-place operation on row ``i`` using two-arg functor whose args are\n        interpreted as ``(self[i, j], self[k, j])``.\n\n        Examples\n        ========\n\n        >>> from sympy.matrices import SparseMatrix\n        >>> M = SparseMatrix.eye(3)*2\n        >>> M[0, 1] = -1\n        >>> M.zip_row_op(1, 0, lambda v, u: v + 2*u); M\n        Matrix([\n        [2, -1, 0],\n        [4,  0, 0],\n        [0,  0, 2]])\n\n        See Also\n        ========\n        row\n        row_op\n        col_op\n\n        \"\"\"\n        self.row_op(i, lambda v, j: f(v, self[k, j]))\n", "code": "def zip_row_op(self, i: int, k: int, f: Callable[[Any, Any], Any]):\n    \"\"\"In-place operation on row ``i`` using two-arg functor whose args are\n    interpreted as ``(self[i, j], self[k, j])``.\n\n    Examples\n    ========\n\n    >>> from sympy.matrices import SparseMatrix\n    >>> M = SparseMatrix.eye(3)*2\n    >>> M[0, 1] = -1\n    >>> M.zip_row_op(1, 0, lambda v, u: v + 2*u); M\n    Matrix([\n    [2, -1, 0],\n    [4,  0, 0],\n    [0,  0, 2]])\n\n    See Also\n    ========\n    row\n    row_op\n    col_op\n\n    \"\"\"\n    self.row_op(i, lambda v, j: f(v, self[k, j]))\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "25ea11a953ec1a83e73b58d43a1d5f4026e006bc"}
{"source_tokens": ["#NEWLINE#", "def _get_pronoun(", "self", ",", "regex_match", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Get pronoun from the pronoun marker in the text. This is used as\\n    the callable for the re.sub function.\\n\\n    Args:\\n        regex_match (MatchObject): the regular expression match.\\n\\n    Notes:\\n        - `{s`, `{S`: Subjective form: he, she, it, He, She, It\\n        - `{o`, `{O`: Objective form: him, her, it, Him, Her, It\\n        - `{p`, `{P`: Possessive form: his, her, its, His, Her, Its\\n        - `{a`, `{A`: Absolute Possessive form: his, hers, its, His, Hers, Its\\n\\n    '", "#NEWLINE#", "typ", "=", "regex_match", ".", "group", "(", ")", "[", "1", "]", "#NEWLINE#", "gender", "=", "self", ".", "attributes", ".", "get", "(", "'gender'", ",", "default", "=", "'neutral'", ")", "#NEWLINE#", "gender", "=", "(", "gender", "if", "(", "gender", "in", "(", "'male'", ",", "'female'", ",", "'neutral'", ")", ")", "else", "'neutral'", ")", "#NEWLINE#", "pronoun", "=", "_GENDER_PRONOUN_MAP", "[", "gender", "]", "[", "typ", ".", "lower", "(", ")", "]", "#NEWLINE#", "return", "(", "pronoun", ".", "capitalize", "(", ")", "if", "typ", ".", "isupper", "(", ")", "else", "pronoun", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [8, 9, 7, "enum_FIELD"], [10, 18, 7, "enum_FIELD"], [21, 31, 7, "enum_FIELD"], [36, 41, 7, "enum_FIELD"], [56, 63, 7, "enum_FIELD"], [71, 78, 7, "enum_FIELD"], [18, 16, 7, "enum_FIELD"], [18, 19, 7, "enum_FIELD"], [31, 27, 7, "enum_FIELD"], [41, 44, 7, "enum_FIELD"], [41, 40, 7, "enum_FIELD"], [41, 54, 7, "enum_FIELD"], [63, 60, 7, "enum_FIELD"], [63, 67, 7, "enum_FIELD"], [78, 82, 7, "enum_FIELD"], [78, 76, 7, "enum_FIELD"], [78, 85, 7, "enum_FIELD"], [16, 14, 7, "enum_FIELD"], [27, 25, 7, "enum_FIELD"], [32, 34, 7, "enum_FIELD"], [44, 43, 7, "enum_FIELD"], [60, 59, 7, "enum_FIELD"], [60, 61, 7, "enum_FIELD"], [67, 65, 7, "enum_FIELD"], [82, 80, 7, "enum_FIELD"], [76, 74, 7, "enum_FIELD"], [14, 13, 7, "enum_FIELD"], [25, 24, 7, "enum_FIELD"], [65, 64, 7, "enum_FIELD"], [80, 79, 7, "enum_FIELD"], [74, 73, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [13, 4, 10, "enum_LAST_LEXICAL_USE"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [24, 2, 10, "enum_LAST_LEXICAL_USE"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [37, 22, 10, "enum_LAST_LEXICAL_USE"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [40, 37, 10, "enum_LAST_LEXICAL_USE"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [43, 40, 10, "enum_LAST_LEXICAL_USE"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [61, 43, 10, "enum_LAST_LEXICAL_USE"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [64, 11, 10, "enum_LAST_LEXICAL_USE"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [73, 57, 10, "enum_LAST_LEXICAL_USE"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [79, 64, 10, "enum_LAST_LEXICAL_USE"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [85, 73, 10, "enum_LAST_LEXICAL_USE"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [3, 8, 1, "enum_CFG_NEXT"], [8, 10, 1, "enum_CFG_NEXT"], [10, 21, 1, "enum_CFG_NEXT"], [21, 36, 1, "enum_CFG_NEXT"], [36, 56, 1, "enum_CFG_NEXT"], [56, 71, 1, "enum_CFG_NEXT"], [13, 4, 3, "enum_LAST_WRITE"], [24, 2, 3, "enum_LAST_WRITE"], [43, 22, 3, "enum_LAST_WRITE"], [40, 43, 2, "enum_LAST_READ"], [40, 22, 3, "enum_LAST_WRITE"], [37, 40, 2, "enum_LAST_READ"], [37, 22, 3, "enum_LAST_WRITE"], [61, 40, 2, "enum_LAST_READ"], [61, 37, 3, "enum_LAST_WRITE"], [64, 11, 3, "enum_LAST_WRITE"], [79, 64, 2, "enum_LAST_READ"], [79, 11, 3, "enum_LAST_WRITE"], [73, 57, 3, "enum_LAST_WRITE"], [85, 73, 2, "enum_LAST_READ"], [85, 57, 3, "enum_LAST_WRITE"], [11, 13, 4, "enum_COMPUTED_FROM"], [22, 24, 4, "enum_COMPUTED_FROM"], [37, 40, 4, "enum_COMPUTED_FROM"], [37, 43, 4, "enum_COMPUTED_FROM"], [57, 59, 4, "enum_COMPUTED_FROM"], [57, 61, 4, "enum_COMPUTED_FROM"], [57, 64, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "evennia", "repo": "evennia", "path": "evennia/contrib/gendersub.py", "id": 15038, "has_bug": false, "code_full": "import re\nfrom typing import Any, Dict\n\n_GENDER_PRONOUN_MAP: Dict[str, Dict[str, str]] = {}\n\nclass Class:\n    attributes: Dict[str, str]\n\n    def _get_pronoun(self, regex_match: re.Match) -> str:\n        \"\"\"\n        Get pronoun from the pronoun marker in the text. This is used as\n        the callable for the re.sub function.\n\n        Args:\n            regex_match (MatchObject): the regular expression match.\n\n        Notes:\n            - `{s`, `{S`: Subjective form: he, she, it, He, She, It\n            - `{o`, `{O`: Objective form: him, her, it, Him, Her, It\n            - `{p`, `{P`: Possessive form: his, her, its, His, Her, Its\n            - `{a`, `{A`: Absolute Possessive form: his, hers, its, His, Hers, Its\n\n        \"\"\"\n        typ: str = regex_match.group()[1] # \"s\", \"O\" etc\n        gender: str = self.attributes.get(\"gender\", default=\"neutral\")\n        gender: str = gender if gender in (\"male\", \"female\", \"neutral\") else \"neutral\"\n        pronoun: str = _GENDER_PRONOUN_MAP[gender][typ.lower()]\n        return pronoun.capitalize() if typ.isupper() else pronoun\n", "code": "def _get_pronoun(self, regex_match: re.Match) -> str:\n    \"\"\"\n    Get pronoun from the pronoun marker in the text. This is used as\n    the callable for the re.sub function.\n\n    Args:\n        regex_match (MatchObject): the regular expression match.\n\n    Notes:\n        - `{s`, `{S`: Subjective form: he, she, it, He, She, It\n        - `{o`, `{O`: Objective form: him, her, it, Him, Her, It\n        - `{p`, `{P`: Possessive form: his, her, its, His, Her, Its\n        - `{a`, `{A`: Absolute Possessive form: his, hers, its, His, Hers, Its\n\n    \"\"\"\n    typ: str = regex_match.group()[1] # \"s\", \"O\" etc\n    gender: str = self.attributes.get(\"gender\", default=\"neutral\")\n    gender: str = gender if gender in (\"male\", \"female\", \"neutral\") else \"neutral\"\n    pronoun: str = _GENDER_PRONOUN_MAP[gender][typ.lower()]\n    return pronoun.capitalize() if typ.isupper() else pronoun\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "958b333a5939f55bc4ad58768a76334dda9ef885"}
{"source_tokens": ["#NEWLINE#", "@", "provide_session", "#NEWLINE#", "def pool_full(", "self", ",", "session", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Returns a boolean as to whether the slot pool has room for this\\n    task to run\\n    '", "#NEWLINE#", "if", "(", "not", "self", ".", "task", ".", "pool", ")", ":", "#NEWLINE#", "#INDENT#", "return", "False", "#NEWLINE#", "#UNINDENT#", "pool", "=", "session", ".", "query", "(", "Pool", ")", ".", "filter", "(", "(", "Pool", ".", "pool", "==", "self", ".", "task", ".", "pool", ")", ")", ".", "first", "(", ")", "#NEWLINE#", "if", "(", "not", "pool", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "ValueError", "(", "\"Task specified a pool ({}) but the pool doesn't exist!\"", ".", "format", "(", "self", ".", "task", ".", "pool", ")", ")", "#NEWLINE#", "#UNINDENT#", "open_slots", "=", "pool", ".", "open_slots", "(", "session", "=", "session", ")", "#NEWLINE#", "return", "(", "open_slots", "<=", "0", ")"], "edges": [[1, 6, 7, "enum_FIELD"], [11, 12, 7, "enum_FIELD"], [14, 16, 7, "enum_FIELD"], [29, 55, 7, "enum_FIELD"], [58, 60, 7, "enum_FIELD"], [81, 87, 7, "enum_FIELD"], [93, 96, 7, "enum_FIELD"], [16, 20, 7, "enum_FIELD"], [26, 27, 7, "enum_FIELD"], [55, 53, 7, "enum_FIELD"], [60, 61, 7, "enum_FIELD"], [66, 68, 7, "enum_FIELD"], [87, 85, 7, "enum_FIELD"], [96, 95, 7, "enum_FIELD"], [20, 18, 7, "enum_FIELD"], [53, 40, 7, "enum_FIELD"], [68, 67, 7, "enum_FIELD"], [85, 84, 7, "enum_FIELD"], [88, 90, 7, "enum_FIELD"], [18, 17, 7, "enum_FIELD"], [40, 38, 7, "enum_FIELD"], [72, 70, 7, "enum_FIELD"], [38, 35, 7, "enum_FIELD"], [45, 43, 7, "enum_FIELD"], [70, 69, 7, "enum_FIELD"], [76, 74, 7, "enum_FIELD"], [35, 33, 7, "enum_FIELD"], [43, 42, 7, "enum_FIELD"], [49, 47, 7, "enum_FIELD"], [74, 73, 7, "enum_FIELD"], [33, 32, 7, "enum_FIELD"], [47, 46, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [17, 5, 10, "enum_LAST_LEXICAL_USE"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [32, 7, 10, "enum_LAST_LEXICAL_USE"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [42, 36, 10, "enum_LAST_LEXICAL_USE"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [46, 17, 10, "enum_LAST_LEXICAL_USE"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [61, 30, 10, "enum_LAST_LEXICAL_USE"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [73, 46, 10, "enum_LAST_LEXICAL_USE"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [84, 61, 10, "enum_LAST_LEXICAL_USE"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [90, 32, 10, "enum_LAST_LEXICAL_USE"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [95, 82, 10, "enum_LAST_LEXICAL_USE"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [2, 1, 1, "enum_CFG_NEXT"], [6, 11, 1, "enum_CFG_NEXT"], [11, 16, 1, "enum_CFG_NEXT"], [16, 29, 1, "enum_CFG_NEXT"], [16, 26, 1, "enum_CFG_NEXT"], [29, 60, 1, "enum_CFG_NEXT"], [60, 66, 1, "enum_CFG_NEXT"], [60, 81, 1, "enum_CFG_NEXT"], [81, 93, 1, "enum_CFG_NEXT"], [17, 5, 3, "enum_LAST_WRITE"], [32, 7, 3, "enum_LAST_WRITE"], [42, 36, 2, "enum_LAST_READ"], [46, 17, 2, "enum_LAST_READ"], [46, 5, 3, "enum_LAST_WRITE"], [61, 30, 3, "enum_LAST_WRITE"], [73, 46, 2, "enum_LAST_READ"], [73, 5, 3, "enum_LAST_WRITE"], [84, 61, 2, "enum_LAST_READ"], [84, 30, 3, "enum_LAST_WRITE"], [90, 32, 2, "enum_LAST_READ"], [90, 7, 3, "enum_LAST_WRITE"], [95, 82, 3, "enum_LAST_WRITE"], [30, 36, 4, "enum_COMPUTED_FROM"], [30, 42, 4, "enum_COMPUTED_FROM"], [30, 32, 4, "enum_COMPUTED_FROM"], [30, 46, 4, "enum_COMPUTED_FROM"], [82, 84, 4, "enum_COMPUTED_FROM"], [82, 90, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "airbnb", "repo": "airflow", "path": "airflow/models.py", "id": 8845, "has_bug": false, "code_full": "from typing import Any, Optional\n\nfrom sqlalchemy.orm import Session\n\n\nclass Pool:\n    pool: str\n\n    def open_slots(self, session: Session) -> int:\n        return 0\n\n\nclass Task:\n    pool: str\n\n\nclass Class:\n    task: Task\n\n    def pool_full(self, session: Session) -> bool:\n        \"\"\"\n        Returns a boolean as to whether the slot pool has room for this\n        task to run\n        \"\"\"\n        if not self.task.pool:\n            return False\n\n        pool: Optional[Pool] = (\n            session\n            .query(Pool)\n            .filter(Pool.pool == self.task.pool)\n            .first()\n        )\n        if not pool:\n            return False\n        open_slots = pool.open_slots(session=session)\n\n        return open_slots <= 0\n", "code": "def pool_full(self, session: Session) -> bool:\n    \"\"\"\n    Returns a boolean as to whether the slot pool has room for this\n    task to run\n    \"\"\"\n    if not self.task.pool:\n        return False\n\n    pool: Optional[Pool] = (\n        session\n        .query(Pool)\n        .filter(Pool.pool == self.task.pool)\n        .first()\n    )\n    if not pool:\n        return False\n    open_slots = pool.open_slots(session=session)\n\n    return open_slots <= 0\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "937142d294f9628a33a71d9ba193f424232da52e"}
{"source_tokens": ["#NEWLINE#", "def _eval_wignerd(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "j", "=", "sympify", "(", "self", ".", "j", ")", "#NEWLINE#", "m", "=", "sympify", "(", "self", ".", "m", ")", "#NEWLINE#", "mp", "=", "sympify", "(", "self", ".", "mp", ")", "#NEWLINE#", "alpha", "=", "sympify", "(", "self", ".", "alpha", ")", "#NEWLINE#", "beta", "=", "sympify", "(", "self", ".", "beta", ")", "#NEWLINE#", "gamma", "=", "sympify", "(", "self", ".", "gamma", ")", "#NEWLINE#", "if", "(", "not", "j", ".", "is_number", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "ValueError", "(", "(", "'j parameter must be numerical to evaluate, got %s'", "%", "j", ")", ")", "#NEWLINE#", "#UNINDENT#", "r", "=", "0", "#NEWLINE#", "if", "(", "beta", "==", "(", "pi", "/", "2", ")", ")", ":", "#NEWLINE#", "#INDENT#", "for", "k", "in", "range", "(", "(", "(", "2", "*", "j", ")", "+", "1", ")", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "(", "k", ">", "(", "j", "+", "mp", ")", ")", "or", "(", "k", ">", "(", "j", "-", "m", ")", ")", "or", "(", "k", "<", "(", "mp", "-", "m", ")", ")", ")", ":", "#NEWLINE#", "#INDENT#", "continue", "#NEWLINE#", "#UNINDENT#", "r", "+=", "(", "(", "(", "(", "-", "S", "(", "1", ")", ")", "**", "k", ")", "*", "binomial", "(", "(", "j", "+", "mp", ")", ",", "k", ")", ")", "*", "binomial", "(", "(", "j", "-", "mp", ")", ",", "(", "(", "k", "+", "m", ")", "-", "mp", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "r", "*=", "(", "(", "(", "(", "-", "S", "(", "1", ")", ")", "**", "(", "m", "-", "mp", ")", ")", "/", "(", "2", "**", "j", ")", ")", "*", "sqrt", "(", "(", "(", "factorial", "(", "(", "j", "+", "m", ")", ")", "*", "factorial", "(", "(", "j", "-", "m", ")", ")", ")", "/", "(", "factorial", "(", "(", "j", "+", "mp", ")", ")", "*", "factorial", "(", "(", "j", "-", "mp", ")", ")", ")", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "(", "size", ",", "mvals", ")", "=", "m_values", "(", "j", ")", "#NEWLINE#", "for", "mpp", "in", "mvals", ":", "#NEWLINE#", "#INDENT#", "r", "+=", "(", "(", "Rotation", ".", "d", "(", "j", ",", "m", ",", "mpp", ",", "(", "pi", "/", "2", ")", ")", ".", "doit", "(", ")", "*", "(", "cos", "(", "(", "(", "-", "mpp", ")", "*", "beta", ")", ")", "+", "(", "I", "*", "sin", "(", "(", "(", "-", "mpp", ")", "*", "beta", ")", ")", ")", ")", ")", "*", "Rotation", ".", "d", "(", "j", ",", "mpp", ",", "(", "-", "mp", ")", ",", "(", "pi", "/", "2", ")", ")", ".", "doit", "(", ")", ")", "#NEWLINE#", "#UNINDENT#", "r", "=", "(", "(", "r", "*", "(", "I", "**", "(", "(", "(", "2", "*", "j", ")", "-", "m", ")", "-", "mp", ")", ")", ")", "*", "(", "(", "-", "1", ")", "**", "(", "2", "*", "m", ")", ")", ")", "#NEWLINE#", "r", "=", "simplify", "(", "r", ")", "#NEWLINE#", "#UNINDENT#", "r", "*=", "(", "exp", "(", "(", "(", "(", "-", "I", ")", "*", "m", ")", "*", "alpha", ")", ")", "*", "exp", "(", "(", "(", "(", "-", "I", ")", "*", "mp", ")", "*", "gamma", ")", ")", ")", "#NEWLINE#", "return", "r"], "edges": [[6, 10, 7, "enum_FIELD"], [15, 19, 7, "enum_FIELD"], [24, 28, 7, "enum_FIELD"], [33, 37, 7, "enum_FIELD"], [42, 46, 7, "enum_FIELD"], [51, 55, 7, "enum_FIELD"], [61, 63, 7, "enum_FIELD"], [81, 84, 7, "enum_FIELD"], [96, 89, 7, "enum_FIELD"], [428, 429, 7, "enum_FIELD"], [428, 447, 7, "enum_FIELD"], [465, 466, 7, "enum_FIELD"], [10, 9, 7, "enum_FIELD"], [19, 18, 7, "enum_FIELD"], [28, 27, 7, "enum_FIELD"], [37, 36, 7, "enum_FIELD"], [46, 45, 7, "enum_FIELD"], [55, 54, 7, "enum_FIELD"], [63, 65, 7, "enum_FIELD"], [71, 73, 7, "enum_FIELD"], [89, 88, 7, "enum_FIELD"], [101, 100, 7, "enum_FIELD"], [101, 103, 7, "enum_FIELD"], [203, 204, 7, "enum_FIELD"], [203, 230, 7, "enum_FIELD"], [281, 289, 7, "enum_FIELD"], [295, 294, 7, "enum_FIELD"], [295, 296, 7, "enum_FIELD"], [381, 406, 7, "enum_FIELD"], [420, 424, 7, "enum_FIELD"], [447, 433, 7, "enum_FIELD"], [447, 449, 7, "enum_FIELD"], [12, 11, 7, "enum_FIELD"], [21, 20, 7, "enum_FIELD"], [30, 29, 7, "enum_FIELD"], [39, 38, 7, "enum_FIELD"], [48, 47, 7, "enum_FIELD"], [57, 56, 7, "enum_FIELD"], [65, 64, 7, "enum_FIELD"], [73, 72, 7, "enum_FIELD"], [92, 91, 7, "enum_FIELD"], [92, 93, 7, "enum_FIELD"], [103, 102, 7, "enum_FIELD"], [117, 128, 7, "enum_FIELD"], [154, 155, 7, "enum_FIELD"], [154, 182, 7, "enum_FIELD"], [230, 223, 7, "enum_FIELD"], [230, 232, 7, "enum_FIELD"], [289, 288, 7, "enum_FIELD"], [299, 300, 7, "enum_FIELD"], [299, 355, 7, "enum_FIELD"], [406, 387, 7, "enum_FIELD"], [406, 412, 7, "enum_FIELD"], [424, 423, 7, "enum_FIELD"], [433, 432, 7, "enum_FIELD"], [449, 448, 7, "enum_FIELD"], [76, 75, 7, "enum_FIELD"], [76, 77, 7, "enum_FIELD"], [110, 107, 7, "enum_FIELD"], [110, 111, 7, "enum_FIELD"], [182, 170, 7, "enum_FIELD"], [182, 190, 7, "enum_FIELD"], [223, 216, 7, "enum_FIELD"], [223, 226, 7, "enum_FIELD"], [232, 231, 7, "enum_FIELD"], [355, 324, 7, "enum_FIELD"], [355, 377, 7, "enum_FIELD"], [387, 386, 7, "enum_FIELD"], [387, 390, 7, "enum_FIELD"], [412, 409, 7, "enum_FIELD"], [412, 415, 7, "enum_FIELD"], [443, 440, 7, "enum_FIELD"], [443, 444, 7, "enum_FIELD"], [459, 456, 7, "enum_FIELD"], [459, 460, 7, "enum_FIELD"], [107, 106, 7, "enum_FIELD"], [107, 108, 7, "enum_FIELD"], [121, 120, 7, "enum_FIELD"], [131, 130, 7, "enum_FIELD"], [141, 140, 7, "enum_FIELD"], [170, 167, 7, "enum_FIELD"], [170, 178, 7, "enum_FIELD"], [190, 183, 7, "enum_FIELD"], [216, 210, 7, "enum_FIELD"], [216, 219, 7, "enum_FIELD"], [226, 225, 7, "enum_FIELD"], [226, 227, 7, "enum_FIELD"], [253, 243, 7, "enum_FIELD"], [253, 263, 7, "enum_FIELD"], [324, 322, 7, "enum_FIELD"], [324, 337, 7, "enum_FIELD"], [377, 375, 7, "enum_FIELD"], [390, 389, 7, "enum_FIELD"], [390, 401, 7, "enum_FIELD"], [409, 410, 7, "enum_FIELD"], [415, 414, 7, "enum_FIELD"], [415, 416, 7, "enum_FIELD"], [440, 437, 7, "enum_FIELD"], [440, 441, 7, "enum_FIELD"], [456, 453, 7, "enum_FIELD"], [456, 457, 7, "enum_FIELD"], [124, 123, 7, "enum_FIELD"], [124, 125, 7, "enum_FIELD"], [134, 133, 7, "enum_FIELD"], [134, 135, 7, "enum_FIELD"], [144, 143, 7, "enum_FIELD"], [144, 145, 7, "enum_FIELD"], [167, 161, 7, "enum_FIELD"], [167, 168, 7, "enum_FIELD"], [178, 171, 7, "enum_FIELD"], [187, 186, 7, "enum_FIELD"], [187, 188, 7, "enum_FIELD"], [197, 194, 7, "enum_FIELD"], [197, 198, 7, "enum_FIELD"], [210, 212, 7, "enum_FIELD"], [219, 218, 7, "enum_FIELD"], [219, 220, 7, "enum_FIELD"], [243, 236, 7, "enum_FIELD"], [243, 245, 7, "enum_FIELD"], [263, 256, 7, "enum_FIELD"], [263, 265, 7, "enum_FIELD"], [322, 320, 7, "enum_FIELD"], [337, 327, 7, "enum_FIELD"], [337, 340, 7, "enum_FIELD"], [375, 363, 7, "enum_FIELD"], [401, 398, 7, "enum_FIELD"], [401, 402, 7, "enum_FIELD"], [437, 438, 7, "enum_FIELD"], [453, 454, 7, "enum_FIELD"], [161, 163, 7, "enum_FIELD"], [175, 174, 7, "enum_FIELD"], [175, 176, 7, "enum_FIELD"], [194, 193, 7, "enum_FIELD"], [194, 195, 7, "enum_FIELD"], [212, 211, 7, "enum_FIELD"], [236, 235, 7, "enum_FIELD"], [245, 244, 7, "enum_FIELD"], [256, 255, 7, "enum_FIELD"], [265, 264, 7, "enum_FIELD"], [320, 311, 7, "enum_FIELD"], [327, 326, 7, "enum_FIELD"], [340, 339, 7, "enum_FIELD"], [340, 342, 7, "enum_FIELD"], [363, 357, 7, "enum_FIELD"], [398, 395, 7, "enum_FIELD"], [398, 399, 7, "enum_FIELD"], [163, 162, 7, "enum_FIELD"], [239, 238, 7, "enum_FIELD"], [239, 240, 7, "enum_FIELD"], [248, 247, 7, "enum_FIELD"], [248, 249, 7, "enum_FIELD"], [259, 258, 7, "enum_FIELD"], [259, 260, 7, "enum_FIELD"], [268, 267, 7, "enum_FIELD"], [268, 269, 7, "enum_FIELD"], [311, 305, 7, "enum_FIELD"], [333, 330, 7, "enum_FIELD"], [333, 334, 7, "enum_FIELD"], [342, 341, 7, "enum_FIELD"], [357, 356, 7, "enum_FIELD"], [365, 366, 7, "enum_FIELD"], [371, 370, 7, "enum_FIELD"], [371, 372, 7, "enum_FIELD"], [395, 394, 7, "enum_FIELD"], [395, 396, 7, "enum_FIELD"], [305, 304, 7, "enum_FIELD"], [316, 315, 7, "enum_FIELD"], [316, 317, 7, "enum_FIELD"], [330, 331, 7, "enum_FIELD"], [348, 345, 7, "enum_FIELD"], [348, 349, 7, "enum_FIELD"], [345, 346, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [11, 2, 10, "enum_LAST_LEXICAL_USE"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [18, 9, 10, "enum_LAST_LEXICAL_USE"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [20, 11, 10, "enum_LAST_LEXICAL_USE"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [27, 18, 10, "enum_LAST_LEXICAL_USE"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [29, 20, 10, "enum_LAST_LEXICAL_USE"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [36, 27, 10, "enum_LAST_LEXICAL_USE"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [38, 29, 10, "enum_LAST_LEXICAL_USE"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [45, 36, 10, "enum_LAST_LEXICAL_USE"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [47, 38, 10, "enum_LAST_LEXICAL_USE"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [54, 45, 10, "enum_LAST_LEXICAL_USE"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [56, 47, 10, "enum_LAST_LEXICAL_USE"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [64, 7, 10, "enum_LAST_LEXICAL_USE"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [77, 64, 10, "enum_LAST_LEXICAL_USE"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [88, 43, 10, "enum_LAST_LEXICAL_USE"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [108, 77, 10, "enum_LAST_LEXICAL_USE"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [120, 100, 10, "enum_LAST_LEXICAL_USE"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [123, 108, 10, "enum_LAST_LEXICAL_USE"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [125, 25, 10, "enum_LAST_LEXICAL_USE"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [130, 120, 10, "enum_LAST_LEXICAL_USE"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [133, 123, 10, "enum_LAST_LEXICAL_USE"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [135, 16, 10, "enum_LAST_LEXICAL_USE"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [140, 130, 10, "enum_LAST_LEXICAL_USE"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [143, 125, 10, "enum_LAST_LEXICAL_USE"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [145, 135, 10, "enum_LAST_LEXICAL_USE"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 152, 9, "enum_NEXT_SYNTAX"], [152, 154, 9, "enum_NEXT_SYNTAX"], [155, 82, 10, "enum_LAST_LEXICAL_USE"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [168, 140, 10, "enum_LAST_LEXICAL_USE"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [174, 133, 10, "enum_LAST_LEXICAL_USE"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [176, 143, 10, "enum_LAST_LEXICAL_USE"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 178, 9, "enum_NEXT_SYNTAX"], [179, 168, 10, "enum_LAST_LEXICAL_USE"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [183, 171, 10, "enum_LAST_LEXICAL_USE"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 184, 9, "enum_NEXT_SYNTAX"], [184, 185, 9, "enum_NEXT_SYNTAX"], [186, 174, 10, "enum_LAST_LEXICAL_USE"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [188, 176, 10, "enum_LAST_LEXICAL_USE"], [187, 188, 9, "enum_NEXT_SYNTAX"], [188, 189, 9, "enum_NEXT_SYNTAX"], [189, 190, 9, "enum_NEXT_SYNTAX"], [190, 191, 9, "enum_NEXT_SYNTAX"], [191, 192, 9, "enum_NEXT_SYNTAX"], [193, 179, 10, "enum_LAST_LEXICAL_USE"], [192, 193, 9, "enum_NEXT_SYNTAX"], [193, 194, 9, "enum_NEXT_SYNTAX"], [195, 145, 10, "enum_LAST_LEXICAL_USE"], [194, 195, 9, "enum_NEXT_SYNTAX"], [195, 196, 9, "enum_NEXT_SYNTAX"], [196, 197, 9, "enum_NEXT_SYNTAX"], [198, 188, 10, "enum_LAST_LEXICAL_USE"], [197, 198, 9, "enum_NEXT_SYNTAX"], [198, 199, 9, "enum_NEXT_SYNTAX"], [199, 200, 9, "enum_NEXT_SYNTAX"], [200, 201, 9, "enum_NEXT_SYNTAX"], [201, 203, 9, "enum_NEXT_SYNTAX"], [204, 155, 10, "enum_LAST_LEXICAL_USE"], [203, 204, 9, "enum_NEXT_SYNTAX"], [204, 205, 9, "enum_NEXT_SYNTAX"], [205, 206, 9, "enum_NEXT_SYNTAX"], [206, 207, 9, "enum_NEXT_SYNTAX"], [207, 208, 9, "enum_NEXT_SYNTAX"], [208, 209, 9, "enum_NEXT_SYNTAX"], [209, 210, 9, "enum_NEXT_SYNTAX"], [211, 162, 10, "enum_LAST_LEXICAL_USE"], [210, 211, 9, "enum_NEXT_SYNTAX"], [211, 212, 9, "enum_NEXT_SYNTAX"], [212, 213, 9, "enum_NEXT_SYNTAX"], [213, 214, 9, "enum_NEXT_SYNTAX"], [214, 215, 9, "enum_NEXT_SYNTAX"], [215, 216, 9, "enum_NEXT_SYNTAX"], [216, 217, 9, "enum_NEXT_SYNTAX"], [218, 195, 10, "enum_LAST_LEXICAL_USE"], [217, 218, 9, "enum_NEXT_SYNTAX"], [218, 219, 9, "enum_NEXT_SYNTAX"], [220, 198, 10, "enum_LAST_LEXICAL_USE"], [219, 220, 9, "enum_NEXT_SYNTAX"], [220, 221, 9, "enum_NEXT_SYNTAX"], [221, 222, 9, "enum_NEXT_SYNTAX"], [222, 223, 9, "enum_NEXT_SYNTAX"], [223, 224, 9, "enum_NEXT_SYNTAX"], [224, 225, 9, "enum_NEXT_SYNTAX"], [225, 226, 9, "enum_NEXT_SYNTAX"], [227, 186, 10, "enum_LAST_LEXICAL_USE"], [226, 227, 9, "enum_NEXT_SYNTAX"], [227, 228, 9, "enum_NEXT_SYNTAX"], [228, 229, 9, "enum_NEXT_SYNTAX"], [229, 230, 9, "enum_NEXT_SYNTAX"], [230, 231, 9, "enum_NEXT_SYNTAX"], [231, 232, 9, "enum_NEXT_SYNTAX"], [232, 233, 9, "enum_NEXT_SYNTAX"], [233, 234, 9, "enum_NEXT_SYNTAX"], [234, 235, 9, "enum_NEXT_SYNTAX"], [235, 236, 9, "enum_NEXT_SYNTAX"], [236, 237, 9, "enum_NEXT_SYNTAX"], [238, 227, 10, "enum_LAST_LEXICAL_USE"], [237, 238, 9, "enum_NEXT_SYNTAX"], [238, 239, 9, "enum_NEXT_SYNTAX"], [240, 218, 10, "enum_LAST_LEXICAL_USE"], [239, 240, 9, "enum_NEXT_SYNTAX"], [240, 241, 9, "enum_NEXT_SYNTAX"], [241, 242, 9, "enum_NEXT_SYNTAX"], [242, 243, 9, "enum_NEXT_SYNTAX"], [244, 235, 10, "enum_LAST_LEXICAL_USE"], [243, 244, 9, "enum_NEXT_SYNTAX"], [244, 245, 9, "enum_NEXT_SYNTAX"], [245, 246, 9, "enum_NEXT_SYNTAX"], [247, 238, 10, "enum_LAST_LEXICAL_USE"], [246, 247, 9, "enum_NEXT_SYNTAX"], [247, 248, 9, "enum_NEXT_SYNTAX"], [249, 240, 10, "enum_LAST_LEXICAL_USE"], [248, 249, 9, "enum_NEXT_SYNTAX"], [249, 250, 9, "enum_NEXT_SYNTAX"], [250, 251, 9, "enum_NEXT_SYNTAX"], [251, 252, 9, "enum_NEXT_SYNTAX"], [252, 253, 9, "enum_NEXT_SYNTAX"], [253, 254, 9, "enum_NEXT_SYNTAX"], [255, 244, 10, "enum_LAST_LEXICAL_USE"], [254, 255, 9, "enum_NEXT_SYNTAX"], [255, 256, 9, "enum_NEXT_SYNTAX"], [256, 257, 9, "enum_NEXT_SYNTAX"], [258, 247, 10, "enum_LAST_LEXICAL_USE"], [257, 258, 9, "enum_NEXT_SYNTAX"], [258, 259, 9, "enum_NEXT_SYNTAX"], [260, 220, 10, "enum_LAST_LEXICAL_USE"], [259, 260, 9, "enum_NEXT_SYNTAX"], [260, 261, 9, "enum_NEXT_SYNTAX"], [261, 262, 9, "enum_NEXT_SYNTAX"], [262, 263, 9, "enum_NEXT_SYNTAX"], [264, 255, 10, "enum_LAST_LEXICAL_USE"], [263, 264, 9, "enum_NEXT_SYNTAX"], [264, 265, 9, "enum_NEXT_SYNTAX"], [265, 266, 9, "enum_NEXT_SYNTAX"], [267, 258, 10, "enum_LAST_LEXICAL_USE"], [266, 267, 9, "enum_NEXT_SYNTAX"], [267, 268, 9, "enum_NEXT_SYNTAX"], [269, 260, 10, "enum_LAST_LEXICAL_USE"], [268, 269, 9, "enum_NEXT_SYNTAX"], [269, 270, 9, "enum_NEXT_SYNTAX"], [270, 271, 9, "enum_NEXT_SYNTAX"], [271, 272, 9, "enum_NEXT_SYNTAX"], [272, 273, 9, "enum_NEXT_SYNTAX"], [273, 274, 9, "enum_NEXT_SYNTAX"], [274, 275, 9, "enum_NEXT_SYNTAX"], [275, 278, 9, "enum_NEXT_SYNTAX"], [278, 279, 9, "enum_NEXT_SYNTAX"], [279, 281, 9, "enum_NEXT_SYNTAX"], [281, 282, 9, "enum_NEXT_SYNTAX"], [282, 283, 9, "enum_NEXT_SYNTAX"], [283, 284, 9, "enum_NEXT_SYNTAX"], [284, 285, 9, "enum_NEXT_SYNTAX"], [285, 286, 9, "enum_NEXT_SYNTAX"], [286, 287, 9, "enum_NEXT_SYNTAX"], [287, 288, 9, "enum_NEXT_SYNTAX"], [288, 289, 9, "enum_NEXT_SYNTAX"], [290, 267, 10, "enum_LAST_LEXICAL_USE"], [289, 290, 9, "enum_NEXT_SYNTAX"], [290, 291, 9, "enum_NEXT_SYNTAX"], [291, 293, 9, "enum_NEXT_SYNTAX"], [293, 294, 9, "enum_NEXT_SYNTAX"], [294, 295, 9, "enum_NEXT_SYNTAX"], [296, 285, 10, "enum_LAST_LEXICAL_USE"], [295, 296, 9, "enum_NEXT_SYNTAX"], [296, 297, 9, "enum_NEXT_SYNTAX"], [297, 299, 9, "enum_NEXT_SYNTAX"], [300, 204, 10, "enum_LAST_LEXICAL_USE"], [299, 300, 9, "enum_NEXT_SYNTAX"], [300, 301, 9, "enum_NEXT_SYNTAX"], [301, 302, 9, "enum_NEXT_SYNTAX"], [302, 303, 9, "enum_NEXT_SYNTAX"], [303, 304, 9, "enum_NEXT_SYNTAX"], [304, 305, 9, "enum_NEXT_SYNTAX"], [305, 306, 9, "enum_NEXT_SYNTAX"], [306, 307, 9, "enum_NEXT_SYNTAX"], [308, 290, 10, "enum_LAST_LEXICAL_USE"], [307, 308, 9, "enum_NEXT_SYNTAX"], [308, 309, 9, "enum_NEXT_SYNTAX"], [310, 249, 10, "enum_LAST_LEXICAL_USE"], [309, 310, 9, "enum_NEXT_SYNTAX"], [310, 311, 9, "enum_NEXT_SYNTAX"], [312, 294, 10, "enum_LAST_LEXICAL_USE"], [311, 312, 9, "enum_NEXT_SYNTAX"], [312, 313, 9, "enum_NEXT_SYNTAX"], [313, 314, 9, "enum_NEXT_SYNTAX"], [315, 91, 10, "enum_LAST_LEXICAL_USE"], [314, 315, 9, "enum_NEXT_SYNTAX"], [315, 316, 9, "enum_NEXT_SYNTAX"], [316, 317, 9, "enum_NEXT_SYNTAX"], [317, 318, 9, "enum_NEXT_SYNTAX"], [318, 319, 9, "enum_NEXT_SYNTAX"], [319, 320, 9, "enum_NEXT_SYNTAX"], [320, 321, 9, "enum_NEXT_SYNTAX"], [321, 322, 9, "enum_NEXT_SYNTAX"], [322, 323, 9, "enum_NEXT_SYNTAX"], [323, 324, 9, "enum_NEXT_SYNTAX"], [324, 325, 9, "enum_NEXT_SYNTAX"], [325, 326, 9, "enum_NEXT_SYNTAX"], [326, 327, 9, "enum_NEXT_SYNTAX"], [327, 328, 9, "enum_NEXT_SYNTAX"], [328, 329, 9, "enum_NEXT_SYNTAX"], [329, 330, 9, "enum_NEXT_SYNTAX"], [331, 312, 10, "enum_LAST_LEXICAL_USE"], [330, 331, 9, "enum_NEXT_SYNTAX"], [331, 332, 9, "enum_NEXT_SYNTAX"], [332, 333, 9, "enum_NEXT_SYNTAX"], [334, 88, 10, "enum_LAST_LEXICAL_USE"], [333, 334, 9, "enum_NEXT_SYNTAX"], [334, 335, 9, "enum_NEXT_SYNTAX"], [335, 336, 9, "enum_NEXT_SYNTAX"], [336, 337, 9, "enum_NEXT_SYNTAX"], [337, 338, 9, "enum_NEXT_SYNTAX"], [338, 339, 9, "enum_NEXT_SYNTAX"], [339, 340, 9, "enum_NEXT_SYNTAX"], [340, 341, 9, "enum_NEXT_SYNTAX"], [341, 342, 9, "enum_NEXT_SYNTAX"], [342, 343, 9, "enum_NEXT_SYNTAX"], [343, 344, 9, "enum_NEXT_SYNTAX"], [344, 345, 9, "enum_NEXT_SYNTAX"], [346, 331, 10, "enum_LAST_LEXICAL_USE"], [345, 346, 9, "enum_NEXT_SYNTAX"], [346, 347, 9, "enum_NEXT_SYNTAX"], [347, 348, 9, "enum_NEXT_SYNTAX"], [349, 334, 10, "enum_LAST_LEXICAL_USE"], [348, 349, 9, "enum_NEXT_SYNTAX"], [349, 350, 9, "enum_NEXT_SYNTAX"], [350, 351, 9, "enum_NEXT_SYNTAX"], [351, 352, 9, "enum_NEXT_SYNTAX"], [352, 353, 9, "enum_NEXT_SYNTAX"], [353, 354, 9, "enum_NEXT_SYNTAX"], [354, 355, 9, "enum_NEXT_SYNTAX"], [356, 304, 10, "enum_LAST_LEXICAL_USE"], [355, 356, 9, "enum_NEXT_SYNTAX"], [356, 357, 9, "enum_NEXT_SYNTAX"], [357, 358, 9, "enum_NEXT_SYNTAX"], [358, 359, 9, "enum_NEXT_SYNTAX"], [360, 308, 10, "enum_LAST_LEXICAL_USE"], [359, 360, 9, "enum_NEXT_SYNTAX"], [360, 361, 9, "enum_NEXT_SYNTAX"], [362, 346, 10, "enum_LAST_LEXICAL_USE"], [361, 362, 9, "enum_NEXT_SYNTAX"], [362, 363, 9, "enum_NEXT_SYNTAX"], [363, 364, 9, "enum_NEXT_SYNTAX"], [364, 365, 9, "enum_NEXT_SYNTAX"], [366, 269, 10, "enum_LAST_LEXICAL_USE"], [365, 366, 9, "enum_NEXT_SYNTAX"], [366, 367, 9, "enum_NEXT_SYNTAX"], [367, 368, 9, "enum_NEXT_SYNTAX"], [368, 369, 9, "enum_NEXT_SYNTAX"], [370, 315, 10, "enum_LAST_LEXICAL_USE"], [369, 370, 9, "enum_NEXT_SYNTAX"], [370, 371, 9, "enum_NEXT_SYNTAX"], [371, 372, 9, "enum_NEXT_SYNTAX"], [372, 373, 9, "enum_NEXT_SYNTAX"], [373, 374, 9, "enum_NEXT_SYNTAX"], [374, 375, 9, "enum_NEXT_SYNTAX"], [375, 376, 9, "enum_NEXT_SYNTAX"], [376, 377, 9, "enum_NEXT_SYNTAX"], [377, 378, 9, "enum_NEXT_SYNTAX"], [378, 379, 9, "enum_NEXT_SYNTAX"], [379, 381, 9, "enum_NEXT_SYNTAX"], [382, 300, 10, "enum_LAST_LEXICAL_USE"], [381, 382, 9, "enum_NEXT_SYNTAX"], [382, 383, 9, "enum_NEXT_SYNTAX"], [383, 384, 9, "enum_NEXT_SYNTAX"], [384, 385, 9, "enum_NEXT_SYNTAX"], [386, 382, 10, "enum_LAST_LEXICAL_USE"], [385, 386, 9, "enum_NEXT_SYNTAX"], [386, 387, 9, "enum_NEXT_SYNTAX"], [387, 388, 9, "enum_NEXT_SYNTAX"], [389, 339, 10, "enum_LAST_LEXICAL_USE"], [388, 389, 9, "enum_NEXT_SYNTAX"], [389, 390, 9, "enum_NEXT_SYNTAX"], [390, 391, 9, "enum_NEXT_SYNTAX"], [391, 392, 9, "enum_NEXT_SYNTAX"], [392, 393, 9, "enum_NEXT_SYNTAX"], [393, 394, 9, "enum_NEXT_SYNTAX"], [394, 395, 9, "enum_NEXT_SYNTAX"], [396, 360, 10, "enum_LAST_LEXICAL_USE"], [395, 396, 9, "enum_NEXT_SYNTAX"], [396, 397, 9, "enum_NEXT_SYNTAX"], [397, 398, 9, "enum_NEXT_SYNTAX"], [399, 310, 10, "enum_LAST_LEXICAL_USE"], [398, 399, 9, "enum_NEXT_SYNTAX"], [399, 400, 9, "enum_NEXT_SYNTAX"], [400, 401, 9, "enum_NEXT_SYNTAX"], [402, 366, 10, "enum_LAST_LEXICAL_USE"], [401, 402, 9, "enum_NEXT_SYNTAX"], [402, 403, 9, "enum_NEXT_SYNTAX"], [403, 404, 9, "enum_NEXT_SYNTAX"], [404, 405, 9, "enum_NEXT_SYNTAX"], [405, 406, 9, "enum_NEXT_SYNTAX"], [406, 407, 9, "enum_NEXT_SYNTAX"], [407, 408, 9, "enum_NEXT_SYNTAX"], [408, 409, 9, "enum_NEXT_SYNTAX"], [409, 410, 9, "enum_NEXT_SYNTAX"], [410, 411, 9, "enum_NEXT_SYNTAX"], [411, 412, 9, "enum_NEXT_SYNTAX"], [412, 413, 9, "enum_NEXT_SYNTAX"], [413, 414, 9, "enum_NEXT_SYNTAX"], [414, 415, 9, "enum_NEXT_SYNTAX"], [416, 399, 10, "enum_LAST_LEXICAL_USE"], [415, 416, 9, "enum_NEXT_SYNTAX"], [416, 417, 9, "enum_NEXT_SYNTAX"], [417, 418, 9, "enum_NEXT_SYNTAX"], [418, 419, 9, "enum_NEXT_SYNTAX"], [419, 420, 9, "enum_NEXT_SYNTAX"], [421, 386, 10, "enum_LAST_LEXICAL_USE"], [420, 421, 9, "enum_NEXT_SYNTAX"], [421, 422, 9, "enum_NEXT_SYNTAX"], [422, 423, 9, "enum_NEXT_SYNTAX"], [423, 424, 9, "enum_NEXT_SYNTAX"], [425, 421, 10, "enum_LAST_LEXICAL_USE"], [424, 425, 9, "enum_NEXT_SYNTAX"], [425, 426, 9, "enum_NEXT_SYNTAX"], [426, 428, 9, "enum_NEXT_SYNTAX"], [429, 425, 10, "enum_LAST_LEXICAL_USE"], [428, 429, 9, "enum_NEXT_SYNTAX"], [429, 430, 9, "enum_NEXT_SYNTAX"], [430, 431, 9, "enum_NEXT_SYNTAX"], [431, 432, 9, "enum_NEXT_SYNTAX"], [432, 433, 9, "enum_NEXT_SYNTAX"], [433, 434, 9, "enum_NEXT_SYNTAX"], [434, 435, 9, "enum_NEXT_SYNTAX"], [435, 436, 9, "enum_NEXT_SYNTAX"], [436, 437, 9, "enum_NEXT_SYNTAX"], [438, 389, 10, "enum_LAST_LEXICAL_USE"], [437, 438, 9, "enum_NEXT_SYNTAX"], [438, 439, 9, "enum_NEXT_SYNTAX"], [439, 440, 9, "enum_NEXT_SYNTAX"], [441, 416, 10, "enum_LAST_LEXICAL_USE"], [440, 441, 9, "enum_NEXT_SYNTAX"], [441, 442, 9, "enum_NEXT_SYNTAX"], [442, 443, 9, "enum_NEXT_SYNTAX"], [444, 34, 10, "enum_LAST_LEXICAL_USE"], [443, 444, 9, "enum_NEXT_SYNTAX"], [444, 445, 9, "enum_NEXT_SYNTAX"], [445, 446, 9, "enum_NEXT_SYNTAX"], [446, 447, 9, "enum_NEXT_SYNTAX"], [448, 432, 10, "enum_LAST_LEXICAL_USE"], [447, 448, 9, "enum_NEXT_SYNTAX"], [448, 449, 9, "enum_NEXT_SYNTAX"], [449, 450, 9, "enum_NEXT_SYNTAX"], [450, 451, 9, "enum_NEXT_SYNTAX"], [451, 452, 9, "enum_NEXT_SYNTAX"], [452, 453, 9, "enum_NEXT_SYNTAX"], [454, 438, 10, "enum_LAST_LEXICAL_USE"], [453, 454, 9, "enum_NEXT_SYNTAX"], [454, 455, 9, "enum_NEXT_SYNTAX"], [455, 456, 9, "enum_NEXT_SYNTAX"], [457, 402, 10, "enum_LAST_LEXICAL_USE"], [456, 457, 9, "enum_NEXT_SYNTAX"], [457, 458, 9, "enum_NEXT_SYNTAX"], [458, 459, 9, "enum_NEXT_SYNTAX"], [460, 52, 10, "enum_LAST_LEXICAL_USE"], [459, 460, 9, "enum_NEXT_SYNTAX"], [460, 461, 9, "enum_NEXT_SYNTAX"], [461, 462, 9, "enum_NEXT_SYNTAX"], [462, 463, 9, "enum_NEXT_SYNTAX"], [463, 465, 9, "enum_NEXT_SYNTAX"], [466, 429, 10, "enum_LAST_LEXICAL_USE"], [465, 466, 9, "enum_NEXT_SYNTAX"], [6, 15, 1, "enum_CFG_NEXT"], [15, 24, 1, "enum_CFG_NEXT"], [24, 33, 1, "enum_CFG_NEXT"], [33, 42, 1, "enum_CFG_NEXT"], [42, 51, 1, "enum_CFG_NEXT"], [51, 63, 1, "enum_CFG_NEXT"], [63, 81, 1, "enum_CFG_NEXT"], [63, 71, 1, "enum_CFG_NEXT"], [81, 89, 1, "enum_CFG_NEXT"], [89, 281, 1, "enum_CFG_NEXT"], [89, 103, 1, "enum_CFG_NEXT"], [103, 100, 1, "enum_CFG_NEXT"], [100, 128, 1, "enum_CFG_NEXT"], [100, 203, 1, "enum_CFG_NEXT"], [128, 154, 1, "enum_CFG_NEXT"], [128, 100, 1, "enum_CFG_NEXT"], [154, 100, 1, "enum_CFG_NEXT"], [203, 428, 1, "enum_CFG_NEXT"], [281, 296, 1, "enum_CFG_NEXT"], [296, 294, 1, "enum_CFG_NEXT"], [294, 381, 1, "enum_CFG_NEXT"], [294, 299, 1, "enum_CFG_NEXT"], [299, 294, 1, "enum_CFG_NEXT"], [381, 420, 1, "enum_CFG_NEXT"], [420, 428, 1, "enum_CFG_NEXT"], [428, 465, 1, "enum_CFG_NEXT"], [11, 2, 3, "enum_LAST_WRITE"], [18, 9, 2, "enum_LAST_READ"], [20, 11, 2, "enum_LAST_READ"], [20, 2, 3, "enum_LAST_WRITE"], [27, 18, 2, "enum_LAST_READ"], [29, 20, 2, "enum_LAST_READ"], [29, 2, 3, "enum_LAST_WRITE"], [36, 27, 2, "enum_LAST_READ"], [38, 29, 2, "enum_LAST_READ"], [38, 2, 3, "enum_LAST_WRITE"], [45, 36, 2, "enum_LAST_READ"], [47, 38, 2, "enum_LAST_READ"], [47, 2, 3, "enum_LAST_WRITE"], [54, 45, 2, "enum_LAST_READ"], [56, 47, 2, "enum_LAST_READ"], [56, 2, 3, "enum_LAST_WRITE"], [64, 7, 3, "enum_LAST_WRITE"], [77, 64, 2, "enum_LAST_READ"], [77, 7, 3, "enum_LAST_WRITE"], [88, 43, 3, "enum_LAST_WRITE"], [108, 64, 2, "enum_LAST_READ"], [108, 7, 3, "enum_LAST_WRITE"], [100, 193, 2, "enum_LAST_READ"], [100, 140, 2, "enum_LAST_READ"], [100, 100, 3, "enum_LAST_WRITE"], [120, 193, 2, "enum_LAST_READ"], [120, 140, 2, "enum_LAST_READ"], [120, 100, 3, "enum_LAST_WRITE"], [123, 108, 2, "enum_LAST_READ"], [123, 186, 2, "enum_LAST_READ"], [123, 133, 2, "enum_LAST_READ"], [123, 7, 3, "enum_LAST_WRITE"], [125, 198, 2, "enum_LAST_READ"], [125, 143, 2, "enum_LAST_READ"], [125, 25, 3, "enum_LAST_WRITE"], [130, 120, 2, "enum_LAST_READ"], [130, 100, 3, "enum_LAST_WRITE"], [133, 123, 2, "enum_LAST_READ"], [133, 7, 3, "enum_LAST_WRITE"], [135, 195, 2, "enum_LAST_READ"], [135, 145, 2, "enum_LAST_READ"], [135, 16, 3, "enum_LAST_WRITE"], [140, 130, 2, "enum_LAST_READ"], [140, 100, 3, "enum_LAST_WRITE"], [143, 125, 2, "enum_LAST_READ"], [143, 25, 3, "enum_LAST_WRITE"], [145, 135, 2, "enum_LAST_READ"], [145, 16, 3, "enum_LAST_WRITE"], [162, 162, 2, "enum_LAST_READ"], [168, 140, 2, "enum_LAST_READ"], [168, 100, 3, "enum_LAST_WRITE"], [171, 183, 2, "enum_LAST_READ"], [174, 133, 2, "enum_LAST_READ"], [174, 7, 3, "enum_LAST_WRITE"], [176, 143, 2, "enum_LAST_READ"], [176, 25, 3, "enum_LAST_WRITE"], [179, 168, 2, "enum_LAST_READ"], [179, 100, 3, "enum_LAST_WRITE"], [183, 171, 2, "enum_LAST_READ"], [186, 174, 2, "enum_LAST_READ"], [186, 7, 3, "enum_LAST_WRITE"], [188, 176, 2, "enum_LAST_READ"], [188, 25, 3, "enum_LAST_WRITE"], [193, 179, 2, "enum_LAST_READ"], [193, 100, 3, "enum_LAST_WRITE"], [195, 145, 2, "enum_LAST_READ"], [195, 16, 3, "enum_LAST_WRITE"], [198, 188, 2, "enum_LAST_READ"], [198, 25, 3, "enum_LAST_WRITE"], [155, 155, 2, "enum_LAST_READ"], [155, 82, 3, "enum_LAST_WRITE"], [155, 155, 3, "enum_LAST_WRITE"], [155, 155, 2, "enum_LAST_READ"], [155, 82, 3, "enum_LAST_WRITE"], [155, 155, 3, "enum_LAST_WRITE"], [211, 162, 2, "enum_LAST_READ"], [218, 195, 2, "enum_LAST_READ"], [218, 145, 2, "enum_LAST_READ"], [218, 16, 3, "enum_LAST_WRITE"], [220, 198, 2, "enum_LAST_READ"], [220, 143, 2, "enum_LAST_READ"], [220, 25, 3, "enum_LAST_WRITE"], [227, 108, 2, "enum_LAST_READ"], [227, 186, 2, "enum_LAST_READ"], [227, 133, 2, "enum_LAST_READ"], [227, 7, 3, "enum_LAST_WRITE"], [238, 227, 2, "enum_LAST_READ"], [238, 7, 3, "enum_LAST_WRITE"], [240, 218, 2, "enum_LAST_READ"], [240, 16, 3, "enum_LAST_WRITE"], [244, 235, 2, "enum_LAST_READ"], [247, 238, 2, "enum_LAST_READ"], [247, 7, 3, "enum_LAST_WRITE"], [249, 240, 2, "enum_LAST_READ"], [249, 16, 3, "enum_LAST_WRITE"], [255, 244, 2, "enum_LAST_READ"], [258, 247, 2, "enum_LAST_READ"], [258, 7, 3, "enum_LAST_WRITE"], [260, 220, 2, "enum_LAST_READ"], [260, 25, 3, "enum_LAST_WRITE"], [264, 255, 2, "enum_LAST_READ"], [267, 258, 2, "enum_LAST_READ"], [267, 7, 3, "enum_LAST_WRITE"], [269, 260, 2, "enum_LAST_READ"], [269, 25, 3, "enum_LAST_WRITE"], [204, 155, 2, "enum_LAST_READ"], [204, 82, 3, "enum_LAST_WRITE"], [204, 155, 3, "enum_LAST_WRITE"], [204, 204, 2, "enum_LAST_READ"], [204, 82, 3, "enum_LAST_WRITE"], [204, 155, 3, "enum_LAST_WRITE"], [290, 64, 2, "enum_LAST_READ"], [290, 7, 3, "enum_LAST_WRITE"], [296, 285, 3, "enum_LAST_WRITE"], [294, 362, 2, "enum_LAST_READ"], [294, 294, 3, "enum_LAST_WRITE"], [304, 356, 2, "enum_LAST_READ"], [308, 360, 2, "enum_LAST_READ"], [308, 290, 2, "enum_LAST_READ"], [308, 7, 3, "enum_LAST_WRITE"], [310, 310, 2, "enum_LAST_READ"], [310, 16, 3, "enum_LAST_WRITE"], [312, 362, 2, "enum_LAST_READ"], [312, 294, 3, "enum_LAST_WRITE"], [315, 370, 2, "enum_LAST_READ"], [315, 91, 2, "enum_LAST_READ"], [326, 326, 2, "enum_LAST_READ"], [331, 312, 2, "enum_LAST_READ"], [331, 294, 3, "enum_LAST_WRITE"], [334, 349, 2, "enum_LAST_READ"], [334, 88, 2, "enum_LAST_READ"], [334, 43, 3, "enum_LAST_WRITE"], [339, 339, 2, "enum_LAST_READ"], [341, 341, 2, "enum_LAST_READ"], [346, 331, 2, "enum_LAST_READ"], [346, 294, 3, "enum_LAST_WRITE"], [349, 334, 2, "enum_LAST_READ"], [349, 43, 3, "enum_LAST_WRITE"], [356, 304, 2, "enum_LAST_READ"], [360, 308, 2, "enum_LAST_READ"], [360, 7, 3, "enum_LAST_WRITE"], [362, 346, 2, "enum_LAST_READ"], [362, 294, 3, "enum_LAST_WRITE"], [366, 366, 2, "enum_LAST_READ"], [366, 25, 3, "enum_LAST_WRITE"], [370, 315, 2, "enum_LAST_READ"], [300, 300, 2, "enum_LAST_READ"], [300, 300, 3, "enum_LAST_WRITE"], [300, 82, 3, "enum_LAST_WRITE"], [300, 300, 2, "enum_LAST_READ"], [300, 300, 3, "enum_LAST_WRITE"], [300, 82, 3, "enum_LAST_WRITE"], [386, 300, 2, "enum_LAST_READ"], [386, 300, 3, "enum_LAST_WRITE"], [386, 82, 3, "enum_LAST_WRITE"], [389, 339, 2, "enum_LAST_READ"], [396, 360, 2, "enum_LAST_READ"], [396, 290, 2, "enum_LAST_READ"], [396, 7, 3, "enum_LAST_WRITE"], [399, 310, 2, "enum_LAST_READ"], [399, 16, 3, "enum_LAST_WRITE"], [402, 366, 2, "enum_LAST_READ"], [402, 25, 3, "enum_LAST_WRITE"], [416, 399, 2, "enum_LAST_READ"], [416, 16, 3, "enum_LAST_WRITE"], [382, 386, 2, "enum_LAST_READ"], [382, 300, 3, "enum_LAST_WRITE"], [382, 82, 3, "enum_LAST_WRITE"], [425, 386, 2, "enum_LAST_READ"], [425, 382, 3, "enum_LAST_WRITE"], [421, 425, 2, "enum_LAST_READ"], [421, 382, 3, "enum_LAST_WRITE"], [438, 389, 2, "enum_LAST_READ"], [441, 249, 2, "enum_LAST_READ"], [441, 416, 2, "enum_LAST_READ"], [441, 16, 3, "enum_LAST_WRITE"], [444, 34, 3, "enum_LAST_WRITE"], [448, 432, 2, "enum_LAST_READ"], [454, 438, 2, "enum_LAST_READ"], [457, 402, 2, "enum_LAST_READ"], [457, 269, 2, "enum_LAST_READ"], [457, 25, 3, "enum_LAST_WRITE"], [460, 52, 3, "enum_LAST_WRITE"], [429, 425, 2, "enum_LAST_READ"], [429, 204, 2, "enum_LAST_READ"], [429, 421, 3, "enum_LAST_WRITE"], [429, 204, 3, "enum_LAST_WRITE"], [429, 429, 2, "enum_LAST_READ"], [429, 421, 3, "enum_LAST_WRITE"], [429, 204, 3, "enum_LAST_WRITE"], [466, 429, 2, "enum_LAST_READ"], [466, 429, 3, "enum_LAST_WRITE"], [7, 9, 4, "enum_COMPUTED_FROM"], [7, 11, 4, "enum_COMPUTED_FROM"], [16, 18, 4, "enum_COMPUTED_FROM"], [16, 20, 4, "enum_COMPUTED_FROM"], [25, 27, 4, "enum_COMPUTED_FROM"], [25, 29, 4, "enum_COMPUTED_FROM"], [34, 36, 4, "enum_COMPUTED_FROM"], [34, 38, 4, "enum_COMPUTED_FROM"], [43, 45, 4, "enum_COMPUTED_FROM"], [43, 47, 4, "enum_COMPUTED_FROM"], [52, 54, 4, "enum_COMPUTED_FROM"], [52, 56, 4, "enum_COMPUTED_FROM"], [284, 288, 4, "enum_COMPUTED_FROM"], [284, 290, 4, "enum_COMPUTED_FROM"], [382, 386, 4, "enum_COMPUTED_FROM"], [382, 389, 4, "enum_COMPUTED_FROM"], [382, 416, 4, "enum_COMPUTED_FROM"], [382, 402, 4, "enum_COMPUTED_FROM"], [382, 399, 4, "enum_COMPUTED_FROM"], [382, 396, 4, "enum_COMPUTED_FROM"], [421, 423, 4, "enum_COMPUTED_FROM"], [421, 425, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "sympy", "repo": "sympy", "path": "sympy/physics/quantum/spin.py", "id": 54032, "has_bug": false, "code_full": "from typing import Any, List\n\nfrom sympy import (I, S, Tuple, binomial, cos, exp, factorial, pi, simplify,\n                   sin, sqrt, sympify)\nfrom sympy.core.expr import Expr\n\n\nclass Rotation:\n    @classmethod\n    def d(cls, j: Any, m: Any, mp: Any, beta: Any) -> Expr:\n     return sympify(0)\n\ndef m_values(j: Expr) -> Tuple[Any, List]:\n    return None, []\n\nclass Class:\n    j: float\n    m: float\n    mp: float\n    alpha: float\n    beta: float\n    gamma: float\n\n    def _eval_wignerd(self) -> Expr:\n        j: Expr = sympify(self.j)\n        m: Expr = sympify(self.m)\n        mp: Expr = sympify(self.mp)\n        alpha: Expr = sympify(self.alpha)\n        beta: Expr = sympify(self.beta)\n        gamma: Expr = sympify(self.gamma)\n        if not j.is_number:\n            raise ValueError(\n                'j parameter must be numerical to evaluate, got %s' % j)\n        r: int = 0\n        if beta == pi/2:\n            # Varshalovich Equation (5), Section 4.16, page 113, setting\n            # alpha=gamma=0.\n            for k in range(2*j + 1):\n                if k > j + mp or k > j - m or k < mp - m:\n                    continue\n                r += (-S(1))**k * binomial(j + mp, k) * binomial(j - mp, k + m - mp)\n            r *= (-S(1))**(m - mp) / 2**j * sqrt(factorial(j + m) *\n                    factorial(j - m) / (factorial(j + mp) * factorial(j - mp)))\n        else:\n            # Varshalovich Equation(5), Section 4.7.2, page 87, where we set\n            # beta1=beta2=pi/2, and we get alpha=gamma=pi/2 and beta=phi+pi,\n            # then we use the Eq. (1), Section 4.4. page 79, to simplify:\n            # d(j, m, mp, beta+pi) = (-1)**(j-mp) * d(j, m, -mp, beta)\n            # This happens to be almost the same as in Eq.(10), Section 4.16,\n            # except that we need to substitute -mp for mp.\n            size, mvals = m_values(j)\n            for mpp in mvals:\n                r += Rotation.d(j, m, mpp, pi/2).doit() * (cos(-mpp*beta) + I*sin(-mpp*beta)) *                     Rotation.d(j, mpp, -mp, pi/2).doit()\n            # Empirical normalization factor so results match Varshalovich\n            # Tables 4.3-4.12\n            # Note that this exact normalization does not follow from the\n            # above equations\n            r = r * I**(2*j - m - mp) * (-1)**(2*m)\n            # Finally, simplify the whole expression\n            r = simplify(r)\n        r *= exp(-I*m*alpha)*exp(-I*mp*gamma)\n        return r\n", "code": "def _eval_wignerd(self) -> Expr:\n    j: Expr = sympify(self.j)\n    m: Expr = sympify(self.m)\n    mp: Expr = sympify(self.mp)\n    alpha: Expr = sympify(self.alpha)\n    beta: Expr = sympify(self.beta)\n    gamma: Expr = sympify(self.gamma)\n    if not j.is_number:\n        raise ValueError(\n            'j parameter must be numerical to evaluate, got %s' % j)\n    r: int = 0\n    if beta == pi/2:\n        # Varshalovich Equation (5), Section 4.16, page 113, setting\n        # alpha=gamma=0.\n        for k in range(2*j + 1):\n            if k > j + mp or k > j - m or k < mp - m:\n                continue\n            r += (-S(1))**k * binomial(j + mp, k) * binomial(j - mp, k + m - mp)\n        r *= (-S(1))**(m - mp) / 2**j * sqrt(factorial(j + m) *\n                factorial(j - m) / (factorial(j + mp) * factorial(j - mp)))\n    else:\n        # Varshalovich Equation(5), Section 4.7.2, page 87, where we set\n        # beta1=beta2=pi/2, and we get alpha=gamma=pi/2 and beta=phi+pi,\n        # then we use the Eq. (1), Section 4.4. page 79, to simplify:\n        # d(j, m, mp, beta+pi) = (-1)**(j-mp) * d(j, m, -mp, beta)\n        # This happens to be almost the same as in Eq.(10), Section 4.16,\n        # except that we need to substitute -mp for mp.\n        size, mvals = m_values(j)\n        for mpp in mvals:\n            r += Rotation.d(j, m, mpp, pi/2).doit() * (cos(-mpp*beta) + I*sin(-mpp*beta)) *                 Rotation.d(j, mpp, -mp, pi/2).doit()\n        # Empirical normalization factor so results match Varshalovich\n        # Tables 4.3-4.12\n        # Note that this exact normalization does not follow from the\n        # above equations\n        r = r * I**(2*j - m - mp) * (-1)**(2*m)\n        # Finally, simplify the whole expression\n        r = simplify(r)\n    r *= exp(-I*m*alpha)*exp(-I*mp*gamma)\n    return r\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "25ea11a953ec1a83e73b58d43a1d5f4026e006bc"}
{"source_tokens": ["#NEWLINE#", "def test_stats2(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "' Check stats are correct when enlarging prefix\\n    '", "#NEWLINE#", "th", "=", "TestHelper", "(", ")", "#NEWLINE#", "p1", "=", "th", ".", "add_prefix", "(", "'1.0.0.0/24'", ",", "'assignment'", ",", "'test'", ")", "#NEWLINE#", "p2", "=", "th", ".", "add_prefix", "(", "'1.0.7.0/24'", ",", "'assignment'", ",", "'test'", ")", "#NEWLINE#", "p3", "=", "th", ".", "add_prefix", "(", "'1.0.0.0/22'", ",", "'reservation'", ",", "'bar'", ")", "#NEWLINE#", "res", "=", "Prefix", ".", "smart_search", "(", "'1.0.0.0/22'", ",", "{", "}", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "1024", ",", "res", "[", "'result'", "]", "[", "0", "]", ".", "total_addresses", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "256", ",", "res", "[", "'result'", "]", "[", "0", "]", ".", "used_addresses", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "768", ",", "res", "[", "'result'", "]", "[", "0", "]", ".", "free_addresses", ")", "#NEWLINE#", "p3", ".", "prefix", "=", "'1.0.0.0/21'", "#NEWLINE#", "p3", ".", "save", "(", ")", "#NEWLINE#", "res", "=", "Prefix", ".", "smart_search", "(", "'1.0.0.0/21'", ",", "{", "}", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "2048", ",", "res", "[", "'result'", "]", "[", "0", "]", ".", "total_addresses", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "512", ",", "res", "[", "'result'", "]", "[", "0", "]", ".", "used_addresses", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "1536", ",", "res", "[", "'result'", "]", "[", "0", "]", ".", "free_addresses", ")"], "edges": [[6, 7, 7, "enum_FIELD"], [8, 12, 7, "enum_FIELD"], [14, 22, 7, "enum_FIELD"], [27, 35, 7, "enum_FIELD"], [40, 48, 7, "enum_FIELD"], [53, 61, 7, "enum_FIELD"], [65, 71, 7, "enum_FIELD"], [82, 88, 7, "enum_FIELD"], [99, 105, 7, "enum_FIELD"], [116, 121, 7, "enum_FIELD"], [122, 126, 7, "enum_FIELD"], [128, 136, 7, "enum_FIELD"], [140, 146, 7, "enum_FIELD"], [157, 163, 7, "enum_FIELD"], [174, 180, 7, "enum_FIELD"], [12, 11, 7, "enum_FIELD"], [22, 18, 7, "enum_FIELD"], [35, 31, 7, "enum_FIELD"], [48, 44, 7, "enum_FIELD"], [61, 57, 7, "enum_FIELD"], [71, 67, 7, "enum_FIELD"], [88, 84, 7, "enum_FIELD"], [105, 101, 7, "enum_FIELD"], [118, 117, 7, "enum_FIELD"], [126, 124, 7, "enum_FIELD"], [136, 132, 7, "enum_FIELD"], [146, 142, 7, "enum_FIELD"], [163, 159, 7, "enum_FIELD"], [180, 176, 7, "enum_FIELD"], [18, 17, 7, "enum_FIELD"], [31, 30, 7, "enum_FIELD"], [44, 43, 7, "enum_FIELD"], [57, 56, 7, "enum_FIELD"], [67, 66, 7, "enum_FIELD"], [79, 76, 7, "enum_FIELD"], [84, 83, 7, "enum_FIELD"], [96, 93, 7, "enum_FIELD"], [101, 100, 7, "enum_FIELD"], [113, 110, 7, "enum_FIELD"], [124, 123, 7, "enum_FIELD"], [132, 131, 7, "enum_FIELD"], [142, 141, 7, "enum_FIELD"], [154, 151, 7, "enum_FIELD"], [159, 158, 7, "enum_FIELD"], [171, 168, 7, "enum_FIELD"], [176, 175, 7, "enum_FIELD"], [188, 185, 7, "enum_FIELD"], [76, 73, 7, "enum_FIELD"], [76, 77, 7, "enum_FIELD"], [93, 90, 7, "enum_FIELD"], [93, 94, 7, "enum_FIELD"], [110, 107, 7, "enum_FIELD"], [110, 111, 7, "enum_FIELD"], [151, 148, 7, "enum_FIELD"], [151, 152, 7, "enum_FIELD"], [168, 165, 7, "enum_FIELD"], [168, 169, 7, "enum_FIELD"], [185, 182, 7, "enum_FIELD"], [185, 186, 7, "enum_FIELD"], [73, 72, 7, "enum_FIELD"], [73, 74, 7, "enum_FIELD"], [90, 89, 7, "enum_FIELD"], [90, 91, 7, "enum_FIELD"], [107, 106, 7, "enum_FIELD"], [107, 108, 7, "enum_FIELD"], [148, 147, 7, "enum_FIELD"], [148, 149, 7, "enum_FIELD"], [165, 164, 7, "enum_FIELD"], [165, 166, 7, "enum_FIELD"], [182, 181, 7, "enum_FIELD"], [182, 183, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [17, 9, 10, "enum_LAST_LEXICAL_USE"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [30, 17, 10, "enum_LAST_LEXICAL_USE"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [43, 30, 10, "enum_LAST_LEXICAL_USE"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [66, 2, 10, "enum_LAST_LEXICAL_USE"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [72, 54, 10, "enum_LAST_LEXICAL_USE"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [83, 66, 10, "enum_LAST_LEXICAL_USE"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [89, 72, 10, "enum_LAST_LEXICAL_USE"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [100, 83, 10, "enum_LAST_LEXICAL_USE"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [106, 89, 10, "enum_LAST_LEXICAL_USE"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [117, 41, 10, "enum_LAST_LEXICAL_USE"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [123, 117, 10, "enum_LAST_LEXICAL_USE"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [129, 106, 10, "enum_LAST_LEXICAL_USE"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [131, 56, 10, "enum_LAST_LEXICAL_USE"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [141, 100, 10, "enum_LAST_LEXICAL_USE"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [147, 129, 10, "enum_LAST_LEXICAL_USE"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [158, 141, 10, "enum_LAST_LEXICAL_USE"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [164, 147, 10, "enum_LAST_LEXICAL_USE"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [175, 158, 10, "enum_LAST_LEXICAL_USE"], [174, 175, 9, "enum_NEXT_SYNTAX"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 180, 9, "enum_NEXT_SYNTAX"], [181, 164, 10, "enum_LAST_LEXICAL_USE"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 184, 9, "enum_NEXT_SYNTAX"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [187, 188, 9, "enum_NEXT_SYNTAX"], [188, 189, 9, "enum_NEXT_SYNTAX"], [189, 190, 9, "enum_NEXT_SYNTAX"], [6, 8, 1, "enum_CFG_NEXT"], [8, 14, 1, "enum_CFG_NEXT"], [14, 27, 1, "enum_CFG_NEXT"], [27, 40, 1, "enum_CFG_NEXT"], [40, 53, 1, "enum_CFG_NEXT"], [53, 65, 1, "enum_CFG_NEXT"], [65, 82, 1, "enum_CFG_NEXT"], [82, 99, 1, "enum_CFG_NEXT"], [99, 116, 1, "enum_CFG_NEXT"], [116, 122, 1, "enum_CFG_NEXT"], [122, 128, 1, "enum_CFG_NEXT"], [128, 140, 1, "enum_CFG_NEXT"], [140, 157, 1, "enum_CFG_NEXT"], [157, 174, 1, "enum_CFG_NEXT"], [17, 9, 3, "enum_LAST_WRITE"], [30, 17, 2, "enum_LAST_READ"], [30, 9, 3, "enum_LAST_WRITE"], [43, 30, 2, "enum_LAST_READ"], [43, 9, 3, "enum_LAST_WRITE"], [66, 2, 3, "enum_LAST_WRITE"], [72, 54, 3, "enum_LAST_WRITE"], [83, 66, 2, "enum_LAST_READ"], [83, 2, 3, "enum_LAST_WRITE"], [89, 72, 2, "enum_LAST_READ"], [89, 54, 3, "enum_LAST_WRITE"], [100, 83, 2, "enum_LAST_READ"], [100, 2, 3, "enum_LAST_WRITE"], [106, 89, 2, "enum_LAST_READ"], [106, 54, 3, "enum_LAST_WRITE"], [117, 41, 3, "enum_LAST_WRITE"], [123, 117, 2, "enum_LAST_READ"], [123, 41, 3, "enum_LAST_WRITE"], [131, 56, 2, "enum_LAST_READ"], [129, 106, 2, "enum_LAST_READ"], [129, 54, 3, "enum_LAST_WRITE"], [141, 100, 2, "enum_LAST_READ"], [141, 2, 3, "enum_LAST_WRITE"], [147, 106, 2, "enum_LAST_READ"], [147, 129, 3, "enum_LAST_WRITE"], [158, 141, 2, "enum_LAST_READ"], [158, 2, 3, "enum_LAST_WRITE"], [164, 147, 2, "enum_LAST_READ"], [164, 129, 3, "enum_LAST_WRITE"], [175, 158, 2, "enum_LAST_READ"], [175, 2, 3, "enum_LAST_WRITE"], [181, 164, 2, "enum_LAST_READ"], [181, 129, 3, "enum_LAST_WRITE"], [9, 11, 4, "enum_COMPUTED_FROM"], [15, 17, 4, "enum_COMPUTED_FROM"], [28, 30, 4, "enum_COMPUTED_FROM"], [41, 43, 4, "enum_COMPUTED_FROM"], [54, 56, 4, "enum_COMPUTED_FROM"], [129, 131, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "SpriteLink", "repo": "NIPAP", "path": "tests/nipaptest.py", "id": 7860, "has_bug": false, "code_full": "import unittest\nfrom typing import Any, Dict, List\n\n\nclass Prefix:\n    def __init__(self, prefix: str, kind: str, description: str):\n        self.prefix = prefix\n        self.kind = kind\n        self.description = description\n\n    @staticmethod\n    def smart_search(prefix: str, options: Dict[str, Any]) -> Dict[str, Any]:\n        return {}\n    \n    def save(self):\n        pass\n\n\nclass TestHelper:\n    prefixes: List[Prefix]\n\n    def add_prefix(self, prefix: str, kind: str, description: str) -> Prefix:\n        return Prefix(prefix, kind, description)\n\n\nclass Class(unittest.TestCase):\n    def test_stats2(self):\n        \"\"\" Check stats are correct when enlarging prefix\n        \"\"\"\n        th: TestHelper = TestHelper()\n        # add a top level prefix\n        p1: Prefix = th.add_prefix('1.0.0.0/24', 'assignment', 'test')\n        p2: Prefix = th.add_prefix('1.0.7.0/24', 'assignment', 'test')\n\n        # add a covering supernet around p1\n        p3: Prefix = th.add_prefix('1.0.0.0/22', 'reservation', 'bar')\n\n        # check that p3 looks good\n        res = Prefix.smart_search('1.0.0.0/22', {})\n        self.assertEqual(1024, res['result'][0].total_addresses)\n        self.assertEqual(256, res['result'][0].used_addresses)\n        self.assertEqual(768, res['result'][0].free_addresses)\n        # now move our supernet, so we see that the update thingy works\n        p3.prefix = '1.0.0.0/21'\n        p3.save()\n\n        # check stats for p2, our new top level prefix\n        res: Dict[str, Any] = Prefix.smart_search('1.0.0.0/21', {})\n        self.assertEqual(2048, res['result'][0].total_addresses)\n        self.assertEqual(512, res['result'][0].used_addresses)\n        self.assertEqual(1536, res['result'][0].free_addresses)\n", "code": "def test_stats2(self):\n    \"\"\" Check stats are correct when enlarging prefix\n    \"\"\"\n    th: TestHelper = TestHelper()\n    # add a top level prefix\n    p1: Prefix = th.add_prefix('1.0.0.0/24', 'assignment', 'test')\n    p2: Prefix = th.add_prefix('1.0.7.0/24', 'assignment', 'test')\n\n    # add a covering supernet around p1\n    p3: Prefix = th.add_prefix('1.0.0.0/22', 'reservation', 'bar')\n\n    # check that p3 looks good\n    res = Prefix.smart_search('1.0.0.0/22', {})\n    self.assertEqual(1024, res['result'][0].total_addresses)\n    self.assertEqual(256, res['result'][0].used_addresses)\n    self.assertEqual(768, res['result'][0].free_addresses)\n    # now move our supernet, so we see that the update thingy works\n    p3.prefix = '1.0.0.0/21'\n    p3.save()\n\n    # check stats for p2, our new top level prefix\n    res: Dict[str, Any] = Prefix.smart_search('1.0.0.0/21', {})\n    self.assertEqual(2048, res['result'][0].total_addresses)\n    self.assertEqual(512, res['result'][0].used_addresses)\n    self.assertEqual(1536, res['result'][0].free_addresses)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "fb409c3fb1564f31330dadfba3e90c786322d49b"}
{"source_tokens": ["#NEWLINE#", "def main(", ")", ":", "#NEWLINE#", "#INDENT#", "cur_dir", "=", "os", ".", "path", ".", "dirname", "(", "__file__", ")", "#NEWLINE#", "os", ".", "chdir", "(", "os", ".", "path", ".", "join", "(", "cur_dir", ",", "'..'", ",", "'..'", ")", ")", "#NEWLINE#", "modules", "=", "sys", ".", "argv", "[", "1", ":", "]", "#NEWLINE#", "if", "(", "not", "modules", ")", ":", "#NEWLINE#", "#INDENT#", "modules", "=", "scan_for_modules", "(", ")", "#NEWLINE#", "#UNINDENT#", "p", "=", "subprocess", ".", "Popen", "(", "(", "[", "'pyflakes'", "]", "+", "modules", ")", ",", "stderr", "=", "subprocess", ".", "PIPE", ",", "stdout", "=", "subprocess", ".", "PIPE", ",", "close_fds", "=", "True", ")", "#NEWLINE#", "contents", "=", "p", ".", "stdout", ".", "readlines", "(", ")", "#NEWLINE#", "exclusions", "=", "{", "}", "#NEWLINE#", "with", "open", "(", "os", ".", "path", ".", "join", "(", "cur_dir", ",", "'pyflakes.exclude'", ")", ",", "'r'", ")", "as", "fp", ":", "#NEWLINE#", "#INDENT#", "for", "line", "in", "fp", ":", "#NEWLINE#", "#INDENT#", "if", "(", "not", "line", ".", "startswith", "(", "'#'", ")", ")", ":", "#NEWLINE#", "#INDENT#", "exclusions", "[", "line", ".", "rstrip", "(", ")", "]", "=", "1", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "for", "line", "in", "contents", ":", "#NEWLINE#", "#INDENT#", "line", "=", "line", ".", "rstrip", "(", ")", "#NEWLINE#", "test_line", "=", "re", ".", "sub", "(", "':[0-9]+:'", ",", "':*:'", ",", "line", ",", "1", ")", "#NEWLINE#", "test_line", "=", "re", ".", "sub", "(", "'line [0-9]+'", ",", "'line *'", ",", "test_line", ")", "#NEWLINE#", "if", "(", "(", "test_line", "not in", "exclusions", ")", "and", "(", "not", "test_line", ".", "startswith", "(", "module_exclusions", ")", ")", ")", ":", "#NEWLINE#", "#INDENT#", "print", "(", "line", ")"], "edges": [[5, 13, 7, "enum_FIELD"], [16, 20, 7, "enum_FIELD"], [34, 40, 7, "enum_FIELD"], [45, 47, 7, "enum_FIELD"], [59, 79, 7, "enum_FIELD"], [90, 98, 7, "enum_FIELD"], [100, 103, 7, "enum_FIELD"], [163, 162, 7, "enum_FIELD"], [163, 164, 7, "enum_FIELD"], [13, 11, 7, "enum_FIELD"], [20, 18, 7, "enum_FIELD"], [40, 38, 7, "enum_FIELD"], [40, 42, 7, "enum_FIELD"], [47, 48, 7, "enum_FIELD"], [52, 56, 7, "enum_FIELD"], [79, 63, 7, "enum_FIELD"], [98, 96, 7, "enum_FIELD"], [122, 119, 7, "enum_FIELD"], [122, 123, 7, "enum_FIELD"], [129, 128, 7, "enum_FIELD"], [129, 130, 7, "enum_FIELD"], [167, 173, 7, "enum_FIELD"], [175, 185, 7, "enum_FIELD"], [190, 198, 7, "enum_FIELD"], [204, 211, 7, "enum_FIELD"], [11, 9, 7, "enum_FIELD"], [18, 17, 7, "enum_FIELD"], [28, 24, 7, "enum_FIELD"], [38, 37, 7, "enum_FIELD"], [42, 41, 7, "enum_FIELD"], [56, 55, 7, "enum_FIELD"], [63, 62, 7, "enum_FIELD"], [70, 67, 7, "enum_FIELD"], [70, 71, 7, "enum_FIELD"], [74, 77, 7, "enum_FIELD"], [80, 83, 7, "enum_FIELD"], [86, 88, 7, "enum_FIELD"], [96, 94, 7, "enum_FIELD"], [119, 107, 7, "enum_FIELD"], [134, 136, 7, "enum_FIELD"], [173, 171, 7, "enum_FIELD"], [185, 179, 7, "enum_FIELD"], [198, 194, 7, "enum_FIELD"], [224, 226, 7, "enum_FIELD"], [9, 8, 7, "enum_FIELD"], [24, 22, 7, "enum_FIELD"], [77, 76, 7, "enum_FIELD"], [83, 82, 7, "enum_FIELD"], [94, 93, 7, "enum_FIELD"], [116, 112, 7, "enum_FIELD"], [136, 140, 7, "enum_FIELD"], [146, 156, 7, "enum_FIELD"], [171, 170, 7, "enum_FIELD"], [179, 178, 7, "enum_FIELD"], [194, 193, 7, "enum_FIELD"], [208, 207, 7, "enum_FIELD"], [213, 217, 7, "enum_FIELD"], [226, 225, 7, "enum_FIELD"], [22, 21, 7, "enum_FIELD"], [112, 110, 7, "enum_FIELD"], [140, 138, 7, "enum_FIELD"], [148, 147, 7, "enum_FIELD"], [148, 152, 7, "enum_FIELD"], [217, 215, 7, "enum_FIELD"], [110, 109, 7, "enum_FIELD"], [138, 137, 7, "enum_FIELD"], [152, 150, 7, "enum_FIELD"], [215, 214, 7, "enum_FIELD"], [150, 149, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [17, 8, 10, "enum_LAST_LEXICAL_USE"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [21, 17, 10, "enum_LAST_LEXICAL_USE"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [27, 6, 10, "enum_LAST_LEXICAL_USE"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [48, 35, 10, "enum_LAST_LEXICAL_USE"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 52, 9, "enum_NEXT_SYNTAX"], [53, 48, 10, "enum_LAST_LEXICAL_USE"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [71, 53, 10, "enum_LAST_LEXICAL_USE"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [76, 62, 10, "enum_LAST_LEXICAL_USE"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [82, 76, 10, "enum_LAST_LEXICAL_USE"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [93, 60, 10, "enum_LAST_LEXICAL_USE"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [109, 21, 10, "enum_LAST_LEXICAL_USE"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [115, 27, 10, "enum_LAST_LEXICAL_USE"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [130, 123, 10, "enum_LAST_LEXICAL_USE"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [137, 128, 10, "enum_LAST_LEXICAL_USE"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 146, 9, "enum_NEXT_SYNTAX"], [147, 101, 10, "enum_LAST_LEXICAL_USE"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [149, 137, 10, "enum_LAST_LEXICAL_USE"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 161, 9, "enum_NEXT_SYNTAX"], [162, 149, 10, "enum_LAST_LEXICAL_USE"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [164, 91, 10, "enum_LAST_LEXICAL_USE"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 167, 9, "enum_NEXT_SYNTAX"], [168, 162, 10, "enum_LAST_LEXICAL_USE"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [170, 168, 10, "enum_LAST_LEXICAL_USE"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 184, 9, "enum_NEXT_SYNTAX"], [184, 185, 9, "enum_NEXT_SYNTAX"], [186, 170, 10, "enum_LAST_LEXICAL_USE"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [187, 188, 9, "enum_NEXT_SYNTAX"], [188, 189, 9, "enum_NEXT_SYNTAX"], [189, 190, 9, "enum_NEXT_SYNTAX"], [191, 176, 10, "enum_LAST_LEXICAL_USE"], [190, 191, 9, "enum_NEXT_SYNTAX"], [191, 192, 9, "enum_NEXT_SYNTAX"], [193, 178, 10, "enum_LAST_LEXICAL_USE"], [192, 193, 9, "enum_NEXT_SYNTAX"], [193, 194, 9, "enum_NEXT_SYNTAX"], [194, 195, 9, "enum_NEXT_SYNTAX"], [195, 196, 9, "enum_NEXT_SYNTAX"], [196, 197, 9, "enum_NEXT_SYNTAX"], [197, 198, 9, "enum_NEXT_SYNTAX"], [198, 199, 9, "enum_NEXT_SYNTAX"], [199, 200, 9, "enum_NEXT_SYNTAX"], [201, 191, 10, "enum_LAST_LEXICAL_USE"], [200, 201, 9, "enum_NEXT_SYNTAX"], [201, 202, 9, "enum_NEXT_SYNTAX"], [202, 204, 9, "enum_NEXT_SYNTAX"], [204, 205, 9, "enum_NEXT_SYNTAX"], [205, 206, 9, "enum_NEXT_SYNTAX"], [207, 201, 10, "enum_LAST_LEXICAL_USE"], [206, 207, 9, "enum_NEXT_SYNTAX"], [207, 208, 9, "enum_NEXT_SYNTAX"], [209, 147, 10, "enum_LAST_LEXICAL_USE"], [208, 209, 9, "enum_NEXT_SYNTAX"], [209, 210, 9, "enum_NEXT_SYNTAX"], [210, 211, 9, "enum_NEXT_SYNTAX"], [211, 212, 9, "enum_NEXT_SYNTAX"], [212, 213, 9, "enum_NEXT_SYNTAX"], [214, 207, 10, "enum_LAST_LEXICAL_USE"], [213, 214, 9, "enum_NEXT_SYNTAX"], [214, 215, 9, "enum_NEXT_SYNTAX"], [215, 216, 9, "enum_NEXT_SYNTAX"], [216, 217, 9, "enum_NEXT_SYNTAX"], [217, 218, 9, "enum_NEXT_SYNTAX"], [218, 219, 9, "enum_NEXT_SYNTAX"], [219, 220, 9, "enum_NEXT_SYNTAX"], [220, 221, 9, "enum_NEXT_SYNTAX"], [221, 222, 9, "enum_NEXT_SYNTAX"], [222, 224, 9, "enum_NEXT_SYNTAX"], [224, 225, 9, "enum_NEXT_SYNTAX"], [225, 226, 9, "enum_NEXT_SYNTAX"], [227, 186, 10, "enum_LAST_LEXICAL_USE"], [226, 227, 9, "enum_NEXT_SYNTAX"], [227, 228, 9, "enum_NEXT_SYNTAX"], [5, 16, 1, "enum_CFG_NEXT"], [16, 34, 1, "enum_CFG_NEXT"], [34, 47, 1, "enum_CFG_NEXT"], [47, 59, 1, "enum_CFG_NEXT"], [47, 52, 1, "enum_CFG_NEXT"], [52, 59, 1, "enum_CFG_NEXT"], [59, 90, 1, "enum_CFG_NEXT"], [90, 100, 1, "enum_CFG_NEXT"], [100, 164, 1, "enum_CFG_NEXT"], [164, 162, 1, "enum_CFG_NEXT"], [162, 167, 1, "enum_CFG_NEXT"], [167, 175, 1, "enum_CFG_NEXT"], [175, 190, 1, "enum_CFG_NEXT"], [190, 211, 1, "enum_CFG_NEXT"], [211, 224, 1, "enum_CFG_NEXT"], [211, 162, 1, "enum_CFG_NEXT"], [224, 162, 1, "enum_CFG_NEXT"], [17, 8, 2, "enum_LAST_READ"], [21, 17, 2, "enum_LAST_READ"], [27, 6, 3, "enum_LAST_WRITE"], [48, 35, 3, "enum_LAST_WRITE"], [53, 48, 2, "enum_LAST_READ"], [53, 35, 3, "enum_LAST_WRITE"], [71, 48, 2, "enum_LAST_READ"], [71, 35, 3, "enum_LAST_WRITE"], [71, 53, 3, "enum_LAST_WRITE"], [76, 62, 2, "enum_LAST_READ"], [82, 76, 2, "enum_LAST_READ"], [93, 60, 3, "enum_LAST_WRITE"], [164, 91, 3, "enum_LAST_WRITE"], [162, 186, 2, "enum_LAST_READ"], [162, 227, 2, "enum_LAST_READ"], [162, 168, 3, "enum_LAST_WRITE"], [170, 186, 2, "enum_LAST_READ"], [170, 227, 2, "enum_LAST_READ"], [170, 162, 3, "enum_LAST_WRITE"], [168, 170, 2, "enum_LAST_READ"], [168, 162, 3, "enum_LAST_WRITE"], [178, 193, 2, "enum_LAST_READ"], [186, 170, 2, "enum_LAST_READ"], [186, 168, 3, "enum_LAST_WRITE"], [176, 214, 2, "enum_LAST_READ"], [176, 191, 3, "enum_LAST_WRITE"], [193, 178, 2, "enum_LAST_READ"], [201, 214, 2, "enum_LAST_READ"], [201, 176, 3, "enum_LAST_WRITE"], [191, 201, 2, "enum_LAST_READ"], [191, 176, 3, "enum_LAST_WRITE"], [207, 201, 2, "enum_LAST_READ"], [207, 191, 3, "enum_LAST_WRITE"], [209, 209, 2, "enum_LAST_READ"], [209, 101, 3, "enum_LAST_WRITE"], [214, 207, 2, "enum_LAST_READ"], [214, 191, 3, "enum_LAST_WRITE"], [218, 218, 2, "enum_LAST_READ"], [225, 225, 2, "enum_LAST_READ"], [227, 186, 2, "enum_LAST_READ"], [227, 168, 3, "enum_LAST_WRITE"], [6, 14, 4, "enum_COMPUTED_FROM"], [6, 8, 4, "enum_COMPUTED_FROM"], [35, 37, 4, "enum_COMPUTED_FROM"], [60, 62, 4, "enum_COMPUTED_FROM"], [60, 71, 4, "enum_COMPUTED_FROM"], [60, 76, 4, "enum_COMPUTED_FROM"], [60, 82, 4, "enum_COMPUTED_FROM"], [91, 93, 4, "enum_COMPUTED_FROM"], [53, 55, 4, "enum_COMPUTED_FROM"], [168, 170, 4, "enum_COMPUTED_FROM"], [176, 186, 4, "enum_COMPUTED_FROM"], [176, 178, 4, "enum_COMPUTED_FROM"], [191, 201, 4, "enum_COMPUTED_FROM"], [191, 193, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "reviewboard", "repo": "reviewboard", "path": "contrib/internal/run-pyflakes.py", "id": 44083, "has_bug": false, "code_full": "import os\nimport re\nimport subprocess\nimport sys\nfrom typing import Dict, List\n\n\ndef scan_for_modules() -> List[str]:\n    return []\n\n\nmodule_exclusions: str = \"\"\n\n\ndef main():\n    cur_dir: str=os.path.dirname(__file__)\n    os.chdir(os.path.join(cur_dir,'..','..'))\n    modules: List[str]=sys.argv[1:]\n    if (not modules):\n        modules: List[str]=scan_for_modules()\n    p: subprocess.Popen=subprocess.Popen((['pyflakes']+modules),stderr=subprocess.PIPE,stdout=subprocess.PIPE,close_fds=True)\n    contents: List[str]=p.stdout.readlines()\n    exclusions: Dict[str, int]={}\n    with open(os.path.join(cur_dir,'pyflakes.exclude'),'r') as fp:\n        for line in fp:\n            if (not line.startswith('#')):\n                exclusions[line.rstrip()]=1\n    for line in contents:\n        line: str=line.rstrip()\n        test_line: str=re.sub(':[0-9]+:',':*:',line,1)\n        test_line: str=re.sub('line [0-9]+','line *',test_line)\n        if ((test_line not in exclusions) and (not test_line.startswith(module_exclusions))):\n            print(line)\n", "code": "def main():\n    cur_dir: str=os.path.dirname(__file__)\n    os.chdir(os.path.join(cur_dir,'..','..'))\n    modules: List[str]=sys.argv[1:]\n    if (not modules):\n        modules: List[str]=scan_for_modules()\n    p: subprocess.Popen=subprocess.Popen((['pyflakes']+modules),stderr=subprocess.PIPE,stdout=subprocess.PIPE,close_fds=True)\n    contents: List[str]=p.stdout.readlines()\n    exclusions: Dict[str, int]={}\n    with open(os.path.join(cur_dir,'pyflakes.exclude'),'r') as fp:\n        for line in fp:\n            if (not line.startswith('#')):\n                exclusions[line.rstrip()]=1\n    for line in contents:\n        line: str=line.rstrip()\n        test_line: str=re.sub(':[0-9]+:',':*:',line,1)\n        test_line: str=re.sub('line [0-9]+','line *',test_line)\n        if ((test_line not in exclusions) and (not test_line.startswith(module_exclusions))):\n            print(line)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "union-attr,other", "hash": "6875281357bd36d221e823e6d777db799c21e5a6"}
{"source_tokens": ["#NEWLINE#", "def test_basic_index(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "for", "(", "s", ",", "i", ")", "in", "self", ".", "d", ".", "items", "(", ")", ":", "#NEWLINE#", "#INDENT#", "i_rec", "=", "self", ".", "encode_decode", "(", "i", ")", "#NEWLINE#", "self", ".", "assertTrue", "(", "i", ".", "equals", "(", "i_rec", ")", ")", "#NEWLINE#", "#UNINDENT#", "i", "=", "Index", "(", "[", "Timestamp", "(", "'20130101'", ")", ",", "Timestamp", "(", "'20130103'", ")", "]", ")", "#NEWLINE#", "i_rec", "=", "self", ".", "encode_decode", "(", "i", ")", "#NEWLINE#", "self", ".", "assertTrue", "(", "i", ".", "equals", "(", "i_rec", ")", ")", "#NEWLINE#", "i", "=", "Index", "(", "[", "Timestamp", "(", "'20130101 9:00:00'", ")", ",", "Timestamp", "(", "'20130103 11:00:00'", ")", "]", ")", ".", "tz_localize", "(", "'US/Eastern'", ")", "#NEWLINE#", "i_rec", "=", "self", ".", "encode_decode", "(", "i", ")", "#NEWLINE#", "self", ".", "assertTrue", "(", "i", ".", "equals", "(", "i_rec", ")", ")"], "edges": [[13, 10, 7, "enum_FIELD"], [13, 19, 7, "enum_FIELD"], [45, 49, 7, "enum_FIELD"], [62, 68, 7, "enum_FIELD"], [71, 75, 7, "enum_FIELD"], [83, 102, 7, "enum_FIELD"], [105, 111, 7, "enum_FIELD"], [114, 118, 7, "enum_FIELD"], [19, 17, 7, "enum_FIELD"], [23, 29, 7, "enum_FIELD"], [32, 36, 7, "enum_FIELD"], [49, 48, 7, "enum_FIELD"], [68, 66, 7, "enum_FIELD"], [75, 73, 7, "enum_FIELD"], [102, 100, 7, "enum_FIELD"], [111, 109, 7, "enum_FIELD"], [118, 116, 7, "enum_FIELD"], [17, 15, 7, "enum_FIELD"], [29, 27, 7, "enum_FIELD"], [36, 34, 7, "enum_FIELD"], [66, 65, 7, "enum_FIELD"], [73, 72, 7, "enum_FIELD"], [79, 77, 7, "enum_FIELD"], [100, 87, 7, "enum_FIELD"], [109, 108, 7, "enum_FIELD"], [116, 115, 7, "enum_FIELD"], [122, 120, 7, "enum_FIELD"], [15, 14, 7, "enum_FIELD"], [27, 26, 7, "enum_FIELD"], [34, 33, 7, "enum_FIELD"], [40, 38, 7, "enum_FIELD"], [52, 51, 7, "enum_FIELD"], [57, 56, 7, "enum_FIELD"], [77, 76, 7, "enum_FIELD"], [87, 86, 7, "enum_FIELD"], [120, 119, 7, "enum_FIELD"], [38, 37, 7, "enum_FIELD"], [90, 89, 7, "enum_FIELD"], [95, 94, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [14, 2, 10, "enum_LAST_LEXICAL_USE"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [26, 14, 10, "enum_LAST_LEXICAL_USE"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [30, 11, 10, "enum_LAST_LEXICAL_USE"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [33, 26, 10, "enum_LAST_LEXICAL_USE"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [37, 30, 10, "enum_LAST_LEXICAL_USE"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [41, 24, 10, "enum_LAST_LEXICAL_USE"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 45, 9, "enum_NEXT_SYNTAX"], [46, 37, 10, "enum_LAST_LEXICAL_USE"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [56, 51, 10, "enum_LAST_LEXICAL_USE"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [63, 41, 10, "enum_LAST_LEXICAL_USE"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [65, 33, 10, "enum_LAST_LEXICAL_USE"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [69, 46, 10, "enum_LAST_LEXICAL_USE"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [72, 65, 10, "enum_LAST_LEXICAL_USE"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [76, 69, 10, "enum_LAST_LEXICAL_USE"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [80, 63, 10, "enum_LAST_LEXICAL_USE"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [84, 76, 10, "enum_LAST_LEXICAL_USE"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [86, 48, 10, "enum_LAST_LEXICAL_USE"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [89, 56, 10, "enum_LAST_LEXICAL_USE"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [94, 89, 10, "enum_LAST_LEXICAL_USE"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [106, 80, 10, "enum_LAST_LEXICAL_USE"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [108, 72, 10, "enum_LAST_LEXICAL_USE"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [112, 84, 10, "enum_LAST_LEXICAL_USE"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [115, 108, 10, "enum_LAST_LEXICAL_USE"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [119, 112, 10, "enum_LAST_LEXICAL_USE"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [123, 106, 10, "enum_LAST_LEXICAL_USE"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [19, 10, 1, "enum_CFG_NEXT"], [10, 23, 1, "enum_CFG_NEXT"], [10, 45, 1, "enum_CFG_NEXT"], [23, 32, 1, "enum_CFG_NEXT"], [32, 10, 1, "enum_CFG_NEXT"], [45, 62, 1, "enum_CFG_NEXT"], [62, 71, 1, "enum_CFG_NEXT"], [71, 83, 1, "enum_CFG_NEXT"], [83, 105, 1, "enum_CFG_NEXT"], [105, 114, 1, "enum_CFG_NEXT"], [14, 2, 3, "enum_LAST_WRITE"], [9, 9, 3, "enum_LAST_WRITE"], [11, 37, 2, "enum_LAST_READ"], [11, 11, 3, "enum_LAST_WRITE"], [26, 33, 2, "enum_LAST_READ"], [26, 14, 2, "enum_LAST_READ"], [26, 2, 3, "enum_LAST_WRITE"], [30, 37, 2, "enum_LAST_READ"], [30, 11, 3, "enum_LAST_WRITE"], [24, 41, 2, "enum_LAST_READ"], [24, 24, 3, "enum_LAST_WRITE"], [33, 26, 2, "enum_LAST_READ"], [33, 2, 3, "enum_LAST_WRITE"], [37, 30, 2, "enum_LAST_READ"], [37, 11, 3, "enum_LAST_WRITE"], [41, 41, 2, "enum_LAST_READ"], [41, 24, 3, "enum_LAST_WRITE"], [56, 51, 2, "enum_LAST_READ"], [46, 37, 2, "enum_LAST_READ"], [46, 11, 3, "enum_LAST_WRITE"], [65, 33, 2, "enum_LAST_READ"], [65, 14, 2, "enum_LAST_READ"], [65, 2, 3, "enum_LAST_WRITE"], [69, 37, 2, "enum_LAST_READ"], [69, 46, 3, "enum_LAST_WRITE"], [63, 41, 2, "enum_LAST_READ"], [63, 24, 3, "enum_LAST_WRITE"], [72, 65, 2, "enum_LAST_READ"], [72, 2, 3, "enum_LAST_WRITE"], [76, 69, 2, "enum_LAST_READ"], [76, 46, 3, "enum_LAST_WRITE"], [80, 41, 2, "enum_LAST_READ"], [80, 63, 3, "enum_LAST_WRITE"], [86, 48, 2, "enum_LAST_READ"], [89, 56, 2, "enum_LAST_READ"], [94, 89, 2, "enum_LAST_READ"], [84, 76, 2, "enum_LAST_READ"], [84, 46, 3, "enum_LAST_WRITE"], [108, 72, 2, "enum_LAST_READ"], [108, 2, 3, "enum_LAST_WRITE"], [112, 76, 2, "enum_LAST_READ"], [112, 84, 3, "enum_LAST_WRITE"], [106, 80, 2, "enum_LAST_READ"], [106, 63, 3, "enum_LAST_WRITE"], [115, 108, 2, "enum_LAST_READ"], [115, 2, 3, "enum_LAST_WRITE"], [119, 112, 2, "enum_LAST_READ"], [119, 84, 3, "enum_LAST_WRITE"], [123, 80, 2, "enum_LAST_READ"], [123, 106, 3, "enum_LAST_WRITE"], [46, 48, 4, "enum_COMPUTED_FROM"], [46, 51, 4, "enum_COMPUTED_FROM"], [46, 56, 4, "enum_COMPUTED_FROM"], [63, 69, 4, "enum_COMPUTED_FROM"], [63, 65, 4, "enum_COMPUTED_FROM"], [84, 86, 4, "enum_COMPUTED_FROM"], [84, 89, 4, "enum_COMPUTED_FROM"], [84, 94, 4, "enum_COMPUTED_FROM"], [106, 112, 4, "enum_COMPUTED_FROM"], [106, 108, 4, "enum_COMPUTED_FROM"], [24, 30, 4, "enum_COMPUTED_FROM"], [24, 26, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "pydata", "repo": "pandas", "path": "pandas/io/tests/test_packers.py", "id": 41281, "has_bug": false, "code_full": "from typing import Dict\n\nfrom pandas import Index, Timestamp\n\n\nclass Class:\n    d: Dict[str, Index]\n\n    def encode_decode(self, obj: Index) -> Index:\n        return obj\n\n    def assert_index_equal(self, i1: Index, i2: Index):\n        pass\n\n    def test_basic_index(self):\n\n        for s, i in self.d.items():\n            i_rec = self.encode_decode(i)\n            self.assert_index_equal(i, i_rec)\n\n        # datetime with no freq (GH5506)\n        i: Index = Index([Timestamp('20130101'), Timestamp('20130103')])\n        i_rec: Index = self.encode_decode(i)\n        self.assert_index_equal(i, i_rec)\n\n        # datetime with timezone\n        i: Index = Index([Timestamp('20130101 9:00:00'), Timestamp(\n            '20130103 11:00:00')]).tz_localize('US/Eastern')\n        i_rec: Index = self.encode_decode(i)\n        self.assert_index_equal(i, i_rec)\n", "code": "def test_basic_index(self):\n\n    for s, i in self.d.items():\n        i_rec = self.encode_decode(i)\n        self.assert_index_equal(i, i_rec)\n\n    # datetime with no freq (GH5506)\n    i: Index = Index([Timestamp('20130101'), Timestamp('20130103')])\n    i_rec: Index = self.encode_decode(i)\n    self.assert_index_equal(i, i_rec)\n\n    # datetime with timezone\n    i: Index = Index([Timestamp('20130101 9:00:00'), Timestamp(\n        '20130103 11:00:00')]).tz_localize('US/Eastern')\n    i_rec: Index = self.encode_decode(i)\n    self.assert_index_equal(i, i_rec)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "366241386282272328333256b6e267a68f8133a4"}
{"source_tokens": ["#NEWLINE#", "def test_log_option_source_ini_value(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "ini_val", "=", "'vuln'", "#NEWLINE#", "option_name", "=", "'aggregate'", "#NEWLINE#", "self", ".", "assertEqual", "(", "ini_val", ",", "bandit", ".", "_log_option_source", "(", "None", ",", "ini_val", ",", "option_name", ")", ")"], "edges": [[6, 9, 7, "enum_FIELD"], [10, 13, 7, "enum_FIELD"], [14, 20, 7, "enum_FIELD"], [20, 16, 7, "enum_FIELD"], [16, 15, 7, "enum_FIELD"], [26, 22, 7, "enum_FIELD"], [22, 21, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [15, 2, 10, "enum_LAST_LEXICAL_USE"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [19, 7, 10, "enum_LAST_LEXICAL_USE"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [27, 19, 10, "enum_LAST_LEXICAL_USE"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [29, 11, 10, "enum_LAST_LEXICAL_USE"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [6, 10, 1, "enum_CFG_NEXT"], [10, 14, 1, "enum_CFG_NEXT"], [15, 2, 3, "enum_LAST_WRITE"], [19, 7, 3, "enum_LAST_WRITE"], [27, 19, 2, "enum_LAST_READ"], [27, 7, 3, "enum_LAST_WRITE"], [29, 11, 3, "enum_LAST_WRITE"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "openstack", "repo": "bandit", "path": "tests/unit/cli/test_main.py", "id": 33320, "has_bug": false, "code_full": "import unittest\nfrom typing import Optional\n\n\nclass Bandit:\n    @staticmethod\n    def _log_option_source(command_line_val: Optional[str], ini_val: str, option_name: str) -> str:\n        return \"\"\n\n\nbandit = Bandit()\n\n\nclass Class(unittest.TestCase):\n    def test_log_option_source_ini_value(self):\n        # Test that the ini value is returned when no command argument is\n        # provided\n        ini_val: str = 'vuln'\n        option_name: str = 'aggregate'\n        self.assertEqual(ini_val, bandit._log_option_source(None, ini_val,\n                            option_name))\n", "code": "def test_log_option_source_ini_value(self):\n    # Test that the ini value is returned when no command argument is\n    # provided\n    ini_val: str = 'vuln'\n    option_name: str = 'aggregate'\n    self.assertEqual(ini_val, bandit._log_option_source(None, ini_val,\n                        option_name))\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "00742402aa88447f94c4a8c1c067a9e0dfb8c981"}
{"source_tokens": ["#NEWLINE#", "def __new__(", "cls", ",", "*", "args", ",", "**kw_args", ")", ":", "#NEWLINE#", "#INDENT#", "args", "=", "[", "sympify", "(", "x", ")", "for", "x", "in", "args", "if", "x", "]", "#NEWLINE#", "args", "=", "TensAdd", ".", "_tensAdd_flatten", "(", "args", ")", "#NEWLINE#", "if", "(", "not", "args", ")", ":", "#NEWLINE#", "#INDENT#", "return", "S", ".", "Zero", "#NEWLINE#", "#UNINDENT#", "if", "(", "(", "len", "(", "args", ")", "==", "1", ")", "and", "(", "not", "isinstance", "(", "args", "[", "0", "]", ",", "TensExpr", ")", ")", ")", ":", "#NEWLINE#", "#INDENT#", "return", "args", "[", "0", "]", "#NEWLINE#", "#UNINDENT#", "args", "=", "TensAdd", ".", "_tensAdd_check_automatrix", "(", "args", ")", "#NEWLINE#", "TensAdd", ".", "_tensAdd_check", "(", "args", ")", "#NEWLINE#", "if", "(", "(", "len", "(", "args", ")", "==", "1", ")", "and", "isinstance", "(", "args", "[", "0", "]", ",", "TensMul", ")", ")", ":", "#NEWLINE#", "#INDENT#", "obj", "=", "Basic", ".", "__new__", "(", "cls", ",", "*", "args", ",", "**", "kw_args", ")", "#NEWLINE#", "return", "obj", "#NEWLINE#", "#UNINDENT#", "args", "=", "[", "canon_bp", "(", "x", ")", "for", "x", "in", "args", "if", "x", "]", "#NEWLINE#", "args", "=", "[", "x", "for", "x", "in", "args", "if", "x", "]", "#NEWLINE#", "if", "(", "not", "args", ")", ":", "#NEWLINE#", "#INDENT#", "return", "S", ".", "Zero", "#NEWLINE#", "#UNINDENT#", "if", "(", "len", "(", "args", ")", "==", "1", ")", ":", "#NEWLINE#", "#INDENT#", "return", "args", "[", "0", "]", "#NEWLINE#", "#UNINDENT#", "def sort_key(", "t", ")", ":", "#NEWLINE#", "#INDENT#", "x", "=", "get_tids", "(", "t", ")", "#NEWLINE#", "return", "(", "x", ".", "components", ",", "x", ".", "free", ",", "x", ".", "dum", ")", "#NEWLINE#", "#UNINDENT#", "args", ".", "sort", "(", "key", "=", "sort_key", ")", "#NEWLINE#", "args", "=", "TensAdd", ".", "_tensAdd_collect_terms", "(", "args", ")", "#NEWLINE#", "if", "(", "not", "args", ")", ":", "#NEWLINE#", "#INDENT#", "return", "S", ".", "Zero", "#NEWLINE#", "#UNINDENT#", "if", "(", "len", "(", "args", ")", "==", "1", ")", ":", "#NEWLINE#", "#INDENT#", "return", "args", "[", "0", "]", "#NEWLINE#", "#UNINDENT#", "obj", "=", "Basic", ".", "__new__", "(", "cls", ",", "*", "args", ",", "**", "kw_args", ")", "#NEWLINE#", "return", "obj"], "edges": [[1, 4, 7, "enum_FIELD"], [4, 5, 7, "enum_FIELD"], [11, 14, 7, "enum_FIELD"], [26, 32, 7, "enum_FIELD"], [36, 38, 7, "enum_FIELD"], [50, 60, 7, "enum_FIELD"], [83, 89, 7, "enum_FIELD"], [92, 96, 7, "enum_FIELD"], [100, 110, 7, "enum_FIELD"], [142, 145, 7, "enum_FIELD"], [157, 160, 7, "enum_FIELD"], [170, 172, 7, "enum_FIELD"], [184, 190, 7, "enum_FIELD"], [231, 235, 7, "enum_FIELD"], [240, 246, 7, "enum_FIELD"], [250, 252, 7, "enum_FIELD"], [264, 270, 7, "enum_FIELD"], [282, 290, 7, "enum_FIELD"], [298, 299, 7, "enum_FIELD"], [14, 16, 7, "enum_FIELD"], [32, 30, 7, "enum_FIELD"], [38, 39, 7, "enum_FIELD"], [44, 46, 7, "enum_FIELD"], [77, 79, 7, "enum_FIELD"], [89, 87, 7, "enum_FIELD"], [96, 94, 7, "enum_FIELD"], [123, 131, 7, "enum_FIELD"], [139, 140, 7, "enum_FIELD"], [145, 147, 7, "enum_FIELD"], [160, 161, 7, "enum_FIELD"], [172, 173, 7, "enum_FIELD"], [178, 180, 7, "enum_FIELD"], [190, 187, 7, "enum_FIELD"], [196, 198, 7, "enum_FIELD"], [208, 212, 7, "enum_FIELD"], [216, 221, 7, "enum_FIELD"], [235, 233, 7, "enum_FIELD"], [246, 244, 7, "enum_FIELD"], [252, 253, 7, "enum_FIELD"], [258, 260, 7, "enum_FIELD"], [270, 267, 7, "enum_FIELD"], [276, 278, 7, "enum_FIELD"], [290, 286, 7, "enum_FIELD"], [16, 15, 7, "enum_FIELD"], [21, 20, 7, "enum_FIELD"], [21, 22, 7, "enum_FIELD"], [30, 29, 7, "enum_FIELD"], [46, 45, 7, "enum_FIELD"], [57, 54, 7, "enum_FIELD"], [62, 69, 7, "enum_FIELD"], [79, 78, 7, "enum_FIELD"], [79, 80, 7, "enum_FIELD"], [87, 86, 7, "enum_FIELD"], [94, 93, 7, "enum_FIELD"], [107, 104, 7, "enum_FIELD"], [117, 111, 7, "enum_FIELD"], [131, 127, 7, "enum_FIELD"], [147, 146, 7, "enum_FIELD"], [152, 151, 7, "enum_FIELD"], [152, 153, 7, "enum_FIELD"], [164, 163, 7, "enum_FIELD"], [164, 165, 7, "enum_FIELD"], [180, 179, 7, "enum_FIELD"], [187, 186, 7, "enum_FIELD"], [198, 197, 7, "enum_FIELD"], [198, 199, 7, "enum_FIELD"], [212, 211, 7, "enum_FIELD"], [233, 232, 7, "enum_FIELD"], [236, 238, 7, "enum_FIELD"], [244, 243, 7, "enum_FIELD"], [260, 259, 7, "enum_FIELD"], [267, 266, 7, "enum_FIELD"], [278, 277, 7, "enum_FIELD"], [278, 279, 7, "enum_FIELD"], [286, 285, 7, "enum_FIELD"], [291, 292, 7, "enum_FIELD"], [294, 295, 7, "enum_FIELD"], [54, 53, 7, "enum_FIELD"], [69, 63, 7, "enum_FIELD"], [104, 103, 7, "enum_FIELD"], [114, 113, 7, "enum_FIELD"], [114, 115, 7, "enum_FIELD"], [127, 126, 7, "enum_FIELD"], [132, 133, 7, "enum_FIELD"], [135, 136, 7, "enum_FIELD"], [219, 218, 7, "enum_FIELD"], [223, 222, 7, "enum_FIELD"], [227, 226, 7, "enum_FIELD"], [66, 65, 7, "enum_FIELD"], [66, 67, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 11, 9, "enum_NEXT_SYNTAX"], [12, 5, 10, "enum_LAST_LEXICAL_USE"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [20, 17, 10, "enum_LAST_LEXICAL_USE"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [22, 12, 10, "enum_LAST_LEXICAL_USE"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [24, 20, 10, "enum_LAST_LEXICAL_USE"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [27, 22, 10, "enum_LAST_LEXICAL_USE"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [33, 27, 10, "enum_LAST_LEXICAL_USE"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [39, 33, 10, "enum_LAST_LEXICAL_USE"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [55, 39, 10, "enum_LAST_LEXICAL_USE"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [65, 55, 10, "enum_LAST_LEXICAL_USE"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 77, 9, "enum_NEXT_SYNTAX"], [78, 65, 10, "enum_LAST_LEXICAL_USE"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 83, 9, "enum_NEXT_SYNTAX"], [84, 78, 10, "enum_LAST_LEXICAL_USE"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [86, 29, 10, "enum_LAST_LEXICAL_USE"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [90, 84, 10, "enum_LAST_LEXICAL_USE"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [93, 86, 10, "enum_LAST_LEXICAL_USE"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [97, 90, 10, "enum_LAST_LEXICAL_USE"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [103, 53, 10, "enum_LAST_LEXICAL_USE"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [105, 97, 10, "enum_LAST_LEXICAL_USE"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [111, 63, 10, "enum_LAST_LEXICAL_USE"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [113, 105, 10, "enum_LAST_LEXICAL_USE"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [130, 2, 10, "enum_LAST_LEXICAL_USE"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [133, 113, 10, "enum_LAST_LEXICAL_USE"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 139, 9, "enum_NEXT_SYNTAX"], [140, 124, 10, "enum_LAST_LEXICAL_USE"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 142, 9, "enum_NEXT_SYNTAX"], [143, 133, 10, "enum_LAST_LEXICAL_USE"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [148, 24, 10, "enum_LAST_LEXICAL_USE"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [151, 148, 10, "enum_LAST_LEXICAL_USE"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [153, 143, 10, "enum_LAST_LEXICAL_USE"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [155, 151, 10, "enum_LAST_LEXICAL_USE"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [158, 153, 10, "enum_LAST_LEXICAL_USE"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [161, 155, 10, "enum_LAST_LEXICAL_USE"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [163, 161, 10, "enum_LAST_LEXICAL_USE"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [165, 158, 10, "enum_LAST_LEXICAL_USE"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [167, 163, 10, "enum_LAST_LEXICAL_USE"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [173, 165, 10, "enum_LAST_LEXICAL_USE"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [175, 178, 9, "enum_NEXT_SYNTAX"], [179, 45, 10, "enum_LAST_LEXICAL_USE"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 184, 9, "enum_NEXT_SYNTAX"], [184, 185, 9, "enum_NEXT_SYNTAX"], [186, 103, 10, "enum_LAST_LEXICAL_USE"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [188, 173, 10, "enum_LAST_LEXICAL_USE"], [187, 188, 9, "enum_NEXT_SYNTAX"], [188, 189, 9, "enum_NEXT_SYNTAX"], [189, 190, 9, "enum_NEXT_SYNTAX"], [190, 191, 9, "enum_NEXT_SYNTAX"], [191, 192, 9, "enum_NEXT_SYNTAX"], [192, 193, 9, "enum_NEXT_SYNTAX"], [193, 196, 9, "enum_NEXT_SYNTAX"], [197, 188, 10, "enum_LAST_LEXICAL_USE"], [196, 197, 9, "enum_NEXT_SYNTAX"], [197, 198, 9, "enum_NEXT_SYNTAX"], [198, 199, 9, "enum_NEXT_SYNTAX"], [199, 200, 9, "enum_NEXT_SYNTAX"], [200, 203, 9, "enum_NEXT_SYNTAX"], [203, 204, 9, "enum_NEXT_SYNTAX"], [204, 205, 9, "enum_NEXT_SYNTAX"], [205, 206, 9, "enum_NEXT_SYNTAX"], [206, 208, 9, "enum_NEXT_SYNTAX"], [209, 167, 10, "enum_LAST_LEXICAL_USE"], [208, 209, 9, "enum_NEXT_SYNTAX"], [209, 210, 9, "enum_NEXT_SYNTAX"], [210, 211, 9, "enum_NEXT_SYNTAX"], [211, 212, 9, "enum_NEXT_SYNTAX"], [213, 204, 10, "enum_LAST_LEXICAL_USE"], [212, 213, 9, "enum_NEXT_SYNTAX"], [213, 214, 9, "enum_NEXT_SYNTAX"], [214, 216, 9, "enum_NEXT_SYNTAX"], [216, 217, 9, "enum_NEXT_SYNTAX"], [218, 209, 10, "enum_LAST_LEXICAL_USE"], [217, 218, 9, "enum_NEXT_SYNTAX"], [218, 219, 9, "enum_NEXT_SYNTAX"], [219, 220, 9, "enum_NEXT_SYNTAX"], [220, 221, 9, "enum_NEXT_SYNTAX"], [222, 218, 10, "enum_LAST_LEXICAL_USE"], [221, 222, 9, "enum_NEXT_SYNTAX"], [222, 223, 9, "enum_NEXT_SYNTAX"], [223, 224, 9, "enum_NEXT_SYNTAX"], [224, 225, 9, "enum_NEXT_SYNTAX"], [226, 222, 10, "enum_LAST_LEXICAL_USE"], [225, 226, 9, "enum_NEXT_SYNTAX"], [226, 227, 9, "enum_NEXT_SYNTAX"], [227, 228, 9, "enum_NEXT_SYNTAX"], [228, 229, 9, "enum_NEXT_SYNTAX"], [229, 231, 9, "enum_NEXT_SYNTAX"], [232, 197, 10, "enum_LAST_LEXICAL_USE"], [231, 232, 9, "enum_NEXT_SYNTAX"], [232, 233, 9, "enum_NEXT_SYNTAX"], [233, 234, 9, "enum_NEXT_SYNTAX"], [234, 235, 9, "enum_NEXT_SYNTAX"], [235, 236, 9, "enum_NEXT_SYNTAX"], [236, 237, 9, "enum_NEXT_SYNTAX"], [237, 238, 9, "enum_NEXT_SYNTAX"], [238, 239, 9, "enum_NEXT_SYNTAX"], [239, 240, 9, "enum_NEXT_SYNTAX"], [241, 232, 10, "enum_LAST_LEXICAL_USE"], [240, 241, 9, "enum_NEXT_SYNTAX"], [241, 242, 9, "enum_NEXT_SYNTAX"], [243, 93, 10, "enum_LAST_LEXICAL_USE"], [242, 243, 9, "enum_NEXT_SYNTAX"], [243, 244, 9, "enum_NEXT_SYNTAX"], [244, 245, 9, "enum_NEXT_SYNTAX"], [245, 246, 9, "enum_NEXT_SYNTAX"], [247, 241, 10, "enum_LAST_LEXICAL_USE"], [246, 247, 9, "enum_NEXT_SYNTAX"], [247, 248, 9, "enum_NEXT_SYNTAX"], [248, 250, 9, "enum_NEXT_SYNTAX"], [250, 251, 9, "enum_NEXT_SYNTAX"], [251, 252, 9, "enum_NEXT_SYNTAX"], [253, 247, 10, "enum_LAST_LEXICAL_USE"], [252, 253, 9, "enum_NEXT_SYNTAX"], [253, 254, 9, "enum_NEXT_SYNTAX"], [254, 255, 9, "enum_NEXT_SYNTAX"], [255, 258, 9, "enum_NEXT_SYNTAX"], [259, 179, 10, "enum_LAST_LEXICAL_USE"], [258, 259, 9, "enum_NEXT_SYNTAX"], [259, 260, 9, "enum_NEXT_SYNTAX"], [260, 261, 9, "enum_NEXT_SYNTAX"], [261, 264, 9, "enum_NEXT_SYNTAX"], [264, 265, 9, "enum_NEXT_SYNTAX"], [266, 186, 10, "enum_LAST_LEXICAL_USE"], [265, 266, 9, "enum_NEXT_SYNTAX"], [266, 267, 9, "enum_NEXT_SYNTAX"], [268, 253, 10, "enum_LAST_LEXICAL_USE"], [267, 268, 9, "enum_NEXT_SYNTAX"], [268, 269, 9, "enum_NEXT_SYNTAX"], [269, 270, 9, "enum_NEXT_SYNTAX"], [270, 271, 9, "enum_NEXT_SYNTAX"], [271, 272, 9, "enum_NEXT_SYNTAX"], [272, 273, 9, "enum_NEXT_SYNTAX"], [273, 276, 9, "enum_NEXT_SYNTAX"], [277, 268, 10, "enum_LAST_LEXICAL_USE"], [276, 277, 9, "enum_NEXT_SYNTAX"], [277, 278, 9, "enum_NEXT_SYNTAX"], [278, 279, 9, "enum_NEXT_SYNTAX"], [279, 280, 9, "enum_NEXT_SYNTAX"], [280, 282, 9, "enum_NEXT_SYNTAX"], [283, 140, 10, "enum_LAST_LEXICAL_USE"], [282, 283, 9, "enum_NEXT_SYNTAX"], [283, 284, 9, "enum_NEXT_SYNTAX"], [285, 126, 10, "enum_LAST_LEXICAL_USE"], [284, 285, 9, "enum_NEXT_SYNTAX"], [285, 286, 9, "enum_NEXT_SYNTAX"], [286, 287, 9, "enum_NEXT_SYNTAX"], [287, 288, 9, "enum_NEXT_SYNTAX"], [289, 130, 10, "enum_LAST_LEXICAL_USE"], [288, 289, 9, "enum_NEXT_SYNTAX"], [289, 290, 9, "enum_NEXT_SYNTAX"], [290, 291, 9, "enum_NEXT_SYNTAX"], [292, 277, 10, "enum_LAST_LEXICAL_USE"], [291, 292, 9, "enum_NEXT_SYNTAX"], [292, 293, 9, "enum_NEXT_SYNTAX"], [293, 294, 9, "enum_NEXT_SYNTAX"], [295, 136, 10, "enum_LAST_LEXICAL_USE"], [294, 295, 9, "enum_NEXT_SYNTAX"], [295, 296, 9, "enum_NEXT_SYNTAX"], [296, 298, 9, "enum_NEXT_SYNTAX"], [299, 283, 10, "enum_LAST_LEXICAL_USE"], [298, 299, 9, "enum_NEXT_SYNTAX"], [4, 11, 1, "enum_CFG_NEXT"], [11, 26, 1, "enum_CFG_NEXT"], [26, 38, 1, "enum_CFG_NEXT"], [38, 60, 1, "enum_CFG_NEXT"], [38, 44, 1, "enum_CFG_NEXT"], [60, 77, 1, "enum_CFG_NEXT"], [60, 83, 1, "enum_CFG_NEXT"], [83, 92, 1, "enum_CFG_NEXT"], [92, 110, 1, "enum_CFG_NEXT"], [110, 142, 1, "enum_CFG_NEXT"], [110, 123, 1, "enum_CFG_NEXT"], [123, 139, 1, "enum_CFG_NEXT"], [142, 157, 1, "enum_CFG_NEXT"], [157, 172, 1, "enum_CFG_NEXT"], [172, 190, 1, "enum_CFG_NEXT"], [172, 178, 1, "enum_CFG_NEXT"], [190, 205, 1, "enum_CFG_NEXT"], [190, 196, 1, "enum_CFG_NEXT"], [205, 231, 1, "enum_CFG_NEXT"], [208, 216, 1, "enum_CFG_NEXT"], [231, 240, 1, "enum_CFG_NEXT"], [240, 252, 1, "enum_CFG_NEXT"], [252, 270, 1, "enum_CFG_NEXT"], [252, 258, 1, "enum_CFG_NEXT"], [270, 276, 1, "enum_CFG_NEXT"], [270, 282, 1, "enum_CFG_NEXT"], [282, 298, 1, "enum_CFG_NEXT"], [20, 17, 2, "enum_LAST_READ"], [22, 5, 3, "enum_LAST_WRITE"], [24, 17, 2, "enum_LAST_READ"], [24, 20, 3, "enum_LAST_WRITE"], [12, 22, 2, "enum_LAST_READ"], [12, 5, 3, "enum_LAST_WRITE"], [33, 22, 2, "enum_LAST_READ"], [33, 12, 3, "enum_LAST_WRITE"], [27, 33, 2, "enum_LAST_READ"], [27, 12, 3, "enum_LAST_WRITE"], [39, 33, 2, "enum_LAST_READ"], [39, 27, 3, "enum_LAST_WRITE"], [55, 39, 2, "enum_LAST_READ"], [55, 27, 3, "enum_LAST_WRITE"], [65, 55, 2, "enum_LAST_READ"], [65, 27, 3, "enum_LAST_WRITE"], [78, 65, 2, "enum_LAST_READ"], [78, 27, 3, "enum_LAST_WRITE"], [86, 29, 2, "enum_LAST_READ"], [90, 65, 2, "enum_LAST_READ"], [90, 27, 3, "enum_LAST_WRITE"], [84, 90, 2, "enum_LAST_READ"], [84, 27, 3, "enum_LAST_WRITE"], [93, 86, 2, "enum_LAST_READ"], [97, 90, 2, "enum_LAST_READ"], [97, 84, 3, "enum_LAST_WRITE"], [103, 53, 2, "enum_LAST_READ"], [105, 97, 2, "enum_LAST_READ"], [105, 84, 3, "enum_LAST_WRITE"], [111, 63, 2, "enum_LAST_READ"], [113, 105, 2, "enum_LAST_READ"], [113, 84, 3, "enum_LAST_WRITE"], [130, 2, 3, "enum_LAST_WRITE"], [133, 113, 2, "enum_LAST_READ"], [133, 84, 3, "enum_LAST_WRITE"], [140, 124, 3, "enum_LAST_WRITE"], [148, 24, 2, "enum_LAST_READ"], [148, 20, 3, "enum_LAST_WRITE"], [151, 148, 2, "enum_LAST_READ"], [151, 20, 3, "enum_LAST_WRITE"], [153, 113, 2, "enum_LAST_READ"], [153, 84, 3, "enum_LAST_WRITE"], [155, 148, 2, "enum_LAST_READ"], [155, 151, 3, "enum_LAST_WRITE"], [143, 153, 2, "enum_LAST_READ"], [143, 84, 3, "enum_LAST_WRITE"], [161, 155, 2, "enum_LAST_READ"], [161, 151, 3, "enum_LAST_WRITE"], [163, 161, 2, "enum_LAST_READ"], [163, 151, 3, "enum_LAST_WRITE"], [165, 153, 2, "enum_LAST_READ"], [165, 143, 3, "enum_LAST_WRITE"], [167, 161, 2, "enum_LAST_READ"], [167, 163, 3, "enum_LAST_WRITE"], [158, 165, 2, "enum_LAST_READ"], [158, 143, 3, "enum_LAST_WRITE"], [173, 165, 2, "enum_LAST_READ"], [173, 158, 3, "enum_LAST_WRITE"], [186, 103, 2, "enum_LAST_READ"], [188, 173, 2, "enum_LAST_READ"], [188, 158, 3, "enum_LAST_WRITE"], [197, 188, 2, "enum_LAST_READ"], [197, 158, 3, "enum_LAST_WRITE"], [213, 204, 3, "enum_LAST_WRITE"], [218, 209, 3, "enum_LAST_WRITE"], [222, 218, 2, "enum_LAST_READ"], [222, 209, 3, "enum_LAST_WRITE"], [226, 222, 2, "enum_LAST_READ"], [226, 209, 3, "enum_LAST_WRITE"], [232, 188, 2, "enum_LAST_READ"], [232, 158, 3, "enum_LAST_WRITE"], [238, 205, 3, "enum_LAST_WRITE"], [243, 93, 2, "enum_LAST_READ"], [247, 232, 2, "enum_LAST_READ"], [247, 158, 3, "enum_LAST_WRITE"], [241, 247, 2, "enum_LAST_READ"], [241, 158, 3, "enum_LAST_WRITE"], [253, 247, 2, "enum_LAST_READ"], [253, 241, 3, "enum_LAST_WRITE"], [266, 186, 2, "enum_LAST_READ"], [268, 253, 2, "enum_LAST_READ"], [268, 241, 3, "enum_LAST_WRITE"], [277, 268, 2, "enum_LAST_READ"], [277, 241, 3, "enum_LAST_WRITE"], [289, 2, 3, "enum_LAST_WRITE"], [292, 268, 2, "enum_LAST_READ"], [292, 241, 3, "enum_LAST_WRITE"], [299, 283, 3, "enum_LAST_WRITE"], [12, 15, 4, "enum_COMPUTED_FROM"], [12, 17, 4, "enum_COMPUTED_FROM"], [12, 20, 4, "enum_COMPUTED_FROM"], [12, 22, 4, "enum_COMPUTED_FROM"], [12, 24, 4, "enum_COMPUTED_FROM"], [27, 33, 4, "enum_COMPUTED_FROM"], [27, 29, 4, "enum_COMPUTED_FROM"], [84, 90, 4, "enum_COMPUTED_FROM"], [84, 86, 4, "enum_COMPUTED_FROM"], [143, 146, 4, "enum_COMPUTED_FROM"], [143, 148, 4, "enum_COMPUTED_FROM"], [143, 151, 4, "enum_COMPUTED_FROM"], [143, 153, 4, "enum_COMPUTED_FROM"], [143, 155, 4, "enum_COMPUTED_FROM"], [158, 161, 4, "enum_COMPUTED_FROM"], [158, 163, 4, "enum_COMPUTED_FROM"], [158, 165, 4, "enum_COMPUTED_FROM"], [158, 167, 4, "enum_COMPUTED_FROM"], [241, 247, 4, "enum_COMPUTED_FROM"], [241, 243, 4, "enum_COMPUTED_FROM"], [283, 289, 4, "enum_COMPUTED_FROM"], [283, 285, 4, "enum_COMPUTED_FROM"], [283, 292, 4, "enum_COMPUTED_FROM"], [283, 295, 4, "enum_COMPUTED_FROM"], [124, 130, 4, "enum_COMPUTED_FROM"], [124, 126, 4, "enum_COMPUTED_FROM"], [124, 133, 4, "enum_COMPUTED_FROM"], [124, 136, 4, "enum_COMPUTED_FROM"], [209, 211, 4, "enum_COMPUTED_FROM"], [209, 213, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "sympy", "repo": "sympy", "path": "sympy/tensor/tensor.py", "id": 54502, "has_bug": false, "code_full": "from typing import Any, Callable, List, Tuple\n\nfrom sympy import Basic, S, sympify\n\n\nclass TensExpr:\n    pass\n\n\nclass TensMul(TensExpr):\n    pass\n\n\ndef canon_bp(expr: TensExpr) -> TensExpr:\n    return expr\n\n\ndef get_tids(expr: TensExpr) -> Any:\n    pass\n\nclass TensAdd(TensExpr):\n    @staticmethod\n    def _tensAdd_flatten(args: List[TensExpr]) -> List[TensExpr]:\n        return []\n\n    @staticmethod\n    def _tensAdd_check_automatrix(args: List[TensExpr]) -> List[TensExpr]:\n        return []\n    \n    @staticmethod\n    def _tensAdd_check(args: List[TensExpr]) -> None:\n        pass\n\n    @staticmethod\n    def _tensAdd_collect_terms(args: List[TensExpr]) -> List[TensExpr]:\n        return []\n    \n    def __new__(cls, *args, **kw_args) -> Any:\n        args: List = [sympify(x) for x in args if x]\n        args: List[TensExpr] = TensAdd._tensAdd_flatten(args)\n\n        if not args:\n            return S.Zero\n\n        if len(args) == 1 and not isinstance(args[0], TensExpr):\n            return args[0]\n\n        # replace auto-matrix indices so that they are the same in all addends\n        args: List[TensExpr] = TensAdd._tensAdd_check_automatrix(args)\n\n        # now check that all addends have the same indices:\n        TensAdd._tensAdd_check(args)\n\n        # if TensAdd has only 1 TensMul element in its `args`:\n        if len(args) == 1 and isinstance(args[0], TensMul):\n            obj: Basic = Basic.__new__(cls, *args, **kw_args)\n            return obj\n\n        # TODO: do not or do canonicalize by default?\n        # Technically, one may wish to have additions of non-canonicalized\n        # tensors. This feature should be removed in the future.\n        # Unfortunately this would require to rewrite a lot of tests.\n        # canonicalize all TensMul\n        args = [canon_bp(x) for x in args if x]\n        args = [x for x in args if x]\n\n        # if there are no more args (i.e. have cancelled out),\n        # just return zero:\n        if not args:\n            return S.Zero\n\n        if len(args) == 1:\n            return args[0]\n\n        # collect canonicalized terms\n        def sort_key(t):\n            x = get_tids(t)\n            return (x.components, x.free, x.dum)\n        args.sort(key=sort_key)\n        args = TensAdd._tensAdd_collect_terms(args)\n        if not args:\n            return S.Zero\n        # it there is only a component tensor return it\n        if len(args) == 1:\n            return args[0]\n\n        obj: Basic = Basic.__new__(cls, *args, **kw_args)\n        return obj\n", "code": "def __new__(cls, *args, **kw_args) -> Any:\n    args: List = [sympify(x) for x in args if x]\n    args: List[TensExpr] = TensAdd._tensAdd_flatten(args)\n\n    if not args:\n        return S.Zero\n\n    if len(args) == 1 and not isinstance(args[0], TensExpr):\n        return args[0]\n\n    # replace auto-matrix indices so that they are the same in all addends\n    args: List[TensExpr] = TensAdd._tensAdd_check_automatrix(args)\n\n    # now check that all addends have the same indices:\n    TensAdd._tensAdd_check(args)\n\n    # if TensAdd has only 1 TensMul element in its `args`:\n    if len(args) == 1 and isinstance(args[0], TensMul):\n        obj: Basic = Basic.__new__(cls, *args, **kw_args)\n        return obj\n\n    # TODO: do not or do canonicalize by default?\n    # Technically, one may wish to have additions of non-canonicalized\n    # tensors. This feature should be removed in the future.\n    # Unfortunately this would require to rewrite a lot of tests.\n    # canonicalize all TensMul\n    args = [canon_bp(x) for x in args if x]\n    args = [x for x in args if x]\n\n    # if there are no more args (i.e. have cancelled out),\n    # just return zero:\n    if not args:\n        return S.Zero\n\n    if len(args) == 1:\n        return args[0]\n\n    # collect canonicalized terms\n    def sort_key(t):\n        x = get_tids(t)\n        return (x.components, x.free, x.dum)\n    args.sort(key=sort_key)\n    args = TensAdd._tensAdd_collect_terms(args)\n    if not args:\n        return S.Zero\n    # it there is only a component tensor return it\n    if len(args) == 1:\n        return args[0]\n\n    obj: Basic = Basic.__new__(cls, *args, **kw_args)\n    return obj\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "25ea11a953ec1a83e73b58d43a1d5f4026e006bc"}
{"source_tokens": ["#NEWLINE#", "@", "jit", "#NEWLINE#", "def avg(", "x", ",", "y", ",", "z", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n  Return the average of three scalars or arrays\\n  (gets optimized into single traversal)\\n  '", "#NEWLINE#", "return", "(", "(", "(", "x", "+", "y", ")", "+", "z", ")", "/", "3.0", ")"], "edges": [[1, 6, 7, "enum_FIELD"], [13, 14, 7, "enum_FIELD"], [16, 27, 7, "enum_FIELD"], [27, 24, 7, "enum_FIELD"], [27, 28, 7, "enum_FIELD"], [24, 21, 7, "enum_FIELD"], [24, 25, 7, "enum_FIELD"], [21, 20, 7, "enum_FIELD"], [21, 22, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [20, 5, 10, "enum_LAST_LEXICAL_USE"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [22, 7, 10, "enum_LAST_LEXICAL_USE"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [25, 9, 10, "enum_LAST_LEXICAL_USE"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [2, 1, 1, "enum_CFG_NEXT"], [6, 13, 1, "enum_CFG_NEXT"], [13, 16, 1, "enum_CFG_NEXT"], [20, 5, 3, "enum_LAST_WRITE"], [22, 7, 3, "enum_LAST_WRITE"], [25, 9, 3, "enum_LAST_WRITE"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "iskandr", "repo": "parakeet", "path": "examples/simple_avg.py", "id": 21339, "has_bug": false, "code_full": "def avg(x: float,y: float,z: float) -> float:\n  \"\"\"\n  Return the average of three scalars or arrays\n  (gets optimized into single traversal)\n  \"\"\"\n  return (x + y + z) / 3.0\n", "code": "def avg(x: float,y: float,z: float) -> float:\n  \"\"\"\n  Return the average of three scalars or arrays\n  (gets optimized into single traversal)\n  \"\"\"\n  return (x + y + z) / 3.0\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "844e01df1b00fb5b1f46780de088c2eacf5cf7f2"}
{"source_tokens": ["#NEWLINE#", "def prep(", "r", ")", ":", "#NEWLINE#", "#INDENT#", "if", "r", ".", "interactive", ":", "#NEWLINE#", "#INDENT#", "if", "(", "r", ".", "method", "in", "(", "'create'", ",", "'update'", ")", ")", ":", "#NEWLINE#", "#INDENT#", "table", "=", "r", ".", "table", "#NEWLINE#", "if", "(", "r", ".", "method", "==", "'create'", ")", ":", "#NEWLINE#", "#INDENT#", "field", "=", "table", ".", "location_id", "#NEWLINE#", "field", ".", "readable", "=", "field", ".", "writable", "=", "True", "#NEWLINE#", "#UNINDENT#", "get_vars", "=", "r", ".", "get_vars", "#NEWLINE#", "incident_id", "=", "get_vars", ".", "get", "(", "'~.(incident)'", ")", "#NEWLINE#", "if", "incident_id", ":", "#NEWLINE#", "#INDENT#", "field", "=", "table", ".", "incident_id", "#NEWLINE#", "field", ".", "default", "=", "incident_id", "#NEWLINE#", "field", ".", "readable", "=", "field", ".", "writable", "=", "False", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "return", "True"], "edges": [[7, 9, 7, "enum_FIELD"], [108, 109, 7, "enum_FIELD"], [9, 8, 7, "enum_FIELD"], [14, 19, 7, "enum_FIELD"], [19, 17, 7, "enum_FIELD"], [28, 32, 7, "enum_FIELD"], [35, 40, 7, "enum_FIELD"], [62, 66, 7, "enum_FIELD"], [68, 74, 7, "enum_FIELD"], [78, 79, 7, "enum_FIELD"], [17, 16, 7, "enum_FIELD"], [32, 31, 7, "enum_FIELD"], [40, 38, 7, "enum_FIELD"], [45, 49, 7, "enum_FIELD"], [55, 60, 7, "enum_FIELD"], [66, 65, 7, "enum_FIELD"], [74, 72, 7, "enum_FIELD"], [82, 86, 7, "enum_FIELD"], [88, 93, 7, "enum_FIELD"], [98, 103, 7, "enum_FIELD"], [38, 37, 7, "enum_FIELD"], [49, 48, 7, "enum_FIELD"], [53, 52, 7, "enum_FIELD"], [57, 56, 7, "enum_FIELD"], [72, 71, 7, "enum_FIELD"], [86, 85, 7, "enum_FIELD"], [90, 89, 7, "enum_FIELD"], [96, 95, 7, "enum_FIELD"], [100, 99, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 7, 9, "enum_NEXT_SYNTAX"], [8, 2, 10, "enum_LAST_LEXICAL_USE"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [16, 8, 10, "enum_LAST_LEXICAL_USE"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [31, 16, 10, "enum_LAST_LEXICAL_USE"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [37, 31, 10, "enum_LAST_LEXICAL_USE"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [48, 29, 10, "enum_LAST_LEXICAL_USE"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [52, 46, 10, "enum_LAST_LEXICAL_USE"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [56, 52, 10, "enum_LAST_LEXICAL_USE"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [65, 37, 10, "enum_LAST_LEXICAL_USE"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [71, 63, 10, "enum_LAST_LEXICAL_USE"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 78, 9, "enum_NEXT_SYNTAX"], [79, 69, 10, "enum_LAST_LEXICAL_USE"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 82, 9, "enum_NEXT_SYNTAX"], [83, 56, 10, "enum_LAST_LEXICAL_USE"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [85, 48, 10, "enum_LAST_LEXICAL_USE"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [89, 83, 10, "enum_LAST_LEXICAL_USE"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [93, 79, 10, "enum_LAST_LEXICAL_USE"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [95, 89, 10, "enum_LAST_LEXICAL_USE"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [99, 95, 10, "enum_LAST_LEXICAL_USE"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [9, 19, 1, "enum_CFG_NEXT"], [9, 108, 1, "enum_CFG_NEXT"], [19, 108, 1, "enum_CFG_NEXT"], [19, 28, 1, "enum_CFG_NEXT"], [28, 40, 1, "enum_CFG_NEXT"], [40, 62, 1, "enum_CFG_NEXT"], [40, 45, 1, "enum_CFG_NEXT"], [45, 55, 1, "enum_CFG_NEXT"], [55, 62, 1, "enum_CFG_NEXT"], [62, 68, 1, "enum_CFG_NEXT"], [68, 79, 1, "enum_CFG_NEXT"], [79, 108, 1, "enum_CFG_NEXT"], [79, 82, 1, "enum_CFG_NEXT"], [82, 88, 1, "enum_CFG_NEXT"], [88, 98, 1, "enum_CFG_NEXT"], [98, 108, 1, "enum_CFG_NEXT"], [8, 2, 3, "enum_LAST_WRITE"], [16, 8, 2, "enum_LAST_READ"], [16, 2, 3, "enum_LAST_WRITE"], [31, 16, 2, "enum_LAST_READ"], [31, 2, 3, "enum_LAST_WRITE"], [37, 31, 2, "enum_LAST_READ"], [37, 2, 3, "enum_LAST_WRITE"], [48, 29, 3, "enum_LAST_WRITE"], [52, 46, 3, "enum_LAST_WRITE"], [56, 52, 2, "enum_LAST_READ"], [56, 46, 3, "enum_LAST_WRITE"], [65, 37, 2, "enum_LAST_READ"], [65, 2, 3, "enum_LAST_WRITE"], [71, 63, 3, "enum_LAST_WRITE"], [79, 69, 3, "enum_LAST_WRITE"], [85, 48, 2, "enum_LAST_READ"], [85, 29, 3, "enum_LAST_WRITE"], [83, 56, 2, "enum_LAST_READ"], [83, 46, 3, "enum_LAST_WRITE"], [93, 79, 2, "enum_LAST_READ"], [93, 69, 3, "enum_LAST_WRITE"], [89, 56, 2, "enum_LAST_READ"], [89, 83, 3, "enum_LAST_WRITE"], [95, 89, 2, "enum_LAST_READ"], [95, 83, 3, "enum_LAST_WRITE"], [99, 95, 2, "enum_LAST_READ"], [99, 83, 3, "enum_LAST_WRITE"], [29, 31, 4, "enum_COMPUTED_FROM"], [63, 65, 4, "enum_COMPUTED_FROM"], [69, 71, 4, "enum_COMPUTED_FROM"], [46, 48, 4, "enum_COMPUTED_FROM"], [83, 85, 4, "enum_COMPUTED_FROM"], [90, 93, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "sahana", "repo": "eden", "path": "controllers/event.py", "id": 46224, "has_bug": false, "code_full": "\nfrom typing import Any, Dict, Optional\n\n\nclass Table:\n    location_id: Any\n    incident_id: Any\n\nclass Request:\n    interactive: bool\n    method: str\n    table: Table\n    get_vars: Dict[str, Any]\n\ndef prep(r: Request) -> bool:\n    if r.interactive:\n        if r.method in (\"create\", \"update\"):\n            table: Table = r.table\n            if r.method == \"create\":\n                # Enable Location field\n                field: Any = table.location_id\n                field.readable = field.writable = True\n\n            get_vars = r.get_vars\n            # Context from a Profile page?\"\n            #location_id = get_vars.get(\"(location)\")\n            #if location_id:\n            #    field = table.location_id\n            #    field.default = location_id\n            #    field.readable = field.writable = False\n            incident_id: Optional[Any] = get_vars.get(\"~.(incident)\")\n            if incident_id:\n                field = table.incident_id\n                field.default = incident_id\n                field.readable = field.writable = False\n    return True\n", "code": "def prep(r: Request) -> bool:\n    if r.interactive:\n        if r.method in (\"create\", \"update\"):\n            table: Table = r.table\n            if r.method == \"create\":\n                # Enable Location field\n                field: Any = table.location_id\n                field.readable = field.writable = True\n\n            get_vars = r.get_vars\n            # Context from a Profile page?\"\n            #location_id = get_vars.get(\"(location)\")\n            #if location_id:\n            #    field = table.location_id\n            #    field.default = location_id\n            #    field.readable = field.writable = False\n            incident_id: Optional[Any] = get_vars.get(\"~.(incident)\")\n            if incident_id:\n                field = table.incident_id\n                field.default = incident_id\n                field.readable = field.writable = False\n    return True\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "3890dff869eba446cc1aac4cdbd8bd44df1af297"}
{"source_tokens": ["#NEWLINE#", "def create_access_args(", "current_actor_id", "=", "None", ",", "superuser_actor_ids", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "\"Returns a dict that can be provided to resource registry and datastore find operations to indicate\\n    the caller's and\\n    \"", "#NEWLINE#", "access_args", "=", "dict", "(", "current_actor_id", "=", "current_actor_id", ",", "superuser_actor_ids", "=", "superuser_actor_ids", ")", "#NEWLINE#", "return", "access_args"], "edges": [[1, 5, 7, "enum_FIELD"], [12, 13, 7, "enum_FIELD"], [14, 22, 7, "enum_FIELD"], [28, 29, 7, "enum_FIELD"], [22, 17, 7, "enum_FIELD"], [19, 21, 7, "enum_FIELD"], [23, 25, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [21, 2, 10, "enum_LAST_LEXICAL_USE"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [25, 6, 10, "enum_LAST_LEXICAL_USE"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 28, 9, "enum_NEXT_SYNTAX"], [29, 15, 10, "enum_LAST_LEXICAL_USE"], [28, 29, 9, "enum_NEXT_SYNTAX"], [4, 8, 1, "enum_CFG_NEXT"], [8, 1, 1, "enum_CFG_NEXT"], [5, 12, 1, "enum_CFG_NEXT"], [12, 14, 1, "enum_CFG_NEXT"], [14, 28, 1, "enum_CFG_NEXT"], [21, 2, 3, "enum_LAST_WRITE"], [25, 6, 3, "enum_LAST_WRITE"], [29, 15, 3, "enum_LAST_WRITE"], [15, 17, 4, "enum_COMPUTED_FROM"], [15, 21, 4, "enum_COMPUTED_FROM"], [15, 25, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "ooici", "repo": "pyon", "path": "pyon/ion/resource.py", "id": 31830, "has_bug": false, "code_full": "from typing import Any, Dict, List, Optional\n\n\ndef create_access_args(current_actor_id: Optional[str]=None, superuser_actor_ids: Optional[List[str]]=None) -> Dict[str, Any]:\n    \"\"\"Returns a dict that can be provided to resource registry and datastore find operations to indicate\n    the caller's and\n    \"\"\"\n    access_args: Dict[str, Any] = dict(current_actor_id=current_actor_id,\n                       superuser_actor_ids=superuser_actor_ids)\n    return access_args\n", "code": "def create_access_args(current_actor_id: Optional[str]=None, superuser_actor_ids: Optional[List[str]]=None) -> Dict[str, Any]:\n    \"\"\"Returns a dict that can be provided to resource registry and datastore find operations to indicate\n    the caller's and\n    \"\"\"\n    access_args: Dict[str, Any] = dict(current_actor_id=current_actor_id,\n                       superuser_actor_ids=superuser_actor_ids)\n    return access_args\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "e5eefa84961ad2c9df2b91adc4c9355635b89b06"}
{"source_tokens": ["#NEWLINE#", "def _process_png(", "self", ",", "data", ")", ":", "#NEWLINE#", "#INDENT#", "offset", "=", "8", "#NEWLINE#", "data_length", "=", "len", "(", "data", ")", "#NEWLINE#", "end_marker", "=", "False", "#NEWLINE#", "width", "=", "0", "#NEWLINE#", "height", "=", "0", "#NEWLINE#", "x_dpi", "=", "96", "#NEWLINE#", "y_dpi", "=", "96", "#NEWLINE#", "marker_ihdr", "=", "1229472850", "#NEWLINE#", "marker_phys", "=", "1883789683", "#NEWLINE#", "marker_iend", "=", "1229278788", "#NEWLINE#", "while", "(", "(", "not", "end_marker", ")", "and", "(", "offset", "<", "data_length", ")", ")", ":", "#NEWLINE#", "#INDENT#", "length", "=", "unpack", "(", "'>I'", ",", "data", "[", "(", "offset", "+", "0", ")", ":", "(", "offset", "+", "4", ")", "]", ")", "[", "0", "]", "#NEWLINE#", "marker", "=", "unpack", "(", "'>I'", ",", "data", "[", "(", "offset", "+", "4", ")", ":", "(", "offset", "+", "8", ")", "]", ")", "[", "0", "]", "#NEWLINE#", "if", "(", "marker", "==", "marker_ihdr", ")", ":", "#NEWLINE#", "#INDENT#", "width", "=", "unpack", "(", "'>I'", ",", "data", "[", "(", "offset", "+", "8", ")", ":", "(", "offset", "+", "12", ")", "]", ")", "[", "0", "]", "#NEWLINE#", "height", "=", "unpack", "(", "'>I'", ",", "data", "[", "(", "offset", "+", "12", ")", ":", "(", "offset", "+", "16", ")", "]", ")", "[", "0", "]", "#NEWLINE#", "#UNINDENT#", "if", "(", "marker", "==", "marker_phys", ")", ":", "#NEWLINE#", "#INDENT#", "x_density", "=", "unpack", "(", "'>I'", ",", "data", "[", "(", "offset", "+", "8", ")", ":", "(", "offset", "+", "12", ")", "]", ")", "[", "0", "]", "#NEWLINE#", "y_density", "=", "unpack", "(", "'>I'", ",", "data", "[", "(", "offset", "+", "12", ")", ":", "(", "offset", "+", "16", ")", "]", ")", "[", "0", "]", "#NEWLINE#", "units", "=", "unpack", "(", "'b'", ",", "data", "[", "(", "offset", "+", "16", ")", ":", "(", "offset", "+", "17", ")", "]", ")", "[", "0", "]", "#NEWLINE#", "if", "(", "units", "==", "1", ")", ":", "#NEWLINE#", "#INDENT#", "x_dpi", "=", "(", "x_density", "*", "0.0254", ")", "#NEWLINE#", "y_dpi", "=", "(", "y_density", "*", "0.0254", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "if", "(", "marker", "==", "marker_iend", ")", ":", "#NEWLINE#", "#INDENT#", "end_marker", "=", "True", "#NEWLINE#", "continue", "#NEWLINE#", "#UNINDENT#", "offset", "=", "(", "(", "offset", "+", "length", ")", "+", "12", ")", "#NEWLINE#", "#UNINDENT#", "return", "(", "'png'", ",", "width", ",", "height", ",", "x_dpi", ",", "y_dpi", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [8, 11, 7, "enum_FIELD"], [12, 16, 7, "enum_FIELD"], [19, 22, 7, "enum_FIELD"], [23, 26, 7, "enum_FIELD"], [27, 30, 7, "enum_FIELD"], [31, 34, 7, "enum_FIELD"], [35, 38, 7, "enum_FIELD"], [39, 42, 7, "enum_FIELD"], [43, 46, 7, "enum_FIELD"], [47, 50, 7, "enum_FIELD"], [52, 58, 7, "enum_FIELD"], [318, 323, 7, "enum_FIELD"], [16, 15, 7, "enum_FIELD"], [67, 89, 7, "enum_FIELD"], [92, 114, 7, "enum_FIELD"], [118, 121, 7, "enum_FIELD"], [178, 181, 7, "enum_FIELD"], [289, 292, 7, "enum_FIELD"], [304, 313, 7, "enum_FIELD"], [55, 56, 7, "enum_FIELD"], [61, 60, 7, "enum_FIELD"], [89, 73, 7, "enum_FIELD"], [89, 90, 7, "enum_FIELD"], [114, 98, 7, "enum_FIELD"], [114, 115, 7, "enum_FIELD"], [121, 120, 7, "enum_FIELD"], [126, 148, 7, "enum_FIELD"], [151, 173, 7, "enum_FIELD"], [181, 180, 7, "enum_FIELD"], [186, 208, 7, "enum_FIELD"], [211, 233, 7, "enum_FIELD"], [236, 258, 7, "enum_FIELD"], [262, 265, 7, "enum_FIELD"], [292, 291, 7, "enum_FIELD"], [297, 300, 7, "enum_FIELD"], [313, 310, 7, "enum_FIELD"], [313, 314, 7, "enum_FIELD"], [73, 70, 7, "enum_FIELD"], [98, 95, 7, "enum_FIELD"], [148, 132, 7, "enum_FIELD"], [148, 149, 7, "enum_FIELD"], [173, 157, 7, "enum_FIELD"], [173, 174, 7, "enum_FIELD"], [208, 192, 7, "enum_FIELD"], [208, 209, 7, "enum_FIELD"], [233, 217, 7, "enum_FIELD"], [233, 234, 7, "enum_FIELD"], [258, 242, 7, "enum_FIELD"], [258, 259, 7, "enum_FIELD"], [265, 264, 7, "enum_FIELD"], [270, 275, 7, "enum_FIELD"], [278, 283, 7, "enum_FIELD"], [310, 309, 7, "enum_FIELD"], [310, 311, 7, "enum_FIELD"], [75, 74, 7, "enum_FIELD"], [75, 81, 7, "enum_FIELD"], [100, 99, 7, "enum_FIELD"], [100, 106, 7, "enum_FIELD"], [132, 129, 7, "enum_FIELD"], [157, 154, 7, "enum_FIELD"], [192, 189, 7, "enum_FIELD"], [217, 214, 7, "enum_FIELD"], [242, 239, 7, "enum_FIELD"], [275, 274, 7, "enum_FIELD"], [275, 276, 7, "enum_FIELD"], [283, 282, 7, "enum_FIELD"], [283, 284, 7, "enum_FIELD"], [81, 78, 7, "enum_FIELD"], [81, 84, 7, "enum_FIELD"], [106, 103, 7, "enum_FIELD"], [106, 109, 7, "enum_FIELD"], [134, 133, 7, "enum_FIELD"], [134, 140, 7, "enum_FIELD"], [159, 158, 7, "enum_FIELD"], [159, 165, 7, "enum_FIELD"], [194, 193, 7, "enum_FIELD"], [194, 200, 7, "enum_FIELD"], [219, 218, 7, "enum_FIELD"], [219, 225, 7, "enum_FIELD"], [244, 243, 7, "enum_FIELD"], [244, 250, 7, "enum_FIELD"], [78, 77, 7, "enum_FIELD"], [78, 79, 7, "enum_FIELD"], [84, 83, 7, "enum_FIELD"], [84, 85, 7, "enum_FIELD"], [103, 102, 7, "enum_FIELD"], [103, 104, 7, "enum_FIELD"], [109, 108, 7, "enum_FIELD"], [109, 110, 7, "enum_FIELD"], [140, 137, 7, "enum_FIELD"], [140, 143, 7, "enum_FIELD"], [165, 162, 7, "enum_FIELD"], [165, 168, 7, "enum_FIELD"], [200, 197, 7, "enum_FIELD"], [200, 203, 7, "enum_FIELD"], [225, 222, 7, "enum_FIELD"], [225, 228, 7, "enum_FIELD"], [250, 247, 7, "enum_FIELD"], [250, 253, 7, "enum_FIELD"], [137, 136, 7, "enum_FIELD"], [137, 138, 7, "enum_FIELD"], [143, 142, 7, "enum_FIELD"], [143, 144, 7, "enum_FIELD"], [162, 161, 7, "enum_FIELD"], [162, 163, 7, "enum_FIELD"], [168, 167, 7, "enum_FIELD"], [168, 169, 7, "enum_FIELD"], [197, 196, 7, "enum_FIELD"], [197, 198, 7, "enum_FIELD"], [203, 202, 7, "enum_FIELD"], [203, 204, 7, "enum_FIELD"], [222, 221, 7, "enum_FIELD"], [222, 223, 7, "enum_FIELD"], [228, 227, 7, "enum_FIELD"], [228, 229, 7, "enum_FIELD"], [247, 246, 7, "enum_FIELD"], [247, 248, 7, "enum_FIELD"], [253, 252, 7, "enum_FIELD"], [253, 254, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [17, 4, 10, "enum_LAST_LEXICAL_USE"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [56, 20, 10, "enum_LAST_LEXICAL_USE"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [60, 9, 10, "enum_LAST_LEXICAL_USE"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [62, 13, 10, "enum_LAST_LEXICAL_USE"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [74, 17, 10, "enum_LAST_LEXICAL_USE"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [77, 60, 10, "enum_LAST_LEXICAL_USE"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [83, 77, 10, "enum_LAST_LEXICAL_USE"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [95, 70, 10, "enum_LAST_LEXICAL_USE"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [99, 74, 10, "enum_LAST_LEXICAL_USE"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [102, 83, 10, "enum_LAST_LEXICAL_USE"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [108, 102, 10, "enum_LAST_LEXICAL_USE"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [120, 93, 10, "enum_LAST_LEXICAL_USE"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [122, 40, 10, "enum_LAST_LEXICAL_USE"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 126, 9, "enum_NEXT_SYNTAX"], [127, 24, 10, "enum_LAST_LEXICAL_USE"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [129, 95, 10, "enum_LAST_LEXICAL_USE"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [133, 99, 10, "enum_LAST_LEXICAL_USE"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [136, 108, 10, "enum_LAST_LEXICAL_USE"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [142, 136, 10, "enum_LAST_LEXICAL_USE"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [152, 28, 10, "enum_LAST_LEXICAL_USE"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [154, 129, 10, "enum_LAST_LEXICAL_USE"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [158, 133, 10, "enum_LAST_LEXICAL_USE"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [161, 142, 10, "enum_LAST_LEXICAL_USE"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [167, 161, 10, "enum_LAST_LEXICAL_USE"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [175, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [180, 120, 10, "enum_LAST_LEXICAL_USE"], [179, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [182, 44, 10, "enum_LAST_LEXICAL_USE"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 184, 9, "enum_NEXT_SYNTAX"], [184, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [187, 188, 9, "enum_NEXT_SYNTAX"], [189, 154, 10, "enum_LAST_LEXICAL_USE"], [188, 189, 9, "enum_NEXT_SYNTAX"], [189, 190, 9, "enum_NEXT_SYNTAX"], [190, 191, 9, "enum_NEXT_SYNTAX"], [191, 192, 9, "enum_NEXT_SYNTAX"], [193, 158, 10, "enum_LAST_LEXICAL_USE"], [192, 193, 9, "enum_NEXT_SYNTAX"], [193, 194, 9, "enum_NEXT_SYNTAX"], [194, 195, 9, "enum_NEXT_SYNTAX"], [196, 167, 10, "enum_LAST_LEXICAL_USE"], [195, 196, 9, "enum_NEXT_SYNTAX"], [196, 197, 9, "enum_NEXT_SYNTAX"], [197, 198, 9, "enum_NEXT_SYNTAX"], [198, 199, 9, "enum_NEXT_SYNTAX"], [199, 200, 9, "enum_NEXT_SYNTAX"], [200, 201, 9, "enum_NEXT_SYNTAX"], [202, 196, 10, "enum_LAST_LEXICAL_USE"], [201, 202, 9, "enum_NEXT_SYNTAX"], [202, 203, 9, "enum_NEXT_SYNTAX"], [203, 204, 9, "enum_NEXT_SYNTAX"], [204, 205, 9, "enum_NEXT_SYNTAX"], [205, 206, 9, "enum_NEXT_SYNTAX"], [206, 207, 9, "enum_NEXT_SYNTAX"], [207, 208, 9, "enum_NEXT_SYNTAX"], [208, 209, 9, "enum_NEXT_SYNTAX"], [209, 210, 9, "enum_NEXT_SYNTAX"], [210, 211, 9, "enum_NEXT_SYNTAX"], [211, 212, 9, "enum_NEXT_SYNTAX"], [212, 213, 9, "enum_NEXT_SYNTAX"], [214, 189, 10, "enum_LAST_LEXICAL_USE"], [213, 214, 9, "enum_NEXT_SYNTAX"], [214, 215, 9, "enum_NEXT_SYNTAX"], [215, 216, 9, "enum_NEXT_SYNTAX"], [216, 217, 9, "enum_NEXT_SYNTAX"], [218, 193, 10, "enum_LAST_LEXICAL_USE"], [217, 218, 9, "enum_NEXT_SYNTAX"], [218, 219, 9, "enum_NEXT_SYNTAX"], [219, 220, 9, "enum_NEXT_SYNTAX"], [221, 202, 10, "enum_LAST_LEXICAL_USE"], [220, 221, 9, "enum_NEXT_SYNTAX"], [221, 222, 9, "enum_NEXT_SYNTAX"], [222, 223, 9, "enum_NEXT_SYNTAX"], [223, 224, 9, "enum_NEXT_SYNTAX"], [224, 225, 9, "enum_NEXT_SYNTAX"], [225, 226, 9, "enum_NEXT_SYNTAX"], [227, 221, 10, "enum_LAST_LEXICAL_USE"], [226, 227, 9, "enum_NEXT_SYNTAX"], [227, 228, 9, "enum_NEXT_SYNTAX"], [228, 229, 9, "enum_NEXT_SYNTAX"], [229, 230, 9, "enum_NEXT_SYNTAX"], [230, 231, 9, "enum_NEXT_SYNTAX"], [231, 232, 9, "enum_NEXT_SYNTAX"], [232, 233, 9, "enum_NEXT_SYNTAX"], [233, 234, 9, "enum_NEXT_SYNTAX"], [234, 235, 9, "enum_NEXT_SYNTAX"], [235, 236, 9, "enum_NEXT_SYNTAX"], [236, 237, 9, "enum_NEXT_SYNTAX"], [237, 238, 9, "enum_NEXT_SYNTAX"], [239, 214, 10, "enum_LAST_LEXICAL_USE"], [238, 239, 9, "enum_NEXT_SYNTAX"], [239, 240, 9, "enum_NEXT_SYNTAX"], [240, 241, 9, "enum_NEXT_SYNTAX"], [241, 242, 9, "enum_NEXT_SYNTAX"], [243, 218, 10, "enum_LAST_LEXICAL_USE"], [242, 243, 9, "enum_NEXT_SYNTAX"], [243, 244, 9, "enum_NEXT_SYNTAX"], [244, 245, 9, "enum_NEXT_SYNTAX"], [246, 227, 10, "enum_LAST_LEXICAL_USE"], [245, 246, 9, "enum_NEXT_SYNTAX"], [246, 247, 9, "enum_NEXT_SYNTAX"], [247, 248, 9, "enum_NEXT_SYNTAX"], [248, 249, 9, "enum_NEXT_SYNTAX"], [249, 250, 9, "enum_NEXT_SYNTAX"], [250, 251, 9, "enum_NEXT_SYNTAX"], [252, 246, 10, "enum_LAST_LEXICAL_USE"], [251, 252, 9, "enum_NEXT_SYNTAX"], [252, 253, 9, "enum_NEXT_SYNTAX"], [253, 254, 9, "enum_NEXT_SYNTAX"], [254, 255, 9, "enum_NEXT_SYNTAX"], [255, 256, 9, "enum_NEXT_SYNTAX"], [256, 257, 9, "enum_NEXT_SYNTAX"], [257, 258, 9, "enum_NEXT_SYNTAX"], [258, 259, 9, "enum_NEXT_SYNTAX"], [259, 260, 9, "enum_NEXT_SYNTAX"], [260, 262, 9, "enum_NEXT_SYNTAX"], [262, 263, 9, "enum_NEXT_SYNTAX"], [264, 237, 10, "enum_LAST_LEXICAL_USE"], [263, 264, 9, "enum_NEXT_SYNTAX"], [264, 265, 9, "enum_NEXT_SYNTAX"], [265, 266, 9, "enum_NEXT_SYNTAX"], [266, 267, 9, "enum_NEXT_SYNTAX"], [267, 268, 9, "enum_NEXT_SYNTAX"], [268, 270, 9, "enum_NEXT_SYNTAX"], [271, 32, 10, "enum_LAST_LEXICAL_USE"], [270, 271, 9, "enum_NEXT_SYNTAX"], [271, 272, 9, "enum_NEXT_SYNTAX"], [272, 273, 9, "enum_NEXT_SYNTAX"], [274, 187, 10, "enum_LAST_LEXICAL_USE"], [273, 274, 9, "enum_NEXT_SYNTAX"], [274, 275, 9, "enum_NEXT_SYNTAX"], [275, 276, 9, "enum_NEXT_SYNTAX"], [276, 277, 9, "enum_NEXT_SYNTAX"], [277, 278, 9, "enum_NEXT_SYNTAX"], [279, 36, 10, "enum_LAST_LEXICAL_USE"], [278, 279, 9, "enum_NEXT_SYNTAX"], [279, 280, 9, "enum_NEXT_SYNTAX"], [280, 281, 9, "enum_NEXT_SYNTAX"], [282, 212, 10, "enum_LAST_LEXICAL_USE"], [281, 282, 9, "enum_NEXT_SYNTAX"], [282, 283, 9, "enum_NEXT_SYNTAX"], [283, 284, 9, "enum_NEXT_SYNTAX"], [284, 285, 9, "enum_NEXT_SYNTAX"], [285, 289, 9, "enum_NEXT_SYNTAX"], [289, 290, 9, "enum_NEXT_SYNTAX"], [291, 180, 10, "enum_LAST_LEXICAL_USE"], [290, 291, 9, "enum_NEXT_SYNTAX"], [291, 292, 9, "enum_NEXT_SYNTAX"], [293, 48, 10, "enum_LAST_LEXICAL_USE"], [292, 293, 9, "enum_NEXT_SYNTAX"], [293, 294, 9, "enum_NEXT_SYNTAX"], [294, 295, 9, "enum_NEXT_SYNTAX"], [295, 297, 9, "enum_NEXT_SYNTAX"], [298, 56, 10, "enum_LAST_LEXICAL_USE"], [297, 298, 9, "enum_NEXT_SYNTAX"], [298, 299, 9, "enum_NEXT_SYNTAX"], [299, 300, 9, "enum_NEXT_SYNTAX"], [300, 302, 9, "enum_NEXT_SYNTAX"], [302, 304, 9, "enum_NEXT_SYNTAX"], [305, 252, 10, "enum_LAST_LEXICAL_USE"], [304, 305, 9, "enum_NEXT_SYNTAX"], [305, 306, 9, "enum_NEXT_SYNTAX"], [306, 307, 9, "enum_NEXT_SYNTAX"], [307, 308, 9, "enum_NEXT_SYNTAX"], [309, 305, 10, "enum_LAST_LEXICAL_USE"], [308, 309, 9, "enum_NEXT_SYNTAX"], [309, 310, 9, "enum_NEXT_SYNTAX"], [311, 68, 10, "enum_LAST_LEXICAL_USE"], [310, 311, 9, "enum_NEXT_SYNTAX"], [311, 312, 9, "enum_NEXT_SYNTAX"], [312, 313, 9, "enum_NEXT_SYNTAX"], [313, 314, 9, "enum_NEXT_SYNTAX"], [314, 315, 9, "enum_NEXT_SYNTAX"], [315, 318, 9, "enum_NEXT_SYNTAX"], [318, 319, 9, "enum_NEXT_SYNTAX"], [319, 320, 9, "enum_NEXT_SYNTAX"], [320, 321, 9, "enum_NEXT_SYNTAX"], [322, 127, 10, "enum_LAST_LEXICAL_USE"], [321, 322, 9, "enum_NEXT_SYNTAX"], [322, 323, 9, "enum_NEXT_SYNTAX"], [324, 152, 10, "enum_LAST_LEXICAL_USE"], [323, 324, 9, "enum_NEXT_SYNTAX"], [324, 325, 9, "enum_NEXT_SYNTAX"], [326, 271, 10, "enum_LAST_LEXICAL_USE"], [325, 326, 9, "enum_NEXT_SYNTAX"], [326, 327, 9, "enum_NEXT_SYNTAX"], [328, 279, 10, "enum_LAST_LEXICAL_USE"], [327, 328, 9, "enum_NEXT_SYNTAX"], [328, 329, 9, "enum_NEXT_SYNTAX"], [3, 8, 1, "enum_CFG_NEXT"], [8, 12, 1, "enum_CFG_NEXT"], [12, 19, 1, "enum_CFG_NEXT"], [19, 23, 1, "enum_CFG_NEXT"], [23, 27, 1, "enum_CFG_NEXT"], [27, 31, 1, "enum_CFG_NEXT"], [31, 35, 1, "enum_CFG_NEXT"], [35, 39, 1, "enum_CFG_NEXT"], [39, 43, 1, "enum_CFG_NEXT"], [43, 47, 1, "enum_CFG_NEXT"], [47, 58, 1, "enum_CFG_NEXT"], [58, 318, 1, "enum_CFG_NEXT"], [58, 67, 1, "enum_CFG_NEXT"], [67, 92, 1, "enum_CFG_NEXT"], [92, 121, 1, "enum_CFG_NEXT"], [121, 181, 1, "enum_CFG_NEXT"], [121, 126, 1, "enum_CFG_NEXT"], [126, 151, 1, "enum_CFG_NEXT"], [151, 181, 1, "enum_CFG_NEXT"], [181, 292, 1, "enum_CFG_NEXT"], [181, 186, 1, "enum_CFG_NEXT"], [186, 211, 1, "enum_CFG_NEXT"], [211, 236, 1, "enum_CFG_NEXT"], [236, 265, 1, "enum_CFG_NEXT"], [265, 270, 1, "enum_CFG_NEXT"], [265, 292, 1, "enum_CFG_NEXT"], [270, 278, 1, "enum_CFG_NEXT"], [278, 292, 1, "enum_CFG_NEXT"], [292, 297, 1, "enum_CFG_NEXT"], [292, 304, 1, "enum_CFG_NEXT"], [297, 58, 1, "enum_CFG_NEXT"], [304, 58, 1, "enum_CFG_NEXT"], [17, 4, 3, "enum_LAST_WRITE"], [56, 56, 2, "enum_LAST_READ"], [56, 20, 3, "enum_LAST_WRITE"], [56, 298, 3, "enum_LAST_WRITE"], [60, 309, 2, "enum_LAST_READ"], [60, 252, 2, "enum_LAST_READ"], [60, 108, 2, "enum_LAST_READ"], [60, 167, 2, "enum_LAST_READ"], [60, 9, 3, "enum_LAST_WRITE"], [60, 305, 3, "enum_LAST_WRITE"], [62, 62, 2, "enum_LAST_READ"], [62, 13, 3, "enum_LAST_WRITE"], [70, 154, 2, "enum_LAST_READ"], [70, 239, 2, "enum_LAST_READ"], [70, 95, 2, "enum_LAST_READ"], [74, 99, 2, "enum_LAST_READ"], [74, 17, 2, "enum_LAST_READ"], [74, 158, 2, "enum_LAST_READ"], [74, 243, 2, "enum_LAST_READ"], [74, 4, 3, "enum_LAST_WRITE"], [77, 60, 2, "enum_LAST_READ"], [77, 9, 3, "enum_LAST_WRITE"], [77, 305, 3, "enum_LAST_WRITE"], [83, 77, 2, "enum_LAST_READ"], [83, 9, 3, "enum_LAST_WRITE"], [83, 305, 3, "enum_LAST_WRITE"], [68, 311, 2, "enum_LAST_READ"], [68, 68, 3, "enum_LAST_WRITE"], [95, 70, 2, "enum_LAST_READ"], [99, 74, 2, "enum_LAST_READ"], [99, 4, 3, "enum_LAST_WRITE"], [102, 83, 2, "enum_LAST_READ"], [102, 9, 3, "enum_LAST_WRITE"], [102, 305, 3, "enum_LAST_WRITE"], [108, 102, 2, "enum_LAST_READ"], [108, 9, 3, "enum_LAST_WRITE"], [108, 305, 3, "enum_LAST_WRITE"], [93, 291, 2, "enum_LAST_READ"], [93, 93, 3, "enum_LAST_WRITE"], [120, 291, 2, "enum_LAST_READ"], [120, 93, 3, "enum_LAST_WRITE"], [122, 122, 2, "enum_LAST_READ"], [122, 40, 3, "enum_LAST_WRITE"], [129, 95, 2, "enum_LAST_READ"], [133, 99, 2, "enum_LAST_READ"], [133, 4, 3, "enum_LAST_WRITE"], [136, 108, 2, "enum_LAST_READ"], [136, 9, 3, "enum_LAST_WRITE"], [136, 305, 3, "enum_LAST_WRITE"], [142, 136, 2, "enum_LAST_READ"], [142, 9, 3, "enum_LAST_WRITE"], [142, 305, 3, "enum_LAST_WRITE"], [127, 24, 3, "enum_LAST_WRITE"], [127, 127, 3, "enum_LAST_WRITE"], [154, 129, 2, "enum_LAST_READ"], [158, 133, 2, "enum_LAST_READ"], [158, 4, 3, "enum_LAST_WRITE"], [161, 142, 2, "enum_LAST_READ"], [161, 9, 3, "enum_LAST_WRITE"], [161, 305, 3, "enum_LAST_WRITE"], [167, 161, 2, "enum_LAST_READ"], [167, 9, 3, "enum_LAST_WRITE"], [167, 305, 3, "enum_LAST_WRITE"], [152, 152, 3, "enum_LAST_WRITE"], [152, 28, 3, "enum_LAST_WRITE"], [180, 120, 2, "enum_LAST_READ"], [180, 93, 3, "enum_LAST_WRITE"], [182, 182, 2, "enum_LAST_READ"], [182, 44, 3, "enum_LAST_WRITE"], [189, 154, 2, "enum_LAST_READ"], [189, 95, 2, "enum_LAST_READ"], [193, 99, 2, "enum_LAST_READ"], [193, 158, 2, "enum_LAST_READ"], [193, 4, 3, "enum_LAST_WRITE"], [196, 108, 2, "enum_LAST_READ"], [196, 167, 2, "enum_LAST_READ"], [196, 9, 3, "enum_LAST_WRITE"], [196, 305, 3, "enum_LAST_WRITE"], [202, 196, 2, "enum_LAST_READ"], [202, 9, 3, "enum_LAST_WRITE"], [202, 305, 3, "enum_LAST_WRITE"], [187, 274, 2, "enum_LAST_READ"], [187, 187, 3, "enum_LAST_WRITE"], [214, 189, 2, "enum_LAST_READ"], [218, 193, 2, "enum_LAST_READ"], [218, 4, 3, "enum_LAST_WRITE"], [221, 202, 2, "enum_LAST_READ"], [221, 9, 3, "enum_LAST_WRITE"], [221, 305, 3, "enum_LAST_WRITE"], [227, 221, 2, "enum_LAST_READ"], [227, 9, 3, "enum_LAST_WRITE"], [227, 305, 3, "enum_LAST_WRITE"], [212, 282, 2, "enum_LAST_READ"], [212, 212, 3, "enum_LAST_WRITE"], [239, 214, 2, "enum_LAST_READ"], [243, 218, 2, "enum_LAST_READ"], [243, 4, 3, "enum_LAST_WRITE"], [246, 227, 2, "enum_LAST_READ"], [246, 9, 3, "enum_LAST_WRITE"], [246, 305, 3, "enum_LAST_WRITE"], [252, 246, 2, "enum_LAST_READ"], [252, 9, 3, "enum_LAST_WRITE"], [252, 305, 3, "enum_LAST_WRITE"], [237, 264, 2, "enum_LAST_READ"], [237, 237, 3, "enum_LAST_WRITE"], [264, 264, 2, "enum_LAST_READ"], [264, 237, 3, "enum_LAST_WRITE"], [274, 274, 2, "enum_LAST_READ"], [274, 187, 3, "enum_LAST_WRITE"], [271, 271, 3, "enum_LAST_WRITE"], [271, 32, 3, "enum_LAST_WRITE"], [282, 282, 2, "enum_LAST_READ"], [282, 212, 3, "enum_LAST_WRITE"], [279, 36, 3, "enum_LAST_WRITE"], [279, 279, 3, "enum_LAST_WRITE"], [291, 180, 2, "enum_LAST_READ"], [291, 93, 3, "enum_LAST_WRITE"], [293, 293, 2, "enum_LAST_READ"], [293, 48, 3, "enum_LAST_WRITE"], [298, 56, 2, "enum_LAST_READ"], [298, 20, 3, "enum_LAST_WRITE"], [298, 298, 3, "enum_LAST_WRITE"], [309, 252, 2, "enum_LAST_READ"], [309, 108, 2, "enum_LAST_READ"], [309, 167, 2, "enum_LAST_READ"], [309, 9, 3, "enum_LAST_WRITE"], [309, 305, 3, "enum_LAST_WRITE"], [311, 311, 2, "enum_LAST_READ"], [311, 68, 3, "enum_LAST_WRITE"], [305, 309, 2, "enum_LAST_READ"], [305, 9, 3, "enum_LAST_WRITE"], [305, 305, 3, "enum_LAST_WRITE"], [322, 24, 3, "enum_LAST_WRITE"], [322, 127, 3, "enum_LAST_WRITE"], [324, 152, 3, "enum_LAST_WRITE"], [324, 28, 3, "enum_LAST_WRITE"], [326, 271, 3, "enum_LAST_WRITE"], [326, 32, 3, "enum_LAST_WRITE"], [328, 36, 3, "enum_LAST_WRITE"], [328, 279, 3, "enum_LAST_WRITE"], [13, 15, 4, "enum_COMPUTED_FROM"], [13, 17, 4, "enum_COMPUTED_FROM"], [68, 70, 4, "enum_COMPUTED_FROM"], [68, 74, 4, "enum_COMPUTED_FROM"], [68, 77, 4, "enum_COMPUTED_FROM"], [68, 83, 4, "enum_COMPUTED_FROM"], [93, 95, 4, "enum_COMPUTED_FROM"], [93, 99, 4, "enum_COMPUTED_FROM"], [93, 102, 4, "enum_COMPUTED_FROM"], [93, 108, 4, "enum_COMPUTED_FROM"], [305, 309, 4, "enum_COMPUTED_FROM"], [305, 311, 4, "enum_COMPUTED_FROM"], [127, 129, 4, "enum_COMPUTED_FROM"], [127, 133, 4, "enum_COMPUTED_FROM"], [127, 136, 4, "enum_COMPUTED_FROM"], [127, 142, 4, "enum_COMPUTED_FROM"], [152, 154, 4, "enum_COMPUTED_FROM"], [152, 158, 4, "enum_COMPUTED_FROM"], [152, 161, 4, "enum_COMPUTED_FROM"], [152, 167, 4, "enum_COMPUTED_FROM"], [187, 189, 4, "enum_COMPUTED_FROM"], [187, 193, 4, "enum_COMPUTED_FROM"], [187, 196, 4, "enum_COMPUTED_FROM"], [187, 202, 4, "enum_COMPUTED_FROM"], [212, 214, 4, "enum_COMPUTED_FROM"], [212, 218, 4, "enum_COMPUTED_FROM"], [212, 221, 4, "enum_COMPUTED_FROM"], [212, 227, 4, "enum_COMPUTED_FROM"], [237, 239, 4, "enum_COMPUTED_FROM"], [237, 243, 4, "enum_COMPUTED_FROM"], [237, 246, 4, "enum_COMPUTED_FROM"], [237, 252, 4, "enum_COMPUTED_FROM"], [271, 274, 4, "enum_COMPUTED_FROM"], [279, 282, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "jmcnamara", "repo": "XlsxWriter", "path": "xlsxwriter/workbook.py", "id": 22829, "has_bug": false, "code_full": "import struct\nfrom typing import Tuple\n\nunpack = struct.unpack\n\nclass Class:\n    def _process_png(self, data: bytes) -> Tuple[str, int, int, float, float]:\n        # Extract width and height information from a PNG file.\n        offset: int = 8\n        data_length: int = len(data)\n        end_marker: bool = False\n        width: int = 0\n        height: int = 0\n        x_dpi: int = 96\n        y_dpi: int = 96\n\n        # Look for numbers rather than strings for Python 2.6/3 compatibility.\n        marker_ihdr: int = 0x49484452  # IHDR\n        marker_phys: int = 0x70485973  # pHYs\n        marker_iend: int = 0X49454E44  # IEND\n\n        # Search through the image data to read the height and width in the\n        # IHDR element. Also read the DPI in the pHYs element.\n        while not end_marker and offset < data_length:\n\n            length: int = (unpack('>I', data[offset + 0:offset + 4]))[0]\n            marker: int = (unpack('>I', data[offset + 4:offset + 8]))[0]\n\n            # Read the image dimensions.\n            if marker == marker_ihdr:\n                width: int = (unpack('>I', data[offset + 8:offset + 12]))[0]\n                height: int = (unpack('>I', data[offset + 12:offset + 16]))[0]\n\n            # Read the image DPI.\n            if marker == marker_phys:\n                x_density: int = (unpack('>I', data[offset + 8:offset + 12]))[0]\n                y_density: int = (unpack('>I', data[offset + 12:offset + 16]))[0]\n                units: int = (unpack('b', data[offset + 16:offset + 17]))[0]\n\n                if units == 1:\n                    x_dpi: float = x_density * 0.0254\n                    y_dpi: float = y_density * 0.0254\n\n            if marker == marker_iend:\n                end_marker: bool = True\n                continue\n\n            offset: int = offset + length + 12\n\n        return 'png', width, height, x_dpi, y_dpi\n", "code": "def _process_png(self, data: bytes) -> Tuple[str, int, int, float, float]:\n    # Extract width and height information from a PNG file.\n    offset: int = 8\n    data_length: int = len(data)\n    end_marker: bool = False\n    width: int = 0\n    height: int = 0\n    x_dpi: int = 96\n    y_dpi: int = 96\n\n    # Look for numbers rather than strings for Python 2.6/3 compatibility.\n    marker_ihdr: int = 0x49484452  # IHDR\n    marker_phys: int = 0x70485973  # pHYs\n    marker_iend: int = 0X49454E44  # IEND\n\n    # Search through the image data to read the height and width in the\n    # IHDR element. Also read the DPI in the pHYs element.\n    while not end_marker and offset < data_length:\n\n        length: int = (unpack('>I', data[offset + 0:offset + 4]))[0]\n        marker: int = (unpack('>I', data[offset + 4:offset + 8]))[0]\n\n        # Read the image dimensions.\n        if marker == marker_ihdr:\n            width: int = (unpack('>I', data[offset + 8:offset + 12]))[0]\n            height: int = (unpack('>I', data[offset + 12:offset + 16]))[0]\n\n        # Read the image DPI.\n        if marker == marker_phys:\n            x_density: int = (unpack('>I', data[offset + 8:offset + 12]))[0]\n            y_density: int = (unpack('>I', data[offset + 12:offset + 16]))[0]\n            units: int = (unpack('b', data[offset + 16:offset + 17]))[0]\n\n            if units == 1:\n                x_dpi: float = x_density * 0.0254\n                y_dpi: float = y_density * 0.0254\n\n        if marker == marker_iend:\n            end_marker: bool = True\n            continue\n\n        offset: int = offset + length + 12\n\n    return 'png', width, height, x_dpi, y_dpi\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "b592624bdebf4488052617475cac056396a897d8"}
{"source_tokens": ["#NEWLINE#", "def add(", "self", ",", "a", ",", "b", ")", ":", "#NEWLINE#", "#INDENT#", "'Sum of ``a`` and ``b``, implies ``__add__``.  '", "#NEWLINE#", "return", "(", "a", "+", "b", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [10, 11, 7, "enum_FIELD"], [13, 16, 7, "enum_FIELD"], [16, 15, 7, "enum_FIELD"], [16, 17, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [15, 4, 10, "enum_LAST_LEXICAL_USE"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [17, 6, 10, "enum_LAST_LEXICAL_USE"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [3, 10, 1, "enum_CFG_NEXT"], [10, 13, 1, "enum_CFG_NEXT"], [15, 4, 3, "enum_LAST_WRITE"], [17, 6, 3, "enum_LAST_WRITE"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "sympy", "repo": "sympy", "path": "sympy/polys/domains/domain.py", "id": 53735, "has_bug": false, "code_full": "def add(self, a: int, b: int) -> int:\n    \"\"\"Sum of ``a`` and ``b``, implies ``__add__``.  \"\"\"\n    return a + b\n", "code": "def add(self, a: int, b: int) -> int:\n    \"\"\"Sum of ``a`` and ``b``, implies ``__add__``.  \"\"\"\n    return a + b\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "25ea11a953ec1a83e73b58d43a1d5f4026e006bc"}
{"source_tokens": ["#NEWLINE#", "def __eq__(", "self", ",", "other", ")", ":", "#NEWLINE#", "#INDENT#", "if", "isinstance", "(", "other", ",", "basestring", ")", ":", "#NEWLINE#", "#INDENT#", "other", "=", "self", ".", "__class__", "(", "other", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "other", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "return", "False", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "not", "isinstance", "(", "other", ",", "RDFURN", ")", ")", ":", "#NEWLINE#", "#INDENT#", "return", "NotImplemented", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "return", "(", "self", ".", "_string_urn", "==", "other", ".", "Path", "(", ")", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [16, 13, 7, "enum_FIELD"], [69, 74, 7, "enum_FIELD"], [13, 10, 7, "enum_FIELD"], [18, 24, 7, "enum_FIELD"], [39, 36, 7, "enum_FIELD"], [74, 72, 7, "enum_FIELD"], [24, 22, 7, "enum_FIELD"], [36, 35, 7, "enum_FIELD"], [42, 43, 7, "enum_FIELD"], [50, 52, 7, "enum_FIELD"], [72, 71, 7, "enum_FIELD"], [78, 76, 7, "enum_FIELD"], [22, 21, 7, "enum_FIELD"], [52, 56, 7, "enum_FIELD"], [63, 64, 7, "enum_FIELD"], [76, 75, 7, "enum_FIELD"], [56, 53, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [12, 4, 10, "enum_LAST_LEXICAL_USE"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 18, 9, "enum_NEXT_SYNTAX"], [19, 12, 10, "enum_LAST_LEXICAL_USE"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [21, 2, 10, "enum_LAST_LEXICAL_USE"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [25, 19, 10, "enum_LAST_LEXICAL_USE"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [35, 25, 10, "enum_LAST_LEXICAL_USE"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [53, 10, 10, "enum_LAST_LEXICAL_USE"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [55, 35, 10, "enum_LAST_LEXICAL_USE"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [71, 21, 10, "enum_LAST_LEXICAL_USE"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [75, 55, 10, "enum_LAST_LEXICAL_USE"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [3, 13, 1, "enum_CFG_NEXT"], [13, 18, 1, "enum_CFG_NEXT"], [13, 36, 1, "enum_CFG_NEXT"], [18, 69, 1, "enum_CFG_NEXT"], [36, 52, 1, "enum_CFG_NEXT"], [36, 42, 1, "enum_CFG_NEXT"], [52, 63, 1, "enum_CFG_NEXT"], [52, 69, 1, "enum_CFG_NEXT"], [12, 4, 3, "enum_LAST_WRITE"], [21, 2, 3, "enum_LAST_WRITE"], [25, 12, 2, "enum_LAST_READ"], [25, 4, 3, "enum_LAST_WRITE"], [19, 25, 2, "enum_LAST_READ"], [19, 4, 3, "enum_LAST_WRITE"], [35, 12, 2, "enum_LAST_READ"], [35, 4, 3, "enum_LAST_WRITE"], [53, 10, 2, "enum_LAST_READ"], [55, 35, 2, "enum_LAST_READ"], [55, 4, 3, "enum_LAST_WRITE"], [71, 21, 2, "enum_LAST_READ"], [71, 2, 3, "enum_LAST_WRITE"], [75, 25, 2, "enum_LAST_READ"], [75, 55, 2, "enum_LAST_READ"], [75, 4, 3, "enum_LAST_WRITE"], [75, 19, 3, "enum_LAST_WRITE"], [19, 25, 4, "enum_COMPUTED_FROM"], [19, 21, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "google", "repo": "grr", "path": "grr/lib/rdfvalue.py", "id": 18440, "has_bug": false, "code_full": "from typing import Any\n\nbasestring = str\n\n\nclass RDFURN:\n    _string_urn: str\n\n    def __init__(self, string: str):\n        pass\n\n    def __eq__(self, other: Any) -> bool:\n        if isinstance(other, basestring):\n            other = self.__class__(other)\n\n        elif other is None:\n            return False\n\n        elif not isinstance(other, RDFURN):\n            return NotImplemented\n\n        return self._string_urn == other.Path()\n", "code": "def __eq__(self, other: Any) -> bool:\n    if isinstance(other, basestring):\n        other = self.__class__(other)\n\n    elif other is None:\n        return False\n\n    elif not isinstance(other, RDFURN):\n        return NotImplemented\n\n    return self._string_urn == other.Path()\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "7b0e6c18ea47e5361e36554beebdb9fc112f7350"}
{"source_tokens": ["#NEWLINE#", "def test_edit_pool_by_name(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "' Try to rename a pool using edit_pool() function\\n\\n        Pool is not uniquely identified (empty spec) so this should raise an error\\n    '", "#NEWLINE#", "schema", "=", "{", "'id'", ":", "self", ".", "schema_attrs", "[", "'id'", "]", "}", "#NEWLINE#", "spec", "=", "{", "}", "#NEWLINE#", "attrs", "=", "{", "'name'", ":", "self", ".", "pool_attrs", "[", "'name'", "]", ",", "'default_type'", ":", "'assignment'", ",", "'description'", ":", "'A simple test pool with correct name!'", "}", "#NEWLINE#", "self", ".", "assertRaises", "(", "NipapInputError", ",", "self", ".", "nipap", ".", "edit_pool", ",", "self", ".", "auth", ",", "schema", ",", "spec", ",", "attrs", ")"], "edges": [[6, 7, 7, "enum_FIELD"], [8, 13, 7, "enum_FIELD"], [21, 24, 7, "enum_FIELD"], [26, 40, 7, "enum_FIELD"], [47, 63, 7, "enum_FIELD"], [63, 49, 7, "enum_FIELD"], [17, 15, 7, "enum_FIELD"], [17, 18, 7, "enum_FIELD"], [35, 33, 7, "enum_FIELD"], [35, 36, 7, "enum_FIELD"], [49, 48, 7, "enum_FIELD"], [57, 55, 7, "enum_FIELD"], [61, 60, 7, "enum_FIELD"], [15, 14, 7, "enum_FIELD"], [33, 32, 7, "enum_FIELD"], [55, 54, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [14, 2, 10, "enum_LAST_LEXICAL_USE"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [32, 14, 10, "enum_LAST_LEXICAL_USE"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [48, 32, 10, "enum_LAST_LEXICAL_USE"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [54, 48, 10, "enum_LAST_LEXICAL_USE"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [60, 54, 10, "enum_LAST_LEXICAL_USE"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [64, 9, 10, "enum_LAST_LEXICAL_USE"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [66, 22, 10, "enum_LAST_LEXICAL_USE"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [68, 27, 10, "enum_LAST_LEXICAL_USE"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [6, 8, 1, "enum_CFG_NEXT"], [8, 21, 1, "enum_CFG_NEXT"], [21, 26, 1, "enum_CFG_NEXT"], [26, 47, 1, "enum_CFG_NEXT"], [14, 2, 3, "enum_LAST_WRITE"], [32, 14, 2, "enum_LAST_READ"], [32, 2, 3, "enum_LAST_WRITE"], [48, 32, 2, "enum_LAST_READ"], [48, 2, 3, "enum_LAST_WRITE"], [54, 48, 2, "enum_LAST_READ"], [54, 2, 3, "enum_LAST_WRITE"], [60, 54, 2, "enum_LAST_READ"], [60, 2, 3, "enum_LAST_WRITE"], [64, 9, 3, "enum_LAST_WRITE"], [66, 22, 3, "enum_LAST_WRITE"], [68, 27, 3, "enum_LAST_WRITE"], [9, 14, 4, "enum_COMPUTED_FROM"], [27, 32, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "SpriteLink", "repo": "NIPAP", "path": "tests/nipapbase.py", "id": 7848, "has_bug": false, "code_full": "import unittest\nfrom typing import Any, Dict\n\n\nclass NipapInputError(Exception):\n    pass\n\n\nclass Nipap:\n    def edit_pool(self, auth: Any, schema: Dict[str, Any], spec: Dict[str, Any], attrs: Dict[str, str]) -> None:\n        pass\n\nclass Test(unittest.TestCase):\n    schema_attrs: Dict[str, Any]\n    pool_attrs: Dict[str, str]\n    nipap: Nipap\n    auth: Any\n\n    def test_edit_pool_by_name(self):\n        \"\"\" Try to rename a pool using edit_pool() function\n\n            Pool is not uniquely identified (empty spec) so this should raise an error\n        \"\"\"\n        schema: Dict[str, Any] = {'id': self.schema_attrs['id']}\n        spec: Dict[str, Any] = {  }\n        attrs: Dict[str, str] = {\n                'name': self.pool_attrs['name'],\n                'default_type': 'assignment',\n                'description': 'A simple test pool with correct name!'\n                }\n        self.assertRaises(NipapInputError, self.nipap.edit_pool, self.auth, schema, spec, attrs)\n\n", "code": "def test_edit_pool_by_name(self):\n    \"\"\" Try to rename a pool using edit_pool() function\n\n        Pool is not uniquely identified (empty spec) so this should raise an error\n    \"\"\"\n    schema: Dict[str, Any] = {'id': self.schema_attrs['id']}\n    spec: Dict[str, Any] = {  }\n    attrs: Dict[str, str] = {\n            'name': self.pool_attrs['name'],\n            'default_type': 'assignment',\n            'description': 'A simple test pool with correct name!'\n            }\n    self.assertRaises(NipapInputError, self.nipap.edit_pool, self.auth, schema, spec, attrs)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "fb409c3fb1564f31330dadfba3e90c786322d49b"}
{"source_tokens": ["#NEWLINE#", "def testDataTableFilterStandard(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "' Test Standard Data Table '", "#NEWLINE#", "resource", "=", "current", ".", "s3db", ".", "resource", "(", "'hrm_certificate_skill'", ")", "#NEWLINE#", "vars", "=", "Storage", "(", "{", "'bSortable_0'", ":", "'false'", ",", "'bSortable_1'", ":", "'true'", ",", "'bSortable_2'", ":", "'true'", ",", "'sSortDir_0'", ":", "'asc'", ",", "'iSortCol_0'", ":", "'1'", ",", "'iColumns'", ":", "'3'", ",", "'iSortingCols'", ":", "'1'", "}", ")", "#NEWLINE#", "(", "searchq", ",", "orderby", ",", "left", ")", "=", "resource", ".", "datatable_filter", "(", "[", "'id'", ",", "'skill_id'", ",", "'competency_id'", "]", ",", "vars", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "orderby", ",", "'hrm_skill.name asc'", ")"], "edges": [[6, 7, 7, "enum_FIELD"], [8, 16, 7, "enum_FIELD"], [19, 23, 7, "enum_FIELD"], [54, 74, 7, "enum_FIELD"], [77, 83, 7, "enum_FIELD"], [16, 14, 7, "enum_FIELD"], [23, 22, 7, "enum_FIELD"], [74, 64, 7, "enum_FIELD"], [83, 79, 7, "enum_FIELD"], [14, 12, 7, "enum_FIELD"], [64, 63, 7, "enum_FIELD"], [79, 78, 7, "enum_FIELD"], [12, 11, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [63, 9, 10, "enum_LAST_LEXICAL_USE"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [75, 20, 10, "enum_LAST_LEXICAL_USE"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [78, 2, 10, "enum_LAST_LEXICAL_USE"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [82, 58, 10, "enum_LAST_LEXICAL_USE"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [6, 8, 1, "enum_CFG_NEXT"], [8, 19, 1, "enum_CFG_NEXT"], [19, 54, 1, "enum_CFG_NEXT"], [54, 77, 1, "enum_CFG_NEXT"], [63, 9, 3, "enum_LAST_WRITE"], [75, 20, 3, "enum_LAST_WRITE"], [78, 2, 3, "enum_LAST_WRITE"], [82, 58, 3, "enum_LAST_WRITE"], [9, 11, 4, "enum_COMPUTED_FROM"], [20, 22, 4, "enum_COMPUTED_FROM"], [57, 75, 4, "enum_COMPUTED_FROM"], [57, 63, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "sahana", "repo": "eden", "path": "modules/unit_tests/s3/s3resource.py", "id": 46161, "has_bug": false, "code_full": "\nimport unittest\nfrom collections import namedtuple\nfrom typing import Any, Dict, List\n\nfrom sympy import Tuple\n\n\nclass Storage(Dict):\n    pass\n\n\nclass Resource:\n    def datatable_filter(self, fields: List[str], vars: Storage) -> Tuple[Any, str, Any]:\n        return None, \"\", None\n\n\nclass S3DB:\n    def resource(self, name: str) -> Resource:\n        return Resource()\n\n\nclass Current:\n    s3db: S3DB = S3DB()\n\n\ncurrent: Current = Current()\n\n\nclass Class(unittest.TestCase):\n    def testDataTableFilterStandard(self):\n        \"\"\" Test Standard Data Table \"\"\"\n\n        resource: Resource = current.s3db.resource(\"hrm_certificate_skill\")\n        vars: Storage = Storage({\"bSortable_0\": \"false\",\n                        \"bSortable_1\": \"true\",\n                        \"bSortable_2\": \"true\",\n                        \"sSortDir_0\": \"asc\",\n                        \"iSortCol_0\": \"1\",\n                        \"iColumns\": \"3\",\n                        \"iSortingCols\": \"1\"})\n        searchq, orderby, left = resource.datatable_filter([\"id\",\n                                                            \"skill_id\",\n                                                            \"competency_id\"],\n                                                            vars)\n        self.assertEqual(orderby, \"hrm_skill.name asc\")\n", "code": "def testDataTableFilterStandard(self):\n    \"\"\" Test Standard Data Table \"\"\"\n\n    resource: Resource = current.s3db.resource(\"hrm_certificate_skill\")\n    vars: Storage = Storage({\"bSortable_0\": \"false\",\n                    \"bSortable_1\": \"true\",\n                    \"bSortable_2\": \"true\",\n                    \"sSortDir_0\": \"asc\",\n                    \"iSortCol_0\": \"1\",\n                    \"iColumns\": \"3\",\n                    \"iSortingCols\": \"1\"})\n    searchq, orderby, left = resource.datatable_filter([\"id\",\n                                                        \"skill_id\",\n                                                        \"competency_id\"],\n                                                        vars)\n    self.assertEqual(orderby, \"hrm_skill.name asc\")\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "3890dff869eba446cc1aac4cdbd8bd44df1af297"}
{"source_tokens": ["#NEWLINE#", "def test_add_delete_node(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'Test that add_node and delete_node fail in the correct situations.\\n    '", "#NEWLINE#", "collection", "=", "collection_domain", ".", "Collection", ".", "create_default_collection", "(", "'0'", ",", "'title'", ",", "'category'", ",", "'objective'", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "len", "(", "collection", ".", "nodes", ")", ",", "0", ")", "#NEWLINE#", "collection", ".", "add_node", "(", "'test_exp'", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "len", "(", "collection", ".", "nodes", ")", ",", "1", ")", "#NEWLINE#", "with", "self", ".", "assertRaisesRegexp", "(", "ValueError", ",", "'Exploration is already part of this collection: test_exp'", ")", ":", "#NEWLINE#", "#INDENT#", "collection", ".", "add_node", "(", "'test_exp'", ")", "#NEWLINE#", "#UNINDENT#", "collection", ".", "add_node", "(", "'another_exp'", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "len", "(", "collection", ".", "nodes", ")", ",", "2", ")", "#NEWLINE#", "collection", ".", "delete_node", "(", "'another_exp'", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "len", "(", "collection", ".", "nodes", ")", ",", "1", ")", "#NEWLINE#", "with", "self", ".", "assertRaisesRegexp", "(", "ValueError", ",", "'Exploration is not part of this collection: another_exp'", ")", ":", "#NEWLINE#", "#INDENT#", "collection", ".", "delete_node", "(", "'another_exp'", ")", "#NEWLINE#", "#UNINDENT#", "collection", ".", "delete_node", "(", "'test_exp'", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "len", "(", "collection", ".", "nodes", ")", ",", "0", ")"], "edges": [[6, 7, 7, "enum_FIELD"], [8, 20, 7, "enum_FIELD"], [25, 36, 7, "enum_FIELD"], [39, 43, 7, "enum_FIELD"], [46, 57, 7, "enum_FIELD"], [80, 84, 7, "enum_FIELD"], [87, 98, 7, "enum_FIELD"], [101, 105, 7, "enum_FIELD"], [108, 119, 7, "enum_FIELD"], [142, 146, 7, "enum_FIELD"], [149, 160, 7, "enum_FIELD"], [20, 14, 7, "enum_FIELD"], [36, 27, 7, "enum_FIELD"], [43, 41, 7, "enum_FIELD"], [57, 48, 7, "enum_FIELD"], [72, 76, 7, "enum_FIELD"], [84, 82, 7, "enum_FIELD"], [98, 89, 7, "enum_FIELD"], [105, 103, 7, "enum_FIELD"], [119, 110, 7, "enum_FIELD"], [134, 138, 7, "enum_FIELD"], [146, 144, 7, "enum_FIELD"], [160, 151, 7, "enum_FIELD"], [14, 12, 7, "enum_FIELD"], [27, 26, 7, "enum_FIELD"], [31, 30, 7, "enum_FIELD"], [41, 40, 7, "enum_FIELD"], [48, 47, 7, "enum_FIELD"], [52, 51, 7, "enum_FIELD"], [67, 63, 7, "enum_FIELD"], [76, 74, 7, "enum_FIELD"], [82, 81, 7, "enum_FIELD"], [89, 88, 7, "enum_FIELD"], [93, 92, 7, "enum_FIELD"], [103, 102, 7, "enum_FIELD"], [110, 109, 7, "enum_FIELD"], [114, 113, 7, "enum_FIELD"], [129, 125, 7, "enum_FIELD"], [138, 136, 7, "enum_FIELD"], [144, 143, 7, "enum_FIELD"], [151, 150, 7, "enum_FIELD"], [155, 154, 7, "enum_FIELD"], [12, 11, 7, "enum_FIELD"], [33, 32, 7, "enum_FIELD"], [54, 53, 7, "enum_FIELD"], [63, 62, 7, "enum_FIELD"], [74, 73, 7, "enum_FIELD"], [95, 94, 7, "enum_FIELD"], [116, 115, 7, "enum_FIELD"], [125, 124, 7, "enum_FIELD"], [136, 135, 7, "enum_FIELD"], [157, 156, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [26, 2, 10, "enum_LAST_LEXICAL_USE"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [32, 9, 10, "enum_LAST_LEXICAL_USE"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [40, 32, 10, "enum_LAST_LEXICAL_USE"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [47, 26, 10, "enum_LAST_LEXICAL_USE"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [51, 30, 10, "enum_LAST_LEXICAL_USE"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [53, 40, 10, "enum_LAST_LEXICAL_USE"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 61, 9, "enum_NEXT_SYNTAX"], [62, 47, 10, "enum_LAST_LEXICAL_USE"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 72, 9, "enum_NEXT_SYNTAX"], [73, 53, 10, "enum_LAST_LEXICAL_USE"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 80, 9, "enum_NEXT_SYNTAX"], [81, 73, 10, "enum_LAST_LEXICAL_USE"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [88, 62, 10, "enum_LAST_LEXICAL_USE"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [92, 51, 10, "enum_LAST_LEXICAL_USE"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [94, 81, 10, "enum_LAST_LEXICAL_USE"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [102, 94, 10, "enum_LAST_LEXICAL_USE"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [109, 88, 10, "enum_LAST_LEXICAL_USE"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [113, 92, 10, "enum_LAST_LEXICAL_USE"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [115, 102, 10, "enum_LAST_LEXICAL_USE"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 123, 9, "enum_NEXT_SYNTAX"], [124, 109, 10, "enum_LAST_LEXICAL_USE"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [128, 66, 10, "enum_LAST_LEXICAL_USE"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 134, 9, "enum_NEXT_SYNTAX"], [135, 115, 10, "enum_LAST_LEXICAL_USE"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 142, 9, "enum_NEXT_SYNTAX"], [143, 135, 10, "enum_LAST_LEXICAL_USE"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [150, 124, 10, "enum_LAST_LEXICAL_USE"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [154, 113, 10, "enum_LAST_LEXICAL_USE"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [156, 143, 10, "enum_LAST_LEXICAL_USE"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [6, 8, 1, "enum_CFG_NEXT"], [8, 25, 1, "enum_CFG_NEXT"], [25, 39, 1, "enum_CFG_NEXT"], [39, 46, 1, "enum_CFG_NEXT"], [46, 80, 1, "enum_CFG_NEXT"], [80, 87, 1, "enum_CFG_NEXT"], [87, 101, 1, "enum_CFG_NEXT"], [101, 108, 1, "enum_CFG_NEXT"], [108, 142, 1, "enum_CFG_NEXT"], [142, 149, 1, "enum_CFG_NEXT"], [26, 2, 3, "enum_LAST_WRITE"], [32, 9, 3, "enum_LAST_WRITE"], [40, 32, 2, "enum_LAST_READ"], [40, 9, 3, "enum_LAST_WRITE"], [47, 26, 2, "enum_LAST_READ"], [47, 2, 3, "enum_LAST_WRITE"], [51, 30, 2, "enum_LAST_READ"], [53, 40, 2, "enum_LAST_READ"], [53, 9, 3, "enum_LAST_WRITE"], [81, 53, 2, "enum_LAST_READ"], [81, 9, 3, "enum_LAST_WRITE"], [88, 47, 2, "enum_LAST_READ"], [88, 2, 3, "enum_LAST_WRITE"], [92, 51, 2, "enum_LAST_READ"], [94, 81, 2, "enum_LAST_READ"], [94, 9, 3, "enum_LAST_WRITE"], [102, 94, 2, "enum_LAST_READ"], [102, 9, 3, "enum_LAST_WRITE"], [109, 88, 2, "enum_LAST_READ"], [109, 2, 3, "enum_LAST_WRITE"], [113, 92, 2, "enum_LAST_READ"], [115, 102, 2, "enum_LAST_READ"], [115, 9, 3, "enum_LAST_WRITE"], [143, 115, 2, "enum_LAST_READ"], [143, 9, 3, "enum_LAST_WRITE"], [150, 109, 2, "enum_LAST_READ"], [150, 2, 3, "enum_LAST_WRITE"], [154, 113, 2, "enum_LAST_READ"], [156, 143, 2, "enum_LAST_READ"], [156, 9, 3, "enum_LAST_WRITE"], [9, 11, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "oppia", "repo": "oppia", "path": "core/domain/collection_domain_test.py", "id": 37416, "has_bug": false, "code_full": "import unittest\nfrom typing import List\n\n\nclass Node:\n    exploration_id: str\n\n\nclass collection_domain:\n    class Collection:\n        def __init__(self):\n            self.nodes: List[Node] = []\n\n        @classmethod\n        def create_default_collection(cls, collection_id: str) -> 'collection_domain.Collection':\n            return cls()\n        \n        def add_node(self, exploration_id: str):\n            pass\n\n        def delete_node(self, exploration_id: str):\n            pass\n\n\nclass Class(unittest.TestCase):\n    def test_add_delete_node(self):\n        \"\"\"Test that add_node and delete_node fail in the correct situations.\n        \"\"\"\n        collection: collection_domain.Collection = collection_domain.Collection.create_default_collection(\n            '0')\n        self.assertEqual(len(collection.nodes), 0)\n\n        collection.add_node('test_exp')\n        self.assertEqual(len(collection.nodes), 1)\n\n        with self.assertRaisesRegexp(\n            ValueError,\n            'Exploration is already part of this collection: test_exp'\n            ):\n            collection.add_node('test_exp')\n\n        collection.add_node('another_exp')\n        self.assertEqual(len(collection.nodes), 2)\n\n        collection.delete_node('another_exp')\n        self.assertEqual(len(collection.nodes), 1)\n\n        with self.assertRaisesRegexp(\n            ValueError,\n            'Exploration is not part of this collection: another_exp'\n            ):\n            collection.delete_node('another_exp')\n\n        collection.delete_node('test_exp')\n        self.assertEqual(len(collection.nodes), 0)\n", "code": "def test_add_delete_node(self):\n    \"\"\"Test that add_node and delete_node fail in the correct situations.\n    \"\"\"\n    collection: collection_domain.Collection = collection_domain.Collection.create_default_collection(\n        '0')\n    self.assertEqual(len(collection.nodes), 0)\n\n    collection.add_node('test_exp')\n    self.assertEqual(len(collection.nodes), 1)\n\n    with self.assertRaisesRegexp(\n        ValueError,\n        'Exploration is already part of this collection: test_exp'\n        ):\n        collection.add_node('test_exp')\n\n    collection.add_node('another_exp')\n    self.assertEqual(len(collection.nodes), 2)\n\n    collection.delete_node('another_exp')\n    self.assertEqual(len(collection.nodes), 1)\n\n    with self.assertRaisesRegexp(\n        ValueError,\n        'Exploration is not part of this collection: another_exp'\n        ):\n        collection.delete_node('another_exp')\n\n    collection.delete_node('test_exp')\n    self.assertEqual(len(collection.nodes), 0)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "214d0dc53fabe806d0c44a87c57bead9565ee8e7"}
{"source_tokens": ["#NEWLINE#", "def get_snapshots(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "snapshots", "=", "copy", "(", "self", ".", "_snap_shots", ")", "#NEWLINE#", "blocking_stats", "=", "self", ".", "get_blocking_time", "(", ")", "#NEWLINE#", "if", "blocking_stats", ":", "#NEWLINE#", "#INDENT#", "for", "(", "test_id", ",", "key", ")", "in", "blocking_stats", ".", "keys", "(", ")", ":", "#NEWLINE#", "#INDENT#", "snapshots", "[", "(", "test_id", ",", "key", ")", "]", ".", "append", "(", "(", "'Greelet %s blocked a TOTAL of %fs.'", "%", "(", "key", ",", "blocking_stats", "[", "(", "test_id", ",", "key", ")", "]", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "return", "snapshots"], "edges": [[6, 10, 7, "enum_FIELD"], [15, 21, 7, "enum_FIELD"], [24, 25, 7, "enum_FIELD"], [75, 76, 7, "enum_FIELD"], [10, 9, 7, "enum_FIELD"], [21, 19, 7, "enum_FIELD"], [35, 32, 7, "enum_FIELD"], [35, 39, 7, "enum_FIELD"], [12, 11, 7, "enum_FIELD"], [19, 18, 7, "enum_FIELD"], [39, 37, 7, "enum_FIELD"], [43, 54, 7, "enum_FIELD"], [37, 36, 7, "enum_FIELD"], [54, 52, 7, "enum_FIELD"], [52, 45, 7, "enum_FIELD"], [57, 56, 7, "enum_FIELD"], [57, 60, 7, "enum_FIELD"], [45, 44, 7, "enum_FIELD"], [45, 48, 7, "enum_FIELD"], [62, 61, 7, "enum_FIELD"], [62, 65, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [11, 2, 10, "enum_LAST_LEXICAL_USE"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [18, 11, 10, "enum_LAST_LEXICAL_USE"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 24, 9, "enum_NEXT_SYNTAX"], [25, 16, 10, "enum_LAST_LEXICAL_USE"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [36, 25, 10, "enum_LAST_LEXICAL_USE"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 43, 9, "enum_NEXT_SYNTAX"], [44, 7, 10, "enum_LAST_LEXICAL_USE"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [47, 31, 10, "enum_LAST_LEXICAL_USE"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [49, 33, 10, "enum_LAST_LEXICAL_USE"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [59, 49, 10, "enum_LAST_LEXICAL_USE"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [61, 36, 10, "enum_LAST_LEXICAL_USE"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [64, 47, 10, "enum_LAST_LEXICAL_USE"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [66, 59, 10, "enum_LAST_LEXICAL_USE"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 75, 9, "enum_NEXT_SYNTAX"], [76, 44, 10, "enum_LAST_LEXICAL_USE"], [75, 76, 9, "enum_NEXT_SYNTAX"], [6, 15, 1, "enum_CFG_NEXT"], [15, 25, 1, "enum_CFG_NEXT"], [25, 75, 1, "enum_CFG_NEXT"], [25, 39, 1, "enum_CFG_NEXT"], [39, 32, 1, "enum_CFG_NEXT"], [32, 75, 1, "enum_CFG_NEXT"], [32, 43, 1, "enum_CFG_NEXT"], [43, 32, 1, "enum_CFG_NEXT"], [11, 2, 3, "enum_LAST_WRITE"], [18, 11, 2, "enum_LAST_READ"], [18, 2, 3, "enum_LAST_WRITE"], [25, 16, 3, "enum_LAST_WRITE"], [36, 25, 2, "enum_LAST_READ"], [36, 16, 3, "enum_LAST_WRITE"], [31, 64, 2, "enum_LAST_READ"], [31, 31, 3, "enum_LAST_WRITE"], [33, 66, 2, "enum_LAST_READ"], [33, 33, 3, "enum_LAST_WRITE"], [44, 44, 2, "enum_LAST_READ"], [44, 7, 3, "enum_LAST_WRITE"], [47, 64, 2, "enum_LAST_READ"], [47, 31, 3, "enum_LAST_WRITE"], [49, 66, 2, "enum_LAST_READ"], [49, 33, 3, "enum_LAST_WRITE"], [59, 49, 2, "enum_LAST_READ"], [59, 33, 3, "enum_LAST_WRITE"], [61, 61, 2, "enum_LAST_READ"], [61, 36, 2, "enum_LAST_READ"], [61, 16, 3, "enum_LAST_WRITE"], [64, 47, 2, "enum_LAST_READ"], [64, 31, 3, "enum_LAST_WRITE"], [66, 59, 2, "enum_LAST_READ"], [66, 33, 3, "enum_LAST_WRITE"], [76, 44, 2, "enum_LAST_READ"], [76, 7, 3, "enum_LAST_WRITE"], [7, 9, 4, "enum_COMPUTED_FROM"], [7, 11, 4, "enum_COMPUTED_FROM"], [16, 18, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "ooici", "repo": "pyon", "path": "pyon/util/gevent_block_plugin.py", "id": 31403, "has_bug": false, "code_full": "from copy import copy\nfrom typing import Any, Dict, List, Tuple\n\n\nclass Class:\n    _snap_shots: Dict[Tuple[int, str], List[str]]\n\n    def get_blocking_time(self) -> Dict[Tuple[int, str], float]:\n        return {}\n\n    def get_snapshots(self) -> Dict[Tuple[int, str], List[str]]:\n        snapshots: Dict[Tuple[int, str], List[str]] = copy(self._snap_shots)\n        blocking_stats: Dict[Tuple[int, str], float] = self.get_blocking_time()\n        if blocking_stats:\n            for test_id, key in blocking_stats.keys():\n                snapshots[(test_id,key)].append('Greelet %s blocked a TOTAL of %fs.' % (key, blocking_stats[(test_id,key)]))\n        return snapshots\n", "code": "def get_snapshots(self) -> Dict[Tuple[int, str], List[str]]:\n    snapshots: Dict[Tuple[int, str], List[str]] = copy(self._snap_shots)\n    blocking_stats: Dict[Tuple[int, str], float] = self.get_blocking_time()\n    if blocking_stats:\n        for test_id, key in blocking_stats.keys():\n            snapshots[(test_id,key)].append('Greelet %s blocked a TOTAL of %fs.' % (key, blocking_stats[(test_id,key)]))\n    return snapshots\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "fd8daa4c620db5e5f2a307ba9f73bbd33fd00272"}
{"source_tokens": ["#NEWLINE#", "def __init__(", "self", ",", "title", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "super", "(", "TopLevel", ",", "self", ")", ".", "__init__", "(", ")", "#NEWLINE#", "self", ".", "_fullscreen", "=", "False", "#NEWLINE#", "widget", "=", "GtkHelp", ".", "TopLevel", "(", ")", "#NEWLINE#", "self", ".", "widget", "=", "widget", "#NEWLINE#", "widget", ".", "set_border_width", "(", "0", ")", "#NEWLINE#", "widget", ".", "connect", "(", "'destroy'", ",", "self", ".", "_quit", ")", "#NEWLINE#", "widget", ".", "connect", "(", "'delete_event'", ",", "self", ".", "_close_event", ")", "#NEWLINE#", "widget", ".", "connect", "(", "'window_state_event'", ",", "self", ".", "_window_event", ")", "#NEWLINE#", "if", "(", "not", "(", "title", "is", "None", ")", ")", ":", "#NEWLINE#", "#INDENT#", "widget", ".", "set_title", "(", "title", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "enable_callback", "(", "'close'", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [10, 19, 7, "enum_FIELD"], [21, 26, 7, "enum_FIELD"], [27, 33, 7, "enum_FIELD"], [35, 40, 7, "enum_FIELD"], [41, 45, 7, "enum_FIELD"], [48, 54, 7, "enum_FIELD"], [59, 65, 7, "enum_FIELD"], [70, 76, 7, "enum_FIELD"], [82, 84, 7, "enum_FIELD"], [101, 105, 7, "enum_FIELD"], [19, 17, 7, "enum_FIELD"], [23, 22, 7, "enum_FIELD"], [33, 31, 7, "enum_FIELD"], [37, 36, 7, "enum_FIELD"], [45, 43, 7, "enum_FIELD"], [54, 50, 7, "enum_FIELD"], [65, 61, 7, "enum_FIELD"], [76, 72, 7, "enum_FIELD"], [84, 87, 7, "enum_FIELD"], [93, 97, 7, "enum_FIELD"], [105, 103, 7, "enum_FIELD"], [17, 14, 7, "enum_FIELD"], [31, 30, 7, "enum_FIELD"], [43, 42, 7, "enum_FIELD"], [50, 49, 7, "enum_FIELD"], [56, 55, 7, "enum_FIELD"], [61, 60, 7, "enum_FIELD"], [67, 66, 7, "enum_FIELD"], [72, 71, 7, "enum_FIELD"], [78, 77, 7, "enum_FIELD"], [87, 86, 7, "enum_FIELD"], [97, 95, 7, "enum_FIELD"], [103, 102, 7, "enum_FIELD"], [14, 11, 7, "enum_FIELD"], [95, 94, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [15, 2, 10, "enum_LAST_LEXICAL_USE"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [22, 15, 10, "enum_LAST_LEXICAL_USE"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [36, 22, 10, "enum_LAST_LEXICAL_USE"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [40, 28, 10, "enum_LAST_LEXICAL_USE"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [42, 40, 10, "enum_LAST_LEXICAL_USE"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [49, 42, 10, "enum_LAST_LEXICAL_USE"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [55, 36, 10, "enum_LAST_LEXICAL_USE"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [60, 49, 10, "enum_LAST_LEXICAL_USE"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [66, 55, 10, "enum_LAST_LEXICAL_USE"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [71, 60, 10, "enum_LAST_LEXICAL_USE"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [77, 66, 10, "enum_LAST_LEXICAL_USE"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [86, 4, 10, "enum_LAST_LEXICAL_USE"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 93, 9, "enum_NEXT_SYNTAX"], [94, 71, 10, "enum_LAST_LEXICAL_USE"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [98, 86, 10, "enum_LAST_LEXICAL_USE"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 101, 9, "enum_NEXT_SYNTAX"], [102, 77, 10, "enum_LAST_LEXICAL_USE"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [6, 1, 1, "enum_CFG_NEXT"], [3, 10, 1, "enum_CFG_NEXT"], [10, 21, 1, "enum_CFG_NEXT"], [21, 27, 1, "enum_CFG_NEXT"], [27, 35, 1, "enum_CFG_NEXT"], [35, 41, 1, "enum_CFG_NEXT"], [41, 48, 1, "enum_CFG_NEXT"], [48, 59, 1, "enum_CFG_NEXT"], [59, 70, 1, "enum_CFG_NEXT"], [70, 84, 1, "enum_CFG_NEXT"], [84, 101, 1, "enum_CFG_NEXT"], [84, 93, 1, "enum_CFG_NEXT"], [93, 101, 1, "enum_CFG_NEXT"], [15, 2, 3, "enum_LAST_WRITE"], [22, 15, 2, "enum_LAST_READ"], [22, 2, 3, "enum_LAST_WRITE"], [40, 28, 3, "enum_LAST_WRITE"], [36, 22, 2, "enum_LAST_READ"], [36, 2, 3, "enum_LAST_WRITE"], [42, 40, 2, "enum_LAST_READ"], [42, 28, 3, "enum_LAST_WRITE"], [49, 42, 2, "enum_LAST_READ"], [49, 28, 3, "enum_LAST_WRITE"], [55, 36, 2, "enum_LAST_READ"], [55, 2, 3, "enum_LAST_WRITE"], [60, 49, 2, "enum_LAST_READ"], [60, 28, 3, "enum_LAST_WRITE"], [66, 55, 2, "enum_LAST_READ"], [66, 2, 3, "enum_LAST_WRITE"], [71, 60, 2, "enum_LAST_READ"], [71, 28, 3, "enum_LAST_WRITE"], [77, 66, 2, "enum_LAST_READ"], [77, 2, 3, "enum_LAST_WRITE"], [86, 4, 3, "enum_LAST_WRITE"], [94, 71, 2, "enum_LAST_READ"], [94, 28, 3, "enum_LAST_WRITE"], [98, 86, 2, "enum_LAST_READ"], [98, 4, 3, "enum_LAST_WRITE"], [102, 77, 2, "enum_LAST_READ"], [102, 2, 3, "enum_LAST_WRITE"], [28, 30, 4, "enum_COMPUTED_FROM"], [37, 40, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "ejeschke", "repo": "ginga", "path": "ginga/gtkw/Widgets.py", "id": 14627, "has_bug": false, "code_full": "\nfrom typing import Callable, Optional\n\n\nclass ContainerBase:\n    def __init__(self):\n        pass\n\n\nclass GtkHelp:\n    class TopLevel:\n        def set_border_width(self, width: int):\n            pass\n\n        def connect(self, event: str, callback: Callable):\n            pass\n\n        def set_title(self, title: str):\n            pass\n\n\nclass TopLevel(ContainerBase):\n    _fullscreen: bool\n\n    def __init__(self, title=None):\n        super(TopLevel, self).__init__()\n\n        self._fullscreen = False\n\n        widget: GtkHelp.TopLevel = GtkHelp.TopLevel()\n        self.widget = widget\n        widget.set_border_width(0)\n        widget.connect(\"destroy\", self._quit)\n        widget.connect(\"delete_event\", self._close_event)\n        widget.connect(\"window_state_event\", self._window_event)\n\n        if not title is None:\n            widget.set_title(title)\n\n        self.enable_callback('close')\n\n    def _quit(self, *args):\n        pass\n\n    def _close_event(self, *args):\n        pass\n\n    def _window_event(self, *args):\n        pass\n\n    def enable_callback(self, event: str):\n        pass\n", "code": "def __init__(self, title=None):\n    super(TopLevel, self).__init__()\n\n    self._fullscreen = False\n\n    widget: GtkHelp.TopLevel = GtkHelp.TopLevel()\n    self.widget = widget\n    widget.set_border_width(0)\n    widget.connect(\"destroy\", self._quit)\n    widget.connect(\"delete_event\", self._close_event)\n    widget.connect(\"window_state_event\", self._window_event)\n\n    if not title is None:\n        widget.set_title(title)\n\n    self.enable_callback('close')\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "34c9403508b18b6760fedecf29e2e76ad3badfa5"}
{"source_tokens": ["#NEWLINE#", "@", "Utils", ".", "timeIt", "#NEWLINE#", "def run(", "self", ",", "m0", ")", ":", "#NEWLINE#", "#INDENT#", "'run(m0)\\n\\n        Runs the inversion!\\n\\n    '", "#NEWLINE#", "self", ".", "invProb", ".", "startup", "(", "m0", ")", "#NEWLINE#", "self", ".", "directiveList", ".", "call", "(", "'initialize'", ")", "#NEWLINE#", "self", ".", "m", "=", "self", ".", "opt", ".", "minimize", "(", "self", ".", "invProb", ".", "evalFunction", ",", "self", ".", "invProb", ".", "curModel", ")", "#NEWLINE#", "self", ".", "directiveList", ".", "call", "(", "'finish'", ")", "#NEWLINE#", "return", "self", ".", "m"], "edges": [[1, 8, 7, "enum_FIELD"], [13, 14, 7, "enum_FIELD"], [15, 21, 7, "enum_FIELD"], [24, 30, 7, "enum_FIELD"], [33, 49, 7, "enum_FIELD"], [56, 62, 7, "enum_FIELD"], [66, 68, 7, "enum_FIELD"], [3, 2, 7, "enum_FIELD"], [21, 19, 7, "enum_FIELD"], [30, 28, 7, "enum_FIELD"], [35, 34, 7, "enum_FIELD"], [49, 41, 7, "enum_FIELD"], [62, 60, 7, "enum_FIELD"], [68, 67, 7, "enum_FIELD"], [19, 17, 7, "enum_FIELD"], [28, 26, 7, "enum_FIELD"], [41, 39, 7, "enum_FIELD"], [47, 45, 7, "enum_FIELD"], [53, 51, 7, "enum_FIELD"], [60, 58, 7, "enum_FIELD"], [17, 16, 7, "enum_FIELD"], [26, 25, 7, "enum_FIELD"], [39, 38, 7, "enum_FIELD"], [45, 44, 7, "enum_FIELD"], [51, 50, 7, "enum_FIELD"], [58, 57, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [16, 7, 10, "enum_LAST_LEXICAL_USE"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [22, 9, 10, "enum_LAST_LEXICAL_USE"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [25, 16, 10, "enum_LAST_LEXICAL_USE"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [34, 25, 10, "enum_LAST_LEXICAL_USE"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [38, 34, 10, "enum_LAST_LEXICAL_USE"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [44, 38, 10, "enum_LAST_LEXICAL_USE"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [50, 44, 10, "enum_LAST_LEXICAL_USE"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [57, 50, 10, "enum_LAST_LEXICAL_USE"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 66, 9, "enum_NEXT_SYNTAX"], [67, 57, 10, "enum_LAST_LEXICAL_USE"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [3, 1, 1, "enum_CFG_NEXT"], [8, 13, 1, "enum_CFG_NEXT"], [13, 15, 1, "enum_CFG_NEXT"], [15, 24, 1, "enum_CFG_NEXT"], [24, 33, 1, "enum_CFG_NEXT"], [33, 56, 1, "enum_CFG_NEXT"], [56, 66, 1, "enum_CFG_NEXT"], [16, 7, 3, "enum_LAST_WRITE"], [22, 9, 3, "enum_LAST_WRITE"], [25, 16, 2, "enum_LAST_READ"], [25, 7, 3, "enum_LAST_WRITE"], [38, 25, 2, "enum_LAST_READ"], [38, 7, 3, "enum_LAST_WRITE"], [44, 38, 2, "enum_LAST_READ"], [44, 7, 3, "enum_LAST_WRITE"], [50, 44, 2, "enum_LAST_READ"], [50, 7, 3, "enum_LAST_WRITE"], [34, 50, 2, "enum_LAST_READ"], [34, 7, 3, "enum_LAST_WRITE"], [57, 34, 2, "enum_LAST_READ"], [57, 7, 3, "enum_LAST_WRITE"], [67, 57, 2, "enum_LAST_READ"], [67, 7, 3, "enum_LAST_WRITE"], [35, 38, 4, "enum_COMPUTED_FROM"], [35, 44, 4, "enum_COMPUTED_FROM"], [35, 50, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "simpeg", "repo": "simpeg", "path": "SimPEG/Inversion.py", "id": 51015, "has_bug": false, "code_full": "from typing import Any\n\nimport numpy as np\n\n\nclass InversionProb:\n    def startup(self, m0: Any):\n        pass\n\n    def evalFunction(self, m: Any) -> Any:\n        pass\n\n    @property\n    def model(self) -> np.ndarray:\n        return np.array([])\n\n\nclass DirectiveList:\n    def call(self, name: str):\n        pass\n\n\nclass Optimization:\n    def minimize(self, evalFunction: Any, model: np.ndarray) -> np.ndarray:\n        return np.array([])\n\n\nclass Class:\n    invProb: InversionProb\n    directiveList: DirectiveList\n    opt: Optimization\n    m: np.ndarray\n\n\n    def run(self, m0: Any) -> np.ndarray:\n        \"\"\"run(m0)\n\n            Runs the inversion!\n\n        \"\"\"\n        self.invProb.startup(m0)\n        self.directiveList.call('initialize')\n        print('model has any nan: {:b}'.format(np.any(np.isnan(self.invProb.model))))\n        self.m = self.opt.minimize(self.invProb.evalFunction, self.invProb.model)\n        self.directiveList.call('finish')\n\n        return self.m\n", "code": "def run(self, m0: Any) -> np.ndarray:\n    \"\"\"run(m0)\n\n        Runs the inversion!\n\n    \"\"\"\n    self.invProb.startup(m0)\n    self.directiveList.call('initialize')\n    print('model has any nan: {:b}'.format(np.any(np.isnan(self.invProb.model))))\n    self.m = self.opt.minimize(self.invProb.evalFunction, self.invProb.model)\n    self.directiveList.call('finish')\n\n    return self.m\n", "type_checked_pytype": true, "type_checked_mypy": false, "type_error_label": "str-format", "hash": "616b7a85a43452641ccdbfb057e388fa47c8df39"}
{"source_tokens": ["#NEWLINE#", "@", "njit", "#NEWLINE#", "def foo(", "a", ",", "b", ")", ":", "#NEWLINE#", "#INDENT#", "return", "(", "(", "b", "-", "a", ")", "+", "(", "-", "a", ")", ")"], "edges": [[1, 6, 7, "enum_FIELD"], [12, 19, 7, "enum_FIELD"], [19, 16, 7, "enum_FIELD"], [19, 21, 7, "enum_FIELD"], [16, 15, 7, "enum_FIELD"], [16, 17, 7, "enum_FIELD"], [21, 22, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [15, 7, 10, "enum_LAST_LEXICAL_USE"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [17, 5, 10, "enum_LAST_LEXICAL_USE"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [22, 17, 10, "enum_LAST_LEXICAL_USE"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [2, 1, 1, "enum_CFG_NEXT"], [6, 12, 1, "enum_CFG_NEXT"], [15, 7, 3, "enum_LAST_WRITE"], [17, 5, 3, "enum_LAST_WRITE"], [22, 17, 2, "enum_LAST_READ"], [22, 5, 3, "enum_LAST_WRITE"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "numba", "repo": "numba", "path": "numba/tests/test_array_exprs.py", "id": 29547, "has_bug": false, "code_full": "import numpy as np\n\n\ndef foo(a: np.ndarray, b: float) -> np.ndarray:\n    return b - a + -a\n", "code": "def foo(a: np.ndarray, b: float) -> np.ndarray:\n    return b - a + -a\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "fa79983920577d63bebdd7a6fa83e8991fef47d9"}
{"source_tokens": ["#NEWLINE#", "def match(", "self", ",", "field", ",", "value", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Helper function to generate a match-query\\n\\n        @param field: the Field\\n        @param value: the value\\n\\n        @return: a Query\\n    '", "#NEWLINE#", "ftype", "=", "str", "(", "field", ".", "type", ")", "#NEWLINE#", "ignore_case", "=", "self", ".", "ignore_case", "#NEWLINE#", "if", "(", "ignore_case", "and", "hasattr", "(", "value", ",", "'lower'", ")", "and", "(", "ftype", "in", "(", "'string'", ",", "'text'", ")", ")", ")", ":", "#NEWLINE#", "#INDENT#", "query", "=", "(", "field", ".", "lower", "(", ")", "==", "s3_unicode", "(", "value", ")", ".", "lower", "(", ")", ".", "encode", "(", "'utf-8'", ")", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "query", "=", "(", "field", "==", "value", ")", "#NEWLINE#", "#UNINDENT#", "return", "query"], "edges": [[1, 3, 7, "enum_FIELD"], [10, 11, 7, "enum_FIELD"], [12, 16, 7, "enum_FIELD"], [21, 25, 7, "enum_FIELD"], [49, 31, 7, "enum_FIELD"], [90, 91, 7, "enum_FIELD"], [16, 15, 7, "enum_FIELD"], [25, 24, 7, "enum_FIELD"], [51, 60, 7, "enum_FIELD"], [80, 85, 7, "enum_FIELD"], [18, 17, 7, "enum_FIELD"], [35, 32, 7, "enum_FIELD"], [41, 40, 7, "enum_FIELD"], [60, 58, 7, "enum_FIELD"], [85, 84, 7, "enum_FIELD"], [58, 56, 7, "enum_FIELD"], [71, 69, 7, "enum_FIELD"], [56, 55, 7, "enum_FIELD"], [69, 67, 7, "enum_FIELD"], [67, 65, 7, "enum_FIELD"], [65, 62, 7, "enum_FIELD"], [62, 61, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [17, 4, 10, "enum_LAST_LEXICAL_USE"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [24, 2, 10, "enum_LAST_LEXICAL_USE"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [30, 22, 10, "enum_LAST_LEXICAL_USE"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [34, 6, 10, "enum_LAST_LEXICAL_USE"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [40, 13, 10, "enum_LAST_LEXICAL_USE"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [55, 17, 10, "enum_LAST_LEXICAL_USE"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [63, 34, 10, "enum_LAST_LEXICAL_USE"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 80, 9, "enum_NEXT_SYNTAX"], [81, 52, 10, "enum_LAST_LEXICAL_USE"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [84, 55, 10, "enum_LAST_LEXICAL_USE"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [86, 63, 10, "enum_LAST_LEXICAL_USE"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 90, 9, "enum_NEXT_SYNTAX"], [91, 81, 10, "enum_LAST_LEXICAL_USE"], [90, 91, 9, "enum_NEXT_SYNTAX"], [3, 10, 1, "enum_CFG_NEXT"], [10, 12, 1, "enum_CFG_NEXT"], [12, 21, 1, "enum_CFG_NEXT"], [21, 31, 1, "enum_CFG_NEXT"], [31, 51, 1, "enum_CFG_NEXT"], [31, 80, 1, "enum_CFG_NEXT"], [51, 90, 1, "enum_CFG_NEXT"], [80, 90, 1, "enum_CFG_NEXT"], [17, 4, 3, "enum_LAST_WRITE"], [24, 2, 3, "enum_LAST_WRITE"], [30, 22, 3, "enum_LAST_WRITE"], [34, 6, 3, "enum_LAST_WRITE"], [40, 13, 3, "enum_LAST_WRITE"], [55, 17, 2, "enum_LAST_READ"], [55, 4, 3, "enum_LAST_WRITE"], [63, 34, 2, "enum_LAST_READ"], [63, 6, 3, "enum_LAST_WRITE"], [84, 17, 2, "enum_LAST_READ"], [84, 4, 3, "enum_LAST_WRITE"], [86, 34, 2, "enum_LAST_READ"], [86, 6, 3, "enum_LAST_WRITE"], [91, 52, 3, "enum_LAST_WRITE"], [91, 81, 3, "enum_LAST_WRITE"], [13, 15, 4, "enum_COMPUTED_FROM"], [13, 17, 4, "enum_COMPUTED_FROM"], [22, 24, 4, "enum_COMPUTED_FROM"], [52, 55, 4, "enum_COMPUTED_FROM"], [52, 61, 4, "enum_COMPUTED_FROM"], [52, 63, 4, "enum_COMPUTED_FROM"], [81, 84, 4, "enum_COMPUTED_FROM"], [81, 86, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "sahana", "repo": "eden", "path": "modules/s3/s3import.py", "id": 45577, "has_bug": false, "code_full": "from typing import Any, Union\n\n\nclass Query:\n    pass\n\n\nclass Field:\n    type: str\n\n    def lower(self) -> \"Field\":\n        return self\n    \n    def __eq__(self, other: Any) -> Query:\n        return Query()\n\n\ndef s3_unicode(value: Any) -> str:\n    return \"\"\n\n\nclass Class:\n    ignore_case: bool\n\n    def match(self, field: Field, value: Any) -> Query:\n        \"\"\"\n            Helper function to generate a match-query\n\n            @param field: the Field\n            @param value: the value\n\n            @return: a Query\n        \"\"\"\n\n        ftype: str = str(field.type)\n        ignore_case: bool = self.ignore_case\n\n        if ignore_case and             hasattr(value, \"lower\") and ftype in (\"string\", \"text\"):\n            # NB Must convert to unicode before lower() in order to correctly\n            #    convert certain unicode-characters (e.g. \u0130=>i, or \u1ebc=>\u1ebd)\n            # => PostgreSQL LOWER() on Windows may not convert correctly,\n            #    which seems to be a locale issue:\n            #    http://stackoverflow.com/questions/18507589/the-lower-function-on-international-characters-in-postgresql\n            # => works fine on Debian servers if the locale is a .UTF-8 before\n            #    the Postgres cluster is created\n            query: Query= (field.lower() == s3_unicode(value).lower().encode(\"utf-8\"))\n        else:\n            query: Query = (field == value)\n        return query\n", "code": "def match(self, field: Field, value: Any) -> Query:\n    \"\"\"\n        Helper function to generate a match-query\n\n        @param field: the Field\n        @param value: the value\n\n        @return: a Query\n    \"\"\"\n\n    ftype: str = str(field.type)\n    ignore_case: bool = self.ignore_case\n\n    if ignore_case and         hasattr(value, \"lower\") and ftype in (\"string\", \"text\"):\n        # NB Must convert to unicode before lower() in order to correctly\n        #    convert certain unicode-characters (e.g. \u0130=>i, or \u1ebc=>\u1ebd)\n        # => PostgreSQL LOWER() on Windows may not convert correctly,\n        #    which seems to be a locale issue:\n        #    http://stackoverflow.com/questions/18507589/the-lower-function-on-international-characters-in-postgresql\n        # => works fine on Debian servers if the locale is a .UTF-8 before\n        #    the Postgres cluster is created\n        query: Query= (field.lower() == s3_unicode(value).lower().encode(\"utf-8\"))\n    else:\n        query: Query = (field == value)\n    return query\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "3890dff869eba446cc1aac4cdbd8bd44df1af297"}
{"source_tokens": ["#NEWLINE#", "def test_set_deployment_priorities_many_cntrls(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "nodes", "=", "[", "{", "'role'", ":", "'zabbix-server'", "}", ",", "{", "'role'", ":", "'mongo'", "}", ",", "{", "'role'", ":", "'primary-mongo'", "}", ",", "{", "'role'", ":", "'primary-controller'", "}", ",", "{", "'role'", ":", "'controller'", "}", ",", "{", "'role'", ":", "'controller'", "}", ",", "{", "'role'", ":", "'controller'", "}", ",", "{", "'role'", ":", "'controller'", "}", ",", "{", "'role'", ":", "'controller'", "}", ",", "{", "'role'", ":", "'controller'", "}", ",", "{", "'role'", ":", "'controller'", "}", ",", "{", "'role'", ":", "'controller'", "}", ",", "{", "'role'", ":", "'ceph-osd'", "}", "]", "#NEWLINE#", "self", ".", "add_default_params", "(", "nodes", ")", "#NEWLINE#", "self", ".", "serializer", ".", "set_deployment_priorities", "(", "nodes", ")", "#NEWLINE#", "expected_priorities", "=", "[", "{", "'role'", ":", "'zabbix-server'", ",", "'priority'", ":", "100", "}", ",", "{", "'role'", ":", "'mongo'", ",", "'priority'", ":", "200", "}", ",", "{", "'role'", ":", "'primary-mongo'", ",", "'priority'", ":", "300", "}", ",", "{", "'role'", ":", "'primary-controller'", ",", "'priority'", ":", "400", "}", ",", "{", "'role'", ":", "'controller'", ",", "'priority'", ":", "500", "}", ",", "{", "'role'", ":", "'controller'", ",", "'priority'", ":", "500", "}", ",", "{", "'role'", ":", "'controller'", ",", "'priority'", ":", "500", "}", ",", "{", "'role'", ":", "'controller'", ",", "'priority'", ":", "500", "}", ",", "{", "'role'", ":", "'controller'", ",", "'priority'", ":", "500", "}", ",", "{", "'role'", ":", "'controller'", ",", "'priority'", ":", "500", "}", ",", "{", "'role'", ":", "'controller'", ",", "'priority'", ":", "600", "}", ",", "{", "'role'", ":", "'controller'", ",", "'priority'", ":", "600", "}", ",", "{", "'role'", ":", "'ceph-osd'", ",", "'priority'", ":", "700", "}", "]", "#NEWLINE#", "self", ".", "add_default_params", "(", "expected_priorities", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "expected_priorities", ",", "nodes", ")"], "edges": [[6, 45, 7, "enum_FIELD"], [88, 92, 7, "enum_FIELD"], [95, 101, 7, "enum_FIELD"], [104, 167, 7, "enum_FIELD"], [238, 242, 7, "enum_FIELD"], [245, 251, 7, "enum_FIELD"], [92, 90, 7, "enum_FIELD"], [101, 99, 7, "enum_FIELD"], [242, 240, 7, "enum_FIELD"], [251, 247, 7, "enum_FIELD"], [90, 89, 7, "enum_FIELD"], [99, 97, 7, "enum_FIELD"], [240, 239, 7, "enum_FIELD"], [247, 246, 7, "enum_FIELD"], [97, 96, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [89, 2, 10, "enum_LAST_LEXICAL_USE"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [93, 7, 10, "enum_LAST_LEXICAL_USE"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [96, 89, 10, "enum_LAST_LEXICAL_USE"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [102, 93, 10, "enum_LAST_LEXICAL_USE"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 184, 9, "enum_NEXT_SYNTAX"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [187, 188, 9, "enum_NEXT_SYNTAX"], [188, 189, 9, "enum_NEXT_SYNTAX"], [189, 190, 9, "enum_NEXT_SYNTAX"], [190, 191, 9, "enum_NEXT_SYNTAX"], [191, 192, 9, "enum_NEXT_SYNTAX"], [192, 193, 9, "enum_NEXT_SYNTAX"], [193, 194, 9, "enum_NEXT_SYNTAX"], [194, 195, 9, "enum_NEXT_SYNTAX"], [195, 196, 9, "enum_NEXT_SYNTAX"], [196, 197, 9, "enum_NEXT_SYNTAX"], [197, 198, 9, "enum_NEXT_SYNTAX"], [198, 199, 9, "enum_NEXT_SYNTAX"], [199, 200, 9, "enum_NEXT_SYNTAX"], [200, 201, 9, "enum_NEXT_SYNTAX"], [201, 202, 9, "enum_NEXT_SYNTAX"], [202, 203, 9, "enum_NEXT_SYNTAX"], [203, 204, 9, "enum_NEXT_SYNTAX"], [204, 205, 9, "enum_NEXT_SYNTAX"], [205, 206, 9, "enum_NEXT_SYNTAX"], [206, 207, 9, "enum_NEXT_SYNTAX"], [207, 208, 9, "enum_NEXT_SYNTAX"], [208, 209, 9, "enum_NEXT_SYNTAX"], [209, 210, 9, "enum_NEXT_SYNTAX"], [210, 211, 9, "enum_NEXT_SYNTAX"], [211, 212, 9, "enum_NEXT_SYNTAX"], [212, 213, 9, "enum_NEXT_SYNTAX"], [213, 214, 9, "enum_NEXT_SYNTAX"], [214, 215, 9, "enum_NEXT_SYNTAX"], [215, 216, 9, "enum_NEXT_SYNTAX"], [216, 217, 9, "enum_NEXT_SYNTAX"], [217, 218, 9, "enum_NEXT_SYNTAX"], [218, 219, 9, "enum_NEXT_SYNTAX"], [219, 220, 9, "enum_NEXT_SYNTAX"], [220, 221, 9, "enum_NEXT_SYNTAX"], [221, 222, 9, "enum_NEXT_SYNTAX"], [222, 223, 9, "enum_NEXT_SYNTAX"], [223, 224, 9, "enum_NEXT_SYNTAX"], [224, 225, 9, "enum_NEXT_SYNTAX"], [225, 226, 9, "enum_NEXT_SYNTAX"], [226, 227, 9, "enum_NEXT_SYNTAX"], [227, 228, 9, "enum_NEXT_SYNTAX"], [228, 229, 9, "enum_NEXT_SYNTAX"], [229, 230, 9, "enum_NEXT_SYNTAX"], [230, 231, 9, "enum_NEXT_SYNTAX"], [231, 232, 9, "enum_NEXT_SYNTAX"], [232, 233, 9, "enum_NEXT_SYNTAX"], [233, 234, 9, "enum_NEXT_SYNTAX"], [234, 235, 9, "enum_NEXT_SYNTAX"], [235, 236, 9, "enum_NEXT_SYNTAX"], [236, 237, 9, "enum_NEXT_SYNTAX"], [237, 238, 9, "enum_NEXT_SYNTAX"], [239, 96, 10, "enum_LAST_LEXICAL_USE"], [238, 239, 9, "enum_NEXT_SYNTAX"], [239, 240, 9, "enum_NEXT_SYNTAX"], [240, 241, 9, "enum_NEXT_SYNTAX"], [241, 242, 9, "enum_NEXT_SYNTAX"], [243, 105, 10, "enum_LAST_LEXICAL_USE"], [242, 243, 9, "enum_NEXT_SYNTAX"], [243, 244, 9, "enum_NEXT_SYNTAX"], [244, 245, 9, "enum_NEXT_SYNTAX"], [246, 239, 10, "enum_LAST_LEXICAL_USE"], [245, 246, 9, "enum_NEXT_SYNTAX"], [246, 247, 9, "enum_NEXT_SYNTAX"], [247, 248, 9, "enum_NEXT_SYNTAX"], [248, 249, 9, "enum_NEXT_SYNTAX"], [250, 243, 10, "enum_LAST_LEXICAL_USE"], [249, 250, 9, "enum_NEXT_SYNTAX"], [250, 251, 9, "enum_NEXT_SYNTAX"], [252, 102, 10, "enum_LAST_LEXICAL_USE"], [251, 252, 9, "enum_NEXT_SYNTAX"], [252, 253, 9, "enum_NEXT_SYNTAX"], [6, 88, 1, "enum_CFG_NEXT"], [88, 95, 1, "enum_CFG_NEXT"], [95, 104, 1, "enum_CFG_NEXT"], [104, 238, 1, "enum_CFG_NEXT"], [238, 245, 1, "enum_CFG_NEXT"], [89, 2, 3, "enum_LAST_WRITE"], [93, 7, 3, "enum_LAST_WRITE"], [96, 89, 2, "enum_LAST_READ"], [96, 2, 3, "enum_LAST_WRITE"], [102, 93, 2, "enum_LAST_READ"], [102, 7, 3, "enum_LAST_WRITE"], [239, 96, 2, "enum_LAST_READ"], [239, 2, 3, "enum_LAST_WRITE"], [243, 105, 3, "enum_LAST_WRITE"], [246, 239, 2, "enum_LAST_READ"], [246, 2, 3, "enum_LAST_WRITE"], [250, 243, 2, "enum_LAST_READ"], [250, 105, 3, "enum_LAST_WRITE"], [252, 102, 2, "enum_LAST_READ"], [252, 7, 3, "enum_LAST_WRITE"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "openstack", "repo": "fuel-web", "path": "nailgun/nailgun/test/integration/test_orchestrator_serializer.py", "id": 35559, "has_bug": false, "code_full": "import unittest\nfrom typing import Any, Dict, List, Union\n\n\nclass Serializer:\n    def set_deployment_priorities(self, noes: List[Dict[str, str]]):\n        pass\n\n\nclass Test(unittest.TestCase):\n    serializer: Serializer\n\n    def add_default_params(self, nodes: List[Dict[str, Any]]):\n        pass\n\n    def test_set_deployment_priorities_many_cntrls(self):\n        nodes: List[Dict[str, str]] = [\n            {'role': 'zabbix-server'},\n            {'role': 'mongo'},\n            {'role': 'primary-mongo'},\n            {'role': 'primary-controller'},\n            {'role': 'controller'},\n            {'role': 'controller'},\n            {'role': 'controller'},\n            {'role': 'controller'},\n            {'role': 'controller'},\n            {'role': 'controller'},\n            {'role': 'controller'},\n            {'role': 'controller'},\n            {'role': 'ceph-osd'}\n        ]\n        self.add_default_params(nodes)\n        self.serializer.set_deployment_priorities(nodes)\n        expected_priorities: List[Dict[str, Union[str, int]]] = [\n            {'role': 'zabbix-server', 'priority': 100},\n            {'role': 'mongo', 'priority': 200},\n            {'role': 'primary-mongo', 'priority': 300},\n            {'role': 'primary-controller', 'priority': 400},\n            {'role': 'controller', 'priority': 500},\n            {'role': 'controller', 'priority': 500},\n            {'role': 'controller', 'priority': 500},\n            {'role': 'controller', 'priority': 500},\n            {'role': 'controller', 'priority': 500},\n            {'role': 'controller', 'priority': 500},\n            {'role': 'controller', 'priority': 600},\n            {'role': 'controller', 'priority': 600},\n            {'role': 'ceph-osd', 'priority': 700}\n        ]\n        self.add_default_params(expected_priorities)\n        self.assertEqual(expected_priorities, nodes)\n", "code": "def test_set_deployment_priorities_many_cntrls(self):\n    nodes: List[Dict[str, str]] = [\n        {'role': 'zabbix-server'},\n        {'role': 'mongo'},\n        {'role': 'primary-mongo'},\n        {'role': 'primary-controller'},\n        {'role': 'controller'},\n        {'role': 'controller'},\n        {'role': 'controller'},\n        {'role': 'controller'},\n        {'role': 'controller'},\n        {'role': 'controller'},\n        {'role': 'controller'},\n        {'role': 'controller'},\n        {'role': 'ceph-osd'}\n    ]\n    self.add_default_params(nodes)\n    self.serializer.set_deployment_priorities(nodes)\n    expected_priorities: List[Dict[str, Union[str, int]]] = [\n        {'role': 'zabbix-server', 'priority': 100},\n        {'role': 'mongo', 'priority': 200},\n        {'role': 'primary-mongo', 'priority': 300},\n        {'role': 'primary-controller', 'priority': 400},\n        {'role': 'controller', 'priority': 500},\n        {'role': 'controller', 'priority': 500},\n        {'role': 'controller', 'priority': 500},\n        {'role': 'controller', 'priority': 500},\n        {'role': 'controller', 'priority': 500},\n        {'role': 'controller', 'priority': 500},\n        {'role': 'controller', 'priority': 600},\n        {'role': 'controller', 'priority': 600},\n        {'role': 'ceph-osd', 'priority': 700}\n    ]\n    self.add_default_params(expected_priorities)\n    self.assertEqual(expected_priorities, nodes)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "94092366f24c430e5616c21866941b4a031cb33d"}
{"source_tokens": ["#NEWLINE#", "def test_from_path_creates_instance_id_if_not_provided(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Calling ``from_path`` with empty instance id creates an id.\\n    '", "#NEWLINE#", "loopback_blockdevice_api", "=", "LoopbackBlockDeviceAPI", ".", "from_path", "(", "root_path", "=", "b''", ")", "#NEWLINE#", "instance_id", "=", "loopback_blockdevice_api", ".", "compute_instance_id", "(", ")", "#NEWLINE#", "self", ".", "assertIsInstance", "(", "instance_id", ",", "unicode", ")", "#NEWLINE#", "self", ".", "assertNotEqual", "(", "u", "''", ",", "instance_id", ")"], "edges": [[6, 7, 7, "enum_FIELD"], [8, 14, 7, "enum_FIELD"], [19, 25, 7, "enum_FIELD"], [27, 33, 7, "enum_FIELD"], [36, 43, 7, "enum_FIELD"], [14, 12, 7, "enum_FIELD"], [25, 23, 7, "enum_FIELD"], [33, 29, 7, "enum_FIELD"], [43, 38, 7, "enum_FIELD"], [12, 11, 7, "enum_FIELD"], [15, 17, 7, "enum_FIELD"], [23, 22, 7, "enum_FIELD"], [29, 28, 7, "enum_FIELD"], [38, 37, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [22, 9, 10, "enum_LAST_LEXICAL_USE"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [28, 2, 10, "enum_LAST_LEXICAL_USE"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [32, 20, 10, "enum_LAST_LEXICAL_USE"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [37, 28, 10, "enum_LAST_LEXICAL_USE"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [44, 32, 10, "enum_LAST_LEXICAL_USE"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [6, 8, 1, "enum_CFG_NEXT"], [8, 19, 1, "enum_CFG_NEXT"], [19, 27, 1, "enum_CFG_NEXT"], [27, 36, 1, "enum_CFG_NEXT"], [22, 9, 3, "enum_LAST_WRITE"], [28, 2, 3, "enum_LAST_WRITE"], [32, 20, 3, "enum_LAST_WRITE"], [37, 28, 2, "enum_LAST_READ"], [37, 2, 3, "enum_LAST_WRITE"], [44, 32, 2, "enum_LAST_READ"], [44, 20, 3, "enum_LAST_WRITE"], [9, 11, 4, "enum_COMPUTED_FROM"], [20, 22, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "ClusterHQ", "repo": "flocker", "path": "flocker/node/agents/test/test_blockdevice.py", "id": 3692, "has_bug": false, "code_full": "class LoopbackBlockDeviceAPI:\n    @classmethod\n    def from_path(cls, root_path: bytes) -> 'LoopbackBlockDeviceAPI':\n        return cls()\n\n    def compute_instance_id(self) -> str:\n        return u\"\"\n\n\nunicode = str\n\n\ndef test_from_path_creates_instance_id_if_not_provided(self):\n    \"\"\"\n    Calling ``from_path`` with empty instance id creates an id.\n    \"\"\"\n    loopback_blockdevice_api: LoopbackBlockDeviceAPI = LoopbackBlockDeviceAPI.from_path(\n        root_path=b'',\n    )\n    instance_id = loopback_blockdevice_api.compute_instance_id()\n    self.assertIsInstance(instance_id, unicode)\n    self.assertNotEqual(u\"\", instance_id)\n", "code": "def test_from_path_creates_instance_id_if_not_provided(self):\n    \"\"\"\n    Calling ``from_path`` with empty instance id creates an id.\n    \"\"\"\n    loopback_blockdevice_api: LoopbackBlockDeviceAPI = LoopbackBlockDeviceAPI.from_path(\n        root_path=b'',\n    )\n    instance_id = loopback_blockdevice_api.compute_instance_id()\n    self.assertIsInstance(instance_id, unicode)\n    self.assertNotEqual(u\"\", instance_id)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "bd54163640737db9390d7206f063567c8e5d0e1c"}
{"source_tokens": ["#NEWLINE#", "def test_get_configuration(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "sg", "=", "self", ".", "scaling_group", "#NEWLINE#", "mgr", "=", "sg", ".", "manager", "#NEWLINE#", "mgr", ".", "get_configuration", "=", "Mock", "(", ")", "#NEWLINE#", "sg", ".", "get_configuration", "(", ")", "#NEWLINE#", "mgr", ".", "get_configuration", ".", "assert_called_once_with", "(", "sg", ")"], "edges": [[6, 10, 7, "enum_FIELD"], [12, 16, 7, "enum_FIELD"], [18, 24, 7, "enum_FIELD"], [26, 30, 7, "enum_FIELD"], [32, 38, 7, "enum_FIELD"], [10, 9, 7, "enum_FIELD"], [16, 15, 7, "enum_FIELD"], [20, 19, 7, "enum_FIELD"], [24, 23, 7, "enum_FIELD"], [30, 28, 7, "enum_FIELD"], [38, 36, 7, "enum_FIELD"], [28, 27, 7, "enum_FIELD"], [36, 34, 7, "enum_FIELD"], [34, 33, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [9, 2, 10, "enum_LAST_LEXICAL_USE"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [15, 7, 10, "enum_LAST_LEXICAL_USE"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [19, 13, 10, "enum_LAST_LEXICAL_USE"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [27, 15, 10, "enum_LAST_LEXICAL_USE"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [33, 19, 10, "enum_LAST_LEXICAL_USE"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [39, 27, 10, "enum_LAST_LEXICAL_USE"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [6, 12, 1, "enum_CFG_NEXT"], [12, 18, 1, "enum_CFG_NEXT"], [18, 26, 1, "enum_CFG_NEXT"], [26, 32, 1, "enum_CFG_NEXT"], [9, 2, 3, "enum_LAST_WRITE"], [15, 7, 3, "enum_LAST_WRITE"], [19, 13, 3, "enum_LAST_WRITE"], [27, 15, 2, "enum_LAST_READ"], [27, 7, 3, "enum_LAST_WRITE"], [33, 19, 2, "enum_LAST_READ"], [33, 13, 3, "enum_LAST_WRITE"], [39, 27, 2, "enum_LAST_READ"], [39, 7, 3, "enum_LAST_WRITE"], [7, 9, 4, "enum_COMPUTED_FROM"], [13, 15, 4, "enum_COMPUTED_FROM"], [20, 23, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "rackspace", "repo": "pyrax", "path": "tests/unit/test_autoscale.py", "id": 43448, "has_bug": false, "code_full": "import unittest\nfrom unittest.mock import Mock\n\n\nclass Manager:\n    def get_configuration(self, scaling_group: \"ScalingGroup\"):\n        pass\n\n\nclass ScalingGroup:\n    manager: Manager\n\n    def get_configuration(self):\n        pass\n\n\nclass Class(unittest.TestCase):\n    scaling_group: ScalingGroup\n\n    def test_get_configuration(self):\n        sg: ScalingGroup = self.scaling_group\n        mgr: Manager = sg.manager\n        mgr.get_configuration = Mock()\n        sg.get_configuration()\n        mgr.get_configuration.assert_called_once_with(sg)\n", "code": "def test_get_configuration(self):\n    sg: ScalingGroup = self.scaling_group\n    mgr: Manager = sg.manager\n    mgr.get_configuration = Mock()\n    sg.get_configuration()\n    mgr.get_configuration.assert_called_once_with(sg)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "4401296569a447963fb2b4f7a08a386ddfc88e71"}
{"source_tokens": ["#NEWLINE#", "def GenerateUserAuthorizationURL(", "self", ",", "level", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "oauthSession", "=", "self", ".", "_oauthSession", "(", "callback_uri", "=", "(", "WEB_ROOT", "+", "reverse", "(", "'oauth_return'", ",", "kwargs", "=", "{", "'service'", ":", "'endomondo'", "}", ")", ")", ")", "#NEWLINE#", "tokens", "=", "oauthSession", ".", "fetch_request_token", "(", "'https://api.endomondo.com/oauth/request_token'", ")", "#NEWLINE#", "redis_token_key", "=", "(", "'endomondo:oauth:%s'", "%", "tokens", "[", "'oauth_token'", "]", ")", "#NEWLINE#", "redis", ".", "setex", "(", "redis_token_key", ",", "tokens", "[", "'oauth_token_secret'", "]", ",", "timedelta", "(", "hours", "=", "24", ")", ")", "#NEWLINE#", "return", "oauthSession", ".", "authorization_url", "(", "'https://www.endomondo.com/oauth/authorize'", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [10, 16, 7, "enum_FIELD"], [36, 42, 7, "enum_FIELD"], [45, 50, 7, "enum_FIELD"], [56, 62, 7, "enum_FIELD"], [76, 80, 7, "enum_FIELD"], [16, 14, 7, "enum_FIELD"], [42, 40, 7, "enum_FIELD"], [50, 49, 7, "enum_FIELD"], [50, 52, 7, "enum_FIELD"], [62, 58, 7, "enum_FIELD"], [80, 78, 7, "enum_FIELD"], [14, 13, 7, "enum_FIELD"], [17, 21, 7, "enum_FIELD"], [40, 39, 7, "enum_FIELD"], [52, 51, 7, "enum_FIELD"], [52, 53, 7, "enum_FIELD"], [58, 57, 7, "enum_FIELD"], [64, 63, 7, "enum_FIELD"], [64, 65, 7, "enum_FIELD"], [69, 68, 7, "enum_FIELD"], [78, 77, 7, "enum_FIELD"], [21, 20, 7, "enum_FIELD"], [21, 25, 7, "enum_FIELD"], [70, 72, 7, "enum_FIELD"], [25, 22, 7, "enum_FIELD"], [26, 30, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [13, 2, 10, "enum_LAST_LEXICAL_USE"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [39, 11, 10, "enum_LAST_LEXICAL_USE"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [51, 37, 10, "enum_LAST_LEXICAL_USE"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [61, 46, 10, "enum_LAST_LEXICAL_USE"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [63, 51, 10, "enum_LAST_LEXICAL_USE"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 76, 9, "enum_NEXT_SYNTAX"], [77, 39, 10, "enum_LAST_LEXICAL_USE"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [6, 1, 1, "enum_CFG_NEXT"], [3, 10, 1, "enum_CFG_NEXT"], [10, 36, 1, "enum_CFG_NEXT"], [36, 45, 1, "enum_CFG_NEXT"], [45, 56, 1, "enum_CFG_NEXT"], [56, 76, 1, "enum_CFG_NEXT"], [13, 2, 3, "enum_LAST_WRITE"], [39, 11, 3, "enum_LAST_WRITE"], [51, 37, 3, "enum_LAST_WRITE"], [61, 46, 3, "enum_LAST_WRITE"], [63, 51, 2, "enum_LAST_READ"], [63, 37, 3, "enum_LAST_WRITE"], [77, 39, 2, "enum_LAST_READ"], [77, 11, 3, "enum_LAST_WRITE"], [11, 13, 4, "enum_COMPUTED_FROM"], [11, 20, 4, "enum_COMPUTED_FROM"], [11, 22, 4, "enum_COMPUTED_FROM"], [37, 39, 4, "enum_COMPUTED_FROM"], [46, 51, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "cpfair", "repo": "tapiriik", "path": "tapiriik/services/Endomondo/endomondo.py", "id": 11487, "has_bug": false, "code_full": "from datetime import timedelta\nfrom typing import Any, Dict\n\nfrom django.urls import reverse\n\n\nclass OAuth1Session:\n    def fetch_request_token(self, url: str) -> Dict[str, Any]:\n        return {}\n\n    def authorization_url(self, url: str) -> str:\n        return \"\"\n\n\nclass Redis:\n    def setex(self, key: str, value: str, time: timedelta):\n        pass\n\n\nWEB_ROOT: str = \"\"\nredis = Redis()\n\n\nclass Class:\n    def _oauthSession(self, callback_uri: str) -> OAuth1Session:\n        return OAuth1Session()\n\n    def GenerateUserAuthorizationURL(self, level=None):\n        oauthSession = self._oauthSession(callback_uri=WEB_ROOT + reverse(\"oauth_return\", kwargs={\"service\": \"endomondo\"}))\n        tokens = oauthSession.fetch_request_token(\"https://api.endomondo.com/oauth/request_token\")\n        redis_token_key = 'endomondo:oauth:%s' % tokens[\"oauth_token\"]\n        redis.setex(redis_token_key, tokens[\"oauth_token_secret\"], timedelta(hours=24))\n        return oauthSession.authorization_url(\"https://www.endomondo.com/oauth/authorize\")\n\n", "code": "def GenerateUserAuthorizationURL(self, level=None):\n    oauthSession = self._oauthSession(callback_uri=WEB_ROOT + reverse(\"oauth_return\", kwargs={\"service\": \"endomondo\"}))\n    tokens = oauthSession.fetch_request_token(\"https://api.endomondo.com/oauth/request_token\")\n    redis_token_key = 'endomondo:oauth:%s' % tokens[\"oauth_token\"]\n    redis.setex(redis_token_key, tokens[\"oauth_token_secret\"], timedelta(hours=24))\n    return oauthSession.authorization_url(\"https://www.endomondo.com/oauth/authorize\")\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "51daadf85716ea26ac295b33190ce76c43cc2724"}
{"source_tokens": ["#NEWLINE#", "@", "expose", "(", "'procedure-arity?'", ",", "[", "values", ".", "W_Object", "]", ")", "#NEWLINE#", "@", "jit", ".", "unroll_safe", "#NEWLINE#", "def do_is_procedure_arity(", "n", ")", ":", "#NEWLINE#", "#INDENT#", "if", "isinstance", "(", "n", ",", "values", ".", "W_Fixnum", ")", ":", "#NEWLINE#", "#INDENT#", "return", "values", ".", "W_Bool", ".", "make", "(", "(", "n", ".", "value", ">=", "0", ")", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "isinstance", "(", "n", ",", "values_struct", ".", "W_RootStruct", ")", "and", "(", "n", ".", "struct_type", "(", ")", "is", "arity_at_least", ")", ")", ":", "#NEWLINE#", "#INDENT#", "return", "values", ".", "w_true", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "isinstance", "(", "n", ",", "values", ".", "W_List", ")", "and", "n", ".", "is_proper_list", "(", ")", ")", ":", "#NEWLINE#", "#INDENT#", "for", "item", "in", "values", ".", "from_list_iter", "(", "n", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "not", "(", "isinstance", "(", "item", ",", "values", ".", "W_Fixnum", ")", "or", "(", "isinstance", "(", "item", ",", "values_struct", ".", "W_RootStruct", ")", "and", "(", "item", ".", "struct_type", "(", ")", "is", "arity_at_least", ")", ")", ")", ")", ":", "#NEWLINE#", "#INDENT#", "return", "values", ".", "w_false", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "return", "values", ".", "w_true", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "return", "values", ".", "w_false"], "edges": [[33, 28, 7, "enum_FIELD"], [176, 178, 7, "enum_FIELD"], [5, 2, 7, "enum_FIELD"], [15, 14, 7, "enum_FIELD"], [28, 25, 7, "enum_FIELD"], [36, 42, 7, "enum_FIELD"], [78, 67, 7, "enum_FIELD"], [178, 177, 7, "enum_FIELD"], [30, 29, 7, "enum_FIELD"], [42, 40, 7, "enum_FIELD"], [81, 83, 7, "enum_FIELD"], [91, 101, 7, "enum_FIELD"], [8, 7, 7, "enum_FIELD"], [40, 38, 7, "enum_FIELD"], [47, 45, 7, "enum_FIELD"], [62, 59, 7, "enum_FIELD"], [74, 72, 7, "enum_FIELD"], [83, 82, 7, "enum_FIELD"], [113, 112, 7, "enum_FIELD"], [113, 117, 7, "enum_FIELD"], [168, 170, 7, "enum_FIELD"], [38, 37, 7, "enum_FIELD"], [45, 44, 7, "enum_FIELD"], [64, 63, 7, "enum_FIELD"], [72, 70, 7, "enum_FIELD"], [96, 93, 7, "enum_FIELD"], [105, 103, 7, "enum_FIELD"], [117, 115, 7, "enum_FIELD"], [123, 125, 7, "enum_FIELD"], [170, 169, 7, "enum_FIELD"], [70, 69, 7, "enum_FIELD"], [98, 97, 7, "enum_FIELD"], [103, 102, 7, "enum_FIELD"], [115, 114, 7, "enum_FIELD"], [125, 135, 7, "enum_FIELD"], [161, 163, 7, "enum_FIELD"], [163, 162, 7, "enum_FIELD"], [130, 127, 7, "enum_FIELD"], [132, 131, 7, "enum_FIELD"], [140, 137, 7, "enum_FIELD"], [152, 150, 7, "enum_FIELD"], [142, 141, 7, "enum_FIELD"], [150, 148, 7, "enum_FIELD"], [148, 147, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [27, 19, 10, "enum_LAST_LEXICAL_USE"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [29, 7, 10, "enum_LAST_LEXICAL_USE"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 36, 9, "enum_NEXT_SYNTAX"], [37, 29, 10, "enum_LAST_LEXICAL_USE"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [44, 27, 10, "enum_LAST_LEXICAL_USE"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [59, 25, 10, "enum_LAST_LEXICAL_USE"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [61, 44, 10, "enum_LAST_LEXICAL_USE"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [69, 61, 10, "enum_LAST_LEXICAL_USE"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 81, 9, "enum_NEXT_SYNTAX"], [82, 37, 10, "enum_LAST_LEXICAL_USE"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [93, 59, 10, "enum_LAST_LEXICAL_USE"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [95, 69, 10, "enum_LAST_LEXICAL_USE"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [97, 82, 10, "enum_LAST_LEXICAL_USE"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [102, 95, 10, "enum_LAST_LEXICAL_USE"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [114, 97, 10, "enum_LAST_LEXICAL_USE"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [118, 102, 10, "enum_LAST_LEXICAL_USE"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [127, 93, 10, "enum_LAST_LEXICAL_USE"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [129, 112, 10, "enum_LAST_LEXICAL_USE"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [131, 114, 10, "enum_LAST_LEXICAL_USE"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [137, 127, 10, "enum_LAST_LEXICAL_USE"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [139, 129, 10, "enum_LAST_LEXICAL_USE"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [141, 63, 10, "enum_LAST_LEXICAL_USE"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [147, 139, 10, "enum_LAST_LEXICAL_USE"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [153, 75, 10, "enum_LAST_LEXICAL_USE"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 161, 9, "enum_NEXT_SYNTAX"], [162, 131, 10, "enum_LAST_LEXICAL_USE"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 168, 9, "enum_NEXT_SYNTAX"], [169, 162, 10, "enum_LAST_LEXICAL_USE"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 176, 9, "enum_NEXT_SYNTAX"], [177, 169, 10, "enum_LAST_LEXICAL_USE"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [5, 15, 1, "enum_CFG_NEXT"], [15, 1, 1, "enum_CFG_NEXT"], [28, 67, 1, "enum_CFG_NEXT"], [28, 36, 1, "enum_CFG_NEXT"], [67, 101, 1, "enum_CFG_NEXT"], [67, 81, 1, "enum_CFG_NEXT"], [101, 117, 1, "enum_CFG_NEXT"], [101, 176, 1, "enum_CFG_NEXT"], [117, 112, 1, "enum_CFG_NEXT"], [112, 125, 1, "enum_CFG_NEXT"], [112, 168, 1, "enum_CFG_NEXT"], [125, 112, 1, "enum_CFG_NEXT"], [125, 161, 1, "enum_CFG_NEXT"], [27, 19, 3, "enum_LAST_WRITE"], [37, 29, 2, "enum_LAST_READ"], [44, 27, 2, "enum_LAST_READ"], [44, 19, 3, "enum_LAST_WRITE"], [59, 25, 2, "enum_LAST_READ"], [61, 27, 2, "enum_LAST_READ"], [61, 19, 3, "enum_LAST_WRITE"], [69, 61, 2, "enum_LAST_READ"], [69, 19, 3, "enum_LAST_WRITE"], [82, 29, 2, "enum_LAST_READ"], [93, 59, 2, "enum_LAST_READ"], [95, 69, 2, "enum_LAST_READ"], [95, 19, 3, "enum_LAST_WRITE"], [97, 29, 2, "enum_LAST_READ"], [102, 95, 2, "enum_LAST_READ"], [102, 19, 3, "enum_LAST_WRITE"], [114, 97, 2, "enum_LAST_READ"], [118, 102, 2, "enum_LAST_READ"], [118, 19, 3, "enum_LAST_WRITE"], [112, 147, 2, "enum_LAST_READ"], [112, 112, 3, "enum_LAST_WRITE"], [127, 93, 2, "enum_LAST_READ"], [127, 137, 2, "enum_LAST_READ"], [129, 147, 2, "enum_LAST_READ"], [129, 112, 3, "enum_LAST_WRITE"], [131, 131, 2, "enum_LAST_READ"], [131, 114, 2, "enum_LAST_READ"], [137, 127, 2, "enum_LAST_READ"], [139, 129, 2, "enum_LAST_READ"], [139, 112, 3, "enum_LAST_WRITE"], [141, 63, 2, "enum_LAST_READ"], [141, 141, 2, "enum_LAST_READ"], [147, 139, 2, "enum_LAST_READ"], [147, 112, 3, "enum_LAST_WRITE"], [153, 75, 2, "enum_LAST_READ"], [153, 153, 2, "enum_LAST_READ"], [162, 131, 2, "enum_LAST_READ"], [169, 131, 2, "enum_LAST_READ"], [169, 114, 2, "enum_LAST_READ"], [177, 97, 2, "enum_LAST_READ"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "samth", "repo": "pycket", "path": "pycket/prims/general.py", "id": 47299, "has_bug": false, "code_full": "from typing import Any\n\n\nclass values:\n    class W_Fixnum:\n        value: int\n\n    class W_Bool:\n        @classmethod\n        def make(cls, value: bool) -> \"values.W_Bool\":\n            return cls()\n\n    class W_List:\n        def is_proper_list(self) -> bool:\n            return False\n\n    class Fixnum:\n        pass\n    \n    @staticmethod\n    def from_list_iter(n: Any) -> Any:\n        pass\n\n    w_true: W_Bool\n    w_false: W_Bool\n\n\nclass values_struct:\n    class W_RootStruct:\n        def struct_type(self) -> Any:\n            pass\n\n\narity_at_least: Any = None\n\n\ndef do_is_procedure_arity(n: Any) -> values.W_Bool:\n    if isinstance(n, values.W_Fixnum):\n        return values.W_Bool.make(n.value >= 0)\n\n    elif (isinstance(n, values_struct.W_RootStruct) and\n          n.struct_type() is arity_at_least):\n        return values.w_true\n\n    elif isinstance(n, values.W_List) and n.is_proper_list():\n        for item in values.from_list_iter(n):\n            if not (isinstance(item, values.W_Fixnum) or\n                (isinstance(item, values_struct.W_RootStruct) and\n                item.struct_type() is arity_at_least)):\n                return values.w_false\n        return values.w_true\n\n    return values.w_false\n", "code": "def do_is_procedure_arity(n: Any) -> values.W_Bool:\n    if isinstance(n, values.W_Fixnum):\n        return values.W_Bool.make(n.value >= 0)\n\n    elif (isinstance(n, values_struct.W_RootStruct) and\n          n.struct_type() is arity_at_least):\n        return values.w_true\n\n    elif isinstance(n, values.W_List) and n.is_proper_list():\n        for item in values.from_list_iter(n):\n            if not (isinstance(item, values.W_Fixnum) or\n                (isinstance(item, values_struct.W_RootStruct) and\n                item.struct_type() is arity_at_least)):\n                return values.w_false\n        return values.w_true\n\n    return values.w_false\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "11276f5abcb45395cce1cd19891db41a7d197a4f"}
{"source_tokens": ["#NEWLINE#", "def test_convert_date_time(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'Test the _convert_date_time() method for seconds.'", "#NEWLINE#", "for", "excel_date", "in", "self", ".", "excel_dates", ":", "#NEWLINE#", "#INDENT#", "date", "=", "datetime", ".", "datetime", ".", "strptime", "(", "excel_date", "[", "0", "]", ",", "'%Y-%m-%dT%H:%M:%S.%f'", ")", "#NEWLINE#", "got", "=", "self", ".", "worksheet", ".", "_convert_date_time", "(", "date", ")", "#NEWLINE#", "exp", "=", "excel_date", "[", "1", "]", "#NEWLINE#", "self", ".", "assertAlmostEqual", "(", "got", ",", "exp", ",", "places", "=", "15", ")"], "edges": [[6, 7, 7, "enum_FIELD"], [11, 10, 7, "enum_FIELD"], [11, 13, 7, "enum_FIELD"], [13, 12, 7, "enum_FIELD"], [17, 30, 7, "enum_FIELD"], [33, 41, 7, "enum_FIELD"], [44, 48, 7, "enum_FIELD"], [51, 57, 7, "enum_FIELD"], [30, 23, 7, "enum_FIELD"], [41, 39, 7, "enum_FIELD"], [48, 47, 7, "enum_FIELD"], [48, 49, 7, "enum_FIELD"], [57, 53, 7, "enum_FIELD"], [23, 21, 7, "enum_FIELD"], [27, 26, 7, "enum_FIELD"], [27, 28, 7, "enum_FIELD"], [39, 37, 7, "enum_FIELD"], [53, 52, 7, "enum_FIELD"], [60, 62, 7, "enum_FIELD"], [21, 20, 7, "enum_FIELD"], [37, 36, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [12, 2, 10, "enum_LAST_LEXICAL_USE"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [26, 10, 10, "enum_LAST_LEXICAL_USE"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [36, 12, 10, "enum_LAST_LEXICAL_USE"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [42, 18, 10, "enum_LAST_LEXICAL_USE"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [47, 26, 10, "enum_LAST_LEXICAL_USE"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [52, 36, 10, "enum_LAST_LEXICAL_USE"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [56, 34, 10, "enum_LAST_LEXICAL_USE"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [58, 45, 10, "enum_LAST_LEXICAL_USE"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [6, 13, 1, "enum_CFG_NEXT"], [13, 10, 1, "enum_CFG_NEXT"], [10, 17, 1, "enum_CFG_NEXT"], [17, 33, 1, "enum_CFG_NEXT"], [33, 44, 1, "enum_CFG_NEXT"], [44, 51, 1, "enum_CFG_NEXT"], [51, 10, 1, "enum_CFG_NEXT"], [12, 2, 3, "enum_LAST_WRITE"], [10, 47, 2, "enum_LAST_READ"], [10, 10, 3, "enum_LAST_WRITE"], [20, 20, 2, "enum_LAST_READ"], [26, 47, 2, "enum_LAST_READ"], [26, 10, 3, "enum_LAST_WRITE"], [18, 42, 2, "enum_LAST_READ"], [18, 18, 3, "enum_LAST_WRITE"], [36, 52, 2, "enum_LAST_READ"], [36, 12, 2, "enum_LAST_READ"], [36, 2, 3, "enum_LAST_WRITE"], [42, 42, 2, "enum_LAST_READ"], [42, 18, 3, "enum_LAST_WRITE"], [34, 56, 2, "enum_LAST_READ"], [34, 34, 3, "enum_LAST_WRITE"], [47, 26, 2, "enum_LAST_READ"], [47, 10, 3, "enum_LAST_WRITE"], [45, 58, 2, "enum_LAST_READ"], [45, 45, 3, "enum_LAST_WRITE"], [52, 36, 2, "enum_LAST_READ"], [52, 2, 3, "enum_LAST_WRITE"], [56, 56, 2, "enum_LAST_READ"], [56, 34, 3, "enum_LAST_WRITE"], [58, 58, 2, "enum_LAST_READ"], [58, 45, 3, "enum_LAST_WRITE"], [18, 26, 4, "enum_COMPUTED_FROM"], [18, 20, 4, "enum_COMPUTED_FROM"], [34, 42, 4, "enum_COMPUTED_FROM"], [34, 36, 4, "enum_COMPUTED_FROM"], [45, 47, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "jmcnamara", "repo": "XlsxWriter", "path": "xlsxwriter/test/worksheet/test_date_time_03.py", "id": 22809, "has_bug": false, "code_full": "import datetime\nimport unittest\nfrom typing import List, Tuple\n\n\nclass Worksheet:\n    def _convert_date_time(self, date: datetime.datetime) -> float:\n        return 0\n\n\nclass Class(unittest.TestCase):\n    worksheet: Worksheet\n    excel_dates: List[Tuple[str, float]]\n\n    def test_convert_date_time(self):\n        \"\"\"Test the _convert_date_time() method for seconds.\"\"\"\n\n        for excel_date in self.excel_dates:\n            date: datetime.datetime = datetime.datetime.strptime(excel_date[0], \"%Y-%m-%dT%H:%M:%S.%f\")\n\n            got: float = self.worksheet._convert_date_time(date)\n            exp: float = excel_date[1]\n\n            self.assertAlmostEqual(got, exp, places=15)\n", "code": "def test_convert_date_time(self):\n    \"\"\"Test the _convert_date_time() method for seconds.\"\"\"\n\n    for excel_date in self.excel_dates:\n        date: datetime.datetime = datetime.datetime.strptime(excel_date[0], \"%Y-%m-%dT%H:%M:%S.%f\")\n\n        got: float = self.worksheet._convert_date_time(date)\n        exp: float = excel_date[1]\n\n        self.assertAlmostEqual(got, exp, places=15)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "b592624bdebf4488052617475cac056396a897d8"}
{"source_tokens": ["#NEWLINE#", "def Prepare(", "benchmark_spec", ")", ":", "#NEWLINE#", "#INDENT#", "'Install Bonnie++ on the target vm.\\n\\n  Args:\\n    benchmark_spec: The benchmark specification. Contains all data that is\\n        required to run the benchmark.\\n\\n  '", "#NEWLINE#", "vms", "=", "benchmark_spec", ".", "vms", "#NEWLINE#", "vm", "=", "vms", "[", "0", "]", "#NEWLINE#", "logging", ".", "info", "(", "'Bonnie++ prepare on %s'", ",", "vm", ")", "#NEWLINE#", "vm", ".", "Install", "(", "'bonnieplusplus'", ")"], "edges": [[6, 7, 7, "enum_FIELD"], [8, 12, 7, "enum_FIELD"], [14, 18, 7, "enum_FIELD"], [21, 27, 7, "enum_FIELD"], [30, 34, 7, "enum_FIELD"], [12, 11, 7, "enum_FIELD"], [18, 17, 7, "enum_FIELD"], [18, 19, 7, "enum_FIELD"], [27, 23, 7, "enum_FIELD"], [34, 32, 7, "enum_FIELD"], [23, 22, 7, "enum_FIELD"], [32, 31, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [11, 2, 10, "enum_LAST_LEXICAL_USE"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [17, 9, 10, "enum_LAST_LEXICAL_USE"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [28, 15, 10, "enum_LAST_LEXICAL_USE"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [31, 28, 10, "enum_LAST_LEXICAL_USE"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [6, 8, 1, "enum_CFG_NEXT"], [8, 14, 1, "enum_CFG_NEXT"], [14, 21, 1, "enum_CFG_NEXT"], [21, 30, 1, "enum_CFG_NEXT"], [11, 2, 3, "enum_LAST_WRITE"], [17, 9, 3, "enum_LAST_WRITE"], [28, 15, 3, "enum_LAST_WRITE"], [31, 28, 2, "enum_LAST_READ"], [31, 15, 3, "enum_LAST_WRITE"], [9, 11, 4, "enum_COMPUTED_FROM"], [15, 17, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "GoogleCloudPlatform", "repo": "PerfKitBenchmarker", "path": "perfkitbenchmarker/linux_benchmarks/bonnie_benchmark.py", "id": 5600, "has_bug": false, "code_full": "import logging\nfrom typing import List\n\n\nclass VM:\n    def Install(self, package_name: str):\n        pass\n\n\nclass BenchmarkSpec:\n    vms: List[VM]\n\n\ndef Prepare(benchmark_spec: BenchmarkSpec):\n    \"\"\"Install Bonnie++ on the target vm.\n\n    Args:\n    benchmark_spec: The benchmark specification. Contains all data that is\n        required to run the benchmark.\n\n    \"\"\"\n    vms: List[VM] = benchmark_spec.vms\n    vm: VM = vms[0]\n    logging.info('Bonnie++ prepare on %s', vm)\n    vm.Install('bonnieplusplus')\n", "code": "def Prepare(benchmark_spec: BenchmarkSpec):\n    \"\"\"Install Bonnie++ on the target vm.\n\n    Args:\n    benchmark_spec: The benchmark specification. Contains all data that is\n        required to run the benchmark.\n\n    \"\"\"\n    vms: List[VM] = benchmark_spec.vms\n    vm: VM = vms[0]\n    logging.info('Bonnie++ prepare on %s', vm)\n    vm.Install('bonnieplusplus')\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "f2827f0d63db629f2d21c521c61f58a8e09e9c8e"}
{"source_tokens": ["#NEWLINE#", "def test_create_file(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'Test the creation of a simple XlsxWriter file with image(s).'", "#NEWLINE#", "workbook", "=", "Workbook", "(", "self", ".", "got_filename", ")", "#NEWLINE#", "worksheet", "=", "workbook", ".", "add_worksheet", "(", ")", "#NEWLINE#", "worksheet", ".", "insert_image", "(", "'B2'", ",", "(", "self", ".", "image_dir", "+", "'red.png'", ")", ",", "{", "'x_offset'", ":", "(", "-", "100", ")", ",", "'y_offset'", ":", "(", "-", "100", ")", "}", ")", "#NEWLINE#", "workbook", ".", "close", "(", ")", "#NEWLINE#", "self", ".", "assertExcelEqual", "(", ")"], "edges": [[6, 7, 7, "enum_FIELD"], [8, 12, 7, "enum_FIELD"], [17, 23, 7, "enum_FIELD"], [25, 31, 7, "enum_FIELD"], [56, 60, 7, "enum_FIELD"], [62, 66, 7, "enum_FIELD"], [12, 11, 7, "enum_FIELD"], [23, 21, 7, "enum_FIELD"], [31, 27, 7, "enum_FIELD"], [60, 58, 7, "enum_FIELD"], [66, 64, 7, "enum_FIELD"], [14, 13, 7, "enum_FIELD"], [21, 20, 7, "enum_FIELD"], [27, 26, 7, "enum_FIELD"], [36, 34, 7, "enum_FIELD"], [36, 37, 7, "enum_FIELD"], [58, 57, 7, "enum_FIELD"], [64, 63, 7, "enum_FIELD"], [34, 33, 7, "enum_FIELD"], [44, 45, 7, "enum_FIELD"], [51, 52, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [13, 2, 10, "enum_LAST_LEXICAL_USE"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [20, 9, 10, "enum_LAST_LEXICAL_USE"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [26, 18, 10, "enum_LAST_LEXICAL_USE"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [33, 13, 10, "enum_LAST_LEXICAL_USE"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [57, 20, 10, "enum_LAST_LEXICAL_USE"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [63, 33, 10, "enum_LAST_LEXICAL_USE"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [6, 8, 1, "enum_CFG_NEXT"], [8, 17, 1, "enum_CFG_NEXT"], [17, 25, 1, "enum_CFG_NEXT"], [25, 56, 1, "enum_CFG_NEXT"], [56, 62, 1, "enum_CFG_NEXT"], [13, 2, 3, "enum_LAST_WRITE"], [20, 9, 3, "enum_LAST_WRITE"], [26, 18, 3, "enum_LAST_WRITE"], [33, 13, 2, "enum_LAST_READ"], [33, 2, 3, "enum_LAST_WRITE"], [57, 20, 2, "enum_LAST_READ"], [57, 9, 3, "enum_LAST_WRITE"], [63, 33, 2, "enum_LAST_READ"], [63, 2, 3, "enum_LAST_WRITE"], [9, 11, 4, "enum_COMPUTED_FROM"], [9, 13, 4, "enum_COMPUTED_FROM"], [18, 20, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "jmcnamara", "repo": "XlsxWriter", "path": "xlsxwriter/test/comparison/test_image32.py", "id": 22318, "has_bug": false, "code_full": "import unittest\n\nfrom xlsxwriter import Workbook\n\n\nclass Class(unittest.TestCase):\n    got_filename: str\n    image_dir: str\n\n    def assertExcelEqual(self):\n        pass\n\n    def test_create_file(self):\n        \"\"\"Test the creation of a simple XlsxWriter file with image(s).\"\"\"\n\n        workbook: Workbook = Workbook(self.got_filename)\n\n        worksheet = workbook.add_worksheet()\n\n        worksheet.insert_image('B2', self.image_dir + 'red.png', {'x_offset': -100, 'y_offset': -100})\n\n        workbook.close()\n\n        self.assertExcelEqual()\n", "code": "def test_create_file(self):\n    \"\"\"Test the creation of a simple XlsxWriter file with image(s).\"\"\"\n\n    workbook: Workbook = Workbook(self.got_filename)\n\n    worksheet = workbook.add_worksheet()\n\n    worksheet.insert_image('B2', self.image_dir + 'red.png', {'x_offset': -100, 'y_offset': -100})\n\n    workbook.close()\n\n    self.assertExcelEqual()\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "b592624bdebf4488052617475cac056396a897d8"}
{"source_tokens": ["#NEWLINE#", "def test_complete_0_partite_graph(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'Tests that the complete 0-partite graph is the null graph.'", "#NEWLINE#", "G", "=", "nx", ".", "complete_multipartite_graph", "(", ")", "#NEWLINE#", "H", "=", "nx", ".", "null_graph", "(", ")", "#NEWLINE#", "assert_nodes_equal", "(", "G", ",", "H", ")", "#NEWLINE#", "assert_edges_equal", "(", "sorted", "(", "G", ".", "edges", "(", ")", ")", ",", "sorted", "(", "H", ".", "edges", "(", ")", ")", ")"], "edges": [[6, 7, 7, "enum_FIELD"], [8, 14, 7, "enum_FIELD"], [16, 22, 7, "enum_FIELD"], [24, 28, 7, "enum_FIELD"], [31, 42, 7, "enum_FIELD"], [14, 12, 7, "enum_FIELD"], [22, 20, 7, "enum_FIELD"], [28, 25, 7, "enum_FIELD"], [42, 32, 7, "enum_FIELD"], [12, 11, 7, "enum_FIELD"], [20, 19, 7, "enum_FIELD"], [35, 34, 7, "enum_FIELD"], [44, 43, 7, "enum_FIELD"], [39, 37, 7, "enum_FIELD"], [48, 46, 7, "enum_FIELD"], [37, 36, 7, "enum_FIELD"], [46, 45, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [19, 11, 10, "enum_LAST_LEXICAL_USE"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [27, 9, 10, "enum_LAST_LEXICAL_USE"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [29, 17, 10, "enum_LAST_LEXICAL_USE"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [36, 27, 10, "enum_LAST_LEXICAL_USE"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [43, 34, 10, "enum_LAST_LEXICAL_USE"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [45, 29, 10, "enum_LAST_LEXICAL_USE"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [6, 8, 1, "enum_CFG_NEXT"], [8, 16, 1, "enum_CFG_NEXT"], [16, 24, 1, "enum_CFG_NEXT"], [24, 31, 1, "enum_CFG_NEXT"], [19, 11, 2, "enum_LAST_READ"], [27, 9, 3, "enum_LAST_WRITE"], [29, 17, 3, "enum_LAST_WRITE"], [36, 27, 2, "enum_LAST_READ"], [36, 9, 3, "enum_LAST_WRITE"], [43, 34, 2, "enum_LAST_READ"], [45, 29, 2, "enum_LAST_READ"], [45, 17, 3, "enum_LAST_WRITE"], [9, 11, 4, "enum_COMPUTED_FROM"], [17, 19, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "networkx", "repo": "networkx", "path": "networkx/generators/tests/test_classic.py", "id": 27274, "has_bug": false, "code_full": "from typing import Dict, List\n\nimport networkx as nx\n\n\ndef assert_nodes_equal(nodes1: nx.Graph, nodes2: nx.Graph):\n    pass\n\n\ndef assert_edges_equal(edges1: nx.classes.reportviews.OutEdgeView, edges2: nx.classes.reportviews.OutEdgeView):\n    pass\n\ndef test_complete_0_partite_graph(self):\n    \"\"\"Tests that the complete 0-partite graph is the null graph.\"\"\"\n    G: nx.Graph = nx.complete_multipartite_graph()\n    H: nx.Graph = nx.null_graph()\n    assert_nodes_equal(G, H)\n    assert_edges_equal(G.edges(), H.edges())\n", "code": "def test_complete_0_partite_graph(self):\n    \"\"\"Tests that the complete 0-partite graph is the null graph.\"\"\"\n    G: nx.Graph = nx.complete_multipartite_graph()\n    H: nx.Graph = nx.null_graph()\n    assert_nodes_equal(G, H)\n    assert_edges_equal(G.edges(), H.edges())\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "ff0ab5802d5fbcdedca09ef3324882807af0b77c"}
{"source_tokens": ["#NEWLINE#", "def heartbeat(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "while", "True", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "self", ".", "nop", "(", ")", "#NEWLINE#", "#UNINDENT#", "except", "Exception", "as", "e", ":", "#NEWLINE#", "#INDENT#", "self", ".", "close", "(", ")", "#NEWLINE#", "#UNINDENT#", "time", ".", "sleep", "(", "2", ")"], "edges": [[7, 8, 7, "enum_FIELD"], [36, 40, 7, "enum_FIELD"], [15, 19, 7, "enum_FIELD"], [25, 24, 7, "enum_FIELD"], [25, 26, 7, "enum_FIELD"], [40, 38, 7, "enum_FIELD"], [19, 17, 7, "enum_FIELD"], [29, 33, 7, "enum_FIELD"], [38, 37, 7, "enum_FIELD"], [17, 16, 7, "enum_FIELD"], [33, 31, 7, "enum_FIELD"], [31, 30, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 15, 9, "enum_NEXT_SYNTAX"], [16, 2, 10, "enum_LAST_LEXICAL_USE"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 29, 9, "enum_NEXT_SYNTAX"], [30, 16, 10, "enum_LAST_LEXICAL_USE"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [8, 15, 1, "enum_CFG_NEXT"], [15, 36, 1, "enum_CFG_NEXT"], [15, 24, 1, "enum_CFG_NEXT"], [24, 26, 1, "enum_CFG_NEXT"], [26, 29, 1, "enum_CFG_NEXT"], [29, 36, 1, "enum_CFG_NEXT"], [36, 8, 1, "enum_CFG_NEXT"], [16, 30, 2, "enum_LAST_READ"], [16, 16, 2, "enum_LAST_READ"], [16, 2, 3, "enum_LAST_WRITE"], [24, 24, 2, "enum_LAST_READ"], [26, 26, 3, "enum_LAST_WRITE"], [30, 16, 2, "enum_LAST_READ"], [30, 2, 3, "enum_LAST_WRITE"], [37, 37, 2, "enum_LAST_READ"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "douban", "repo": "dpark", "path": "dpark/moosefs/master.py", "id": 12712, "has_bug": false, "code_full": "import time\n\n\nclass Class:\n    def nop(self):\n        pass\n\n    def close(self):\n        pass\n\n    def heartbeat(self) -> None:\n        while True:\n            try:\n                self.nop()\n            except Exception as e:\n                self.close()\n            time.sleep(2)\n", "code": "def heartbeat(self) -> None:\n    while True:\n        try:\n            self.nop()\n        except Exception as e:\n            self.close()\n        time.sleep(2)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "cb4b01418321651c5e3f85c30037451b103d7a84"}
{"source_tokens": ["#NEWLINE#", "def testRoulette(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "irc", ".", "feedMsg", "(", "ircmsgs", ".", "op", "(", "self", ".", "channel", ",", "self", ".", "irc", ".", "nick", ")", ")", "#NEWLINE#", "sawKick", "=", "False", "#NEWLINE#", "for", "i", "in", "range", "(", "100", ")", ":", "#NEWLINE#", "#INDENT#", "m", "=", "self", ".", "getMsg", "(", "'roulette'", ",", "frm", "=", "'someoneElse'", ")", "#NEWLINE#", "if", "(", "m", ".", "command", "==", "'PRIVMSG'", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "failUnless", "(", "self", ".", "_nonKickRe", ".", "search", "(", "m", ".", "args", "[", "1", "]", ")", ",", "(", "'Got a msg without bang|click|spin: %r'", "%", "m", ")", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "m", ".", "command", "==", "'KICK'", ")", ":", "#NEWLINE#", "#INDENT#", "sawKick", "=", "True", "#NEWLINE#", "self", ".", "failUnless", "(", "(", "'bang'", "in", "m", ".", "args", "[", "2", "]", ".", "lower", "(", ")", ")", ",", "'Got a KICK without bang in it.'", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "self", ".", "fail", "(", "'Got something other than a kick or a privmsg.'", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "self", ".", "failUnless", "(", "sawKick", ",", "(", "\"Didn't get a kick in %s iterations!\"", "%", "i", ")", ")"], "edges": [[6, 12, 7, "enum_FIELD"], [28, 31, 7, "enum_FIELD"], [35, 34, 7, "enum_FIELD"], [35, 37, 7, "enum_FIELD"], [148, 154, 7, "enum_FIELD"], [12, 10, 7, "enum_FIELD"], [37, 36, 7, "enum_FIELD"], [42, 50, 7, "enum_FIELD"], [64, 61, 7, "enum_FIELD"], [154, 150, 7, "enum_FIELD"], [10, 8, 7, "enum_FIELD"], [20, 14, 7, "enum_FIELD"], [50, 46, 7, "enum_FIELD"], [61, 59, 7, "enum_FIELD"], [66, 84, 7, "enum_FIELD"], [105, 102, 7, "enum_FIELD"], [150, 149, 7, "enum_FIELD"], [157, 156, 7, "enum_FIELD"], [157, 158, 7, "enum_FIELD"], [8, 7, 7, "enum_FIELD"], [14, 13, 7, "enum_FIELD"], [18, 17, 7, "enum_FIELD"], [24, 22, 7, "enum_FIELD"], [46, 45, 7, "enum_FIELD"], [51, 53, 7, "enum_FIELD"], [59, 58, 7, "enum_FIELD"], [84, 68, 7, "enum_FIELD"], [102, 100, 7, "enum_FIELD"], [107, 110, 7, "enum_FIELD"], [111, 130, 7, "enum_FIELD"], [138, 142, 7, "enum_FIELD"], [22, 21, 7, "enum_FIELD"], [68, 67, 7, "enum_FIELD"], [76, 74, 7, "enum_FIELD"], [87, 86, 7, "enum_FIELD"], [87, 88, 7, "enum_FIELD"], [100, 99, 7, "enum_FIELD"], [130, 113, 7, "enum_FIELD"], [142, 140, 7, "enum_FIELD"], [74, 72, 7, "enum_FIELD"], [80, 78, 7, "enum_FIELD"], [80, 81, 7, "enum_FIELD"], [113, 112, 7, "enum_FIELD"], [118, 117, 7, "enum_FIELD"], [140, 139, 7, "enum_FIELD"], [72, 71, 7, "enum_FIELD"], [78, 77, 7, "enum_FIELD"], [127, 125, 7, "enum_FIELD"], [125, 122, 7, "enum_FIELD"], [122, 120, 7, "enum_FIELD"], [122, 123, 7, "enum_FIELD"], [120, 119, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [7, 2, 10, "enum_LAST_LEXICAL_USE"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [17, 7, 10, "enum_LAST_LEXICAL_USE"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [21, 17, 10, "enum_LAST_LEXICAL_USE"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [45, 21, 10, "enum_LAST_LEXICAL_USE"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [58, 43, 10, "enum_LAST_LEXICAL_USE"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 66, 9, "enum_NEXT_SYNTAX"], [67, 45, 10, "enum_LAST_LEXICAL_USE"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [71, 67, 10, "enum_LAST_LEXICAL_USE"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [77, 58, 10, "enum_LAST_LEXICAL_USE"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [88, 77, 10, "enum_LAST_LEXICAL_USE"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [99, 88, 10, "enum_LAST_LEXICAL_USE"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 107, 9, "enum_NEXT_SYNTAX"], [108, 29, 10, "enum_LAST_LEXICAL_USE"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [112, 71, 10, "enum_LAST_LEXICAL_USE"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [119, 99, 10, "enum_LAST_LEXICAL_USE"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 138, 9, "enum_NEXT_SYNTAX"], [139, 112, 10, "enum_LAST_LEXICAL_USE"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 148, 9, "enum_NEXT_SYNTAX"], [149, 139, 10, "enum_LAST_LEXICAL_USE"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [153, 108, 10, "enum_LAST_LEXICAL_USE"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [158, 34, 10, "enum_LAST_LEXICAL_USE"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [6, 28, 1, "enum_CFG_NEXT"], [28, 37, 1, "enum_CFG_NEXT"], [37, 34, 1, "enum_CFG_NEXT"], [34, 42, 1, "enum_CFG_NEXT"], [34, 148, 1, "enum_CFG_NEXT"], [42, 61, 1, "enum_CFG_NEXT"], [61, 66, 1, "enum_CFG_NEXT"], [61, 102, 1, "enum_CFG_NEXT"], [66, 34, 1, "enum_CFG_NEXT"], [102, 107, 1, "enum_CFG_NEXT"], [102, 138, 1, "enum_CFG_NEXT"], [107, 111, 1, "enum_CFG_NEXT"], [111, 34, 1, "enum_CFG_NEXT"], [138, 34, 1, "enum_CFG_NEXT"], [7, 2, 3, "enum_LAST_WRITE"], [17, 7, 2, "enum_LAST_READ"], [17, 2, 3, "enum_LAST_WRITE"], [21, 17, 2, "enum_LAST_READ"], [21, 2, 3, "enum_LAST_WRITE"], [34, 34, 3, "enum_LAST_WRITE"], [45, 139, 2, "enum_LAST_READ"], [45, 71, 2, "enum_LAST_READ"], [45, 21, 2, "enum_LAST_READ"], [45, 112, 2, "enum_LAST_READ"], [45, 2, 3, "enum_LAST_WRITE"], [43, 99, 2, "enum_LAST_READ"], [43, 119, 2, "enum_LAST_READ"], [43, 88, 2, "enum_LAST_READ"], [43, 43, 3, "enum_LAST_WRITE"], [58, 99, 2, "enum_LAST_READ"], [58, 119, 2, "enum_LAST_READ"], [58, 88, 2, "enum_LAST_READ"], [58, 43, 3, "enum_LAST_WRITE"], [67, 45, 2, "enum_LAST_READ"], [67, 2, 3, "enum_LAST_WRITE"], [71, 67, 2, "enum_LAST_READ"], [71, 2, 3, "enum_LAST_WRITE"], [77, 58, 2, "enum_LAST_READ"], [77, 43, 3, "enum_LAST_WRITE"], [88, 77, 2, "enum_LAST_READ"], [88, 43, 3, "enum_LAST_WRITE"], [99, 58, 2, "enum_LAST_READ"], [99, 43, 3, "enum_LAST_WRITE"], [108, 29, 3, "enum_LAST_WRITE"], [108, 108, 3, "enum_LAST_WRITE"], [112, 45, 2, "enum_LAST_READ"], [112, 2, 3, "enum_LAST_WRITE"], [119, 99, 2, "enum_LAST_READ"], [119, 43, 3, "enum_LAST_WRITE"], [139, 45, 2, "enum_LAST_READ"], [139, 2, 3, "enum_LAST_WRITE"], [149, 139, 2, "enum_LAST_READ"], [149, 71, 2, "enum_LAST_READ"], [149, 21, 2, "enum_LAST_READ"], [149, 112, 2, "enum_LAST_READ"], [149, 2, 3, "enum_LAST_WRITE"], [153, 29, 3, "enum_LAST_WRITE"], [153, 108, 3, "enum_LAST_WRITE"], [158, 34, 3, "enum_LAST_WRITE"], [43, 45, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "ProgVal", "repo": "Limnoria", "path": "plugins/Games/test.py", "id": 6262, "has_bug": false, "code_full": "import re\nimport unittest\nfrom typing import Any, List\n\n\nclass Msg:\n    command: str\n    args: List\n\n\nclass IRC:\n    nick: str\n\n    def feedMsg(self, msg: Any) -> None:\n        pass\n\n\nclass IrcMsgs:\n    def op(self, channel: str, nick: str) -> Any:\n        pass\n\n\nircmsgs = IrcMsgs()\n\n\nclass Class(unittest.TestCase):\n    irc: IRC\n    channel: str\n    _nonKickRe: re.Pattern\n\n    def getMsg(self, cmd: str, frm: str) -> Msg:\n        return Msg()\n\n    def testRoulette(self):\n        self.irc.feedMsg(ircmsgs.op(self.channel, self.irc.nick))\n        sawKick = False\n        for i in range(100):\n            m: Msg = self.getMsg('roulette', frm='someoneElse')\n            if m.command == 'PRIVMSG':\n                self.failUnless(self._nonKickRe.search(m.args[1]),\n                                'Got a msg without bang|click|spin: %r' % m)\n            elif m.command == 'KICK':\n                sawKick: bool = True\n                self.failUnless('bang' in m.args[2].lower(),\n                                'Got a KICK without bang in it.')\n            else:\n                self.fail('Got something other than a kick or a privmsg.')\n        self.failUnless(sawKick, 'Didn't get a kick in %s iterations!' % i)\n", "code": "def testRoulette(self):\n    self.irc.feedMsg(ircmsgs.op(self.channel, self.irc.nick))\n    sawKick = False\n    for i in range(100):\n        m: Msg = self.getMsg('roulette', frm='someoneElse')\n        if m.command == 'PRIVMSG':\n            self.failUnless(self._nonKickRe.search(m.args[1]),\n                            'Got a msg without bang|click|spin: %r' % m)\n        elif m.command == 'KICK':\n            sawKick: bool = True\n            self.failUnless('bang' in m.args[2].lower(),\n                            'Got a KICK without bang in it.')\n        else:\n            self.fail('Got something other than a kick or a privmsg.')\n    self.failUnless(sawKick, 'Didn't get a kick in %s iterations!' % i)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "22956a3f4dc9f777a091b46501fede7a4bf0731c"}
{"source_tokens": ["#NEWLINE#", "def __init__(", "self", ",", "current_test", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "_current_test", "=", "current_test", "#NEWLINE#", "self", ".", "oldtrace", "=", "None", "#NEWLINE#", "self", ".", "_last_traces", "=", "[", "]", "#NEWLINE#", "self", ".", "_snap_shots", "=", "defaultdict", "(", "list", ")", "#NEWLINE#", "self", ".", "_blocking_time", "=", "{", "}", "#NEWLINE#", "self", ".", "_current_test", "=", "None", "#NEWLINE#", "self", ".", "_last_switch_time", "=", "None", "#NEWLINE#", "self", ".", "_momento_time", "=", "None", "#NEWLINE#", "self", ".", "_started", "=", "False"], "edges": [[1, 3, 7, "enum_FIELD"], [10, 15, 7, "enum_FIELD"], [16, 21, 7, "enum_FIELD"], [22, 27, 7, "enum_FIELD"], [29, 35, 7, "enum_FIELD"], [38, 43, 7, "enum_FIELD"], [45, 50, 7, "enum_FIELD"], [51, 56, 7, "enum_FIELD"], [57, 62, 7, "enum_FIELD"], [63, 68, 7, "enum_FIELD"], [12, 11, 7, "enum_FIELD"], [18, 17, 7, "enum_FIELD"], [24, 23, 7, "enum_FIELD"], [31, 30, 7, "enum_FIELD"], [35, 34, 7, "enum_FIELD"], [40, 39, 7, "enum_FIELD"], [47, 46, 7, "enum_FIELD"], [53, 52, 7, "enum_FIELD"], [59, 58, 7, "enum_FIELD"], [65, 64, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 10, 9, "enum_NEXT_SYNTAX"], [11, 2, 10, "enum_LAST_LEXICAL_USE"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [15, 4, 10, "enum_LAST_LEXICAL_USE"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [17, 11, 10, "enum_LAST_LEXICAL_USE"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [23, 17, 10, "enum_LAST_LEXICAL_USE"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [30, 23, 10, "enum_LAST_LEXICAL_USE"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [39, 30, 10, "enum_LAST_LEXICAL_USE"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [46, 39, 10, "enum_LAST_LEXICAL_USE"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [52, 46, 10, "enum_LAST_LEXICAL_USE"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [58, 52, 10, "enum_LAST_LEXICAL_USE"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [64, 58, 10, "enum_LAST_LEXICAL_USE"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [6, 1, 1, "enum_CFG_NEXT"], [3, 10, 1, "enum_CFG_NEXT"], [10, 16, 1, "enum_CFG_NEXT"], [16, 22, 1, "enum_CFG_NEXT"], [22, 29, 1, "enum_CFG_NEXT"], [29, 38, 1, "enum_CFG_NEXT"], [38, 45, 1, "enum_CFG_NEXT"], [45, 51, 1, "enum_CFG_NEXT"], [51, 57, 1, "enum_CFG_NEXT"], [57, 63, 1, "enum_CFG_NEXT"], [15, 4, 3, "enum_LAST_WRITE"], [11, 2, 3, "enum_LAST_WRITE"], [17, 11, 2, "enum_LAST_READ"], [17, 2, 3, "enum_LAST_WRITE"], [23, 17, 2, "enum_LAST_READ"], [23, 2, 3, "enum_LAST_WRITE"], [30, 23, 2, "enum_LAST_READ"], [30, 2, 3, "enum_LAST_WRITE"], [39, 30, 2, "enum_LAST_READ"], [39, 2, 3, "enum_LAST_WRITE"], [46, 39, 2, "enum_LAST_READ"], [46, 2, 3, "enum_LAST_WRITE"], [52, 46, 2, "enum_LAST_READ"], [52, 2, 3, "enum_LAST_WRITE"], [58, 52, 2, "enum_LAST_READ"], [58, 2, 3, "enum_LAST_WRITE"], [64, 58, 2, "enum_LAST_READ"], [64, 2, 3, "enum_LAST_WRITE"], [12, 15, 4, "enum_COMPUTED_FROM"], [31, 34, 4, "enum_COMPUTED_FROM"], [31, 36, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "ooici", "repo": "pyon", "path": "pyon/util/gevent_block_plugin.py", "id": 31398, "has_bug": false, "code_full": "from collections import defaultdict\nfrom typing import Any, Dict, List, Optional\n\n\nclass Class:\n    _current_test: Optional[str]\n    oldtrace: Any\n    _last_traces: List[Any]\n    _snap_shots: Dict[Any, List[Any]]\n    _blocking_time: Dict[Any, Any]\n    _last_switch_time: Any\n    _momento_time: Any\n    _started: bool\n\n    def __init__(self, current_test=None):\n        self._current_test = current_test\n        self.oldtrace = None\n        self._last_traces = []\n        self._snap_shots = defaultdict(list)\n        self._blocking_time = {}\n\n        # Read current test id\n        self._current_test = None\n\n        # A global variable for tracking the time of the last greenlet switch.\n        # For server processes that use a single OS-level thread, a global works fine.\n        # You might like to use a threadlocal for complicated setups.\n        #Used by alarm mode\n        self._last_switch_time = None\n        self._momento_time = None\n\n        self._started = False\n", "code": "def __init__(self, current_test=None):\n    self._current_test = current_test\n    self.oldtrace = None\n    self._last_traces = []\n    self._snap_shots = defaultdict(list)\n    self._blocking_time = {}\n\n    # Read current test id\n    self._current_test = None\n\n    # A global variable for tracking the time of the last greenlet switch.\n    # For server processes that use a single OS-level thread, a global works fine.\n    # You might like to use a threadlocal for complicated setups.\n    #Used by alarm mode\n    self._last_switch_time = None\n    self._momento_time = None\n\n    self._started = False\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "fd8daa4c620db5e5f2a307ba9f73bbd33fd00272"}
{"source_tokens": ["#NEWLINE#", "def test_set_deployment_priorities(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "nodes", "=", "[", "{", "'role'", ":", "'zabbix-server'", "}", ",", "{", "'role'", ":", "'mongo'", "}", ",", "{", "'role'", ":", "'primary-mongo'", "}", ",", "{", "'role'", ":", "'primary-controller'", "}", ",", "{", "'role'", ":", "'controller'", "}", ",", "{", "'role'", ":", "'controller'", "}", ",", "{", "'role'", ":", "'ceph-osd'", "}", "]", "#NEWLINE#", "self", ".", "add_default_params", "(", "nodes", ")", "#NEWLINE#", "self", ".", "serializer", ".", "set_deployment_priorities", "(", "nodes", ")", "#NEWLINE#", "expected_priorities", "=", "[", "{", "'role'", ":", "'zabbix-server'", ",", "'priority'", ":", "100", "}", ",", "{", "'role'", ":", "'mongo'", ",", "'priority'", ":", "200", "}", ",", "{", "'role'", ":", "'primary-mongo'", ",", "'priority'", ":", "300", "}", ",", "{", "'role'", ":", "'primary-controller'", ",", "'priority'", ":", "400", "}", ",", "{", "'role'", ":", "'controller'", ",", "'priority'", ":", "500", "}", ",", "{", "'role'", ":", "'controller'", ",", "'priority'", ":", "500", "}", ",", "{", "'role'", ":", "'ceph-osd'", ",", "'priority'", ":", "600", "}", "]", "#NEWLINE#", "self", ".", "add_default_params", "(", "expected_priorities", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "expected_priorities", ",", "nodes", ")"], "edges": [[6, 27, 7, "enum_FIELD"], [52, 56, 7, "enum_FIELD"], [59, 65, 7, "enum_FIELD"], [68, 101, 7, "enum_FIELD"], [142, 146, 7, "enum_FIELD"], [149, 155, 7, "enum_FIELD"], [56, 54, 7, "enum_FIELD"], [65, 63, 7, "enum_FIELD"], [146, 144, 7, "enum_FIELD"], [155, 151, 7, "enum_FIELD"], [54, 53, 7, "enum_FIELD"], [63, 61, 7, "enum_FIELD"], [144, 143, 7, "enum_FIELD"], [151, 150, 7, "enum_FIELD"], [61, 60, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [53, 2, 10, "enum_LAST_LEXICAL_USE"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [57, 7, 10, "enum_LAST_LEXICAL_USE"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [60, 53, 10, "enum_LAST_LEXICAL_USE"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [66, 57, 10, "enum_LAST_LEXICAL_USE"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [143, 60, 10, "enum_LAST_LEXICAL_USE"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [147, 69, 10, "enum_LAST_LEXICAL_USE"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [150, 143, 10, "enum_LAST_LEXICAL_USE"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [154, 147, 10, "enum_LAST_LEXICAL_USE"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [156, 66, 10, "enum_LAST_LEXICAL_USE"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [6, 52, 1, "enum_CFG_NEXT"], [52, 59, 1, "enum_CFG_NEXT"], [59, 68, 1, "enum_CFG_NEXT"], [68, 142, 1, "enum_CFG_NEXT"], [142, 149, 1, "enum_CFG_NEXT"], [53, 2, 3, "enum_LAST_WRITE"], [57, 7, 3, "enum_LAST_WRITE"], [60, 53, 2, "enum_LAST_READ"], [60, 2, 3, "enum_LAST_WRITE"], [66, 57, 2, "enum_LAST_READ"], [66, 7, 3, "enum_LAST_WRITE"], [143, 60, 2, "enum_LAST_READ"], [143, 2, 3, "enum_LAST_WRITE"], [147, 69, 3, "enum_LAST_WRITE"], [150, 143, 2, "enum_LAST_READ"], [150, 2, 3, "enum_LAST_WRITE"], [154, 147, 2, "enum_LAST_READ"], [154, 69, 3, "enum_LAST_WRITE"], [156, 66, 2, "enum_LAST_READ"], [156, 7, 3, "enum_LAST_WRITE"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "openstack", "repo": "fuel-web", "path": "nailgun/nailgun/test/integration/test_orchestrator_serializer.py", "id": 35558, "has_bug": false, "code_full": "import unittest\nfrom typing import Any, Dict, List\n\n\nclass AstuteGraph:\n    cluster_mock: \"ClusterMock\"\n\n    def __init__(self, cluster_mock: \"ClusterMock\"):\n        self.cluster_mock = cluster_mock\n\n\nclass DeploymentMultinodeSerializer:\n    graph: AstuteGraph\n\n    def __init__(self, graph: AstuteGraph):\n        self.graph = graph\n\n    def set_deployment_priorities(self, nodes: List[Dict[str, Any]]):\n        pass\n\n\nclass Release:\n    environment_version: str\n\n\nclass ClusterMock:\n    release: Release\n\n\nclass Class(unittest.TestCase):\n    cluster_mock: ClusterMock\n\n    def add_default_params(self, nodes: List[Dict[str, Any]]):\n        pass\n\n    def test_set_deployment_priorities(self):\n        nodes: List[Dict[str, Any]] = [\n            {'role': 'mongo'},\n            {'role': 'mongo'},\n            {'role': 'primary-mongo'},\n            {'role': 'controller'},\n            {'role': 'ceph-osd'}\n        ]\n        self.add_default_params(nodes)\n        self.cluster_mock.release.environment_version = '5.0'\n        serializer: DeploymentMultinodeSerializer = DeploymentMultinodeSerializer(\n            AstuteGraph(self.cluster_mock))\n        serializer.set_deployment_priorities(nodes)\n        expected_priorities: List[Dict[str, Any]] = [\n            {'role': 'mongo', 'priority': 100},\n            {'role': 'mongo', 'priority': 200},\n            {'role': 'primary-mongo', 'priority': 300},\n            {'role': 'controller', 'priority': 400},\n            {'role': 'ceph-osd', 'priority': 500}\n        ]\n        self.add_default_params(expected_priorities)\n        self.assertEqual(expected_priorities, nodes)\n", "code": "def test_set_deployment_priorities(self):\n    nodes: List[Dict[str, Any]] = [\n        {'role': 'mongo'},\n        {'role': 'mongo'},\n        {'role': 'primary-mongo'},\n        {'role': 'controller'},\n        {'role': 'ceph-osd'}\n    ]\n    self.add_default_params(nodes)\n    self.cluster_mock.release.environment_version = '5.0'\n    serializer: DeploymentMultinodeSerializer = DeploymentMultinodeSerializer(\n        AstuteGraph(self.cluster_mock))\n    serializer.set_deployment_priorities(nodes)\n    expected_priorities: List[Dict[str, Any]] = [\n        {'role': 'mongo', 'priority': 100},\n        {'role': 'mongo', 'priority': 200},\n        {'role': 'primary-mongo', 'priority': 300},\n        {'role': 'controller', 'priority': 400},\n        {'role': 'ceph-osd', 'priority': 500}\n    ]\n    self.add_default_params(expected_priorities)\n    self.assertEqual(expected_priorities, nodes)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "94092366f24c430e5616c21866941b4a031cb33d"}
{"source_tokens": ["#NEWLINE#", "def before_step(", "self", ",", "model", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    .. todo::\\n\\n        WRITEME\\n    '", "#NEWLINE#", "if", "(", "self", ".", "scale_step", "!=", "1.0", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "params", "=", "list", "(", "model", ".", "get_params", "(", ")", ")", "#NEWLINE#", "self", ".", "value", "=", "[", "param", ".", "get_value", "(", ")", "for", "param", "in", "self", ".", "params", "]"], "edges": [[1, 3, 7, "enum_FIELD"], [8, 9, 7, "enum_FIELD"], [11, 16, 7, "enum_FIELD"], [16, 14, 7, "enum_FIELD"], [21, 27, 7, "enum_FIELD"], [34, 39, 7, "enum_FIELD"], [14, 13, 7, "enum_FIELD"], [23, 22, 7, "enum_FIELD"], [27, 26, 7, "enum_FIELD"], [36, 35, 7, "enum_FIELD"], [39, 43, 7, "enum_FIELD"], [31, 29, 7, "enum_FIELD"], [43, 41, 7, "enum_FIELD"], [45, 46, 7, "enum_FIELD"], [45, 49, 7, "enum_FIELD"], [29, 28, 7, "enum_FIELD"], [41, 40, 7, "enum_FIELD"], [49, 48, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [13, 2, 10, "enum_LAST_LEXICAL_USE"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 21, 9, "enum_NEXT_SYNTAX"], [22, 13, 10, "enum_LAST_LEXICAL_USE"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [28, 4, 10, "enum_LAST_LEXICAL_USE"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [35, 22, 10, "enum_LAST_LEXICAL_USE"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [46, 40, 10, "enum_LAST_LEXICAL_USE"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [48, 35, 10, "enum_LAST_LEXICAL_USE"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [3, 8, 1, "enum_CFG_NEXT"], [8, 16, 1, "enum_CFG_NEXT"], [16, 21, 1, "enum_CFG_NEXT"], [21, 34, 1, "enum_CFG_NEXT"], [13, 2, 3, "enum_LAST_WRITE"], [28, 4, 3, "enum_LAST_WRITE"], [22, 13, 2, "enum_LAST_READ"], [22, 2, 3, "enum_LAST_WRITE"], [46, 40, 2, "enum_LAST_READ"], [48, 22, 2, "enum_LAST_READ"], [48, 2, 3, "enum_LAST_WRITE"], [35, 48, 2, "enum_LAST_READ"], [35, 2, 3, "enum_LAST_WRITE"], [23, 26, 4, "enum_COMPUTED_FROM"], [23, 28, 4, "enum_COMPUTED_FROM"], [36, 46, 4, "enum_COMPUTED_FROM"], [36, 40, 4, "enum_COMPUTED_FROM"], [36, 48, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "lisa-lab", "repo": "pylearn2", "path": "pylearn2/training_algorithms/bgd.py", "id": 25018, "has_bug": false, "code_full": "from typing import Any, List\n\n\nclass Model:\n    def get_params(self) -> List[Any]:\n        return []\n\n\nclass Class:\n    scale_step: float\n    params: List[Any]\n    value: List[Any]\n\n    def before_step(self, model: Model):\n        \"\"\"\n        .. todo::\n\n            WRITEME\n        \"\"\"\n        if self.scale_step != 1.:\n            self.params = list(model.get_params())\n            self.value = [param.get_value() for param in self.params]\n", "code": "def before_step(self, model: Model):\n    \"\"\"\n    .. todo::\n\n        WRITEME\n    \"\"\"\n    if self.scale_step != 1.:\n        self.params = list(model.get_params())\n        self.value = [param.get_value() for param in self.params]\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "104261becabb66f506a68d9f7190d42d8c4917f8"}
{"source_tokens": ["#NEWLINE#", "def _check_cert_directory(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "cert_path", "=", "FilePath", "(", "self", "[", "'cert-directory'", "]", ")", "#NEWLINE#", "self", "[", "'cert-directory'", "]", "=", "cert_path", "#NEWLINE#", "if", "(", "not", "cert_path", ".", "exists", "(", ")", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "UsageError", "(", "'{} does not exist'", ".", "format", "(", "cert_path", ".", "path", ")", ")", "#NEWLINE#", "#UNINDENT#", "if", "(", "not", "cert_path", ".", "isdir", "(", ")", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "UsageError", "(", "'{} is not a directory'", ".", "format", "(", "cert_path", ".", "path", ")", ")"], "edges": [[6, 10, 7, "enum_FIELD"], [16, 22, 7, "enum_FIELD"], [24, 26, 7, "enum_FIELD"], [50, 52, 7, "enum_FIELD"], [10, 9, 7, "enum_FIELD"], [18, 17, 7, "enum_FIELD"], [18, 19, 7, "enum_FIELD"], [26, 30, 7, "enum_FIELD"], [36, 38, 7, "enum_FIELD"], [52, 56, 7, "enum_FIELD"], [62, 64, 7, "enum_FIELD"], [12, 11, 7, "enum_FIELD"], [12, 13, 7, "enum_FIELD"], [30, 28, 7, "enum_FIELD"], [38, 37, 7, "enum_FIELD"], [56, 54, 7, "enum_FIELD"], [64, 63, 7, "enum_FIELD"], [28, 27, 7, "enum_FIELD"], [42, 40, 7, "enum_FIELD"], [54, 53, 7, "enum_FIELD"], [68, 66, 7, "enum_FIELD"], [40, 39, 7, "enum_FIELD"], [44, 43, 7, "enum_FIELD"], [66, 65, 7, "enum_FIELD"], [70, 69, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [11, 2, 10, "enum_LAST_LEXICAL_USE"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [17, 11, 10, "enum_LAST_LEXICAL_USE"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [22, 7, 10, "enum_LAST_LEXICAL_USE"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [27, 22, 10, "enum_LAST_LEXICAL_USE"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [43, 27, 10, "enum_LAST_LEXICAL_USE"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [53, 43, 10, "enum_LAST_LEXICAL_USE"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 62, 9, "enum_NEXT_SYNTAX"], [63, 37, 10, "enum_LAST_LEXICAL_USE"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [69, 53, 10, "enum_LAST_LEXICAL_USE"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [6, 16, 1, "enum_CFG_NEXT"], [16, 26, 1, "enum_CFG_NEXT"], [26, 52, 1, "enum_CFG_NEXT"], [26, 36, 1, "enum_CFG_NEXT"], [52, 62, 1, "enum_CFG_NEXT"], [11, 2, 3, "enum_LAST_WRITE"], [22, 7, 3, "enum_LAST_WRITE"], [17, 11, 2, "enum_LAST_READ"], [17, 2, 3, "enum_LAST_WRITE"], [27, 22, 2, "enum_LAST_READ"], [27, 7, 3, "enum_LAST_WRITE"], [43, 27, 2, "enum_LAST_READ"], [43, 7, 3, "enum_LAST_WRITE"], [53, 27, 2, "enum_LAST_READ"], [53, 7, 3, "enum_LAST_WRITE"], [69, 53, 2, "enum_LAST_READ"], [69, 7, 3, "enum_LAST_WRITE"], [7, 9, 4, "enum_COMPUTED_FROM"], [7, 11, 4, "enum_COMPUTED_FROM"], [18, 22, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "ClusterHQ", "repo": "flocker", "path": "admin/cluster_add_nodes.py", "id": 3380, "has_bug": false, "code_full": "from typing import Any\n\nfrom twisted.python.filepath import FilePath\n\n\nclass UsageError(Exception):\n    pass\n\n\nclass Class:\n    def __getitem__(self, key: str) -> Any:\n        pass\n\n    def __setitem__(self, key: str, value: Any) -> None:\n        pass\n\n    def _check_cert_directory(self):\n        cert_path: FilePath = FilePath(self['cert-directory'])\n        self['cert-directory'] = cert_path\n        if not cert_path.exists():\n            raise UsageError(\"{} does not exist\".format(cert_path.path))\n        if not cert_path.isdir():\n            raise UsageError(\"{} is not a directory\".format(cert_path.path))\n", "code": "def _check_cert_directory(self):\n    cert_path: FilePath = FilePath(self['cert-directory'])\n    self['cert-directory'] = cert_path\n    if not cert_path.exists():\n        raise UsageError(\"{} does not exist\".format(cert_path.path))\n    if not cert_path.isdir():\n        raise UsageError(\"{} is not a directory\".format(cert_path.path))\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "eaa586248986d7cd681c99c948546c2b507e44de"}
{"source_tokens": ["#NEWLINE#", "def test_2d_1d(", ")", ":", "#NEWLINE#", "#INDENT#", "x", "=", "np", ".", "zeros", "(", "(", "2", ",", "3", ")", ")", "#NEWLINE#", "y", "=", "np", ".", "ones", "(", "(", "3", ",", ")", ")", "#NEWLINE#", "res", "=", "add", "(", "x", ",", "y", ")", "#NEWLINE#", "expect_eq", "(", "res", ",", "(", "x", "+", "y", ")", ")"], "edges": [[5, 11, 7, "enum_FIELD"], [18, 24, 7, "enum_FIELD"], [30, 36, 7, "enum_FIELD"], [39, 43, 7, "enum_FIELD"], [11, 9, 7, "enum_FIELD"], [24, 22, 7, "enum_FIELD"], [36, 33, 7, "enum_FIELD"], [43, 40, 7, "enum_FIELD"], [9, 8, 7, "enum_FIELD"], [22, 21, 7, "enum_FIELD"], [46, 45, 7, "enum_FIELD"], [46, 47, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [21, 8, 10, "enum_LAST_LEXICAL_USE"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [35, 6, 10, "enum_LAST_LEXICAL_USE"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [37, 19, 10, "enum_LAST_LEXICAL_USE"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [42, 31, 10, "enum_LAST_LEXICAL_USE"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [45, 35, 10, "enum_LAST_LEXICAL_USE"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [47, 37, 10, "enum_LAST_LEXICAL_USE"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [5, 18, 1, "enum_CFG_NEXT"], [18, 30, 1, "enum_CFG_NEXT"], [30, 39, 1, "enum_CFG_NEXT"], [21, 8, 2, "enum_LAST_READ"], [35, 6, 3, "enum_LAST_WRITE"], [37, 19, 3, "enum_LAST_WRITE"], [42, 31, 3, "enum_LAST_WRITE"], [45, 35, 2, "enum_LAST_READ"], [45, 6, 3, "enum_LAST_WRITE"], [47, 37, 2, "enum_LAST_READ"], [47, 19, 3, "enum_LAST_WRITE"], [6, 8, 4, "enum_COMPUTED_FROM"], [19, 21, 4, "enum_COMPUTED_FROM"], [31, 33, 4, "enum_COMPUTED_FROM"], [31, 35, 4, "enum_COMPUTED_FROM"], [31, 37, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "iskandr", "repo": "parakeet", "path": "test/arrays/test_broadcasting.py", "id": 21073, "has_bug": false, "code_full": "import numpy as np\n\n\ndef add(x: np.ndarray,y: np.ndarray) -> np.ndarray:\n    return x + y\n\n\ndef expect_eq(a: np.ndarray, b: np.ndarray):\n    return True\n\n\ndef test_2d_1d():\n    x: np.ndarray = np.zeros((2,3))\n    y: np.ndarray = np.ones((3,))\n    res: np.ndarray = add(x, y)\n    expect_eq(res, x + y)\n", "code": "def test_2d_1d():\n    x: np.ndarray = np.zeros((2,3))\n    y: np.ndarray = np.ones((3,))\n    res: np.ndarray = add(x, y)\n    expect_eq(res, x + y)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "c9c2487a1760af0f15c450a05332995ba4cd0074"}
{"source_tokens": ["#NEWLINE#", "def test_send_with_frag_index_none(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "policy", "=", "POLICIES", ".", "default", "#NEWLINE#", "tx_df_mgr", "=", "self", ".", "daemon", ".", "_diskfile_router", "[", "policy", "]", "#NEWLINE#", "rx_df_mgr", "=", "self", ".", "rx_controller", ".", "_diskfile_router", "[", "policy", "]", "#NEWLINE#", "ts1", "=", "next", "(", "self", ".", "ts_iter", ")", "#NEWLINE#", "remote_df", "=", "self", ".", "_create_ondisk_files", "(", "rx_df_mgr", ",", "'o'", ",", "policy", ",", "ts1", ",", "(", "3", ",", ")", ")", "[", "0", "]", "#NEWLINE#", "df", "=", "self", ".", "_create_ondisk_files", "(", "tx_df_mgr", ",", "'o'", ",", "policy", ",", "ts1", ",", "(", "3", ",", ")", ")", "[", "0", "]", "#NEWLINE#", "suffix", "=", "os", ".", "path", ".", "basename", "(", "os", ".", "path", ".", "dirname", "(", "df", ".", "_datadir", ")", ")", "#NEWLINE#", "ts2", "=", "next", "(", "self", ".", "ts_iter", ")", "#NEWLINE#", "df", ".", "delete", "(", "ts2", ")", "#NEWLINE#", "job", "=", "{", "'frag_index'", ":", "None", ",", "'partition'", ":", "self", ".", "partition", ",", "'policy'", ":", "policy", ",", "'device'", ":", "self", ".", "device", "}", "#NEWLINE#", "sender", "=", "ssync_sender", ".", "Sender", "(", "self", ".", "daemon", ",", "self", ".", "rx_node", ",", "job", ",", "[", "suffix", "]", ")", "#NEWLINE#", "(", "success", ",", "_", ")", "=", "sender", "(", ")", "#NEWLINE#", "self", ".", "assertTrue", "(", "success", ")", "#NEWLINE#", "try", ":", "#NEWLINE#", "#INDENT#", "remote_df", ".", "read_metadata", "(", ")", "#NEWLINE#", "#UNINDENT#", "except", "DiskFileDeleted", "as", "e", ":", "#NEWLINE#", "#INDENT#", "self", ".", "assertEqual", "(", "e", ".", "timestamp", ",", "ts2", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "self", ".", "fail", "(", "'Successfully opened remote DiskFile'", ")"], "edges": [[6, 10, 7, "enum_FIELD"], [12, 20, 7, "enum_FIELD"], [23, 31, 7, "enum_FIELD"], [34, 38, 7, "enum_FIELD"], [43, 63, 7, "enum_FIELD"], [66, 86, 7, "enum_FIELD"], [89, 97, 7, "enum_FIELD"], [109, 113, 7, "enum_FIELD"], [118, 122, 7, "enum_FIELD"], [125, 138, 7, "enum_FIELD"], [149, 163, 7, "enum_FIELD"], [170, 178, 7, "enum_FIELD"], [180, 184, 7, "enum_FIELD"], [10, 9, 7, "enum_FIELD"], [20, 18, 7, "enum_FIELD"], [20, 21, 7, "enum_FIELD"], [31, 29, 7, "enum_FIELD"], [31, 32, 7, "enum_FIELD"], [38, 37, 7, "enum_FIELD"], [63, 53, 7, "enum_FIELD"], [63, 64, 7, "enum_FIELD"], [86, 76, 7, "enum_FIELD"], [86, 87, 7, "enum_FIELD"], [97, 95, 7, "enum_FIELD"], [113, 112, 7, "enum_FIELD"], [122, 120, 7, "enum_FIELD"], [163, 153, 7, "enum_FIELD"], [178, 177, 7, "enum_FIELD"], [184, 182, 7, "enum_FIELD"], [191, 195, 7, "enum_FIELD"], [201, 200, 7, "enum_FIELD"], [201, 202, 7, "enum_FIELD"], [221, 225, 7, "enum_FIELD"], [18, 16, 7, "enum_FIELD"], [29, 27, 7, "enum_FIELD"], [40, 39, 7, "enum_FIELD"], [53, 47, 7, "enum_FIELD"], [76, 70, 7, "enum_FIELD"], [95, 93, 7, "enum_FIELD"], [103, 101, 7, "enum_FIELD"], [115, 114, 7, "enum_FIELD"], [120, 119, 7, "enum_FIELD"], [136, 135, 7, "enum_FIELD"], [146, 145, 7, "enum_FIELD"], [153, 152, 7, "enum_FIELD"], [157, 156, 7, "enum_FIELD"], [161, 160, 7, "enum_FIELD"], [182, 181, 7, "enum_FIELD"], [195, 193, 7, "enum_FIELD"], [205, 213, 7, "enum_FIELD"], [225, 223, 7, "enum_FIELD"], [16, 15, 7, "enum_FIELD"], [27, 26, 7, "enum_FIELD"], [47, 46, 7, "enum_FIELD"], [70, 69, 7, "enum_FIELD"], [93, 92, 7, "enum_FIELD"], [101, 99, 7, "enum_FIELD"], [105, 104, 7, "enum_FIELD"], [193, 192, 7, "enum_FIELD"], [213, 207, 7, "enum_FIELD"], [223, 222, 7, "enum_FIELD"], [99, 98, 7, "enum_FIELD"], [207, 206, 7, "enum_FIELD"], [211, 210, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [15, 2, 10, "enum_LAST_LEXICAL_USE"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [21, 7, 10, "enum_LAST_LEXICAL_USE"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [26, 15, 10, "enum_LAST_LEXICAL_USE"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [32, 21, 10, "enum_LAST_LEXICAL_USE"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [39, 26, 10, "enum_LAST_LEXICAL_USE"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [46, 39, 10, "enum_LAST_LEXICAL_USE"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [50, 24, 10, "enum_LAST_LEXICAL_USE"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [54, 32, 10, "enum_LAST_LEXICAL_USE"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [56, 35, 10, "enum_LAST_LEXICAL_USE"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [69, 46, 10, "enum_LAST_LEXICAL_USE"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [73, 13, 10, "enum_LAST_LEXICAL_USE"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [77, 54, 10, "enum_LAST_LEXICAL_USE"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [79, 56, 10, "enum_LAST_LEXICAL_USE"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [98, 92, 10, "enum_LAST_LEXICAL_USE"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [104, 67, 10, "enum_LAST_LEXICAL_USE"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [112, 37, 10, "enum_LAST_LEXICAL_USE"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [114, 69, 10, "enum_LAST_LEXICAL_USE"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [119, 104, 10, "enum_LAST_LEXICAL_USE"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [123, 110, 10, "enum_LAST_LEXICAL_USE"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [135, 114, 10, "enum_LAST_LEXICAL_USE"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [141, 77, 10, "enum_LAST_LEXICAL_USE"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [145, 135, 10, "enum_LAST_LEXICAL_USE"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [156, 145, 10, "enum_LAST_LEXICAL_USE"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [160, 156, 10, "enum_LAST_LEXICAL_USE"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [164, 126, 10, "enum_LAST_LEXICAL_USE"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [167, 90, 10, "enum_LAST_LEXICAL_USE"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [175, 176, 9, "enum_NEXT_SYNTAX"], [177, 150, 10, "enum_LAST_LEXICAL_USE"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 180, 9, "enum_NEXT_SYNTAX"], [181, 160, 10, "enum_LAST_LEXICAL_USE"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 184, 9, "enum_NEXT_SYNTAX"], [185, 172, 10, "enum_LAST_LEXICAL_USE"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 188, 9, "enum_NEXT_SYNTAX"], [188, 189, 9, "enum_NEXT_SYNTAX"], [189, 191, 9, "enum_NEXT_SYNTAX"], [192, 44, 10, "enum_LAST_LEXICAL_USE"], [191, 192, 9, "enum_NEXT_SYNTAX"], [192, 193, 9, "enum_NEXT_SYNTAX"], [193, 194, 9, "enum_NEXT_SYNTAX"], [194, 195, 9, "enum_NEXT_SYNTAX"], [195, 196, 9, "enum_NEXT_SYNTAX"], [196, 199, 9, "enum_NEXT_SYNTAX"], [199, 200, 9, "enum_NEXT_SYNTAX"], [200, 201, 9, "enum_NEXT_SYNTAX"], [201, 202, 9, "enum_NEXT_SYNTAX"], [202, 203, 9, "enum_NEXT_SYNTAX"], [203, 205, 9, "enum_NEXT_SYNTAX"], [206, 181, 10, "enum_LAST_LEXICAL_USE"], [205, 206, 9, "enum_NEXT_SYNTAX"], [206, 207, 9, "enum_NEXT_SYNTAX"], [207, 208, 9, "enum_NEXT_SYNTAX"], [208, 209, 9, "enum_NEXT_SYNTAX"], [210, 202, 10, "enum_LAST_LEXICAL_USE"], [209, 210, 9, "enum_NEXT_SYNTAX"], [210, 211, 9, "enum_NEXT_SYNTAX"], [211, 212, 9, "enum_NEXT_SYNTAX"], [212, 213, 9, "enum_NEXT_SYNTAX"], [214, 123, 10, "enum_LAST_LEXICAL_USE"], [213, 214, 9, "enum_NEXT_SYNTAX"], [214, 215, 9, "enum_NEXT_SYNTAX"], [215, 218, 9, "enum_NEXT_SYNTAX"], [218, 219, 9, "enum_NEXT_SYNTAX"], [219, 221, 9, "enum_NEXT_SYNTAX"], [222, 206, 10, "enum_LAST_LEXICAL_USE"], [221, 222, 9, "enum_NEXT_SYNTAX"], [222, 223, 9, "enum_NEXT_SYNTAX"], [223, 224, 9, "enum_NEXT_SYNTAX"], [224, 225, 9, "enum_NEXT_SYNTAX"], [225, 226, 9, "enum_NEXT_SYNTAX"], [226, 227, 9, "enum_NEXT_SYNTAX"], [6, 12, 1, "enum_CFG_NEXT"], [12, 23, 1, "enum_CFG_NEXT"], [23, 34, 1, "enum_CFG_NEXT"], [34, 43, 1, "enum_CFG_NEXT"], [43, 66, 1, "enum_CFG_NEXT"], [66, 89, 1, "enum_CFG_NEXT"], [89, 109, 1, "enum_CFG_NEXT"], [109, 118, 1, "enum_CFG_NEXT"], [118, 125, 1, "enum_CFG_NEXT"], [125, 149, 1, "enum_CFG_NEXT"], [149, 170, 1, "enum_CFG_NEXT"], [170, 180, 1, "enum_CFG_NEXT"], [180, 191, 1, "enum_CFG_NEXT"], [191, 200, 1, "enum_CFG_NEXT"], [191, 221, 1, "enum_CFG_NEXT"], [200, 202, 1, "enum_CFG_NEXT"], [202, 205, 1, "enum_CFG_NEXT"], [15, 2, 3, "enum_LAST_WRITE"], [21, 7, 3, "enum_LAST_WRITE"], [26, 15, 2, "enum_LAST_READ"], [26, 2, 3, "enum_LAST_WRITE"], [32, 21, 2, "enum_LAST_READ"], [32, 7, 3, "enum_LAST_WRITE"], [39, 26, 2, "enum_LAST_READ"], [39, 2, 3, "enum_LAST_WRITE"], [46, 39, 2, "enum_LAST_READ"], [46, 2, 3, "enum_LAST_WRITE"], [50, 24, 3, "enum_LAST_WRITE"], [54, 32, 2, "enum_LAST_READ"], [54, 7, 3, "enum_LAST_WRITE"], [56, 35, 3, "enum_LAST_WRITE"], [69, 46, 2, "enum_LAST_READ"], [69, 2, 3, "enum_LAST_WRITE"], [73, 13, 3, "enum_LAST_WRITE"], [77, 54, 2, "enum_LAST_READ"], [77, 7, 3, "enum_LAST_WRITE"], [79, 56, 2, "enum_LAST_READ"], [79, 35, 3, "enum_LAST_WRITE"], [98, 92, 2, "enum_LAST_READ"], [104, 67, 3, "enum_LAST_WRITE"], [112, 37, 2, "enum_LAST_READ"], [114, 69, 2, "enum_LAST_READ"], [114, 2, 3, "enum_LAST_WRITE"], [119, 104, 2, "enum_LAST_READ"], [119, 67, 3, "enum_LAST_WRITE"], [123, 110, 3, "enum_LAST_WRITE"], [135, 114, 2, "enum_LAST_READ"], [135, 2, 3, "enum_LAST_WRITE"], [141, 77, 2, "enum_LAST_READ"], [141, 7, 3, "enum_LAST_WRITE"], [145, 135, 2, "enum_LAST_READ"], [145, 2, 3, "enum_LAST_WRITE"], [156, 145, 2, "enum_LAST_READ"], [156, 2, 3, "enum_LAST_WRITE"], [160, 156, 2, "enum_LAST_READ"], [160, 2, 3, "enum_LAST_WRITE"], [164, 126, 3, "enum_LAST_WRITE"], [167, 90, 3, "enum_LAST_WRITE"], [177, 150, 3, "enum_LAST_WRITE"], [181, 160, 2, "enum_LAST_READ"], [181, 2, 3, "enum_LAST_WRITE"], [185, 172, 3, "enum_LAST_WRITE"], [192, 44, 3, "enum_LAST_WRITE"], [206, 181, 2, "enum_LAST_READ"], [206, 2, 3, "enum_LAST_WRITE"], [210, 202, 3, "enum_LAST_WRITE"], [214, 123, 2, "enum_LAST_READ"], [214, 110, 3, "enum_LAST_WRITE"], [222, 181, 2, "enum_LAST_READ"], [222, 2, 3, "enum_LAST_WRITE"], [7, 9, 4, "enum_COMPUTED_FROM"], [13, 21, 4, "enum_COMPUTED_FROM"], [13, 15, 4, "enum_COMPUTED_FROM"], [24, 32, 4, "enum_COMPUTED_FROM"], [24, 26, 4, "enum_COMPUTED_FROM"], [35, 37, 4, "enum_COMPUTED_FROM"], [35, 39, 4, "enum_COMPUTED_FROM"], [44, 50, 4, "enum_COMPUTED_FROM"], [44, 54, 4, "enum_COMPUTED_FROM"], [44, 56, 4, "enum_COMPUTED_FROM"], [44, 46, 4, "enum_COMPUTED_FROM"], [67, 73, 4, "enum_COMPUTED_FROM"], [67, 77, 4, "enum_COMPUTED_FROM"], [67, 79, 4, "enum_COMPUTED_FROM"], [67, 69, 4, "enum_COMPUTED_FROM"], [90, 92, 4, "enum_COMPUTED_FROM"], [90, 104, 4, "enum_COMPUTED_FROM"], [90, 98, 4, "enum_COMPUTED_FROM"], [110, 112, 4, "enum_COMPUTED_FROM"], [110, 114, 4, "enum_COMPUTED_FROM"], [126, 141, 4, "enum_COMPUTED_FROM"], [126, 135, 4, "enum_COMPUTED_FROM"], [126, 145, 4, "enum_COMPUTED_FROM"], [150, 164, 4, "enum_COMPUTED_FROM"], [150, 152, 4, "enum_COMPUTED_FROM"], [150, 156, 4, "enum_COMPUTED_FROM"], [150, 160, 4, "enum_COMPUTED_FROM"], [150, 167, 4, "enum_COMPUTED_FROM"], [173, 177, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "openstack", "repo": "swift", "path": "test/unit/obj/test_ssync.py", "id": 36985, "has_bug": false, "code_full": "import os\nimport unittest\nfrom typing import Any, Dict, Iterator, List, Tuple\n\n\nclass DiskFile:\n    _datadir: str\n    \n    def delete(self, timestamp: Any):\n        pass\n    \n    def read_metadata(self):\n        pass\n\n\nclass DiskFileDeleted(Exception):\n    def __init__(self, timestamp: Any):\n        self.timestamp = timestamp\n\n\nclass POLICIES:\n    default: str\n\n\nclass ssync_sender:\n    class Sender:\n        def __init__(self, daemon: Any, rx_node: Any, job: Any, suffixes: List[str]):\n            pass\n        \n        def __call__(self) -> Tuple[bool, Any]:\n            return True, None\n\n\nclass Class(unittest.TestCase):\n    daemon: Any\n    rx_controller: Any\n    ts_iter: Iterator\n    partition: str\n    device: str\n    rx_node: str\n\n    def _create_ondisk_files(self, df_mgr: Any, account: str, policy: str, ts: Any, frag_indexes: Tuple[int]) -> List[DiskFile]:\n        return []\n\n    def test_send_with_frag_index_none(self):\n        policy: str = POLICIES.default\n        tx_df_mgr: Any = self.daemon._df_router[policy]\n        rx_df_mgr: Any = self.rx_controller._diskfile_router[policy]\n        # create an ec fragment on the remote node\n        ts1: Any = next(self.ts_iter)\n        remote_df = self._create_ondisk_files(\n            rx_df_mgr, 'o', policy, ts1, (3,))[0]\n\n        # create a tombstone on the local node\n        df: DiskFile = self._create_ondisk_files(\n            tx_df_mgr, 'o', policy, ts1, (3,))[0]\n        suffix = os.path.basename(os.path.dirname(df._datadir))\n        ts2: Any = next(self.ts_iter)\n        df.delete(ts2)\n        # a reconstructor revert job with only tombstones will have frag_index\n        # explicitly set to None\n        job: Dict[str, Any] = {\n            'frag_index': None,\n            'partition': self.partition,\n            'policy': policy,\n            'device': self.device,\n        }\n        sender: ssync_sender.Sender = ssync_sender.Sender(\n            self.daemon, self.rx_node, job, [suffix])\n        success, _ = sender()\n        self.assertTrue(success)\n        try:\n            remote_df.read_metadata()\n        except DiskFileDeleted as e:\n            self.assertEqual(e.timestamp, ts2)\n        else:\n            self.fail('Successfully opened remote DiskFile')\n", "code": "def test_send_with_frag_index_none(self):\n    policy: str = POLICIES.default\n    tx_df_mgr: Any = self.daemon._df_router[policy]\n    rx_df_mgr: Any = self.rx_controller._diskfile_router[policy]\n    # create an ec fragment on the remote node\n    ts1: Any = next(self.ts_iter)\n    remote_df = self._create_ondisk_files(\n        rx_df_mgr, 'o', policy, ts1, (3,))[0]\n\n    # create a tombstone on the local node\n    df: DiskFile = self._create_ondisk_files(\n        tx_df_mgr, 'o', policy, ts1, (3,))[0]\n    suffix = os.path.basename(os.path.dirname(df._datadir))\n    ts2: Any = next(self.ts_iter)\n    df.delete(ts2)\n    # a reconstructor revert job with only tombstones will have frag_index\n    # explicitly set to None\n    job: Dict[str, Any] = {\n        'frag_index': None,\n        'partition': self.partition,\n        'policy': policy,\n        'device': self.device,\n    }\n    sender: ssync_sender.Sender = ssync_sender.Sender(\n        self.daemon, self.rx_node, job, [suffix])\n    success, _ = sender()\n    self.assertTrue(success)\n    try:\n        remote_df.read_metadata()\n    except DiskFileDeleted as e:\n        self.assertEqual(e.timestamp, ts2)\n    else:\n        self.fail('Successfully opened remote DiskFile')\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "cbb99f97b02857dd638b0d61f5e19b584037b25f"}
{"source_tokens": ["#NEWLINE#", "def send_archiver_file_not_found_mails(", "src", ",", "user", ",", "results", ")", ":", "#NEWLINE#", "#INDENT#", "mails", ".", "send_mail", "(", "to_addr", "=", "settings", ".", "SUPPORT_EMAIL", ",", "mail", "=", "mails", ".", "ARCHIVE_FILE_NOT_FOUND_DESK", ",", "user", "=", "user", ",", "src", "=", "src", ",", "results", "=", "results", ")", "#NEWLINE#", "mails", ".", "send_mail", "(", "to_addr", "=", "user", ".", "username", ",", "mail", "=", "mails", ".", "ARCHIVE_FILE_NOT_FOUND_USER", ",", "user", "=", "user", ",", "src", "=", "src", ",", "results", "=", "results", ",", "can_change_preferences", "=", "False", ",", "mimetype", "=", "'html'", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [10, 26, 7, "enum_FIELD"], [39, 59, 7, "enum_FIELD"], [26, 12, 7, "enum_FIELD"], [59, 41, 7, "enum_FIELD"], [12, 11, 7, "enum_FIELD"], [15, 18, 7, "enum_FIELD"], [21, 24, 7, "enum_FIELD"], [27, 29, 7, "enum_FIELD"], [31, 33, 7, "enum_FIELD"], [35, 37, 7, "enum_FIELD"], [41, 40, 7, "enum_FIELD"], [44, 47, 7, "enum_FIELD"], [50, 53, 7, "enum_FIELD"], [56, 58, 7, "enum_FIELD"], [60, 62, 7, "enum_FIELD"], [64, 66, 7, "enum_FIELD"], [68, 70, 7, "enum_FIELD"], [72, 74, 7, "enum_FIELD"], [18, 17, 7, "enum_FIELD"], [24, 23, 7, "enum_FIELD"], [47, 46, 7, "enum_FIELD"], [53, 52, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [23, 11, 10, "enum_LAST_LEXICAL_USE"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [29, 4, 10, "enum_LAST_LEXICAL_USE"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [33, 2, 10, "enum_LAST_LEXICAL_USE"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [37, 6, 10, "enum_LAST_LEXICAL_USE"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [40, 23, 10, "enum_LAST_LEXICAL_USE"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [46, 29, 10, "enum_LAST_LEXICAL_USE"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [52, 40, 10, "enum_LAST_LEXICAL_USE"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [58, 46, 10, "enum_LAST_LEXICAL_USE"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [62, 33, 10, "enum_LAST_LEXICAL_USE"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [66, 37, 10, "enum_LAST_LEXICAL_USE"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [3, 10, 1, "enum_CFG_NEXT"], [10, 39, 1, "enum_CFG_NEXT"], [23, 11, 2, "enum_LAST_READ"], [29, 4, 3, "enum_LAST_WRITE"], [33, 2, 3, "enum_LAST_WRITE"], [37, 6, 3, "enum_LAST_WRITE"], [40, 23, 2, "enum_LAST_READ"], [46, 29, 2, "enum_LAST_READ"], [46, 4, 3, "enum_LAST_WRITE"], [52, 40, 2, "enum_LAST_READ"], [58, 46, 2, "enum_LAST_READ"], [58, 4, 3, "enum_LAST_WRITE"], [62, 33, 2, "enum_LAST_READ"], [62, 2, 3, "enum_LAST_WRITE"], [66, 37, 2, "enum_LAST_READ"], [66, 6, 3, "enum_LAST_WRITE"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "CenterForOpenScience", "repo": "osf.io", "path": "website/archiver/utils.py", "id": 1015, "has_bug": false, "code_full": "from typing import Any, Dict\n\n\nclass User:\n    username: str\n\n\nclass Mails:\n    ARCHIVE_FILE_NOT_FOUND_DESK: str\n    ARCHIVE_FILE_NOT_FOUND_USER: str\n\n    def send_mail(self, to_addr: str, mail: str, user: User, src: str, results: Dict[str, Any], can_change_preferences: bool = True, mimetype: str = 'html'):\n        pass\n\n\nclass Settings:\n    SUPPORT_EMAIL: str\n\n\nsettings = Settings()\nmails = Mails()\n\n\ndef send_archiver_file_not_found_mails(src: str, user: User, results: Dict[str, Any]):\n    mails.send_mail(\n        to_addr=settings.SUPPORT_EMAIL,\n        mail=mails.ARCHIVE_FILE_NOT_FOUND_DESK,\n        user=user,\n        src=src,\n        results=results,\n    )\n    mails.send_mail(\n        to_addr=user.username,\n        mail=mails.ARCHIVE_FILE_NOT_FOUND_USER,\n        user=user,\n        src=src,\n        results=results,\n        can_change_preferences=False,\n        mimetype='html',\n    )\n", "code": "def send_archiver_file_not_found_mails(src: str, user: User, results: Dict[str, Any]):\n    mails.send_mail(\n        to_addr=settings.SUPPORT_EMAIL,\n        mail=mails.ARCHIVE_FILE_NOT_FOUND_DESK,\n        user=user,\n        src=src,\n        results=results,\n    )\n    mails.send_mail(\n        to_addr=user.username,\n        mail=mails.ARCHIVE_FILE_NOT_FOUND_USER,\n        user=user,\n        src=src,\n        results=results,\n        can_change_preferences=False,\n        mimetype='html',\n    )\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "e72815b06b0cfab14cacb1a055905edf3f474025"}
{"source_tokens": ["#NEWLINE#", "@", "property", "#NEWLINE#", "def public_url(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "protocol", "=", "(", "'https'", "if", "self", ".", "ssl_enabled", "else", "'http'", ")", "#NEWLINE#", "port", "=", "(", "(", "':%s'", "%", "self", ".", "public_port", ")", "if", "(", "self", ".", "public_port", "!=", "80", ")", "else", "''", ")", "#NEWLINE#", "return", "(", "'%s://%s%s/v1'", "%", "(", "protocol", ",", "self", ".", "host_name", ",", "port", ")", ")"], "edges": [[9, 14, 7, "enum_FIELD"], [21, 32, 7, "enum_FIELD"], [44, 47, 7, "enum_FIELD"], [14, 16, 7, "enum_FIELD"], [14, 13, 7, "enum_FIELD"], [14, 19, 7, "enum_FIELD"], [32, 37, 7, "enum_FIELD"], [32, 27, 7, "enum_FIELD"], [32, 41, 7, "enum_FIELD"], [47, 46, 7, "enum_FIELD"], [47, 50, 7, "enum_FIELD"], [16, 15, 7, "enum_FIELD"], [37, 35, 7, "enum_FIELD"], [27, 26, 7, "enum_FIELD"], [27, 29, 7, "enum_FIELD"], [35, 34, 7, "enum_FIELD"], [29, 28, 7, "enum_FIELD"], [52, 51, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [15, 5, 10, "enum_LAST_LEXICAL_USE"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [28, 15, 10, "enum_LAST_LEXICAL_USE"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [34, 28, 10, "enum_LAST_LEXICAL_USE"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [49, 10, 10, "enum_LAST_LEXICAL_USE"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [51, 34, 10, "enum_LAST_LEXICAL_USE"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [55, 22, 10, "enum_LAST_LEXICAL_USE"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [2, 1, 1, "enum_CFG_NEXT"], [9, 21, 1, "enum_CFG_NEXT"], [21, 44, 1, "enum_CFG_NEXT"], [15, 5, 3, "enum_LAST_WRITE"], [34, 15, 2, "enum_LAST_READ"], [34, 5, 3, "enum_LAST_WRITE"], [28, 34, 2, "enum_LAST_READ"], [28, 5, 3, "enum_LAST_WRITE"], [49, 10, 3, "enum_LAST_WRITE"], [51, 28, 2, "enum_LAST_READ"], [51, 5, 3, "enum_LAST_WRITE"], [55, 22, 3, "enum_LAST_WRITE"], [10, 15, 4, "enum_COMPUTED_FROM"], [22, 34, 4, "enum_COMPUTED_FROM"], [22, 28, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "conan-io", "repo": "conan", "path": "conans/server/conf/__init__.py", "id": 10701, "has_bug": false, "code_full": "class Class:\n    ssl_enabled: bool\n    public_port: int\n    host_name: str\n\n    def public_url(self) -> str:\n        protocol: str = \"https\" if self.ssl_enabled else \"http\"\n        port: str = \":%s\" % self.public_port if self.public_port != 80 else \"\"\n        return \"%s://%s%s/v1\" % (protocol, self.host_name, port)\n", "code": "def public_url(self) -> str:\n    protocol: str = \"https\" if self.ssl_enabled else \"http\"\n    port: str = \":%s\" % self.public_port if self.public_port != 80 else \"\"\n    return \"%s://%s%s/v1\" % (protocol, self.host_name, port)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "a17a421b1046aa0194fb7e4690f52a63b888e9ee"}
{"source_tokens": ["#NEWLINE#", "def format_pycket_mod(", "s", ",", "stdlib", "=", "False", ",", "extra", "=", "''", ")", ":", "#NEWLINE#", "#INDENT#", "str", "=", "(", "'#lang pycket%s\\n%s\\n%s'", "%", "(", "(", "' #:stdlib'", "if", "stdlib", "else", "''", ")", ",", "extra", ",", "s", ")", ")", "#NEWLINE#", "return", "str"], "edges": [[1, 5, 7, "enum_FIELD"], [14, 19, 7, "enum_FIELD"], [35, 36, 7, "enum_FIELD"], [19, 18, 7, "enum_FIELD"], [19, 28, 7, "enum_FIELD"], [23, 24, 7, "enum_FIELD"], [23, 22, 7, "enum_FIELD"], [23, 26, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [24, 4, 10, "enum_LAST_LEXICAL_USE"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [29, 8, 10, "enum_LAST_LEXICAL_USE"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [31, 2, 10, "enum_LAST_LEXICAL_USE"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 35, 9, "enum_NEXT_SYNTAX"], [36, 15, 10, "enum_LAST_LEXICAL_USE"], [35, 36, 9, "enum_NEXT_SYNTAX"], [6, 10, 1, "enum_CFG_NEXT"], [10, 1, 1, "enum_CFG_NEXT"], [5, 14, 1, "enum_CFG_NEXT"], [14, 35, 1, "enum_CFG_NEXT"], [24, 4, 3, "enum_LAST_WRITE"], [29, 8, 3, "enum_LAST_WRITE"], [31, 2, 3, "enum_LAST_WRITE"], [36, 15, 3, "enum_LAST_WRITE"], [15, 29, 4, "enum_COMPUTED_FROM"], [15, 31, 4, "enum_COMPUTED_FROM"], [15, 24, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "samth", "repo": "pycket", "path": "pycket/test/testhelper.py", "id": 47538, "has_bug": false, "code_full": "string = str\ndef format_pycket_mod(s: str, stdlib: bool=False, extra: str=\"\") -> str:\n    # pycket handles the stdlib, various requires\n    str: string = \"#lang pycket%s\n%s\n%s\"%(\" #:stdlib\" if stdlib else \"\", extra, s)\n    return str\n", "code": "def format_pycket_mod(s: str, stdlib: bool=False, extra: str=\"\") -> str:\n    # pycket handles the stdlib, various requires\n    str: string = \"#lang pycket%s\n%s\n%s\"%(\" #:stdlib\" if stdlib else \"\", extra, s)\n    return str\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "fbc4c2dbfef257d2786e5f2ade562bf4d6520df5"}
{"source_tokens": ["#NEWLINE#", "def __init__(", "self", ",", "logger", "=", "None", ",", "rgbmap", "=", "None", ",", "settings", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "ImageViewTk", ".", "__init__", "(", "self", ",", "logger", "=", "logger", ",", "rgbmap", "=", "rgbmap", ",", "settings", "=", "settings", ")", "#NEWLINE#", "self", ".", "last_win_x", "=", "0", "#NEWLINE#", "self", ".", "last_win_y", "=", "0", "#NEWLINE#", "self", ".", "last_data_x", "=", "0", "#NEWLINE#", "self", ".", "last_data_y", "=", "0", "#NEWLINE#", "self", ".", "enter_focus", "=", "self", ".", "t_", ".", "get", "(", "'enter_focus'", ",", "True", ")", "#NEWLINE#", "self", ".", "_button", "=", "0", "#NEWLINE#", "self", ".", "_keytbl", "=", "{", "'shift_l'", ":", "'shift_l'", ",", "'shift_r'", ":", "'shift_r'", ",", "'control_l'", ":", "'control_l'", ",", "'control_r'", ":", "'control_r'", ",", "'alt_l'", ":", "'alt_l'", ",", "'alt_r'", ":", "'alt_r'", ",", "'super_l'", ":", "'super_l'", ",", "'super_r'", ":", "'super_r'", ",", "'meta_right'", ":", "'meta_right'", ",", "'asciitilde'", ":", "'~'", ",", "'grave'", ":", "'backquote'", ",", "'exclam'", ":", "'!'", ",", "'at'", ":", "'@'", ",", "'numbersign'", ":", "'#'", ",", "'percent'", ":", "'%'", ",", "'asciicircum'", ":", "'^'", ",", "'ampersand'", ":", "'&'", ",", "'asterisk'", ":", "'*'", ",", "'dollar'", ":", "'$'", ",", "'parenleft'", ":", "'('", ",", "'parenright'", ":", "')'", ",", "'underscore'", ":", "'_'", ",", "'minus'", ":", "'-'", ",", "'plus'", ":", "'+'", ",", "'equal'", ":", "'='", ",", "'braceleft'", ":", "'{'", ",", "'braceright'", ":", "'}'", ",", "'bracketleft'", ":", "'['", ",", "'bracketright'", ":", "']'", ",", "'bar'", ":", "'|'", ",", "'colon'", ":", "':'", ",", "'semicolon'", ":", "';'", ",", "'quotedbl'", ":", "'doublequote'", ",", "'apostrophe'", ":", "'singlequote'", ",", "'backslash'", ":", "'backslash'", ",", "'less'", ":", "'<'", ",", "'greater'", ":", "'>'", ",", "'comma'", ":", "','", ",", "'period'", ":", "'.'", ",", "'question'", ":", "'?'", ",", "'slash'", ":", "'/'", ",", "'space'", ":", "'space'", ",", "'escape'", ":", "'escape'", ",", "'return'", ":", "'return'", ",", "'tab'", ":", "'tab'", ",", "'f1'", ":", "'f1'", ",", "'f2'", ":", "'f2'", ",", "'f3'", ":", "'f3'", ",", "'f4'", ":", "'f4'", ",", "'f5'", ":", "'f5'", ",", "'f6'", ":", "'f6'", ",", "'f7'", ":", "'f7'", ",", "'f8'", ":", "'f8'", ",", "'f9'", ":", "'f9'", ",", "'f10'", ":", "'f10'", ",", "'f11'", ":", "'f11'", ",", "'f12'", ":", "'f12'", "}", "#NEWLINE#", "hand", "=", "'fleur'", "#NEWLINE#", "self", ".", "define_cursor", "(", "'pan'", ",", "hand", ")", "#NEWLINE#", "cross", "=", "'cross'", "#NEWLINE#", "self", ".", "define_cursor", "(", "'pick'", ",", "cross", ")", "#NEWLINE#", "for", "name", "in", "(", "'motion'", ",", "'button-press'", ",", "'button-release'", ",", "'key-press'", ",", "'key-release'", ",", "'drag-drop'", ",", "'scroll'", ",", "'map'", ",", "'focus'", ",", "'enter'", ",", "'leave'", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "enable_callback", "(", "name", ")"], "edges": [[1, 7, 7, "enum_FIELD"], [18, 28, 7, "enum_FIELD"], [37, 42, 7, "enum_FIELD"], [43, 48, 7, "enum_FIELD"], [49, 54, 7, "enum_FIELD"], [55, 60, 7, "enum_FIELD"], [61, 73, 7, "enum_FIELD"], [76, 81, 7, "enum_FIELD"], [82, 201, 7, "enum_FIELD"], [316, 319, 7, "enum_FIELD"], [320, 326, 7, "enum_FIELD"], [329, 332, 7, "enum_FIELD"], [333, 339, 7, "enum_FIELD"], [345, 344, 7, "enum_FIELD"], [345, 356, 7, "enum_FIELD"], [28, 20, 7, "enum_FIELD"], [39, 38, 7, "enum_FIELD"], [45, 44, 7, "enum_FIELD"], [51, 50, 7, "enum_FIELD"], [57, 56, 7, "enum_FIELD"], [63, 62, 7, "enum_FIELD"], [73, 69, 7, "enum_FIELD"], [78, 77, 7, "enum_FIELD"], [84, 83, 7, "enum_FIELD"], [326, 322, 7, "enum_FIELD"], [339, 335, 7, "enum_FIELD"], [371, 375, 7, "enum_FIELD"], [20, 19, 7, "enum_FIELD"], [25, 27, 7, "enum_FIELD"], [29, 31, 7, "enum_FIELD"], [33, 35, 7, "enum_FIELD"], [69, 67, 7, "enum_FIELD"], [322, 321, 7, "enum_FIELD"], [335, 334, 7, "enum_FIELD"], [375, 373, 7, "enum_FIELD"], [67, 66, 7, "enum_FIELD"], [373, 372, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [23, 2, 10, "enum_LAST_LEXICAL_USE"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [27, 4, 10, "enum_LAST_LEXICAL_USE"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [31, 8, 10, "enum_LAST_LEXICAL_USE"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [35, 12, 10, "enum_LAST_LEXICAL_USE"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [38, 23, 10, "enum_LAST_LEXICAL_USE"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [44, 38, 10, "enum_LAST_LEXICAL_USE"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [50, 44, 10, "enum_LAST_LEXICAL_USE"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [56, 50, 10, "enum_LAST_LEXICAL_USE"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [62, 56, 10, "enum_LAST_LEXICAL_USE"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [66, 62, 10, "enum_LAST_LEXICAL_USE"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [77, 66, 10, "enum_LAST_LEXICAL_USE"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [83, 77, 10, "enum_LAST_LEXICAL_USE"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 184, 9, "enum_NEXT_SYNTAX"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [187, 188, 9, "enum_NEXT_SYNTAX"], [188, 189, 9, "enum_NEXT_SYNTAX"], [189, 190, 9, "enum_NEXT_SYNTAX"], [190, 191, 9, "enum_NEXT_SYNTAX"], [191, 192, 9, "enum_NEXT_SYNTAX"], [192, 193, 9, "enum_NEXT_SYNTAX"], [193, 194, 9, "enum_NEXT_SYNTAX"], [194, 195, 9, "enum_NEXT_SYNTAX"], [195, 196, 9, "enum_NEXT_SYNTAX"], [196, 197, 9, "enum_NEXT_SYNTAX"], [197, 198, 9, "enum_NEXT_SYNTAX"], [198, 199, 9, "enum_NEXT_SYNTAX"], [199, 200, 9, "enum_NEXT_SYNTAX"], [200, 201, 9, "enum_NEXT_SYNTAX"], [201, 202, 9, "enum_NEXT_SYNTAX"], [202, 203, 9, "enum_NEXT_SYNTAX"], [203, 204, 9, "enum_NEXT_SYNTAX"], [204, 205, 9, "enum_NEXT_SYNTAX"], [205, 206, 9, "enum_NEXT_SYNTAX"], [206, 207, 9, "enum_NEXT_SYNTAX"], [207, 208, 9, "enum_NEXT_SYNTAX"], [208, 209, 9, "enum_NEXT_SYNTAX"], [209, 210, 9, "enum_NEXT_SYNTAX"], [210, 211, 9, "enum_NEXT_SYNTAX"], [211, 212, 9, "enum_NEXT_SYNTAX"], [212, 213, 9, "enum_NEXT_SYNTAX"], [213, 214, 9, "enum_NEXT_SYNTAX"], [214, 215, 9, "enum_NEXT_SYNTAX"], [215, 216, 9, "enum_NEXT_SYNTAX"], [216, 217, 9, "enum_NEXT_SYNTAX"], [217, 218, 9, "enum_NEXT_SYNTAX"], [218, 219, 9, "enum_NEXT_SYNTAX"], [219, 220, 9, "enum_NEXT_SYNTAX"], [220, 221, 9, "enum_NEXT_SYNTAX"], [221, 222, 9, "enum_NEXT_SYNTAX"], [222, 223, 9, "enum_NEXT_SYNTAX"], [223, 224, 9, "enum_NEXT_SYNTAX"], [224, 225, 9, "enum_NEXT_SYNTAX"], [225, 226, 9, "enum_NEXT_SYNTAX"], [226, 227, 9, "enum_NEXT_SYNTAX"], [227, 228, 9, "enum_NEXT_SYNTAX"], [228, 229, 9, "enum_NEXT_SYNTAX"], [229, 230, 9, "enum_NEXT_SYNTAX"], [230, 231, 9, "enum_NEXT_SYNTAX"], [231, 232, 9, "enum_NEXT_SYNTAX"], [232, 233, 9, "enum_NEXT_SYNTAX"], [233, 234, 9, "enum_NEXT_SYNTAX"], [234, 235, 9, "enum_NEXT_SYNTAX"], [235, 236, 9, "enum_NEXT_SYNTAX"], [236, 237, 9, "enum_NEXT_SYNTAX"], [237, 238, 9, "enum_NEXT_SYNTAX"], [238, 239, 9, "enum_NEXT_SYNTAX"], [239, 240, 9, "enum_NEXT_SYNTAX"], [240, 241, 9, "enum_NEXT_SYNTAX"], [241, 242, 9, "enum_NEXT_SYNTAX"], [242, 243, 9, "enum_NEXT_SYNTAX"], [243, 244, 9, "enum_NEXT_SYNTAX"], [244, 245, 9, "enum_NEXT_SYNTAX"], [245, 246, 9, "enum_NEXT_SYNTAX"], [246, 247, 9, "enum_NEXT_SYNTAX"], [247, 248, 9, "enum_NEXT_SYNTAX"], [248, 249, 9, "enum_NEXT_SYNTAX"], [249, 250, 9, "enum_NEXT_SYNTAX"], [250, 251, 9, "enum_NEXT_SYNTAX"], [251, 252, 9, "enum_NEXT_SYNTAX"], [252, 253, 9, "enum_NEXT_SYNTAX"], [253, 254, 9, "enum_NEXT_SYNTAX"], [254, 255, 9, "enum_NEXT_SYNTAX"], [255, 256, 9, "enum_NEXT_SYNTAX"], [256, 257, 9, "enum_NEXT_SYNTAX"], [257, 258, 9, "enum_NEXT_SYNTAX"], [258, 259, 9, "enum_NEXT_SYNTAX"], [259, 260, 9, "enum_NEXT_SYNTAX"], [260, 261, 9, "enum_NEXT_SYNTAX"], [261, 262, 9, "enum_NEXT_SYNTAX"], [262, 263, 9, "enum_NEXT_SYNTAX"], [263, 264, 9, "enum_NEXT_SYNTAX"], [264, 265, 9, "enum_NEXT_SYNTAX"], [265, 266, 9, "enum_NEXT_SYNTAX"], [266, 267, 9, "enum_NEXT_SYNTAX"], [267, 268, 9, "enum_NEXT_SYNTAX"], [268, 269, 9, "enum_NEXT_SYNTAX"], [269, 270, 9, "enum_NEXT_SYNTAX"], [270, 271, 9, "enum_NEXT_SYNTAX"], [271, 272, 9, "enum_NEXT_SYNTAX"], [272, 273, 9, "enum_NEXT_SYNTAX"], [273, 274, 9, "enum_NEXT_SYNTAX"], [274, 275, 9, "enum_NEXT_SYNTAX"], [275, 276, 9, "enum_NEXT_SYNTAX"], [276, 277, 9, "enum_NEXT_SYNTAX"], [277, 278, 9, "enum_NEXT_SYNTAX"], [278, 279, 9, "enum_NEXT_SYNTAX"], [279, 280, 9, "enum_NEXT_SYNTAX"], [280, 281, 9, "enum_NEXT_SYNTAX"], [281, 282, 9, "enum_NEXT_SYNTAX"], [282, 283, 9, "enum_NEXT_SYNTAX"], [283, 284, 9, "enum_NEXT_SYNTAX"], [284, 285, 9, "enum_NEXT_SYNTAX"], [285, 286, 9, "enum_NEXT_SYNTAX"], [286, 287, 9, "enum_NEXT_SYNTAX"], [287, 288, 9, "enum_NEXT_SYNTAX"], [288, 289, 9, "enum_NEXT_SYNTAX"], [289, 290, 9, "enum_NEXT_SYNTAX"], [290, 291, 9, "enum_NEXT_SYNTAX"], [291, 292, 9, "enum_NEXT_SYNTAX"], [292, 293, 9, "enum_NEXT_SYNTAX"], [293, 294, 9, "enum_NEXT_SYNTAX"], [294, 295, 9, "enum_NEXT_SYNTAX"], [295, 296, 9, "enum_NEXT_SYNTAX"], [296, 297, 9, "enum_NEXT_SYNTAX"], [297, 298, 9, "enum_NEXT_SYNTAX"], [298, 299, 9, "enum_NEXT_SYNTAX"], [299, 300, 9, "enum_NEXT_SYNTAX"], [300, 301, 9, "enum_NEXT_SYNTAX"], [301, 302, 9, "enum_NEXT_SYNTAX"], [302, 303, 9, "enum_NEXT_SYNTAX"], [303, 304, 9, "enum_NEXT_SYNTAX"], [304, 305, 9, "enum_NEXT_SYNTAX"], [305, 306, 9, "enum_NEXT_SYNTAX"], [306, 307, 9, "enum_NEXT_SYNTAX"], [307, 308, 9, "enum_NEXT_SYNTAX"], [308, 309, 9, "enum_NEXT_SYNTAX"], [309, 310, 9, "enum_NEXT_SYNTAX"], [310, 311, 9, "enum_NEXT_SYNTAX"], [311, 312, 9, "enum_NEXT_SYNTAX"], [312, 313, 9, "enum_NEXT_SYNTAX"], [313, 314, 9, "enum_NEXT_SYNTAX"], [314, 315, 9, "enum_NEXT_SYNTAX"], [315, 316, 9, "enum_NEXT_SYNTAX"], [316, 317, 9, "enum_NEXT_SYNTAX"], [317, 318, 9, "enum_NEXT_SYNTAX"], [318, 319, 9, "enum_NEXT_SYNTAX"], [319, 320, 9, "enum_NEXT_SYNTAX"], [321, 83, 10, "enum_LAST_LEXICAL_USE"], [320, 321, 9, "enum_NEXT_SYNTAX"], [321, 322, 9, "enum_NEXT_SYNTAX"], [322, 323, 9, "enum_NEXT_SYNTAX"], [323, 324, 9, "enum_NEXT_SYNTAX"], [324, 325, 9, "enum_NEXT_SYNTAX"], [325, 326, 9, "enum_NEXT_SYNTAX"], [327, 317, 10, "enum_LAST_LEXICAL_USE"], [326, 327, 9, "enum_NEXT_SYNTAX"], [327, 328, 9, "enum_NEXT_SYNTAX"], [328, 329, 9, "enum_NEXT_SYNTAX"], [329, 330, 9, "enum_NEXT_SYNTAX"], [330, 331, 9, "enum_NEXT_SYNTAX"], [331, 332, 9, "enum_NEXT_SYNTAX"], [332, 333, 9, "enum_NEXT_SYNTAX"], [334, 321, 10, "enum_LAST_LEXICAL_USE"], [333, 334, 9, "enum_NEXT_SYNTAX"], [334, 335, 9, "enum_NEXT_SYNTAX"], [335, 336, 9, "enum_NEXT_SYNTAX"], [336, 337, 9, "enum_NEXT_SYNTAX"], [337, 338, 9, "enum_NEXT_SYNTAX"], [338, 339, 9, "enum_NEXT_SYNTAX"], [340, 330, 10, "enum_LAST_LEXICAL_USE"], [339, 340, 9, "enum_NEXT_SYNTAX"], [340, 341, 9, "enum_NEXT_SYNTAX"], [341, 343, 9, "enum_NEXT_SYNTAX"], [343, 344, 9, "enum_NEXT_SYNTAX"], [344, 345, 9, "enum_NEXT_SYNTAX"], [345, 346, 9, "enum_NEXT_SYNTAX"], [346, 347, 9, "enum_NEXT_SYNTAX"], [347, 348, 9, "enum_NEXT_SYNTAX"], [348, 349, 9, "enum_NEXT_SYNTAX"], [349, 350, 9, "enum_NEXT_SYNTAX"], [350, 351, 9, "enum_NEXT_SYNTAX"], [351, 352, 9, "enum_NEXT_SYNTAX"], [352, 353, 9, "enum_NEXT_SYNTAX"], [353, 354, 9, "enum_NEXT_SYNTAX"], [354, 355, 9, "enum_NEXT_SYNTAX"], [355, 356, 9, "enum_NEXT_SYNTAX"], [356, 357, 9, "enum_NEXT_SYNTAX"], [357, 358, 9, "enum_NEXT_SYNTAX"], [358, 359, 9, "enum_NEXT_SYNTAX"], [359, 360, 9, "enum_NEXT_SYNTAX"], [360, 361, 9, "enum_NEXT_SYNTAX"], [361, 362, 9, "enum_NEXT_SYNTAX"], [362, 363, 9, "enum_NEXT_SYNTAX"], [363, 364, 9, "enum_NEXT_SYNTAX"], [364, 365, 9, "enum_NEXT_SYNTAX"], [365, 366, 9, "enum_NEXT_SYNTAX"], [366, 367, 9, "enum_NEXT_SYNTAX"], [367, 368, 9, "enum_NEXT_SYNTAX"], [368, 369, 9, "enum_NEXT_SYNTAX"], [369, 371, 9, "enum_NEXT_SYNTAX"], [372, 334, 10, "enum_LAST_LEXICAL_USE"], [371, 372, 9, "enum_NEXT_SYNTAX"], [372, 373, 9, "enum_NEXT_SYNTAX"], [373, 374, 9, "enum_NEXT_SYNTAX"], [374, 375, 9, "enum_NEXT_SYNTAX"], [376, 344, 10, "enum_LAST_LEXICAL_USE"], [375, 376, 9, "enum_NEXT_SYNTAX"], [376, 377, 9, "enum_NEXT_SYNTAX"], [6, 10, 1, "enum_CFG_NEXT"], [10, 14, 1, "enum_CFG_NEXT"], [14, 1, 1, "enum_CFG_NEXT"], [7, 18, 1, "enum_CFG_NEXT"], [18, 37, 1, "enum_CFG_NEXT"], [37, 43, 1, "enum_CFG_NEXT"], [43, 49, 1, "enum_CFG_NEXT"], [49, 55, 1, "enum_CFG_NEXT"], [55, 61, 1, "enum_CFG_NEXT"], [61, 76, 1, "enum_CFG_NEXT"], [76, 82, 1, "enum_CFG_NEXT"], [82, 316, 1, "enum_CFG_NEXT"], [316, 320, 1, "enum_CFG_NEXT"], [320, 329, 1, "enum_CFG_NEXT"], [329, 333, 1, "enum_CFG_NEXT"], [333, 356, 1, "enum_CFG_NEXT"], [356, 344, 1, "enum_CFG_NEXT"], [344, 371, 1, "enum_CFG_NEXT"], [371, 344, 1, "enum_CFG_NEXT"], [23, 2, 3, "enum_LAST_WRITE"], [27, 4, 3, "enum_LAST_WRITE"], [31, 8, 3, "enum_LAST_WRITE"], [35, 12, 3, "enum_LAST_WRITE"], [38, 23, 2, "enum_LAST_READ"], [38, 2, 3, "enum_LAST_WRITE"], [44, 38, 2, "enum_LAST_READ"], [44, 2, 3, "enum_LAST_WRITE"], [50, 44, 2, "enum_LAST_READ"], [50, 2, 3, "enum_LAST_WRITE"], [56, 50, 2, "enum_LAST_READ"], [56, 2, 3, "enum_LAST_WRITE"], [66, 56, 2, "enum_LAST_READ"], [66, 2, 3, "enum_LAST_WRITE"], [62, 66, 2, "enum_LAST_READ"], [62, 2, 3, "enum_LAST_WRITE"], [77, 62, 2, "enum_LAST_READ"], [77, 2, 3, "enum_LAST_WRITE"], [83, 77, 2, "enum_LAST_READ"], [83, 2, 3, "enum_LAST_WRITE"], [321, 83, 2, "enum_LAST_READ"], [321, 2, 3, "enum_LAST_WRITE"], [327, 317, 3, "enum_LAST_WRITE"], [334, 321, 2, "enum_LAST_READ"], [334, 2, 3, "enum_LAST_WRITE"], [340, 330, 3, "enum_LAST_WRITE"], [344, 376, 2, "enum_LAST_READ"], [344, 344, 3, "enum_LAST_WRITE"], [372, 334, 2, "enum_LAST_READ"], [372, 372, 2, "enum_LAST_READ"], [372, 2, 3, "enum_LAST_WRITE"], [376, 376, 2, "enum_LAST_READ"], [376, 344, 3, "enum_LAST_WRITE"], [63, 66, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "ejeschke", "repo": "ginga", "path": "ginga/tkw/ImageViewTk.py", "id": 13907, "has_bug": false, "code_full": "from typing import Any, Dict, Optional\n\n\nclass ImageViewTk:\n    def __init__(self, logger: Optional[Any], rgbmap: Optional[Any], settings: Optional[Any]) -> None:\n        pass\n\n    def define_cursor(self, cursor_type: str, cursor_shape: str) -> None:\n        pass\n\n    def enable_callback(self, event_name: str) -> None:\n        pass\n\n\nclass Class(ImageViewTk):\n    last_win_x: int\n    last_win_y: int\n    last_data_x: int\n    last_data_y: int\n    enter_focus: bool\n    _button: int\n    _keytbl: Dict[str, str]\n    t_: Dict[str, Any]\n    \n    def __init__(self, logger: Optional[Any]=None, rgbmap: Optional[Any]=None, settings: Optional[Any]=None):\n        ImageViewTk.__init__(self, logger=logger, rgbmap=rgbmap,\n                                settings=settings)\n\n        # last known window mouse position\n        self.last_win_x = 0\n        self.last_win_y = 0\n        # last known data mouse position\n        self.last_data_x = 0\n        self.last_data_y = 0\n        # Does widget accept focus when mouse enters window\n        self.enter_focus = self.t_.get('enter_focus', True)\n\n        self._button = 0\n\n        # @$%&^(_)*&^ tk!!\n        self._keytbl = {\n            'shift_l': 'shift_l',\n            'shift_r': 'shift_r',\n            'control_l': 'control_l',\n            'control_r': 'control_r',\n            'alt_l': 'alt_l',\n            'alt_r': 'alt_r',\n            'super_l': 'super_l',\n            'super_r': 'super_r',\n            'meta_right': 'meta_right',\n            'asciitilde': '~',\n            'grave': 'backquote',\n            'exclam': '!',\n            'at': '@',\n            'numbersign': '#',\n            'percent': '%',\n            'asciicircum': '^',\n            'ampersand': '&',\n            'asterisk': '*',\n            'dollar': '$',\n            'parenleft': '(',\n            'parenright': ')',\n            'underscore': '_',\n            'minus': '-',\n            'plus': '+',\n            'equal': '=',\n            'braceleft': '{',\n            'braceright': '}',\n            'bracketleft': '[',\n            'bracketright': ']',\n            'bar': '|',\n            'colon': ':',\n            'semicolon': ';',\n            'quotedbl': 'doublequote',\n            'apostrophe': 'singlequote',\n            'backslash': 'backslash',\n            'less': '<',\n            'greater': '>',\n            'comma': ',',\n            'period': '.',\n            'question': '?',\n            'slash': '/',\n            'space': 'space',\n            'escape': 'escape',\n            'return': 'return',\n            'tab': 'tab',\n            'f1': 'f1',\n            'f2': 'f2',\n            'f3': 'f3',\n            'f4': 'f4',\n            'f5': 'f5',\n            'f6': 'f6',\n            'f7': 'f7',\n            'f8': 'f8',\n            'f9': 'f9',\n            'f10': 'f10',\n            'f11': 'f11',\n            'f12': 'f12',\n            }\n\n        # Define cursors for pick and pan\n        #hand = openHandCursor()\n        hand: str = 'fleur'\n        self.define_cursor('pan', hand)\n        cross: str = 'cross'\n        self.define_cursor('pick', cross)\n\n        for name in ('motion', 'button-press', 'button-release',\n                        'key-press', 'key-release', 'drag-drop',\n                        'scroll', 'map', 'focus', 'enter', 'leave',\n                        ):\n            self.enable_callback(name)\n\n    def define_cursor(self, cursor_type: str, cursor_shape: str) -> None:\n        pass\n\n    def enable_callback(self, event_name: str) -> None:\n        pass\n", "code": "def __init__(self, logger: Optional[Any]=None, rgbmap: Optional[Any]=None, settings: Optional[Any]=None):\n    ImageViewTk.__init__(self, logger=logger, rgbmap=rgbmap,\n                            settings=settings)\n\n    # last known window mouse position\n    self.last_win_x = 0\n    self.last_win_y = 0\n    # last known data mouse position\n    self.last_data_x = 0\n    self.last_data_y = 0\n    # Does widget accept focus when mouse enters window\n    self.enter_focus = self.t_.get('enter_focus', True)\n\n    self._button = 0\n\n    # @$%&^(_)*&^ tk!!\n    self._keytbl = {\n        'shift_l': 'shift_l',\n        'shift_r': 'shift_r',\n        'control_l': 'control_l',\n        'control_r': 'control_r',\n        'alt_l': 'alt_l',\n        'alt_r': 'alt_r',\n        'super_l': 'super_l',\n        'super_r': 'super_r',\n        'meta_right': 'meta_right',\n        'asciitilde': '~',\n        'grave': 'backquote',\n        'exclam': '!',\n        'at': '@',\n        'numbersign': '#',\n        'percent': '%',\n        'asciicircum': '^',\n        'ampersand': '&',\n        'asterisk': '*',\n        'dollar': '$',\n        'parenleft': '(',\n        'parenright': ')',\n        'underscore': '_',\n        'minus': '-',\n        'plus': '+',\n        'equal': '=',\n        'braceleft': '{',\n        'braceright': '}',\n        'bracketleft': '[',\n        'bracketright': ']',\n        'bar': '|',\n        'colon': ':',\n        'semicolon': ';',\n        'quotedbl': 'doublequote',\n        'apostrophe': 'singlequote',\n        'backslash': 'backslash',\n        'less': '<',\n        'greater': '>',\n        'comma': ',',\n        'period': '.',\n        'question': '?',\n        'slash': '/',\n        'space': 'space',\n        'escape': 'escape',\n        'return': 'return',\n        'tab': 'tab',\n        'f1': 'f1',\n        'f2': 'f2',\n        'f3': 'f3',\n        'f4': 'f4',\n        'f5': 'f5',\n        'f6': 'f6',\n        'f7': 'f7',\n        'f8': 'f8',\n        'f9': 'f9',\n        'f10': 'f10',\n        'f11': 'f11',\n        'f12': 'f12',\n        }\n\n    # Define cursors for pick and pan\n    #hand = openHandCursor()\n    hand: str = 'fleur'\n    self.define_cursor('pan', hand)\n    cross: str = 'cross'\n    self.define_cursor('pick', cross)\n\n    for name in ('motion', 'button-press', 'button-release',\n                    'key-press', 'key-release', 'drag-drop',\n                    'scroll', 'map', 'focus', 'enter', 'leave',\n                    ):\n        self.enable_callback(name)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "a201d5a2b0c49173b4d53179c82a867acda8f438"}
{"source_tokens": ["#NEWLINE#", "def test_arg_of_sigmoid_good(", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Tests that arg_of_sigmoid works when given a good input.\\n    '", "#NEWLINE#", "X", "=", "T", ".", "matrix", "(", ")", "#NEWLINE#", "Y", "=", "T", ".", "nnet", ".", "sigmoid", "(", "X", ")", "#NEWLINE#", "Z", "=", "arg_of_sigmoid", "(", "Y", ")", "#NEWLINE#", "assert", "(", "X", "is", "Z", ")"], "edges": [[5, 6, 7, "enum_FIELD"], [7, 13, 7, "enum_FIELD"], [15, 23, 7, "enum_FIELD"], [26, 30, 7, "enum_FIELD"], [34, 37, 7, "enum_FIELD"], [13, 11, 7, "enum_FIELD"], [23, 21, 7, "enum_FIELD"], [30, 29, 7, "enum_FIELD"], [37, 36, 7, "enum_FIELD"], [11, 10, 7, "enum_FIELD"], [21, 19, 7, "enum_FIELD"], [19, 18, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [18, 10, 10, "enum_LAST_LEXICAL_USE"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [24, 8, 10, "enum_LAST_LEXICAL_USE"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [31, 16, 10, "enum_LAST_LEXICAL_USE"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [36, 24, 10, "enum_LAST_LEXICAL_USE"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [38, 27, 10, "enum_LAST_LEXICAL_USE"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [5, 7, 1, "enum_CFG_NEXT"], [7, 15, 1, "enum_CFG_NEXT"], [15, 26, 1, "enum_CFG_NEXT"], [26, 34, 1, "enum_CFG_NEXT"], [18, 10, 2, "enum_LAST_READ"], [24, 8, 3, "enum_LAST_WRITE"], [31, 16, 3, "enum_LAST_WRITE"], [36, 24, 2, "enum_LAST_READ"], [36, 8, 3, "enum_LAST_WRITE"], [38, 27, 3, "enum_LAST_WRITE"], [8, 10, 4, "enum_COMPUTED_FROM"], [16, 24, 4, "enum_COMPUTED_FROM"], [16, 18, 4, "enum_COMPUTED_FROM"], [27, 29, 4, "enum_COMPUTED_FROM"], [27, 31, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "lisa-lab", "repo": "pylearn2", "path": "pylearn2/expr/tests/test_nnet.py", "id": 25123, "has_bug": false, "code_full": "from typing import Any\n\nimport theano.tensor as T\n\n\ndef arg_of_sigmoid(Y: Any) -> Any:\n    pass\n\n\ndef test_arg_of_sigmoid_good():\n    \"\"\"\n    Tests that arg_of_sigmoid works when given a good input.\n    \"\"\"\n\n    X: Any= T.matrix()\n    Y: Any = T.nnet.sigmoid(X)\n    Z: Any = arg_of_sigmoid(Y)\n    assert X is Z\n", "code": "def test_arg_of_sigmoid_good():\n    \"\"\"\n    Tests that arg_of_sigmoid works when given a good input.\n    \"\"\"\n\n    X: Any= T.matrix()\n    Y: Any = T.nnet.sigmoid(X)\n    Z: Any = arg_of_sigmoid(Y)\n    assert X is Z\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "104261becabb66f506a68d9f7190d42d8c4917f8"}
{"source_tokens": ["#NEWLINE#", "def get_errant_logs_for_tree(", "root_node", ")", ":", "#NEWLINE#", "#INDENT#", "'Get logs that should be hidden for a node and its primary descendants.\\n    We iterate over descendants in the same way that RegistrationApproval._on_complete\\n    does.\\n    '", "#NEWLINE#", "return", "(", "log", "for", "node", "in", "root_node", ".", "node_and_primary_descendants", "(", ")", "for", "log", "in", "get_errant_logs", "(", "node", ")", ")"], "edges": [[6, 7, 7, "enum_FIELD"], [9, 10, 7, "enum_FIELD"], [10, 11, 7, "enum_FIELD"], [12, 13, 7, "enum_FIELD"], [12, 18, 7, "enum_FIELD"], [20, 21, 7, "enum_FIELD"], [20, 24, 7, "enum_FIELD"], [18, 16, 7, "enum_FIELD"], [24, 23, 7, "enum_FIELD"], [16, 15, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [15, 2, 10, "enum_LAST_LEXICAL_USE"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [21, 11, 10, "enum_LAST_LEXICAL_USE"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [25, 13, 10, "enum_LAST_LEXICAL_USE"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [6, 9, 1, "enum_CFG_NEXT"], [15, 2, 3, "enum_LAST_WRITE"], [21, 11, 2, "enum_LAST_READ"], [25, 13, 3, "enum_LAST_WRITE"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "CenterForOpenScience", "repo": "osf.io", "path": "scripts/hide_extra_registration_logs.py", "id": 1114, "has_bug": false, "code_full": "from typing import Any, Generator\n\n\nclass Node:\n    def node_and_primary_descendants(self) -> Generator[\"Node\", None, None]:\n        yield self\n\n\ndef get_errant_logs(node: Node) -> Generator[Any, None, None]:\n    yield None\n\n\ndef get_errant_logs_for_tree(root_node: Node) -> Generator[Any, None, None]:\n    \"\"\"Get logs that should be hidden for a node and its primary descendants.\n    We iterate over descendants in the same way that RegistrationApproval._on_complete\n    does.\n    \"\"\"\n    return (\n        log\n        for node in root_node.node_and_primary_descendants()\n        for log in get_errant_logs(node)\n    )\n", "code": "def get_errant_logs_for_tree(root_node: Node) -> Generator[Any, None, None]:\n    \"\"\"Get logs that should be hidden for a node and its primary descendants.\n    We iterate over descendants in the same way that RegistrationApproval._on_complete\n    does.\n    \"\"\"\n    return (\n        log\n        for node in root_node.node_and_primary_descendants()\n        for log in get_errant_logs(node)\n    )\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "e72815b06b0cfab14cacb1a055905edf3f474025"}
{"source_tokens": ["#NEWLINE#", "def GuessHistoryPaths(", "self", ",", "username", ")", ":", "#NEWLINE#", "#INDENT#", "'Take a user and return guessed full paths to History files.\\n\\n  Args:\\n    username: Username as string.\\n\\n  Returns:\\n    A list of strings containing paths to look for history files in.\\n\\n  Raises:\\n    OSError: On invalid system in the Schema\\n  '", "#NEWLINE#", "fd", "=", "aff4", ".", "FACTORY", ".", "Open", "(", "self", ".", "client_id", ",", "token", "=", "self", ".", "token", ")", "#NEWLINE#", "system", "=", "fd", ".", "Get", "(", "fd", ".", "Schema", ".", "SYSTEM", ")", "#NEWLINE#", "user_info", "=", "flow_utils", ".", "GetUserInfo", "(", "fd", ",", "username", ")", "#NEWLINE#", "if", "(", "not", "user_info", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "Error", "(", "'Could not find homedir for user {0}'", ".", "format", "(", "username", ")", ")", "#NEWLINE#", "return", "#NEWLINE#", "#UNINDENT#", "paths", "=", "[", "]", "#NEWLINE#", "if", "(", "system", "==", "'Windows'", ")", ":", "#NEWLINE#", "#INDENT#", "path", "=", "'{app_data}\\\\Mozilla\\\\Firefox\\\\Profiles/'", "#NEWLINE#", "paths", ".", "append", "(", "path", ".", "format", "(", "app_data", "=", "user_info", ".", "special_folders", ".", "app_data", ")", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "system", "==", "'Linux'", ")", ":", "#NEWLINE#", "#INDENT#", "path", "=", "'{homedir}/.mozilla/firefox/'", "#NEWLINE#", "paths", ".", "append", "(", "path", ".", "format", "(", "homedir", "=", "user_info", ".", "homedir", ")", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "system", "==", "'Darwin'", ")", ":", "#NEWLINE#", "#INDENT#", "path", "=", "'{homedir}/Library/Application Support/Firefox/Profiles/'", "#NEWLINE#", "paths", ".", "append", "(", "path", ".", "format", "(", "homedir", "=", "user_info", ".", "homedir", ")", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "raise", "OSError", "(", "'Invalid OS for Chrome History'", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "return", "paths"], "edges": [[1, 3, 7, "enum_FIELD"], [8, 9, 7, "enum_FIELD"], [10, 22, 7, "enum_FIELD"], [29, 35, 7, "enum_FIELD"], [42, 50, 7, "enum_FIELD"], [54, 56, 7, "enum_FIELD"], [76, 79, 7, "enum_FIELD"], [88, 85, 7, "enum_FIELD"], [195, 196, 7, "enum_FIELD"], [22, 16, 7, "enum_FIELD"], [35, 33, 7, "enum_FIELD"], [50, 46, 7, "enum_FIELD"], [56, 57, 7, "enum_FIELD"], [61, 65, 7, "enum_FIELD"], [85, 84, 7, "enum_FIELD"], [90, 93, 7, "enum_FIELD"], [94, 98, 7, "enum_FIELD"], [124, 121, 7, "enum_FIELD"], [16, 14, 7, "enum_FIELD"], [20, 19, 7, "enum_FIELD"], [23, 26, 7, "enum_FIELD"], [33, 32, 7, "enum_FIELD"], [39, 37, 7, "enum_FIELD"], [46, 45, 7, "enum_FIELD"], [65, 63, 7, "enum_FIELD"], [98, 96, 7, "enum_FIELD"], [121, 120, 7, "enum_FIELD"], [126, 129, 7, "enum_FIELD"], [130, 134, 7, "enum_FIELD"], [158, 155, 7, "enum_FIELD"], [14, 13, 7, "enum_FIELD"], [26, 25, 7, "enum_FIELD"], [37, 36, 7, "enum_FIELD"], [63, 62, 7, "enum_FIELD"], [69, 67, 7, "enum_FIELD"], [96, 95, 7, "enum_FIELD"], [102, 100, 7, "enum_FIELD"], [134, 132, 7, "enum_FIELD"], [155, 154, 7, "enum_FIELD"], [160, 163, 7, "enum_FIELD"], [164, 168, 7, "enum_FIELD"], [186, 188, 7, "enum_FIELD"], [67, 66, 7, "enum_FIELD"], [100, 99, 7, "enum_FIELD"], [103, 108, 7, "enum_FIELD"], [132, 131, 7, "enum_FIELD"], [138, 136, 7, "enum_FIELD"], [168, 166, 7, "enum_FIELD"], [188, 187, 7, "enum_FIELD"], [108, 106, 7, "enum_FIELD"], [136, 135, 7, "enum_FIELD"], [139, 142, 7, "enum_FIELD"], [166, 165, 7, "enum_FIELD"], [172, 170, 7, "enum_FIELD"], [106, 105, 7, "enum_FIELD"], [142, 141, 7, "enum_FIELD"], [170, 169, 7, "enum_FIELD"], [173, 176, 7, "enum_FIELD"], [176, 175, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [19, 2, 10, "enum_LAST_LEXICAL_USE"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [25, 19, 10, "enum_LAST_LEXICAL_USE"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [32, 11, 10, "enum_LAST_LEXICAL_USE"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [36, 32, 10, "enum_LAST_LEXICAL_USE"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [49, 36, 10, "enum_LAST_LEXICAL_USE"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [51, 4, 10, "enum_LAST_LEXICAL_USE"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [57, 43, 10, "enum_LAST_LEXICAL_USE"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 61, 9, "enum_NEXT_SYNTAX"], [62, 25, 10, "enum_LAST_LEXICAL_USE"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [70, 51, 10, "enum_LAST_LEXICAL_USE"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 74, 9, "enum_NEXT_SYNTAX"], [74, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [84, 30, 10, "enum_LAST_LEXICAL_USE"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [95, 77, 10, "enum_LAST_LEXICAL_USE"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [99, 91, 10, "enum_LAST_LEXICAL_USE"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [105, 57, 10, "enum_LAST_LEXICAL_USE"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [120, 84, 10, "enum_LAST_LEXICAL_USE"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 126, 9, "enum_NEXT_SYNTAX"], [127, 99, 10, "enum_LAST_LEXICAL_USE"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [131, 95, 10, "enum_LAST_LEXICAL_USE"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [135, 127, 10, "enum_LAST_LEXICAL_USE"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [141, 105, 10, "enum_LAST_LEXICAL_USE"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [154, 120, 10, "enum_LAST_LEXICAL_USE"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 160, 9, "enum_NEXT_SYNTAX"], [161, 135, 10, "enum_LAST_LEXICAL_USE"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [165, 131, 10, "enum_LAST_LEXICAL_USE"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [169, 161, 10, "enum_LAST_LEXICAL_USE"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [175, 141, 10, "enum_LAST_LEXICAL_USE"], [174, 175, 9, "enum_NEXT_SYNTAX"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [187, 188, 9, "enum_NEXT_SYNTAX"], [188, 189, 9, "enum_NEXT_SYNTAX"], [189, 190, 9, "enum_NEXT_SYNTAX"], [190, 195, 9, "enum_NEXT_SYNTAX"], [196, 165, 10, "enum_LAST_LEXICAL_USE"], [195, 196, 9, "enum_NEXT_SYNTAX"], [3, 8, 1, "enum_CFG_NEXT"], [8, 10, 1, "enum_CFG_NEXT"], [10, 29, 1, "enum_CFG_NEXT"], [29, 42, 1, "enum_CFG_NEXT"], [42, 56, 1, "enum_CFG_NEXT"], [56, 76, 1, "enum_CFG_NEXT"], [56, 61, 1, "enum_CFG_NEXT"], [61, 74, 1, "enum_CFG_NEXT"], [76, 85, 1, "enum_CFG_NEXT"], [85, 121, 1, "enum_CFG_NEXT"], [85, 90, 1, "enum_CFG_NEXT"], [90, 94, 1, "enum_CFG_NEXT"], [94, 195, 1, "enum_CFG_NEXT"], [121, 126, 1, "enum_CFG_NEXT"], [121, 155, 1, "enum_CFG_NEXT"], [126, 130, 1, "enum_CFG_NEXT"], [130, 195, 1, "enum_CFG_NEXT"], [155, 186, 1, "enum_CFG_NEXT"], [155, 160, 1, "enum_CFG_NEXT"], [160, 164, 1, "enum_CFG_NEXT"], [164, 195, 1, "enum_CFG_NEXT"], [19, 2, 3, "enum_LAST_WRITE"], [25, 19, 2, "enum_LAST_READ"], [25, 2, 3, "enum_LAST_WRITE"], [32, 11, 3, "enum_LAST_WRITE"], [36, 32, 2, "enum_LAST_READ"], [36, 11, 3, "enum_LAST_WRITE"], [49, 36, 2, "enum_LAST_READ"], [49, 11, 3, "enum_LAST_WRITE"], [51, 4, 3, "enum_LAST_WRITE"], [57, 43, 3, "enum_LAST_WRITE"], [62, 25, 2, "enum_LAST_READ"], [62, 2, 3, "enum_LAST_WRITE"], [70, 51, 2, "enum_LAST_READ"], [70, 4, 3, "enum_LAST_WRITE"], [84, 30, 3, "enum_LAST_WRITE"], [95, 77, 3, "enum_LAST_WRITE"], [99, 91, 3, "enum_LAST_WRITE"], [105, 57, 2, "enum_LAST_READ"], [105, 43, 3, "enum_LAST_WRITE"], [120, 84, 2, "enum_LAST_READ"], [120, 30, 3, "enum_LAST_WRITE"], [131, 77, 3, "enum_LAST_WRITE"], [135, 127, 3, "enum_LAST_WRITE"], [141, 57, 2, "enum_LAST_READ"], [141, 43, 3, "enum_LAST_WRITE"], [154, 120, 2, "enum_LAST_READ"], [154, 30, 3, "enum_LAST_WRITE"], [165, 77, 3, "enum_LAST_WRITE"], [169, 161, 3, "enum_LAST_WRITE"], [175, 57, 2, "enum_LAST_READ"], [175, 43, 3, "enum_LAST_WRITE"], [196, 165, 2, "enum_LAST_READ"], [196, 95, 2, "enum_LAST_READ"], [196, 131, 2, "enum_LAST_READ"], [196, 77, 3, "enum_LAST_WRITE"], [11, 19, 4, "enum_COMPUTED_FROM"], [11, 13, 4, "enum_COMPUTED_FROM"], [11, 25, 4, "enum_COMPUTED_FROM"], [30, 32, 4, "enum_COMPUTED_FROM"], [30, 36, 4, "enum_COMPUTED_FROM"], [43, 49, 4, "enum_COMPUTED_FROM"], [43, 51, 4, "enum_COMPUTED_FROM"], [43, 45, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "google", "repo": "grr", "path": "grr/lib/flows/general/webhistory.py", "id": 19538, "has_bug": false, "code_full": "from typing import List, Optional, Union\n\n\nclass AFF4Factory:\n    @staticmethod\n    def Open(client_id: str, token: str) -> 'AFF4Object':\n        return AFF4Object()\n\nclass AFF4Object:\n    class Schema:\n        SYSTEM = \"System\"\n    \n    def Get(self, key: str) -> str:\n        return \"\"\n\nclass UserInfo:\n    homedir: str\n    special_folders: 'SpecialFolders'\n\n\nclass SpecialFolders:\n    app_data: str\n\n\nclass FlowUtils:\n    @staticmethod\n    def GetUserInfo(fd: AFF4Object, username: str) -> Optional[UserInfo]:\n        return None\n\n\nclass aff4:\n    FACTORY = AFF4Factory()\n\n\nflow_utils = FlowUtils()\n\n\nclass Class:\n    client_id: str\n    token: str\n\n    def Error(self, message: str):\n        pass\n\n    def GuessHistoryPaths(self, username: str) -> Optional[List[str]]:\n        \"\"\"Take a user and return guessed full paths to History files.\n\n        Args:\n            username: Username as string.\n\n        Returns:\n            A list of strings containing paths to look for history files in.\n\n        Raises:\n            OSError: On invalid system in the Schema\n        \"\"\"\n        fd: AFF4Object = aff4.FACTORY.Open(self.client_id, token=self.token)\n        system: str = fd.Get(fd.Schema.SYSTEM)\n        user_info: Optional[UserInfo] = flow_utils.GetUserInfo(fd, username)\n        if not user_info:\n            self.Error(\"Could not find homedir for user {0}\".format(username))\n            return\n\n        paths: list[str] = []\n        if system == \"Windows\":\n            path: str = \"{app_data}\\Mozilla\\Firefox\\Profiles/\"\n            paths.append(path.format(\n                app_data=user_info.special_folders.app_data))\n        elif system == \"Linux\":\n            path: str = \"{homedir}/.mozilla/firefox/\"\n            paths.append(path.format(homedir=user_info.homedir))\n        elif system == \"Darwin\":\n            path: str = (\"{homedir}/Library/Application Support/\"\n                    \"Firefox/Profiles/\")\n            paths.append(path.format(homedir=user_info.homedir))\n        else:\n            raise OSError(\"Invalid OS for Chrome History\")\n        return paths\n", "code": "def GuessHistoryPaths(self, username: str) -> Optional[List[str]]:\n    \"\"\"Take a user and return guessed full paths to History files.\n\n    Args:\n        username: Username as string.\n\n    Returns:\n        A list of strings containing paths to look for history files in.\n\n    Raises:\n        OSError: On invalid system in the Schema\n    \"\"\"\n    fd: AFF4Object = aff4.FACTORY.Open(self.client_id, token=self.token)\n    system: str = fd.Get(fd.Schema.SYSTEM)\n    user_info: Optional[UserInfo] = flow_utils.GetUserInfo(fd, username)\n    if not user_info:\n        self.Error(\"Could not find homedir for user {0}\".format(username))\n        return\n\n    paths: list[str] = []\n    if system == \"Windows\":\n        path: str = \"{app_data}\\Mozilla\\Firefox\\Profiles/\"\n        paths.append(path.format(\n            app_data=user_info.special_folders.app_data))\n    elif system == \"Linux\":\n        path: str = \"{homedir}/.mozilla/firefox/\"\n        paths.append(path.format(homedir=user_info.homedir))\n    elif system == \"Darwin\":\n        path: str = (\"{homedir}/Library/Application Support/\"\n                \"Firefox/Profiles/\")\n        paths.append(path.format(homedir=user_info.homedir))\n    else:\n        raise OSError(\"Invalid OS for Chrome History\")\n    return paths\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "a1479d877617ae8216392933c464c4fd075e3b14"}
{"source_tokens": ["#NEWLINE#", "def __new__(", "cls", ",", "x", ")", ":", "#NEWLINE#", "#INDENT#", "return", "Expr", ".", "__new__", "(", "cls", ",", "x", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [9, 15, 7, "enum_FIELD"], [15, 11, 7, "enum_FIELD"], [11, 10, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [14, 2, 10, "enum_LAST_LEXICAL_USE"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [16, 4, 10, "enum_LAST_LEXICAL_USE"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [3, 9, 1, "enum_CFG_NEXT"], [14, 2, 3, "enum_LAST_WRITE"], [16, 4, 3, "enum_LAST_WRITE"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "sympy", "repo": "sympy", "path": "sympy/core/tests/test_diff.py", "id": 55893, "has_bug": false, "code_full": "from typing import Any, Type\n\n\nclass Expr:\n    def __new__(cls, x: Any) -> \"Expr\":\n        return cls(x)\n    \n\nclass Class(Expr):\n\n    def __new__(cls, x: Any) -> \"Expr\":\n        return Expr.__new__(cls, x)\n", "code": "def __new__(cls, x: Any) -> \"Expr\":\n    return Expr.__new__(cls, x)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "25ea11a953ec1a83e73b58d43a1d5f4026e006bc"}
{"source_tokens": ["#NEWLINE#", "def _write_drawing_workspace(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "schema", "=", "'http://schemas.openxmlformats.org/drawingml/'", "#NEWLINE#", "xmlns_xdr", "=", "(", "schema", "+", "'2006/spreadsheetDrawing'", ")", "#NEWLINE#", "xmlns_a", "=", "(", "schema", "+", "'2006/main'", ")", "#NEWLINE#", "attributes", "=", "[", "(", "'xmlns:xdr'", ",", "xmlns_xdr", ")", ",", "(", "'xmlns:a'", ",", "xmlns_a", ")", "]", "#NEWLINE#", "self", ".", "_xml_start_tag", "(", "'xdr:wsDr'", ",", "attributes", ")"], "edges": [[6, 9, 7, "enum_FIELD"], [10, 15, 7, "enum_FIELD"], [18, 23, 7, "enum_FIELD"], [26, 35, 7, "enum_FIELD"], [42, 48, 7, "enum_FIELD"], [15, 14, 7, "enum_FIELD"], [15, 16, 7, "enum_FIELD"], [23, 22, 7, "enum_FIELD"], [23, 24, 7, "enum_FIELD"], [48, 44, 7, "enum_FIELD"], [44, 43, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [14, 7, 10, "enum_LAST_LEXICAL_USE"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [22, 14, 10, "enum_LAST_LEXICAL_USE"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [33, 11, 10, "enum_LAST_LEXICAL_USE"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [39, 19, 10, "enum_LAST_LEXICAL_USE"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [43, 2, 10, "enum_LAST_LEXICAL_USE"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [49, 27, 10, "enum_LAST_LEXICAL_USE"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [6, 10, 1, "enum_CFG_NEXT"], [10, 18, 1, "enum_CFG_NEXT"], [18, 26, 1, "enum_CFG_NEXT"], [26, 42, 1, "enum_CFG_NEXT"], [14, 7, 3, "enum_LAST_WRITE"], [22, 14, 2, "enum_LAST_READ"], [22, 7, 3, "enum_LAST_WRITE"], [33, 11, 3, "enum_LAST_WRITE"], [39, 19, 3, "enum_LAST_WRITE"], [43, 2, 3, "enum_LAST_WRITE"], [49, 27, 3, "enum_LAST_WRITE"], [11, 14, 4, "enum_COMPUTED_FROM"], [19, 22, 4, "enum_COMPUTED_FROM"], [27, 33, 4, "enum_COMPUTED_FROM"], [27, 39, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "jmcnamara", "repo": "XlsxWriter", "path": "xlsxwriter/drawing.py", "id": 22578, "has_bug": false, "code_full": "from typing import List, Tuple\n\n\nclass Class:\n    def _xml_start_tag(self, name: str, attributes: List[Tuple[str, str]]) :\n        pass\n\n    def _write_drawing_workspace(self):\n        # Write the <xdr:wsDr> element.\n        schema: str = 'http://schemas.openxmlformats.org/drawingml/'\n        xmlns_xdr: str = schema + '2006/spreadsheetDrawing'\n        xmlns_a: str = schema + '2006/main'\n\n        attributes: List[Tuple[str, str]] = [\n            ('xmlns:xdr', xmlns_xdr),\n            ('xmlns:a', xmlns_a),\n        ]\n\n        self._xml_start_tag('xdr:wsDr', attributes)\n", "code": "def _write_drawing_workspace(self):\n    # Write the <xdr:wsDr> element.\n    schema: str = 'http://schemas.openxmlformats.org/drawingml/'\n    xmlns_xdr: str = schema + '2006/spreadsheetDrawing'\n    xmlns_a: str = schema + '2006/main'\n\n    attributes: List[Tuple[str, str]] = [\n        ('xmlns:xdr', xmlns_xdr),\n        ('xmlns:a', xmlns_a),\n    ]\n\n    self._xml_start_tag('xdr:wsDr', attributes)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "b592624bdebf4488052617475cac056396a897d8"}
{"source_tokens": ["#NEWLINE#", "def __init__(", "self", ",", "d", "=", "None", ",", "**kwargs", ")", ":", "#NEWLINE#", "#INDENT#", "super", "(", "ZincClientConfig", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "#NEWLINE#", "self", ".", "_d", "=", "d"], "edges": [[1, 5, 7, "enum_FIELD"], [12, 21, 7, "enum_FIELD"], [25, 30, 7, "enum_FIELD"], [21, 19, 7, "enum_FIELD"], [27, 26, 7, "enum_FIELD"], [19, 16, 7, "enum_FIELD"], [22, 23, 7, "enum_FIELD"], [16, 13, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [17, 2, 10, "enum_LAST_LEXICAL_USE"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [26, 17, 10, "enum_LAST_LEXICAL_USE"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [30, 4, 10, "enum_LAST_LEXICAL_USE"], [29, 30, 9, "enum_NEXT_SYNTAX"], [6, 1, 1, "enum_CFG_NEXT"], [5, 12, 1, "enum_CFG_NEXT"], [12, 25, 1, "enum_CFG_NEXT"], [17, 2, 3, "enum_LAST_WRITE"], [30, 4, 3, "enum_LAST_WRITE"], [26, 17, 2, "enum_LAST_READ"], [26, 2, 3, "enum_LAST_WRITE"], [27, 30, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "mindsnacks", "repo": "Zinc", "path": "src/zinc/client.py", "id": 26255, "has_bug": false, "code_full": "from typing import Any, Optional\n\n\nclass Class:\n    def __init__(self, **kwargs):\n        pass\n\n\nclass ZincClientConfig(Class):\n    d: Optional[Any]\n\n    def __init__(self, d=None, **kwargs):\n        super(ZincClientConfig, self).__init__(**kwargs)\n        self._d = d\n", "code": "def __init__(self, d=None, **kwargs):\n    super(ZincClientConfig, self).__init__(**kwargs)\n    self._d = d\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "bf02486de48525db0a0d1efdd0ddcbef49727d20"}
{"source_tokens": ["#NEWLINE#", "@", "contextmanager", "#NEWLINE#", "def evaluate(", "x", ")", ":", "#NEWLINE#", "#INDENT#", "' Control automatic evaluation\\n\\n    This context managers controls whether or not all SymPy functions evaluate\\n    by default.\\n\\n    Note that much of SymPy expects evaluated expressions.  This functionality\\n    is experimental and is unlikely to function as intended on large\\n    expressions.\\n\\n    Examples\\n    ========\\n\\n    >>> from sympy.abc import x\\n    >>> from sympy.core.evaluate import evaluate\\n    >>> print(x + x)\\n    2*x\\n    >>> with evaluate(False):\\n    ...     print(x + x)\\n    x + x\\n    '", "#NEWLINE#", "old", "=", "global_evaluate", "[", "0", "]", "#NEWLINE#", "global_evaluate", "[", "0", "]", "=", "x", "#NEWLINE#", "(", "yield", ")", "#NEWLINE#", "global_evaluate", "[", "0", "]", "=", "old"], "edges": [[9, 10, 7, "enum_FIELD"], [11, 15, 7, "enum_FIELD"], [18, 24, 7, "enum_FIELD"], [25, 27, 7, "enum_FIELD"], [29, 35, 7, "enum_FIELD"], [15, 14, 7, "enum_FIELD"], [15, 16, 7, "enum_FIELD"], [20, 19, 7, "enum_FIELD"], [20, 21, 7, "enum_FIELD"], [31, 30, 7, "enum_FIELD"], [31, 32, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [19, 14, 10, "enum_LAST_LEXICAL_USE"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [24, 5, 10, "enum_LAST_LEXICAL_USE"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [30, 19, 10, "enum_LAST_LEXICAL_USE"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [35, 12, 10, "enum_LAST_LEXICAL_USE"], [34, 35, 9, "enum_NEXT_SYNTAX"], [2, 1, 1, "enum_CFG_NEXT"], [9, 11, 1, "enum_CFG_NEXT"], [11, 18, 1, "enum_CFG_NEXT"], [18, 25, 1, "enum_CFG_NEXT"], [25, 29, 1, "enum_CFG_NEXT"], [24, 5, 3, "enum_LAST_WRITE"], [19, 14, 2, "enum_LAST_READ"], [35, 12, 3, "enum_LAST_WRITE"], [30, 19, 2, "enum_LAST_READ"], [12, 14, 4, "enum_COMPUTED_FROM"], [20, 24, 4, "enum_COMPUTED_FROM"], [31, 35, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "sympy", "repo": "sympy", "path": "sympy/core/evaluate.py", "id": 55317, "has_bug": false, "code_full": "from typing import Generator, List\n\nglobal_evaluate: List[bool] = []\n\n\ndef evaluate(x: bool) -> Generator[None, None, None]:\n    \"\"\" Control automatic evaluation\n\n    This context managers controls whether or not all SymPy functions evaluate\n    by default.\n\n    Note that much of SymPy expects evaluated expressions.  This functionality\n    is experimental and is unlikely to function as intended on large\n    expressions.\n\n    Examples\n    ========\n\n    >>> from sympy.abc import x\n    >>> from sympy.core.evaluate import evaluate\n    >>> print(x + x)\n    2*x\n    >>> with evaluate(False):\n    ...     print(x + x)\n    x + x\n    \"\"\"\n\n    old = global_evaluate[0]\n\n    global_evaluate[0] = x\n    yield\n    global_evaluate[0] = old\n", "code": "def evaluate(x: bool) -> Generator[None, None, None]:\n    \"\"\" Control automatic evaluation\n\n    This context managers controls whether or not all SymPy functions evaluate\n    by default.\n\n    Note that much of SymPy expects evaluated expressions.  This functionality\n    is experimental and is unlikely to function as intended on large\n    expressions.\n\n    Examples\n    ========\n\n    >>> from sympy.abc import x\n    >>> from sympy.core.evaluate import evaluate\n    >>> print(x + x)\n    2*x\n    >>> with evaluate(False):\n    ...     print(x + x)\n    x + x\n    \"\"\"\n\n    old = global_evaluate[0]\n\n    global_evaluate[0] = x\n    yield\n    global_evaluate[0] = old\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "25ea11a953ec1a83e73b58d43a1d5f4026e006bc"}
{"source_tokens": ["#NEWLINE#", "@", "wraps", "(", "np", ".", "vstack", ")", "#NEWLINE#", "def vstack(", "tup", ")", ":", "#NEWLINE#", "#INDENT#", "tup", "=", "tuple", "(", "(", "atleast_2d", "(", "x", ")", "for", "x", "in", "tup", ")", ")", "#NEWLINE#", "return", "concatenate", "(", "tup", ",", "axis", "=", "0", ")"], "edges": [[14, 18, 7, "enum_FIELD"], [31, 35, 7, "enum_FIELD"], [3, 2, 7, "enum_FIELD"], [18, 17, 7, "enum_FIELD"], [35, 32, 7, "enum_FIELD"], [5, 4, 7, "enum_FIELD"], [19, 21, 7, "enum_FIELD"], [36, 38, 7, "enum_FIELD"], [21, 20, 7, "enum_FIELD"], [24, 25, 7, "enum_FIELD"], [24, 27, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 14, 9, "enum_NEXT_SYNTAX"], [15, 10, 10, "enum_LAST_LEXICAL_USE"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [25, 22, 10, "enum_LAST_LEXICAL_USE"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [27, 15, 10, "enum_LAST_LEXICAL_USE"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [34, 27, 10, "enum_LAST_LEXICAL_USE"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [3, 1, 1, "enum_CFG_NEXT"], [14, 31, 1, "enum_CFG_NEXT"], [25, 22, 2, "enum_LAST_READ"], [27, 10, 3, "enum_LAST_WRITE"], [15, 27, 2, "enum_LAST_READ"], [15, 10, 3, "enum_LAST_WRITE"], [34, 27, 2, "enum_LAST_READ"], [34, 15, 3, "enum_LAST_WRITE"], [15, 17, 4, "enum_COMPUTED_FROM"], [15, 20, 4, "enum_COMPUTED_FROM"], [15, 22, 4, "enum_COMPUTED_FROM"], [15, 25, 4, "enum_COMPUTED_FROM"], [15, 27, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "dask", "repo": "dask", "path": "dask/array/core.py", "id": 11927, "has_bug": false, "code_full": "from typing import Tuple\n\nimport numpy as np\n\n\ndef atleast_2d(array: np.ndarray) -> np.ndarray:\n    return np.ndarray(array)\n\n\ndef concatenate(tup: Tuple[np.ndarray, ...], axis: int) -> np.ndarray:\n    return np.ndarray(tup)\n\n\ndef vstack(tup: Tuple[np.ndarray, ...]) -> np.ndarray:\n    tup = tuple(atleast_2d(x) for x in tup)\n    return concatenate(tup, axis=0)\n", "code": "def vstack(tup: Tuple[np.ndarray, ...]) -> np.ndarray:\n    tup = tuple(atleast_2d(x) for x in tup)\n    return concatenate(tup, axis=0)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "112caf784c13a814c73e4fb1133968cb89029d91"}
{"source_tokens": ["#NEWLINE#", "@", "staticmethod", "#NEWLINE#", "def dereference(", "elements", ",", "layer", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Given a dict of elements, extract their current settings\\n    into a dict\\n\\n    :param elements: dict mapping labels -> FormElements\\n    :param layer: Subset or Data object as reference\\n\\n    :reteurns: dict mapping labels -> setting value\\n    '", "#NEWLINE#", "return", "dict", "(", "(", "(", "k", ",", "v", ".", "value", "(", "layer", ")", ")", "for", "(", "k", ",", "v", ")", "in", "elements", ".", "items", "(", ")", ")", ")"], "edges": [[1, 6, 7, "enum_FIELD"], [13, 14, 7, "enum_FIELD"], [16, 18, 7, "enum_FIELD"], [18, 17, 7, "enum_FIELD"], [19, 22, 7, "enum_FIELD"], [30, 33, 7, "enum_FIELD"], [30, 40, 7, "enum_FIELD"], [26, 24, 7, "enum_FIELD"], [40, 38, 7, "enum_FIELD"], [24, 23, 7, "enum_FIELD"], [38, 37, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [27, 7, 10, "enum_LAST_LEXICAL_USE"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [32, 21, 10, "enum_LAST_LEXICAL_USE"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [34, 23, 10, "enum_LAST_LEXICAL_USE"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [37, 5, 10, "enum_LAST_LEXICAL_USE"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [9, 2, 1, "enum_CFG_NEXT"], [2, 1, 1, "enum_CFG_NEXT"], [6, 13, 1, "enum_CFG_NEXT"], [13, 16, 1, "enum_CFG_NEXT"], [27, 7, 3, "enum_LAST_WRITE"], [32, 21, 2, "enum_LAST_READ"], [34, 23, 2, "enum_LAST_READ"], [37, 5, 3, "enum_LAST_WRITE"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "glue-viz", "repo": "glue", "path": "glue/viewers/custom/qt/custom_viewer.py", "id": 16527, "has_bug": false, "code_full": "from typing import Any, Dict, Optional\n\n\nclass Element:\n    def value(self, layer: Optional[Any]) -> Any:\n        pass\n\n\ndef dereference(elements: Dict[str, Element], layer: Optional[Any]=None) -> Dict[str, Any]:\n    \"\"\"\n    Given a dict of elements, extract their current settings\n    into a dict\n\n    :param elements: dict mapping labels -> FormElements\n    :param layer: Subset or Data object as reference\n\n    :reteurns: dict mapping labels -> setting value\n    \"\"\"\n    return dict((k, v.value(layer)) for k, v in elements.items())\n", "code": "def dereference(elements: Dict[str, Element], layer: Optional[Any]=None) -> Dict[str, Any]:\n    \"\"\"\n    Given a dict of elements, extract their current settings\n    into a dict\n\n    :param elements: dict mapping labels -> FormElements\n    :param layer: Subset or Data object as reference\n\n    :reteurns: dict mapping labels -> setting value\n    \"\"\"\n    return dict((k, v.value(layer)) for k, v in elements.items())\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "a036b8c270af8e3892ac88748f12955a1b2c1ff9"}
{"source_tokens": ["#NEWLINE#", "@", "classmethod", "#NEWLINE#", "def validate_update(", "cls", ",", "data", ",", "instance", ")", ":", "#NEWLINE#", "#INDENT#", "parsed", "=", "cls", ".", "validate", "(", "data", ")", "#NEWLINE#", "cls", ".", "validate_schema", "(", "parsed", ",", "tasks", ".", "TASKS_SCHEMA", ")", "#NEWLINE#", "return", "parsed"], "edges": [[1, 6, 7, "enum_FIELD"], [13, 19, 7, "enum_FIELD"], [22, 28, 7, "enum_FIELD"], [34, 35, 7, "enum_FIELD"], [19, 17, 7, "enum_FIELD"], [28, 24, 7, "enum_FIELD"], [17, 16, 7, "enum_FIELD"], [24, 23, 7, "enum_FIELD"], [30, 29, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [16, 5, 10, "enum_LAST_LEXICAL_USE"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [20, 7, 10, "enum_LAST_LEXICAL_USE"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [23, 16, 10, "enum_LAST_LEXICAL_USE"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [27, 14, 10, "enum_LAST_LEXICAL_USE"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 34, 9, "enum_NEXT_SYNTAX"], [35, 27, 10, "enum_LAST_LEXICAL_USE"], [34, 35, 9, "enum_NEXT_SYNTAX"], [2, 1, 1, "enum_CFG_NEXT"], [6, 13, 1, "enum_CFG_NEXT"], [13, 22, 1, "enum_CFG_NEXT"], [22, 34, 1, "enum_CFG_NEXT"], [16, 5, 3, "enum_LAST_WRITE"], [20, 7, 3, "enum_LAST_WRITE"], [23, 16, 2, "enum_LAST_READ"], [23, 5, 3, "enum_LAST_WRITE"], [27, 14, 3, "enum_LAST_WRITE"], [35, 27, 2, "enum_LAST_READ"], [35, 14, 3, "enum_LAST_WRITE"], [14, 20, 4, "enum_COMPUTED_FROM"], [14, 16, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "openstack", "repo": "fuel-web", "path": "nailgun/nailgun/api/v1/validators/orchestrator_graph.py", "id": 33795, "has_bug": false, "code_full": "from typing import Any, Dict\n\n\nclass tasks:\n    TASKS_SCHEMA: Dict[str, Any]\n\n\nclass Class:\n    @classmethod\n    def validate(cls, data: Dict[str, Any]) -> Dict[str, Any]:\n        return data\n    \n    @classmethod\n    def validate_schema(cls, data: Dict[str, Any], schema: Dict[str, Any]) -> None:\n        pass\n\n    def validate_update(cls, data: Dict[str, Any], instance: Any) -> Dict[str, Any]:\n        parsed: Dict[str, Any] = cls.validate(data)\n        cls.validate_schema(parsed, tasks.TASKS_SCHEMA)\n        return parsed\n", "code": "def validate_update(cls, data: Dict[str, Any], instance: Any) -> Dict[str, Any]:\n    parsed: Dict[str, Any] = cls.validate(data)\n    cls.validate_schema(parsed, tasks.TASKS_SCHEMA)\n    return parsed\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "f36a443837c47dea92296a8a687848ce0e43fff9"}
{"source_tokens": ["#NEWLINE#", "def CheckCronJobAccess(", "self", ",", "cron_job_id", ",", "token", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "cron_job_urn", "=", "cronjobs", ".", "CRON_JOBS_PATH", ".", "Add", "(", "cron_job_id", ")", "#NEWLINE#", "self", ".", "legacy_manager", ".", "CheckCronJobAccess", "(", "token", ".", "RealUID", "(", ")", ",", "cron_job_urn", ")"], "edges": [[1, 5, 7, "enum_FIELD"], [12, 20, 7, "enum_FIELD"], [23, 35, 7, "enum_FIELD"], [20, 18, 7, "enum_FIELD"], [35, 27, 7, "enum_FIELD"], [18, 16, 7, "enum_FIELD"], [27, 25, 7, "enum_FIELD"], [33, 31, 7, "enum_FIELD"], [16, 15, 7, "enum_FIELD"], [25, 24, 7, "enum_FIELD"], [31, 30, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [21, 4, 10, "enum_LAST_LEXICAL_USE"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [24, 2, 10, "enum_LAST_LEXICAL_USE"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [30, 6, 10, "enum_LAST_LEXICAL_USE"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [36, 13, 10, "enum_LAST_LEXICAL_USE"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [8, 1, 1, "enum_CFG_NEXT"], [5, 12, 1, "enum_CFG_NEXT"], [12, 23, 1, "enum_CFG_NEXT"], [21, 4, 3, "enum_LAST_WRITE"], [24, 2, 3, "enum_LAST_WRITE"], [30, 6, 3, "enum_LAST_WRITE"], [36, 13, 3, "enum_LAST_WRITE"], [13, 21, 4, "enum_COMPUTED_FROM"], [13, 15, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "google", "repo": "grr", "path": "grr/gui/api_call_router_with_approval_checks.py", "id": 17693, "has_bug": false, "code_full": "from typing import Optional\n\n\nclass Token:\n    def RealUID(self) -> str:\n        return \"\"\n\n\nclass Path:\n    def Add(self, cron_job_id: str) -> str:\n        return \"\"\n\n\nclass CronManager:\n    CRON_JOBS_PATH: Path\n\n    def CheckCronJobAccess(self, real_uid: str, cron_job_urn: str):\n        pass\n\n\nclass CronJobs:\n    CRON_MANAGER: CronManager\n\n\ncronjobs = CronJobs()\n\n\ndef CheckCronJobAccess(self, cron_job_id: str, token: Optional[Token]=None):\n    cron_job_urn: str = cronjobs.CRON_MANAGER.CRON_JOBS_PATH.Add(cron_job_id)\n    self.legacy_manager.CheckCronJobAccess(token.RealUID(), cron_job_urn)\n", "code": "def CheckCronJobAccess(self, cron_job_id: str, token: Optional[Token]=None):\n    cron_job_urn: str = cronjobs.CRON_MANAGER.CRON_JOBS_PATH.Add(cron_job_id)\n    self.legacy_manager.CheckCronJobAccess(token.RealUID(), cron_job_urn)\n", "type_checked_pytype": false, "type_checked_mypy": false, "type_error_label": "attribute-error", "hash": "7b0e6c18ea47e5361e36554beebdb9fc112f7350"}
{"source_tokens": ["#NEWLINE#", "def __init__(", "self", ",", "subnet_name", ",", "description", ",", "subnets", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "subnet_name", "=", "subnet_name", "#NEWLINE#", "self", ".", "description", "=", "description", "#NEWLINE#", "self", ".", "subnets", "=", "subnets", "#NEWLINE#", "self", ".", "status", "=", "'Complete'", "#NEWLINE#", "self", ".", "vpc_id", "=", "self", ".", "subnets", "[", "0", "]", ".", "vpc_id"], "edges": [[1, 5, 7, "enum_FIELD"], [12, 17, 7, "enum_FIELD"], [18, 23, 7, "enum_FIELD"], [24, 29, 7, "enum_FIELD"], [30, 35, 7, "enum_FIELD"], [36, 47, 7, "enum_FIELD"], [14, 13, 7, "enum_FIELD"], [20, 19, 7, "enum_FIELD"], [26, 25, 7, "enum_FIELD"], [32, 31, 7, "enum_FIELD"], [38, 37, 7, "enum_FIELD"], [47, 44, 7, "enum_FIELD"], [44, 42, 7, "enum_FIELD"], [44, 45, 7, "enum_FIELD"], [42, 41, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 12, 9, "enum_NEXT_SYNTAX"], [13, 2, 10, "enum_LAST_LEXICAL_USE"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [17, 4, 10, "enum_LAST_LEXICAL_USE"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [19, 13, 10, "enum_LAST_LEXICAL_USE"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [23, 6, 10, "enum_LAST_LEXICAL_USE"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [25, 19, 10, "enum_LAST_LEXICAL_USE"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [29, 8, 10, "enum_LAST_LEXICAL_USE"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [31, 25, 10, "enum_LAST_LEXICAL_USE"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [37, 31, 10, "enum_LAST_LEXICAL_USE"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [41, 37, 10, "enum_LAST_LEXICAL_USE"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [5, 12, 1, "enum_CFG_NEXT"], [12, 18, 1, "enum_CFG_NEXT"], [18, 24, 1, "enum_CFG_NEXT"], [24, 30, 1, "enum_CFG_NEXT"], [30, 36, 1, "enum_CFG_NEXT"], [17, 4, 3, "enum_LAST_WRITE"], [13, 2, 3, "enum_LAST_WRITE"], [23, 6, 3, "enum_LAST_WRITE"], [19, 13, 2, "enum_LAST_READ"], [19, 2, 3, "enum_LAST_WRITE"], [29, 8, 3, "enum_LAST_WRITE"], [25, 19, 2, "enum_LAST_READ"], [25, 2, 3, "enum_LAST_WRITE"], [31, 25, 2, "enum_LAST_READ"], [31, 2, 3, "enum_LAST_WRITE"], [41, 31, 2, "enum_LAST_READ"], [41, 2, 3, "enum_LAST_WRITE"], [37, 41, 2, "enum_LAST_READ"], [37, 2, 3, "enum_LAST_WRITE"], [14, 17, 4, "enum_COMPUTED_FROM"], [20, 23, 4, "enum_COMPUTED_FROM"], [26, 29, 4, "enum_COMPUTED_FROM"], [38, 41, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "spulec", "repo": "moto", "path": "moto/rds/models.py", "id": 52421, "has_bug": false, "code_full": "from typing import List\n\n\nclass Subnet:\n    vpc_id: str\n\n\nclass Class:\n    subnet_name: str\n    description: str\n    subnets: List[Subnet]\n    status: str\n    vpc_id: str\n\n    def __init__(self, subnet_name: str, description: str, subnets: List[Subnet]):\n        self.subnet_name = subnet_name\n        self.description = description\n        self.subnets = subnets\n        self.status = \"Complete\"\n\n        self.vpc_id = self.subnets[0].vpc_id\n", "code": "def __init__(self, subnet_name: str, description: str, subnets: List[Subnet]):\n    self.subnet_name = subnet_name\n    self.description = description\n    self.subnets = subnets\n    self.status = \"Complete\"\n\n    self.vpc_id = self.subnets[0].vpc_id\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "b5ff3345bee181f136aaf235428078e2aaa910a1"}
{"source_tokens": ["#NEWLINE#", "def _get_item(", "self", ",", "res_dict", ",", "item", ")", ":", "#NEWLINE#", "#INDENT#", "path", "=", "self", ".", "_get_path", "(", "item", ")", "#NEWLINE#", "(", "d", ",", "s", ")", "=", "(", "res_dict", ",", "self", ".", "shadow", ")", "#NEWLINE#", "for", "name", "in", "path", "[", ":", "(", "-", "1", ")", "]", ":", "#NEWLINE#", "#INDENT#", "d", "=", "d", ".", "setdefault", "(", "name", ",", "{", "}", ")", "#NEWLINE#", "s", "=", "s", "[", "name", "]", ".", "node", "#NEWLINE#", "#UNINDENT#", "dst_key", "=", "path", "[", "(", "-", "1", ")", "]", "#NEWLINE#", "d", "[", "dst_key", "]", "=", "s", "[", "dst_key", "]", ".", "node"], "edges": [[1, 3, 7, "enum_FIELD"], [10, 16, 7, "enum_FIELD"], [19, 28, 7, "enum_FIELD"], [36, 35, 7, "enum_FIELD"], [36, 38, 7, "enum_FIELD"], [69, 73, 7, "enum_FIELD"], [79, 89, 7, "enum_FIELD"], [16, 14, 7, "enum_FIELD"], [38, 37, 7, "enum_FIELD"], [38, 39, 7, "enum_FIELD"], [47, 55, 7, "enum_FIELD"], [59, 66, 7, "enum_FIELD"], [73, 72, 7, "enum_FIELD"], [73, 75, 7, "enum_FIELD"], [81, 80, 7, "enum_FIELD"], [81, 82, 7, "enum_FIELD"], [89, 86, 7, "enum_FIELD"], [14, 13, 7, "enum_FIELD"], [30, 29, 7, "enum_FIELD"], [39, 41, 7, "enum_FIELD"], [55, 51, 7, "enum_FIELD"], [66, 63, 7, "enum_FIELD"], [75, 76, 7, "enum_FIELD"], [86, 85, 7, "enum_FIELD"], [86, 87, 7, "enum_FIELD"], [41, 42, 7, "enum_FIELD"], [51, 50, 7, "enum_FIELD"], [63, 62, 7, "enum_FIELD"], [63, 64, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [13, 2, 10, "enum_LAST_LEXICAL_USE"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [17, 6, 10, "enum_LAST_LEXICAL_USE"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [27, 4, 10, "enum_LAST_LEXICAL_USE"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [29, 13, 10, "enum_LAST_LEXICAL_USE"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [37, 11, 10, "enum_LAST_LEXICAL_USE"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 47, 9, "enum_NEXT_SYNTAX"], [48, 21, 10, "enum_LAST_LEXICAL_USE"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [50, 48, 10, "enum_LAST_LEXICAL_USE"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [54, 35, 10, "enum_LAST_LEXICAL_USE"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [60, 23, 10, "enum_LAST_LEXICAL_USE"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [62, 60, 10, "enum_LAST_LEXICAL_USE"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [64, 54, 10, "enum_LAST_LEXICAL_USE"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [72, 37, 10, "enum_LAST_LEXICAL_USE"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [80, 50, 10, "enum_LAST_LEXICAL_USE"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [82, 70, 10, "enum_LAST_LEXICAL_USE"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [85, 62, 10, "enum_LAST_LEXICAL_USE"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [87, 82, 10, "enum_LAST_LEXICAL_USE"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [3, 10, 1, "enum_CFG_NEXT"], [10, 19, 1, "enum_CFG_NEXT"], [19, 38, 1, "enum_CFG_NEXT"], [38, 35, 1, "enum_CFG_NEXT"], [35, 47, 1, "enum_CFG_NEXT"], [35, 69, 1, "enum_CFG_NEXT"], [47, 59, 1, "enum_CFG_NEXT"], [59, 35, 1, "enum_CFG_NEXT"], [69, 79, 1, "enum_CFG_NEXT"], [13, 2, 3, "enum_LAST_WRITE"], [17, 6, 3, "enum_LAST_WRITE"], [27, 4, 3, "enum_LAST_WRITE"], [29, 13, 2, "enum_LAST_READ"], [29, 2, 3, "enum_LAST_WRITE"], [37, 11, 3, "enum_LAST_WRITE"], [35, 64, 2, "enum_LAST_READ"], [35, 35, 3, "enum_LAST_WRITE"], [50, 50, 2, "enum_LAST_READ"], [50, 48, 3, "enum_LAST_WRITE"], [50, 21, 3, "enum_LAST_WRITE"], [54, 64, 2, "enum_LAST_READ"], [54, 35, 3, "enum_LAST_WRITE"], [48, 50, 2, "enum_LAST_READ"], [48, 48, 3, "enum_LAST_WRITE"], [48, 21, 3, "enum_LAST_WRITE"], [62, 62, 2, "enum_LAST_READ"], [62, 23, 3, "enum_LAST_WRITE"], [62, 60, 3, "enum_LAST_WRITE"], [64, 54, 2, "enum_LAST_READ"], [64, 35, 3, "enum_LAST_WRITE"], [60, 62, 2, "enum_LAST_READ"], [60, 23, 3, "enum_LAST_WRITE"], [60, 60, 3, "enum_LAST_WRITE"], [72, 37, 2, "enum_LAST_READ"], [72, 11, 3, "enum_LAST_WRITE"], [85, 62, 2, "enum_LAST_READ"], [85, 23, 3, "enum_LAST_WRITE"], [85, 60, 3, "enum_LAST_WRITE"], [87, 70, 3, "enum_LAST_WRITE"], [80, 50, 2, "enum_LAST_READ"], [80, 48, 3, "enum_LAST_WRITE"], [80, 21, 3, "enum_LAST_WRITE"], [82, 87, 2, "enum_LAST_READ"], [82, 70, 3, "enum_LAST_WRITE"], [11, 17, 4, "enum_COMPUTED_FROM"], [11, 13, 4, "enum_COMPUTED_FROM"], [22, 27, 4, "enum_COMPUTED_FROM"], [22, 29, 4, "enum_COMPUTED_FROM"], [70, 72, 4, "enum_COMPUTED_FROM"], [81, 85, 4, "enum_COMPUTED_FROM"], [81, 87, 4, "enum_COMPUTED_FROM"], [48, 54, 4, "enum_COMPUTED_FROM"], [48, 50, 4, "enum_COMPUTED_FROM"], [60, 62, 4, "enum_COMPUTED_FROM"], [60, 64, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "ejeschke", "repo": "ginga", "path": "ginga/qtw/Widgets.py", "id": 13473, "has_bug": false, "code_full": "from typing import Any, Dict, List\n\n\nclass Class:\n    shadow: Dict[str, Any]\n\n    def _get_path(self, item: Any) -> List[str]:\n        return []\n\n    def _get_item(self, res_dict: Dict[str, Any], item: Any):\n        # from the QTreeViewItem `item`, return the item via a path\n        # in the dictionary `res_dict`\n        path: List[str] = self._get_path(item)\n        d, s = res_dict, self.shadow\n        for name in path[:-1]:\n            d = d.setdefault(name, {})\n            s = s[name].node\n\n        dst_key: str = path[-1]\n        d[dst_key] = s[dst_key].node\n", "code": "def _get_item(self, res_dict: Dict[str, Any], item: Any):\n    # from the QTreeViewItem `item`, return the item via a path\n    # in the dictionary `res_dict`\n    path: List[str] = self._get_path(item)\n    d, s = res_dict, self.shadow\n    for name in path[:-1]:\n        d = d.setdefault(name, {})\n        s = s[name].node\n\n    dst_key: str = path[-1]\n    d[dst_key] = s[dst_key].node\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "5111ff2b49969eb7153312ac2ce1fae296ca763a"}
{"source_tokens": ["#NEWLINE#", "def __new__(", "cls", ",", "name", ",", "bases", ",", "dict", ")", ":", "#NEWLINE#", "#INDENT#", "sync", "=", "set", "(", ")", "#NEWLINE#", "for", "base", "in", "bases", ":", "#NEWLINE#", "#INDENT#", "if", "hasattr", "(", "base", ",", "MetaSynchronized", ".", "METHODS", ")", ":", "#NEWLINE#", "#INDENT#", "sync", ".", "update", "(", "getattr", "(", "base", ",", "MetaSynchronized", ".", "METHODS", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "if", "(", "MetaSynchronized", ".", "METHODS", "in", "dict", ")", ":", "#NEWLINE#", "#INDENT#", "sync", ".", "update", "(", "dict", "[", "MetaSynchronized", ".", "METHODS", "]", ")", "#NEWLINE#", "#UNINDENT#", "if", "sync", ":", "#NEWLINE#", "#INDENT#", "def synchronized(", "f", ")", ":", "#NEWLINE#", "#INDENT#", "def g(", "self", ",", "*", "args", ",", "**kwargs", ")", ":", "#NEWLINE#", "#INDENT#", "lock", "=", "getattr", "(", "self", ",", "MetaSynchronized", ".", "LOCK", ")", "#NEWLINE#", "lock", ".", "acquire", "(", ")", "#NEWLINE#", "try", ":", "#NEWLINE#", "#INDENT#", "f", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", "#NEWLINE#", "#UNINDENT#", "finally", ":", "#NEWLINE#", "#INDENT#", "lock", ".", "release", "(", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "return", "changeFunctionName", "(", "g", ",", "f", ".", "__name__", ",", "f", ".", "__doc__", ")", "#NEWLINE#", "#UNINDENT#", "for", "attr", "in", "sync", ":", "#NEWLINE#", "#INDENT#", "if", "(", "attr", "in", "dict", ")", ":", "#NEWLINE#", "#INDENT#", "dict", "[", "attr", "]", "=", "synchronized", "(", "dict", "[", "attr", "]", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "original__init__", "=", "dict", ".", "get", "(", "'__init__'", ")", "#NEWLINE#", "def __init__(", "self", ",", "*", "args", ",", "**kwargs", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "not", "hasattr", "(", "self", ",", "MetaSynchronized", ".", "LOCK", ")", ")", ":", "#NEWLINE#", "#INDENT#", "setattr", "(", "self", ",", "MetaSynchronized", ".", "LOCK", ",", "threading", ".", "RLock", "(", ")", ")", "#NEWLINE#", "#UNINDENT#", "if", "original__init__", ":", "#NEWLINE#", "#INDENT#", "original__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "super", "(", "newclass", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "dict", "[", "'__init__'", "]", "=", "__init__", "#NEWLINE#", "#UNINDENT#", "newclass", "=", "super", "(", "MetaSynchronized", ",", "cls", ")", ".", "__new__", "(", "cls", ",", "name", ",", "bases", ",", "dict", ")", "#NEWLINE#", "return", "newclass"], "edges": [[1, 5, 7, "enum_FIELD"], [12, 16, 7, "enum_FIELD"], [21, 20, 7, "enum_FIELD"], [21, 22, 7, "enum_FIELD"], [54, 59, 7, "enum_FIELD"], [78, 79, 7, "enum_FIELD"], [288, 303, 7, "enum_FIELD"], [309, 310, 7, "enum_FIELD"], [16, 15, 7, "enum_FIELD"], [26, 30, 7, "enum_FIELD"], [59, 57, 7, "enum_FIELD"], [64, 68, 7, "enum_FIELD"], [162, 161, 7, "enum_FIELD"], [162, 163, 7, "enum_FIELD"], [190, 196, 7, "enum_FIELD"], [207, 203, 7, "enum_FIELD"], [280, 286, 7, "enum_FIELD"], [303, 297, 7, "enum_FIELD"], [30, 27, 7, "enum_FIELD"], [37, 41, 7, "enum_FIELD"], [57, 56, 7, "enum_FIELD"], [68, 66, 7, "enum_FIELD"], [96, 92, 7, "enum_FIELD"], [145, 149, 7, "enum_FIELD"], [167, 170, 7, "enum_FIELD"], [196, 194, 7, "enum_FIELD"], [203, 204, 7, "enum_FIELD"], [211, 213, 7, "enum_FIELD"], [244, 243, 7, "enum_FIELD"], [282, 281, 7, "enum_FIELD"], [282, 283, 7, "enum_FIELD"], [297, 294, 7, "enum_FIELD"], [32, 31, 7, "enum_FIELD"], [41, 39, 7, "enum_FIELD"], [66, 65, 7, "enum_FIELD"], [70, 69, 7, "enum_FIELD"], [70, 72, 7, "enum_FIELD"], [92, 93, 7, "enum_FIELD"], [99, 105, 7, "enum_FIELD"], [110, 114, 7, "enum_FIELD"], [149, 146, 7, "enum_FIELD"], [170, 169, 7, "enum_FIELD"], [175, 182, 7, "enum_FIELD"], [194, 193, 7, "enum_FIELD"], [213, 217, 7, "enum_FIELD"], [225, 229, 7, "enum_FIELD"], [246, 250, 7, "enum_FIELD"], [262, 274, 7, "enum_FIELD"], [294, 291, 7, "enum_FIELD"], [39, 38, 7, "enum_FIELD"], [45, 42, 7, "enum_FIELD"], [72, 71, 7, "enum_FIELD"], [105, 102, 7, "enum_FIELD"], [114, 112, 7, "enum_FIELD"], [120, 124, 7, "enum_FIELD"], [136, 140, 7, "enum_FIELD"], [151, 150, 7, "enum_FIELD"], [155, 154, 7, "enum_FIELD"], [177, 176, 7, "enum_FIELD"], [177, 178, 7, "enum_FIELD"], [182, 181, 7, "enum_FIELD"], [217, 214, 7, "enum_FIELD"], [229, 226, 7, "enum_FIELD"], [250, 247, 7, "enum_FIELD"], [274, 269, 7, "enum_FIELD"], [47, 46, 7, "enum_FIELD"], [107, 106, 7, "enum_FIELD"], [112, 111, 7, "enum_FIELD"], [124, 121, 7, "enum_FIELD"], [140, 138, 7, "enum_FIELD"], [184, 183, 7, "enum_FIELD"], [184, 185, 7, "enum_FIELD"], [219, 218, 7, "enum_FIELD"], [231, 230, 7, "enum_FIELD"], [237, 235, 7, "enum_FIELD"], [251, 252, 7, "enum_FIELD"], [254, 255, 7, "enum_FIELD"], [269, 266, 7, "enum_FIELD"], [272, 273, 7, "enum_FIELD"], [275, 276, 7, "enum_FIELD"], [125, 126, 7, "enum_FIELD"], [128, 129, 7, "enum_FIELD"], [138, 137, 7, "enum_FIELD"], [235, 234, 7, "enum_FIELD"], [266, 263, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [22, 6, 10, "enum_LAST_LEXICAL_USE"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [29, 20, 10, "enum_LAST_LEXICAL_USE"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 37, 9, "enum_NEXT_SYNTAX"], [38, 13, 10, "enum_LAST_LEXICAL_USE"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [44, 29, 10, "enum_LAST_LEXICAL_USE"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [46, 31, 10, "enum_LAST_LEXICAL_USE"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [56, 46, 10, "enum_LAST_LEXICAL_USE"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [60, 8, 10, "enum_LAST_LEXICAL_USE"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 64, 9, "enum_NEXT_SYNTAX"], [65, 38, 10, "enum_LAST_LEXICAL_USE"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [69, 60, 10, "enum_LAST_LEXICAL_USE"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [71, 56, 10, "enum_LAST_LEXICAL_USE"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 78, 9, "enum_NEXT_SYNTAX"], [79, 65, 10, "enum_LAST_LEXICAL_USE"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [102, 42, 10, "enum_LAST_LEXICAL_USE"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [104, 90, 10, "enum_LAST_LEXICAL_USE"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [106, 71, 10, "enum_LAST_LEXICAL_USE"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [111, 100, 10, "enum_LAST_LEXICAL_USE"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 120, 9, "enum_NEXT_SYNTAX"], [121, 84, 10, "enum_LAST_LEXICAL_USE"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [123, 104, 10, "enum_LAST_LEXICAL_USE"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [126, 93, 10, "enum_LAST_LEXICAL_USE"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 136, 9, "enum_NEXT_SYNTAX"], [137, 111, 10, "enum_LAST_LEXICAL_USE"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [150, 121, 10, "enum_LAST_LEXICAL_USE"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [154, 150, 10, "enum_LAST_LEXICAL_USE"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [163, 79, 10, "enum_LAST_LEXICAL_USE"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [169, 161, 10, "enum_LAST_LEXICAL_USE"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [171, 69, 10, "enum_LAST_LEXICAL_USE"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 175, 9, "enum_NEXT_SYNTAX"], [176, 171, 10, "enum_LAST_LEXICAL_USE"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [178, 169, 10, "enum_LAST_LEXICAL_USE"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [183, 176, 10, "enum_LAST_LEXICAL_USE"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 184, 9, "enum_NEXT_SYNTAX"], [185, 178, 10, "enum_LAST_LEXICAL_USE"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [187, 190, 9, "enum_NEXT_SYNTAX"], [190, 191, 9, "enum_NEXT_SYNTAX"], [191, 192, 9, "enum_NEXT_SYNTAX"], [193, 183, 10, "enum_LAST_LEXICAL_USE"], [192, 193, 9, "enum_NEXT_SYNTAX"], [193, 194, 9, "enum_NEXT_SYNTAX"], [194, 195, 9, "enum_NEXT_SYNTAX"], [195, 196, 9, "enum_NEXT_SYNTAX"], [196, 197, 9, "enum_NEXT_SYNTAX"], [197, 198, 9, "enum_NEXT_SYNTAX"], [198, 200, 9, "enum_NEXT_SYNTAX"], [201, 123, 10, "enum_LAST_LEXICAL_USE"], [200, 201, 9, "enum_NEXT_SYNTAX"], [201, 202, 9, "enum_NEXT_SYNTAX"], [202, 203, 9, "enum_NEXT_SYNTAX"], [204, 126, 10, "enum_LAST_LEXICAL_USE"], [203, 204, 9, "enum_NEXT_SYNTAX"], [204, 205, 9, "enum_NEXT_SYNTAX"], [205, 206, 9, "enum_NEXT_SYNTAX"], [206, 207, 9, "enum_NEXT_SYNTAX"], [207, 208, 9, "enum_NEXT_SYNTAX"], [208, 211, 9, "enum_NEXT_SYNTAX"], [211, 212, 9, "enum_NEXT_SYNTAX"], [212, 213, 9, "enum_NEXT_SYNTAX"], [214, 27, 10, "enum_LAST_LEXICAL_USE"], [213, 214, 9, "enum_NEXT_SYNTAX"], [214, 215, 9, "enum_NEXT_SYNTAX"], [216, 201, 10, "enum_LAST_LEXICAL_USE"], [215, 216, 9, "enum_NEXT_SYNTAX"], [216, 217, 9, "enum_NEXT_SYNTAX"], [218, 106, 10, "enum_LAST_LEXICAL_USE"], [217, 218, 9, "enum_NEXT_SYNTAX"], [218, 219, 9, "enum_NEXT_SYNTAX"], [219, 220, 9, "enum_NEXT_SYNTAX"], [220, 221, 9, "enum_NEXT_SYNTAX"], [221, 222, 9, "enum_NEXT_SYNTAX"], [222, 223, 9, "enum_NEXT_SYNTAX"], [223, 225, 9, "enum_NEXT_SYNTAX"], [225, 226, 9, "enum_NEXT_SYNTAX"], [226, 227, 9, "enum_NEXT_SYNTAX"], [228, 216, 10, "enum_LAST_LEXICAL_USE"], [227, 228, 9, "enum_NEXT_SYNTAX"], [228, 229, 9, "enum_NEXT_SYNTAX"], [230, 218, 10, "enum_LAST_LEXICAL_USE"], [229, 230, 9, "enum_NEXT_SYNTAX"], [230, 231, 9, "enum_NEXT_SYNTAX"], [231, 232, 9, "enum_NEXT_SYNTAX"], [232, 233, 9, "enum_NEXT_SYNTAX"], [233, 234, 9, "enum_NEXT_SYNTAX"], [234, 235, 9, "enum_NEXT_SYNTAX"], [235, 236, 9, "enum_NEXT_SYNTAX"], [236, 237, 9, "enum_NEXT_SYNTAX"], [237, 238, 9, "enum_NEXT_SYNTAX"], [238, 239, 9, "enum_NEXT_SYNTAX"], [239, 242, 9, "enum_NEXT_SYNTAX"], [243, 191, 10, "enum_LAST_LEXICAL_USE"], [242, 243, 9, "enum_NEXT_SYNTAX"], [243, 244, 9, "enum_NEXT_SYNTAX"], [244, 246, 9, "enum_NEXT_SYNTAX"], [247, 243, 10, "enum_LAST_LEXICAL_USE"], [246, 247, 9, "enum_NEXT_SYNTAX"], [247, 248, 9, "enum_NEXT_SYNTAX"], [249, 228, 10, "enum_LAST_LEXICAL_USE"], [248, 249, 9, "enum_NEXT_SYNTAX"], [249, 250, 9, "enum_NEXT_SYNTAX"], [250, 251, 9, "enum_NEXT_SYNTAX"], [252, 204, 10, "enum_LAST_LEXICAL_USE"], [251, 252, 9, "enum_NEXT_SYNTAX"], [252, 253, 9, "enum_NEXT_SYNTAX"], [253, 254, 9, "enum_NEXT_SYNTAX"], [255, 129, 10, "enum_LAST_LEXICAL_USE"], [254, 255, 9, "enum_NEXT_SYNTAX"], [255, 256, 9, "enum_NEXT_SYNTAX"], [256, 259, 9, "enum_NEXT_SYNTAX"], [259, 260, 9, "enum_NEXT_SYNTAX"], [260, 262, 9, "enum_NEXT_SYNTAX"], [262, 263, 9, "enum_NEXT_SYNTAX"], [263, 264, 9, "enum_NEXT_SYNTAX"], [264, 265, 9, "enum_NEXT_SYNTAX"], [265, 266, 9, "enum_NEXT_SYNTAX"], [267, 249, 10, "enum_LAST_LEXICAL_USE"], [266, 267, 9, "enum_NEXT_SYNTAX"], [267, 268, 9, "enum_NEXT_SYNTAX"], [268, 269, 9, "enum_NEXT_SYNTAX"], [269, 270, 9, "enum_NEXT_SYNTAX"], [270, 271, 9, "enum_NEXT_SYNTAX"], [271, 272, 9, "enum_NEXT_SYNTAX"], [273, 252, 10, "enum_LAST_LEXICAL_USE"], [272, 273, 9, "enum_NEXT_SYNTAX"], [273, 274, 9, "enum_NEXT_SYNTAX"], [274, 275, 9, "enum_NEXT_SYNTAX"], [276, 255, 10, "enum_LAST_LEXICAL_USE"], [275, 276, 9, "enum_NEXT_SYNTAX"], [276, 277, 9, "enum_NEXT_SYNTAX"], [277, 280, 9, "enum_NEXT_SYNTAX"], [281, 193, 10, "enum_LAST_LEXICAL_USE"], [280, 281, 9, "enum_NEXT_SYNTAX"], [281, 282, 9, "enum_NEXT_SYNTAX"], [282, 283, 9, "enum_NEXT_SYNTAX"], [283, 284, 9, "enum_NEXT_SYNTAX"], [284, 285, 9, "enum_NEXT_SYNTAX"], [285, 286, 9, "enum_NEXT_SYNTAX"], [286, 288, 9, "enum_NEXT_SYNTAX"], [289, 265, 10, "enum_LAST_LEXICAL_USE"], [288, 289, 9, "enum_NEXT_SYNTAX"], [289, 290, 9, "enum_NEXT_SYNTAX"], [291, 263, 10, "enum_LAST_LEXICAL_USE"], [290, 291, 9, "enum_NEXT_SYNTAX"], [291, 292, 9, "enum_NEXT_SYNTAX"], [293, 230, 10, "enum_LAST_LEXICAL_USE"], [292, 293, 9, "enum_NEXT_SYNTAX"], [293, 294, 9, "enum_NEXT_SYNTAX"], [295, 2, 10, "enum_LAST_LEXICAL_USE"], [294, 295, 9, "enum_NEXT_SYNTAX"], [295, 296, 9, "enum_NEXT_SYNTAX"], [296, 297, 9, "enum_NEXT_SYNTAX"], [297, 298, 9, "enum_NEXT_SYNTAX"], [298, 299, 9, "enum_NEXT_SYNTAX"], [300, 295, 10, "enum_LAST_LEXICAL_USE"], [299, 300, 9, "enum_NEXT_SYNTAX"], [300, 301, 9, "enum_NEXT_SYNTAX"], [302, 4, 10, "enum_LAST_LEXICAL_USE"], [301, 302, 9, "enum_NEXT_SYNTAX"], [302, 303, 9, "enum_NEXT_SYNTAX"], [304, 22, 10, "enum_LAST_LEXICAL_USE"], [303, 304, 9, "enum_NEXT_SYNTAX"], [304, 305, 9, "enum_NEXT_SYNTAX"], [306, 281, 10, "enum_LAST_LEXICAL_USE"], [305, 306, 9, "enum_NEXT_SYNTAX"], [306, 307, 9, "enum_NEXT_SYNTAX"], [307, 309, 9, "enum_NEXT_SYNTAX"], [310, 289, 10, "enum_LAST_LEXICAL_USE"], [309, 310, 9, "enum_NEXT_SYNTAX"], [5, 12, 1, "enum_CFG_NEXT"], [12, 22, 1, "enum_CFG_NEXT"], [22, 20, 1, "enum_CFG_NEXT"], [20, 59, 1, "enum_CFG_NEXT"], [20, 30, 1, "enum_CFG_NEXT"], [30, 20, 1, "enum_CFG_NEXT"], [30, 37, 1, "enum_CFG_NEXT"], [37, 20, 1, "enum_CFG_NEXT"], [59, 79, 1, "enum_CFG_NEXT"], [59, 64, 1, "enum_CFG_NEXT"], [64, 79, 1, "enum_CFG_NEXT"], [79, 288, 1, "enum_CFG_NEXT"], [79, 85, 1, "enum_CFG_NEXT"], [85, 163, 1, "enum_CFG_NEXT"], [96, 145, 1, "enum_CFG_NEXT"], [92, 99, 1, "enum_CFG_NEXT"], [99, 110, 1, "enum_CFG_NEXT"], [110, 120, 1, "enum_CFG_NEXT"], [120, 136, 1, "enum_CFG_NEXT"], [163, 161, 1, "enum_CFG_NEXT"], [161, 190, 1, "enum_CFG_NEXT"], [161, 170, 1, "enum_CFG_NEXT"], [170, 161, 1, "enum_CFG_NEXT"], [170, 175, 1, "enum_CFG_NEXT"], [175, 161, 1, "enum_CFG_NEXT"], [190, 207, 1, "enum_CFG_NEXT"], [207, 280, 1, "enum_CFG_NEXT"], [203, 213, 1, "enum_CFG_NEXT"], [213, 225, 1, "enum_CFG_NEXT"], [213, 243, 1, "enum_CFG_NEXT"], [225, 243, 1, "enum_CFG_NEXT"], [243, 262, 1, "enum_CFG_NEXT"], [243, 246, 1, "enum_CFG_NEXT"], [280, 288, 1, "enum_CFG_NEXT"], [288, 309, 1, "enum_CFG_NEXT"], [22, 6, 3, "enum_LAST_WRITE"], [20, 44, 2, "enum_LAST_READ"], [20, 29, 2, "enum_LAST_READ"], [20, 20, 3, "enum_LAST_WRITE"], [27, 27, 2, "enum_LAST_READ"], [29, 44, 2, "enum_LAST_READ"], [29, 29, 2, "enum_LAST_READ"], [29, 20, 3, "enum_LAST_WRITE"], [31, 46, 2, "enum_LAST_READ"], [31, 31, 2, "enum_LAST_READ"], [38, 38, 2, "enum_LAST_READ"], [38, 13, 3, "enum_LAST_WRITE"], [42, 42, 2, "enum_LAST_READ"], [44, 29, 2, "enum_LAST_READ"], [44, 20, 3, "enum_LAST_WRITE"], [46, 31, 2, "enum_LAST_READ"], [56, 46, 2, "enum_LAST_READ"], [56, 31, 2, "enum_LAST_READ"], [60, 8, 3, "enum_LAST_WRITE"], [65, 38, 2, "enum_LAST_READ"], [65, 13, 3, "enum_LAST_WRITE"], [69, 60, 2, "enum_LAST_READ"], [69, 8, 3, "enum_LAST_WRITE"], [71, 56, 2, "enum_LAST_READ"], [79, 38, 2, "enum_LAST_READ"], [79, 65, 2, "enum_LAST_READ"], [79, 13, 3, "enum_LAST_WRITE"], [104, 90, 3, "enum_LAST_WRITE"], [111, 100, 3, "enum_LAST_WRITE"], [137, 111, 2, "enum_LAST_READ"], [137, 100, 3, "enum_LAST_WRITE"], [123, 104, 2, "enum_LAST_READ"], [123, 90, 3, "enum_LAST_WRITE"], [126, 93, 3, "enum_LAST_WRITE"], [148, 96, 3, "enum_LAST_WRITE"], [150, 84, 3, "enum_LAST_WRITE"], [154, 150, 2, "enum_LAST_READ"], [154, 84, 3, "enum_LAST_WRITE"], [163, 79, 2, "enum_LAST_READ"], [163, 13, 3, "enum_LAST_WRITE"], [161, 178, 2, "enum_LAST_READ"], [161, 169, 2, "enum_LAST_READ"], [161, 161, 3, "enum_LAST_WRITE"], [169, 178, 2, "enum_LAST_READ"], [169, 169, 2, "enum_LAST_READ"], [169, 161, 3, "enum_LAST_WRITE"], [171, 176, 2, "enum_LAST_READ"], [171, 60, 2, "enum_LAST_READ"], [171, 171, 2, "enum_LAST_READ"], [171, 69, 2, "enum_LAST_READ"], [171, 8, 3, "enum_LAST_WRITE"], [181, 181, 2, "enum_LAST_READ"], [181, 85, 3, "enum_LAST_WRITE"], [183, 171, 2, "enum_LAST_READ"], [183, 8, 3, "enum_LAST_WRITE"], [185, 169, 2, "enum_LAST_READ"], [185, 161, 3, "enum_LAST_WRITE"], [176, 183, 2, "enum_LAST_READ"], [176, 8, 3, "enum_LAST_WRITE"], [178, 185, 2, "enum_LAST_READ"], [178, 161, 3, "enum_LAST_WRITE"], [193, 176, 2, "enum_LAST_READ"], [193, 60, 2, "enum_LAST_READ"], [193, 171, 2, "enum_LAST_READ"], [193, 69, 2, "enum_LAST_READ"], [193, 8, 3, "enum_LAST_WRITE"], [216, 201, 3, "enum_LAST_WRITE"], [228, 216, 2, "enum_LAST_READ"], [228, 201, 3, "enum_LAST_WRITE"], [230, 218, 2, "enum_LAST_READ"], [247, 243, 2, "enum_LAST_READ"], [249, 216, 2, "enum_LAST_READ"], [249, 228, 2, "enum_LAST_READ"], [249, 201, 3, "enum_LAST_WRITE"], [252, 204, 3, "enum_LAST_WRITE"], [267, 216, 2, "enum_LAST_READ"], [267, 228, 2, "enum_LAST_READ"], [267, 201, 3, "enum_LAST_WRITE"], [273, 204, 3, "enum_LAST_WRITE"], [286, 207, 3, "enum_LAST_WRITE"], [281, 193, 2, "enum_LAST_READ"], [281, 8, 3, "enum_LAST_WRITE"], [293, 56, 2, "enum_LAST_READ"], [293, 71, 2, "enum_LAST_READ"], [295, 2, 3, "enum_LAST_WRITE"], [300, 295, 2, "enum_LAST_READ"], [300, 2, 3, "enum_LAST_WRITE"], [302, 4, 3, "enum_LAST_WRITE"], [304, 22, 2, "enum_LAST_READ"], [304, 6, 3, "enum_LAST_WRITE"], [306, 60, 2, "enum_LAST_READ"], [306, 281, 2, "enum_LAST_READ"], [306, 69, 2, "enum_LAST_READ"], [306, 8, 3, "enum_LAST_WRITE"], [310, 289, 3, "enum_LAST_WRITE"], [13, 15, 4, "enum_COMPUTED_FROM"], [289, 300, 4, "enum_COMPUTED_FROM"], [289, 302, 4, "enum_COMPUTED_FROM"], [289, 304, 4, "enum_COMPUTED_FROM"], [289, 306, 4, "enum_COMPUTED_FROM"], [289, 291, 4, "enum_COMPUTED_FROM"], [289, 293, 4, "enum_COMPUTED_FROM"], [289, 295, 4, "enum_COMPUTED_FROM"], [191, 193, 4, "enum_COMPUTED_FROM"], [282, 286, 4, "enum_COMPUTED_FROM"], [100, 102, 4, "enum_COMPUTED_FROM"], [100, 104, 4, "enum_COMPUTED_FROM"], [100, 106, 4, "enum_COMPUTED_FROM"], [177, 181, 4, "enum_COMPUTED_FROM"], [177, 183, 4, "enum_COMPUTED_FROM"], [177, 185, 4, "enum_COMPUTED_FROM"], [182, 85, 11, "enum_CALLS"], [145, 182, 5, "enum_RETURNS_TO"], [184, 84, 6, "enum_FORMAL_ARG_NAME"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "ProgVal", "repo": "Limnoria", "path": "src/utils/python.py", "id": 6981, "has_bug": false, "code_full": "import threading\nfrom typing import Any, Callable, Dict, Optional, Set, Tuple, Type\n\n\ndef changeFunctionName(f: Callable, name: str, doc: str) -> Callable:\n    return f\n\n\nclass MetaSynchronized(type):\n    METHODS: str\n    LOCK: str\n\n    def __new__(cls, name: str, bases: Tuple, dict: Dict[str, Any]) -> \"Type\":\n        sync: Set = set()\n        for base in bases:\n            if hasattr(base, MetaSynchronized.METHODS):\n                sync.update(getattr(base, MetaSynchronized.METHODS))\n        if MetaSynchronized.METHODS in dict:\n            sync.update(dict[MetaSynchronized.METHODS])\n        if sync:\n            def synchronized(f):\n                def g(self, *args, **kwargs):\n                    lock: threading.Lock = getattr(self, MetaSynchronized.LOCK)\n                    lock.acquire()\n                    try:\n                        f(self, *args, **kwargs)\n                    finally:\n                        lock.release()\n                return changeFunctionName(g, f.__name__, f.__doc__)\n            for attr in sync:\n                if attr in dict:\n                    dict[attr] = synchronized(dict[attr])\n            original__init__: Optional[Callable] = dict.get('__init__')\n            def __init__(self, *args, **kwargs):\n                if not hasattr(self, MetaSynchronized.LOCK):\n                    setattr(self, MetaSynchronized.LOCK, threading.RLock())\n                if original__init__:\n                    original__init__(self, *args, **kwargs)\n                else:\n                    # newclass is defined below.\n                    super(newclass, self).__init__(*args, **kwargs)\n            dict['__init__'] = __init__\n        newclass: Type = super(MetaSynchronized, cls).__new__(cls, name, bases, dict)\n        return newclass\n", "code": "def __new__(cls, name: str, bases: Tuple, dict: Dict[str, Any]) -> \"Type\":\n    sync: Set = set()\n    for base in bases:\n        if hasattr(base, MetaSynchronized.METHODS):\n            sync.update(getattr(base, MetaSynchronized.METHODS))\n    if MetaSynchronized.METHODS in dict:\n        sync.update(dict[MetaSynchronized.METHODS])\n    if sync:\n        def synchronized(f):\n            def g(self, *args, **kwargs):\n                lock: threading.Lock = getattr(self, MetaSynchronized.LOCK)\n                lock.acquire()\n                try:\n                    f(self, *args, **kwargs)\n                finally:\n                    lock.release()\n            return changeFunctionName(g, f.__name__, f.__doc__)\n        for attr in sync:\n            if attr in dict:\n                dict[attr] = synchronized(dict[attr])\n        original__init__: Optional[Callable] = dict.get('__init__')\n        def __init__(self, *args, **kwargs):\n            if not hasattr(self, MetaSynchronized.LOCK):\n                setattr(self, MetaSynchronized.LOCK, threading.RLock())\n            if original__init__:\n                original__init__(self, *args, **kwargs)\n            else:\n                # newclass is defined below.\n                super(newclass, self).__init__(*args, **kwargs)\n        dict['__init__'] = __init__\n    newclass: Type = super(MetaSynchronized, cls).__new__(cls, name, bases, dict)\n    return newclass\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "22956a3f4dc9f777a091b46501fede7a4bf0731c"}
{"source_tokens": ["#NEWLINE#", "def TC(", "f", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Returns the trailing coefficient of ``f``.\\n\\n    Examples\\n    ========\\n\\n    >>> from sympy import Poly\\n    >>> from sympy.abc import x\\n\\n    >>> Poly(x**3 + 2*x**2 + 3*x, x).TC()\\n    0\\n\\n    '", "#NEWLINE#", "if", "hasattr", "(", "f", ".", "rep", ",", "'TC'", ")", ":", "#NEWLINE#", "#INDENT#", "result", "=", "f", ".", "rep", ".", "TC", "(", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "raise", "OperationNotSupported", "(", "f", ",", "'TC'", ")", "#NEWLINE#", "#UNINDENT#", "return", "f", ".", "rep", ".", "dom", ".", "to_sympy", "(", "result", ")"], "edges": [[6, 7, 7, "enum_FIELD"], [18, 15, 7, "enum_FIELD"], [45, 53, 7, "enum_FIELD"], [15, 10, 7, "enum_FIELD"], [20, 28, 7, "enum_FIELD"], [36, 40, 7, "enum_FIELD"], [53, 51, 7, "enum_FIELD"], [13, 12, 7, "enum_FIELD"], [28, 26, 7, "enum_FIELD"], [40, 37, 7, "enum_FIELD"], [51, 49, 7, "enum_FIELD"], [26, 24, 7, "enum_FIELD"], [49, 47, 7, "enum_FIELD"], [24, 23, 7, "enum_FIELD"], [47, 46, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [12, 2, 10, "enum_LAST_LEXICAL_USE"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [23, 12, 10, "enum_LAST_LEXICAL_USE"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [39, 23, 10, "enum_LAST_LEXICAL_USE"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 45, 9, "enum_NEXT_SYNTAX"], [46, 39, 10, "enum_LAST_LEXICAL_USE"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [54, 21, 10, "enum_LAST_LEXICAL_USE"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [6, 15, 1, "enum_CFG_NEXT"], [15, 20, 1, "enum_CFG_NEXT"], [15, 36, 1, "enum_CFG_NEXT"], [20, 45, 1, "enum_CFG_NEXT"], [12, 2, 3, "enum_LAST_WRITE"], [23, 12, 2, "enum_LAST_READ"], [23, 2, 3, "enum_LAST_WRITE"], [39, 12, 2, "enum_LAST_READ"], [39, 2, 3, "enum_LAST_WRITE"], [46, 23, 2, "enum_LAST_READ"], [46, 2, 3, "enum_LAST_WRITE"], [54, 21, 3, "enum_LAST_WRITE"], [21, 23, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "sympy", "repo": "sympy", "path": "sympy/polys/polytools.py", "id": 57062, "has_bug": false, "code_full": "from typing import Any\n\n\nclass OperationNotSupported(Exception):\n    pass\n\n\ndef TC(f: Any) -> Any:\n    \"\"\"\n    Returns the trailing coefficient of ``f``.\n\n    Examples\n    ========\n\n    >>> from sympy import Poly\n    >>> from sympy.abc import x\n\n    >>> Poly(x**3 + 2*x**2 + 3*x, x).TC()\n    0\n\n    \"\"\"\n    if hasattr(f.rep, 'TC'):\n        result: Any = f.rep.TC()\n    else:  # pragma: no cover\n        raise OperationNotSupported(f, 'TC')\n\n    return f.rep.dom.to_sympy(result)\n", "code": "def TC(f: Any) -> Any:\n    \"\"\"\n    Returns the trailing coefficient of ``f``.\n\n    Examples\n    ========\n\n    >>> from sympy import Poly\n    >>> from sympy.abc import x\n\n    >>> Poly(x**3 + 2*x**2 + 3*x, x).TC()\n    0\n\n    \"\"\"\n    if hasattr(f.rep, 'TC'):\n        result: Any = f.rep.TC()\n    else:  # pragma: no cover\n        raise OperationNotSupported(f, 'TC')\n\n    return f.rep.dom.to_sympy(result)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "25ea11a953ec1a83e73b58d43a1d5f4026e006bc"}
{"source_tokens": ["#NEWLINE#", "def fast_mul(", "point", ",", "N", ")", ":", "#NEWLINE#", "#INDENT#", "bn_x", "=", "library", ".", "BignumType", "(", "point", ".", "x", "(", ")", ")", "#NEWLINE#", "bn_y", "=", "library", ".", "BignumType", "(", "point", ".", "y", "(", ")", ")", "#NEWLINE#", "bn_n", "=", "library", ".", "BignumType", "(", "N", ")", "#NEWLINE#", "ctx", "=", "library", ".", "BN_CTX_new", "(", ")", "#NEWLINE#", "ec_result", "=", "library", ".", "EC_POINT_new", "(", "NID_secp256k1_GROUP", ")", "#NEWLINE#", "ec_point", "=", "library", ".", "EC_POINT_new", "(", "NID_secp256k1_GROUP", ")", "#NEWLINE#", "library", ".", "EC_POINT_set_affine_coordinates_GFp", "(", "NID_secp256k1_GROUP", ",", "ec_point", ",", "bn_x", ",", "bn_y", ",", "ctx", ")", "#NEWLINE#", "library", ".", "EC_POINT_mul", "(", "NID_secp256k1_GROUP", ",", "ec_result", ",", "None", ",", "ec_point", ",", "bn_n", ",", "ctx", ")", "#NEWLINE#", "library", ".", "EC_POINT_get_affine_coordinates_GFp", "(", "NID_secp256k1_GROUP", ",", "ec_result", ",", "bn_x", ",", "bn_y", ",", "ctx", ")", "#NEWLINE#", "library", ".", "EC_POINT_free", "(", "ec_point", ")", "#NEWLINE#", "library", ".", "EC_POINT_free", "(", "ec_result", ")", "#NEWLINE#", "library", ".", "BN_CTX_free", "(", "ctx", ")", "#NEWLINE#", "return", "type", "(", "point", ")", "(", "point", ".", "curve", "(", ")", ",", "bn_x", ".", "to_int", "(", ")", ",", "bn_y", ".", "to_int", "(", ")", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [8, 14, 7, "enum_FIELD"], [21, 27, 7, "enum_FIELD"], [34, 40, 7, "enum_FIELD"], [43, 49, 7, "enum_FIELD"], [51, 57, 7, "enum_FIELD"], [60, 66, 7, "enum_FIELD"], [69, 77, 7, "enum_FIELD"], [84, 94, 7, "enum_FIELD"], [101, 109, 7, "enum_FIELD"], [116, 120, 7, "enum_FIELD"], [123, 127, 7, "enum_FIELD"], [130, 134, 7, "enum_FIELD"], [138, 149, 7, "enum_FIELD"], [14, 12, 7, "enum_FIELD"], [27, 25, 7, "enum_FIELD"], [40, 38, 7, "enum_FIELD"], [49, 47, 7, "enum_FIELD"], [57, 55, 7, "enum_FIELD"], [66, 64, 7, "enum_FIELD"], [77, 71, 7, "enum_FIELD"], [94, 86, 7, "enum_FIELD"], [109, 103, 7, "enum_FIELD"], [120, 118, 7, "enum_FIELD"], [127, 125, 7, "enum_FIELD"], [134, 132, 7, "enum_FIELD"], [149, 140, 7, "enum_FIELD"], [12, 11, 7, "enum_FIELD"], [18, 16, 7, "enum_FIELD"], [25, 24, 7, "enum_FIELD"], [31, 29, 7, "enum_FIELD"], [38, 37, 7, "enum_FIELD"], [47, 46, 7, "enum_FIELD"], [55, 54, 7, "enum_FIELD"], [64, 63, 7, "enum_FIELD"], [71, 70, 7, "enum_FIELD"], [86, 85, 7, "enum_FIELD"], [103, 102, 7, "enum_FIELD"], [118, 117, 7, "enum_FIELD"], [125, 124, 7, "enum_FIELD"], [132, 131, 7, "enum_FIELD"], [140, 139, 7, "enum_FIELD"], [147, 145, 7, "enum_FIELD"], [153, 151, 7, "enum_FIELD"], [159, 157, 7, "enum_FIELD"], [16, 15, 7, "enum_FIELD"], [29, 28, 7, "enum_FIELD"], [145, 144, 7, "enum_FIELD"], [151, 150, 7, "enum_FIELD"], [157, 156, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [15, 2, 10, "enum_LAST_LEXICAL_USE"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [24, 11, 10, "enum_LAST_LEXICAL_USE"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [28, 15, 10, "enum_LAST_LEXICAL_USE"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [37, 24, 10, "enum_LAST_LEXICAL_USE"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [41, 4, 10, "enum_LAST_LEXICAL_USE"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [46, 37, 10, "enum_LAST_LEXICAL_USE"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [54, 46, 10, "enum_LAST_LEXICAL_USE"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [63, 54, 10, "enum_LAST_LEXICAL_USE"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [67, 58, 10, "enum_LAST_LEXICAL_USE"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [70, 63, 10, "enum_LAST_LEXICAL_USE"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [74, 67, 10, "enum_LAST_LEXICAL_USE"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [76, 61, 10, "enum_LAST_LEXICAL_USE"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [78, 9, 10, "enum_LAST_LEXICAL_USE"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [80, 22, 10, "enum_LAST_LEXICAL_USE"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [82, 44, 10, "enum_LAST_LEXICAL_USE"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [85, 70, 10, "enum_LAST_LEXICAL_USE"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [89, 74, 10, "enum_LAST_LEXICAL_USE"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [91, 52, 10, "enum_LAST_LEXICAL_USE"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [95, 76, 10, "enum_LAST_LEXICAL_USE"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [97, 35, 10, "enum_LAST_LEXICAL_USE"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [99, 82, 10, "enum_LAST_LEXICAL_USE"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [102, 85, 10, "enum_LAST_LEXICAL_USE"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [106, 89, 10, "enum_LAST_LEXICAL_USE"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [108, 91, 10, "enum_LAST_LEXICAL_USE"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [110, 78, 10, "enum_LAST_LEXICAL_USE"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [112, 80, 10, "enum_LAST_LEXICAL_USE"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [114, 99, 10, "enum_LAST_LEXICAL_USE"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [117, 102, 10, "enum_LAST_LEXICAL_USE"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [121, 95, 10, "enum_LAST_LEXICAL_USE"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [124, 117, 10, "enum_LAST_LEXICAL_USE"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [128, 108, 10, "enum_LAST_LEXICAL_USE"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [131, 124, 10, "enum_LAST_LEXICAL_USE"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [135, 114, 10, "enum_LAST_LEXICAL_USE"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [141, 28, 10, "enum_LAST_LEXICAL_USE"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [144, 141, 10, "enum_LAST_LEXICAL_USE"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [150, 110, 10, "enum_LAST_LEXICAL_USE"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [156, 112, 10, "enum_LAST_LEXICAL_USE"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [3, 8, 1, "enum_CFG_NEXT"], [8, 21, 1, "enum_CFG_NEXT"], [21, 34, 1, "enum_CFG_NEXT"], [34, 43, 1, "enum_CFG_NEXT"], [43, 51, 1, "enum_CFG_NEXT"], [51, 60, 1, "enum_CFG_NEXT"], [60, 69, 1, "enum_CFG_NEXT"], [69, 84, 1, "enum_CFG_NEXT"], [84, 101, 1, "enum_CFG_NEXT"], [101, 116, 1, "enum_CFG_NEXT"], [116, 123, 1, "enum_CFG_NEXT"], [123, 130, 1, "enum_CFG_NEXT"], [130, 138, 1, "enum_CFG_NEXT"], [15, 2, 3, "enum_LAST_WRITE"], [24, 11, 2, "enum_LAST_READ"], [28, 15, 2, "enum_LAST_READ"], [28, 2, 3, "enum_LAST_WRITE"], [37, 24, 2, "enum_LAST_READ"], [41, 4, 3, "enum_LAST_WRITE"], [46, 37, 2, "enum_LAST_READ"], [54, 46, 2, "enum_LAST_READ"], [63, 54, 2, "enum_LAST_READ"], [67, 58, 2, "enum_LAST_READ"], [70, 63, 2, "enum_LAST_READ"], [74, 67, 2, "enum_LAST_READ"], [76, 61, 3, "enum_LAST_WRITE"], [78, 9, 3, "enum_LAST_WRITE"], [80, 22, 3, "enum_LAST_WRITE"], [82, 44, 3, "enum_LAST_WRITE"], [85, 70, 2, "enum_LAST_READ"], [89, 74, 2, "enum_LAST_READ"], [91, 52, 3, "enum_LAST_WRITE"], [95, 76, 2, "enum_LAST_READ"], [95, 61, 3, "enum_LAST_WRITE"], [97, 35, 3, "enum_LAST_WRITE"], [99, 82, 2, "enum_LAST_READ"], [99, 44, 3, "enum_LAST_WRITE"], [102, 85, 2, "enum_LAST_READ"], [106, 89, 2, "enum_LAST_READ"], [108, 91, 2, "enum_LAST_READ"], [108, 52, 3, "enum_LAST_WRITE"], [110, 78, 2, "enum_LAST_READ"], [110, 9, 3, "enum_LAST_WRITE"], [112, 80, 2, "enum_LAST_READ"], [112, 22, 3, "enum_LAST_WRITE"], [114, 99, 2, "enum_LAST_READ"], [114, 44, 3, "enum_LAST_WRITE"], [117, 102, 2, "enum_LAST_READ"], [121, 95, 2, "enum_LAST_READ"], [121, 61, 3, "enum_LAST_WRITE"], [124, 117, 2, "enum_LAST_READ"], [128, 108, 2, "enum_LAST_READ"], [128, 52, 3, "enum_LAST_WRITE"], [131, 124, 2, "enum_LAST_READ"], [135, 114, 2, "enum_LAST_READ"], [135, 44, 3, "enum_LAST_WRITE"], [141, 28, 2, "enum_LAST_READ"], [141, 2, 3, "enum_LAST_WRITE"], [144, 141, 2, "enum_LAST_READ"], [144, 2, 3, "enum_LAST_WRITE"], [150, 110, 2, "enum_LAST_READ"], [150, 9, 3, "enum_LAST_WRITE"], [156, 112, 2, "enum_LAST_READ"], [156, 22, 3, "enum_LAST_WRITE"], [9, 11, 4, "enum_COMPUTED_FROM"], [9, 15, 4, "enum_COMPUTED_FROM"], [22, 24, 4, "enum_COMPUTED_FROM"], [22, 28, 4, "enum_COMPUTED_FROM"], [35, 41, 4, "enum_COMPUTED_FROM"], [35, 37, 4, "enum_COMPUTED_FROM"], [44, 46, 4, "enum_COMPUTED_FROM"], [52, 58, 4, "enum_COMPUTED_FROM"], [52, 54, 4, "enum_COMPUTED_FROM"], [61, 67, 4, "enum_COMPUTED_FROM"], [61, 63, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "richardkiss", "repo": "pycoin", "path": "pycoin/ecdsa/native/library.py", "id": 45231, "has_bug": false, "code_full": "from typing import Any\n\n\nclass Point:\n    def x(self) -> int:\n        return 0\n\n    def y(self) -> int:\n        return 0\n\n    def curve(self) -> Any:\n        pass\n\n\nclass library:\n    class BignumType:\n        def __init__(self, n: int):\n            pass\n\n        def to_int(self) -> int:\n            return 0\n    \n    @staticmethod\n    def BN_CTX_new() -> Any:\n        pass\n    \n    @staticmethod\n    def EC_POINT_new(nid: int) -> Any:\n        pass\n    \n    @staticmethod\n    def EC_POINT_set_affine_coordinates_GFp(nid: int, point: Any, x: BignumType, y: BignumType, ctx: Any):\n        pass\n\n    @staticmethod\n    def EC_POINT_mul(nid: int, result: Any, a: Any, b: Any, c: BignumType, ctx: Any):\n        pass\n    \n    @staticmethod\n    def EC_POINT_get_affine_coordinates_GFp(nid: int, point: Any, x: BignumType, y: BignumType, ctx: Any):\n        pass\n    \n    @staticmethod\n    def EC_POINT_free(point: Any):\n        pass\n    \n    @staticmethod\n    def BN_CTX_free(ctx: Any):\n        pass\n\n\nNID_secp256k1_GROUP: Any = None\n\ndef fast_mul(point, N):\n    bn_x = library.BignumType(point.x())\n    bn_y = library.BignumType(point.y())\n    bn_n = library.BignumType(N)\n\n    ctx = library.BN_CTX_new()\n    ec_result = library.EC_POINT_new(NID_secp256k1_GROUP)\n    ec_point = library.EC_POINT_new(NID_secp256k1_GROUP)\n\n    library.EC_POINT_set_affine_coordinates_GFp(NID_secp256k1_GROUP, ec_point, bn_x, bn_y, ctx)\n\n    library.EC_POINT_mul(NID_secp256k1_GROUP, ec_result, None, ec_point, bn_n, ctx)\n\n    library.EC_POINT_get_affine_coordinates_GFp(NID_secp256k1_GROUP, ec_result, bn_x, bn_y, ctx)\n    library.EC_POINT_free(ec_point)\n    library.EC_POINT_free(ec_result)\n    library.BN_CTX_free(ctx)\n    return type(point)(point.curve(), bn_x.to_int(), bn_y.to_int())\n", "code": "def fast_mul(point, N):\n    bn_x = library.BignumType(point.x())\n    bn_y = library.BignumType(point.y())\n    bn_n = library.BignumType(N)\n\n    ctx = library.BN_CTX_new()\n    ec_result = library.EC_POINT_new(NID_secp256k1_GROUP)\n    ec_point = library.EC_POINT_new(NID_secp256k1_GROUP)\n\n    library.EC_POINT_set_affine_coordinates_GFp(NID_secp256k1_GROUP, ec_point, bn_x, bn_y, ctx)\n\n    library.EC_POINT_mul(NID_secp256k1_GROUP, ec_result, None, ec_point, bn_n, ctx)\n\n    library.EC_POINT_get_affine_coordinates_GFp(NID_secp256k1_GROUP, ec_result, bn_x, bn_y, ctx)\n    library.EC_POINT_free(ec_point)\n    library.EC_POINT_free(ec_result)\n    library.BN_CTX_free(ctx)\n    return type(point)(point.curve(), bn_x.to_int(), bn_y.to_int())\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "fff2aaffecf5808d15d154546aaf97667e57456a"}
{"source_tokens": ["#NEWLINE#", "@", "staticmethod", "#NEWLINE#", "def get_zxing_launch_button(", "event_code", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Renders the button to launch the Zxing barcode scanner app\\n\\n        @param event_code: the current event code\\n        @return: the Zxing launch button\\n    '", "#NEWLINE#", "T", "=", "current", ".", "T", "#NEWLINE#", "template", "=", "'zxing://scan/?ret=%s&SCAN_FORMATS=Code 128,UPC_A,EAN_13'", "#NEWLINE#", "scan_vars", "=", "{", "'label'", ":", "'{CODE}'", ",", "'scanner'", ":", "'zxing'", ",", "'event'", ":", "'{EVENT}'", "}", "#NEWLINE#", "tmp", "=", "URL", "(", "args", "=", "[", "'register'", "]", ",", "vars", "=", "scan_vars", ",", "host", "=", "True", ")", "#NEWLINE#", "tmp", "=", "str", "(", "tmp", ")", ".", "replace", "(", "'&'", ",", "'%26'", ")", "#NEWLINE#", "if", "event_code", ":", "#NEWLINE#", "#INDENT#", "scan_vars", "[", "'event'", "]", "=", "event_code", ".", "replace", "(", "'&'", ",", "'%2526'", ")", "#NEWLINE#", "#UNINDENT#", "ret", "=", "URL", "(", "args", "=", "[", "'register'", "]", ",", "vars", "=", "scan_vars", ",", "host", "=", "True", ")", "#NEWLINE#", "ret", "=", "str", "(", "ret", ")", ".", "replace", "(", "'&'", ",", "'%26'", ")", "#NEWLINE#", "return", "A", "(", "T", "(", "'Scan with Zxing'", ")", ",", "_href", "=", "(", "template", "%", "ret", ")", ",", "_class", "=", "'tiny primary button zxing-button'", ",", "data", "=", "{", "'tmp'", ":", "(", "template", "%", "tmp", ")", "}", ")"], "edges": [[9, 10, 7, "enum_FIELD"], [11, 15, 7, "enum_FIELD"], [17, 20, 7, "enum_FIELD"], [21, 30, 7, "enum_FIELD"], [37, 47, 7, "enum_FIELD"], [56, 67, 7, "enum_FIELD"], [71, 72, 7, "enum_FIELD"], [90, 100, 7, "enum_FIELD"], [109, 120, 7, "enum_FIELD"], [124, 139, 7, "enum_FIELD"], [15, 14, 7, "enum_FIELD"], [47, 40, 7, "enum_FIELD"], [67, 63, 7, "enum_FIELD"], [75, 86, 7, "enum_FIELD"], [100, 93, 7, "enum_FIELD"], [120, 116, 7, "enum_FIELD"], [139, 125, 7, "enum_FIELD"], [42, 44, 7, "enum_FIELD"], [48, 50, 7, "enum_FIELD"], [52, 54, 7, "enum_FIELD"], [63, 60, 7, "enum_FIELD"], [77, 76, 7, "enum_FIELD"], [77, 78, 7, "enum_FIELD"], [86, 82, 7, "enum_FIELD"], [95, 97, 7, "enum_FIELD"], [101, 103, 7, "enum_FIELD"], [105, 107, 7, "enum_FIELD"], [116, 113, 7, "enum_FIELD"], [128, 127, 7, "enum_FIELD"], [132, 136, 7, "enum_FIELD"], [140, 142, 7, "enum_FIELD"], [144, 148, 7, "enum_FIELD"], [60, 59, 7, "enum_FIELD"], [82, 81, 7, "enum_FIELD"], [113, 112, 7, "enum_FIELD"], [136, 135, 7, "enum_FIELD"], [136, 137, 7, "enum_FIELD"], [151, 150, 7, "enum_FIELD"], [151, 152, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [50, 22, 10, "enum_LAST_LEXICAL_USE"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [57, 38, 10, "enum_LAST_LEXICAL_USE"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [61, 57, 10, "enum_LAST_LEXICAL_USE"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 71, 9, "enum_NEXT_SYNTAX"], [72, 5, 10, "enum_LAST_LEXICAL_USE"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 75, 9, "enum_NEXT_SYNTAX"], [76, 50, 10, "enum_LAST_LEXICAL_USE"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [81, 72, 10, "enum_LAST_LEXICAL_USE"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [93, 40, 10, "enum_LAST_LEXICAL_USE"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [103, 76, 10, "enum_LAST_LEXICAL_USE"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [110, 91, 10, "enum_LAST_LEXICAL_USE"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [112, 59, 10, "enum_LAST_LEXICAL_USE"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [114, 110, 10, "enum_LAST_LEXICAL_USE"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [127, 12, 10, "enum_LAST_LEXICAL_USE"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [135, 18, 10, "enum_LAST_LEXICAL_USE"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [137, 114, 10, "enum_LAST_LEXICAL_USE"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [150, 135, 10, "enum_LAST_LEXICAL_USE"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [152, 61, 10, "enum_LAST_LEXICAL_USE"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [2, 1, 1, "enum_CFG_NEXT"], [9, 11, 1, "enum_CFG_NEXT"], [11, 17, 1, "enum_CFG_NEXT"], [17, 21, 1, "enum_CFG_NEXT"], [21, 37, 1, "enum_CFG_NEXT"], [37, 56, 1, "enum_CFG_NEXT"], [56, 72, 1, "enum_CFG_NEXT"], [72, 75, 1, "enum_CFG_NEXT"], [72, 90, 1, "enum_CFG_NEXT"], [75, 90, 1, "enum_CFG_NEXT"], [90, 109, 1, "enum_CFG_NEXT"], [109, 124, 1, "enum_CFG_NEXT"], [50, 22, 3, "enum_LAST_WRITE"], [61, 38, 3, "enum_LAST_WRITE"], [57, 61, 2, "enum_LAST_READ"], [57, 38, 3, "enum_LAST_WRITE"], [72, 5, 3, "enum_LAST_WRITE"], [81, 72, 2, "enum_LAST_READ"], [81, 5, 3, "enum_LAST_WRITE"], [76, 50, 2, "enum_LAST_READ"], [76, 22, 3, "enum_LAST_WRITE"], [93, 40, 2, "enum_LAST_READ"], [103, 76, 2, "enum_LAST_READ"], [103, 50, 2, "enum_LAST_READ"], [103, 22, 3, "enum_LAST_WRITE"], [112, 59, 2, "enum_LAST_READ"], [114, 91, 3, "enum_LAST_WRITE"], [110, 114, 2, "enum_LAST_READ"], [110, 91, 3, "enum_LAST_WRITE"], [127, 12, 3, "enum_LAST_WRITE"], [135, 18, 3, "enum_LAST_WRITE"], [137, 114, 2, "enum_LAST_READ"], [137, 110, 3, "enum_LAST_WRITE"], [150, 135, 2, "enum_LAST_READ"], [150, 18, 3, "enum_LAST_WRITE"], [152, 61, 2, "enum_LAST_READ"], [152, 57, 3, "enum_LAST_WRITE"], [12, 14, 4, "enum_COMPUTED_FROM"], [38, 40, 4, "enum_COMPUTED_FROM"], [38, 50, 4, "enum_COMPUTED_FROM"], [57, 59, 4, "enum_COMPUTED_FROM"], [57, 61, 4, "enum_COMPUTED_FROM"], [91, 93, 4, "enum_COMPUTED_FROM"], [91, 103, 4, "enum_COMPUTED_FROM"], [110, 112, 4, "enum_COMPUTED_FROM"], [110, 114, 4, "enum_COMPUTED_FROM"], [77, 81, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "sahana", "repo": "eden", "path": "modules/s3db/dvr.py", "id": 46965, "has_bug": false, "code_full": "from typing import Dict, Optional\n\nfrom gluon import URL, A, current\n\n\ndef get_zxing_launch_button(event_code: Optional[str]) -> A:\n    \"\"\"\n        Renders the button to launch the Zxing barcode scanner app\n\n        @param event_code: the current event code\n        @return: the Zxing launch button\n    \"\"\"\n\n    T = current.T\n\n    # URL template\n    template: str = \"zxing://scan/?ret=%s&SCAN_FORMATS=Code 128,UPC_A,EAN_13\"\n\n    # Query variables for return URL\n    scan_vars: Dict[str, str] = {\"label\": \"{CODE}\",\n                    \"scanner\": \"zxing\",\n                    \"event\": \"{EVENT}\",\n                    }\n\n    # Return URL template\n    tmp: str = URL(args = [\"register\"],\n                vars = scan_vars,\n                host = True,\n                )\n    tmp: str = str(tmp).replace(\"&\", \"%26\")\n\n    # Current return URL\n    if event_code:\n        # must double-escape ampersands:\n        scan_vars[\"event\"] = event_code.replace(\"&\", \"%2526\")\n    ret: str = URL(args = [\"register\"],\n                vars = scan_vars,\n                host = True,\n                )\n    ret = str(ret).replace(\"&\", \"%26\")\n\n    # Construct button\n    return A(T(\"Scan with Zxing\"),\n                _href = template % ret,\n                _class = \"tiny primary button zxing-button\",\n                data = {\"tmp\": template % tmp,\n                        },\n                )\n", "code": "def get_zxing_launch_button(event_code: Optional[str]) -> A:\n    \"\"\"\n        Renders the button to launch the Zxing barcode scanner app\n\n        @param event_code: the current event code\n        @return: the Zxing launch button\n    \"\"\"\n\n    T = current.T\n\n    # URL template\n    template: str = \"zxing://scan/?ret=%s&SCAN_FORMATS=Code 128,UPC_A,EAN_13\"\n\n    # Query variables for return URL\n    scan_vars: Dict[str, str] = {\"label\": \"{CODE}\",\n                    \"scanner\": \"zxing\",\n                    \"event\": \"{EVENT}\",\n                    }\n\n    # Return URL template\n    tmp: str = URL(args = [\"register\"],\n                vars = scan_vars,\n                host = True,\n                )\n    tmp: str = str(tmp).replace(\"&\", \"%26\")\n\n    # Current return URL\n    if event_code:\n        # must double-escape ampersands:\n        scan_vars[\"event\"] = event_code.replace(\"&\", \"%2526\")\n    ret: str = URL(args = [\"register\"],\n                vars = scan_vars,\n                host = True,\n                )\n    ret = str(ret).replace(\"&\", \"%26\")\n\n    # Construct button\n    return A(T(\"Scan with Zxing\"),\n                _href = template % ret,\n                _class = \"tiny primary button zxing-button\",\n                data = {\"tmp\": template % tmp,\n                        },\n                )\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "3890dff869eba446cc1aac4cdbd8bd44df1af297"}
{"source_tokens": ["#NEWLINE#", "def insert(", "self", ",", "i", ",", "item", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Insert a component item at position i\\n\\n        @param i: the index position\\n        @param item: the component item\\n    '", "#NEWLINE#", "if", "(", "item", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "item", ".", "set_parent", "(", "self", ",", "i", "=", "i", ")", "#NEWLINE#", "#UNINDENT#", "return", "self"], "edges": [[1, 5, 7, "enum_FIELD"], [12, 13, 7, "enum_FIELD"], [15, 18, 7, "enum_FIELD"], [36, 37, 7, "enum_FIELD"], [18, 17, 7, "enum_FIELD"], [23, 29, 7, "enum_FIELD"], [29, 25, 7, "enum_FIELD"], [25, 24, 7, "enum_FIELD"], [30, 32, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [17, 6, 10, "enum_LAST_LEXICAL_USE"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 23, 9, "enum_NEXT_SYNTAX"], [24, 17, 10, "enum_LAST_LEXICAL_USE"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [28, 2, 10, "enum_LAST_LEXICAL_USE"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [32, 4, 10, "enum_LAST_LEXICAL_USE"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 36, 9, "enum_NEXT_SYNTAX"], [37, 28, 10, "enum_LAST_LEXICAL_USE"], [36, 37, 9, "enum_NEXT_SYNTAX"], [8, 1, 1, "enum_CFG_NEXT"], [5, 12, 1, "enum_CFG_NEXT"], [12, 18, 1, "enum_CFG_NEXT"], [18, 23, 1, "enum_CFG_NEXT"], [18, 36, 1, "enum_CFG_NEXT"], [23, 36, 1, "enum_CFG_NEXT"], [17, 6, 3, "enum_LAST_WRITE"], [24, 17, 2, "enum_LAST_READ"], [24, 6, 3, "enum_LAST_WRITE"], [28, 2, 3, "enum_LAST_WRITE"], [32, 4, 3, "enum_LAST_WRITE"], [37, 28, 2, "enum_LAST_READ"], [37, 2, 3, "enum_LAST_WRITE"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "sahana", "repo": "eden", "path": "modules/s3/s3navigation.py", "id": 45503, "has_bug": false, "code_full": "from typing import Any, Optional\n\n\nclass Component:\n    def set_parent(self, parent: Any, i: int):\n        pass\n\n\nclass Class:\n    def insert(self, i: int, item: Optional[Component]=None) -> \"Class\":\n        \"\"\"\n            Insert a component item at position i\n\n            @param i: the index position\n            @param item: the component item\n        \"\"\"\n\n        if item is not None:\n            item.set_parent(self, i=i)\n        return self\n", "code": "def insert(self, i: int, item: Optional[Component]=None) -> \"Class\":\n    \"\"\"\n        Insert a component item at position i\n\n        @param i: the index position\n        @param item: the component item\n    \"\"\"\n\n    if item is not None:\n        item.set_parent(self, i=i)\n    return self\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "3890dff869eba446cc1aac4cdbd8bd44df1af297"}
{"source_tokens": ["#NEWLINE#", "def slice(", "f", ",", "x", ",", "m", ",", "n", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "'Take a continuous subsequence of terms of ``f``. '", "#NEWLINE#", "if", "(", "n", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "(", "j", ",", "m", ",", "n", ")", "=", "(", "0", ",", "x", ",", "m", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "j", "=", "f", ".", "_gen_to_level", "(", "x", ")", "#NEWLINE#", "#UNINDENT#", "(", "m", ",", "n", ")", "=", "(", "int", "(", "m", ")", ",", "int", "(", "n", ")", ")", "#NEWLINE#", "if", "hasattr", "(", "f", ".", "rep", ",", "'slice'", ")", ":", "#NEWLINE#", "#INDENT#", "result", "=", "f", ".", "rep", ".", "slice", "(", "m", ",", "n", ",", "j", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "raise", "OperationNotSupported", "(", "f", ",", "'slice'", ")", "#NEWLINE#", "#UNINDENT#", "return", "f", ".", "per", "(", "result", ")"], "edges": [[1, 5, 7, "enum_FIELD"], [14, 15, 7, "enum_FIELD"], [23, 20, 7, "enum_FIELD"], [56, 68, 7, "enum_FIELD"], [84, 81, 7, "enum_FIELD"], [116, 120, 7, "enum_FIELD"], [20, 19, 7, "enum_FIELD"], [25, 36, 7, "enum_FIELD"], [46, 52, 7, "enum_FIELD"], [81, 76, 7, "enum_FIELD"], [86, 96, 7, "enum_FIELD"], [107, 111, 7, "enum_FIELD"], [120, 118, 7, "enum_FIELD"], [52, 50, 7, "enum_FIELD"], [65, 64, 7, "enum_FIELD"], [70, 69, 7, "enum_FIELD"], [79, 78, 7, "enum_FIELD"], [96, 92, 7, "enum_FIELD"], [111, 108, 7, "enum_FIELD"], [118, 117, 7, "enum_FIELD"], [50, 49, 7, "enum_FIELD"], [92, 90, 7, "enum_FIELD"], [90, 89, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [19, 8, 10, "enum_LAST_LEXICAL_USE"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [29, 6, 10, "enum_LAST_LEXICAL_USE"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [31, 19, 10, "enum_LAST_LEXICAL_USE"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [37, 4, 10, "enum_LAST_LEXICAL_USE"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [39, 29, 10, "enum_LAST_LEXICAL_USE"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 46, 9, "enum_NEXT_SYNTAX"], [47, 27, 10, "enum_LAST_LEXICAL_USE"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [49, 2, 10, "enum_LAST_LEXICAL_USE"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [53, 37, 10, "enum_LAST_LEXICAL_USE"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [58, 39, 10, "enum_LAST_LEXICAL_USE"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [60, 31, 10, "enum_LAST_LEXICAL_USE"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [66, 58, 10, "enum_LAST_LEXICAL_USE"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [69, 64, 10, "enum_LAST_LEXICAL_USE"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [71, 60, 10, "enum_LAST_LEXICAL_USE"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [78, 49, 10, "enum_LAST_LEXICAL_USE"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [89, 78, 10, "enum_LAST_LEXICAL_USE"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [95, 66, 10, "enum_LAST_LEXICAL_USE"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [97, 71, 10, "enum_LAST_LEXICAL_USE"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [99, 47, 10, "enum_LAST_LEXICAL_USE"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [110, 89, 10, "enum_LAST_LEXICAL_USE"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 116, 9, "enum_NEXT_SYNTAX"], [117, 110, 10, "enum_LAST_LEXICAL_USE"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [121, 87, 10, "enum_LAST_LEXICAL_USE"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [10, 1, 1, "enum_CFG_NEXT"], [5, 14, 1, "enum_CFG_NEXT"], [14, 20, 1, "enum_CFG_NEXT"], [20, 25, 1, "enum_CFG_NEXT"], [20, 46, 1, "enum_CFG_NEXT"], [25, 56, 1, "enum_CFG_NEXT"], [46, 56, 1, "enum_CFG_NEXT"], [56, 81, 1, "enum_CFG_NEXT"], [81, 107, 1, "enum_CFG_NEXT"], [81, 86, 1, "enum_CFG_NEXT"], [86, 116, 1, "enum_CFG_NEXT"], [19, 8, 3, "enum_LAST_WRITE"], [37, 4, 3, "enum_LAST_WRITE"], [39, 6, 3, "enum_LAST_WRITE"], [29, 39, 2, "enum_LAST_READ"], [29, 6, 3, "enum_LAST_WRITE"], [31, 19, 2, "enum_LAST_READ"], [31, 8, 3, "enum_LAST_WRITE"], [49, 2, 3, "enum_LAST_WRITE"], [53, 4, 3, "enum_LAST_WRITE"], [66, 39, 2, "enum_LAST_READ"], [66, 6, 3, "enum_LAST_WRITE"], [66, 29, 3, "enum_LAST_WRITE"], [69, 64, 2, "enum_LAST_READ"], [71, 19, 2, "enum_LAST_READ"], [71, 31, 3, "enum_LAST_WRITE"], [71, 8, 3, "enum_LAST_WRITE"], [58, 66, 2, "enum_LAST_READ"], [58, 6, 3, "enum_LAST_WRITE"], [58, 29, 3, "enum_LAST_WRITE"], [60, 71, 2, "enum_LAST_READ"], [60, 31, 3, "enum_LAST_WRITE"], [60, 8, 3, "enum_LAST_WRITE"], [78, 49, 2, "enum_LAST_READ"], [78, 2, 3, "enum_LAST_WRITE"], [89, 78, 2, "enum_LAST_READ"], [89, 2, 3, "enum_LAST_WRITE"], [95, 66, 2, "enum_LAST_READ"], [95, 58, 3, "enum_LAST_WRITE"], [97, 71, 2, "enum_LAST_READ"], [97, 60, 3, "enum_LAST_WRITE"], [99, 27, 3, "enum_LAST_WRITE"], [99, 47, 3, "enum_LAST_WRITE"], [110, 78, 2, "enum_LAST_READ"], [110, 2, 3, "enum_LAST_WRITE"], [117, 89, 2, "enum_LAST_READ"], [117, 2, 3, "enum_LAST_WRITE"], [121, 87, 3, "enum_LAST_WRITE"], [59, 64, 4, "enum_COMPUTED_FROM"], [59, 66, 4, "enum_COMPUTED_FROM"], [59, 69, 4, "enum_COMPUTED_FROM"], [59, 71, 4, "enum_COMPUTED_FROM"], [28, 37, 4, "enum_COMPUTED_FROM"], [28, 39, 4, "enum_COMPUTED_FROM"], [47, 53, 4, "enum_COMPUTED_FROM"], [47, 49, 4, "enum_COMPUTED_FROM"], [87, 95, 4, "enum_COMPUTED_FROM"], [87, 97, 4, "enum_COMPUTED_FROM"], [87, 99, 4, "enum_COMPUTED_FROM"], [87, 89, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "sympy", "repo": "sympy", "path": "sympy/polys/polytools.py", "id": 57094, "has_bug": false, "code_full": "from typing import Any, Optional, Union\n\n\nclass OperationNotSupported(Exception):\n    def __init__(self, f: Any, operation: str):\n        pass\n\n\nclass Function:\n    rep: Any\n\n    def _gen_to_level(self, x: Any) -> int:\n        return 0\n    \n    def per(self, result: Any) -> Any:\n        pass\n\n\ndef slice(f: Function, x: Any, m: Union[int, Any], n: Optional[int]=None) -> Any:\n    \"\"\"Take a continuous subsequence of terms of ``f``. \"\"\"\n    j: int\n    if n is None:\n        j, m, n = 0, x, m\n    else:\n        j = f._gen_to_level(x)\n\n    m, n = int(m), int(n)\n\n    if hasattr(f.rep, 'slice'):\n        result = f.rep.slice(m, n, j)\n    else:  # pragma: no cover\n        raise OperationNotSupported(f, 'slice')\n\n    return f.per(result)\n", "code": "def slice(f: Function, x: Any, m: Union[int, Any], n: Optional[int]=None) -> Any:\n    \"\"\"Take a continuous subsequence of terms of ``f``. \"\"\"\n    j: int\n    if n is None:\n        j, m, n = 0, x, m\n    else:\n        j = f._gen_to_level(x)\n\n    m, n = int(m), int(n)\n\n    if hasattr(f.rep, 'slice'):\n        result = f.rep.slice(m, n, j)\n    else:  # pragma: no cover\n        raise OperationNotSupported(f, 'slice')\n\n    return f.per(result)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "25ea11a953ec1a83e73b58d43a1d5f4026e006bc"}
{"source_tokens": ["#NEWLINE#", "def assert_data(", "connection", ")", ":", "#NEWLINE#", "#INDENT#", "cursor", "=", "connection", ".", "cursor", "(", ")", "#NEWLINE#", "cursor", ".", "execute", "(", "'SELECT * FROM testtable;'", ")", "#NEWLINE#", "fetched_data", "=", "cursor", ".", "fetchone", "(", ")", "[", "0", "]", "#NEWLINE#", "test_case", ".", "assertEqual", "(", "fetched_data", ",", "123", ")"], "edges": [[6, 12, 7, "enum_FIELD"], [14, 18, 7, "enum_FIELD"], [21, 29, 7, "enum_FIELD"], [32, 38, 7, "enum_FIELD"], [12, 10, 7, "enum_FIELD"], [18, 16, 7, "enum_FIELD"], [29, 27, 7, "enum_FIELD"], [29, 30, 7, "enum_FIELD"], [38, 34, 7, "enum_FIELD"], [10, 9, 7, "enum_FIELD"], [16, 15, 7, "enum_FIELD"], [27, 25, 7, "enum_FIELD"], [34, 33, 7, "enum_FIELD"], [25, 24, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [9, 2, 10, "enum_LAST_LEXICAL_USE"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [15, 7, 10, "enum_LAST_LEXICAL_USE"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [24, 15, 10, "enum_LAST_LEXICAL_USE"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [37, 22, 10, "enum_LAST_LEXICAL_USE"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [6, 14, 1, "enum_CFG_NEXT"], [14, 21, 1, "enum_CFG_NEXT"], [21, 32, 1, "enum_CFG_NEXT"], [9, 2, 3, "enum_LAST_WRITE"], [15, 7, 3, "enum_LAST_WRITE"], [24, 15, 2, "enum_LAST_READ"], [24, 7, 3, "enum_LAST_WRITE"], [37, 22, 3, "enum_LAST_WRITE"], [7, 9, 4, "enum_COMPUTED_FROM"], [22, 24, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "ClusterHQ", "repo": "flocker", "path": "flocker/acceptance/integration/test_postgres.py", "id": 3543, "has_bug": false, "code_full": "import sqlite3\nfrom typing import Any\n\n\nclass TestCase:\n    def assertEqual(self, a: Any, b: Any):\n        pass\n\n\ntest_case = TestCase()\n\n\ndef assert_data(connection: sqlite3.Connection):\n    cursor: sqlite3.Cursor=connection.cursor()\n    cursor.execute('SELECT * FROM testtable;')\n    fetched_data: int=cursor.fetchone()[0]\n    test_case.assertEqual(fetched_data,123)\n", "code": "def assert_data(connection: sqlite3.Connection):\n    cursor: sqlite3.Cursor=connection.cursor()\n    cursor.execute('SELECT * FROM testtable;')\n    fetched_data: int=cursor.fetchone()[0]\n    test_case.assertEqual(fetched_data,123)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "eaa586248986d7cd681c99c948546c2b507e44de"}
{"source_tokens": ["#NEWLINE#", "def test_cephx_key_generator(", "self", ",", "m_time", ",", "m_urandom", ")", ":", "#NEWLINE#", "#INDENT#", "coded_key", "=", "AttributesGenerator", ".", "cephx_key", "(", ")", "#NEWLINE#", "uncoded_key", "=", "base64", ".", "b64decode", "(", "coded_key", ")", "#NEWLINE#", "package", "=", "uncoded_key", "[", ":", "(", "-", "16", ")", "]", "#NEWLINE#", "key", "=", "uncoded_key", "[", "(", "-", "16", ")", ":", "]", "#NEWLINE#", "(", "key_type", ",", "sec", ",", "usec", ",", "length", ")", "=", "struct", ".", "unpack", "(", "'<hiih'", ",", "package", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "key", ",", "(", "'f'", "*", "16", ")", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "key_type", ",", "1", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "sec", ",", "1437172408", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "usec", ",", "0", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "length", ",", "16", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [10, 16, 7, "enum_FIELD"], [18, 24, 7, "enum_FIELD"], [27, 31, 7, "enum_FIELD"], [38, 42, 7, "enum_FIELD"], [49, 65, 7, "enum_FIELD"], [68, 74, 7, "enum_FIELD"], [81, 87, 7, "enum_FIELD"], [90, 96, 7, "enum_FIELD"], [99, 105, 7, "enum_FIELD"], [108, 114, 7, "enum_FIELD"], [16, 14, 7, "enum_FIELD"], [24, 22, 7, "enum_FIELD"], [31, 30, 7, "enum_FIELD"], [31, 32, 7, "enum_FIELD"], [42, 41, 7, "enum_FIELD"], [42, 47, 7, "enum_FIELD"], [65, 61, 7, "enum_FIELD"], [74, 70, 7, "enum_FIELD"], [87, 83, 7, "enum_FIELD"], [96, 92, 7, "enum_FIELD"], [105, 101, 7, "enum_FIELD"], [114, 110, 7, "enum_FIELD"], [14, 13, 7, "enum_FIELD"], [22, 21, 7, "enum_FIELD"], [32, 34, 7, "enum_FIELD"], [47, 44, 7, "enum_FIELD"], [61, 60, 7, "enum_FIELD"], [70, 69, 7, "enum_FIELD"], [77, 76, 7, "enum_FIELD"], [77, 78, 7, "enum_FIELD"], [83, 82, 7, "enum_FIELD"], [92, 91, 7, "enum_FIELD"], [101, 100, 7, "enum_FIELD"], [110, 109, 7, "enum_FIELD"], [34, 35, 7, "enum_FIELD"], [44, 45, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [25, 11, 10, "enum_LAST_LEXICAL_USE"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [30, 19, 10, "enum_LAST_LEXICAL_USE"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [41, 30, 10, "enum_LAST_LEXICAL_USE"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [66, 28, 10, "enum_LAST_LEXICAL_USE"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [69, 2, 10, "enum_LAST_LEXICAL_USE"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [73, 39, 10, "enum_LAST_LEXICAL_USE"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [82, 69, 10, "enum_LAST_LEXICAL_USE"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [86, 51, 10, "enum_LAST_LEXICAL_USE"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [91, 82, 10, "enum_LAST_LEXICAL_USE"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [95, 53, 10, "enum_LAST_LEXICAL_USE"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [100, 91, 10, "enum_LAST_LEXICAL_USE"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [104, 55, 10, "enum_LAST_LEXICAL_USE"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [109, 100, 10, "enum_LAST_LEXICAL_USE"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [113, 57, 10, "enum_LAST_LEXICAL_USE"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [3, 10, 1, "enum_CFG_NEXT"], [10, 18, 1, "enum_CFG_NEXT"], [18, 27, 1, "enum_CFG_NEXT"], [27, 38, 1, "enum_CFG_NEXT"], [38, 49, 1, "enum_CFG_NEXT"], [49, 68, 1, "enum_CFG_NEXT"], [68, 81, 1, "enum_CFG_NEXT"], [81, 90, 1, "enum_CFG_NEXT"], [90, 99, 1, "enum_CFG_NEXT"], [99, 108, 1, "enum_CFG_NEXT"], [25, 11, 3, "enum_LAST_WRITE"], [30, 19, 3, "enum_LAST_WRITE"], [41, 30, 2, "enum_LAST_READ"], [41, 19, 3, "enum_LAST_WRITE"], [66, 28, 3, "enum_LAST_WRITE"], [69, 2, 3, "enum_LAST_WRITE"], [73, 39, 3, "enum_LAST_WRITE"], [82, 69, 2, "enum_LAST_READ"], [82, 2, 3, "enum_LAST_WRITE"], [86, 51, 3, "enum_LAST_WRITE"], [91, 82, 2, "enum_LAST_READ"], [91, 2, 3, "enum_LAST_WRITE"], [95, 53, 3, "enum_LAST_WRITE"], [100, 91, 2, "enum_LAST_READ"], [100, 2, 3, "enum_LAST_WRITE"], [104, 55, 3, "enum_LAST_WRITE"], [109, 100, 2, "enum_LAST_READ"], [109, 2, 3, "enum_LAST_WRITE"], [113, 57, 3, "enum_LAST_WRITE"], [11, 13, 4, "enum_COMPUTED_FROM"], [19, 25, 4, "enum_COMPUTED_FROM"], [19, 21, 4, "enum_COMPUTED_FROM"], [28, 30, 4, "enum_COMPUTED_FROM"], [39, 41, 4, "enum_COMPUTED_FROM"], [54, 66, 4, "enum_COMPUTED_FROM"], [54, 60, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "openstack", "repo": "fuel-web", "path": "nailgun/nailgun/test/unit/test_attributes_generators.py", "id": 35022, "has_bug": false, "code_full": "import base64\nimport struct\nimport unittest\nfrom typing import Any\n\n\nclass AttributesGenerator:\n    @staticmethod\n    def cephx_key() -> str:\n        return \"\"\n\n\nclass TestAttributesGenerators(unittest.TestCase):\n    def test_cephx_key_generator(self, m_time: Any, m_urandom: Any):\n        coded_key: str = AttributesGenerator.cephx_key()\n        uncoded_key: bytes = base64.b64decode(coded_key)\n        package: bytes = uncoded_key[:-16]\n        key: bytes = uncoded_key[-16:]\n\n        key_type: int\n        sec: int\n        usec: int\n        length: int\n        key_type, sec, usec, length = struct.unpack('<hiih', package)\n\n        self.assertEqual(key, 'f' * 16)\n        self.assertEqual(key_type, 1)\n        self.assertEqual(sec, 1437172408)\n        self.assertEqual(usec, 0)\n        self.assertEqual(length, 16)\n", "code": "def test_cephx_key_generator(self, m_time: Any, m_urandom: Any):\n    coded_key: str = AttributesGenerator.cephx_key()\n    uncoded_key: bytes = base64.b64decode(coded_key)\n    package: bytes = uncoded_key[:-16]\n    key: bytes = uncoded_key[-16:]\n\n    key_type: int\n    sec: int\n    usec: int\n    length: int\n    key_type, sec, usec, length = struct.unpack('<hiih', package)\n\n    self.assertEqual(key, 'f' * 16)\n    self.assertEqual(key_type, 1)\n    self.assertEqual(sec, 1437172408)\n    self.assertEqual(usec, 0)\n    self.assertEqual(length, 16)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "f36a443837c47dea92296a8a687848ce0e43fff9"}
{"source_tokens": ["#NEWLINE#", "def get_data_files(", ")", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "subprocess", ".", "call", "(", "[", "'rst2man'", ",", "'nipapd.man.rst'", ",", "'nipapd.8'", "]", ")", "#NEWLINE#", "subprocess", ".", "call", "(", "[", "'rst2man'", ",", "'nipap-passwd.man.rst'", ",", "'nipap-passwd.1'", "]", ")", "#NEWLINE#", "#UNINDENT#", "except", "OSError", "as", "exc", ":", "#NEWLINE#", "#INDENT#", "(", "(", "print", ">>", "sys", ".", "stderr", ")", ",", "'rst2man failed to run:'", ",", "str", "(", "exc", ")", ")", "#NEWLINE#", "sys", ".", "exit", "(", "1", ")", "#NEWLINE#", "#UNINDENT#", "files", "=", "[", "(", "'/etc/nipap/'", ",", "[", "'nipap.conf.dist'", "]", ")", ",", "(", "'/usr/sbin/'", ",", "[", "'nipapd'", ",", "'nipap-passwd'", "]", ")", ",", "(", "'/usr/share/nipap/sql/'", ",", "[", "'sql/upgrade-1-2.plsql'", ",", "'sql/upgrade-2-3.plsql'", ",", "'sql/upgrade-3-4.plsql'", ",", "'sql/upgrade-4-5.plsql'", ",", "'sql/upgrade-5-6.plsql'", ",", "'sql/functions.plsql'", ",", "'sql/triggers.plsql'", ",", "'sql/ip_net.plsql'", "]", ")", ",", "(", "'/usr/share/man/man8/'", ",", "[", "'nipapd.8'", "]", ")", ",", "(", "'/usr/share/man/man1/'", ",", "[", "'nipap-passwd.1'", "]", ")", "]", "#NEWLINE#", "return", "files"], "edges": [[68, 89, 7, "enum_FIELD"], [129, 130, 7, "enum_FIELD"], [9, 13, 7, "enum_FIELD"], [22, 26, 7, "enum_FIELD"], [39, 38, 7, "enum_FIELD"], [39, 40, 7, "enum_FIELD"], [13, 11, 7, "enum_FIELD"], [26, 24, 7, "enum_FIELD"], [43, 52, 7, "enum_FIELD"], [60, 64, 7, "enum_FIELD"], [11, 10, 7, "enum_FIELD"], [24, 23, 7, "enum_FIELD"], [64, 62, 7, "enum_FIELD"], [47, 46, 7, "enum_FIELD"], [47, 49, 7, "enum_FIELD"], [56, 55, 7, "enum_FIELD"], [62, 61, 7, "enum_FIELD"], [49, 48, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [23, 10, 10, "enum_LAST_LEXICAL_USE"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [57, 40, 10, "enum_LAST_LEXICAL_USE"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [61, 48, 10, "enum_LAST_LEXICAL_USE"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 129, 9, "enum_NEXT_SYNTAX"], [130, 69, 10, "enum_LAST_LEXICAL_USE"], [129, 130, 9, "enum_NEXT_SYNTAX"], [9, 22, 1, "enum_CFG_NEXT"], [22, 38, 1, "enum_CFG_NEXT"], [22, 68, 1, "enum_CFG_NEXT"], [38, 40, 1, "enum_CFG_NEXT"], [40, 43, 1, "enum_CFG_NEXT"], [43, 60, 1, "enum_CFG_NEXT"], [60, 68, 1, "enum_CFG_NEXT"], [68, 129, 1, "enum_CFG_NEXT"], [23, 10, 2, "enum_LAST_READ"], [57, 40, 3, "enum_LAST_WRITE"], [61, 48, 2, "enum_LAST_READ"], [130, 69, 3, "enum_LAST_WRITE"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "SpriteLink", "repo": "NIPAP", "path": "nipap/setup.py", "id": 7917, "has_bug": false, "code_full": "import subprocess\nimport sys\nfrom typing import List, Tuple\n\n\ndef get_data_files() -> List[Tuple[str, List[str]]]:\n    # generate man pages using rst2man\n    try:\n        subprocess.call([\"rst2man\", \"nipapd.man.rst\", \"nipapd.8\"])\n        subprocess.call([\"rst2man\", \"nipap-passwd.man.rst\", \"nipap-passwd.1\"])\n    except OSError as exc:\n        print(\"rst2man failed to run:\", str(exc), file=sys.stderr)\n        sys.exit(1)\n\n    files: List[Tuple[str, List[str]]] = [\n            ('/etc/nipap/', ['nipap.conf.dist']),\n            ('/usr/sbin/', ['nipapd', 'nipap-passwd']),\n            ('/usr/share/nipap/sql/', [\n                'sql/upgrade-1-2.plsql',\n                'sql/upgrade-2-3.plsql',\n                'sql/upgrade-3-4.plsql',\n                'sql/upgrade-4-5.plsql',\n                'sql/upgrade-5-6.plsql',\n                'sql/functions.plsql',\n                'sql/triggers.plsql',\n                'sql/ip_net.plsql'\n                ]),\n            ('/usr/share/man/man8/', ['nipapd.8']),\n            ('/usr/share/man/man1/', ['nipap-passwd.1'])\n        ]\n\n    return files\n", "code": "def get_data_files() -> List[Tuple[str, List[str]]]:\n    # generate man pages using rst2man\n    try:\n        subprocess.call([\"rst2man\", \"nipapd.man.rst\", \"nipapd.8\"])\n        subprocess.call([\"rst2man\", \"nipap-passwd.man.rst\", \"nipap-passwd.1\"])\n    except OSError as exc:\n        print(\"rst2man failed to run:\", str(exc), file=sys.stderr)\n        sys.exit(1)\n\n    files: List[Tuple[str, List[str]]] = [\n            ('/etc/nipap/', ['nipap.conf.dist']),\n            ('/usr/sbin/', ['nipapd', 'nipap-passwd']),\n            ('/usr/share/nipap/sql/', [\n                'sql/upgrade-1-2.plsql',\n                'sql/upgrade-2-3.plsql',\n                'sql/upgrade-3-4.plsql',\n                'sql/upgrade-4-5.plsql',\n                'sql/upgrade-5-6.plsql',\n                'sql/functions.plsql',\n                'sql/triggers.plsql',\n                'sql/ip_net.plsql'\n                ]),\n            ('/usr/share/man/man8/', ['nipapd.8']),\n            ('/usr/share/man/man1/', ['nipap-passwd.1'])\n        ]\n\n    return files\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "fb409c3fb1564f31330dadfba3e90c786322d49b"}
{"source_tokens": ["#NEWLINE#", "def EventRemove(", "self", ",", "socketId", ",", "PositionerName", ",", "EventName", ",", "EventParameter", ")", ":", "#NEWLINE#", "#INDENT#", "command", "=", "(", "(", "(", "(", "(", "(", "'EventRemove('", "+", "PositionerName", ")", "+", "','", ")", "+", "EventName", ")", "+", "','", ")", "+", "EventParameter", ")", "+", "')'", ")", "#NEWLINE#", "return", "self", ".", "Send", "(", "socketId", ",", "command", ")"], "edges": [[1, 5, 7, "enum_FIELD"], [14, 39, 7, "enum_FIELD"], [43, 49, 7, "enum_FIELD"], [39, 36, 7, "enum_FIELD"], [39, 40, 7, "enum_FIELD"], [49, 45, 7, "enum_FIELD"], [36, 33, 7, "enum_FIELD"], [36, 37, 7, "enum_FIELD"], [45, 44, 7, "enum_FIELD"], [33, 30, 7, "enum_FIELD"], [33, 34, 7, "enum_FIELD"], [30, 27, 7, "enum_FIELD"], [30, 31, 7, "enum_FIELD"], [27, 24, 7, "enum_FIELD"], [27, 28, 7, "enum_FIELD"], [24, 23, 7, "enum_FIELD"], [24, 25, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [25, 6, 10, "enum_LAST_LEXICAL_USE"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [31, 8, 10, "enum_LAST_LEXICAL_USE"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [37, 10, 10, "enum_LAST_LEXICAL_USE"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 43, 9, "enum_NEXT_SYNTAX"], [44, 2, 10, "enum_LAST_LEXICAL_USE"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [48, 4, 10, "enum_LAST_LEXICAL_USE"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [50, 15, 10, "enum_LAST_LEXICAL_USE"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [5, 14, 1, "enum_CFG_NEXT"], [14, 43, 1, "enum_CFG_NEXT"], [25, 6, 3, "enum_LAST_WRITE"], [31, 8, 3, "enum_LAST_WRITE"], [37, 10, 3, "enum_LAST_WRITE"], [44, 2, 3, "enum_LAST_WRITE"], [48, 4, 3, "enum_LAST_WRITE"], [50, 15, 3, "enum_LAST_WRITE"], [15, 37, 4, "enum_COMPUTED_FROM"], [15, 31, 4, "enum_COMPUTED_FROM"], [15, 25, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "xraypy", "repo": "xraylarch", "path": "plugins/epics/XPS_C8_drivers.py", "id": 60474, "has_bug": false, "code_full": "\nfrom typing import Any\n\n\nclass XPS:\n    def Send(self, socketId: int, command: str) -> Any:\n        pass\n\n    def EventRemove (self, socketId: int, PositionerName: str, EventName: str, EventParameter: str) -> Any:\n        command: str = 'EventRemove(' + PositionerName + ',' + EventName + ',' + EventParameter + ')'\n        return self.Send(socketId, command)\n", "code": "def EventRemove (self, socketId: int, PositionerName: str, EventName: str, EventParameter: str) -> Any:\n    command: str = 'EventRemove(' + PositionerName + ',' + EventName + ',' + EventParameter + ')'\n    return self.Send(socketId, command)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "6e787b76a379099dfaf50e5fe8ad1c18059d5b00"}
{"source_tokens": ["#NEWLINE#", "def __init__(", "self", ",", "decay", "=", "0.9", ",", "max_scaling", "=", "100000.0", ")", ":", "#NEWLINE#", "#INDENT#", "assert", "(", "0.0", "<=", "decay", "<", "1.0", ")", "#NEWLINE#", "assert", "(", "max_scaling", ">", "0", ")", "#NEWLINE#", "self", ".", "decay", "=", "sharedX", "(", "decay", ",", "'decay'", ")", "#NEWLINE#", "self", ".", "epsilon", "=", "(", "1.0", "/", "max_scaling", ")", "#NEWLINE#", "self", ".", "mean_square_grads", "=", "OrderedDict", "(", ")"], "edges": [[1, 5, 7, "enum_FIELD"], [15, 18, 7, "enum_FIELD"], [24, 27, 7, "enum_FIELD"], [30, 38, 7, "enum_FIELD"], [41, 48, 7, "enum_FIELD"], [51, 57, 7, "enum_FIELD"], [18, 17, 7, "enum_FIELD"], [27, 26, 7, "enum_FIELD"], [32, 31, 7, "enum_FIELD"], [38, 35, 7, "enum_FIELD"], [43, 42, 7, "enum_FIELD"], [48, 47, 7, "enum_FIELD"], [48, 49, 7, "enum_FIELD"], [53, 52, 7, "enum_FIELD"], [57, 56, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [19, 4, 10, "enum_LAST_LEXICAL_USE"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [26, 8, 10, "enum_LAST_LEXICAL_USE"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [31, 2, 10, "enum_LAST_LEXICAL_USE"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [37, 19, 10, "enum_LAST_LEXICAL_USE"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [42, 31, 10, "enum_LAST_LEXICAL_USE"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [49, 26, 10, "enum_LAST_LEXICAL_USE"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [52, 42, 10, "enum_LAST_LEXICAL_USE"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [6, 10, 1, "enum_CFG_NEXT"], [10, 1, 1, "enum_CFG_NEXT"], [5, 15, 1, "enum_CFG_NEXT"], [15, 24, 1, "enum_CFG_NEXT"], [24, 30, 1, "enum_CFG_NEXT"], [30, 41, 1, "enum_CFG_NEXT"], [41, 51, 1, "enum_CFG_NEXT"], [19, 4, 3, "enum_LAST_WRITE"], [26, 8, 3, "enum_LAST_WRITE"], [37, 19, 2, "enum_LAST_READ"], [37, 4, 3, "enum_LAST_WRITE"], [31, 2, 3, "enum_LAST_WRITE"], [49, 26, 2, "enum_LAST_READ"], [49, 8, 3, "enum_LAST_WRITE"], [42, 31, 2, "enum_LAST_READ"], [42, 2, 3, "enum_LAST_WRITE"], [52, 42, 2, "enum_LAST_READ"], [52, 2, 3, "enum_LAST_WRITE"], [32, 35, 4, "enum_COMPUTED_FROM"], [32, 37, 4, "enum_COMPUTED_FROM"], [43, 49, 4, "enum_COMPUTED_FROM"], [53, 56, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "lisa-lab", "repo": "pylearn2", "path": "pylearn2/training_algorithms/learning_rule.py", "id": 24912, "has_bug": false, "code_full": "from typing import OrderedDict\n\n\ndef sharedX(value: float, name: str) -> float:\n    return 0\n\n\nclass RMSProp:\n    decay: float\n    epsilon: float\n    mean_square_grads: OrderedDict\n\n    def __init__(self, decay: float=0.9, max_scaling: float=1e5):\n        assert 0. <= decay < 1.\n        assert max_scaling > 0\n        self.decay = sharedX(decay, 'decay')\n        self.epsilon = 1. / max_scaling\n        self.mean_square_grads = OrderedDict()\n", "code": "def __init__(self, decay: float=0.9, max_scaling: float=1e5):\n    assert 0. <= decay < 1.\n    assert max_scaling > 0\n    self.decay = sharedX(decay, 'decay')\n    self.epsilon = 1. / max_scaling\n    self.mean_square_grads = OrderedDict()\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "104261becabb66f506a68d9f7190d42d8c4917f8"}
{"source_tokens": ["#NEWLINE#", "def script_obj_from_script(", "script", ")", ":", "#NEWLINE#", "#INDENT#", "for", "sc", "in", "SUBCLASSES", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "st", "=", "sc", ".", "from_script", "(", "script", ")", "#NEWLINE#", "return", "st", "#NEWLINE#", "#UNINDENT#", "except", "ValueError", ":", "#NEWLINE#", "#INDENT#", "pass", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "return", "None"], "edges": [[9, 8, 7, "enum_FIELD"], [9, 10, 7, "enum_FIELD"], [40, 41, 7, "enum_FIELD"], [17, 23, 7, "enum_FIELD"], [27, 28, 7, "enum_FIELD"], [31, 32, 7, "enum_FIELD"], [23, 21, 7, "enum_FIELD"], [21, 20, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [20, 8, 10, "enum_LAST_LEXICAL_USE"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [24, 2, 10, "enum_LAST_LEXICAL_USE"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 27, 9, "enum_NEXT_SYNTAX"], [28, 18, 10, "enum_LAST_LEXICAL_USE"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 36, 9, "enum_NEXT_SYNTAX"], [36, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [10, 8, 1, "enum_CFG_NEXT"], [8, 40, 1, "enum_CFG_NEXT"], [8, 17, 1, "enum_CFG_NEXT"], [17, 27, 1, "enum_CFG_NEXT"], [27, 32, 1, "enum_CFG_NEXT"], [32, 8, 1, "enum_CFG_NEXT"], [8, 20, 2, "enum_LAST_READ"], [8, 8, 3, "enum_LAST_WRITE"], [20, 20, 2, "enum_LAST_READ"], [20, 8, 3, "enum_LAST_WRITE"], [24, 24, 2, "enum_LAST_READ"], [24, 2, 3, "enum_LAST_WRITE"], [18, 28, 2, "enum_LAST_READ"], [18, 18, 3, "enum_LAST_WRITE"], [28, 28, 2, "enum_LAST_READ"], [28, 18, 3, "enum_LAST_WRITE"], [32, 32, 2, "enum_LAST_READ"], [18, 24, 4, "enum_COMPUTED_FROM"], [18, 20, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "richardkiss", "repo": "pycoin", "path": "pycoin/tx/pay_to/__init__.py", "id": 45177, "has_bug": false, "code_full": "from typing import Any, List, Type\n\nSUBCLASSES: List[Type] = []\n\n\ndef script_obj_from_script(script: Any) -> Any:\n    for sc in SUBCLASSES:\n        try:\n            st: Any = sc.from_script(script)\n            return st\n        except ValueError:\n            pass\n    return None\n", "code": "def script_obj_from_script(script: Any) -> Any:\n    for sc in SUBCLASSES:\n        try:\n            st: Any = sc.from_script(script)\n            return st\n        except ValueError:\n            pass\n    return None\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "fff2aaffecf5808d15d154546aaf97667e57456a"}
{"source_tokens": ["#NEWLINE#", "def test_ccode_loops_multiple_contractions(", ")", ":", "#NEWLINE#", "#INDENT#", "from", "sympy.tensor", "import", "IndexedBase", ",", "Idx", "#NEWLINE#", "from", "sympy", "import", "symbols", "#NEWLINE#", "(", "n", ",", "m", ",", "o", ",", "p", ")", "=", "symbols", "(", "'n m o p'", ",", "integer", "=", "True", ")", "#NEWLINE#", "a", "=", "IndexedBase", "(", "'a'", ")", "#NEWLINE#", "b", "=", "IndexedBase", "(", "'b'", ")", "#NEWLINE#", "y", "=", "IndexedBase", "(", "'y'", ")", "#NEWLINE#", "i", "=", "Idx", "(", "'i'", ",", "m", ")", "#NEWLINE#", "j", "=", "Idx", "(", "'j'", ",", "n", ")", "#NEWLINE#", "k", "=", "Idx", "(", "'k'", ",", "o", ")", "#NEWLINE#", "l", "=", "Idx", "(", "'l'", ",", "p", ")", "#NEWLINE#", "s", "=", "(", "(", "'for (int i=0; i<m; i++){\\n   y[i] = 0;\\n}\\nfor (int i=0; i<m; i++){\\n   for (int j=0; j<n; j++){\\n      for (int k=0; k<o; k++){\\n         for (int l=0; l<p; l++){\\n            y[i] = y[i] + b[%s]*a[%s];\\n'", "%", "(", "(", "(", "(", "(", "j", "*", "o", ")", "*", "p", ")", "+", "(", "k", "*", "p", ")", ")", "+", "l", ")", ",", "(", "(", "(", "(", "(", "(", "i", "*", "n", ")", "*", "o", ")", "*", "p", ")", "+", "(", "(", "j", "*", "o", ")", "*", "p", ")", ")", "+", "(", "k", "*", "p", ")", ")", "+", "l", ")", ")", ")", "+", "'         }\\n      }\\n   }\\n}'", ")", "#NEWLINE#", "c", "=", "ccode", "(", "(", "b", "[", "(", "j", ",", "k", ",", "l", ")", "]", "*", "a", "[", "(", "i", ",", "j", ",", "k", ",", "l", ")", "]", ")", ",", "assign_to", "=", "y", "[", "i", "]", ")", "#NEWLINE#", "assert", "(", "c", "==", "s", ")"], "edges": [[17, 31, 7, "enum_FIELD"], [36, 40, 7, "enum_FIELD"], [43, 47, 7, "enum_FIELD"], [50, 54, 7, "enum_FIELD"], [57, 63, 7, "enum_FIELD"], [66, 72, 7, "enum_FIELD"], [75, 81, 7, "enum_FIELD"], [84, 90, 7, "enum_FIELD"], [93, 162, 7, "enum_FIELD"], [165, 195, 7, "enum_FIELD"], [204, 207, 7, "enum_FIELD"], [31, 28, 7, "enum_FIELD"], [40, 39, 7, "enum_FIELD"], [47, 46, 7, "enum_FIELD"], [54, 53, 7, "enum_FIELD"], [63, 60, 7, "enum_FIELD"], [72, 69, 7, "enum_FIELD"], [81, 78, 7, "enum_FIELD"], [90, 87, 7, "enum_FIELD"], [162, 99, 7, "enum_FIELD"], [162, 163, 7, "enum_FIELD"], [195, 168, 7, "enum_FIELD"], [207, 206, 7, "enum_FIELD"], [32, 34, 7, "enum_FIELD"], [99, 98, 7, "enum_FIELD"], [99, 122, 7, "enum_FIELD"], [181, 172, 7, "enum_FIELD"], [181, 183, 7, "enum_FIELD"], [196, 199, 7, "enum_FIELD"], [172, 171, 7, "enum_FIELD"], [172, 175, 7, "enum_FIELD"], [183, 182, 7, "enum_FIELD"], [183, 188, 7, "enum_FIELD"], [199, 198, 7, "enum_FIELD"], [199, 200, 7, "enum_FIELD"], [119, 112, 7, "enum_FIELD"], [119, 120, 7, "enum_FIELD"], [157, 150, 7, "enum_FIELD"], [157, 158, 7, "enum_FIELD"], [112, 109, 7, "enum_FIELD"], [112, 115, 7, "enum_FIELD"], [150, 139, 7, "enum_FIELD"], [150, 153, 7, "enum_FIELD"], [109, 106, 7, "enum_FIELD"], [109, 110, 7, "enum_FIELD"], [115, 114, 7, "enum_FIELD"], [115, 116, 7, "enum_FIELD"], [139, 136, 7, "enum_FIELD"], [139, 146, 7, "enum_FIELD"], [153, 152, 7, "enum_FIELD"], [153, 154, 7, "enum_FIELD"], [106, 105, 7, "enum_FIELD"], [106, 107, 7, "enum_FIELD"], [136, 133, 7, "enum_FIELD"], [136, 137, 7, "enum_FIELD"], [146, 143, 7, "enum_FIELD"], [146, 147, 7, "enum_FIELD"], [133, 130, 7, "enum_FIELD"], [133, 134, 7, "enum_FIELD"], [143, 142, 7, "enum_FIELD"], [143, 144, 7, "enum_FIELD"], [130, 129, 7, "enum_FIELD"], [130, 131, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [46, 39, 10, "enum_LAST_LEXICAL_USE"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [53, 46, 10, "enum_LAST_LEXICAL_USE"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [64, 21, 10, "enum_LAST_LEXICAL_USE"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [69, 60, 10, "enum_LAST_LEXICAL_USE"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [73, 19, 10, "enum_LAST_LEXICAL_USE"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [78, 69, 10, "enum_LAST_LEXICAL_USE"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [82, 23, 10, "enum_LAST_LEXICAL_USE"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [87, 78, 10, "enum_LAST_LEXICAL_USE"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [91, 25, 10, "enum_LAST_LEXICAL_USE"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [105, 67, 10, "enum_LAST_LEXICAL_USE"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [107, 82, 10, "enum_LAST_LEXICAL_USE"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [110, 91, 10, "enum_LAST_LEXICAL_USE"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [114, 76, 10, "enum_LAST_LEXICAL_USE"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [116, 110, 10, "enum_LAST_LEXICAL_USE"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [120, 85, 10, "enum_LAST_LEXICAL_USE"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [129, 58, 10, "enum_LAST_LEXICAL_USE"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [131, 73, 10, "enum_LAST_LEXICAL_USE"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [134, 107, 10, "enum_LAST_LEXICAL_USE"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [137, 116, 10, "enum_LAST_LEXICAL_USE"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [142, 105, 10, "enum_LAST_LEXICAL_USE"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [144, 134, 10, "enum_LAST_LEXICAL_USE"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [147, 137, 10, "enum_LAST_LEXICAL_USE"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [152, 114, 10, "enum_LAST_LEXICAL_USE"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [154, 147, 10, "enum_LAST_LEXICAL_USE"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [158, 120, 10, "enum_LAST_LEXICAL_USE"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [171, 44, 10, "enum_LAST_LEXICAL_USE"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [174, 142, 10, "enum_LAST_LEXICAL_USE"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [176, 152, 10, "enum_LAST_LEXICAL_USE"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [178, 158, 10, "enum_LAST_LEXICAL_USE"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [182, 37, 10, "enum_LAST_LEXICAL_USE"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 184, 9, "enum_NEXT_SYNTAX"], [185, 129, 10, "enum_LAST_LEXICAL_USE"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [187, 174, 10, "enum_LAST_LEXICAL_USE"], [186, 187, 9, "enum_NEXT_SYNTAX"], [187, 188, 9, "enum_NEXT_SYNTAX"], [189, 176, 10, "enum_LAST_LEXICAL_USE"], [188, 189, 9, "enum_NEXT_SYNTAX"], [189, 190, 9, "enum_NEXT_SYNTAX"], [191, 178, 10, "enum_LAST_LEXICAL_USE"], [190, 191, 9, "enum_NEXT_SYNTAX"], [191, 192, 9, "enum_NEXT_SYNTAX"], [192, 193, 9, "enum_NEXT_SYNTAX"], [193, 194, 9, "enum_NEXT_SYNTAX"], [194, 195, 9, "enum_NEXT_SYNTAX"], [195, 196, 9, "enum_NEXT_SYNTAX"], [196, 197, 9, "enum_NEXT_SYNTAX"], [198, 51, 10, "enum_LAST_LEXICAL_USE"], [197, 198, 9, "enum_NEXT_SYNTAX"], [198, 199, 9, "enum_NEXT_SYNTAX"], [200, 185, 10, "enum_LAST_LEXICAL_USE"], [199, 200, 9, "enum_NEXT_SYNTAX"], [200, 201, 9, "enum_NEXT_SYNTAX"], [201, 202, 9, "enum_NEXT_SYNTAX"], [202, 204, 9, "enum_NEXT_SYNTAX"], [204, 205, 9, "enum_NEXT_SYNTAX"], [206, 166, 10, "enum_LAST_LEXICAL_USE"], [205, 206, 9, "enum_NEXT_SYNTAX"], [206, 207, 9, "enum_NEXT_SYNTAX"], [208, 94, 10, "enum_LAST_LEXICAL_USE"], [207, 208, 9, "enum_NEXT_SYNTAX"], [208, 209, 9, "enum_NEXT_SYNTAX"], [7, 14, 1, "enum_CFG_NEXT"], [14, 17, 1, "enum_CFG_NEXT"], [17, 36, 1, "enum_CFG_NEXT"], [36, 43, 1, "enum_CFG_NEXT"], [43, 50, 1, "enum_CFG_NEXT"], [50, 57, 1, "enum_CFG_NEXT"], [57, 66, 1, "enum_CFG_NEXT"], [66, 75, 1, "enum_CFG_NEXT"], [75, 84, 1, "enum_CFG_NEXT"], [84, 93, 1, "enum_CFG_NEXT"], [93, 165, 1, "enum_CFG_NEXT"], [165, 204, 1, "enum_CFG_NEXT"], [46, 39, 2, "enum_LAST_READ"], [53, 46, 2, "enum_LAST_READ"], [64, 21, 3, "enum_LAST_WRITE"], [69, 60, 2, "enum_LAST_READ"], [73, 19, 3, "enum_LAST_WRITE"], [78, 69, 2, "enum_LAST_READ"], [82, 23, 3, "enum_LAST_WRITE"], [87, 78, 2, "enum_LAST_READ"], [91, 25, 3, "enum_LAST_WRITE"], [105, 67, 3, "enum_LAST_WRITE"], [107, 82, 2, "enum_LAST_READ"], [107, 23, 3, "enum_LAST_WRITE"], [110, 91, 2, "enum_LAST_READ"], [110, 25, 3, "enum_LAST_WRITE"], [114, 76, 3, "enum_LAST_WRITE"], [116, 110, 2, "enum_LAST_READ"], [116, 25, 3, "enum_LAST_WRITE"], [120, 85, 3, "enum_LAST_WRITE"], [129, 58, 3, "enum_LAST_WRITE"], [131, 73, 2, "enum_LAST_READ"], [131, 19, 3, "enum_LAST_WRITE"], [134, 107, 2, "enum_LAST_READ"], [134, 23, 3, "enum_LAST_WRITE"], [137, 116, 2, "enum_LAST_READ"], [137, 25, 3, "enum_LAST_WRITE"], [142, 105, 2, "enum_LAST_READ"], [142, 67, 3, "enum_LAST_WRITE"], [144, 134, 2, "enum_LAST_READ"], [144, 23, 3, "enum_LAST_WRITE"], [147, 137, 2, "enum_LAST_READ"], [147, 25, 3, "enum_LAST_WRITE"], [152, 114, 2, "enum_LAST_READ"], [152, 76, 3, "enum_LAST_WRITE"], [154, 147, 2, "enum_LAST_READ"], [154, 25, 3, "enum_LAST_WRITE"], [158, 120, 2, "enum_LAST_READ"], [158, 85, 3, "enum_LAST_WRITE"], [171, 44, 3, "enum_LAST_WRITE"], [174, 142, 2, "enum_LAST_READ"], [174, 67, 3, "enum_LAST_WRITE"], [176, 152, 2, "enum_LAST_READ"], [176, 76, 3, "enum_LAST_WRITE"], [178, 158, 2, "enum_LAST_READ"], [178, 85, 3, "enum_LAST_WRITE"], [182, 37, 3, "enum_LAST_WRITE"], [185, 129, 2, "enum_LAST_READ"], [185, 58, 3, "enum_LAST_WRITE"], [187, 174, 2, "enum_LAST_READ"], [187, 67, 3, "enum_LAST_WRITE"], [189, 176, 2, "enum_LAST_READ"], [189, 76, 3, "enum_LAST_WRITE"], [191, 178, 2, "enum_LAST_READ"], [191, 85, 3, "enum_LAST_WRITE"], [198, 51, 3, "enum_LAST_WRITE"], [200, 185, 2, "enum_LAST_READ"], [200, 58, 3, "enum_LAST_WRITE"], [206, 166, 3, "enum_LAST_WRITE"], [208, 94, 3, "enum_LAST_WRITE"], [22, 28, 4, "enum_COMPUTED_FROM"], [37, 39, 4, "enum_COMPUTED_FROM"], [44, 46, 4, "enum_COMPUTED_FROM"], [51, 53, 4, "enum_COMPUTED_FROM"], [58, 60, 4, "enum_COMPUTED_FROM"], [58, 64, 4, "enum_COMPUTED_FROM"], [67, 69, 4, "enum_COMPUTED_FROM"], [67, 73, 4, "enum_COMPUTED_FROM"], [76, 78, 4, "enum_COMPUTED_FROM"], [76, 82, 4, "enum_COMPUTED_FROM"], [85, 87, 4, "enum_COMPUTED_FROM"], [85, 91, 4, "enum_COMPUTED_FROM"], [94, 120, 4, "enum_COMPUTED_FROM"], [94, 158, 4, "enum_COMPUTED_FROM"], [94, 110, 4, "enum_COMPUTED_FROM"], [94, 114, 4, "enum_COMPUTED_FROM"], [94, 116, 4, "enum_COMPUTED_FROM"], [94, 152, 4, "enum_COMPUTED_FROM"], [94, 154, 4, "enum_COMPUTED_FROM"], [94, 105, 4, "enum_COMPUTED_FROM"], [94, 107, 4, "enum_COMPUTED_FROM"], [94, 137, 4, "enum_COMPUTED_FROM"], [94, 147, 4, "enum_COMPUTED_FROM"], [94, 134, 4, "enum_COMPUTED_FROM"], [94, 142, 4, "enum_COMPUTED_FROM"], [94, 144, 4, "enum_COMPUTED_FROM"], [94, 129, 4, "enum_COMPUTED_FROM"], [94, 131, 4, "enum_COMPUTED_FROM"], [166, 168, 4, "enum_COMPUTED_FROM"], [166, 171, 4, "enum_COMPUTED_FROM"], [166, 182, 4, "enum_COMPUTED_FROM"], [166, 198, 4, "enum_COMPUTED_FROM"], [166, 200, 4, "enum_COMPUTED_FROM"], [166, 174, 4, "enum_COMPUTED_FROM"], [166, 176, 4, "enum_COMPUTED_FROM"], [166, 178, 4, "enum_COMPUTED_FROM"], [166, 185, 4, "enum_COMPUTED_FROM"], [166, 187, 4, "enum_COMPUTED_FROM"], [166, 189, 4, "enum_COMPUTED_FROM"], [166, 191, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "sympy", "repo": "sympy", "path": "sympy/printing/tests/test_ccode.py", "id": 57745, "has_bug": false, "code_full": "from typing import Any\n\nfrom sympy.printing.ccode import ccode\n\n\ndef test_ccode_loops_multiple_contractions():\n    from sympy import symbols\n    from sympy.tensor import Idx, IndexedBase\n    n: Any\n    m: Any\n    o: Any\n    p: Any\n    n, m, o, p = symbols('n m o p', integer=True)\n    a: IndexedBase = IndexedBase('a')\n    b: IndexedBase = IndexedBase('b')\n    y: IndexedBase = IndexedBase('y')\n    i: Idx = Idx('i', m)\n    j: Idx = Idx('j', n)\n    k: Idx = Idx('k', o)\n    l: Idx = Idx('l', p)\n\n    s: str = (\n        'for (int i=0; i<m; i++){\n'\n        '   y[i] = 0;\n'\n        '}\n'\n        'for (int i=0; i<m; i++){\n'\n        '   for (int j=0; j<n; j++){\n'\n        '      for (int k=0; k<o; k++){\n'\n        '         for (int l=0; l<p; l++){\n'\n        '            y[i] = a[%s]*b[%s] + y[i];\n' % (i*n*o*p + j*o*p + k*p + l, j*o*p + k*p + l) +        '         }\n'\n        '      }\n'\n        '   }\n'\n        '}'\n    )\n    c: str = ccode(b[j, k, l]*a[i, j, k, l], assign_to=y[i])\n    assert c == s\n", "code": "def test_ccode_loops_multiple_contractions():\n    from sympy import symbols\n    from sympy.tensor import Idx, IndexedBase\n    n: Any\n    m: Any\n    o: Any\n    p: Any\n    n, m, o, p = symbols('n m o p', integer=True)\n    a: IndexedBase = IndexedBase('a')\n    b: IndexedBase = IndexedBase('b')\n    y: IndexedBase = IndexedBase('y')\n    i: Idx = Idx('i', m)\n    j: Idx = Idx('j', n)\n    k: Idx = Idx('k', o)\n    l: Idx = Idx('l', p)\n\n    s: str = (\n        'for (int i=0; i<m; i++){\n'\n        '   y[i] = 0;\n'\n        '}\n'\n        'for (int i=0; i<m; i++){\n'\n        '   for (int j=0; j<n; j++){\n'\n        '      for (int k=0; k<o; k++){\n'\n        '         for (int l=0; l<p; l++){\n'\n        '            y[i] = a[%s]*b[%s] + y[i];\n' % (i*n*o*p + j*o*p + k*p + l, j*o*p + k*p + l) +        '         }\n'\n        '      }\n'\n        '   }\n'\n        '}'\n    )\n    c: str = ccode(b[j, k, l]*a[i, j, k, l], assign_to=y[i])\n    assert c == s\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "25ea11a953ec1a83e73b58d43a1d5f4026e006bc"}
{"source_tokens": ["#NEWLINE#", "def init_state(", "self", ",", "param", ",", "state", ")", ":", "#NEWLINE#", "#INDENT#", "xp", "=", "cuda", ".", "get_array_module", "(", "param", ".", "data", ")", "#NEWLINE#", "state", "[", "'ms'", "]", "=", "xp", ".", "zeros_like", "(", "param", ".", "data", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [10, 16, 7, "enum_FIELD"], [21, 30, 7, "enum_FIELD"], [16, 14, 7, "enum_FIELD"], [23, 22, 7, "enum_FIELD"], [23, 24, 7, "enum_FIELD"], [30, 28, 7, "enum_FIELD"], [14, 13, 7, "enum_FIELD"], [18, 17, 7, "enum_FIELD"], [28, 27, 7, "enum_FIELD"], [32, 31, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [17, 4, 10, "enum_LAST_LEXICAL_USE"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [22, 6, 10, "enum_LAST_LEXICAL_USE"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [27, 11, 10, "enum_LAST_LEXICAL_USE"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [31, 17, 10, "enum_LAST_LEXICAL_USE"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [3, 10, 1, "enum_CFG_NEXT"], [10, 21, 1, "enum_CFG_NEXT"], [17, 4, 3, "enum_LAST_WRITE"], [27, 11, 3, "enum_LAST_WRITE"], [31, 17, 2, "enum_LAST_READ"], [31, 4, 3, "enum_LAST_WRITE"], [22, 6, 3, "enum_LAST_WRITE"], [11, 13, 4, "enum_COMPUTED_FROM"], [11, 17, 4, "enum_COMPUTED_FROM"], [23, 27, 4, "enum_COMPUTED_FROM"], [23, 31, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "pfnet", "repo": "chainer", "path": "chainer/optimizers/rmsprop.py", "id": 37998, "has_bug": false, "code_full": "from typing import Any, Dict\n\n\nclass cuda:\n    @staticmethod\n    def get_array_module(data: Any) -> Any:\n        pass\n\n\nclass RMSprop:\n    def init_state(self, param: Any, state: Dict[str, Any]):\n        xp: Any = cuda.get_array_module(param.data)\n        state['ms'] = xp.zeros_like(param.data)\n", "code": "def init_state(self, param: Any, state: Dict[str, Any]):\n    xp: Any = cuda.get_array_module(param.data)\n    state['ms'] = xp.zeros_like(param.data)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "2f306f7534454a7f897bb26eab2692fff05a79e0"}
{"source_tokens": ["#NEWLINE#", "def try_non_polynomial_lcm(", "seq", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "(", "not", "gens", ")", "and", "(", "not", "args", ")", ")", ":", "#NEWLINE#", "#INDENT#", "(", "domain", ",", "numbers", ")", "=", "construct_domain", "(", "seq", ")", "#NEWLINE#", "if", "(", "not", "numbers", ")", ":", "#NEWLINE#", "#INDENT#", "return", "domain", ".", "one", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "domain", ".", "is_Numerical", ":", "#NEWLINE#", "#INDENT#", "(", "result", ",", "numbers", ")", "=", "(", "numbers", "[", "0", "]", ",", "numbers", "[", "1", ":", "]", ")", "#NEWLINE#", "for", "number", "in", "numbers", ":", "#NEWLINE#", "#INDENT#", "result", "=", "domain", ".", "lcm", "(", "result", ",", "number", ")", "#NEWLINE#", "#UNINDENT#", "return", "domain", ".", "to_sympy", "(", "result", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "return", "None"], "edges": [[7, 13, 7, "enum_FIELD"], [107, 108, 7, "enum_FIELD"], [21, 29, 7, "enum_FIELD"], [38, 35, 7, "enum_FIELD"], [10, 11, 7, "enum_FIELD"], [15, 16, 7, "enum_FIELD"], [29, 28, 7, "enum_FIELD"], [35, 36, 7, "enum_FIELD"], [41, 43, 7, "enum_FIELD"], [51, 53, 7, "enum_FIELD"], [43, 42, 7, "enum_FIELD"], [53, 52, 7, "enum_FIELD"], [57, 69, 7, "enum_FIELD"], [79, 78, 7, "enum_FIELD"], [79, 80, 7, "enum_FIELD"], [96, 100, 7, "enum_FIELD"], [83, 91, 7, "enum_FIELD"], [100, 98, 7, "enum_FIELD"], [66, 65, 7, "enum_FIELD"], [66, 67, 7, "enum_FIELD"], [71, 70, 7, "enum_FIELD"], [71, 73, 7, "enum_FIELD"], [91, 87, 7, "enum_FIELD"], [98, 97, 7, "enum_FIELD"], [73, 72, 7, "enum_FIELD"], [87, 86, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [30, 2, 10, "enum_LAST_LEXICAL_USE"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [36, 25, 10, "enum_LAST_LEXICAL_USE"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 41, 9, "enum_NEXT_SYNTAX"], [42, 23, 10, "enum_LAST_LEXICAL_USE"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 51, 9, "enum_NEXT_SYNTAX"], [52, 42, 10, "enum_LAST_LEXICAL_USE"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [61, 36, 10, "enum_LAST_LEXICAL_USE"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [65, 61, 10, "enum_LAST_LEXICAL_USE"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [70, 65, 10, "enum_LAST_LEXICAL_USE"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [80, 70, 10, "enum_LAST_LEXICAL_USE"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 83, 9, "enum_NEXT_SYNTAX"], [84, 59, 10, "enum_LAST_LEXICAL_USE"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [86, 52, 10, "enum_LAST_LEXICAL_USE"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [90, 84, 10, "enum_LAST_LEXICAL_USE"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [92, 78, 10, "enum_LAST_LEXICAL_USE"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 96, 9, "enum_NEXT_SYNTAX"], [97, 86, 10, "enum_LAST_LEXICAL_USE"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [101, 90, 10, "enum_LAST_LEXICAL_USE"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [13, 21, 1, "enum_CFG_NEXT"], [13, 107, 1, "enum_CFG_NEXT"], [21, 35, 1, "enum_CFG_NEXT"], [35, 53, 1, "enum_CFG_NEXT"], [35, 41, 1, "enum_CFG_NEXT"], [53, 107, 1, "enum_CFG_NEXT"], [53, 57, 1, "enum_CFG_NEXT"], [57, 80, 1, "enum_CFG_NEXT"], [80, 78, 1, "enum_CFG_NEXT"], [78, 96, 1, "enum_CFG_NEXT"], [78, 83, 1, "enum_CFG_NEXT"], [83, 78, 1, "enum_CFG_NEXT"], [30, 2, 3, "enum_LAST_WRITE"], [36, 25, 3, "enum_LAST_WRITE"], [42, 23, 3, "enum_LAST_WRITE"], [52, 23, 3, "enum_LAST_WRITE"], [65, 36, 2, "enum_LAST_READ"], [65, 25, 3, "enum_LAST_WRITE"], [70, 65, 2, "enum_LAST_READ"], [70, 25, 3, "enum_LAST_WRITE"], [61, 70, 2, "enum_LAST_READ"], [61, 25, 3, "enum_LAST_WRITE"], [80, 70, 2, "enum_LAST_READ"], [80, 61, 3, "enum_LAST_WRITE"], [78, 92, 2, "enum_LAST_READ"], [78, 78, 3, "enum_LAST_WRITE"], [86, 86, 2, "enum_LAST_READ"], [86, 52, 2, "enum_LAST_READ"], [86, 23, 3, "enum_LAST_WRITE"], [90, 90, 2, "enum_LAST_READ"], [90, 59, 3, "enum_LAST_WRITE"], [90, 84, 3, "enum_LAST_WRITE"], [92, 92, 2, "enum_LAST_READ"], [92, 78, 3, "enum_LAST_WRITE"], [84, 90, 2, "enum_LAST_READ"], [84, 59, 3, "enum_LAST_WRITE"], [84, 84, 3, "enum_LAST_WRITE"], [97, 86, 2, "enum_LAST_READ"], [97, 52, 2, "enum_LAST_READ"], [97, 23, 3, "enum_LAST_WRITE"], [101, 90, 2, "enum_LAST_READ"], [101, 59, 3, "enum_LAST_WRITE"], [101, 84, 3, "enum_LAST_WRITE"], [24, 28, 4, "enum_COMPUTED_FROM"], [24, 30, 4, "enum_COMPUTED_FROM"], [60, 65, 4, "enum_COMPUTED_FROM"], [60, 70, 4, "enum_COMPUTED_FROM"], [84, 90, 4, "enum_COMPUTED_FROM"], [84, 92, 4, "enum_COMPUTED_FROM"], [84, 86, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "sympy", "repo": "sympy", "path": "sympy/polys/polytools.py", "id": 57696, "has_bug": false, "code_full": "from typing import Any, List, Optional, Tuple, Union\n\n\nclass Domain:\n    one: Any\n    is_Numerical: bool\n\n    def lcm(self, a: Any, b: Any) -> Any:\n        pass\n\n    def to_sympy(self, a: Any) -> Any:\n        pass\n\n\ndef construct_domain(seq: List[Union[int, Any]]) -> Tuple[Domain, List[int]]:\n    return Domain(), []\n\n\ngens: Any = None\nargs: Any = None\n\n\ndef try_non_polynomial_lcm(seq: List[Union[int, Any]]) -> Optional[Any]:\n    if not gens and not args:\n        domain: Domain\n        numbers: List[int]\n        domain, numbers = construct_domain(seq)\n\n        if not numbers:\n            return domain.one\n        elif domain.is_Numerical:\n            result: int\n            result, numbers = numbers[0], numbers[1:]\n\n            for number in numbers:\n                result = domain.lcm(result, number)\n\n            return domain.to_sympy(result)\n\n    return None\n", "code": "def try_non_polynomial_lcm(seq: List[Union[int, Any]]) -> Optional[Any]:\n    if not gens and not args:\n        domain: Domain\n        numbers: List[int]\n        domain, numbers = construct_domain(seq)\n\n        if not numbers:\n            return domain.one\n        elif domain.is_Numerical:\n            result: int\n            result, numbers = numbers[0], numbers[1:]\n\n            for number in numbers:\n                result = domain.lcm(result, number)\n\n            return domain.to_sympy(result)\n\n    return None\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "25ea11a953ec1a83e73b58d43a1d5f4026e006bc"}
{"source_tokens": ["#NEWLINE#", "def fglm(", "self", ",", "order", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n    Convert a Groebner basis from one ordering to another.\\n\\n    The FGLM algorithm converts reduced Groebner bases of zero-dimensional\\n    ideals from one ordering to another. This method is often used when it\\n    is infeasible to compute a Groebner basis with respect to a particular\\n    ordering directly.\\n\\n    Examples\\n    ========\\n\\n    >>> from sympy.abc import x, y\\n    >>> from sympy import groebner\\n\\n    >>> F = [x**2 - 3*y - x + 1, y**2 - 2*x + y - 1]\\n    >>> G = groebner(F, x, y, order='grlex')\\n\\n    >>> list(G.fglm('lex'))\\n    [2*x - y**2 - y + 1, y**4 + 2*y**3 - 3*y**2 - 16*y + 7]\\n    >>> list(groebner(F, x, y, order='lex'))\\n    [2*x - y**2 - y + 1, y**4 + 2*y**3 - 3*y**2 - 16*y + 7]\\n\\n    References\\n    ==========\\n\\n    J.C. Faugere, P. Gianni, D. Lazard, T. Mora (1994). Efficient\\n    Computation of Zero-dimensional Groebner Bases by Change of\\n    Ordering\\n\\n    \"", "#NEWLINE#", "opt", "=", "self", ".", "_options", "#NEWLINE#", "src_order", "=", "opt", ".", "order", "#NEWLINE#", "dst_order", "=", "monomial_key", "(", "order", ")", "#NEWLINE#", "if", "(", "src_order", "==", "dst_order", ")", ":", "#NEWLINE#", "#INDENT#", "return", "self", "#NEWLINE#", "#UNINDENT#", "if", "(", "not", "self", ".", "is_zero_dimensional", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "NotImplementedError", "(", "\"can't convert Groebner bases of ideals with positive dimension\"", ")", "#NEWLINE#", "#UNINDENT#", "polys", "=", "list", "(", "self", ".", "_basis", ")", "#NEWLINE#", "domain", "=", "opt", ".", "domain", "#NEWLINE#", "opt", "=", "opt", ".", "clone", "(", "dict", "(", "domain", "=", "domain", ".", "get_field", "(", ")", ",", "order", "=", "dst_order", ")", ")", "#NEWLINE#", "from", "sympy.polys.rings", "import", "xring", "#NEWLINE#", "(", "_ring", ",", "_", ")", "=", "xring", "(", "opt", ".", "gens", ",", "opt", ".", "domain", ",", "src_order", ")", "#NEWLINE#", "for", "(", "i", ",", "poly", ")", "in", "enumerate", "(", "polys", ")", ":", "#NEWLINE#", "#INDENT#", "poly", "=", "poly", ".", "set_domain", "(", "opt", ".", "domain", ")", ".", "rep", ".", "to_dict", "(", ")", "#NEWLINE#", "polys", "[", "i", "]", "=", "_ring", ".", "from_dict", "(", "poly", ")", "#NEWLINE#", "#UNINDENT#", "G", "=", "matrix_fglm", "(", "polys", ",", "_ring", ",", "dst_order", ")", "#NEWLINE#", "G", "=", "[", "Poly", ".", "_from_dict", "(", "dict", "(", "g", ")", ",", "opt", ")", "for", "g", "in", "G", "]", "#NEWLINE#", "if", "(", "not", "domain", ".", "has_Field", ")", ":", "#NEWLINE#", "#INDENT#", "G", "=", "[", "g", ".", "clear_denoms", "(", "convert", "=", "True", ")", "[", "1", "]", "for", "g", "in", "G", "]", "#NEWLINE#", "opt", ".", "domain", "=", "domain", "#NEWLINE#", "#UNINDENT#", "return", "self", ".", "_new", "(", "G", ",", "opt", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [8, 9, 7, "enum_FIELD"], [10, 14, 7, "enum_FIELD"], [16, 20, 7, "enum_FIELD"], [22, 26, 7, "enum_FIELD"], [30, 33, 7, "enum_FIELD"], [43, 45, 7, "enum_FIELD"], [59, 63, 7, "enum_FIELD"], [68, 72, 7, "enum_FIELD"], [74, 80, 7, "enum_FIELD"], [101, 113, 7, "enum_FIELD"], [127, 124, 7, "enum_FIELD"], [127, 129, 7, "enum_FIELD"], [164, 170, 7, "enum_FIELD"], [175, 178, 7, "enum_FIELD"], [196, 198, 7, "enum_FIELD"], [233, 239, 7, "enum_FIELD"], [14, 13, 7, "enum_FIELD"], [20, 19, 7, "enum_FIELD"], [26, 25, 7, "enum_FIELD"], [33, 32, 7, "enum_FIELD"], [39, 40, 7, "enum_FIELD"], [45, 47, 7, "enum_FIELD"], [53, 55, 7, "enum_FIELD"], [63, 62, 7, "enum_FIELD"], [72, 71, 7, "enum_FIELD"], [80, 78, 7, "enum_FIELD"], [113, 108, 7, "enum_FIELD"], [129, 128, 7, "enum_FIELD"], [134, 149, 7, "enum_FIELD"], [151, 160, 7, "enum_FIELD"], [170, 167, 7, "enum_FIELD"], [178, 187, 7, "enum_FIELD"], [198, 200, 7, "enum_FIELD"], [205, 208, 7, "enum_FIELD"], [225, 230, 7, "enum_FIELD"], [239, 235, 7, "enum_FIELD"], [47, 46, 7, "enum_FIELD"], [55, 54, 7, "enum_FIELD"], [65, 64, 7, "enum_FIELD"], [78, 77, 7, "enum_FIELD"], [90, 81, 7, "enum_FIELD"], [111, 110, 7, "enum_FIELD"], [115, 114, 7, "enum_FIELD"], [149, 147, 7, "enum_FIELD"], [153, 152, 7, "enum_FIELD"], [153, 154, 7, "enum_FIELD"], [160, 158, 7, "enum_FIELD"], [187, 180, 7, "enum_FIELD"], [190, 191, 7, "enum_FIELD"], [190, 193, 7, "enum_FIELD"], [200, 199, 7, "enum_FIELD"], [208, 217, 7, "enum_FIELD"], [227, 226, 7, "enum_FIELD"], [235, 234, 7, "enum_FIELD"], [83, 88, 7, "enum_FIELD"], [91, 93, 7, "enum_FIELD"], [147, 145, 7, "enum_FIELD"], [158, 157, 7, "enum_FIELD"], [180, 179, 7, "enum_FIELD"], [184, 183, 7, "enum_FIELD"], [217, 212, 7, "enum_FIELD"], [217, 218, 7, "enum_FIELD"], [220, 221, 7, "enum_FIELD"], [220, 223, 7, "enum_FIELD"], [88, 86, 7, "enum_FIELD"], [145, 140, 7, "enum_FIELD"], [212, 210, 7, "enum_FIELD"], [86, 85, 7, "enum_FIELD"], [140, 138, 7, "enum_FIELD"], [210, 209, 7, "enum_FIELD"], [213, 215, 7, "enum_FIELD"], [138, 137, 7, "enum_FIELD"], [142, 141, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [13, 2, 10, "enum_LAST_LEXICAL_USE"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [19, 11, 10, "enum_LAST_LEXICAL_USE"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [27, 4, 10, "enum_LAST_LEXICAL_USE"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [32, 17, 10, "enum_LAST_LEXICAL_USE"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [34, 23, 10, "enum_LAST_LEXICAL_USE"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 39, 9, "enum_NEXT_SYNTAX"], [40, 13, 10, "enum_LAST_LEXICAL_USE"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [46, 40, 10, "enum_LAST_LEXICAL_USE"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [64, 46, 10, "enum_LAST_LEXICAL_USE"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [71, 19, 10, "enum_LAST_LEXICAL_USE"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [75, 71, 10, "enum_LAST_LEXICAL_USE"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [77, 75, 10, "enum_LAST_LEXICAL_USE"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [85, 69, 10, "enum_LAST_LEXICAL_USE"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [93, 34, 10, "enum_LAST_LEXICAL_USE"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [110, 77, 10, "enum_LAST_LEXICAL_USE"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [114, 110, 10, "enum_LAST_LEXICAL_USE"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [118, 32, 10, "enum_LAST_LEXICAL_USE"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [130, 60, 10, "enum_LAST_LEXICAL_USE"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 134, 9, "enum_NEXT_SYNTAX"], [135, 125, 10, "enum_LAST_LEXICAL_USE"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [137, 135, 10, "enum_LAST_LEXICAL_USE"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [141, 114, 10, "enum_LAST_LEXICAL_USE"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [152, 130, 10, "enum_LAST_LEXICAL_USE"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [154, 123, 10, "enum_LAST_LEXICAL_USE"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [157, 103, 10, "enum_LAST_LEXICAL_USE"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [161, 137, 10, "enum_LAST_LEXICAL_USE"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [169, 152, 10, "enum_LAST_LEXICAL_USE"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [171, 157, 10, "enum_LAST_LEXICAL_USE"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [173, 93, 10, "enum_LAST_LEXICAL_USE"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [176, 165, 10, "enum_LAST_LEXICAL_USE"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [183, 81, 10, "enum_LAST_LEXICAL_USE"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 184, 9, "enum_NEXT_SYNTAX"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [188, 141, 10, "enum_LAST_LEXICAL_USE"], [187, 188, 9, "enum_NEXT_SYNTAX"], [188, 189, 9, "enum_NEXT_SYNTAX"], [189, 190, 9, "enum_NEXT_SYNTAX"], [191, 185, 10, "enum_LAST_LEXICAL_USE"], [190, 191, 9, "enum_NEXT_SYNTAX"], [191, 192, 9, "enum_NEXT_SYNTAX"], [193, 176, 10, "enum_LAST_LEXICAL_USE"], [192, 193, 9, "enum_NEXT_SYNTAX"], [193, 194, 9, "enum_NEXT_SYNTAX"], [194, 196, 9, "enum_NEXT_SYNTAX"], [196, 197, 9, "enum_NEXT_SYNTAX"], [197, 198, 9, "enum_NEXT_SYNTAX"], [199, 85, 10, "enum_LAST_LEXICAL_USE"], [198, 199, 9, "enum_NEXT_SYNTAX"], [199, 200, 9, "enum_NEXT_SYNTAX"], [200, 201, 9, "enum_NEXT_SYNTAX"], [201, 202, 9, "enum_NEXT_SYNTAX"], [202, 203, 9, "enum_NEXT_SYNTAX"], [203, 205, 9, "enum_NEXT_SYNTAX"], [206, 193, 10, "enum_LAST_LEXICAL_USE"], [205, 206, 9, "enum_NEXT_SYNTAX"], [206, 207, 9, "enum_NEXT_SYNTAX"], [207, 208, 9, "enum_NEXT_SYNTAX"], [209, 191, 10, "enum_LAST_LEXICAL_USE"], [208, 209, 9, "enum_NEXT_SYNTAX"], [209, 210, 9, "enum_NEXT_SYNTAX"], [210, 211, 9, "enum_NEXT_SYNTAX"], [211, 212, 9, "enum_NEXT_SYNTAX"], [212, 213, 9, "enum_NEXT_SYNTAX"], [213, 214, 9, "enum_NEXT_SYNTAX"], [214, 215, 9, "enum_NEXT_SYNTAX"], [215, 216, 9, "enum_NEXT_SYNTAX"], [216, 217, 9, "enum_NEXT_SYNTAX"], [217, 218, 9, "enum_NEXT_SYNTAX"], [218, 219, 9, "enum_NEXT_SYNTAX"], [219, 220, 9, "enum_NEXT_SYNTAX"], [221, 209, 10, "enum_LAST_LEXICAL_USE"], [220, 221, 9, "enum_NEXT_SYNTAX"], [221, 222, 9, "enum_NEXT_SYNTAX"], [223, 206, 10, "enum_LAST_LEXICAL_USE"], [222, 223, 9, "enum_NEXT_SYNTAX"], [223, 224, 9, "enum_NEXT_SYNTAX"], [224, 225, 9, "enum_NEXT_SYNTAX"], [226, 188, 10, "enum_LAST_LEXICAL_USE"], [225, 226, 9, "enum_NEXT_SYNTAX"], [226, 227, 9, "enum_NEXT_SYNTAX"], [227, 228, 9, "enum_NEXT_SYNTAX"], [228, 229, 9, "enum_NEXT_SYNTAX"], [230, 199, 10, "enum_LAST_LEXICAL_USE"], [229, 230, 9, "enum_NEXT_SYNTAX"], [230, 233, 9, "enum_NEXT_SYNTAX"], [234, 64, 10, "enum_LAST_LEXICAL_USE"], [233, 234, 9, "enum_NEXT_SYNTAX"], [234, 235, 9, "enum_NEXT_SYNTAX"], [235, 236, 9, "enum_NEXT_SYNTAX"], [236, 237, 9, "enum_NEXT_SYNTAX"], [238, 223, 10, "enum_LAST_LEXICAL_USE"], [237, 238, 9, "enum_NEXT_SYNTAX"], [238, 239, 9, "enum_NEXT_SYNTAX"], [240, 226, 10, "enum_LAST_LEXICAL_USE"], [239, 240, 9, "enum_NEXT_SYNTAX"], [240, 241, 9, "enum_NEXT_SYNTAX"], [3, 8, 1, "enum_CFG_NEXT"], [8, 10, 1, "enum_CFG_NEXT"], [10, 16, 1, "enum_CFG_NEXT"], [16, 22, 1, "enum_CFG_NEXT"], [22, 33, 1, "enum_CFG_NEXT"], [33, 45, 1, "enum_CFG_NEXT"], [33, 39, 1, "enum_CFG_NEXT"], [45, 59, 1, "enum_CFG_NEXT"], [45, 53, 1, "enum_CFG_NEXT"], [59, 68, 1, "enum_CFG_NEXT"], [68, 74, 1, "enum_CFG_NEXT"], [74, 98, 1, "enum_CFG_NEXT"], [98, 101, 1, "enum_CFG_NEXT"], [101, 129, 1, "enum_CFG_NEXT"], [129, 124, 1, "enum_CFG_NEXT"], [124, 164, 1, "enum_CFG_NEXT"], [124, 134, 1, "enum_CFG_NEXT"], [134, 151, 1, "enum_CFG_NEXT"], [151, 124, 1, "enum_CFG_NEXT"], [164, 175, 1, "enum_CFG_NEXT"], [175, 198, 1, "enum_CFG_NEXT"], [198, 205, 1, "enum_CFG_NEXT"], [198, 233, 1, "enum_CFG_NEXT"], [205, 225, 1, "enum_CFG_NEXT"], [225, 233, 1, "enum_CFG_NEXT"], [13, 2, 3, "enum_LAST_WRITE"], [19, 11, 3, "enum_LAST_WRITE"], [27, 4, 3, "enum_LAST_WRITE"], [32, 17, 3, "enum_LAST_WRITE"], [34, 23, 3, "enum_LAST_WRITE"], [40, 13, 2, "enum_LAST_READ"], [40, 2, 3, "enum_LAST_WRITE"], [46, 13, 2, "enum_LAST_READ"], [46, 2, 3, "enum_LAST_WRITE"], [64, 46, 2, "enum_LAST_READ"], [64, 2, 3, "enum_LAST_WRITE"], [71, 19, 2, "enum_LAST_READ"], [71, 11, 3, "enum_LAST_WRITE"], [77, 71, 2, "enum_LAST_READ"], [77, 11, 3, "enum_LAST_WRITE"], [85, 69, 3, "enum_LAST_WRITE"], [93, 34, 2, "enum_LAST_READ"], [93, 23, 3, "enum_LAST_WRITE"], [75, 77, 2, "enum_LAST_READ"], [75, 11, 3, "enum_LAST_WRITE"], [110, 77, 2, "enum_LAST_READ"], [110, 75, 3, "enum_LAST_WRITE"], [114, 110, 2, "enum_LAST_READ"], [114, 75, 3, "enum_LAST_WRITE"], [118, 32, 2, "enum_LAST_READ"], [118, 17, 3, "enum_LAST_WRITE"], [130, 60, 3, "enum_LAST_WRITE"], [123, 154, 2, "enum_LAST_READ"], [123, 123, 3, "enum_LAST_WRITE"], [125, 161, 2, "enum_LAST_READ"], [125, 135, 3, "enum_LAST_WRITE"], [137, 161, 2, "enum_LAST_READ"], [137, 125, 3, "enum_LAST_WRITE"], [141, 114, 2, "enum_LAST_READ"], [141, 141, 2, "enum_LAST_READ"], [141, 75, 3, "enum_LAST_WRITE"], [135, 137, 2, "enum_LAST_READ"], [135, 125, 3, "enum_LAST_WRITE"], [157, 157, 2, "enum_LAST_READ"], [157, 103, 3, "enum_LAST_WRITE"], [161, 137, 2, "enum_LAST_READ"], [161, 135, 3, "enum_LAST_WRITE"], [152, 152, 2, "enum_LAST_READ"], [152, 130, 2, "enum_LAST_READ"], [152, 60, 3, "enum_LAST_WRITE"], [154, 154, 2, "enum_LAST_READ"], [154, 123, 3, "enum_LAST_WRITE"], [169, 152, 2, "enum_LAST_READ"], [169, 130, 2, "enum_LAST_READ"], [169, 60, 3, "enum_LAST_WRITE"], [171, 157, 2, "enum_LAST_READ"], [171, 103, 3, "enum_LAST_WRITE"], [173, 93, 2, "enum_LAST_READ"], [173, 23, 3, "enum_LAST_WRITE"], [183, 81, 2, "enum_LAST_READ"], [188, 114, 2, "enum_LAST_READ"], [188, 141, 2, "enum_LAST_READ"], [188, 75, 3, "enum_LAST_WRITE"], [191, 185, 2, "enum_LAST_READ"], [193, 165, 3, "enum_LAST_WRITE"], [176, 193, 2, "enum_LAST_READ"], [176, 165, 3, "enum_LAST_WRITE"], [199, 85, 2, "enum_LAST_READ"], [199, 69, 3, "enum_LAST_WRITE"], [209, 185, 2, "enum_LAST_READ"], [209, 191, 3, "enum_LAST_WRITE"], [221, 209, 2, "enum_LAST_READ"], [221, 191, 3, "enum_LAST_WRITE"], [223, 193, 2, "enum_LAST_READ"], [223, 176, 3, "enum_LAST_WRITE"], [206, 223, 2, "enum_LAST_READ"], [206, 176, 3, "enum_LAST_WRITE"], [230, 199, 2, "enum_LAST_READ"], [230, 69, 3, "enum_LAST_WRITE"], [226, 188, 2, "enum_LAST_READ"], [226, 75, 3, "enum_LAST_WRITE"], [234, 64, 2, "enum_LAST_READ"], [234, 2, 3, "enum_LAST_WRITE"], [238, 223, 2, "enum_LAST_READ"], [238, 193, 2, "enum_LAST_READ"], [238, 206, 3, "enum_LAST_WRITE"], [238, 176, 3, "enum_LAST_WRITE"], [240, 226, 2, "enum_LAST_READ"], [240, 188, 2, "enum_LAST_READ"], [240, 75, 3, "enum_LAST_WRITE"], [11, 13, 4, "enum_COMPUTED_FROM"], [17, 19, 4, "enum_COMPUTED_FROM"], [23, 25, 4, "enum_COMPUTED_FROM"], [23, 27, 4, "enum_COMPUTED_FROM"], [60, 62, 4, "enum_COMPUTED_FROM"], [60, 64, 4, "enum_COMPUTED_FROM"], [69, 71, 4, "enum_COMPUTED_FROM"], [75, 77, 4, "enum_COMPUTED_FROM"], [75, 81, 4, "enum_COMPUTED_FROM"], [75, 93, 4, "enum_COMPUTED_FROM"], [75, 85, 4, "enum_COMPUTED_FROM"], [104, 108, 4, "enum_COMPUTED_FROM"], [104, 118, 4, "enum_COMPUTED_FROM"], [104, 110, 4, "enum_COMPUTED_FROM"], [104, 114, 4, "enum_COMPUTED_FROM"], [165, 167, 4, "enum_COMPUTED_FROM"], [165, 169, 4, "enum_COMPUTED_FROM"], [165, 171, 4, "enum_COMPUTED_FROM"], [165, 173, 4, "enum_COMPUTED_FROM"], [176, 188, 4, "enum_COMPUTED_FROM"], [176, 191, 4, "enum_COMPUTED_FROM"], [176, 193, 4, "enum_COMPUTED_FROM"], [176, 179, 4, "enum_COMPUTED_FROM"], [176, 183, 4, "enum_COMPUTED_FROM"], [176, 185, 4, "enum_COMPUTED_FROM"], [135, 137, 4, "enum_COMPUTED_FROM"], [135, 141, 4, "enum_COMPUTED_FROM"], [153, 161, 4, "enum_COMPUTED_FROM"], [153, 157, 4, "enum_COMPUTED_FROM"], [206, 221, 4, "enum_COMPUTED_FROM"], [206, 223, 4, "enum_COMPUTED_FROM"], [206, 209, 4, "enum_COMPUTED_FROM"], [227, 230, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "sympy", "repo": "sympy", "path": "sympy/polys/polytools.py", "id": 57826, "has_bug": false, "code_full": "from typing import Any, List, Tuple, Union\n\n\ndef monomial_key(order: Union[str, Tuple]) -> Any:\n    pass\n\n\ndef matrix_fglm(polys: List[Any], ring: Any, order: Any) -> List[Any]:\n    return []\n\n\nclass Poly:\n    rep: Any\n\n    @staticmethod\n    def _from_dict(dict: dict, opt: Any) -> \"Poly\":\n        return Poly()\n\n    def clear_denoms(self, convert: bool) -> Tuple:\n        return ()\n\n    def set_domain(self, domain: Any) -> \"Poly\":\n        return Poly()\n\n\nclass GroebnerBasis:\n    _basis: List[Poly]\n    _options: Any\n\n    def __init__(self, basis: List[Poly], options: Any) -> None:\n        pass\n\n    @property\n    def is_zero_dimensional(self) -> bool:\n        return False\n\n    def _new(self, basis: List[Poly], options: Any) -> \"GroebnerBasis\":\n        return GroebnerBasis(basis, options)\n\n    def fglm(self, order: Union[str, Tuple]) -> \"GroebnerBasis\":\n        \"\"\"\n        Convert a Groebner basis from one ordering to another.\n\n        The FGLM algorithm converts reduced Groebner bases of zero-dimensional\n        ideals from one ordering to another. This method is often used when it\n        is infeasible to compute a Groebner basis with respect to a particular\n        ordering directly.\n\n        Examples\n        ========\n\n        >>> from sympy.abc import x, y\n        >>> from sympy import groebner\n\n        >>> F = [x**2 - 3*y - x + 1, y**2 - 2*x + y - 1]\n        >>> G = groebner(F, x, y, order='grlex')\n\n        >>> list(G.fglm('lex'))\n        [2*x - y**2 - y + 1, y**4 + 2*y**3 - 3*y**2 - 16*y + 7]\n        >>> list(groebner(F, x, y, order='lex'))\n        [2*x - y**2 - y + 1, y**4 + 2*y**3 - 3*y**2 - 16*y + 7]\n\n        References\n        ==========\n\n        J.C. Faugere, P. Gianni, D. Lazard, T. Mora (1994). Efficient\n        Computation of Zero-dimensional Groebner Bases by Change of\n        Ordering\n\n        \"\"\"\n        opt: Any = self._options\n\n        src_order: Any = opt.order\n        dst_order: Any = monomial_key(order)\n\n        if src_order == dst_order:\n            return self\n\n        if not self.is_zero_dimensional:\n            raise NotImplementedError(\"can't convert Groebner bases of ideals with positive dimension\")\n\n        polys: List[Poly] = list(self._basis)\n        domain: Any = opt.domain\n\n        opt: Any = opt.clone(dict(\n            domain=domain.get_field(),\n            order=dst_order,\n        ))\n\n        from sympy.polys.rings import xring\n        _ring: Any\n        _ring, _ = xring(opt.gens, opt.domain, src_order)\n\n        for i, poly in enumerate(polys):\n            poly: Any = poly.set_domain(opt.domain).rep.to_dict()\n            polys[i] = _ring.from_dict(poly)\n\n        G = matrix_fglm(polys, _ring, dst_order)\n        G = [Poly._from_dict(dict(g), opt) for g in G]\n\n        if not domain.has_Field:\n            G = [g.clear_denoms(convert=True)[1] for g in G]\n            opt.domain = domain\n\n        return self._new(G, opt)\n", "code": "def fglm(self, order: Union[str, Tuple]) -> \"GroebnerBasis\":\n    \"\"\"\n    Convert a Groebner basis from one ordering to another.\n\n    The FGLM algorithm converts reduced Groebner bases of zero-dimensional\n    ideals from one ordering to another. This method is often used when it\n    is infeasible to compute a Groebner basis with respect to a particular\n    ordering directly.\n\n    Examples\n    ========\n\n    >>> from sympy.abc import x, y\n    >>> from sympy import groebner\n\n    >>> F = [x**2 - 3*y - x + 1, y**2 - 2*x + y - 1]\n    >>> G = groebner(F, x, y, order='grlex')\n\n    >>> list(G.fglm('lex'))\n    [2*x - y**2 - y + 1, y**4 + 2*y**3 - 3*y**2 - 16*y + 7]\n    >>> list(groebner(F, x, y, order='lex'))\n    [2*x - y**2 - y + 1, y**4 + 2*y**3 - 3*y**2 - 16*y + 7]\n\n    References\n    ==========\n\n    J.C. Faugere, P. Gianni, D. Lazard, T. Mora (1994). Efficient\n    Computation of Zero-dimensional Groebner Bases by Change of\n    Ordering\n\n    \"\"\"\n    opt: Any = self._options\n\n    src_order: Any = opt.order\n    dst_order: Any = monomial_key(order)\n\n    if src_order == dst_order:\n        return self\n\n    if not self.is_zero_dimensional:\n        raise NotImplementedError(\"can't convert Groebner bases of ideals with positive dimension\")\n\n    polys: List[Poly] = list(self._basis)\n    domain: Any = opt.domain\n\n    opt: Any = opt.clone(dict(\n        domain=domain.get_field(),\n        order=dst_order,\n    ))\n\n    from sympy.polys.rings import xring\n    _ring: Any\n    _ring, _ = xring(opt.gens, opt.domain, src_order)\n\n    for i, poly in enumerate(polys):\n        poly: Any = poly.set_domain(opt.domain).rep.to_dict()\n        polys[i] = _ring.from_dict(poly)\n\n    G = matrix_fglm(polys, _ring, dst_order)\n    G = [Poly._from_dict(dict(g), opt) for g in G]\n\n    if not domain.has_Field:\n        G = [g.clear_denoms(convert=True)[1] for g in G]\n        opt.domain = domain\n\n    return self._new(G, opt)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "25ea11a953ec1a83e73b58d43a1d5f4026e006bc"}
{"source_tokens": ["#NEWLINE#", "def _resolve_signature(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'Resolve signature.\\n    May have ambiguous case.\\n    '", "#NEWLINE#", "matches", "=", "[", "]", "#NEWLINE#", "if", "self", ".", "scalarpos", ":", "#NEWLINE#", "#INDENT#", "for", "formaltys", "in", "self", ".", "typemap", ":", "#NEWLINE#", "#INDENT#", "match_map", "=", "[", "]", "#NEWLINE#", "for", "(", "i", ",", "(", "formal", ",", "actual", ")", ")", "in", "enumerate", "(", "zip", "(", "formaltys", ",", "self", ".", "argtypes", ")", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "actual", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "actual", "=", "np", ".", "asarray", "(", "self", ".", "args", "[", "i", "]", ")", ".", "dtype", "#NEWLINE#", "#UNINDENT#", "match_map", ".", "append", "(", "(", "actual", "==", "formal", ")", ")", "#NEWLINE#", "#UNINDENT#", "if", "all", "(", "match_map", ")", ":", "#NEWLINE#", "#INDENT#", "matches", ".", "append", "(", "formaltys", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "if", "(", "not", "matches", ")", ":", "#NEWLINE#", "#INDENT#", "matches", "=", "[", "]", "#NEWLINE#", "for", "formaltys", "in", "self", ".", "typemap", ":", "#NEWLINE#", "#INDENT#", "all_matches", "=", "all", "(", "(", "(", "(", "actual", "is", "None", ")", "or", "(", "formal", "==", "actual", ")", ")", "for", "(", "formal", ",", "actual", ")", "in", "zip", "(", "formaltys", ",", "self", ".", "argtypes", ")", ")", ")", "#NEWLINE#", "if", "all_matches", ":", "#NEWLINE#", "#INDENT#", "matches", ".", "append", "(", "formaltys", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "if", "(", "not", "matches", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "TypeError", "(", "\"No matching version.  GPU ufunc requires array arguments to have the exact types.  This behaves like regular ufunc with casting='no'.\"", ")", "#NEWLINE#", "#UNINDENT#", "if", "(", "len", "(", "matches", ")", ">", "1", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "TypeError", "(", "'Failed to resolve ufunc due to ambiguous signature. Too many untyped scalars. Use numpy dtype object to type tag.'", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "argtypes", "=", "matches", "[", "0", "]"], "edges": [[6, 7, 7, "enum_FIELD"], [8, 11, 7, "enum_FIELD"], [14, 16, 7, "enum_FIELD"], [116, 118, 7, "enum_FIELD"], [189, 191, 7, "enum_FIELD"], [204, 210, 7, "enum_FIELD"], [222, 228, 7, "enum_FIELD"], [16, 15, 7, "enum_FIELD"], [23, 22, 7, "enum_FIELD"], [23, 25, 7, "enum_FIELD"], [118, 119, 7, "enum_FIELD"], [123, 126, 7, "enum_FIELD"], [131, 130, 7, "enum_FIELD"], [131, 133, 7, "enum_FIELD"], [191, 192, 7, "enum_FIELD"], [197, 199, 7, "enum_FIELD"], [210, 207, 7, "enum_FIELD"], [216, 218, 7, "enum_FIELD"], [224, 223, 7, "enum_FIELD"], [228, 227, 7, "enum_FIELD"], [228, 229, 7, "enum_FIELD"], [25, 24, 7, "enum_FIELD"], [29, 32, 7, "enum_FIELD"], [45, 38, 7, "enum_FIELD"], [45, 47, 7, "enum_FIELD"], [98, 100, 7, "enum_FIELD"], [133, 132, 7, "enum_FIELD"], [137, 141, 7, "enum_FIELD"], [174, 175, 7, "enum_FIELD"], [199, 198, 7, "enum_FIELD"], [207, 206, 7, "enum_FIELD"], [218, 217, 7, "enum_FIELD"], [47, 46, 7, "enum_FIELD"], [60, 63, 7, "enum_FIELD"], [85, 89, 7, "enum_FIELD"], [100, 99, 7, "enum_FIELD"], [105, 109, 7, "enum_FIELD"], [141, 140, 7, "enum_FIELD"], [178, 182, 7, "enum_FIELD"], [51, 48, 7, "enum_FIELD"], [63, 62, 7, "enum_FIELD"], [68, 82, 7, "enum_FIELD"], [89, 87, 7, "enum_FIELD"], [109, 107, 7, "enum_FIELD"], [142, 149, 7, "enum_FIELD"], [182, 180, 7, "enum_FIELD"], [53, 52, 7, "enum_FIELD"], [82, 74, 7, "enum_FIELD"], [87, 86, 7, "enum_FIELD"], [92, 91, 7, "enum_FIELD"], [107, 106, 7, "enum_FIELD"], [156, 159, 7, "enum_FIELD"], [156, 166, 7, "enum_FIELD"], [180, 179, 7, "enum_FIELD"], [74, 72, 7, "enum_FIELD"], [146, 145, 7, "enum_FIELD"], [152, 151, 7, "enum_FIELD"], [166, 163, 7, "enum_FIELD"], [72, 71, 7, "enum_FIELD"], [78, 76, 7, "enum_FIELD"], [78, 79, 7, "enum_FIELD"], [168, 167, 7, "enum_FIELD"], [76, 75, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 14, 9, "enum_NEXT_SYNTAX"], [15, 2, 10, "enum_LAST_LEXICAL_USE"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [24, 15, 10, "enum_LAST_LEXICAL_USE"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [50, 22, 10, "enum_LAST_LEXICAL_USE"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [52, 24, 10, "enum_LAST_LEXICAL_USE"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [62, 42, 10, "enum_LAST_LEXICAL_USE"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 68, 9, "enum_NEXT_SYNTAX"], [69, 62, 10, "enum_LAST_LEXICAL_USE"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [75, 52, 10, "enum_LAST_LEXICAL_USE"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [79, 37, 10, "enum_LAST_LEXICAL_USE"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 85, 9, "enum_NEXT_SYNTAX"], [86, 30, 10, "enum_LAST_LEXICAL_USE"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [91, 69, 10, "enum_LAST_LEXICAL_USE"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [93, 40, 10, "enum_LAST_LEXICAL_USE"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [101, 86, 10, "enum_LAST_LEXICAL_USE"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 105, 9, "enum_NEXT_SYNTAX"], [106, 9, 10, "enum_LAST_LEXICAL_USE"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [110, 50, 10, "enum_LAST_LEXICAL_USE"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [119, 106, 10, "enum_LAST_LEXICAL_USE"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 123, 9, "enum_NEXT_SYNTAX"], [124, 119, 10, "enum_LAST_LEXICAL_USE"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 129, 9, "enum_NEXT_SYNTAX"], [130, 110, 10, "enum_LAST_LEXICAL_USE"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [132, 75, 10, "enum_LAST_LEXICAL_USE"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [140, 99, 10, "enum_LAST_LEXICAL_USE"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [145, 91, 10, "enum_LAST_LEXICAL_USE"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [151, 93, 10, "enum_LAST_LEXICAL_USE"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [153, 145, 10, "enum_LAST_LEXICAL_USE"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [158, 151, 10, "enum_LAST_LEXICAL_USE"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [160, 153, 10, "enum_LAST_LEXICAL_USE"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [163, 48, 10, "enum_LAST_LEXICAL_USE"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [165, 130, 10, "enum_LAST_LEXICAL_USE"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [167, 132, 10, "enum_LAST_LEXICAL_USE"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 174, 9, "enum_NEXT_SYNTAX"], [175, 138, 10, "enum_LAST_LEXICAL_USE"], [174, 175, 9, "enum_NEXT_SYNTAX"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 178, 9, "enum_NEXT_SYNTAX"], [179, 124, 10, "enum_LAST_LEXICAL_USE"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [183, 165, 10, "enum_LAST_LEXICAL_USE"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 184, 9, "enum_NEXT_SYNTAX"], [184, 189, 9, "enum_NEXT_SYNTAX"], [189, 190, 9, "enum_NEXT_SYNTAX"], [190, 191, 9, "enum_NEXT_SYNTAX"], [192, 179, 10, "enum_LAST_LEXICAL_USE"], [191, 192, 9, "enum_NEXT_SYNTAX"], [192, 193, 9, "enum_NEXT_SYNTAX"], [193, 194, 9, "enum_NEXT_SYNTAX"], [194, 197, 9, "enum_NEXT_SYNTAX"], [197, 198, 9, "enum_NEXT_SYNTAX"], [198, 199, 9, "enum_NEXT_SYNTAX"], [199, 200, 9, "enum_NEXT_SYNTAX"], [200, 201, 9, "enum_NEXT_SYNTAX"], [201, 204, 9, "enum_NEXT_SYNTAX"], [204, 205, 9, "enum_NEXT_SYNTAX"], [205, 206, 9, "enum_NEXT_SYNTAX"], [206, 207, 9, "enum_NEXT_SYNTAX"], [208, 192, 10, "enum_LAST_LEXICAL_USE"], [207, 208, 9, "enum_NEXT_SYNTAX"], [208, 209, 9, "enum_NEXT_SYNTAX"], [209, 210, 9, "enum_NEXT_SYNTAX"], [210, 211, 9, "enum_NEXT_SYNTAX"], [211, 212, 9, "enum_NEXT_SYNTAX"], [212, 213, 9, "enum_NEXT_SYNTAX"], [213, 216, 9, "enum_NEXT_SYNTAX"], [217, 198, 10, "enum_LAST_LEXICAL_USE"], [216, 217, 9, "enum_NEXT_SYNTAX"], [217, 218, 9, "enum_NEXT_SYNTAX"], [218, 219, 9, "enum_NEXT_SYNTAX"], [219, 220, 9, "enum_NEXT_SYNTAX"], [220, 222, 9, "enum_NEXT_SYNTAX"], [223, 167, 10, "enum_LAST_LEXICAL_USE"], [222, 223, 9, "enum_NEXT_SYNTAX"], [223, 224, 9, "enum_NEXT_SYNTAX"], [224, 225, 9, "enum_NEXT_SYNTAX"], [225, 226, 9, "enum_NEXT_SYNTAX"], [227, 208, 10, "enum_LAST_LEXICAL_USE"], [226, 227, 9, "enum_NEXT_SYNTAX"], [227, 228, 9, "enum_NEXT_SYNTAX"], [228, 229, 9, "enum_NEXT_SYNTAX"], [229, 230, 9, "enum_NEXT_SYNTAX"], [6, 8, 1, "enum_CFG_NEXT"], [8, 16, 1, "enum_CFG_NEXT"], [16, 25, 1, "enum_CFG_NEXT"], [16, 118, 1, "enum_CFG_NEXT"], [25, 22, 1, "enum_CFG_NEXT"], [22, 29, 1, "enum_CFG_NEXT"], [22, 118, 1, "enum_CFG_NEXT"], [29, 47, 1, "enum_CFG_NEXT"], [47, 38, 1, "enum_CFG_NEXT"], [38, 100, 1, "enum_CFG_NEXT"], [38, 63, 1, "enum_CFG_NEXT"], [63, 68, 1, "enum_CFG_NEXT"], [63, 85, 1, "enum_CFG_NEXT"], [68, 85, 1, "enum_CFG_NEXT"], [85, 38, 1, "enum_CFG_NEXT"], [100, 105, 1, "enum_CFG_NEXT"], [100, 22, 1, "enum_CFG_NEXT"], [105, 22, 1, "enum_CFG_NEXT"], [118, 123, 1, "enum_CFG_NEXT"], [118, 191, 1, "enum_CFG_NEXT"], [123, 133, 1, "enum_CFG_NEXT"], [133, 130, 1, "enum_CFG_NEXT"], [130, 191, 1, "enum_CFG_NEXT"], [130, 137, 1, "enum_CFG_NEXT"], [137, 175, 1, "enum_CFG_NEXT"], [175, 178, 1, "enum_CFG_NEXT"], [175, 130, 1, "enum_CFG_NEXT"], [178, 130, 1, "enum_CFG_NEXT"], [191, 197, 1, "enum_CFG_NEXT"], [191, 210, 1, "enum_CFG_NEXT"], [210, 222, 1, "enum_CFG_NEXT"], [210, 216, 1, "enum_CFG_NEXT"], [15, 2, 3, "enum_LAST_WRITE"], [24, 15, 2, "enum_LAST_READ"], [24, 2, 3, "enum_LAST_WRITE"], [22, 50, 2, "enum_LAST_READ"], [22, 110, 2, "enum_LAST_READ"], [22, 22, 3, "enum_LAST_WRITE"], [30, 101, 2, "enum_LAST_READ"], [30, 30, 3, "enum_LAST_WRITE"], [46, 46, 2, "enum_LAST_READ"], [48, 48, 2, "enum_LAST_READ"], [50, 50, 2, "enum_LAST_READ"], [50, 110, 2, "enum_LAST_READ"], [50, 22, 3, "enum_LAST_WRITE"], [52, 52, 2, "enum_LAST_READ"], [52, 75, 2, "enum_LAST_READ"], [52, 24, 2, "enum_LAST_READ"], [52, 2, 3, "enum_LAST_WRITE"], [37, 79, 2, "enum_LAST_READ"], [37, 37, 3, "enum_LAST_WRITE"], [40, 93, 2, "enum_LAST_READ"], [40, 40, 3, "enum_LAST_WRITE"], [42, 91, 2, "enum_LAST_READ"], [42, 69, 3, "enum_LAST_WRITE"], [42, 42, 3, "enum_LAST_WRITE"], [62, 91, 2, "enum_LAST_READ"], [62, 42, 3, "enum_LAST_WRITE"], [71, 71, 2, "enum_LAST_READ"], [75, 52, 2, "enum_LAST_READ"], [75, 75, 2, "enum_LAST_READ"], [75, 2, 3, "enum_LAST_WRITE"], [79, 79, 2, "enum_LAST_READ"], [79, 37, 3, "enum_LAST_WRITE"], [69, 62, 2, "enum_LAST_READ"], [69, 42, 3, "enum_LAST_WRITE"], [86, 86, 2, "enum_LAST_READ"], [86, 101, 2, "enum_LAST_READ"], [86, 30, 3, "enum_LAST_WRITE"], [91, 62, 2, "enum_LAST_READ"], [91, 69, 3, "enum_LAST_WRITE"], [91, 42, 3, "enum_LAST_WRITE"], [93, 93, 2, "enum_LAST_READ"], [93, 40, 3, "enum_LAST_WRITE"], [99, 99, 2, "enum_LAST_READ"], [101, 86, 2, "enum_LAST_READ"], [101, 101, 2, "enum_LAST_READ"], [101, 30, 3, "enum_LAST_WRITE"], [106, 106, 2, "enum_LAST_READ"], [106, 9, 3, "enum_LAST_WRITE"], [110, 50, 2, "enum_LAST_READ"], [110, 22, 3, "enum_LAST_WRITE"], [119, 106, 2, "enum_LAST_READ"], [119, 9, 3, "enum_LAST_WRITE"], [124, 119, 2, "enum_LAST_READ"], [124, 9, 3, "enum_LAST_WRITE"], [132, 52, 2, "enum_LAST_READ"], [132, 75, 2, "enum_LAST_READ"], [132, 24, 2, "enum_LAST_READ"], [132, 15, 2, "enum_LAST_READ"], [132, 2, 3, "enum_LAST_WRITE"], [130, 50, 2, "enum_LAST_READ"], [130, 183, 2, "enum_LAST_READ"], [130, 165, 2, "enum_LAST_READ"], [130, 110, 2, "enum_LAST_READ"], [130, 130, 3, "enum_LAST_WRITE"], [130, 22, 3, "enum_LAST_WRITE"], [140, 99, 2, "enum_LAST_READ"], [140, 140, 2, "enum_LAST_READ"], [145, 153, 2, "enum_LAST_READ"], [145, 91, 2, "enum_LAST_READ"], [145, 160, 3, "enum_LAST_WRITE"], [145, 42, 3, "enum_LAST_WRITE"], [151, 93, 2, "enum_LAST_READ"], [151, 151, 2, "enum_LAST_READ"], [151, 40, 3, "enum_LAST_WRITE"], [151, 158, 3, "enum_LAST_WRITE"], [153, 145, 2, "enum_LAST_READ"], [153, 160, 3, "enum_LAST_WRITE"], [153, 42, 3, "enum_LAST_WRITE"], [158, 151, 2, "enum_LAST_READ"], [158, 40, 3, "enum_LAST_WRITE"], [158, 158, 3, "enum_LAST_WRITE"], [160, 153, 2, "enum_LAST_READ"], [160, 160, 3, "enum_LAST_WRITE"], [160, 42, 3, "enum_LAST_WRITE"], [163, 163, 2, "enum_LAST_READ"], [163, 48, 2, "enum_LAST_READ"], [165, 50, 2, "enum_LAST_READ"], [165, 183, 2, "enum_LAST_READ"], [165, 165, 2, "enum_LAST_READ"], [165, 110, 2, "enum_LAST_READ"], [165, 130, 3, "enum_LAST_WRITE"], [167, 167, 2, "enum_LAST_READ"], [167, 132, 2, "enum_LAST_READ"], [167, 2, 3, "enum_LAST_WRITE"], [138, 175, 2, "enum_LAST_READ"], [138, 138, 3, "enum_LAST_WRITE"], [175, 175, 2, "enum_LAST_READ"], [175, 138, 3, "enum_LAST_WRITE"], [179, 179, 2, "enum_LAST_READ"], [179, 119, 2, "enum_LAST_READ"], [179, 124, 3, "enum_LAST_WRITE"], [183, 165, 2, "enum_LAST_READ"], [183, 130, 3, "enum_LAST_WRITE"], [192, 179, 2, "enum_LAST_READ"], [192, 119, 2, "enum_LAST_READ"], [192, 124, 3, "enum_LAST_WRITE"], [192, 9, 3, "enum_LAST_WRITE"], [208, 192, 2, "enum_LAST_READ"], [208, 124, 3, "enum_LAST_WRITE"], [208, 9, 3, "enum_LAST_WRITE"], [227, 208, 2, "enum_LAST_READ"], [227, 124, 3, "enum_LAST_WRITE"], [227, 9, 3, "enum_LAST_WRITE"], [223, 132, 2, "enum_LAST_READ"], [223, 15, 2, "enum_LAST_READ"], [223, 52, 2, "enum_LAST_READ"], [223, 75, 2, "enum_LAST_READ"], [223, 167, 2, "enum_LAST_READ"], [223, 24, 2, "enum_LAST_READ"], [223, 2, 3, "enum_LAST_WRITE"], [224, 227, 4, "enum_COMPUTED_FROM"], [138, 140, 4, "enum_COMPUTED_FROM"], [138, 145, 4, "enum_COMPUTED_FROM"], [138, 151, 4, "enum_COMPUTED_FROM"], [138, 153, 4, "enum_COMPUTED_FROM"], [138, 158, 4, "enum_COMPUTED_FROM"], [138, 160, 4, "enum_COMPUTED_FROM"], [138, 163, 4, "enum_COMPUTED_FROM"], [138, 165, 4, "enum_COMPUTED_FROM"], [138, 167, 4, "enum_COMPUTED_FROM"], [69, 71, 4, "enum_COMPUTED_FROM"], [69, 79, 4, "enum_COMPUTED_FROM"], [69, 75, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "numba", "repo": "numba", "path": "numba/npyufunc/deviceufunc.py", "id": 29061, "has_bug": false, "code_full": "from typing import Any, List, Tuple, Type, Union\n\nimport numpy as np\n\n\nclass UFuncMechanism:\n    scalarpos: List[int] = []\n    typemap: List[Tuple[Union[np.dtype, Type], ...]]\n    argtypes: Tuple[Union[np.dtype, Type], ...]\n    args: List[Any]\n\n    def _resolve_signature(self):\n            \"\"\"Resolve signature.\n            May have ambiguous case.\n            \"\"\"\n            matches: List[Tuple[Union[np.dtype, Type], ...]] = []\n            # Resolve scalar args exact match first\n            if self.scalarpos:\n                # Try resolve scalar arguments\n                for formaltys in self.typemap:\n                    match_map: List[bool] = []\n                    i: int\n                    formal: Union[np.dtype, Type]\n                    actual: Union[np.dtype, Type]\n                    for i, (formal, actual) in enumerate(zip(formaltys,\n                                                            self.argtypes)):\n                        if actual is None:\n                            actual = np.asarray(self.args[i]).dtype\n\n                        match_map.append(actual == formal)\n\n                    if all(match_map):\n                        matches.append(formaltys)\n\n            # No matching with exact match; try coercing the scalar arguments\n            if not matches:\n                matches: List[Tuple[Union[np.dtype, Type], ...]] = []\n                for formaltys in self.typemap:\n                    all_matches: bool = all(actual is None or formal == actual\n                                    for formal, actual in\n                                    zip(formaltys, self.argtypes))\n                    if all_matches:\n                        matches.append(formaltys)\n\n            if not matches:\n                raise TypeError(\"No matching version.  GPU ufunc requires array \"\n                                \"arguments to have the exact types.  This behaves \"\n                                \"like regular ufunc with casting='no'.\")\n\n            if len(matches) > 1:\n                raise TypeError(\"Failed to resolve ufunc due to ambiguous \"\n                                \"signature. Too many untyped scalars. \"\n                                \"Use numpy dtype object to type tag.\")\n\n            # Try scalar arguments\n            self.argtypes = matches[0]\n", "code": "def _resolve_signature(self):\n        \"\"\"Resolve signature.\n        May have ambiguous case.\n        \"\"\"\n        matches: List[Tuple[Union[np.dtype, Type], ...]] = []\n        # Resolve scalar args exact match first\n        if self.scalarpos:\n            # Try resolve scalar arguments\n            for formaltys in self.typemap:\n                match_map: List[bool] = []\n                i: int\n                formal: Union[np.dtype, Type]\n                actual: Union[np.dtype, Type]\n                for i, (formal, actual) in enumerate(zip(formaltys,\n                                                        self.argtypes)):\n                    if actual is None:\n                        actual = np.asarray(self.args[i]).dtype\n\n                    match_map.append(actual == formal)\n\n                if all(match_map):\n                    matches.append(formaltys)\n\n        # No matching with exact match; try coercing the scalar arguments\n        if not matches:\n            matches: List[Tuple[Union[np.dtype, Type], ...]] = []\n            for formaltys in self.typemap:\n                all_matches: bool = all(actual is None or formal == actual\n                                for formal, actual in\n                                zip(formaltys, self.argtypes))\n                if all_matches:\n                    matches.append(formaltys)\n\n        if not matches:\n            raise TypeError(\"No matching version.  GPU ufunc requires array \"\n                            \"arguments to have the exact types.  This behaves \"\n                            \"like regular ufunc with casting='no'.\")\n\n        if len(matches) > 1:\n            raise TypeError(\"Failed to resolve ufunc due to ambiguous \"\n                            \"signature. Too many untyped scalars. \"\n                            \"Use numpy dtype object to type tag.\")\n\n        # Try scalar arguments\n        self.argtypes = matches[0]\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "cd2945f6519c423fa424d64d9f40bedf7a9ca91d"}
{"source_tokens": ["#NEWLINE#", "def add_name(", "self", ",", "name", ")", ":", "#NEWLINE#", "#INDENT#", "item_w", "=", "gtk", ".", "MenuItem", "(", "label", "=", "name", ")", "#NEWLINE#", "child", "=", "Menu", "(", ")", "#NEWLINE#", "self", ".", "add_ref", "(", "child", ")", "#NEWLINE#", "self", ".", "menus", "[", "name", "]", "=", "child", "#NEWLINE#", "item_w", ".", "set_submenu", "(", "child", ".", "get_widget", "(", ")", ")", "#NEWLINE#", "self", ".", "widget", ".", "append", "(", "item_w", ")", "#NEWLINE#", "item_w", ".", "show", "(", ")", "#NEWLINE#", "return", "child"], "edges": [[1, 3, 7, "enum_FIELD"], [8, 14, 7, "enum_FIELD"], [19, 23, 7, "enum_FIELD"], [25, 29, 7, "enum_FIELD"], [32, 40, 7, "enum_FIELD"], [41, 45, 7, "enum_FIELD"], [52, 58, 7, "enum_FIELD"], [61, 65, 7, "enum_FIELD"], [68, 69, 7, "enum_FIELD"], [14, 12, 7, "enum_FIELD"], [23, 22, 7, "enum_FIELD"], [29, 27, 7, "enum_FIELD"], [36, 34, 7, "enum_FIELD"], [36, 37, 7, "enum_FIELD"], [45, 43, 7, "enum_FIELD"], [58, 56, 7, "enum_FIELD"], [65, 63, 7, "enum_FIELD"], [12, 11, 7, "enum_FIELD"], [15, 17, 7, "enum_FIELD"], [27, 26, 7, "enum_FIELD"], [34, 33, 7, "enum_FIELD"], [43, 42, 7, "enum_FIELD"], [49, 47, 7, "enum_FIELD"], [56, 54, 7, "enum_FIELD"], [63, 62, 7, "enum_FIELD"], [47, 46, 7, "enum_FIELD"], [54, 53, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [17, 4, 10, "enum_LAST_LEXICAL_USE"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [26, 2, 10, "enum_LAST_LEXICAL_USE"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [30, 20, 10, "enum_LAST_LEXICAL_USE"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [33, 26, 10, "enum_LAST_LEXICAL_USE"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [37, 17, 10, "enum_LAST_LEXICAL_USE"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [40, 30, 10, "enum_LAST_LEXICAL_USE"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [42, 9, 10, "enum_LAST_LEXICAL_USE"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [46, 40, 10, "enum_LAST_LEXICAL_USE"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [53, 33, 10, "enum_LAST_LEXICAL_USE"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [59, 42, 10, "enum_LAST_LEXICAL_USE"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [62, 59, 10, "enum_LAST_LEXICAL_USE"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 68, 9, "enum_NEXT_SYNTAX"], [69, 46, 10, "enum_LAST_LEXICAL_USE"], [68, 69, 9, "enum_NEXT_SYNTAX"], [3, 8, 1, "enum_CFG_NEXT"], [8, 19, 1, "enum_CFG_NEXT"], [19, 25, 1, "enum_CFG_NEXT"], [25, 32, 1, "enum_CFG_NEXT"], [32, 41, 1, "enum_CFG_NEXT"], [41, 52, 1, "enum_CFG_NEXT"], [52, 61, 1, "enum_CFG_NEXT"], [61, 68, 1, "enum_CFG_NEXT"], [17, 4, 3, "enum_LAST_WRITE"], [26, 2, 3, "enum_LAST_WRITE"], [30, 20, 3, "enum_LAST_WRITE"], [40, 30, 2, "enum_LAST_READ"], [40, 20, 3, "enum_LAST_WRITE"], [33, 26, 2, "enum_LAST_READ"], [33, 2, 3, "enum_LAST_WRITE"], [37, 17, 2, "enum_LAST_READ"], [37, 4, 3, "enum_LAST_WRITE"], [42, 9, 3, "enum_LAST_WRITE"], [46, 40, 2, "enum_LAST_READ"], [46, 20, 3, "enum_LAST_WRITE"], [53, 33, 2, "enum_LAST_READ"], [53, 2, 3, "enum_LAST_WRITE"], [59, 42, 2, "enum_LAST_READ"], [59, 9, 3, "enum_LAST_WRITE"], [62, 59, 2, "enum_LAST_READ"], [62, 9, 3, "enum_LAST_WRITE"], [69, 46, 2, "enum_LAST_READ"], [69, 20, 3, "enum_LAST_WRITE"], [9, 11, 4, "enum_COMPUTED_FROM"], [9, 17, 4, "enum_COMPUTED_FROM"], [20, 22, 4, "enum_COMPUTED_FROM"], [36, 40, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "ejeschke", "repo": "ginga", "path": "ginga/gtkw/Widgets.py", "id": 14625, "has_bug": false, "code_full": "from typing import Any, Dict, List\n\n\nclass Menu:\n    def get_widget(self) -> Any:\n        pass\n\n\nclass gtk:\n    class MenuItem:\n        def __init__(self, label: str):\n            pass\n\n        def set_submenu(self, menu: Menu):\n            pass\n\n        def show(self):\n            pass\n\n\nclass Menubar:\n    menus: Dict[str, Menu]\n    widget: List[Any]\n\n    def add_ref(self, child: Menu):\n        pass\n\n    def add_name(self, name: str) -> Menu:\n        item_w: gtk.MenuItem = gtk.MenuItem(label=name)\n        child: Menu = Menu()\n        self.add_ref(child)\n        self.menus[name] = child\n        item_w.set_submenu(child.get_widget())\n        self.widget.append(item_w)\n        item_w.show()\n        return child\n", "code": "def add_name(self, name: str) -> Menu:\n    item_w: gtk.MenuItem = gtk.MenuItem(label=name)\n    child: Menu = Menu()\n    self.add_ref(child)\n    self.menus[name] = child\n    item_w.set_submenu(child.get_widget())\n    self.widget.append(item_w)\n    item_w.show()\n    return child\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "5111ff2b49969eb7153312ac2ce1fae296ca763a"}
{"source_tokens": ["#NEWLINE#", "def fail_schedule_activity_task(", "_type", ",", "_cause", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "_add_event", "(", "'ScheduleActivityTaskFailed'", ",", "activity_id", "=", "attributes", "[", "'activityId'", "]", ",", "activity_type", "=", "_type", ",", "cause", "=", "_cause", ",", "decision_task_completed_event_id", "=", "event_id", ")", "#NEWLINE#", "self", ".", "should_schedule_decision_next", "=", "True"], "edges": [[1, 3, 7, "enum_FIELD"], [8, 21, 7, "enum_FIELD"], [34, 39, 7, "enum_FIELD"], [21, 10, 7, "enum_FIELD"], [36, 35, 7, "enum_FIELD"], [10, 9, 7, "enum_FIELD"], [15, 18, 7, "enum_FIELD"], [22, 24, 7, "enum_FIELD"], [26, 28, 7, "enum_FIELD"], [30, 32, 7, "enum_FIELD"], [18, 17, 7, "enum_FIELD"], [18, 19, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [24, 2, 10, "enum_LAST_LEXICAL_USE"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [28, 4, 10, "enum_LAST_LEXICAL_USE"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [35, 9, 10, "enum_LAST_LEXICAL_USE"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [3, 8, 1, "enum_CFG_NEXT"], [8, 34, 1, "enum_CFG_NEXT"], [24, 2, 3, "enum_LAST_WRITE"], [28, 4, 3, "enum_LAST_WRITE"], [35, 9, 2, "enum_LAST_READ"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "spulec", "repo": "moto", "path": "moto/swf/models/workflow_execution.py", "id": 52583, "has_bug": false, "code_full": "\nfrom typing import Dict\n\n\nclass WorkflowExecution:\n    should_schedule_decision_next: bool\n\n    def _add_event(self, event_type: str, activity_type: str, activity_id: str, cause: str, decision_task_completed_event_id: str):\n        pass\n\n    def schedule_activity_task(self, event_id: str, attributes: Dict[str, str]):\n        def fail_schedule_activity_task(_type: str, _cause: str):\n            # TODO: implement other possible failure mode: OPEN_ACTIVITIES_LIMIT_EXCEEDED\n            # NB: some failure modes are not implemented and probably won't be implemented in\n            # the future, such as ACTIVITY_CREATION_RATE_EXCEEDED or OPERATION_NOT_PERMITTED\n            self._add_event(\n                \"ScheduleActivityTaskFailed\",\n                activity_id=attributes[\"activityId\"],\n                activity_type=_type,\n                cause=_cause,\n                decision_task_completed_event_id=event_id,\n            )\n            self.should_schedule_decision_next = True\n", "code": "def schedule_activity_task(self, event_id: str, attributes: Dict[str, str]):\n    def fail_schedule_activity_task(_type: str, _cause: str):\n        # TODO: implement other possible failure mode: OPEN_ACTIVITIES_LIMIT_EXCEEDED\n        # NB: some failure modes are not implemented and probably won't be implemented in\n        # the future, such as ACTIVITY_CREATION_RATE_EXCEEDED or OPERATION_NOT_PERMITTED\n        self._add_event(\n            \"ScheduleActivityTaskFailed\",\n            activity_id=attributes[\"activityId\"],\n            activity_type=_type,\n            cause=_cause,\n            decision_task_completed_event_id=event_id,\n        )\n        self.should_schedule_decision_next = True\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "b5ff3345bee181f136aaf235428078e2aaa910a1"}
{"source_tokens": ["#NEWLINE#", "def test_create_with_maximum_size(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    A maximum size included with the creation of a dataset is included in\\n    the persisted configuration and response body.\\n    '", "#NEWLINE#", "dataset_id", "=", "unicode", "(", "uuid4", "(", ")", ")", "#NEWLINE#", "maximum_size", "=", "(", "(", "(", "1024", "*", "1024", ")", "*", "1024", ")", "*", "42", ")", "#NEWLINE#", "dataset", "=", "{", "u", "'primary'", ":", "self", ".", "NODE_A", ",", "u", "'dataset_id'", ":", "dataset_id", ",", "u", "'maximum_size'", ":", "maximum_size", "}", "#NEWLINE#", "response", "=", "dataset", ".", "copy", "(", ")", "#NEWLINE#", "response", "[", "u", "'metadata'", "]", "=", "{", "}", "#NEWLINE#", "response", "[", "u", "'deleted'", "]", "=", "False", "#NEWLINE#", "creating", "=", "self", ".", "assertResult", "(", "b'POST'", ",", "b'/configuration/datasets'", ",", "dataset", ",", "CREATED", ",", "response", ")", "#NEWLINE#", "def created(", "ignored", ")", ":", "#NEWLINE#", "#INDENT#", "deployment", "=", "self", ".", "persistence_service", ".", "get", "(", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "Deployment", "(", "nodes", "=", "frozenset", "(", "{", "Node", "(", "uuid", "=", "self", ".", "NODE_A_UUID", ",", "manifestations", "=", "{", "dataset_id", ":", "Manifestation", "(", "dataset", "=", "Dataset", "(", "dataset_id", "=", "dataset_id", ",", "maximum_size", "=", "maximum_size", ")", ",", "primary", "=", "True", ")", "}", ")", "}", ")", ")", ",", "deployment", ")", "#NEWLINE#", "#UNINDENT#", "creating", ".", "addCallback", "(", "created", ")", "#NEWLINE#", "return", "creating"], "edges": [[6, 7, 7, "enum_FIELD"], [8, 12, 7, "enum_FIELD"], [17, 30, 7, "enum_FIELD"], [33, 46, 7, "enum_FIELD"], [54, 60, 7, "enum_FIELD"], [62, 69, 7, "enum_FIELD"], [71, 78, 7, "enum_FIELD"], [79, 89, 7, "enum_FIELD"], [165, 169, 7, "enum_FIELD"], [173, 174, 7, "enum_FIELD"], [12, 11, 7, "enum_FIELD"], [30, 27, 7, "enum_FIELD"], [30, 31, 7, "enum_FIELD"], [60, 58, 7, "enum_FIELD"], [64, 63, 7, "enum_FIELD"], [64, 65, 7, "enum_FIELD"], [73, 72, 7, "enum_FIELD"], [73, 74, 7, "enum_FIELD"], [89, 83, 7, "enum_FIELD"], [102, 110, 7, "enum_FIELD"], [112, 161, 7, "enum_FIELD"], [169, 167, 7, "enum_FIELD"], [14, 13, 7, "enum_FIELD"], [27, 24, 7, "enum_FIELD"], [27, 28, 7, "enum_FIELD"], [41, 40, 7, "enum_FIELD"], [58, 57, 7, "enum_FIELD"], [83, 82, 7, "enum_FIELD"], [110, 108, 7, "enum_FIELD"], [161, 114, 7, "enum_FIELD"], [167, 166, 7, "enum_FIELD"], [24, 23, 7, "enum_FIELD"], [24, 25, 7, "enum_FIELD"], [108, 106, 7, "enum_FIELD"], [114, 113, 7, "enum_FIELD"], [118, 117, 7, "enum_FIELD"], [106, 105, 7, "enum_FIELD"], [119, 122, 7, "enum_FIELD"], [122, 121, 7, "enum_FIELD"], [131, 124, 7, "enum_FIELD"], [126, 129, 7, "enum_FIELD"], [132, 136, 7, "enum_FIELD"], [129, 128, 7, "enum_FIELD"], [151, 137, 7, "enum_FIELD"], [139, 146, 7, "enum_FIELD"], [152, 154, 7, "enum_FIELD"], [146, 141, 7, "enum_FIELD"], [143, 145, 7, "enum_FIELD"], [147, 149, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [40, 2, 10, "enum_LAST_LEXICAL_USE"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [47, 9, 10, "enum_LAST_LEXICAL_USE"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [52, 18, 10, "enum_LAST_LEXICAL_USE"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [57, 34, 10, "enum_LAST_LEXICAL_USE"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [63, 55, 10, "enum_LAST_LEXICAL_USE"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [72, 63, 10, "enum_LAST_LEXICAL_USE"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [82, 40, 10, "enum_LAST_LEXICAL_USE"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [90, 57, 10, "enum_LAST_LEXICAL_USE"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [94, 72, 10, "enum_LAST_LEXICAL_USE"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [105, 82, 10, "enum_LAST_LEXICAL_USE"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [113, 105, 10, "enum_LAST_LEXICAL_USE"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [128, 113, 10, "enum_LAST_LEXICAL_USE"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [135, 47, 10, "enum_LAST_LEXICAL_USE"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [145, 135, 10, "enum_LAST_LEXICAL_USE"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [149, 52, 10, "enum_LAST_LEXICAL_USE"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [162, 103, 10, "enum_LAST_LEXICAL_USE"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 165, 9, "enum_NEXT_SYNTAX"], [166, 80, 10, "enum_LAST_LEXICAL_USE"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 173, 9, "enum_NEXT_SYNTAX"], [174, 166, 10, "enum_LAST_LEXICAL_USE"], [173, 174, 9, "enum_NEXT_SYNTAX"], [6, 8, 1, "enum_CFG_NEXT"], [8, 17, 1, "enum_CFG_NEXT"], [17, 33, 1, "enum_CFG_NEXT"], [33, 54, 1, "enum_CFG_NEXT"], [54, 62, 1, "enum_CFG_NEXT"], [62, 71, 1, "enum_CFG_NEXT"], [71, 79, 1, "enum_CFG_NEXT"], [79, 99, 1, "enum_CFG_NEXT"], [99, 165, 1, "enum_CFG_NEXT"], [102, 112, 1, "enum_CFG_NEXT"], [165, 173, 1, "enum_CFG_NEXT"], [40, 2, 3, "enum_LAST_WRITE"], [47, 9, 3, "enum_LAST_WRITE"], [52, 18, 3, "enum_LAST_WRITE"], [57, 34, 3, "enum_LAST_WRITE"], [63, 55, 3, "enum_LAST_WRITE"], [72, 63, 2, "enum_LAST_READ"], [72, 55, 3, "enum_LAST_WRITE"], [82, 40, 2, "enum_LAST_READ"], [82, 2, 3, "enum_LAST_WRITE"], [90, 57, 2, "enum_LAST_READ"], [90, 34, 3, "enum_LAST_WRITE"], [94, 72, 2, "enum_LAST_READ"], [94, 55, 3, "enum_LAST_WRITE"], [113, 105, 2, "enum_LAST_READ"], [128, 113, 2, "enum_LAST_READ"], [145, 135, 2, "enum_LAST_READ"], [162, 103, 3, "enum_LAST_WRITE"], [166, 80, 3, "enum_LAST_WRITE"], [170, 99, 3, "enum_LAST_WRITE"], [174, 166, 2, "enum_LAST_READ"], [174, 80, 3, "enum_LAST_WRITE"], [9, 11, 4, "enum_COMPUTED_FROM"], [9, 13, 4, "enum_COMPUTED_FROM"], [34, 47, 4, "enum_COMPUTED_FROM"], [34, 52, 4, "enum_COMPUTED_FROM"], [34, 40, 4, "enum_COMPUTED_FROM"], [55, 57, 4, "enum_COMPUTED_FROM"], [80, 90, 4, "enum_COMPUTED_FROM"], [80, 92, 4, "enum_COMPUTED_FROM"], [80, 94, 4, "enum_COMPUTED_FROM"], [80, 82, 4, "enum_COMPUTED_FROM"], [103, 105, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "ClusterHQ", "repo": "flocker", "path": "flocker/control/test/test_httpapi.py", "id": 3873, "has_bug": false, "code_full": "import unittest\nfrom typing import Any, Dict, List\nfrom uuid import uuid4\n\nfrom twisted.internet.defer import Deferred\nfrom twisted.web.http import CREATED\n\n\nclass Dataset:\n    dataset_id: str\n    maximum_size: int\n\n    def __init__(self, dataset_id: str, maximum_size: int):\n        self.dataset_id = dataset_id\n        self.maximum_size = maximum_size\n\n\nclass Manifestation:\n    dataset: Dataset\n    primary: bool\n\n    def __init__(self, dataset: Dataset, primary: bool):\n        self.dataset = dataset\n        self.primary = primary\n\n\nclass Node:\n    uuid: str\n    manifestations: Dict[str, Manifestation]\n\n    def __init__(self, uuid: str, manifestations: Dict[str, Manifestation]):\n        self.uuid = uuid\n        self.manifestations = manifestations\n\n\nclass Deployment:\n    nodes: frozenset[Node]\n\n    def __init__(self, nodes: frozenset[Node]):\n        self.nodes = nodes\n\n\nunicode = str\n\n\nclass CreateDatasetTestsMixin(unittest.TestCase):\n    NODE_A: str\n    NODE_A_UUID: str\n    persistence_service: Any\n\n    def assertResult(self, a: Any, b: Any, c: Any, d: Any, e: Any) -> Any:\n        pass\n\n    def test_create_with_maximum_size(self) -> Deferred:\n        \"\"\"\n        A maximum size included with the creation of a dataset is included in\n        the persisted configuration and response body.\n        \"\"\"\n        dataset_id: str = unicode(uuid4())\n        maximum_size: int = 1024 * 1024 * 1024 * 42\n        dataset: Dict[str, Any] = {\n            u\"primary\": self.NODE_A,\n            u\"dataset_id\": dataset_id,\n            u\"maximum_size\": maximum_size,\n        }\n        response: Dict[str, Any] = dataset.copy()\n        response[u\"metadata\"] = {}\n        response[u\"deleted\"] = False\n        creating = self.assertResult(\n            b\"POST\", b\"/configuration/datasets\", dataset, CREATED, response\n        )\n\n        def created(ignored: Any):\n            deployment: Any = self.persistence_service.get()\n            self.assertEqual(\n                Deployment(nodes=frozenset({\n                    Node(\n                        uuid=self.NODE_A_UUID,\n                        manifestations={\n                            dataset_id: Manifestation(\n                                dataset=Dataset(\n                                    dataset_id=dataset_id,\n                                    maximum_size=maximum_size\n                                ),\n                                primary=True\n                            )\n                        }\n                    )\n                })),\n                deployment\n            )\n        creating.addCallback(created)\n        return creating\n", "code": "def test_create_with_maximum_size(self) -> Deferred:\n    \"\"\"\n    A maximum size included with the creation of a dataset is included in\n    the persisted configuration and response body.\n    \"\"\"\n    dataset_id: str = unicode(uuid4())\n    maximum_size: int = 1024 * 1024 * 1024 * 42\n    dataset: Dict[str, Any] = {\n        u\"primary\": self.NODE_A,\n        u\"dataset_id\": dataset_id,\n        u\"maximum_size\": maximum_size,\n    }\n    response: Dict[str, Any] = dataset.copy()\n    response[u\"metadata\"] = {}\n    response[u\"deleted\"] = False\n    creating = self.assertResult(\n        b\"POST\", b\"/configuration/datasets\", dataset, CREATED, response\n    )\n\n    def created(ignored: Any):\n        deployment: Any = self.persistence_service.get()\n        self.assertEqual(\n            Deployment(nodes=frozenset({\n                Node(\n                    uuid=self.NODE_A_UUID,\n                    manifestations={\n                        dataset_id: Manifestation(\n                            dataset=Dataset(\n                                dataset_id=dataset_id,\n                                maximum_size=maximum_size\n                            ),\n                            primary=True\n                        )\n                    }\n                )\n            })),\n            deployment\n        )\n    creating.addCallback(created)\n    return creating\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "eaa586248986d7cd681c99c948546c2b507e44de"}
{"source_tokens": ["#NEWLINE#", "def testUserInterpolation(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'User interpolation returns a list of paths.'", "#NEWLINE#", "path", "=", "'{homedir}\\\\dir'", "#NEWLINE#", "new_path", "=", "flow_utils", ".", "InterpolatePath", "(", "path", ",", "self", ".", "client", ",", "users", "=", "[", "'test'", "]", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "new_path", "[", "0", "]", ".", "lower", "(", ")", ",", "'c:\\\\users\\\\test\\\\dir'", ")", "#NEWLINE#", "path", "=", "'{systemroot}\\\\{last_logon}\\\\dir'", "#NEWLINE#", "new_path", "=", "flow_utils", ".", "InterpolatePath", "(", "path", ",", "self", ".", "client", ",", "users", "=", "[", "'test'", "]", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "new_path", "[", "0", "]", ".", "lower", "(", ")", ",", "'c:\\\\windows\\\\2012-11-10 00:00:00\\\\dir'", ")", "#NEWLINE#", "path", "=", "'{homedir}\\\\a'", "#NEWLINE#", "new_path", "=", "flow_utils", ".", "InterpolatePath", "(", "path", ",", "self", ".", "client", ",", "users", "=", "[", "'test'", ",", "'test2'", "]", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "len", "(", "new_path", ")", ",", "2", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "new_path", "[", "0", "]", ".", "lower", "(", ")", ",", "'c:\\\\users\\\\test\\\\a'", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "new_path", "[", "1", "]", ".", "lower", "(", ")", ",", "'c:\\\\users\\\\test2\\\\a'", ")", "#NEWLINE#", "new_path", "=", "flow_utils", ".", "InterpolatePath", "(", "'{does_not_exist}'", ",", "self", ".", "client", ",", "users", "=", "[", "'test'", "]", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "new_path", ",", "[", "]", ")"], "edges": [[6, 7, 7, "enum_FIELD"], [8, 11, 7, "enum_FIELD"], [12, 20, 7, "enum_FIELD"], [31, 44, 7, "enum_FIELD"], [47, 50, 7, "enum_FIELD"], [51, 59, 7, "enum_FIELD"], [70, 83, 7, "enum_FIELD"], [86, 89, 7, "enum_FIELD"], [90, 98, 7, "enum_FIELD"], [111, 120, 7, "enum_FIELD"], [123, 136, 7, "enum_FIELD"], [139, 152, 7, "enum_FIELD"], [155, 163, 7, "enum_FIELD"], [174, 180, 7, "enum_FIELD"], [20, 16, 7, "enum_FIELD"], [44, 33, 7, "enum_FIELD"], [59, 55, 7, "enum_FIELD"], [83, 72, 7, "enum_FIELD"], [98, 94, 7, "enum_FIELD"], [120, 113, 7, "enum_FIELD"], [136, 125, 7, "enum_FIELD"], [152, 141, 7, "enum_FIELD"], [163, 159, 7, "enum_FIELD"], [180, 176, 7, "enum_FIELD"], [16, 15, 7, "enum_FIELD"], [22, 21, 7, "enum_FIELD"], [25, 27, 7, "enum_FIELD"], [33, 32, 7, "enum_FIELD"], [42, 40, 7, "enum_FIELD"], [55, 54, 7, "enum_FIELD"], [61, 60, 7, "enum_FIELD"], [64, 66, 7, "enum_FIELD"], [72, 71, 7, "enum_FIELD"], [81, 79, 7, "enum_FIELD"], [94, 93, 7, "enum_FIELD"], [100, 99, 7, "enum_FIELD"], [103, 107, 7, "enum_FIELD"], [113, 112, 7, "enum_FIELD"], [117, 116, 7, "enum_FIELD"], [125, 124, 7, "enum_FIELD"], [134, 132, 7, "enum_FIELD"], [141, 140, 7, "enum_FIELD"], [150, 148, 7, "enum_FIELD"], [159, 158, 7, "enum_FIELD"], [165, 164, 7, "enum_FIELD"], [168, 170, 7, "enum_FIELD"], [176, 175, 7, "enum_FIELD"], [40, 37, 7, "enum_FIELD"], [79, 76, 7, "enum_FIELD"], [132, 129, 7, "enum_FIELD"], [148, 145, 7, "enum_FIELD"], [37, 36, 7, "enum_FIELD"], [37, 38, 7, "enum_FIELD"], [76, 75, 7, "enum_FIELD"], [76, 77, 7, "enum_FIELD"], [129, 128, 7, "enum_FIELD"], [129, 130, 7, "enum_FIELD"], [145, 144, 7, "enum_FIELD"], [145, 146, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [19, 9, 10, "enum_LAST_LEXICAL_USE"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [21, 2, 10, "enum_LAST_LEXICAL_USE"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [32, 21, 10, "enum_LAST_LEXICAL_USE"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [36, 13, 10, "enum_LAST_LEXICAL_USE"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [48, 19, 10, "enum_LAST_LEXICAL_USE"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [52, 36, 10, "enum_LAST_LEXICAL_USE"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [54, 15, 10, "enum_LAST_LEXICAL_USE"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [58, 48, 10, "enum_LAST_LEXICAL_USE"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [60, 32, 10, "enum_LAST_LEXICAL_USE"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [71, 60, 10, "enum_LAST_LEXICAL_USE"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [75, 52, 10, "enum_LAST_LEXICAL_USE"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [87, 58, 10, "enum_LAST_LEXICAL_USE"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [91, 75, 10, "enum_LAST_LEXICAL_USE"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [93, 54, 10, "enum_LAST_LEXICAL_USE"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [97, 87, 10, "enum_LAST_LEXICAL_USE"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [99, 71, 10, "enum_LAST_LEXICAL_USE"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [112, 99, 10, "enum_LAST_LEXICAL_USE"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [118, 91, 10, "enum_LAST_LEXICAL_USE"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [124, 112, 10, "enum_LAST_LEXICAL_USE"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [128, 118, 10, "enum_LAST_LEXICAL_USE"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [140, 124, 10, "enum_LAST_LEXICAL_USE"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [144, 128, 10, "enum_LAST_LEXICAL_USE"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [156, 144, 10, "enum_LAST_LEXICAL_USE"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [158, 93, 10, "enum_LAST_LEXICAL_USE"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [164, 140, 10, "enum_LAST_LEXICAL_USE"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [175, 164, 10, "enum_LAST_LEXICAL_USE"], [174, 175, 9, "enum_NEXT_SYNTAX"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 178, 9, "enum_NEXT_SYNTAX"], [179, 156, 10, "enum_LAST_LEXICAL_USE"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [6, 8, 1, "enum_CFG_NEXT"], [8, 12, 1, "enum_CFG_NEXT"], [12, 31, 1, "enum_CFG_NEXT"], [31, 47, 1, "enum_CFG_NEXT"], [47, 51, 1, "enum_CFG_NEXT"], [51, 70, 1, "enum_CFG_NEXT"], [70, 86, 1, "enum_CFG_NEXT"], [86, 90, 1, "enum_CFG_NEXT"], [90, 111, 1, "enum_CFG_NEXT"], [111, 123, 1, "enum_CFG_NEXT"], [123, 139, 1, "enum_CFG_NEXT"], [139, 155, 1, "enum_CFG_NEXT"], [155, 174, 1, "enum_CFG_NEXT"], [19, 9, 3, "enum_LAST_WRITE"], [21, 2, 3, "enum_LAST_WRITE"], [32, 21, 2, "enum_LAST_READ"], [32, 2, 3, "enum_LAST_WRITE"], [36, 13, 3, "enum_LAST_WRITE"], [48, 19, 2, "enum_LAST_READ"], [48, 9, 3, "enum_LAST_WRITE"], [54, 15, 2, "enum_LAST_READ"], [58, 19, 2, "enum_LAST_READ"], [58, 48, 3, "enum_LAST_WRITE"], [60, 32, 2, "enum_LAST_READ"], [60, 2, 3, "enum_LAST_WRITE"], [52, 36, 2, "enum_LAST_READ"], [52, 13, 3, "enum_LAST_WRITE"], [71, 60, 2, "enum_LAST_READ"], [71, 2, 3, "enum_LAST_WRITE"], [75, 36, 2, "enum_LAST_READ"], [75, 52, 3, "enum_LAST_WRITE"], [87, 58, 2, "enum_LAST_READ"], [87, 48, 3, "enum_LAST_WRITE"], [93, 54, 2, "enum_LAST_READ"], [97, 58, 2, "enum_LAST_READ"], [97, 87, 3, "enum_LAST_WRITE"], [99, 71, 2, "enum_LAST_READ"], [99, 2, 3, "enum_LAST_WRITE"], [91, 75, 2, "enum_LAST_READ"], [91, 52, 3, "enum_LAST_WRITE"], [112, 99, 2, "enum_LAST_READ"], [112, 2, 3, "enum_LAST_WRITE"], [118, 75, 2, "enum_LAST_READ"], [118, 91, 3, "enum_LAST_WRITE"], [124, 112, 2, "enum_LAST_READ"], [124, 2, 3, "enum_LAST_WRITE"], [128, 118, 2, "enum_LAST_READ"], [128, 91, 3, "enum_LAST_WRITE"], [140, 124, 2, "enum_LAST_READ"], [140, 2, 3, "enum_LAST_WRITE"], [144, 128, 2, "enum_LAST_READ"], [144, 91, 3, "enum_LAST_WRITE"], [158, 93, 2, "enum_LAST_READ"], [164, 140, 2, "enum_LAST_READ"], [164, 2, 3, "enum_LAST_WRITE"], [156, 144, 2, "enum_LAST_READ"], [156, 91, 3, "enum_LAST_WRITE"], [175, 164, 2, "enum_LAST_READ"], [175, 2, 3, "enum_LAST_WRITE"], [179, 144, 2, "enum_LAST_READ"], [179, 156, 3, "enum_LAST_WRITE"], [13, 19, 4, "enum_COMPUTED_FROM"], [13, 15, 4, "enum_COMPUTED_FROM"], [13, 21, 4, "enum_COMPUTED_FROM"], [52, 58, 4, "enum_COMPUTED_FROM"], [52, 54, 4, "enum_COMPUTED_FROM"], [52, 60, 4, "enum_COMPUTED_FROM"], [91, 97, 4, "enum_COMPUTED_FROM"], [91, 93, 4, "enum_COMPUTED_FROM"], [91, 99, 4, "enum_COMPUTED_FROM"], [156, 158, 4, "enum_COMPUTED_FROM"], [156, 164, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "google", "repo": "grr", "path": "grr/lib/flow_utils_test.py", "id": 19935, "has_bug": false, "code_full": "import unittest\nfrom typing import Any, List\n\n\nclass flow_utils:\n    @staticmethod\n    def InterpolatePath(path: str, client: Any, users: List[str]) -> List[str]:\n        return []\n\n\nclass Class(unittest.TestCase):\n    client: Any\n\n    def testUserInterpolation(self):\n        \"\"\"User interpolation returns a list of paths.\"\"\"\n        path: str = \"{homedir}\\dir\"\n        new_path: List[str] = flow_utils.InterpolatePath(path, self.client, users=[\"test\"])\n        self.assertEqual(new_path[0].lower(), \"c:\\users\\test\\dir\")\n\n        path: str = \"{systemroot}\\{last_logon}\\dir\"\n        new_path: List[str] = flow_utils.InterpolatePath(path, self.client, users=[\"test\"])\n        self.assertEqual(new_path[0].lower(),\n                            \"c:\\windows\\2012-11-10 00:00:00\\dir\")\n\n        path: str = \"{homedir}\\a\"\n        new_path: List[str] = flow_utils.InterpolatePath(\n            path, self.client, users=[\"test\", \"test2\"])\n        self.assertEqual(len(new_path), 2)\n        self.assertEqual(new_path[0].lower(), \"c:\\users\\test\\a\")\n        self.assertEqual(new_path[1].lower(), \"c:\\users\\test2\\a\")\n\n        new_path: List[str] = flow_utils.InterpolatePath(\n            \"{does_not_exist}\", self.client, users=[\"test\"])\n        self.assertEqual(new_path, [])\n", "code": "def testUserInterpolation(self):\n    \"\"\"User interpolation returns a list of paths.\"\"\"\n    path: str = \"{homedir}\\dir\"\n    new_path: List[str] = flow_utils.InterpolatePath(path, self.client, users=[\"test\"])\n    self.assertEqual(new_path[0].lower(), \"c:\\users\\test\\dir\")\n\n    path: str = \"{systemroot}\\{last_logon}\\dir\"\n    new_path: List[str] = flow_utils.InterpolatePath(path, self.client, users=[\"test\"])\n    self.assertEqual(new_path[0].lower(),\n                        \"c:\\windows\\2012-11-10 00:00:00\\dir\")\n\n    path: str = \"{homedir}\\a\"\n    new_path: List[str] = flow_utils.InterpolatePath(\n        path, self.client, users=[\"test\", \"test2\"])\n    self.assertEqual(len(new_path), 2)\n    self.assertEqual(new_path[0].lower(), \"c:\\users\\test\\a\")\n    self.assertEqual(new_path[1].lower(), \"c:\\users\\test2\\a\")\n\n    new_path: List[str] = flow_utils.InterpolatePath(\n        \"{does_not_exist}\", self.client, users=[\"test\"])\n    self.assertEqual(new_path, [])\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "7b0e6c18ea47e5361e36554beebdb9fc112f7350"}
{"source_tokens": ["#NEWLINE#", "def __get__(", "self", ",", "oself", ",", "type", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    When used as a descriptor, i.e.::\\n\\n        # File: athing.py\\n        class Something(object):\\n            log = Logger()\\n            def hello(self):\\n                self.log.info(\"Hello\")\\n\\n    a L{Logger}\\'s namespace will be set to the name of the class it is\\n    declared on.  In the above example, the namespace would be\\n    C{athing.Something}.\\n\\n    Additionally, its source will be set to the actual object referring to\\n    the L{Logger}.  In the above example, C{Something.log.source} would be\\n    C{Something}, and C{Something().log.source} would be an instance of\\n    C{Something}.\\n    '", "#NEWLINE#", "if", "(", "oself", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "source", "=", "type", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "source", "=", "oself", "#NEWLINE#", "#UNINDENT#", "return", "self", ".", "__class__", "(", "'.'", ".", "join", "(", "[", "type", ".", "__module__", ",", "type", ".", "__name__", "]", ")", ",", "source", ",", "observer", "=", "self", ".", "observer", ")"], "edges": [[1, 5, 7, "enum_FIELD"], [12, 13, 7, "enum_FIELD"], [21, 18, 7, "enum_FIELD"], [38, 57, 7, "enum_FIELD"], [18, 17, 7, "enum_FIELD"], [23, 26, 7, "enum_FIELD"], [32, 35, 7, "enum_FIELD"], [57, 40, 7, "enum_FIELD"], [40, 39, 7, "enum_FIELD"], [46, 44, 7, "enum_FIELD"], [60, 63, 7, "enum_FIELD"], [44, 43, 7, "enum_FIELD"], [63, 62, 7, "enum_FIELD"], [49, 48, 7, "enum_FIELD"], [53, 52, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [17, 4, 10, "enum_LAST_LEXICAL_USE"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [26, 6, 10, "enum_LAST_LEXICAL_USE"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 32, 9, "enum_NEXT_SYNTAX"], [33, 24, 10, "enum_LAST_LEXICAL_USE"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [35, 17, 10, "enum_LAST_LEXICAL_USE"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 38, 9, "enum_NEXT_SYNTAX"], [39, 2, 10, "enum_LAST_LEXICAL_USE"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [48, 26, 10, "enum_LAST_LEXICAL_USE"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [52, 48, 10, "enum_LAST_LEXICAL_USE"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [58, 33, 10, "enum_LAST_LEXICAL_USE"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [62, 39, 10, "enum_LAST_LEXICAL_USE"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [8, 1, 1, "enum_CFG_NEXT"], [5, 12, 1, "enum_CFG_NEXT"], [12, 18, 1, "enum_CFG_NEXT"], [18, 23, 1, "enum_CFG_NEXT"], [18, 32, 1, "enum_CFG_NEXT"], [23, 38, 1, "enum_CFG_NEXT"], [32, 38, 1, "enum_CFG_NEXT"], [17, 4, 3, "enum_LAST_WRITE"], [26, 6, 3, "enum_LAST_WRITE"], [35, 17, 2, "enum_LAST_READ"], [35, 4, 3, "enum_LAST_WRITE"], [39, 2, 3, "enum_LAST_WRITE"], [48, 26, 2, "enum_LAST_READ"], [48, 6, 3, "enum_LAST_WRITE"], [52, 48, 2, "enum_LAST_READ"], [52, 6, 3, "enum_LAST_WRITE"], [58, 33, 3, "enum_LAST_WRITE"], [58, 24, 3, "enum_LAST_WRITE"], [62, 39, 2, "enum_LAST_READ"], [62, 2, 3, "enum_LAST_WRITE"], [24, 26, 4, "enum_COMPUTED_FROM"], [33, 35, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "twisted", "repo": "twisted", "path": "twisted/logger/_logger.py", "id": 58696, "has_bug": false, "code_full": "from typing import Any, Optional, Type\n\n\nclass Logger:\n    namespace: str\n    source: Any\n    observer: Any\n\n    def __init__(self, namespace: Optional[str]=None, source: Any=None, observer: Any=None):\n        pass\n\n    def __get__(self, oself: Optional[Any], type: Any=None) -> \"Logger\":\n        \"\"\"\n        When used as a descriptor, i.e.::\n\n            # File: athing.py\n            class Something(object):\n                log = Logger()\n                def hello(self):\n                    self.log.info(\"Hello\")\n\n        a L{Logger}'s namespace will be set to the name of the class it is\n        declared on.  In the above example, the namespace would be\n        C{athing.Something}.\n\n        Additionally, its source will be set to the actual object referring to\n        the L{Logger}.  In the above example, C{Something.log.source} would be\n        C{Something}, and C{Something().log.source} would be an instance of\n        C{Something}.\n        \"\"\"\n        if oself is None:\n            source = type\n        else:\n            source = self\n\n        return self.__class__(\n            \".\".join([type.__module__, type.__name__]),\n            source,\n            observer=self.observer,\n        )\n", "code": "def __get__(self, oself: Optional[Any], type: Any=None) -> \"Logger\":\n    \"\"\"\n    When used as a descriptor, i.e.::\n\n        # File: athing.py\n        class Something(object):\n            log = Logger()\n            def hello(self):\n                self.log.info(\"Hello\")\n\n    a L{Logger}'s namespace will be set to the name of the class it is\n    declared on.  In the above example, the namespace would be\n    C{athing.Something}.\n\n    Additionally, its source will be set to the actual object referring to\n    the L{Logger}.  In the above example, C{Something.log.source} would be\n    C{Something}, and C{Something().log.source} would be an instance of\n    C{Something}.\n    \"\"\"\n    if oself is None:\n        source = type\n    else:\n        source = self\n\n    return self.__class__(\n        \".\".join([type.__module__, type.__name__]),\n        source,\n        observer=self.observer,\n    )\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "8537a1f6b93728ec9ef8b39963d3fbbd761d43b1"}
{"source_tokens": ["#NEWLINE#", "def testSimpleOutput(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "orig", "=", "conf", ".", "supybot", ".", "plugins", ".", "Karma", ".", "simpleOutput", "(", ")", "#NEWLINE#", "conf", ".", "supybot", ".", "plugins", ".", "Karma", ".", "simpleOutput", ".", "setValue", "(", "True", ")", "#NEWLINE#", "self", ".", "assertNoResponse", "(", "'foo++'", ",", "2", ")", "#NEWLINE#", "self", ".", "assertResponse", "(", "'karma foo'", ",", "'foo: 1'", ")", "#NEWLINE#", "self", ".", "assertNoResponse", "(", "'bar--'", ",", "2", ")", "#NEWLINE#", "self", ".", "assertResponse", "(", "'karma bar'", ",", "'bar: -1'", ")", "#NEWLINE#", "#UNINDENT#", "finally", ":", "#NEWLINE#", "#INDENT#", "conf", ".", "supybot", ".", "plugins", ".", "Karma", ".", "simpleOutput", ".", "setValue", "(", "orig", ")"], "edges": [[10, 22, 7, "enum_FIELD"], [24, 36, 7, "enum_FIELD"], [39, 45, 7, "enum_FIELD"], [48, 54, 7, "enum_FIELD"], [57, 63, 7, "enum_FIELD"], [66, 72, 7, "enum_FIELD"], [80, 92, 7, "enum_FIELD"], [22, 20, 7, "enum_FIELD"], [36, 34, 7, "enum_FIELD"], [45, 41, 7, "enum_FIELD"], [54, 50, 7, "enum_FIELD"], [63, 59, 7, "enum_FIELD"], [72, 68, 7, "enum_FIELD"], [92, 90, 7, "enum_FIELD"], [20, 18, 7, "enum_FIELD"], [34, 32, 7, "enum_FIELD"], [41, 40, 7, "enum_FIELD"], [50, 49, 7, "enum_FIELD"], [59, 58, 7, "enum_FIELD"], [68, 67, 7, "enum_FIELD"], [90, 88, 7, "enum_FIELD"], [18, 16, 7, "enum_FIELD"], [32, 30, 7, "enum_FIELD"], [88, 86, 7, "enum_FIELD"], [16, 14, 7, "enum_FIELD"], [30, 28, 7, "enum_FIELD"], [86, 84, 7, "enum_FIELD"], [14, 13, 7, "enum_FIELD"], [28, 26, 7, "enum_FIELD"], [84, 82, 7, "enum_FIELD"], [26, 25, 7, "enum_FIELD"], [82, 81, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [25, 13, 10, "enum_LAST_LEXICAL_USE"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [40, 2, 10, "enum_LAST_LEXICAL_USE"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [49, 40, 10, "enum_LAST_LEXICAL_USE"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [58, 49, 10, "enum_LAST_LEXICAL_USE"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [67, 58, 10, "enum_LAST_LEXICAL_USE"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 80, 9, "enum_NEXT_SYNTAX"], [81, 25, 10, "enum_LAST_LEXICAL_USE"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [93, 11, 10, "enum_LAST_LEXICAL_USE"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [10, 24, 1, "enum_CFG_NEXT"], [24, 39, 1, "enum_CFG_NEXT"], [39, 48, 1, "enum_CFG_NEXT"], [48, 57, 1, "enum_CFG_NEXT"], [57, 66, 1, "enum_CFG_NEXT"], [66, 80, 1, "enum_CFG_NEXT"], [81, 25, 2, "enum_LAST_READ"], [93, 11, 3, "enum_LAST_WRITE"], [25, 13, 2, "enum_LAST_READ"], [40, 2, 3, "enum_LAST_WRITE"], [49, 40, 2, "enum_LAST_READ"], [49, 2, 3, "enum_LAST_WRITE"], [58, 49, 2, "enum_LAST_READ"], [58, 2, 3, "enum_LAST_WRITE"], [67, 58, 2, "enum_LAST_READ"], [67, 2, 3, "enum_LAST_WRITE"], [11, 13, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "ProgVal", "repo": "Limnoria", "path": "plugins/Karma/test.py", "id": 6277, "has_bug": false, "code_full": "import unittest\n\n\nclass conf:\n    class supybot:\n        class plugins:\n            class Karma:\n                class simpleOutput:\n                    @staticmethod\n                    def setValue(value):\n                        pass\n\n\nclass Class(unittest.TestCase):\n    def assertResponse(self, command: str, expected: str):\n        pass\n\n    def assertNoResponse(self, command: str, expected: int):\n        pass\n\n    def testSimpleOutput(self):\n        try:\n            orig = conf.supybot.plugins.Karma.simpleOutput()\n            conf.supybot.plugins.Karma.simpleOutput.setValue(True)\n            self.assertNoResponse('foo++', 2)\n            self.assertResponse('karma foo', 'foo: 1')\n            self.assertNoResponse('bar--', 2)\n            self.assertResponse('karma bar', 'bar: -1')\n        finally:\n            conf.supybot.plugins.Karma.simpleOutput.setValue(orig)\n", "code": "def testSimpleOutput(self):\n    try:\n        orig = conf.supybot.plugins.Karma.simpleOutput()\n        conf.supybot.plugins.Karma.simpleOutput.setValue(True)\n        self.assertNoResponse('foo++', 2)\n        self.assertResponse('karma foo', 'foo: 1')\n        self.assertNoResponse('bar--', 2)\n        self.assertResponse('karma bar', 'bar: -1')\n    finally:\n        conf.supybot.plugins.Karma.simpleOutput.setValue(orig)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "22956a3f4dc9f777a091b46501fede7a4bf0731c"}
{"source_tokens": ["#NEWLINE#", "def row_op(", "self", ",", "i", ",", "f", ")", ":", "#NEWLINE#", "#INDENT#", "'In-place operation on row ``i`` using two-arg functor whose args are\\n    interpreted as ``(self[i, j], j)``.\\n\\n    Examples\\n    ========\\n\\n    >>> from sympy.matrices import SparseMatrix\\n    >>> M = SparseMatrix.eye(3)*2\\n    >>> M[0, 1] = -1\\n    >>> M.row_op(1, lambda v, j: v + 2*M[0, j]); M\\n    Matrix([\\n    [2, -1, 0],\\n    [4,  0, 0],\\n    [0,  0, 2]])\\n\\n    See Also\\n    ========\\n    row\\n    zip_row_op\\n    col_op\\n\\n    '", "#NEWLINE#", "for", "j", "in", "range", "(", "self", ".", "cols", ")", ":", "#NEWLINE#", "#INDENT#", "v", "=", "self", ".", "_smat", ".", "get", "(", "(", "i", ",", "j", ")", ",", "S", ".", "Zero", ")", "#NEWLINE#", "fv", "=", "f", "(", "v", ",", "j", ")", "#NEWLINE#", "if", "fv", ":", "#NEWLINE#", "#INDENT#", "self", ".", "_smat", "[", "(", "i", ",", "j", ")", "]", "=", "fv", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "v", ":", "#NEWLINE#", "#INDENT#", "self", ".", "_smat", ".", "pop", "(", "(", "i", ",", "j", ")", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [10, 11, 7, "enum_FIELD"], [15, 14, 7, "enum_FIELD"], [15, 17, 7, "enum_FIELD"], [17, 16, 7, "enum_FIELD"], [24, 38, 7, "enum_FIELD"], [43, 49, 7, "enum_FIELD"], [55, 54, 7, "enum_FIELD"], [19, 18, 7, "enum_FIELD"], [38, 30, 7, "enum_FIELD"], [49, 46, 7, "enum_FIELD"], [57, 69, 7, "enum_FIELD"], [76, 77, 7, "enum_FIELD"], [30, 28, 7, "enum_FIELD"], [40, 39, 7, "enum_FIELD"], [61, 59, 7, "enum_FIELD"], [61, 64, 7, "enum_FIELD"], [80, 86, 7, "enum_FIELD"], [28, 27, 7, "enum_FIELD"], [59, 58, 7, "enum_FIELD"], [86, 84, 7, "enum_FIELD"], [84, 82, 7, "enum_FIELD"], [82, 81, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [18, 2, 10, "enum_LAST_LEXICAL_USE"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [27, 18, 10, "enum_LAST_LEXICAL_USE"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [34, 4, 10, "enum_LAST_LEXICAL_USE"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [36, 14, 10, "enum_LAST_LEXICAL_USE"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [46, 6, 10, "enum_LAST_LEXICAL_USE"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [48, 25, 10, "enum_LAST_LEXICAL_USE"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [50, 36, 10, "enum_LAST_LEXICAL_USE"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 53, 9, "enum_NEXT_SYNTAX"], [54, 44, 10, "enum_LAST_LEXICAL_USE"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 57, 9, "enum_NEXT_SYNTAX"], [58, 27, 10, "enum_LAST_LEXICAL_USE"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [63, 34, 10, "enum_LAST_LEXICAL_USE"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [65, 50, 10, "enum_LAST_LEXICAL_USE"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [69, 54, 10, "enum_LAST_LEXICAL_USE"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 76, 9, "enum_NEXT_SYNTAX"], [77, 48, 10, "enum_LAST_LEXICAL_USE"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 80, 9, "enum_NEXT_SYNTAX"], [81, 58, 10, "enum_LAST_LEXICAL_USE"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [88, 63, 10, "enum_LAST_LEXICAL_USE"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [90, 65, 10, "enum_LAST_LEXICAL_USE"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [3, 10, 1, "enum_CFG_NEXT"], [10, 17, 1, "enum_CFG_NEXT"], [17, 14, 1, "enum_CFG_NEXT"], [14, 24, 1, "enum_CFG_NEXT"], [24, 43, 1, "enum_CFG_NEXT"], [43, 54, 1, "enum_CFG_NEXT"], [54, 77, 1, "enum_CFG_NEXT"], [54, 57, 1, "enum_CFG_NEXT"], [57, 14, 1, "enum_CFG_NEXT"], [77, 80, 1, "enum_CFG_NEXT"], [77, 14, 1, "enum_CFG_NEXT"], [80, 14, 1, "enum_CFG_NEXT"], [18, 2, 3, "enum_LAST_WRITE"], [14, 50, 2, "enum_LAST_READ"], [14, 65, 2, "enum_LAST_READ"], [14, 90, 2, "enum_LAST_READ"], [14, 14, 3, "enum_LAST_WRITE"], [27, 58, 2, "enum_LAST_READ"], [27, 18, 2, "enum_LAST_READ"], [27, 81, 2, "enum_LAST_READ"], [27, 27, 2, "enum_LAST_READ"], [27, 2, 3, "enum_LAST_WRITE"], [34, 63, 2, "enum_LAST_READ"], [34, 88, 2, "enum_LAST_READ"], [34, 34, 2, "enum_LAST_READ"], [34, 4, 3, "enum_LAST_WRITE"], [36, 50, 2, "enum_LAST_READ"], [36, 65, 2, "enum_LAST_READ"], [36, 90, 2, "enum_LAST_READ"], [36, 14, 3, "enum_LAST_WRITE"], [39, 39, 2, "enum_LAST_READ"], [25, 48, 2, "enum_LAST_READ"], [25, 77, 2, "enum_LAST_READ"], [25, 25, 3, "enum_LAST_WRITE"], [46, 46, 2, "enum_LAST_READ"], [46, 6, 3, "enum_LAST_WRITE"], [48, 48, 2, "enum_LAST_READ"], [48, 77, 2, "enum_LAST_READ"], [48, 25, 3, "enum_LAST_WRITE"], [50, 36, 2, "enum_LAST_READ"], [50, 14, 3, "enum_LAST_WRITE"], [44, 69, 2, "enum_LAST_READ"], [44, 54, 2, "enum_LAST_READ"], [44, 44, 3, "enum_LAST_WRITE"], [54, 69, 2, "enum_LAST_READ"], [54, 54, 2, "enum_LAST_READ"], [54, 44, 3, "enum_LAST_WRITE"], [69, 54, 2, "enum_LAST_READ"], [69, 44, 3, "enum_LAST_WRITE"], [58, 27, 2, "enum_LAST_READ"], [58, 2, 3, "enum_LAST_WRITE"], [63, 34, 2, "enum_LAST_READ"], [63, 4, 3, "enum_LAST_WRITE"], [65, 50, 2, "enum_LAST_READ"], [65, 14, 3, "enum_LAST_WRITE"], [77, 48, 2, "enum_LAST_READ"], [77, 25, 3, "enum_LAST_WRITE"], [81, 27, 2, "enum_LAST_READ"], [81, 2, 3, "enum_LAST_WRITE"], [88, 34, 2, "enum_LAST_READ"], [88, 4, 3, "enum_LAST_WRITE"], [90, 50, 2, "enum_LAST_READ"], [90, 14, 3, "enum_LAST_WRITE"], [25, 34, 4, "enum_COMPUTED_FROM"], [25, 36, 4, "enum_COMPUTED_FROM"], [25, 39, 4, "enum_COMPUTED_FROM"], [25, 27, 4, "enum_COMPUTED_FROM"], [44, 46, 4, "enum_COMPUTED_FROM"], [44, 48, 4, "enum_COMPUTED_FROM"], [44, 50, 4, "enum_COMPUTED_FROM"], [61, 69, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "sympy", "repo": "sympy", "path": "sympy/matrices/sparse.py", "id": 53708, "has_bug": false, "code_full": "from typing import Any, Callable, Dict, Tuple\n\nfrom sympy import S\nfrom sympy.matrices import SparseMatrix\n\n\nclass Class(SparseMatrix):\n    _smat: Dict[Tuple[int, int], float]\n\n    def row_op(self, i: int, f: Callable[[Any, int], float]):\n        \"\"\"In-place operation on row ``i`` using two-arg functor whose args are\n        interpreted as ``(self[i, j], j)``.\n\n        Examples\n        ========\n\n        >>> from sympy.matrices import SparseMatrix\n        >>> M = SparseMatrix.eye(3)*2\n        >>> M[0, 1] = -1\n        >>> M.row_op(1, lambda v, j: v + 2*M[0, j]); M\n        Matrix([\n        [2, -1, 0],\n        [4,  0, 0],\n        [0,  0, 2]])\n\n        See Also\n        ========\n        row\n        zip_row_op\n        col_op\n\n        \"\"\"\n        for j in range(self.cols):\n            v: float = self._smat.get((i, j), S.Zero)\n            fv: float = f(v, j)\n            if fv:\n                self._smat[(i, j)] = fv\n            elif v:\n                self._smat.pop((i, j))\n", "code": "def row_op(self, i: int, f: Callable[[Any, int], float]):\n    \"\"\"In-place operation on row ``i`` using two-arg functor whose args are\n    interpreted as ``(self[i, j], j)``.\n\n    Examples\n    ========\n\n    >>> from sympy.matrices import SparseMatrix\n    >>> M = SparseMatrix.eye(3)*2\n    >>> M[0, 1] = -1\n    >>> M.row_op(1, lambda v, j: v + 2*M[0, j]); M\n    Matrix([\n    [2, -1, 0],\n    [4,  0, 0],\n    [0,  0, 2]])\n\n    See Also\n    ========\n    row\n    zip_row_op\n    col_op\n\n    \"\"\"\n    for j in range(self.cols):\n        v: float = self._smat.get((i, j), S.Zero)\n        fv: float = f(v, j)\n        if fv:\n            self._smat[(i, j)] = fv\n        elif v:\n            self._smat.pop((i, j))\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "25ea11a953ec1a83e73b58d43a1d5f4026e006bc"}
{"source_tokens": ["#NEWLINE#", "def _switch_page_cb(", "self", ",", "nb", ",", "child", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "focus_index", "(", ")", "#NEWLINE#", "self", ".", "make_callback", "(", "'page-switch'", ",", "child", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [10, 14, 7, "enum_FIELD"], [16, 22, 7, "enum_FIELD"], [14, 12, 7, "enum_FIELD"], [22, 18, 7, "enum_FIELD"], [12, 11, 7, "enum_FIELD"], [18, 17, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 10, 9, "enum_NEXT_SYNTAX"], [11, 2, 10, "enum_LAST_LEXICAL_USE"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [17, 11, 10, "enum_LAST_LEXICAL_USE"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [23, 6, 10, "enum_LAST_LEXICAL_USE"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [3, 10, 1, "enum_CFG_NEXT"], [10, 16, 1, "enum_CFG_NEXT"], [11, 2, 3, "enum_LAST_WRITE"], [17, 11, 2, "enum_LAST_READ"], [17, 2, 3, "enum_LAST_WRITE"], [23, 6, 3, "enum_LAST_WRITE"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "ejeschke", "repo": "ginga", "path": "ginga/gw/Desktop.py", "id": 14749, "has_bug": false, "code_full": "from typing import Any\n\n\nclass Class:\n    def focus_index(self):\n        pass\n\n    def make_callback(self, event: str, child: Any):\n        pass\n    \n    def _switch_page_cb(self, nb: Any, child: Any):\n        self.focus_index()\n        self.make_callback(\"page-switch\", child)\n", "code": "def _switch_page_cb(self, nb: Any, child: Any):\n    self.focus_index()\n    self.make_callback(\"page-switch\", child)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "5111ff2b49969eb7153312ac2ce1fae296ca763a"}
{"source_tokens": ["#NEWLINE#", "def _get_raw_tx(", "self", ",", "txid", ")", ":", "#NEWLINE#", "#INDENT#", "return", "threads", ".", "deferToThread", "(", "self", ".", "_get_raw_tx_rpc", ",", "txid", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [9, 17, 7, "enum_FIELD"], [17, 11, 7, "enum_FIELD"], [11, 10, 7, "enum_FIELD"], [15, 14, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [14, 2, 10, "enum_LAST_LEXICAL_USE"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [18, 4, 10, "enum_LAST_LEXICAL_USE"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [3, 9, 1, "enum_CFG_NEXT"], [14, 2, 3, "enum_LAST_WRITE"], [18, 4, 3, "enum_LAST_WRITE"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "lbryio", "repo": "lbry", "path": "lbrynet/core/LBRYcrdWallet.py", "id": 23251, "has_bug": false, "code_full": "from typing import Any\n\nfrom twisted.internet import threads\nfrom twisted.internet.defer import Deferred\n\n\nclass Class:\n    def _get_raw_tx_rpc(self, txid: str) -> Any:\n        pass\n\n    def _get_raw_tx(self, txid) -> Deferred:\n        return threads.deferToThread(self._get_raw_tx_rpc, txid)\n", "code": "def _get_raw_tx(self, txid) -> Deferred:\n    return threads.deferToThread(self._get_raw_tx_rpc, txid)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "62b80c13cc870372e06514463a02c190973d2af5"}
{"source_tokens": ["#NEWLINE#", "def discovered(", "local_state", ")", ":", "#NEWLINE#", "#INDENT#", "changes", "=", "local_state", ".", "shared_state_changes", "(", ")", "#NEWLINE#", "wrong", "=", "[", "]", "#NEWLINE#", "for", "obj", "in", "changes", ":", "#NEWLINE#", "#INDENT#", "if", "(", "not", "IClusterStateChange", ".", "providedBy", "(", "obj", ")", ")", ":", "#NEWLINE#", "#INDENT#", "wrong", ".", "append", "(", "obj", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "if", "wrong", ":", "#NEWLINE#", "#INDENT#", "template", "=", "'Some elements did not provide IClusterStateChange: {}'", "#NEWLINE#", "self", ".", "fail", "(", "template", ".", "format", "(", "wrong", ")", ")"], "edges": [[6, 12, 7, "enum_FIELD"], [14, 17, 7, "enum_FIELD"], [22, 21, 7, "enum_FIELD"], [22, 23, 7, "enum_FIELD"], [49, 50, 7, "enum_FIELD"], [12, 10, 7, "enum_FIELD"], [27, 29, 7, "enum_FIELD"], [53, 56, 7, "enum_FIELD"], [57, 61, 7, "enum_FIELD"], [10, 9, 7, "enum_FIELD"], [29, 33, 7, "enum_FIELD"], [39, 43, 7, "enum_FIELD"], [61, 59, 7, "enum_FIELD"], [33, 31, 7, "enum_FIELD"], [43, 41, 7, "enum_FIELD"], [59, 58, 7, "enum_FIELD"], [65, 63, 7, "enum_FIELD"], [31, 30, 7, "enum_FIELD"], [41, 40, 7, "enum_FIELD"], [63, 62, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [9, 2, 10, "enum_LAST_LEXICAL_USE"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [23, 7, 10, "enum_LAST_LEXICAL_USE"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [34, 21, 10, "enum_LAST_LEXICAL_USE"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 39, 9, "enum_NEXT_SYNTAX"], [40, 15, 10, "enum_LAST_LEXICAL_USE"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [44, 34, 10, "enum_LAST_LEXICAL_USE"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 49, 9, "enum_NEXT_SYNTAX"], [50, 40, 10, "enum_LAST_LEXICAL_USE"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [62, 54, 10, "enum_LAST_LEXICAL_USE"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [66, 50, 10, "enum_LAST_LEXICAL_USE"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [6, 14, 1, "enum_CFG_NEXT"], [14, 23, 1, "enum_CFG_NEXT"], [23, 21, 1, "enum_CFG_NEXT"], [21, 50, 1, "enum_CFG_NEXT"], [21, 29, 1, "enum_CFG_NEXT"], [29, 39, 1, "enum_CFG_NEXT"], [29, 21, 1, "enum_CFG_NEXT"], [39, 21, 1, "enum_CFG_NEXT"], [50, 53, 1, "enum_CFG_NEXT"], [53, 57, 1, "enum_CFG_NEXT"], [9, 2, 3, "enum_LAST_WRITE"], [23, 7, 3, "enum_LAST_WRITE"], [21, 34, 2, "enum_LAST_READ"], [21, 44, 2, "enum_LAST_READ"], [21, 21, 3, "enum_LAST_WRITE"], [30, 30, 2, "enum_LAST_READ"], [34, 34, 2, "enum_LAST_READ"], [34, 44, 2, "enum_LAST_READ"], [34, 21, 3, "enum_LAST_WRITE"], [40, 40, 2, "enum_LAST_READ"], [40, 15, 3, "enum_LAST_WRITE"], [44, 34, 2, "enum_LAST_READ"], [44, 21, 3, "enum_LAST_WRITE"], [50, 40, 2, "enum_LAST_READ"], [50, 15, 3, "enum_LAST_WRITE"], [62, 54, 3, "enum_LAST_WRITE"], [66, 50, 2, "enum_LAST_READ"], [66, 15, 3, "enum_LAST_WRITE"], [7, 9, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "ClusterHQ", "repo": "flocker", "path": "flocker/node/testtools.py", "id": 3987, "has_bug": false, "code_full": "import unittest\nfrom typing import Any, List\n\n\nclass LocalStore:\n    def shared_state_changes(self) -> List[Any]:\n        return []\n    \n\nclass IClusterStateChange:\n    @staticmethod\n    def providedBy(obj: Any) -> bool:\n        return False\n\n\nclass Class(unittest.TestCase):\n    def test_discover_state_iclusterstatechange(self):\n        def discovered(local_state: LocalStore):\n            changes: List[Any] = local_state.shared_state_changes()\n            wrong: List[Any] = []\n            for obj in changes:\n                if not IClusterStateChange.providedBy(obj):\n                    wrong.append(obj)\n            if wrong:\n                template: str = (\n                    \"Some elements did not provide IClusterStateChange: {}\"\n                )\n                self.fail(template.format(wrong))\n", "code": "def discovered(local_state: LocalStore):\n    changes: List[Any] = local_state.shared_state_changes()\n    wrong: List[Any] = []\n    for obj in changes:\n        if not IClusterStateChange.providedBy(obj):\n            wrong.append(obj)\n    if wrong:\n        template: str = (\n            \"Some elements did not provide IClusterStateChange: {}\"\n        )\n        self.fail(template.format(wrong))\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "eaa586248986d7cd681c99c948546c2b507e44de"}
{"source_tokens": ["#NEWLINE#", "def _write_nv_pic_pr(", "self", ",", "index", ",", "options", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "_xml_start_tag", "(", "'xdr:nvPicPr'", ")", "#NEWLINE#", "self", ".", "_write_c_nv_pr", "(", "(", "index", "+", "1", ")", ",", "(", "'Picture '", "+", "str", "(", "index", ")", ")", ",", "options", ")", "#NEWLINE#", "self", ".", "_write_c_nv_pic_pr", "(", ")", "#NEWLINE#", "self", ".", "_xml_end_tag", "(", "'xdr:nvPicPr'", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [10, 14, 7, "enum_FIELD"], [17, 27, 7, "enum_FIELD"], [39, 43, 7, "enum_FIELD"], [45, 49, 7, "enum_FIELD"], [14, 12, 7, "enum_FIELD"], [27, 19, 7, "enum_FIELD"], [43, 41, 7, "enum_FIELD"], [49, 47, 7, "enum_FIELD"], [12, 11, 7, "enum_FIELD"], [19, 18, 7, "enum_FIELD"], [24, 23, 7, "enum_FIELD"], [24, 25, 7, "enum_FIELD"], [30, 29, 7, "enum_FIELD"], [30, 32, 7, "enum_FIELD"], [41, 40, 7, "enum_FIELD"], [47, 46, 7, "enum_FIELD"], [32, 31, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 10, 9, "enum_NEXT_SYNTAX"], [11, 2, 10, "enum_LAST_LEXICAL_USE"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [18, 11, 10, "enum_LAST_LEXICAL_USE"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [23, 4, 10, "enum_LAST_LEXICAL_USE"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [33, 23, 10, "enum_LAST_LEXICAL_USE"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [37, 6, 10, "enum_LAST_LEXICAL_USE"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [40, 18, 10, "enum_LAST_LEXICAL_USE"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [46, 40, 10, "enum_LAST_LEXICAL_USE"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [3, 10, 1, "enum_CFG_NEXT"], [10, 17, 1, "enum_CFG_NEXT"], [17, 39, 1, "enum_CFG_NEXT"], [39, 45, 1, "enum_CFG_NEXT"], [11, 2, 3, "enum_LAST_WRITE"], [18, 11, 2, "enum_LAST_READ"], [18, 2, 3, "enum_LAST_WRITE"], [23, 4, 3, "enum_LAST_WRITE"], [33, 23, 2, "enum_LAST_READ"], [33, 4, 3, "enum_LAST_WRITE"], [37, 6, 3, "enum_LAST_WRITE"], [40, 18, 2, "enum_LAST_READ"], [40, 2, 3, "enum_LAST_WRITE"], [46, 40, 2, "enum_LAST_READ"], [46, 2, 3, "enum_LAST_WRITE"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "jmcnamara", "repo": "XlsxWriter", "path": "xlsxwriter/drawing.py", "id": 22600, "has_bug": false, "code_full": "from typing import Any, Dict\n\n\nclass Class:\n    def _xml_start_tag(self, tag: str):\n        pass\n\n    def _write_c_nv_pr(self, index: int, name: str, options: Dict[str, Any]):\n        pass\n\n    def _write_c_nv_pic_pr(self):\n        pass\n\n    def _xml_end_tag(self, tag: str):\n        pass\n\n    def _write_nv_pic_pr(self, index: int, options: Dict[str, Any]):\n        # Write the <xdr:nvPicPr> element.\n        self._xml_start_tag('xdr:nvPicPr')\n\n        # Write the xdr:cNvPr element.\n        self._write_c_nv_pr(index + 1, 'Picture ' + str(index), options)\n\n        # Write the xdr:cNvPicPr element.\n        self._write_c_nv_pic_pr()\n\n        self._xml_end_tag('xdr:nvPicPr')\n", "code": "def _write_nv_pic_pr(self, index: int, options: Dict[str, Any]):\n    # Write the <xdr:nvPicPr> element.\n    self._xml_start_tag('xdr:nvPicPr')\n\n    # Write the xdr:cNvPr element.\n    self._write_c_nv_pr(index + 1, 'Picture ' + str(index), options)\n\n    # Write the xdr:cNvPicPr element.\n    self._write_c_nv_pic_pr()\n\n    self._xml_end_tag('xdr:nvPicPr')\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "b592624bdebf4488052617475cac056396a897d8"}
{"source_tokens": ["#NEWLINE#", "def _iter_test_masks(", "self", ",", "X", ",", "y", ",", "labels", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "labels", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "ValueError", "(", "'The labels parameter should not be None'", ")", "#NEWLINE#", "#UNINDENT#", "labels", "=", "np", ".", "array", "(", "labels", ",", "copy", "=", "True", ")", "#NEWLINE#", "unique_labels", "=", "np", ".", "unique", "(", "labels", ")", "#NEWLINE#", "combi", "=", "combinations", "(", "range", "(", "len", "(", "unique_labels", ")", ")", ",", "self", ".", "n_labels", ")", "#NEWLINE#", "for", "indices", "in", "combi", ":", "#NEWLINE#", "#INDENT#", "test_index", "=", "np", ".", "zeros", "(", "_num_samples", "(", "X", ")", ",", "dtype", "=", "np", ".", "bool", ")", "#NEWLINE#", "for", "l", "in", "unique_labels", "[", "np", ".", "array", "(", "indices", ")", "]", ":", "#NEWLINE#", "#INDENT#", "test_index", "[", "(", "labels", "==", "l", ")", "]", "=", "True", "#NEWLINE#", "#UNINDENT#", "(", "yield", "test_index", ")"], "edges": [[1, 5, 7, "enum_FIELD"], [13, 16, 7, "enum_FIELD"], [28, 36, 7, "enum_FIELD"], [41, 47, 7, "enum_FIELD"], [50, 62, 7, "enum_FIELD"], [70, 69, 7, "enum_FIELD"], [70, 71, 7, "enum_FIELD"], [16, 15, 7, "enum_FIELD"], [22, 24, 7, "enum_FIELD"], [36, 32, 7, "enum_FIELD"], [47, 45, 7, "enum_FIELD"], [62, 53, 7, "enum_FIELD"], [74, 85, 7, "enum_FIELD"], [95, 94, 7, "enum_FIELD"], [95, 97, 7, "enum_FIELD"], [119, 121, 7, "enum_FIELD"], [24, 23, 7, "enum_FIELD"], [32, 31, 7, "enum_FIELD"], [37, 39, 7, "enum_FIELD"], [45, 44, 7, "enum_FIELD"], [56, 55, 7, "enum_FIELD"], [64, 63, 7, "enum_FIELD"], [85, 78, 7, "enum_FIELD"], [97, 96, 7, "enum_FIELD"], [97, 101, 7, "enum_FIELD"], [107, 117, 7, "enum_FIELD"], [121, 122, 7, "enum_FIELD"], [58, 57, 7, "enum_FIELD"], [78, 77, 7, "enum_FIELD"], [82, 81, 7, "enum_FIELD"], [86, 89, 7, "enum_FIELD"], [101, 99, 7, "enum_FIELD"], [109, 108, 7, "enum_FIELD"], [109, 112, 7, "enum_FIELD"], [89, 88, 7, "enum_FIELD"], [99, 98, 7, "enum_FIELD"], [112, 111, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [15, 8, 10, "enum_LAST_LEXICAL_USE"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 28, 9, "enum_NEXT_SYNTAX"], [29, 15, 10, "enum_LAST_LEXICAL_USE"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [35, 29, 10, "enum_LAST_LEXICAL_USE"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [44, 31, 10, "enum_LAST_LEXICAL_USE"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [48, 35, 10, "enum_LAST_LEXICAL_USE"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [59, 42, 10, "enum_LAST_LEXICAL_USE"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [63, 2, 10, "enum_LAST_LEXICAL_USE"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [71, 51, 10, "enum_LAST_LEXICAL_USE"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [77, 44, 10, "enum_LAST_LEXICAL_USE"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [83, 4, 10, "enum_LAST_LEXICAL_USE"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [88, 77, 10, "enum_LAST_LEXICAL_USE"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [96, 59, 10, "enum_LAST_LEXICAL_USE"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [98, 88, 10, "enum_LAST_LEXICAL_USE"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [102, 69, 10, "enum_LAST_LEXICAL_USE"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 107, 9, "enum_NEXT_SYNTAX"], [108, 75, 10, "enum_LAST_LEXICAL_USE"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [111, 48, 10, "enum_LAST_LEXICAL_USE"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [113, 94, 10, "enum_LAST_LEXICAL_USE"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [122, 108, 10, "enum_LAST_LEXICAL_USE"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [5, 16, 1, "enum_CFG_NEXT"], [16, 22, 1, "enum_CFG_NEXT"], [16, 28, 1, "enum_CFG_NEXT"], [28, 41, 1, "enum_CFG_NEXT"], [41, 50, 1, "enum_CFG_NEXT"], [50, 71, 1, "enum_CFG_NEXT"], [71, 69, 1, "enum_CFG_NEXT"], [69, 74, 1, "enum_CFG_NEXT"], [74, 97, 1, "enum_CFG_NEXT"], [97, 94, 1, "enum_CFG_NEXT"], [94, 107, 1, "enum_CFG_NEXT"], [94, 119, 1, "enum_CFG_NEXT"], [107, 94, 1, "enum_CFG_NEXT"], [119, 69, 1, "enum_CFG_NEXT"], [15, 8, 3, "enum_LAST_WRITE"], [35, 15, 2, "enum_LAST_READ"], [35, 8, 3, "enum_LAST_WRITE"], [29, 35, 2, "enum_LAST_READ"], [29, 8, 3, "enum_LAST_WRITE"], [44, 31, 2, "enum_LAST_READ"], [48, 35, 2, "enum_LAST_READ"], [48, 29, 3, "enum_LAST_WRITE"], [59, 42, 3, "enum_LAST_WRITE"], [63, 2, 3, "enum_LAST_WRITE"], [71, 51, 3, "enum_LAST_WRITE"], [69, 102, 2, "enum_LAST_READ"], [69, 69, 3, "enum_LAST_WRITE"], [77, 44, 2, "enum_LAST_READ"], [77, 98, 2, "enum_LAST_READ"], [81, 81, 2, "enum_LAST_READ"], [83, 83, 2, "enum_LAST_READ"], [83, 4, 3, "enum_LAST_WRITE"], [88, 77, 2, "enum_LAST_READ"], [75, 122, 2, "enum_LAST_READ"], [75, 75, 3, "enum_LAST_WRITE"], [96, 96, 2, "enum_LAST_READ"], [96, 59, 2, "enum_LAST_READ"], [96, 42, 3, "enum_LAST_WRITE"], [98, 88, 2, "enum_LAST_READ"], [102, 102, 2, "enum_LAST_READ"], [102, 69, 3, "enum_LAST_WRITE"], [94, 113, 2, "enum_LAST_READ"], [94, 94, 3, "enum_LAST_WRITE"], [108, 122, 2, "enum_LAST_READ"], [108, 108, 2, "enum_LAST_READ"], [108, 75, 3, "enum_LAST_WRITE"], [111, 48, 2, "enum_LAST_READ"], [111, 111, 2, "enum_LAST_READ"], [111, 29, 3, "enum_LAST_WRITE"], [113, 113, 2, "enum_LAST_READ"], [113, 94, 3, "enum_LAST_WRITE"], [122, 122, 2, "enum_LAST_READ"], [122, 108, 2, "enum_LAST_READ"], [122, 75, 3, "enum_LAST_WRITE"], [29, 35, 4, "enum_COMPUTED_FROM"], [29, 31, 4, "enum_COMPUTED_FROM"], [42, 48, 4, "enum_COMPUTED_FROM"], [42, 44, 4, "enum_COMPUTED_FROM"], [51, 53, 4, "enum_COMPUTED_FROM"], [51, 55, 4, "enum_COMPUTED_FROM"], [51, 63, 4, "enum_COMPUTED_FROM"], [51, 57, 4, "enum_COMPUTED_FROM"], [51, 59, 4, "enum_COMPUTED_FROM"], [75, 77, 4, "enum_COMPUTED_FROM"], [75, 81, 4, "enum_COMPUTED_FROM"], [75, 83, 4, "enum_COMPUTED_FROM"], [75, 88, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "scikit-learn", "repo": "scikit-learn", "path": "sklearn/model_selection/_split.py", "id": 49062, "has_bug": false, "code_full": "from itertools import combinations\nfrom typing import Any, Generator, List, Optional, Tuple, Union\n\nimport numpy as np\n\n\ndef _num_samples(X: Union[np.ndarray, List]) -> int:\n    return 0\n\n\n\nclass Class:\n    n_labels: int\n\n    def _iter_test_masks(self, X: Union[np.ndarray, List], y: Any, labels: Optional[List]) -> Generator[np.ndarray, None, None]:\n        if labels is None:\n            raise ValueError(\"The labels parameter should not be None\")\n        labels: np.ndarray = np.array(labels, copy=True)\n        unique_labels: np.ndarray = np.unique(labels)\n        combi: combinations[Tuple[int, ...]] = combinations(range(len(unique_labels)), self.n_labels)\n        for indices in combi:\n            test_index: np.ndarray = np.zeros(_num_samples(X), dtype=np.bool)\n            for l in unique_labels[np.array(indices)]:\n                test_index[labels == l] = True\n            yield test_index\n", "code": "def _iter_test_masks(self, X: Union[np.ndarray, List], y: Any, labels: Optional[List]) -> Generator[np.ndarray, None, None]:\n    if labels is None:\n        raise ValueError(\"The labels parameter should not be None\")\n    labels: np.ndarray = np.array(labels, copy=True)\n    unique_labels: np.ndarray = np.unique(labels)\n    combi: combinations[Tuple[int, ...]] = combinations(range(len(unique_labels)), self.n_labels)\n    for indices in combi:\n        test_index: np.ndarray = np.zeros(_num_samples(X), dtype=np.bool)\n        for l in unique_labels[np.array(indices)]:\n            test_index[labels == l] = True\n        yield test_index\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "e4b837cc66616ca5f1beb1f560605eaae72cf3f8"}
{"source_tokens": ["#NEWLINE#", "def test_get_conanfile_download_urls(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "urls", "=", "self", ".", "service", ".", "get_conanfile_download_urls", "(", "self", ".", "conan_reference", ")", "#NEWLINE#", "urls", "=", "{", "name", ":", "url", ".", "split", "(", "'?signature'", ")", "[", "0", "]", "for", "(", "name", ",", "url", ")", "in", "urls", ".", "items", "(", ")", "}", "#NEWLINE#", "def fake_url_build(", "filename", ")", ":", "#NEWLINE#", "#INDENT#", "return", "(", "(", "(", "(", "self", ".", "fake_url", "+", "'/'", ")", "+", "'/'", ".", "join", "(", "self", ".", "conan_reference", ")", ")", "+", "'/export/'", ")", "+", "filename", ")", "#NEWLINE#", "#UNINDENT#", "expected_urls", "=", "{", "'CMakeLists.txt'", ":", "fake_url_build", "(", "'CMakeLists.txt'", ")", ",", "'conanmanifest.txt'", ":", "fake_url_build", "(", "'conanmanifest.txt'", ")", ",", "'executable'", ":", "fake_url_build", "(", "'executable'", ")", ",", "'hello.cpp'", ":", "fake_url_build", "(", "'hello.cpp'", ")", ",", "'hellotest.h'", ":", "fake_url_build", "(", "'hellotest.h'", ")", ",", "'main.cpp'", ":", "fake_url_build", "(", "'main.cpp'", ")", "}", "#NEWLINE#", "self", ".", "assertEquals", "(", "urls", ",", "expected_urls", ")"], "edges": [[6, 14, 7, "enum_FIELD"], [19, 24, 7, "enum_FIELD"], [82, 106, 7, "enum_FIELD"], [128, 134, 7, "enum_FIELD"], [14, 12, 7, "enum_FIELD"], [24, 23, 7, "enum_FIELD"], [24, 31, 7, "enum_FIELD"], [54, 78, 7, "enum_FIELD"], [134, 130, 7, "enum_FIELD"], [12, 10, 7, "enum_FIELD"], [16, 15, 7, "enum_FIELD"], [31, 28, 7, "enum_FIELD"], [31, 32, 7, "enum_FIELD"], [34, 37, 7, "enum_FIELD"], [34, 44, 7, "enum_FIELD"], [78, 75, 7, "enum_FIELD"], [78, 79, 7, "enum_FIELD"], [89, 88, 7, "enum_FIELD"], [96, 95, 7, "enum_FIELD"], [103, 102, 7, "enum_FIELD"], [110, 109, 7, "enum_FIELD"], [117, 116, 7, "enum_FIELD"], [124, 123, 7, "enum_FIELD"], [130, 129, 7, "enum_FIELD"], [10, 9, 7, "enum_FIELD"], [28, 26, 7, "enum_FIELD"], [44, 42, 7, "enum_FIELD"], [75, 65, 7, "enum_FIELD"], [75, 76, 7, "enum_FIELD"], [26, 25, 7, "enum_FIELD"], [42, 41, 7, "enum_FIELD"], [65, 62, 7, "enum_FIELD"], [65, 69, 7, "enum_FIELD"], [62, 60, 7, "enum_FIELD"], [62, 63, 7, "enum_FIELD"], [69, 67, 7, "enum_FIELD"], [60, 59, 7, "enum_FIELD"], [67, 66, 7, "enum_FIELD"], [71, 70, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [9, 2, 10, "enum_LAST_LEXICAL_USE"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [15, 9, 10, "enum_LAST_LEXICAL_USE"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [20, 7, 10, "enum_LAST_LEXICAL_USE"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [36, 23, 10, "enum_LAST_LEXICAL_USE"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [38, 25, 10, "enum_LAST_LEXICAL_USE"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [41, 20, 10, "enum_LAST_LEXICAL_USE"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [59, 15, 10, "enum_LAST_LEXICAL_USE"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [70, 59, 10, "enum_LAST_LEXICAL_USE"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [79, 49, 10, "enum_LAST_LEXICAL_USE"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [95, 88, 10, "enum_LAST_LEXICAL_USE"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [102, 95, 10, "enum_LAST_LEXICAL_USE"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [109, 102, 10, "enum_LAST_LEXICAL_USE"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [116, 109, 10, "enum_LAST_LEXICAL_USE"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [123, 116, 10, "enum_LAST_LEXICAL_USE"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [129, 70, 10, "enum_LAST_LEXICAL_USE"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [133, 41, 10, "enum_LAST_LEXICAL_USE"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [135, 83, 10, "enum_LAST_LEXICAL_USE"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [6, 19, 1, "enum_CFG_NEXT"], [19, 50, 1, "enum_CFG_NEXT"], [50, 82, 1, "enum_CFG_NEXT"], [82, 128, 1, "enum_CFG_NEXT"], [9, 2, 3, "enum_LAST_WRITE"], [15, 9, 2, "enum_LAST_READ"], [15, 2, 3, "enum_LAST_WRITE"], [36, 23, 2, "enum_LAST_READ"], [38, 25, 2, "enum_LAST_READ"], [41, 7, 3, "enum_LAST_WRITE"], [20, 41, 2, "enum_LAST_READ"], [20, 7, 3, "enum_LAST_WRITE"], [70, 59, 2, "enum_LAST_READ"], [79, 49, 3, "enum_LAST_WRITE"], [88, 50, 3, "enum_LAST_WRITE"], [95, 88, 2, "enum_LAST_READ"], [95, 50, 3, "enum_LAST_WRITE"], [102, 95, 2, "enum_LAST_READ"], [102, 50, 3, "enum_LAST_WRITE"], [109, 102, 2, "enum_LAST_READ"], [109, 50, 3, "enum_LAST_WRITE"], [116, 109, 2, "enum_LAST_READ"], [116, 50, 3, "enum_LAST_WRITE"], [123, 116, 2, "enum_LAST_READ"], [123, 50, 3, "enum_LAST_WRITE"], [129, 15, 2, "enum_LAST_READ"], [129, 2, 3, "enum_LAST_WRITE"], [133, 41, 2, "enum_LAST_READ"], [133, 20, 3, "enum_LAST_WRITE"], [135, 83, 3, "enum_LAST_WRITE"], [7, 15, 4, "enum_COMPUTED_FROM"], [7, 9, 4, "enum_COMPUTED_FROM"], [20, 23, 4, "enum_COMPUTED_FROM"], [20, 36, 4, "enum_COMPUTED_FROM"], [20, 38, 4, "enum_COMPUTED_FROM"], [20, 25, 4, "enum_COMPUTED_FROM"], [20, 41, 4, "enum_COMPUTED_FROM"], [83, 88, 4, "enum_COMPUTED_FROM"], [83, 95, 4, "enum_COMPUTED_FROM"], [83, 102, 4, "enum_COMPUTED_FROM"], [83, 109, 4, "enum_COMPUTED_FROM"], [83, 116, 4, "enum_COMPUTED_FROM"], [83, 123, 4, "enum_COMPUTED_FROM"], [89, 50, 11, "enum_CALLS"], [54, 89, 5, "enum_RETURNS_TO"], [90, 49, 6, "enum_FORMAL_ARG_NAME"], [96, 50, 11, "enum_CALLS"], [54, 96, 5, "enum_RETURNS_TO"], [97, 49, 6, "enum_FORMAL_ARG_NAME"], [103, 50, 11, "enum_CALLS"], [54, 103, 5, "enum_RETURNS_TO"], [104, 49, 6, "enum_FORMAL_ARG_NAME"], [110, 50, 11, "enum_CALLS"], [54, 110, 5, "enum_RETURNS_TO"], [111, 49, 6, "enum_FORMAL_ARG_NAME"], [117, 50, 11, "enum_CALLS"], [54, 117, 5, "enum_RETURNS_TO"], [118, 49, 6, "enum_FORMAL_ARG_NAME"], [124, 50, 11, "enum_CALLS"], [54, 124, 5, "enum_RETURNS_TO"], [125, 49, 6, "enum_FORMAL_ARG_NAME"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "conan-io", "repo": "conan", "path": "conans/server/test/service/service_test.py", "id": 10962, "has_bug": false, "code_full": "import unittest\nfrom typing import Dict\n\n\nclass ConanService:\n    def get_conanfile_download_urls(self, conan_reference: str) -> Dict[str, str]:\n        return {}\n\n\nclass Class(unittest.TestCase):\n    urls: Dict[str, str]\n    service: ConanService\n    conan_reference: str\n    fake_url: str\n\n    def test_get_conanfile_download_urls(self):\n        urls: Dict[str, str] = self.service.get_conanfile_download_urls(self.conan_reference)\n        # Remove parameters\n        urls = {name: url.split(\"?signature\")[0] for name, url in urls.items()}\n\n        def fake_url_build(filename: str) -> str:\n            return self.fake_url + \"/\" + \"/\".join(self.conan_reference) + \"/export/\" + filename\n\n        expected_urls: Dict[str, str] = {'CMakeLists.txt': fake_url_build('CMakeLists.txt'),\n                            'conanmanifest.txt': fake_url_build('conanmanifest.txt'),\n                            'executable': fake_url_build('executable'),\n                            'hello.cpp': fake_url_build('hello.cpp'),\n                            'hellotest.h': fake_url_build('hellotest.h'),\n                            'main.cpp': fake_url_build('main.cpp')}\n        self.assertEquals(urls, expected_urls)\n", "code": "def test_get_conanfile_download_urls(self):\n    urls: Dict[str, str] = self.service.get_conanfile_download_urls(self.conan_reference)\n    # Remove parameters\n    urls = {name: url.split(\"?signature\")[0] for name, url in urls.items()}\n\n    def fake_url_build(filename: str) -> str:\n        return self.fake_url + \"/\" + \"/\".join(self.conan_reference) + \"/export/\" + filename\n\n    expected_urls: Dict[str, str] = {'CMakeLists.txt': fake_url_build('CMakeLists.txt'),\n                        'conanmanifest.txt': fake_url_build('conanmanifest.txt'),\n                        'executable': fake_url_build('executable'),\n                        'hello.cpp': fake_url_build('hello.cpp'),\n                        'hellotest.h': fake_url_build('hellotest.h'),\n                        'main.cpp': fake_url_build('main.cpp')}\n    self.assertEquals(urls, expected_urls)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "a17a421b1046aa0194fb7e4690f52a63b888e9ee"}
{"source_tokens": ["#NEWLINE#", "@", "classmethod", "#NEWLINE#", "def menu_climate(", "cls", ",", "**attr", ")", ":", "#NEWLINE#", "#INDENT#", "' Climate module menu '", "#NEWLINE#", "name_nice", "=", "current", ".", "deployment_settings", ".", "modules", "[", "'climate'", "]", ".", "name_nice", "#NEWLINE#", "ADMIN", "=", "current", ".", "session", ".", "s3", ".", "system_roles", ".", "ADMIN", "#NEWLINE#", "menu_climate", "=", "MM", "(", "name_nice", ",", "c", "=", "'climate'", ",", "**", "attr", ")", "(", "MM", "(", "'Station Parameters'", ",", "f", "=", "'station_parameter'", ")", ",", "MM", "(", "'Purchase Data'", ",", "f", "=", "'purchase'", ")", ",", "MM", "(", "'DataSet Prices'", ",", "f", "=", "'prices'", ",", "restrict", "=", "[", "ADMIN", "]", ")", ")", "#NEWLINE#", "return", "menu_climate"], "edges": [[1, 6, 7, "enum_FIELD"], [11, 12, 7, "enum_FIELD"], [13, 24, 7, "enum_FIELD"], [26, 36, 7, "enum_FIELD"], [38, 61, 7, "enum_FIELD"], [87, 88, 7, "enum_FIELD"], [24, 21, 7, "enum_FIELD"], [36, 34, 7, "enum_FIELD"], [61, 44, 7, "enum_FIELD"], [21, 19, 7, "enum_FIELD"], [21, 22, 7, "enum_FIELD"], [34, 32, 7, "enum_FIELD"], [44, 41, 7, "enum_FIELD"], [56, 53, 7, "enum_FIELD"], [65, 62, 7, "enum_FIELD"], [74, 71, 7, "enum_FIELD"], [19, 17, 7, "enum_FIELD"], [32, 30, 7, "enum_FIELD"], [45, 47, 7, "enum_FIELD"], [49, 50, 7, "enum_FIELD"], [57, 59, 7, "enum_FIELD"], [66, 68, 7, "enum_FIELD"], [75, 77, 7, "enum_FIELD"], [79, 81, 7, "enum_FIELD"], [17, 16, 7, "enum_FIELD"], [30, 29, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [29, 16, 10, "enum_LAST_LEXICAL_USE"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [43, 14, 10, "enum_LAST_LEXICAL_USE"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [53, 41, 10, "enum_LAST_LEXICAL_USE"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [62, 53, 10, "enum_LAST_LEXICAL_USE"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [71, 62, 10, "enum_LAST_LEXICAL_USE"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [82, 27, 10, "enum_LAST_LEXICAL_USE"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 87, 9, "enum_NEXT_SYNTAX"], [88, 39, 10, "enum_LAST_LEXICAL_USE"], [87, 88, 9, "enum_NEXT_SYNTAX"], [2, 1, 1, "enum_CFG_NEXT"], [6, 11, 1, "enum_CFG_NEXT"], [11, 13, 1, "enum_CFG_NEXT"], [13, 26, 1, "enum_CFG_NEXT"], [26, 38, 1, "enum_CFG_NEXT"], [38, 87, 1, "enum_CFG_NEXT"], [29, 16, 2, "enum_LAST_READ"], [43, 14, 3, "enum_LAST_WRITE"], [53, 41, 2, "enum_LAST_READ"], [62, 53, 2, "enum_LAST_READ"], [71, 62, 2, "enum_LAST_READ"], [82, 27, 3, "enum_LAST_WRITE"], [88, 39, 3, "enum_LAST_WRITE"], [14, 16, 4, "enum_COMPUTED_FROM"], [27, 29, 4, "enum_COMPUTED_FROM"], [39, 41, 4, "enum_COMPUTED_FROM"], [39, 43, 4, "enum_COMPUTED_FROM"], [39, 53, 4, "enum_COMPUTED_FROM"], [39, 62, 4, "enum_COMPUTED_FROM"], [39, 71, 4, "enum_COMPUTED_FROM"], [39, 50, 4, "enum_COMPUTED_FROM"], [39, 82, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "sahana", "repo": "eden", "path": "modules/templates/Climate/menus.py", "id": 46855, "has_bug": false, "code_full": "from typing import Any, Dict\n\ncurrent: Any = None\n\n\nclass MM:\n    def __init__(self, name_nice: str, c: str=\"\", **attr: Any) -> None:\n        pass\n\n    def __call__(self, *items: \"MM\") -> \"MM\":\n        return self\n\n\nclass Class:\n    @classmethod\n    def menu_climate(cls, **attr: Dict[str, Any]) -> MM:\n        \"\"\" Climate module menu \"\"\"\n\n        name_nice: str = current.deployment_settings.modules[\"climate\"].name_nice\n        ADMIN: int = current.session.s3.system_roles.ADMIN\n\n        menu_climate = MM(name_nice, c=\"climate\", **attr)(\n                MM(\"Station Parameters\", f=\"station_parameter\"),\n                #MM(\"Saved Queries\", f=\"save_query\"),\n                MM(\"Purchase Data\", f=\"purchase\"),\n                MM(\"DataSet Prices\", f=\"prices\", restrict=[ADMIN]),\n            )\n        return menu_climate\n", "code": "def menu_climate(cls, **attr: Dict[str, Any]) -> MM:\n    \"\"\" Climate module menu \"\"\"\n\n    name_nice: str = current.deployment_settings.modules[\"climate\"].name_nice\n    ADMIN: int = current.session.s3.system_roles.ADMIN\n\n    menu_climate = MM(name_nice, c=\"climate\", **attr)(\n            MM(\"Station Parameters\", f=\"station_parameter\"),\n            #MM(\"Saved Queries\", f=\"save_query\"),\n            MM(\"Purchase Data\", f=\"purchase\"),\n            MM(\"DataSet Prices\", f=\"prices\", restrict=[ADMIN]),\n        )\n    return menu_climate\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "3890dff869eba446cc1aac4cdbd8bd44df1af297"}
{"source_tokens": ["#NEWLINE#", "def do_model(", "self", ",", "**kwds", ")", ":", "#NEWLINE#", "#INDENT#", "return", "VBGMM", "(", "verbose", "=", "False", ",", "**", "kwds", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [9, 15, 7, "enum_FIELD"], [15, 10, 7, "enum_FIELD"], [12, 14, 7, "enum_FIELD"], [16, 17, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [3, 9, 1, "enum_CFG_NEXT"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "scikit-learn", "repo": "scikit-learn", "path": "sklearn/mixture/tests/test_dpgmm.py", "id": 48863, "has_bug": false, "code_full": "from typing import Any\n\n\nclass VBGMM:\n    def __init__(self, verbose: bool, **kwds: Any):\n        pass\n\n\nclass Class:\n    def do_model(self, **kwds: Any):\n        return VBGMM(verbose=False, **kwds)\n", "code": "def do_model(self, **kwds: Any):\n    return VBGMM(verbose=False, **kwds)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "e2adbb7e037de74044db002eff5898f5e11a5507"}
{"source_tokens": ["#NEWLINE#", "def test_SymmetricGroup(", ")", ":", "#NEWLINE#", "#INDENT#", "G", "=", "SymmetricGroup", "(", "5", ")", "#NEWLINE#", "elements", "=", "list", "(", "G", ".", "generate", "(", ")", ")", "#NEWLINE#", "assert", "(", "G", ".", "generators", "[", "0", "]", ".", "size", "==", "5", ")", "#NEWLINE#", "assert", "(", "len", "(", "elements", ")", "==", "120", ")", "#NEWLINE#", "assert", "(", "G", ".", "is_solvable", "is", "False", ")", "#NEWLINE#", "assert", "(", "G", ".", "is_abelian", "is", "False", ")", "#NEWLINE#", "assert", "(", "G", ".", "is_nilpotent", "is", "False", ")", "#NEWLINE#", "assert", "(", "G", ".", "is_transitive", "(", ")", "is", "True", ")", "#NEWLINE#", "H", "=", "SymmetricGroup", "(", "1", ")", "#NEWLINE#", "assert", "(", "H", ".", "order", "(", ")", "==", "1", ")", "#NEWLINE#", "L", "=", "SymmetricGroup", "(", "2", ")", "#NEWLINE#", "assert", "(", "L", ".", "order", "(", ")", "==", "2", ")"], "edges": [[5, 9, 7, "enum_FIELD"], [12, 16, 7, "enum_FIELD"], [24, 34, 7, "enum_FIELD"], [38, 44, 7, "enum_FIELD"], [48, 53, 7, "enum_FIELD"], [57, 62, 7, "enum_FIELD"], [66, 71, 7, "enum_FIELD"], [75, 82, 7, "enum_FIELD"], [85, 89, 7, "enum_FIELD"], [93, 100, 7, "enum_FIELD"], [103, 107, 7, "enum_FIELD"], [111, 118, 7, "enum_FIELD"], [9, 8, 7, "enum_FIELD"], [16, 15, 7, "enum_FIELD"], [34, 32, 7, "enum_FIELD"], [44, 41, 7, "enum_FIELD"], [53, 51, 7, "enum_FIELD"], [62, 60, 7, "enum_FIELD"], [71, 69, 7, "enum_FIELD"], [82, 80, 7, "enum_FIELD"], [89, 88, 7, "enum_FIELD"], [100, 98, 7, "enum_FIELD"], [107, 106, 7, "enum_FIELD"], [118, 116, 7, "enum_FIELD"], [20, 18, 7, "enum_FIELD"], [32, 29, 7, "enum_FIELD"], [41, 40, 7, "enum_FIELD"], [51, 50, 7, "enum_FIELD"], [60, 59, 7, "enum_FIELD"], [69, 68, 7, "enum_FIELD"], [80, 78, 7, "enum_FIELD"], [98, 96, 7, "enum_FIELD"], [116, 114, 7, "enum_FIELD"], [18, 17, 7, "enum_FIELD"], [29, 27, 7, "enum_FIELD"], [29, 30, 7, "enum_FIELD"], [78, 77, 7, "enum_FIELD"], [96, 95, 7, "enum_FIELD"], [114, 113, 7, "enum_FIELD"], [27, 26, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [17, 6, 10, "enum_LAST_LEXICAL_USE"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [26, 17, 10, "enum_LAST_LEXICAL_USE"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [42, 13, 10, "enum_LAST_LEXICAL_USE"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [50, 26, 10, "enum_LAST_LEXICAL_USE"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [59, 50, 10, "enum_LAST_LEXICAL_USE"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [68, 59, 10, "enum_LAST_LEXICAL_USE"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [77, 68, 10, "enum_LAST_LEXICAL_USE"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [88, 8, 10, "enum_LAST_LEXICAL_USE"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [95, 86, 10, "enum_LAST_LEXICAL_USE"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [106, 88, 10, "enum_LAST_LEXICAL_USE"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [113, 104, 10, "enum_LAST_LEXICAL_USE"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [5, 12, 1, "enum_CFG_NEXT"], [12, 24, 1, "enum_CFG_NEXT"], [24, 38, 1, "enum_CFG_NEXT"], [38, 48, 1, "enum_CFG_NEXT"], [48, 57, 1, "enum_CFG_NEXT"], [57, 66, 1, "enum_CFG_NEXT"], [66, 75, 1, "enum_CFG_NEXT"], [75, 85, 1, "enum_CFG_NEXT"], [85, 93, 1, "enum_CFG_NEXT"], [93, 103, 1, "enum_CFG_NEXT"], [103, 111, 1, "enum_CFG_NEXT"], [17, 6, 3, "enum_LAST_WRITE"], [26, 17, 2, "enum_LAST_READ"], [26, 6, 3, "enum_LAST_WRITE"], [42, 13, 3, "enum_LAST_WRITE"], [50, 26, 2, "enum_LAST_READ"], [50, 6, 3, "enum_LAST_WRITE"], [59, 50, 2, "enum_LAST_READ"], [59, 6, 3, "enum_LAST_WRITE"], [68, 59, 2, "enum_LAST_READ"], [68, 6, 3, "enum_LAST_WRITE"], [77, 68, 2, "enum_LAST_READ"], [77, 6, 3, "enum_LAST_WRITE"], [88, 8, 2, "enum_LAST_READ"], [95, 86, 3, "enum_LAST_WRITE"], [106, 88, 2, "enum_LAST_READ"], [113, 104, 3, "enum_LAST_WRITE"], [6, 8, 4, "enum_COMPUTED_FROM"], [13, 15, 4, "enum_COMPUTED_FROM"], [13, 17, 4, "enum_COMPUTED_FROM"], [86, 88, 4, "enum_COMPUTED_FROM"], [104, 106, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "sympy", "repo": "sympy", "path": "sympy/combinatorics/tests/test_named_groups.py", "id": 55250, "has_bug": false, "code_full": "from typing import Any, List\n\n\nclass SymmetricGroup:\n    generators: List[Any]\n    is_solvable: bool\n    is_abelian: bool\n    is_nilpotent: bool\n\n    def __init__(self, n: int):\n        pass\n\n    def generate(self) -> List[Any]:\n        return []\n    \n    def is_transitive(self) -> bool:\n        return False\n    \n    def order(self) -> int:\n        return 0\n\n\ndef test_SymmetricGroup():\n    G = SymmetricGroup(5)\n    elements = list(G.generate())\n    assert (G.generators[0]).size == 5\n    assert len(elements) == 120\n    assert G.is_solvable is False\n    assert G.is_abelian is False\n    assert G.is_nilpotent is False\n    assert G.is_transitive() is True\n    H = SymmetricGroup(1)\n    assert H.order() == 1\n    L = SymmetricGroup(2)\n    assert L.order() == 2\n", "code": "def test_SymmetricGroup():\n    G = SymmetricGroup(5)\n    elements = list(G.generate())\n    assert (G.generators[0]).size == 5\n    assert len(elements) == 120\n    assert G.is_solvable is False\n    assert G.is_abelian is False\n    assert G.is_nilpotent is False\n    assert G.is_transitive() is True\n    H = SymmetricGroup(1)\n    assert H.order() == 1\n    L = SymmetricGroup(2)\n    assert L.order() == 2\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "25ea11a953ec1a83e73b58d43a1d5f4026e006bc"}
{"source_tokens": ["#NEWLINE#", "def test_environ_headers(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "headers", ".", "extend", "(", "(", "(", "'SCRIPT_NAME'", ",", "'script'", ")", ",", "(", "'CONTENT-TYPE'", ",", "'text/plain'", ")", ",", "(", "'CONTENT-LENGTH'", ",", "'209'", ")", ",", "(", "'X_TEST'", ",", "'123'", ")", ",", "(", "'X_TEST'", ",", "'456'", ")", ")", ")", "#NEWLINE#", "environ", "=", "self", ".", "_make_one", "(", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "environ", "[", "'CONTENT_TYPE'", "]", ",", "'text/plain'", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "environ", "[", "'CONTENT_LENGTH'", "]", ",", "'209'", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "environ", "[", "'HTTP_X_TEST'", "]", ",", "'123,456'", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "environ", "[", "'SCRIPT_NAME'", "]", ",", "'script'", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "environ", "[", "'SERVER_NAME'", "]", ",", "'python.org'", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "environ", "[", "'SERVER_PORT'", "]", ",", "'80'", ")", "#NEWLINE#", "get_extra_info_calls", "=", "self", ".", "transport", ".", "get_extra_info", ".", "mock_calls", "#NEWLINE#", "expected_calls", "=", "[", "unittest", ".", "mock", ".", "call", "(", "'socket'", ")", ",", "unittest", ".", "mock", ".", "call", "(", "'peername'", ")", "]", "#NEWLINE#", "self", ".", "assertEqual", "(", "expected_calls", ",", "get_extra_info_calls", ")"], "edges": [[6, 12, 7, "enum_FIELD"], [45, 51, 7, "enum_FIELD"], [53, 62, 7, "enum_FIELD"], [65, 74, 7, "enum_FIELD"], [77, 86, 7, "enum_FIELD"], [89, 98, 7, "enum_FIELD"], [101, 110, 7, "enum_FIELD"], [113, 122, 7, "enum_FIELD"], [125, 133, 7, "enum_FIELD"], [135, 147, 7, "enum_FIELD"], [157, 163, 7, "enum_FIELD"], [12, 10, 7, "enum_FIELD"], [51, 49, 7, "enum_FIELD"], [62, 55, 7, "enum_FIELD"], [74, 67, 7, "enum_FIELD"], [86, 79, 7, "enum_FIELD"], [98, 91, 7, "enum_FIELD"], [110, 103, 7, "enum_FIELD"], [122, 115, 7, "enum_FIELD"], [133, 131, 7, "enum_FIELD"], [163, 159, 7, "enum_FIELD"], [10, 8, 7, "enum_FIELD"], [49, 48, 7, "enum_FIELD"], [55, 54, 7, "enum_FIELD"], [59, 58, 7, "enum_FIELD"], [59, 60, 7, "enum_FIELD"], [67, 66, 7, "enum_FIELD"], [71, 70, 7, "enum_FIELD"], [71, 72, 7, "enum_FIELD"], [79, 78, 7, "enum_FIELD"], [83, 82, 7, "enum_FIELD"], [83, 84, 7, "enum_FIELD"], [91, 90, 7, "enum_FIELD"], [95, 94, 7, "enum_FIELD"], [95, 96, 7, "enum_FIELD"], [103, 102, 7, "enum_FIELD"], [107, 106, 7, "enum_FIELD"], [107, 108, 7, "enum_FIELD"], [115, 114, 7, "enum_FIELD"], [119, 118, 7, "enum_FIELD"], [119, 120, 7, "enum_FIELD"], [131, 129, 7, "enum_FIELD"], [144, 142, 7, "enum_FIELD"], [153, 151, 7, "enum_FIELD"], [159, 158, 7, "enum_FIELD"], [8, 7, 7, "enum_FIELD"], [129, 128, 7, "enum_FIELD"], [142, 140, 7, "enum_FIELD"], [151, 149, 7, "enum_FIELD"], [140, 139, 7, "enum_FIELD"], [149, 148, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [7, 2, 10, "enum_LAST_LEXICAL_USE"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [48, 7, 10, "enum_LAST_LEXICAL_USE"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [54, 48, 10, "enum_LAST_LEXICAL_USE"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [58, 46, 10, "enum_LAST_LEXICAL_USE"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [66, 54, 10, "enum_LAST_LEXICAL_USE"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [70, 58, 10, "enum_LAST_LEXICAL_USE"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [78, 66, 10, "enum_LAST_LEXICAL_USE"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [82, 70, 10, "enum_LAST_LEXICAL_USE"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [90, 78, 10, "enum_LAST_LEXICAL_USE"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [94, 82, 10, "enum_LAST_LEXICAL_USE"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [102, 90, 10, "enum_LAST_LEXICAL_USE"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [106, 94, 10, "enum_LAST_LEXICAL_USE"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [114, 102, 10, "enum_LAST_LEXICAL_USE"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [118, 106, 10, "enum_LAST_LEXICAL_USE"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [128, 114, 10, "enum_LAST_LEXICAL_USE"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [148, 139, 10, "enum_LAST_LEXICAL_USE"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [158, 128, 10, "enum_LAST_LEXICAL_USE"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [162, 136, 10, "enum_LAST_LEXICAL_USE"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [164, 126, 10, "enum_LAST_LEXICAL_USE"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [6, 45, 1, "enum_CFG_NEXT"], [45, 53, 1, "enum_CFG_NEXT"], [53, 65, 1, "enum_CFG_NEXT"], [65, 77, 1, "enum_CFG_NEXT"], [77, 89, 1, "enum_CFG_NEXT"], [89, 101, 1, "enum_CFG_NEXT"], [101, 113, 1, "enum_CFG_NEXT"], [113, 125, 1, "enum_CFG_NEXT"], [125, 135, 1, "enum_CFG_NEXT"], [135, 157, 1, "enum_CFG_NEXT"], [7, 2, 3, "enum_LAST_WRITE"], [48, 7, 2, "enum_LAST_READ"], [48, 2, 3, "enum_LAST_WRITE"], [54, 48, 2, "enum_LAST_READ"], [54, 2, 3, "enum_LAST_WRITE"], [58, 46, 3, "enum_LAST_WRITE"], [66, 54, 2, "enum_LAST_READ"], [66, 2, 3, "enum_LAST_WRITE"], [70, 58, 2, "enum_LAST_READ"], [70, 46, 3, "enum_LAST_WRITE"], [78, 66, 2, "enum_LAST_READ"], [78, 2, 3, "enum_LAST_WRITE"], [82, 70, 2, "enum_LAST_READ"], [82, 46, 3, "enum_LAST_WRITE"], [90, 78, 2, "enum_LAST_READ"], [90, 2, 3, "enum_LAST_WRITE"], [94, 82, 2, "enum_LAST_READ"], [94, 46, 3, "enum_LAST_WRITE"], [102, 90, 2, "enum_LAST_READ"], [102, 2, 3, "enum_LAST_WRITE"], [106, 94, 2, "enum_LAST_READ"], [106, 46, 3, "enum_LAST_WRITE"], [114, 102, 2, "enum_LAST_READ"], [114, 2, 3, "enum_LAST_WRITE"], [118, 106, 2, "enum_LAST_READ"], [118, 46, 3, "enum_LAST_WRITE"], [128, 114, 2, "enum_LAST_READ"], [128, 2, 3, "enum_LAST_WRITE"], [148, 139, 2, "enum_LAST_READ"], [158, 128, 2, "enum_LAST_READ"], [158, 2, 3, "enum_LAST_WRITE"], [162, 136, 3, "enum_LAST_WRITE"], [164, 126, 3, "enum_LAST_WRITE"], [46, 48, 4, "enum_COMPUTED_FROM"], [126, 128, 4, "enum_COMPUTED_FROM"], [136, 139, 4, "enum_COMPUTED_FROM"], [136, 148, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "KeepSafe", "repo": "aiohttp", "path": "tests/test_wsgi.py", "id": 5881, "has_bug": false, "code_full": "import unittest\nfrom typing import Dict, List, Tuple\nfrom unittest import mock\n\n\nclass Class(unittest.TestCase):\n    headers: List[Tuple[str, str]]\n    transport: mock.Mock\n\n    def _make_one(self) -> Dict[str, str]:\n        return {}\n\n    def test_environ_headers(self):\n        self.headers.extend(\n            (('SCRIPT_NAME', 'script'),\n                ('CONTENT-TYPE', 'text/plain'),\n                ('CONTENT-LENGTH', '209'),\n                ('X_TEST', '123'),\n                ('X_TEST', '456')))\n        environ: Dict[str, str] = self._make_one()\n        print(environ)\n        self.assertEqual(environ['CONTENT_TYPE'], 'text/plain')\n        self.assertEqual(environ['CONTENT_LENGTH'], '209')\n        self.assertEqual(environ['HTTP_X_TEST'], '123,456')\n        self.assertEqual(environ['SCRIPT_NAME'], 'script')\n        self.assertEqual(environ['SERVER_NAME'], 'python.org')\n        self.assertEqual(environ['SERVER_PORT'], '80')\n        get_extra_info_calls = self.transport.get_extra_info.mock_calls\n        expected_calls = [\n            mock.call('socket'),\n            mock.call('peername'),\n        ]\n        self.assertEqual(expected_calls, get_extra_info_calls)\n", "code": "def test_environ_headers(self):\n    self.headers.extend(\n        (('SCRIPT_NAME', 'script'),\n            ('CONTENT-TYPE', 'text/plain'),\n            ('CONTENT-LENGTH', '209'),\n            ('X_TEST', '123'),\n            ('X_TEST', '456')))\n    environ: Dict[str, str] = self._make_one()\n    print(environ)\n    self.assertEqual(environ['CONTENT_TYPE'], 'text/plain')\n    self.assertEqual(environ['CONTENT_LENGTH'], '209')\n    self.assertEqual(environ['HTTP_X_TEST'], '123,456')\n    self.assertEqual(environ['SCRIPT_NAME'], 'script')\n    self.assertEqual(environ['SERVER_NAME'], 'python.org')\n    self.assertEqual(environ['SERVER_PORT'], '80')\n    get_extra_info_calls = self.transport.get_extra_info.mock_calls\n    expected_calls = [\n        mock.call('socket'),\n        mock.call('peername'),\n    ]\n    self.assertEqual(expected_calls, get_extra_info_calls)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "0e7ea65f0db1b9d69e4f64c19906da6857e2b53a"}
{"source_tokens": ["#NEWLINE#", "def _schema_update_value(", "self", ",", "prop", ",", "data", ")", ":", "#NEWLINE#", "#INDENT#", "value", "=", "convert_value", "(", "prop", ",", "data", ")", "#NEWLINE#", "setattr", "(", "self", ",", "prop", ".", "name", ",", "value", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [10, 16, 7, "enum_FIELD"], [19, 23, 7, "enum_FIELD"], [16, 13, 7, "enum_FIELD"], [23, 20, 7, "enum_FIELD"], [25, 24, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [15, 4, 10, "enum_LAST_LEXICAL_USE"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [17, 6, 10, "enum_LAST_LEXICAL_USE"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [22, 2, 10, "enum_LAST_LEXICAL_USE"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [24, 15, 10, "enum_LAST_LEXICAL_USE"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [28, 11, 10, "enum_LAST_LEXICAL_USE"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [3, 10, 1, "enum_CFG_NEXT"], [10, 19, 1, "enum_CFG_NEXT"], [15, 4, 3, "enum_LAST_WRITE"], [17, 6, 3, "enum_LAST_WRITE"], [22, 2, 3, "enum_LAST_WRITE"], [24, 15, 2, "enum_LAST_READ"], [24, 4, 3, "enum_LAST_WRITE"], [28, 11, 3, "enum_LAST_WRITE"], [11, 13, 4, "enum_COMPUTED_FROM"], [11, 15, 4, "enum_COMPUTED_FROM"], [11, 17, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "pudo", "repo": "aleph", "path": "aleph/model/schema_model.py", "id": 39001, "has_bug": false, "code_full": "from typing import Any\n\n\nclass Property:\n    name: str\n\n\ndef convert_value(prop: Property, data: Any) -> Any:\n    pass\n\n\nclass Class:\n    def _schema_update_value(self, prop: Property, data: Any):\n        value: Any = convert_value(prop, data)\n        setattr(self, prop.name, value)\n", "code": "def _schema_update_value(self, prop: Property, data: Any):\n    value: Any = convert_value(prop, data)\n    setattr(self, prop.name, value)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "47651ec45fd1094418951d306641f6d28191f3d0"}
{"source_tokens": ["#NEWLINE#", "def test_no_files(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "runner", "=", "MRJobRunner", "(", "conf_paths", "=", "[", "]", ")", "#NEWLINE#", "self", ".", "assertRaises", "(", "ValueError", ",", "runner", ".", "_invoke_sort", ",", "[", "]", ",", "self", ".", "out", ")"], "edges": [[6, 10, 7, "enum_FIELD"], [16, 26, 7, "enum_FIELD"], [10, 9, 7, "enum_FIELD"], [26, 18, 7, "enum_FIELD"], [11, 13, 7, "enum_FIELD"], [18, 17, 7, "enum_FIELD"], [24, 23, 7, "enum_FIELD"], [31, 30, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [17, 2, 10, "enum_LAST_LEXICAL_USE"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [23, 7, 10, "enum_LAST_LEXICAL_USE"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [30, 17, 10, "enum_LAST_LEXICAL_USE"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [6, 16, 1, "enum_CFG_NEXT"], [17, 2, 3, "enum_LAST_WRITE"], [23, 7, 3, "enum_LAST_WRITE"], [30, 17, 2, "enum_LAST_READ"], [30, 2, 3, "enum_LAST_WRITE"], [7, 9, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "Yelp", "repo": "mrjob", "path": "tests/test_runner.py", "id": 8270, "has_bug": false, "code_full": "import unittest\nfrom typing import Any, List\n\n\nclass MRJobRunner:\n    def __init__(self, conf_paths: List[str]):\n        pass\n\n    def _invoke_sort(self, files: List[Any], output: str):\n        pass\n\n\nclass Class(unittest.TestCase):\n    out: str\n\n    def test_no_files(self):\n        runner = MRJobRunner(conf_paths=[])\n        self.assertRaises(ValueError,\n                            runner._invoke_sort, [], self.out)\n", "code": "def test_no_files(self):\n    runner = MRJobRunner(conf_paths=[])\n    self.assertRaises(ValueError,\n                        runner._invoke_sort, [], self.out)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "dbfe64ea9b135b65bd9ee4f8d614d4ee6b717189"}
{"source_tokens": ["#NEWLINE#", "def add_arguments(", "self", ",", "parser", ")", ":", "#NEWLINE#", "#INDENT#", "super", "(", "TenantWrappedCommand", ",", "self", ")", ".", "add_arguments", "(", "parser", ")", "#NEWLINE#", "self", ".", "command_instance", ".", "add_arguments", "(", "parser", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [8, 17, 7, "enum_FIELD"], [20, 26, 7, "enum_FIELD"], [17, 15, 7, "enum_FIELD"], [26, 24, 7, "enum_FIELD"], [15, 12, 7, "enum_FIELD"], [24, 22, 7, "enum_FIELD"], [12, 9, 7, "enum_FIELD"], [22, 21, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [13, 2, 10, "enum_LAST_LEXICAL_USE"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [18, 4, 10, "enum_LAST_LEXICAL_USE"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [21, 13, 10, "enum_LAST_LEXICAL_USE"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [27, 18, 10, "enum_LAST_LEXICAL_USE"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [3, 8, 1, "enum_CFG_NEXT"], [8, 20, 1, "enum_CFG_NEXT"], [13, 2, 3, "enum_LAST_WRITE"], [18, 4, 3, "enum_LAST_WRITE"], [21, 13, 2, "enum_LAST_READ"], [21, 2, 3, "enum_LAST_WRITE"], [27, 18, 2, "enum_LAST_READ"], [27, 4, 3, "enum_LAST_WRITE"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "tomturner", "repo": "django-tenants", "path": "django_tenants/management/commands/__init__.py", "id": 58518, "has_bug": false, "code_full": "import argparse\n\n\nclass Command:\n    def add_arguments(self, parser: argparse.ArgumentParser):\n        pass\n\n\nclass TenantWrappedCommand(Command):\n    command_instance: Command\n\n    def add_arguments(self, parser):\n        super(TenantWrappedCommand, self).add_arguments(parser)\n        self.command_instance.add_arguments(parser)\n", "code": "def add_arguments(self, parser):\n    super(TenantWrappedCommand, self).add_arguments(parser)\n    self.command_instance.add_arguments(parser)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "145ad9eeb56b4e7f665de0a993ddb6f176cc33b5"}
{"source_tokens": ["#NEWLINE#", "def RemoteCopy(", "self", ",", "file_path", ",", "remote_path", "=", "''", ",", "copy_to", "=", "True", ")", ":", "#NEWLINE#", "#INDENT#", "'Copies a file to or from the container in the remote VM.\\n\\n  Args:\\n    file_path: Local path to file.\\n    remote_path: Optional path of where to copy file inside the container.\\n    copy_to: True to copy to VM, False to copy from VM.\\n  '", "#NEWLINE#", "if", "copy_to", ":", "#NEWLINE#", "#INDENT#", "file_name", "=", "os", ".", "path", ".", "basename", "(", "file_path", ")", "#NEWLINE#", "tmp_path", "=", "posixpath", ".", "join", "(", "vm_util", ".", "VM_TMP_DIR", ",", "file_name", ")", "#NEWLINE#", "self", ".", "RemoteHostCopy", "(", "file_path", ",", "tmp_path", ",", "copy_to", ")", "#NEWLINE#", "self", ".", "ContainerCopy", "(", "file_name", ",", "remote_path", ",", "copy_to", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "file_name", "=", "posixpath", ".", "basename", "(", "remote_path", ")", "#NEWLINE#", "tmp_path", "=", "posixpath", ".", "join", "(", "vm_util", ".", "VM_TMP_DIR", ",", "file_name", ")", "#NEWLINE#", "self", ".", "ContainerCopy", "(", "file_name", ",", "remote_path", ",", "copy_to", ")", "#NEWLINE#", "self", ".", "RemoteHostCopy", "(", "file_path", ",", "tmp_path", ",", "copy_to", ")"], "edges": [[1, 7, 7, "enum_FIELD"], [16, 17, 7, "enum_FIELD"], [21, 20, 7, "enum_FIELD"], [23, 31, 7, "enum_FIELD"], [34, 44, 7, "enum_FIELD"], [47, 53, 7, "enum_FIELD"], [58, 64, 7, "enum_FIELD"], [74, 80, 7, "enum_FIELD"], [83, 93, 7, "enum_FIELD"], [96, 102, 7, "enum_FIELD"], [107, 113, 7, "enum_FIELD"], [31, 29, 7, "enum_FIELD"], [44, 38, 7, "enum_FIELD"], [53, 49, 7, "enum_FIELD"], [64, 60, 7, "enum_FIELD"], [80, 78, 7, "enum_FIELD"], [93, 87, 7, "enum_FIELD"], [102, 98, 7, "enum_FIELD"], [113, 109, 7, "enum_FIELD"], [29, 27, 7, "enum_FIELD"], [38, 37, 7, "enum_FIELD"], [42, 41, 7, "enum_FIELD"], [49, 48, 7, "enum_FIELD"], [60, 59, 7, "enum_FIELD"], [78, 77, 7, "enum_FIELD"], [87, 86, 7, "enum_FIELD"], [91, 90, 7, "enum_FIELD"], [98, 97, 7, "enum_FIELD"], [109, 108, 7, "enum_FIELD"], [27, 26, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 19, 9, "enum_NEXT_SYNTAX"], [20, 10, 10, "enum_LAST_LEXICAL_USE"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [32, 4, 10, "enum_LAST_LEXICAL_USE"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [45, 24, 10, "enum_LAST_LEXICAL_USE"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [48, 2, 10, "enum_LAST_LEXICAL_USE"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [52, 32, 10, "enum_LAST_LEXICAL_USE"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [54, 35, 10, "enum_LAST_LEXICAL_USE"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [56, 20, 10, "enum_LAST_LEXICAL_USE"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [59, 48, 10, "enum_LAST_LEXICAL_USE"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [63, 45, 10, "enum_LAST_LEXICAL_USE"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [65, 6, 10, "enum_LAST_LEXICAL_USE"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [67, 56, 10, "enum_LAST_LEXICAL_USE"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 74, 9, "enum_NEXT_SYNTAX"], [75, 63, 10, "enum_LAST_LEXICAL_USE"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [77, 37, 10, "enum_LAST_LEXICAL_USE"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [81, 65, 10, "enum_LAST_LEXICAL_USE"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [84, 54, 10, "enum_LAST_LEXICAL_USE"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [86, 77, 10, "enum_LAST_LEXICAL_USE"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [90, 41, 10, "enum_LAST_LEXICAL_USE"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [94, 75, 10, "enum_LAST_LEXICAL_USE"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [97, 59, 10, "enum_LAST_LEXICAL_USE"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [101, 94, 10, "enum_LAST_LEXICAL_USE"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [103, 81, 10, "enum_LAST_LEXICAL_USE"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [105, 67, 10, "enum_LAST_LEXICAL_USE"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [108, 97, 10, "enum_LAST_LEXICAL_USE"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [112, 52, 10, "enum_LAST_LEXICAL_USE"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [114, 84, 10, "enum_LAST_LEXICAL_USE"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [116, 105, 10, "enum_LAST_LEXICAL_USE"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [8, 12, 1, "enum_CFG_NEXT"], [12, 1, 1, "enum_CFG_NEXT"], [7, 16, 1, "enum_CFG_NEXT"], [16, 20, 1, "enum_CFG_NEXT"], [20, 74, 1, "enum_CFG_NEXT"], [20, 23, 1, "enum_CFG_NEXT"], [23, 34, 1, "enum_CFG_NEXT"], [34, 47, 1, "enum_CFG_NEXT"], [47, 58, 1, "enum_CFG_NEXT"], [74, 83, 1, "enum_CFG_NEXT"], [83, 96, 1, "enum_CFG_NEXT"], [96, 107, 1, "enum_CFG_NEXT"], [20, 10, 3, "enum_LAST_WRITE"], [32, 4, 3, "enum_LAST_WRITE"], [45, 24, 3, "enum_LAST_WRITE"], [48, 2, 3, "enum_LAST_WRITE"], [52, 32, 2, "enum_LAST_READ"], [52, 4, 3, "enum_LAST_WRITE"], [54, 35, 3, "enum_LAST_WRITE"], [56, 20, 2, "enum_LAST_READ"], [56, 10, 3, "enum_LAST_WRITE"], [59, 48, 2, "enum_LAST_READ"], [59, 2, 3, "enum_LAST_WRITE"], [63, 45, 2, "enum_LAST_READ"], [63, 24, 3, "enum_LAST_WRITE"], [65, 6, 3, "enum_LAST_WRITE"], [67, 56, 2, "enum_LAST_READ"], [67, 10, 3, "enum_LAST_WRITE"], [81, 6, 3, "enum_LAST_WRITE"], [86, 77, 2, "enum_LAST_READ"], [94, 75, 3, "enum_LAST_WRITE"], [97, 2, 3, "enum_LAST_WRITE"], [101, 94, 2, "enum_LAST_READ"], [101, 75, 3, "enum_LAST_WRITE"], [103, 81, 2, "enum_LAST_READ"], [103, 6, 3, "enum_LAST_WRITE"], [105, 20, 2, "enum_LAST_READ"], [105, 10, 3, "enum_LAST_WRITE"], [108, 97, 2, "enum_LAST_READ"], [108, 2, 3, "enum_LAST_WRITE"], [112, 4, 3, "enum_LAST_WRITE"], [114, 84, 3, "enum_LAST_WRITE"], [116, 105, 2, "enum_LAST_READ"], [116, 10, 3, "enum_LAST_WRITE"], [24, 32, 4, "enum_COMPUTED_FROM"], [24, 26, 4, "enum_COMPUTED_FROM"], [35, 45, 4, "enum_COMPUTED_FROM"], [35, 37, 4, "enum_COMPUTED_FROM"], [35, 41, 4, "enum_COMPUTED_FROM"], [75, 81, 4, "enum_COMPUTED_FROM"], [75, 77, 4, "enum_COMPUTED_FROM"], [84, 94, 4, "enum_COMPUTED_FROM"], [84, 86, 4, "enum_COMPUTED_FROM"], [84, 90, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "GoogleCloudPlatform", "repo": "PerfKitBenchmarker", "path": "perfkitbenchmarker/linux_virtual_machine.py", "id": 5171, "has_bug": false, "code_full": "import os\nimport posixpath\n\n\nclass vm_util:\n    VM_TMP_DIR: str\n\n\nclass Class:\n    def RemoteHostCopy(self, file_path: str, remote_path: str, copy_to: bool):\n        pass\n\n    def ContainerCopy(self, file_name: str, remote_path: str, copy_to: bool):\n        pass\n\n    def RemoteCopy(self, file_path: str, remote_path: str='', copy_to: bool=True):\n        \"\"\"Copies a file to or from the container in the remote VM.\n\n        Args:\n            file_path: Local path to file.\n            remote_path: Optional path of where to copy file inside the container.\n            copy_to: True to copy to VM, False to copy from VM.\n        \"\"\"\n        if copy_to:\n            file_name: str = os.path.basename(file_path)\n            tmp_path: str = posixpath.join(vm_util.VM_TMP_DIR, file_name)\n            self.RemoteHostCopy(file_path, tmp_path, copy_to)\n            self.ContainerCopy(file_name, remote_path, copy_to)\n        else:\n            file_name: str = posixpath.basename(remote_path)\n            tmp_path: str = posixpath.join(vm_util.VM_TMP_DIR, file_name)\n            self.ContainerCopy(file_name, remote_path, copy_to)\n            self.RemoteHostCopy(file_path, tmp_path, copy_to)\n", "code": "def RemoteCopy(self, file_path: str, remote_path: str='', copy_to: bool=True):\n    \"\"\"Copies a file to or from the container in the remote VM.\n\n    Args:\n        file_path: Local path to file.\n        remote_path: Optional path of where to copy file inside the container.\n        copy_to: True to copy to VM, False to copy from VM.\n    \"\"\"\n    if copy_to:\n        file_name: str = os.path.basename(file_path)\n        tmp_path: str = posixpath.join(vm_util.VM_TMP_DIR, file_name)\n        self.RemoteHostCopy(file_path, tmp_path, copy_to)\n        self.ContainerCopy(file_name, remote_path, copy_to)\n    else:\n        file_name: str = posixpath.basename(remote_path)\n        tmp_path: str = posixpath.join(vm_util.VM_TMP_DIR, file_name)\n        self.ContainerCopy(file_name, remote_path, copy_to)\n        self.RemoteHostCopy(file_path, tmp_path, copy_to)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "f2827f0d63db629f2d21c521c61f58a8e09e9c8e"}
{"source_tokens": ["#NEWLINE#", "def test_nested_aggregate(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "q", "=", "ElasticQuery", "(", ")", "#NEWLINE#", "q", ".", "aggregate", "(", "Aggregate", ".", "terms", "(", "'agg_name'", ",", "'field'", ")", ".", "aggregate", "(", "Aggregate", ".", "sum", "(", "'sub_agg_name'", ",", "'sub_field'", ")", ")", ")", "#NEWLINE#", "assert_equal", "(", "self", ",", "q", ".", "dict", "(", ")", ",", "{", "'aggregations'", ":", "{", "'agg_name'", ":", "{", "'terms'", ":", "{", "'field'", ":", "'field'", "}", ",", "'aggregations'", ":", "{", "'sub_agg_name'", ":", "{", "'sum'", ":", "{", "'field'", ":", "'sub_field'", "}", "}", "}", "}", "}", "}", ")"], "edges": [[6, 10, 7, "enum_FIELD"], [12, 16, 7, "enum_FIELD"], [38, 42, 7, "enum_FIELD"], [10, 9, 7, "enum_FIELD"], [16, 14, 7, "enum_FIELD"], [42, 39, 7, "enum_FIELD"], [14, 13, 7, "enum_FIELD"], [27, 25, 7, "enum_FIELD"], [46, 44, 7, "enum_FIELD"], [25, 22, 7, "enum_FIELD"], [33, 29, 7, "enum_FIELD"], [44, 43, 7, "enum_FIELD"], [22, 18, 7, "enum_FIELD"], [29, 28, 7, "enum_FIELD"], [18, 17, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [13, 7, 10, "enum_LAST_LEXICAL_USE"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [28, 17, 10, "enum_LAST_LEXICAL_USE"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [41, 2, 10, "enum_LAST_LEXICAL_USE"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [43, 13, 10, "enum_LAST_LEXICAL_USE"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [6, 12, 1, "enum_CFG_NEXT"], [12, 38, 1, "enum_CFG_NEXT"], [13, 7, 3, "enum_LAST_WRITE"], [28, 17, 2, "enum_LAST_READ"], [41, 2, 3, "enum_LAST_WRITE"], [43, 13, 2, "enum_LAST_READ"], [43, 7, 3, "enum_LAST_WRITE"], [7, 9, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "Fizzadar", "repo": "ElasticQuery", "path": "tests/test_api.py", "id": 4827, "has_bug": false, "code_full": "import unittest\nfrom typing import Any, Dict\n\n\nclass Aggregate:\n    @classmethod\n    def terms(cls, name: str, field: str) -> 'Aggregate':\n        return cls()\n    \n    def aggregate(self, agg: 'Aggregate') -> 'Aggregate':\n        return self\n\n    @classmethod\n    def sum(cls, name: str, field: str) -> 'Aggregate':\n        return cls()\n\n\nclass ElasticQuery:\n    def aggregate(self, agg: Aggregate):\n        pass\n\n    def dict(self) -> Dict[str, Any]:\n        return {}\n\n\ndef assert_equal(test_case:  unittest.TestCase, actual: Any, expected: Any):\n    pass\n\n\nclass Class(unittest.TestCase):\n    def test_nested_aggregate(self):\n        q: ElasticQuery = ElasticQuery()\n        q.aggregate(Aggregate.terms('agg_name', 'field').aggregate(\n            Aggregate.sum('sub_agg_name', 'sub_field')\n        ))\n\n        assert_equal(self, q.dict(), {\n            'aggregations': {\n                'agg_name': {\n                    'terms': {\n                        'field': 'field'\n                    },\n                    'aggregations': {\n                        'sub_agg_name': {\n                            'sum': {\n                                'field': 'sub_field'\n                            }\n                        }\n                    }\n                }\n            }\n        })\n", "code": "def test_nested_aggregate(self):\n    q: ElasticQuery = ElasticQuery()\n    q.aggregate(Aggregate.terms('agg_name', 'field').aggregate(\n        Aggregate.sum('sub_agg_name', 'sub_field')\n    ))\n\n    assert_equal(self, q.dict(), {\n        'aggregations': {\n            'agg_name': {\n                'terms': {\n                    'field': 'field'\n                },\n                'aggregations': {\n                    'sub_agg_name': {\n                        'sum': {\n                            'field': 'sub_field'\n                        }\n                    }\n                }\n            }\n        }\n    })\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "498e7223e8b8a77f675ea7cb51178f49b021ef5f"}
{"source_tokens": ["#NEWLINE#", "def normalize(", "self", ",", "s", ")", ":", "#NEWLINE#", "#INDENT#", "return", "IrcString", "(", "s", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [9, 11, 7, "enum_FIELD"], [11, 10, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [12, 4, 10, "enum_LAST_LEXICAL_USE"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [3, 9, 1, "enum_CFG_NEXT"], [12, 4, 3, "enum_LAST_WRITE"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "ProgVal", "repo": "Limnoria", "path": "src/ircutils.py", "id": 6892, "has_bug": false, "code_full": "class IrcString:\n    def __init__(cls, s: str):\n        pass\n\n\nclass Class:\n    def normalize(self, s: str) -> IrcString:\n        return IrcString(s)\n", "code": "def normalize(self, s: str) -> IrcString:\n    return IrcString(s)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "22956a3f4dc9f777a091b46501fede7a4bf0731c"}
{"source_tokens": ["#NEWLINE#", "def test_qexpr_commutative(", ")", ":", "#NEWLINE#", "#INDENT#", "q1", "=", "QExpr", "(", "x", ")", "#NEWLINE#", "q2", "=", "QExpr", "(", "y", ")", "#NEWLINE#", "assert", "(", "q1", ".", "is_commutative", "is", "False", ")", "#NEWLINE#", "assert", "(", "q2", ".", "is_commutative", "is", "False", ")", "#NEWLINE#", "assert", "(", "(", "q1", "*", "q2", ")", "!=", "(", "q2", "*", "q1", ")", ")", "#NEWLINE#", "q", "=", "QExpr", ".", "_new_rawargs", "(", "0", ",", "1", ",", "HilbertSpace", "(", ")", ")", "#NEWLINE#", "assert", "(", "q", ".", "is_commutative", "is", "False", ")"], "edges": [[5, 9, 7, "enum_FIELD"], [12, 16, 7, "enum_FIELD"], [20, 25, 7, "enum_FIELD"], [29, 34, 7, "enum_FIELD"], [38, 45, 7, "enum_FIELD"], [52, 60, 7, "enum_FIELD"], [68, 73, 7, "enum_FIELD"], [9, 8, 7, "enum_FIELD"], [16, 15, 7, "enum_FIELD"], [25, 23, 7, "enum_FIELD"], [34, 32, 7, "enum_FIELD"], [45, 42, 7, "enum_FIELD"], [60, 56, 7, "enum_FIELD"], [73, 71, 7, "enum_FIELD"], [23, 22, 7, "enum_FIELD"], [32, 31, 7, "enum_FIELD"], [42, 41, 7, "enum_FIELD"], [42, 43, 7, "enum_FIELD"], [48, 47, 7, "enum_FIELD"], [48, 49, 7, "enum_FIELD"], [56, 55, 7, "enum_FIELD"], [64, 63, 7, "enum_FIELD"], [71, 70, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [15, 8, 10, "enum_LAST_LEXICAL_USE"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [22, 6, 10, "enum_LAST_LEXICAL_USE"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [31, 13, 10, "enum_LAST_LEXICAL_USE"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [41, 22, 10, "enum_LAST_LEXICAL_USE"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [43, 31, 10, "enum_LAST_LEXICAL_USE"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [47, 43, 10, "enum_LAST_LEXICAL_USE"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [49, 41, 10, "enum_LAST_LEXICAL_USE"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [55, 15, 10, "enum_LAST_LEXICAL_USE"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [70, 53, 10, "enum_LAST_LEXICAL_USE"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [5, 12, 1, "enum_CFG_NEXT"], [12, 20, 1, "enum_CFG_NEXT"], [20, 29, 1, "enum_CFG_NEXT"], [29, 38, 1, "enum_CFG_NEXT"], [38, 52, 1, "enum_CFG_NEXT"], [52, 68, 1, "enum_CFG_NEXT"], [15, 8, 2, "enum_LAST_READ"], [22, 6, 3, "enum_LAST_WRITE"], [31, 13, 3, "enum_LAST_WRITE"], [41, 22, 2, "enum_LAST_READ"], [41, 6, 3, "enum_LAST_WRITE"], [43, 31, 2, "enum_LAST_READ"], [43, 13, 3, "enum_LAST_WRITE"], [47, 43, 2, "enum_LAST_READ"], [47, 13, 3, "enum_LAST_WRITE"], [49, 41, 2, "enum_LAST_READ"], [49, 6, 3, "enum_LAST_WRITE"], [55, 15, 2, "enum_LAST_READ"], [70, 53, 3, "enum_LAST_WRITE"], [6, 8, 4, "enum_COMPUTED_FROM"], [6, 10, 4, "enum_COMPUTED_FROM"], [13, 15, 4, "enum_COMPUTED_FROM"], [13, 17, 4, "enum_COMPUTED_FROM"], [53, 55, 4, "enum_COMPUTED_FROM"], [53, 63, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "sympy", "repo": "sympy", "path": "sympy/physics/quantum/tests/test_qexpr.py", "id": 54871, "has_bug": false, "code_full": "class Symbol:\n    pass\n\n\nclass QExpr:\n    is_commutative: bool\n\n    def __init__(self, symbol: Symbol):\n        pass\n\n    def __mul__(self, other: \"QExpr\") -> \"QExpr\":\n        return self\n    \n    def __eq__(self, other: object) -> bool:\n        return True\n    \n    @staticmethod\n    def _new_rawargs(*args) -> \"QExpr\":\n        return QExpr(Symbol())\n    \n\nclass HilbertSpace:\n    pass\n\n\nx: Symbol = Symbol()\ny: Symbol = Symbol()\n\n\ndef test_qexpr_commutative():\n    q1 = QExpr(x)\n    q2 = QExpr(y)\n    assert q1.is_commutative is False\n    assert q2.is_commutative is False\n    assert q1*q2 != q2*q1\n\n    q = QExpr._new_rawargs(0, 1, HilbertSpace())\n    assert q.is_commutative is False\n", "code": "def test_qexpr_commutative():\n    q1 = QExpr(x)\n    q2 = QExpr(y)\n    assert q1.is_commutative is False\n    assert q2.is_commutative is False\n    assert q1*q2 != q2*q1\n\n    q = QExpr._new_rawargs(0, 1, HilbertSpace())\n    assert q.is_commutative is False\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "25ea11a953ec1a83e73b58d43a1d5f4026e006bc"}
{"source_tokens": ["#NEWLINE#", "def _copy_np_state(", "r", ",", "ptr", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Copy state of Numpy random *r* to Numba state *ptr*.\\n    '", "#NEWLINE#", "(", "ints", ",", "index", ")", "=", "r", ".", "get_state", "(", ")", "[", "1", ":", "3", "]", "#NEWLINE#", "_helperlib", ".", "rnd_set_state", "(", "ptr", ",", "(", "index", ",", "[", "int", "(", "x", ")", "for", "x", "in", "ints", "]", ")", ")", "#NEWLINE#", "return", "(", "ints", ",", "index", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [8, 9, 7, "enum_FIELD"], [10, 22, 7, "enum_FIELD"], [27, 33, 7, "enum_FIELD"], [50, 53, 7, "enum_FIELD"], [22, 20, 7, "enum_FIELD"], [22, 24, 7, "enum_FIELD"], [33, 29, 7, "enum_FIELD"], [20, 18, 7, "enum_FIELD"], [24, 23, 7, "enum_FIELD"], [24, 25, 7, "enum_FIELD"], [29, 28, 7, "enum_FIELD"], [18, 17, 7, "enum_FIELD"], [37, 39, 7, "enum_FIELD"], [39, 38, 7, "enum_FIELD"], [42, 43, 7, "enum_FIELD"], [42, 45, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [17, 2, 10, "enum_LAST_LEXICAL_USE"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [32, 4, 10, "enum_LAST_LEXICAL_USE"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [35, 14, 10, "enum_LAST_LEXICAL_USE"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [43, 40, 10, "enum_LAST_LEXICAL_USE"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [45, 12, 10, "enum_LAST_LEXICAL_USE"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [52, 45, 10, "enum_LAST_LEXICAL_USE"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [54, 35, 10, "enum_LAST_LEXICAL_USE"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [3, 8, 1, "enum_CFG_NEXT"], [8, 10, 1, "enum_CFG_NEXT"], [10, 27, 1, "enum_CFG_NEXT"], [27, 50, 1, "enum_CFG_NEXT"], [17, 2, 3, "enum_LAST_WRITE"], [32, 4, 3, "enum_LAST_WRITE"], [35, 14, 3, "enum_LAST_WRITE"], [43, 40, 2, "enum_LAST_READ"], [45, 12, 3, "enum_LAST_WRITE"], [52, 45, 2, "enum_LAST_READ"], [52, 12, 3, "enum_LAST_WRITE"], [54, 35, 2, "enum_LAST_READ"], [54, 14, 3, "enum_LAST_WRITE"], [13, 17, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "numba", "repo": "numba", "path": "numba/tests/test_random.py", "id": 28650, "has_bug": false, "code_full": "from typing import Any, List, Tuple\n\nimport numpy as np\n\n\nclass _helperlib:\n    @staticmethod\n    def rnd_set_state(ptr: Any, state: Tuple[int, List]):\n        pass\n\n\ndef _copy_np_state(r: np.random.RandomState, ptr: Any) -> Tuple[List[int], int]:\n    \"\"\"\n    Copy state of Numpy random *r* to Numba state *ptr*.\n    \"\"\"\n    ints, index = r.get_state()[1:3]\n    _helperlib.rnd_set_state(ptr, (index, [int(x) for x in ints]))\n    return ints, index\n", "code": "def _copy_np_state(r: np.random.RandomState, ptr: Any) -> Tuple[List[int], int]:\n    \"\"\"\n    Copy state of Numpy random *r* to Numba state *ptr*.\n    \"\"\"\n    ints, index = r.get_state()[1:3]\n    _helperlib.rnd_set_state(ptr, (index, [int(x) for x in ints]))\n    return ints, index\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "index,other", "hash": "cd2945f6519c423fa424d64d9f40bedf7a9ca91d"}
{"source_tokens": ["#NEWLINE#", "def render_facilities(", "list_id", ",", "item_id", ",", "resource", ",", "rfields", ",", "record", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Custom dataList item renderer for Facilities on the Profile pages\\n\\n        @param list_id: the HTML ID of the list\\n        @param item_id: the HTML ID of the item\\n        @param resource: the S3Resource to render\\n        @param rfields: the S3ResourceFields to render\\n        @param record: the record as dict\\n    '", "#NEWLINE#", "record_id", "=", "record", "[", "'org_facility.id'", "]", "#NEWLINE#", "item_class", "=", "'thumbnail'", "#NEWLINE#", "raw", "=", "record", ".", "_row", "#NEWLINE#", "name", "=", "record", "[", "'org_facility.name'", "]", "#NEWLINE#", "organisation_id", "=", "raw", "[", "'org_facility.organisation_id'", "]", "#NEWLINE#", "address", "=", "raw", "[", "'gis_location.addr_street'", "]", "#NEWLINE#", "phone", "=", "raw", "[", "'org_facility.phone1'", "]", "#NEWLINE#", "logo", "=", "raw", "[", "'org_organisation.logo'", "]", "#NEWLINE#", "org_url", "=", "URL", "(", "c", "=", "'org'", ",", "f", "=", "'organisation'", ",", "args", "=", "[", "organisation_id", ",", "'profile'", "]", ")", "#NEWLINE#", "if", "logo", ":", "#NEWLINE#", "#INDENT#", "logo", "=", "A", "(", "IMG", "(", "_src", "=", "URL", "(", "c", "=", "'default'", ",", "f", "=", "'download'", ",", "args", "=", "[", "logo", "]", ")", ",", "_class", "=", "'media-object'", ")", ",", "_href", "=", "org_url", ",", "_class", "=", "'pull-left'", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "logo", "=", "DIV", "(", "IMG", "(", "_class", "=", "'media-object'", ")", ",", "_class", "=", "'pull-left'", ")", "#NEWLINE#", "#UNINDENT#", "permit", "=", "current", ".", "auth", ".", "s3_has_permission", "#NEWLINE#", "table", "=", "current", ".", "db", ".", "org_facility", "#NEWLINE#", "if", "permit", "(", "'update'", ",", "table", ",", "record_id", "=", "record_id", ")", ":", "#NEWLINE#", "#INDENT#", "vars", "=", "{", "'refresh'", ":", "list_id", ",", "'record'", ":", "record_id", "}", "#NEWLINE#", "f", "=", "current", ".", "request", ".", "function", "#NEWLINE#", "if", "(", "(", "f", "==", "'organisation'", ")", "and", "organisation_id", ")", ":", "#NEWLINE#", "#INDENT#", "vars", "[", "'(organisation)'", "]", "=", "organisation_id", "#NEWLINE#", "#UNINDENT#", "edit_btn", "=", "A", "(", "I", "(", "' '", ",", "_class", "=", "'icon icon-edit'", ")", ",", "_href", "=", "URL", "(", "c", "=", "'org'", ",", "f", "=", "'facility'", ",", "args", "=", "[", "record_id", ",", "'update.popup'", "]", ",", "vars", "=", "vars", ")", ",", "_class", "=", "'s3_modal'", ",", "_title", "=", "current", ".", "response", ".", "s3", ".", "crud_strings", ".", "org_facility", ".", "title_update", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "edit_btn", "=", "''", "#NEWLINE#", "#UNINDENT#", "if", "permit", "(", "'delete'", ",", "table", ",", "record_id", "=", "record_id", ")", ":", "#NEWLINE#", "#INDENT#", "delete_btn", "=", "A", "(", "I", "(", "' '", ",", "_class", "=", "'icon icon-remove-sign'", ")", ",", "_class", "=", "'dl-item-delete'", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "delete_btn", "=", "''", "#NEWLINE#", "#UNINDENT#", "edit_bar", "=", "DIV", "(", "edit_btn", ",", "delete_btn", ",", "_class", "=", "'edit-bar fright'", ")", "#NEWLINE#", "body", "=", "TAG", "[", "''", "]", "(", "P", "(", "I", "(", "_class", "=", "'icon-phone'", ")", ",", "' '", ",", "SPAN", "(", "(", "phone", "or", "T", "(", "'no phone number'", ")", ")", ")", ",", "' '", ")", ",", "P", "(", "I", "(", "_class", "=", "'icon-home'", ")", ",", "' '", ",", "address", ",", "_class", "=", "'main_facility-add'", ")", ")", "#NEWLINE#", "item", "=", "DIV", "(", "DIV", "(", "SPAN", "(", "name", ",", "_class", "=", "'card-title'", ")", ",", "edit_bar", ",", "_class", "=", "'card-header'", ")", ",", "DIV", "(", "DIV", "(", "DIV", "(", "body", ",", "DIV", "(", ")", ",", "_class", "=", "'media'", ")", ",", "_class", "=", "'media-body'", ")", ",", "_class", "=", "'media'", ")", ",", "_class", "=", "item_class", ",", "_id", "=", "item_id", ")", "#NEWLINE#", "return", "item"], "edges": [[1, 5, 7, "enum_FIELD"], [14, 15, 7, "enum_FIELD"], [16, 20, 7, "enum_FIELD"], [23, 26, 7, "enum_FIELD"], [27, 31, 7, "enum_FIELD"], [33, 37, 7, "enum_FIELD"], [40, 44, 7, "enum_FIELD"], [47, 51, 7, "enum_FIELD"], [54, 58, 7, "enum_FIELD"], [61, 65, 7, "enum_FIELD"], [68, 76, 7, "enum_FIELD"], [92, 91, 7, "enum_FIELD"], [155, 161, 7, "enum_FIELD"], [163, 169, 7, "enum_FIELD"], [183, 176, 7, "enum_FIELD"], [305, 298, 7, "enum_FIELD"], [335, 341, 7, "enum_FIELD"], [348, 381, 7, "enum_FIELD"], [400, 449, 7, "enum_FIELD"], [459, 460, 7, "enum_FIELD"], [20, 19, 7, "enum_FIELD"], [20, 21, 7, "enum_FIELD"], [31, 30, 7, "enum_FIELD"], [37, 36, 7, "enum_FIELD"], [37, 38, 7, "enum_FIELD"], [44, 43, 7, "enum_FIELD"], [44, 45, 7, "enum_FIELD"], [51, 50, 7, "enum_FIELD"], [51, 52, 7, "enum_FIELD"], [58, 57, 7, "enum_FIELD"], [58, 59, 7, "enum_FIELD"], [65, 64, 7, "enum_FIELD"], [65, 66, 7, "enum_FIELD"], [76, 71, 7, "enum_FIELD"], [94, 124, 7, "enum_FIELD"], [138, 149, 7, "enum_FIELD"], [161, 159, 7, "enum_FIELD"], [169, 167, 7, "enum_FIELD"], [176, 173, 7, "enum_FIELD"], [185, 192, 7, "enum_FIELD"], [197, 203, 7, "enum_FIELD"], [206, 213, 7, "enum_FIELD"], [226, 264, 7, "enum_FIELD"], [288, 291, 7, "enum_FIELD"], [298, 295, 7, "enum_FIELD"], [307, 320, 7, "enum_FIELD"], [330, 333, 7, "enum_FIELD"], [341, 338, 7, "enum_FIELD"], [381, 352, 7, "enum_FIELD"], [449, 403, 7, "enum_FIELD"], [73, 75, 7, "enum_FIELD"], [77, 79, 7, "enum_FIELD"], [81, 85, 7, "enum_FIELD"], [124, 97, 7, "enum_FIELD"], [149, 141, 7, "enum_FIELD"], [159, 158, 7, "enum_FIELD"], [167, 166, 7, "enum_FIELD"], [179, 181, 7, "enum_FIELD"], [203, 201, 7, "enum_FIELD"], [218, 224, 7, "enum_FIELD"], [264, 229, 7, "enum_FIELD"], [301, 303, 7, "enum_FIELD"], [320, 310, 7, "enum_FIELD"], [344, 346, 7, "enum_FIELD"], [352, 351, 7, "enum_FIELD"], [352, 353, 7, "enum_FIELD"], [366, 356, 7, "enum_FIELD"], [392, 382, 7, "enum_FIELD"], [415, 405, 7, "enum_FIELD"], [444, 423, 7, "enum_FIELD"], [450, 452, 7, "enum_FIELD"], [454, 456, 7, "enum_FIELD"], [119, 99, 7, "enum_FIELD"], [125, 127, 7, "enum_FIELD"], [129, 131, 7, "enum_FIELD"], [144, 143, 7, "enum_FIELD"], [150, 152, 7, "enum_FIELD"], [201, 200, 7, "enum_FIELD"], [210, 209, 7, "enum_FIELD"], [220, 219, 7, "enum_FIELD"], [220, 221, 7, "enum_FIELD"], [234, 231, 7, "enum_FIELD"], [240, 251, 7, "enum_FIELD"], [265, 267, 7, "enum_FIELD"], [269, 280, 7, "enum_FIELD"], [315, 312, 7, "enum_FIELD"], [321, 323, 7, "enum_FIELD"], [359, 358, 7, "enum_FIELD"], [368, 367, 7, "enum_FIELD"], [385, 384, 7, "enum_FIELD"], [395, 397, 7, "enum_FIELD"], [410, 407, 7, "enum_FIELD"], [418, 420, 7, "enum_FIELD"], [439, 425, 7, "enum_FIELD"], [445, 447, 7, "enum_FIELD"], [101, 108, 7, "enum_FIELD"], [120, 122, 7, "enum_FIELD"], [145, 147, 7, "enum_FIELD"], [235, 237, 7, "enum_FIELD"], [251, 242, 7, "enum_FIELD"], [280, 278, 7, "enum_FIELD"], [316, 318, 7, "enum_FIELD"], [360, 362, 7, "enum_FIELD"], [386, 388, 7, "enum_FIELD"], [411, 413, 7, "enum_FIELD"], [430, 427, 7, "enum_FIELD"], [440, 442, 7, "enum_FIELD"], [108, 103, 7, "enum_FIELD"], [244, 246, 7, "enum_FIELD"], [248, 250, 7, "enum_FIELD"], [252, 256, 7, "enum_FIELD"], [260, 262, 7, "enum_FIELD"], [278, 276, 7, "enum_FIELD"], [373, 372, 7, "enum_FIELD"], [432, 431, 7, "enum_FIELD"], [435, 437, 7, "enum_FIELD"], [105, 107, 7, "enum_FIELD"], [109, 111, 7, "enum_FIELD"], [113, 115, 7, "enum_FIELD"], [276, 274, 7, "enum_FIELD"], [274, 272, 7, "enum_FIELD"], [272, 271, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [19, 10, 10, "enum_LAST_LEXICAL_USE"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [30, 19, 10, "enum_LAST_LEXICAL_USE"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [36, 30, 10, "enum_LAST_LEXICAL_USE"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [43, 28, 10, "enum_LAST_LEXICAL_USE"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [50, 43, 10, "enum_LAST_LEXICAL_USE"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [57, 50, 10, "enum_LAST_LEXICAL_USE"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [64, 57, 10, "enum_LAST_LEXICAL_USE"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [84, 41, 10, "enum_LAST_LEXICAL_USE"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 90, 9, "enum_NEXT_SYNTAX"], [91, 62, 10, "enum_LAST_LEXICAL_USE"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 94, 9, "enum_NEXT_SYNTAX"], [95, 91, 10, "enum_LAST_LEXICAL_USE"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [103, 71, 10, "enum_LAST_LEXICAL_USE"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [116, 95, 10, "enum_LAST_LEXICAL_USE"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [127, 69, 10, "enum_LAST_LEXICAL_USE"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 138, 9, "enum_NEXT_SYNTAX"], [139, 116, 10, "enum_LAST_LEXICAL_USE"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [143, 99, 10, "enum_LAST_LEXICAL_USE"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [166, 158, 10, "enum_LAST_LEXICAL_USE"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 172, 9, "enum_NEXT_SYNTAX"], [173, 156, 10, "enum_LAST_LEXICAL_USE"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [175, 176, 9, "enum_NEXT_SYNTAX"], [177, 164, 10, "enum_LAST_LEXICAL_USE"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 180, 9, "enum_NEXT_SYNTAX"], [181, 17, 10, "enum_LAST_LEXICAL_USE"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [187, 188, 9, "enum_NEXT_SYNTAX"], [188, 189, 9, "enum_NEXT_SYNTAX"], [189, 190, 9, "enum_NEXT_SYNTAX"], [191, 2, 10, "enum_LAST_LEXICAL_USE"], [190, 191, 9, "enum_NEXT_SYNTAX"], [191, 192, 9, "enum_NEXT_SYNTAX"], [192, 193, 9, "enum_NEXT_SYNTAX"], [193, 194, 9, "enum_NEXT_SYNTAX"], [195, 181, 10, "enum_LAST_LEXICAL_USE"], [194, 195, 9, "enum_NEXT_SYNTAX"], [195, 196, 9, "enum_NEXT_SYNTAX"], [196, 197, 9, "enum_NEXT_SYNTAX"], [197, 198, 9, "enum_NEXT_SYNTAX"], [198, 199, 9, "enum_NEXT_SYNTAX"], [200, 166, 10, "enum_LAST_LEXICAL_USE"], [199, 200, 9, "enum_NEXT_SYNTAX"], [200, 201, 9, "enum_NEXT_SYNTAX"], [201, 202, 9, "enum_NEXT_SYNTAX"], [202, 203, 9, "enum_NEXT_SYNTAX"], [203, 204, 9, "enum_NEXT_SYNTAX"], [204, 206, 9, "enum_NEXT_SYNTAX"], [206, 207, 9, "enum_NEXT_SYNTAX"], [207, 208, 9, "enum_NEXT_SYNTAX"], [209, 198, 10, "enum_LAST_LEXICAL_USE"], [208, 209, 9, "enum_NEXT_SYNTAX"], [209, 210, 9, "enum_NEXT_SYNTAX"], [210, 211, 9, "enum_NEXT_SYNTAX"], [211, 212, 9, "enum_NEXT_SYNTAX"], [212, 213, 9, "enum_NEXT_SYNTAX"], [214, 84, 10, "enum_LAST_LEXICAL_USE"], [213, 214, 9, "enum_NEXT_SYNTAX"], [214, 215, 9, "enum_NEXT_SYNTAX"], [215, 216, 9, "enum_NEXT_SYNTAX"], [216, 218, 9, "enum_NEXT_SYNTAX"], [219, 186, 10, "enum_LAST_LEXICAL_USE"], [218, 219, 9, "enum_NEXT_SYNTAX"], [219, 220, 9, "enum_NEXT_SYNTAX"], [220, 221, 9, "enum_NEXT_SYNTAX"], [221, 222, 9, "enum_NEXT_SYNTAX"], [222, 223, 9, "enum_NEXT_SYNTAX"], [224, 214, 10, "enum_LAST_LEXICAL_USE"], [223, 224, 9, "enum_NEXT_SYNTAX"], [224, 226, 9, "enum_NEXT_SYNTAX"], [226, 227, 9, "enum_NEXT_SYNTAX"], [227, 228, 9, "enum_NEXT_SYNTAX"], [229, 97, 10, "enum_LAST_LEXICAL_USE"], [228, 229, 9, "enum_NEXT_SYNTAX"], [229, 230, 9, "enum_NEXT_SYNTAX"], [230, 231, 9, "enum_NEXT_SYNTAX"], [231, 232, 9, "enum_NEXT_SYNTAX"], [232, 233, 9, "enum_NEXT_SYNTAX"], [233, 234, 9, "enum_NEXT_SYNTAX"], [234, 235, 9, "enum_NEXT_SYNTAX"], [235, 236, 9, "enum_NEXT_SYNTAX"], [236, 237, 9, "enum_NEXT_SYNTAX"], [237, 238, 9, "enum_NEXT_SYNTAX"], [238, 239, 9, "enum_NEXT_SYNTAX"], [239, 240, 9, "enum_NEXT_SYNTAX"], [240, 241, 9, "enum_NEXT_SYNTAX"], [242, 103, 10, "enum_LAST_LEXICAL_USE"], [241, 242, 9, "enum_NEXT_SYNTAX"], [242, 243, 9, "enum_NEXT_SYNTAX"], [243, 244, 9, "enum_NEXT_SYNTAX"], [244, 245, 9, "enum_NEXT_SYNTAX"], [245, 246, 9, "enum_NEXT_SYNTAX"], [246, 247, 9, "enum_NEXT_SYNTAX"], [247, 248, 9, "enum_NEXT_SYNTAX"], [248, 249, 9, "enum_NEXT_SYNTAX"], [249, 250, 9, "enum_NEXT_SYNTAX"], [250, 251, 9, "enum_NEXT_SYNTAX"], [251, 252, 9, "enum_NEXT_SYNTAX"], [252, 253, 9, "enum_NEXT_SYNTAX"], [253, 254, 9, "enum_NEXT_SYNTAX"], [255, 195, 10, "enum_LAST_LEXICAL_USE"], [254, 255, 9, "enum_NEXT_SYNTAX"], [255, 256, 9, "enum_NEXT_SYNTAX"], [256, 257, 9, "enum_NEXT_SYNTAX"], [257, 258, 9, "enum_NEXT_SYNTAX"], [258, 259, 9, "enum_NEXT_SYNTAX"], [259, 260, 9, "enum_NEXT_SYNTAX"], [260, 261, 9, "enum_NEXT_SYNTAX"], [262, 219, 10, "enum_LAST_LEXICAL_USE"], [261, 262, 9, "enum_NEXT_SYNTAX"], [262, 263, 9, "enum_NEXT_SYNTAX"], [263, 264, 9, "enum_NEXT_SYNTAX"], [264, 265, 9, "enum_NEXT_SYNTAX"], [265, 266, 9, "enum_NEXT_SYNTAX"], [266, 267, 9, "enum_NEXT_SYNTAX"], [267, 268, 9, "enum_NEXT_SYNTAX"], [268, 269, 9, "enum_NEXT_SYNTAX"], [269, 270, 9, "enum_NEXT_SYNTAX"], [271, 200, 10, "enum_LAST_LEXICAL_USE"], [270, 271, 9, "enum_NEXT_SYNTAX"], [271, 272, 9, "enum_NEXT_SYNTAX"], [272, 273, 9, "enum_NEXT_SYNTAX"], [273, 274, 9, "enum_NEXT_SYNTAX"], [274, 275, 9, "enum_NEXT_SYNTAX"], [275, 276, 9, "enum_NEXT_SYNTAX"], [276, 277, 9, "enum_NEXT_SYNTAX"], [277, 278, 9, "enum_NEXT_SYNTAX"], [278, 279, 9, "enum_NEXT_SYNTAX"], [279, 280, 9, "enum_NEXT_SYNTAX"], [280, 281, 9, "enum_NEXT_SYNTAX"], [281, 282, 9, "enum_NEXT_SYNTAX"], [282, 285, 9, "enum_NEXT_SYNTAX"], [285, 286, 9, "enum_NEXT_SYNTAX"], [286, 288, 9, "enum_NEXT_SYNTAX"], [289, 227, 10, "enum_LAST_LEXICAL_USE"], [288, 289, 9, "enum_NEXT_SYNTAX"], [289, 290, 9, "enum_NEXT_SYNTAX"], [290, 291, 9, "enum_NEXT_SYNTAX"], [291, 294, 9, "enum_NEXT_SYNTAX"], [295, 173, 10, "enum_LAST_LEXICAL_USE"], [294, 295, 9, "enum_NEXT_SYNTAX"], [295, 296, 9, "enum_NEXT_SYNTAX"], [296, 297, 9, "enum_NEXT_SYNTAX"], [297, 298, 9, "enum_NEXT_SYNTAX"], [299, 177, 10, "enum_LAST_LEXICAL_USE"], [298, 299, 9, "enum_NEXT_SYNTAX"], [299, 300, 9, "enum_NEXT_SYNTAX"], [300, 301, 9, "enum_NEXT_SYNTAX"], [301, 302, 9, "enum_NEXT_SYNTAX"], [303, 255, 10, "enum_LAST_LEXICAL_USE"], [302, 303, 9, "enum_NEXT_SYNTAX"], [303, 304, 9, "enum_NEXT_SYNTAX"], [304, 305, 9, "enum_NEXT_SYNTAX"], [305, 307, 9, "enum_NEXT_SYNTAX"], [307, 308, 9, "enum_NEXT_SYNTAX"], [308, 309, 9, "enum_NEXT_SYNTAX"], [310, 229, 10, "enum_LAST_LEXICAL_USE"], [309, 310, 9, "enum_NEXT_SYNTAX"], [310, 311, 9, "enum_NEXT_SYNTAX"], [312, 231, 10, "enum_LAST_LEXICAL_USE"], [311, 312, 9, "enum_NEXT_SYNTAX"], [312, 313, 9, "enum_NEXT_SYNTAX"], [313, 314, 9, "enum_NEXT_SYNTAX"], [314, 315, 9, "enum_NEXT_SYNTAX"], [315, 316, 9, "enum_NEXT_SYNTAX"], [316, 317, 9, "enum_NEXT_SYNTAX"], [317, 318, 9, "enum_NEXT_SYNTAX"], [318, 319, 9, "enum_NEXT_SYNTAX"], [319, 320, 9, "enum_NEXT_SYNTAX"], [320, 321, 9, "enum_NEXT_SYNTAX"], [321, 322, 9, "enum_NEXT_SYNTAX"], [322, 323, 9, "enum_NEXT_SYNTAX"], [323, 324, 9, "enum_NEXT_SYNTAX"], [324, 327, 9, "enum_NEXT_SYNTAX"], [327, 328, 9, "enum_NEXT_SYNTAX"], [328, 330, 9, "enum_NEXT_SYNTAX"], [331, 308, 10, "enum_LAST_LEXICAL_USE"], [330, 331, 9, "enum_NEXT_SYNTAX"], [331, 332, 9, "enum_NEXT_SYNTAX"], [332, 333, 9, "enum_NEXT_SYNTAX"], [333, 335, 9, "enum_NEXT_SYNTAX"], [335, 336, 9, "enum_NEXT_SYNTAX"], [336, 337, 9, "enum_NEXT_SYNTAX"], [338, 141, 10, "enum_LAST_LEXICAL_USE"], [337, 338, 9, "enum_NEXT_SYNTAX"], [338, 339, 9, "enum_NEXT_SYNTAX"], [340, 289, 10, "enum_LAST_LEXICAL_USE"], [339, 340, 9, "enum_NEXT_SYNTAX"], [340, 341, 9, "enum_NEXT_SYNTAX"], [342, 331, 10, "enum_LAST_LEXICAL_USE"], [341, 342, 9, "enum_NEXT_SYNTAX"], [342, 343, 9, "enum_NEXT_SYNTAX"], [343, 344, 9, "enum_NEXT_SYNTAX"], [344, 345, 9, "enum_NEXT_SYNTAX"], [345, 346, 9, "enum_NEXT_SYNTAX"], [346, 347, 9, "enum_NEXT_SYNTAX"], [347, 348, 9, "enum_NEXT_SYNTAX"], [348, 349, 9, "enum_NEXT_SYNTAX"], [349, 350, 9, "enum_NEXT_SYNTAX"], [350, 351, 9, "enum_NEXT_SYNTAX"], [351, 352, 9, "enum_NEXT_SYNTAX"], [352, 353, 9, "enum_NEXT_SYNTAX"], [353, 354, 9, "enum_NEXT_SYNTAX"], [354, 355, 9, "enum_NEXT_SYNTAX"], [355, 356, 9, "enum_NEXT_SYNTAX"], [356, 357, 9, "enum_NEXT_SYNTAX"], [358, 312, 10, "enum_LAST_LEXICAL_USE"], [357, 358, 9, "enum_NEXT_SYNTAX"], [358, 359, 9, "enum_NEXT_SYNTAX"], [359, 360, 9, "enum_NEXT_SYNTAX"], [360, 361, 9, "enum_NEXT_SYNTAX"], [361, 362, 9, "enum_NEXT_SYNTAX"], [362, 363, 9, "enum_NEXT_SYNTAX"], [363, 364, 9, "enum_NEXT_SYNTAX"], [364, 365, 9, "enum_NEXT_SYNTAX"], [365, 366, 9, "enum_NEXT_SYNTAX"], [366, 367, 9, "enum_NEXT_SYNTAX"], [367, 368, 9, "enum_NEXT_SYNTAX"], [368, 369, 9, "enum_NEXT_SYNTAX"], [370, 55, 10, "enum_LAST_LEXICAL_USE"], [369, 370, 9, "enum_NEXT_SYNTAX"], [370, 371, 9, "enum_NEXT_SYNTAX"], [371, 372, 9, "enum_NEXT_SYNTAX"], [372, 373, 9, "enum_NEXT_SYNTAX"], [373, 374, 9, "enum_NEXT_SYNTAX"], [374, 375, 9, "enum_NEXT_SYNTAX"], [375, 376, 9, "enum_NEXT_SYNTAX"], [376, 377, 9, "enum_NEXT_SYNTAX"], [377, 378, 9, "enum_NEXT_SYNTAX"], [378, 379, 9, "enum_NEXT_SYNTAX"], [379, 380, 9, "enum_NEXT_SYNTAX"], [380, 381, 9, "enum_NEXT_SYNTAX"], [382, 356, 10, "enum_LAST_LEXICAL_USE"], [381, 382, 9, "enum_NEXT_SYNTAX"], [382, 383, 9, "enum_NEXT_SYNTAX"], [384, 358, 10, "enum_LAST_LEXICAL_USE"], [383, 384, 9, "enum_NEXT_SYNTAX"], [384, 385, 9, "enum_NEXT_SYNTAX"], [385, 386, 9, "enum_NEXT_SYNTAX"], [386, 387, 9, "enum_NEXT_SYNTAX"], [387, 388, 9, "enum_NEXT_SYNTAX"], [388, 389, 9, "enum_NEXT_SYNTAX"], [389, 390, 9, "enum_NEXT_SYNTAX"], [390, 391, 9, "enum_NEXT_SYNTAX"], [391, 392, 9, "enum_NEXT_SYNTAX"], [393, 48, 10, "enum_LAST_LEXICAL_USE"], [392, 393, 9, "enum_NEXT_SYNTAX"], [393, 394, 9, "enum_NEXT_SYNTAX"], [394, 395, 9, "enum_NEXT_SYNTAX"], [395, 396, 9, "enum_NEXT_SYNTAX"], [396, 397, 9, "enum_NEXT_SYNTAX"], [397, 398, 9, "enum_NEXT_SYNTAX"], [398, 399, 9, "enum_NEXT_SYNTAX"], [399, 400, 9, "enum_NEXT_SYNTAX"], [400, 401, 9, "enum_NEXT_SYNTAX"], [401, 402, 9, "enum_NEXT_SYNTAX"], [403, 338, 10, "enum_LAST_LEXICAL_USE"], [402, 403, 9, "enum_NEXT_SYNTAX"], [403, 404, 9, "enum_NEXT_SYNTAX"], [405, 403, 10, "enum_LAST_LEXICAL_USE"], [404, 405, 9, "enum_NEXT_SYNTAX"], [405, 406, 9, "enum_NEXT_SYNTAX"], [407, 367, 10, "enum_LAST_LEXICAL_USE"], [406, 407, 9, "enum_NEXT_SYNTAX"], [407, 408, 9, "enum_NEXT_SYNTAX"], [409, 34, 10, "enum_LAST_LEXICAL_USE"], [408, 409, 9, "enum_NEXT_SYNTAX"], [409, 410, 9, "enum_NEXT_SYNTAX"], [410, 411, 9, "enum_NEXT_SYNTAX"], [411, 412, 9, "enum_NEXT_SYNTAX"], [412, 413, 9, "enum_NEXT_SYNTAX"], [413, 414, 9, "enum_NEXT_SYNTAX"], [414, 415, 9, "enum_NEXT_SYNTAX"], [416, 336, 10, "enum_LAST_LEXICAL_USE"], [415, 416, 9, "enum_NEXT_SYNTAX"], [416, 417, 9, "enum_NEXT_SYNTAX"], [417, 418, 9, "enum_NEXT_SYNTAX"], [418, 419, 9, "enum_NEXT_SYNTAX"], [419, 420, 9, "enum_NEXT_SYNTAX"], [420, 421, 9, "enum_NEXT_SYNTAX"], [421, 422, 9, "enum_NEXT_SYNTAX"], [423, 405, 10, "enum_LAST_LEXICAL_USE"], [422, 423, 9, "enum_NEXT_SYNTAX"], [423, 424, 9, "enum_NEXT_SYNTAX"], [425, 423, 10, "enum_LAST_LEXICAL_USE"], [424, 425, 9, "enum_NEXT_SYNTAX"], [425, 426, 9, "enum_NEXT_SYNTAX"], [427, 425, 10, "enum_LAST_LEXICAL_USE"], [426, 427, 9, "enum_NEXT_SYNTAX"], [427, 428, 9, "enum_NEXT_SYNTAX"], [429, 349, 10, "enum_LAST_LEXICAL_USE"], [428, 429, 9, "enum_NEXT_SYNTAX"], [429, 430, 9, "enum_NEXT_SYNTAX"], [431, 427, 10, "enum_LAST_LEXICAL_USE"], [430, 431, 9, "enum_NEXT_SYNTAX"], [431, 432, 9, "enum_NEXT_SYNTAX"], [432, 433, 9, "enum_NEXT_SYNTAX"], [433, 434, 9, "enum_NEXT_SYNTAX"], [434, 435, 9, "enum_NEXT_SYNTAX"], [435, 436, 9, "enum_NEXT_SYNTAX"], [436, 437, 9, "enum_NEXT_SYNTAX"], [437, 438, 9, "enum_NEXT_SYNTAX"], [438, 439, 9, "enum_NEXT_SYNTAX"], [439, 440, 9, "enum_NEXT_SYNTAX"], [440, 441, 9, "enum_NEXT_SYNTAX"], [441, 442, 9, "enum_NEXT_SYNTAX"], [442, 443, 9, "enum_NEXT_SYNTAX"], [443, 444, 9, "enum_NEXT_SYNTAX"], [444, 445, 9, "enum_NEXT_SYNTAX"], [445, 446, 9, "enum_NEXT_SYNTAX"], [446, 447, 9, "enum_NEXT_SYNTAX"], [447, 448, 9, "enum_NEXT_SYNTAX"], [448, 449, 9, "enum_NEXT_SYNTAX"], [449, 450, 9, "enum_NEXT_SYNTAX"], [450, 451, 9, "enum_NEXT_SYNTAX"], [452, 24, 10, "enum_LAST_LEXICAL_USE"], [451, 452, 9, "enum_NEXT_SYNTAX"], [452, 453, 9, "enum_NEXT_SYNTAX"], [453, 454, 9, "enum_NEXT_SYNTAX"], [454, 455, 9, "enum_NEXT_SYNTAX"], [456, 4, 10, "enum_LAST_LEXICAL_USE"], [455, 456, 9, "enum_NEXT_SYNTAX"], [456, 457, 9, "enum_NEXT_SYNTAX"], [457, 459, 9, "enum_NEXT_SYNTAX"], [460, 401, 10, "enum_LAST_LEXICAL_USE"], [459, 460, 9, "enum_NEXT_SYNTAX"], [5, 14, 1, "enum_CFG_NEXT"], [14, 16, 1, "enum_CFG_NEXT"], [16, 23, 1, "enum_CFG_NEXT"], [23, 27, 1, "enum_CFG_NEXT"], [27, 33, 1, "enum_CFG_NEXT"], [33, 40, 1, "enum_CFG_NEXT"], [40, 47, 1, "enum_CFG_NEXT"], [47, 54, 1, "enum_CFG_NEXT"], [54, 61, 1, "enum_CFG_NEXT"], [61, 68, 1, "enum_CFG_NEXT"], [68, 91, 1, "enum_CFG_NEXT"], [91, 138, 1, "enum_CFG_NEXT"], [91, 94, 1, "enum_CFG_NEXT"], [94, 155, 1, "enum_CFG_NEXT"], [138, 155, 1, "enum_CFG_NEXT"], [155, 163, 1, "enum_CFG_NEXT"], [163, 176, 1, "enum_CFG_NEXT"], [176, 288, 1, "enum_CFG_NEXT"], [176, 185, 1, "enum_CFG_NEXT"], [185, 197, 1, "enum_CFG_NEXT"], [197, 213, 1, "enum_CFG_NEXT"], [213, 218, 1, "enum_CFG_NEXT"], [213, 226, 1, "enum_CFG_NEXT"], [218, 226, 1, "enum_CFG_NEXT"], [226, 298, 1, "enum_CFG_NEXT"], [288, 298, 1, "enum_CFG_NEXT"], [298, 307, 1, "enum_CFG_NEXT"], [298, 330, 1, "enum_CFG_NEXT"], [307, 335, 1, "enum_CFG_NEXT"], [330, 335, 1, "enum_CFG_NEXT"], [335, 348, 1, "enum_CFG_NEXT"], [348, 400, 1, "enum_CFG_NEXT"], [400, 459, 1, "enum_CFG_NEXT"], [19, 10, 3, "enum_LAST_WRITE"], [30, 19, 2, "enum_LAST_READ"], [30, 10, 3, "enum_LAST_WRITE"], [36, 30, 2, "enum_LAST_READ"], [36, 10, 3, "enum_LAST_WRITE"], [43, 28, 3, "enum_LAST_WRITE"], [50, 43, 2, "enum_LAST_READ"], [50, 28, 3, "enum_LAST_WRITE"], [57, 50, 2, "enum_LAST_READ"], [57, 28, 3, "enum_LAST_WRITE"], [64, 57, 2, "enum_LAST_READ"], [64, 28, 3, "enum_LAST_WRITE"], [84, 41, 3, "enum_LAST_WRITE"], [91, 62, 3, "enum_LAST_WRITE"], [103, 71, 2, "enum_LAST_READ"], [116, 91, 2, "enum_LAST_READ"], [116, 62, 3, "enum_LAST_WRITE"], [127, 69, 3, "enum_LAST_WRITE"], [95, 116, 2, "enum_LAST_READ"], [95, 62, 3, "enum_LAST_WRITE"], [139, 91, 2, "enum_LAST_READ"], [139, 62, 3, "enum_LAST_WRITE"], [166, 158, 2, "enum_LAST_READ"], [173, 156, 3, "enum_LAST_WRITE"], [177, 164, 3, "enum_LAST_WRITE"], [181, 17, 3, "enum_LAST_WRITE"], [191, 2, 3, "enum_LAST_WRITE"], [195, 181, 2, "enum_LAST_READ"], [195, 17, 3, "enum_LAST_WRITE"], [200, 166, 2, "enum_LAST_READ"], [209, 198, 3, "enum_LAST_WRITE"], [214, 84, 2, "enum_LAST_READ"], [214, 41, 3, "enum_LAST_WRITE"], [224, 214, 2, "enum_LAST_READ"], [224, 41, 3, "enum_LAST_WRITE"], [219, 186, 3, "enum_LAST_WRITE"], [229, 97, 2, "enum_LAST_READ"], [242, 103, 2, "enum_LAST_READ"], [242, 71, 2, "enum_LAST_READ"], [255, 195, 2, "enum_LAST_READ"], [255, 17, 3, "enum_LAST_WRITE"], [262, 219, 2, "enum_LAST_READ"], [262, 186, 3, "enum_LAST_WRITE"], [271, 200, 2, "enum_LAST_READ"], [295, 173, 2, "enum_LAST_READ"], [295, 156, 3, "enum_LAST_WRITE"], [299, 177, 2, "enum_LAST_READ"], [299, 164, 3, "enum_LAST_WRITE"], [303, 181, 2, "enum_LAST_READ"], [303, 255, 2, "enum_LAST_READ"], [303, 17, 3, "enum_LAST_WRITE"], [310, 97, 2, "enum_LAST_READ"], [310, 229, 2, "enum_LAST_READ"], [312, 231, 2, "enum_LAST_READ"], [338, 141, 2, "enum_LAST_READ"], [340, 227, 3, "enum_LAST_WRITE"], [340, 289, 3, "enum_LAST_WRITE"], [342, 308, 3, "enum_LAST_WRITE"], [342, 331, 3, "enum_LAST_WRITE"], [358, 312, 2, "enum_LAST_READ"], [358, 231, 2, "enum_LAST_READ"], [370, 55, 3, "enum_LAST_WRITE"], [382, 356, 2, "enum_LAST_READ"], [384, 358, 2, "enum_LAST_READ"], [393, 48, 3, "enum_LAST_WRITE"], [403, 338, 2, "enum_LAST_READ"], [405, 403, 2, "enum_LAST_READ"], [407, 367, 2, "enum_LAST_READ"], [409, 34, 3, "enum_LAST_WRITE"], [416, 336, 3, "enum_LAST_WRITE"], [423, 405, 2, "enum_LAST_READ"], [425, 423, 2, "enum_LAST_READ"], [427, 425, 2, "enum_LAST_READ"], [429, 349, 3, "enum_LAST_WRITE"], [431, 427, 2, "enum_LAST_READ"], [452, 24, 3, "enum_LAST_WRITE"], [456, 4, 3, "enum_LAST_WRITE"], [460, 401, 3, "enum_LAST_WRITE"], [17, 19, 4, "enum_COMPUTED_FROM"], [28, 30, 4, "enum_COMPUTED_FROM"], [34, 36, 4, "enum_COMPUTED_FROM"], [41, 43, 4, "enum_COMPUTED_FROM"], [48, 50, 4, "enum_COMPUTED_FROM"], [55, 57, 4, "enum_COMPUTED_FROM"], [62, 64, 4, "enum_COMPUTED_FROM"], [69, 71, 4, "enum_COMPUTED_FROM"], [69, 84, 4, "enum_COMPUTED_FROM"], [156, 158, 4, "enum_COMPUTED_FROM"], [164, 166, 4, "enum_COMPUTED_FROM"], [336, 338, 4, "enum_COMPUTED_FROM"], [336, 340, 4, "enum_COMPUTED_FROM"], [336, 342, 4, "enum_COMPUTED_FROM"], [349, 351, 4, "enum_COMPUTED_FROM"], [349, 356, 4, "enum_COMPUTED_FROM"], [349, 382, 4, "enum_COMPUTED_FROM"], [349, 393, 4, "enum_COMPUTED_FROM"], [349, 358, 4, "enum_COMPUTED_FROM"], [349, 367, 4, "enum_COMPUTED_FROM"], [349, 384, 4, "enum_COMPUTED_FROM"], [349, 370, 4, "enum_COMPUTED_FROM"], [349, 372, 4, "enum_COMPUTED_FROM"], [401, 403, 4, "enum_COMPUTED_FROM"], [401, 405, 4, "enum_COMPUTED_FROM"], [401, 416, 4, "enum_COMPUTED_FROM"], [401, 423, 4, "enum_COMPUTED_FROM"], [401, 452, 4, "enum_COMPUTED_FROM"], [401, 456, 4, "enum_COMPUTED_FROM"], [401, 407, 4, "enum_COMPUTED_FROM"], [401, 409, 4, "enum_COMPUTED_FROM"], [401, 425, 4, "enum_COMPUTED_FROM"], [401, 427, 4, "enum_COMPUTED_FROM"], [401, 429, 4, "enum_COMPUTED_FROM"], [401, 431, 4, "enum_COMPUTED_FROM"], [95, 97, 4, "enum_COMPUTED_FROM"], [95, 99, 4, "enum_COMPUTED_FROM"], [95, 127, 4, "enum_COMPUTED_FROM"], [95, 103, 4, "enum_COMPUTED_FROM"], [95, 116, 4, "enum_COMPUTED_FROM"], [139, 141, 4, "enum_COMPUTED_FROM"], [139, 143, 4, "enum_COMPUTED_FROM"], [186, 191, 4, "enum_COMPUTED_FROM"], [186, 195, 4, "enum_COMPUTED_FROM"], [198, 200, 4, "enum_COMPUTED_FROM"], [227, 229, 4, "enum_COMPUTED_FROM"], [227, 231, 4, "enum_COMPUTED_FROM"], [227, 242, 4, "enum_COMPUTED_FROM"], [227, 262, 4, "enum_COMPUTED_FROM"], [227, 255, 4, "enum_COMPUTED_FROM"], [227, 271, 4, "enum_COMPUTED_FROM"], [308, 310, 4, "enum_COMPUTED_FROM"], [308, 312, 4, "enum_COMPUTED_FROM"], [220, 224, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "sahana", "repo": "eden", "path": "modules/templates/MCOP/config.py", "id": 46292, "has_bug": false, "code_full": "from typing import Any, Dict, Generic, List, Optional, TypeVar, Union\n\n\nclass URL:\n    def __init__(self, c: str, f: str, args: List, vars: Dict={}):\n        pass\n\n\nclass I:\n    def __init__(self, icon: str = \"\", _class: Optional[str] = None,):\n        pass\n\n\nclass SPAN:\n    def __init__(self, text: Union[str, \"T\"], _class: Optional[str] = None):\n        pass\n\n\nclass A:\n    def __init__(self, *args, **kwargs):\n        pass\n\n\nclass IMG:\n    def __init__(self, _src: Optional[URL] = None, _class: Optional[str] = None):\n        pass\n\n\nclass DIV:\n    def __init__(self, *args, **kwargs):\n        pass\n\n\nclass P:\n    def __init__(self, *args, **kwargs):\n        pass\n\n\nclass TAGCls:\n    dict: Dict[str, Any]\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def __getitem__(cls, item: str) -> Any:\n        pass\n\nTAG = TAGCls()\n\n\nclass T:\n    def __init__(self, text: str):\n        pass\n\n\nclass Record(Dict):\n    _row: Dict[str, Any]\n\n\ncurrent: Any = None\ntest_id: int = 0\nlist_id: str = \"\"\n\n\ndef render_facilities(str, item_id: str, resource: Any, rfields: List[Any], record: Record) -> DIV:\n    \"\"\"\n        Custom dataList item renderer for Facilities on the Profile pages\n\n        @param list_id: the HTML ID of the list\n        @param item_id: the HTML ID of the item\n        @param resource: the S3Resource to render\n        @param rfields: the S3ResourceFields to render\n        @param record: the record as dict\n    \"\"\"\n\n    record_id: int = record[\"org_facility.id\"]\n    item_class: str = \"thumbnail\"\n\n    raw: Dict[str, Any] = record._row\n    name: str = record[\"org_facility.name\"]\n    #author = record[\"org_facility.modified_by\"]\n    #date = record[\"org_facility.modified_on\"]\n    #organisation = record[\"org_facility.organisation_id\"]\n    organisation_id: int = raw[\"org_facility.organisation_id\"]\n    #location = record[\"org_facility.location_id\"]\n    #location_id = raw[\"org_facility.location_id\"]\n    #location_url = URL(c=\"gis\", f=\"location\",\n    #                   args=[location_id, \"profile\"])\n    address: str = raw[\"gis_location.addr_street\"]\n    phone: str = raw[\"org_facility.phone1\"]\n    #facility_type = record[\"org_facility.facility_type_id\"]\n    logo: str = raw[\"org_organisation.logo\"]\n\n    org_url: URL = URL(c=\"org\", f=\"organisation\", args=[organisation_id, \"profile\"])\n    if logo:\n        logo: A = A(IMG(_src=URL(c=\"default\", f=\"download\", args=[logo]),\n                        _class=\"media-object\",\n                        ),\n                    _href=org_url,\n                    _class=\"pull-left\",\n                    )\n    else:\n        logo: DIV = DIV(IMG(_class=\"media-object\"),\n                    _class=\"pull-left\")\n\n    # Edit Bar\n    permit: Any = current.auth.s3_has_permission\n    table: Any = current.db.org_facility\n    if permit(\"update\", table, record_id=record_id):\n        vars = {\"refresh\": list_id,\n                \"record\": record_id,\n                }\n        f: str = current.request.function\n        if f == \"organisation\" and organisation_id:\n            vars[\"(organisation)\"] = organisation_id\n        edit_btn: A = A(I(\" \", _class=\"icon icon-edit\"),\n                        _href=URL(c=\"org\", f=\"facility\",\n                                args=[record_id, \"update.popup\"],\n                                vars=vars),\n                        _class=\"s3_modal\",\n                        _title=current.response.s3.crud_strings.org_facility.title_update,\n                        )\n    else:\n        edit_btn: str = \"\"\n    if permit(\"delete\", table, record_id=record_id):\n        delete_btn: A = A(I(\" \", _class=\"icon icon-remove-sign\"),\n                        _class=\"dl-item-delete\",\n                        )\n    else:\n        delete_btn: str = \"\"\n    edit_bar: DIV = DIV(edit_btn,\n                    delete_btn,\n                    _class=\"edit-bar fright\",\n                    )\n\n    # Render the item\n    #avatar = logo\n    body: Any = TAG[\"\"](#P(I(_class=\"icon-flag\"),\n                    #  \" \",\n                    #  SPAN(facility_type),\n                    #  \" \",\n                    #  _class=\"main_contact_ph\",\n                    #  ),\n                    P(I(_class=\"icon-phone\"),\n                        \" \",\n                        SPAN(phone or T(\"no phone number\")),\n                        \" \",\n                        ),\n                    P(I(_class=\"icon-home\"),\n                        \" \",\n                        address,\n                        _class=\"main_facility-add\",\n                        ))\n\n    item: DIV = DIV(DIV(SPAN(name, _class=\"card-title\"),\n                    edit_bar,\n                    _class=\"card-header\",\n                    ),\n                DIV(#avatar,\n                    DIV(DIV(body,\n                            DIV(#author,\n                                #\" - \",\n                                #A(organisation,\n                                #  _href=org_url,\n                                #  _class=\"card-organisation\",\n                                #  ),\n                                #_class=\"card-person\",\n                                ),\n                            _class=\"media\",\n                            ),\n                        _class=\"media-body\",\n                        ),\n                    _class=\"media\",\n                    ),\n                #docs,\n                _class=item_class,\n                _id=item_id,\n                )\n\n    return item\n", "code": "def render_facilities(str, item_id: str, resource: Any, rfields: List[Any], record: Record) -> DIV:\n    \"\"\"\n        Custom dataList item renderer for Facilities on the Profile pages\n\n        @param list_id: the HTML ID of the list\n        @param item_id: the HTML ID of the item\n        @param resource: the S3Resource to render\n        @param rfields: the S3ResourceFields to render\n        @param record: the record as dict\n    \"\"\"\n\n    record_id: int = record[\"org_facility.id\"]\n    item_class: str = \"thumbnail\"\n\n    raw: Dict[str, Any] = record._row\n    name: str = record[\"org_facility.name\"]\n    #author = record[\"org_facility.modified_by\"]\n    #date = record[\"org_facility.modified_on\"]\n    #organisation = record[\"org_facility.organisation_id\"]\n    organisation_id: int = raw[\"org_facility.organisation_id\"]\n    #location = record[\"org_facility.location_id\"]\n    #location_id = raw[\"org_facility.location_id\"]\n    #location_url = URL(c=\"gis\", f=\"location\",\n    #                   args=[location_id, \"profile\"])\n    address: str = raw[\"gis_location.addr_street\"]\n    phone: str = raw[\"org_facility.phone1\"]\n    #facility_type = record[\"org_facility.facility_type_id\"]\n    logo: str = raw[\"org_organisation.logo\"]\n\n    org_url: URL = URL(c=\"org\", f=\"organisation\", args=[organisation_id, \"profile\"])\n    if logo:\n        logo: A = A(IMG(_src=URL(c=\"default\", f=\"download\", args=[logo]),\n                        _class=\"media-object\",\n                        ),\n                    _href=org_url,\n                    _class=\"pull-left\",\n                    )\n    else:\n        logo: DIV = DIV(IMG(_class=\"media-object\"),\n                    _class=\"pull-left\")\n\n    # Edit Bar\n    permit: Any = current.auth.s3_has_permission\n    table: Any = current.db.org_facility\n    if permit(\"update\", table, record_id=record_id):\n        vars = {\"refresh\": list_id,\n                \"record\": record_id,\n                }\n        f: str = current.request.function\n        if f == \"organisation\" and organisation_id:\n            vars[\"(organisation)\"] = organisation_id\n        edit_btn: A = A(I(\" \", _class=\"icon icon-edit\"),\n                        _href=URL(c=\"org\", f=\"facility\",\n                                args=[record_id, \"update.popup\"],\n                                vars=vars),\n                        _class=\"s3_modal\",\n                        _title=current.response.s3.crud_strings.org_facility.title_update,\n                        )\n    else:\n        edit_btn: str = \"\"\n    if permit(\"delete\", table, record_id=record_id):\n        delete_btn: A = A(I(\" \", _class=\"icon icon-remove-sign\"),\n                        _class=\"dl-item-delete\",\n                        )\n    else:\n        delete_btn: str = \"\"\n    edit_bar: DIV = DIV(edit_btn,\n                    delete_btn,\n                    _class=\"edit-bar fright\",\n                    )\n\n    # Render the item\n    #avatar = logo\n    body: Any = TAG[\"\"](#P(I(_class=\"icon-flag\"),\n                    #  \" \",\n                    #  SPAN(facility_type),\n                    #  \" \",\n                    #  _class=\"main_contact_ph\",\n                    #  ),\n                    P(I(_class=\"icon-phone\"),\n                        \" \",\n                        SPAN(phone or T(\"no phone number\")),\n                        \" \",\n                        ),\n                    P(I(_class=\"icon-home\"),\n                        \" \",\n                        address,\n                        _class=\"main_facility-add\",\n                        ))\n\n    item: DIV = DIV(DIV(SPAN(name, _class=\"card-title\"),\n                    edit_bar,\n                    _class=\"card-header\",\n                    ),\n                DIV(#avatar,\n                    DIV(DIV(body,\n                            DIV(#author,\n                                #\" - \",\n                                #A(organisation,\n                                #  _href=org_url,\n                                #  _class=\"card-organisation\",\n                                #  ),\n                                #_class=\"card-person\",\n                                ),\n                            _class=\"media\",\n                            ),\n                        _class=\"media-body\",\n                        ),\n                    _class=\"media\",\n                    ),\n                #docs,\n                _class=item_class,\n                _id=item_id,\n                )\n\n    return item\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "3890dff869eba446cc1aac4cdbd8bd44df1af297"}
{"source_tokens": ["#NEWLINE#", "def ctcpFinger(", "self", ",", "irc", ",", "msg", ",", "match", ")", ":", "#NEWLINE#", "#INDENT#", "'^\\x01FINGER\\x01$'", "#NEWLINE#", "self", ".", "log", ".", "info", "(", "'Received CTCP FINGER from %s'", ",", "msg", ".", "prefix", ")", "#NEWLINE#", "self", ".", "_reply", "(", "irc", ",", "msg", ",", "(", "'FINGER '", "+", "_", "(", "'Supybot, the best Python IRC bot in existence!'", ")", ")", ")"], "edges": [[1, 5, 7, "enum_FIELD"], [12, 13, 7, "enum_FIELD"], [14, 22, 7, "enum_FIELD"], [27, 33, 7, "enum_FIELD"], [22, 18, 7, "enum_FIELD"], [33, 29, 7, "enum_FIELD"], [18, 16, 7, "enum_FIELD"], [24, 23, 7, "enum_FIELD"], [29, 28, 7, "enum_FIELD"], [38, 37, 7, "enum_FIELD"], [38, 40, 7, "enum_FIELD"], [16, 15, 7, "enum_FIELD"], [40, 39, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [15, 2, 10, "enum_LAST_LEXICAL_USE"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [23, 6, 10, "enum_LAST_LEXICAL_USE"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [28, 15, 10, "enum_LAST_LEXICAL_USE"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [32, 4, 10, "enum_LAST_LEXICAL_USE"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [34, 23, 10, "enum_LAST_LEXICAL_USE"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [5, 12, 1, "enum_CFG_NEXT"], [12, 14, 1, "enum_CFG_NEXT"], [14, 27, 1, "enum_CFG_NEXT"], [15, 2, 3, "enum_LAST_WRITE"], [23, 6, 3, "enum_LAST_WRITE"], [28, 15, 2, "enum_LAST_READ"], [28, 2, 3, "enum_LAST_WRITE"], [32, 4, 3, "enum_LAST_WRITE"], [34, 23, 2, "enum_LAST_READ"], [34, 6, 3, "enum_LAST_WRITE"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "ProgVal", "repo": "Limnoria", "path": "plugins/Ctcp/plugin.py", "id": 6036, "has_bug": false, "code_full": "import logging\nfrom typing import Any, Callable\n\n\nclass IRC:\n    def send_message(self, target: str, message: str):\n        pass\n\n\nclass Message:\n    prefix: str\n\n\n_: Callable[[str], str] = lambda x: x\n\n\nclass Class:\n    log: logging.Logger\n\n    def _reply(self, irc: IRC, msg: Message, message: str):\n        pass\n\n    def ctcpFinger(self, irc: IRC, msg: Message, match: Any):\n        \"^\u0001FINGER\u0001$\"\n        self.log.info('Received CTCP FINGER from %s', msg.prefix)\n        self._reply(irc, msg, 'FINGER ' + \n                    _('Supybot, the best Python IRC bot in existence!'))\n", "code": "def ctcpFinger(self, irc: IRC, msg: Message, match: Any):\n    \"^\u0001FINGER\u0001$\"\n    self.log.info('Received CTCP FINGER from %s', msg.prefix)\n    self._reply(irc, msg, 'FINGER ' + \n                _('Supybot, the best Python IRC bot in existence!'))\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "22956a3f4dc9f777a091b46501fede7a4bf0731c"}
{"source_tokens": ["#NEWLINE#", "def encode_key(", "self", ",", "key", ")", ":", "#NEWLINE#", "#INDENT#", "return", "super", "(", "ReverseTranscoder", ",", "self", ")", ".", "encode_key", "(", "key", "[", ":", ":", "(", "-", "1", ")", "]", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [9, 18, 7, "enum_FIELD"], [18, 16, 7, "enum_FIELD"], [16, 13, 7, "enum_FIELD"], [20, 19, 7, "enum_FIELD"], [20, 21, 7, "enum_FIELD"], [13, 10, 7, "enum_FIELD"], [21, 24, 7, "enum_FIELD"], [24, 25, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [14, 2, 10, "enum_LAST_LEXICAL_USE"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [19, 4, 10, "enum_LAST_LEXICAL_USE"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [3, 9, 1, "enum_CFG_NEXT"], [14, 2, 3, "enum_LAST_WRITE"], [19, 4, 3, "enum_LAST_WRITE"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "couchbase", "repo": "couchbase-python-client", "path": "examples/reversed_keys.py", "id": 11083, "has_bug": false, "code_full": "from typing import Any\n\n\nclass Transcoder:\n    def encode_key(self, key: str) -> Any:\n        pass\n\n\nclass ReverseTranscoder(Transcoder):\n    def encode_key(self, key: str):\n        return super(ReverseTranscoder, self).encode_key(key[::-1])\n", "code": "def encode_key(self, key: str):\n    return super(ReverseTranscoder, self).encode_key(key[::-1])\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "28a0ee3e8804a095f3e9c2006bcf725db60b8580"}
{"source_tokens": ["#NEWLINE#", "def __delitem__(", "self", ",", "key", ")", ":", "#NEWLINE#", "#INDENT#", "del", "self", ".", "_substitutions_dict", "[", "key", "]"], "edges": [[1, 3, 7, "enum_FIELD"], [13, 11, 7, "enum_FIELD"], [13, 14, 7, "enum_FIELD"], [11, 10, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 9, 9, "enum_NEXT_SYNTAX"], [10, 2, 10, "enum_LAST_LEXICAL_USE"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [14, 4, 10, "enum_LAST_LEXICAL_USE"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [3, 9, 1, "enum_CFG_NEXT"], [10, 2, 3, "enum_LAST_WRITE"], [14, 4, 3, "enum_LAST_WRITE"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "sympy", "repo": "sympy", "path": "sympy/tensor/tensor.py", "id": 55186, "has_bug": false, "code_full": "\nfrom typing import Any, Dict\n\n\nclass Class:\n    _substitutions_dict: Dict[Any, Any]\n\n    def __delitem__(self, key: Any):\n        del self._substitutions_dict[key]\n", "code": "def __delitem__(self, key: Any):\n    del self._substitutions_dict[key]\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "25ea11a953ec1a83e73b58d43a1d5f4026e006bc"}
{"source_tokens": ["#NEWLINE#", "def dns_create_record(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "logit", "(", "'Creating a DNS Record...'", ")", "#NEWLINE#", "domain_name", "=", "'SMOKETEST.example.edu'", "#NEWLINE#", "try", ":", "#NEWLINE#", "#INDENT#", "dom", "=", "self", ".", "dns", ".", "find", "(", "name", "=", "domain_name", ")", "#NEWLINE#", "#UNINDENT#", "except", "exc", ".", "NotFound", ":", "#NEWLINE#", "#INDENT#", "self", ".", "logit", "(", "'Smoketest domain not found; skipping record test.'", ")", "#NEWLINE#", "self", ".", "failures", ".", "append", "(", "'DNS RECORD CREATION'", ")", "#NEWLINE#", "return", "#NEWLINE#", "#UNINDENT#", "a_rec", "=", "{", "'type'", ":", "'A'", ",", "'name'", ":", "domain_name", ",", "'data'", ":", "'1.2.3.4'", ",", "'ttl'", ":", "6000", "}", "#NEWLINE#", "try", ":", "#NEWLINE#", "#INDENT#", "recs", "=", "dom", ".", "add_records", "(", "a_rec", ")", "#NEWLINE#", "self", ".", "logit", "(", "'Success!'", ")", "#NEWLINE#", "#UNINDENT#", "except", "exc", ".", "DomainRecordAdditionFailed", "as", "e", ":", "#NEWLINE#", "#INDENT#", "self", ".", "logit", "(", "'FAIL!'", ",", "e", ")", "#NEWLINE#", "self", ".", "failures", ".", "append", "(", "'DNS RECORD CREATION'", ")"], "edges": [[6, 10, 7, "enum_FIELD"], [13, 16, 7, "enum_FIELD"], [61, 72, 7, "enum_FIELD"], [10, 8, 7, "enum_FIELD"], [21, 29, 7, "enum_FIELD"], [36, 38, 7, "enum_FIELD"], [85, 91, 7, "enum_FIELD"], [94, 98, 7, "enum_FIELD"], [107, 105, 7, "enum_FIELD"], [107, 108, 7, "enum_FIELD"], [8, 7, 7, "enum_FIELD"], [29, 27, 7, "enum_FIELD"], [38, 37, 7, "enum_FIELD"], [42, 46, 7, "enum_FIELD"], [49, 55, 7, "enum_FIELD"], [91, 89, 7, "enum_FIELD"], [98, 96, 7, "enum_FIELD"], [105, 104, 7, "enum_FIELD"], [111, 117, 7, "enum_FIELD"], [120, 126, 7, "enum_FIELD"], [27, 25, 7, "enum_FIELD"], [30, 32, 7, "enum_FIELD"], [46, 44, 7, "enum_FIELD"], [55, 53, 7, "enum_FIELD"], [89, 88, 7, "enum_FIELD"], [96, 95, 7, "enum_FIELD"], [117, 113, 7, "enum_FIELD"], [126, 124, 7, "enum_FIELD"], [25, 24, 7, "enum_FIELD"], [44, 43, 7, "enum_FIELD"], [53, 51, 7, "enum_FIELD"], [113, 112, 7, "enum_FIELD"], [124, 122, 7, "enum_FIELD"], [51, 50, 7, "enum_FIELD"], [122, 121, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [7, 2, 10, "enum_LAST_LEXICAL_USE"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [24, 7, 10, "enum_LAST_LEXICAL_USE"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [32, 14, 10, "enum_LAST_LEXICAL_USE"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 42, 9, "enum_NEXT_SYNTAX"], [43, 24, 10, "enum_LAST_LEXICAL_USE"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [50, 43, 10, "enum_LAST_LEXICAL_USE"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 59, 9, "enum_NEXT_SYNTAX"], [59, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [71, 32, 10, "enum_LAST_LEXICAL_USE"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [88, 22, 10, "enum_LAST_LEXICAL_USE"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [92, 62, 10, "enum_LAST_LEXICAL_USE"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [95, 50, 10, "enum_LAST_LEXICAL_USE"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 103, 9, "enum_NEXT_SYNTAX"], [104, 37, 10, "enum_LAST_LEXICAL_USE"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 111, 9, "enum_NEXT_SYNTAX"], [112, 95, 10, "enum_LAST_LEXICAL_USE"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [118, 108, 10, "enum_LAST_LEXICAL_USE"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [121, 112, 10, "enum_LAST_LEXICAL_USE"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [6, 13, 1, "enum_CFG_NEXT"], [13, 21, 1, "enum_CFG_NEXT"], [21, 38, 1, "enum_CFG_NEXT"], [21, 61, 1, "enum_CFG_NEXT"], [38, 42, 1, "enum_CFG_NEXT"], [42, 49, 1, "enum_CFG_NEXT"], [49, 59, 1, "enum_CFG_NEXT"], [61, 85, 1, "enum_CFG_NEXT"], [85, 94, 1, "enum_CFG_NEXT"], [94, 105, 1, "enum_CFG_NEXT"], [105, 108, 1, "enum_CFG_NEXT"], [108, 111, 1, "enum_CFG_NEXT"], [111, 120, 1, "enum_CFG_NEXT"], [7, 2, 3, "enum_LAST_WRITE"], [24, 7, 2, "enum_LAST_READ"], [24, 2, 3, "enum_LAST_WRITE"], [32, 14, 3, "enum_LAST_WRITE"], [43, 24, 2, "enum_LAST_READ"], [43, 2, 3, "enum_LAST_WRITE"], [50, 43, 2, "enum_LAST_READ"], [50, 2, 3, "enum_LAST_WRITE"], [71, 32, 2, "enum_LAST_READ"], [71, 14, 3, "enum_LAST_WRITE"], [88, 22, 3, "enum_LAST_WRITE"], [92, 62, 3, "enum_LAST_WRITE"], [95, 24, 2, "enum_LAST_READ"], [95, 2, 3, "enum_LAST_WRITE"], [112, 95, 2, "enum_LAST_READ"], [112, 2, 3, "enum_LAST_WRITE"], [118, 108, 3, "enum_LAST_WRITE"], [121, 112, 2, "enum_LAST_READ"], [121, 2, 3, "enum_LAST_WRITE"], [62, 71, 4, "enum_COMPUTED_FROM"], [22, 32, 4, "enum_COMPUTED_FROM"], [22, 24, 4, "enum_COMPUTED_FROM"], [86, 92, 4, "enum_COMPUTED_FROM"], [86, 88, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "rackspace", "repo": "pyrax", "path": "tests/integrated/smoketest.py", "id": 43546, "has_bug": false, "code_full": "import logging\nfrom typing import Any, Dict, List\n\n\nclass Exc:\n    class NotFound(Exception):\n        pass\n\n    class DomainRecordAdditionFailed(Exception):\n        pass\n\n\nexc = Exc()\n\n\nclass Domain:\n    def add_records(self, record: Dict[str, Any]) -> List:\n        return []\n\n\nclass DNS:\n    def find(self, name: str) -> Domain:\n        return Domain()\n\n\nclass Class:\n    dns: DNS\n    failures: List[str]\n    logger: logging.LoggerAdapter\n\n    def logit(self, message: str, *args: Any):\n        pass\n\n    def dns_create_record(self):\n        self.logit(\"Creating a DNS Record...\")\n        domain_name: str = \"SMOKETEST.example.edu\"\n        try:\n            dom: Domain = self.dns.find(name=domain_name)\n        except exc.NotFound:\n            self.logit(\"Smoketest domain not found; skipping record test.\")\n            self.failures.append(\"DNS RECORD CREATION\")\n            return\n        a_rec: Dict[str, Any] = {\"type\": \"A\",\n                \"name\": domain_name,\n                \"data\": \"1.2.3.4\",\n                \"ttl\": 6000}\n        try:\n            recs: List = dom.add_records(a_rec)\n            self.logit(\"Success!\")\n            # No need to cleanup, since domain deletion also deletes the recs.\n            # self.cleanup_items.extend(recs)\n        except exc.DomainRecordAdditionFailed as e:\n            self.logit(\"FAIL!\", e)\n            self.failures.append(\"DNS RECORD CREATION\")\n", "code": "def dns_create_record(self):\n    self.logit(\"Creating a DNS Record...\")\n    domain_name: str = \"SMOKETEST.example.edu\"\n    try:\n        dom: Domain = self.dns.find(name=domain_name)\n    except exc.NotFound:\n        self.logit(\"Smoketest domain not found; skipping record test.\")\n        self.failures.append(\"DNS RECORD CREATION\")\n        return\n    a_rec: Dict[str, Any] = {\"type\": \"A\",\n            \"name\": domain_name,\n            \"data\": \"1.2.3.4\",\n            \"ttl\": 6000}\n    try:\n        recs: List = dom.add_records(a_rec)\n        self.logit(\"Success!\")\n        # No need to cleanup, since domain deletion also deletes the recs.\n        # self.cleanup_items.extend(recs)\n    except exc.DomainRecordAdditionFailed as e:\n        self.logit(\"FAIL!\", e)\n        self.failures.append(\"DNS RECORD CREATION\")\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "4401296569a447963fb2b4f7a08a386ddfc88e71"}
{"source_tokens": ["#NEWLINE#", "def mutate_array(", "self", ",", "arr", ")", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "arr", ".", "fill", "(", "42", ")", "#NEWLINE#", "#UNINDENT#", "except", "(", "TypeError", ",", "ValueError", ")", ":", "#NEWLINE#", "#INDENT#", "fill_value", "=", "(", "b'x'", "*", "arr", ".", "dtype", ".", "itemsize", ")", "#NEWLINE#", "arr", ".", "fill", "(", "fill_value", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [12, 16, 7, "enum_FIELD"], [21, 24, 7, "enum_FIELD"], [16, 14, 7, "enum_FIELD"], [29, 34, 7, "enum_FIELD"], [41, 45, 7, "enum_FIELD"], [14, 13, 7, "enum_FIELD"], [34, 33, 7, "enum_FIELD"], [34, 38, 7, "enum_FIELD"], [45, 43, 7, "enum_FIELD"], [38, 36, 7, "enum_FIELD"], [43, 42, 7, "enum_FIELD"], [36, 35, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 12, 9, "enum_NEXT_SYNTAX"], [13, 4, 10, "enum_LAST_LEXICAL_USE"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [35, 13, 10, "enum_LAST_LEXICAL_USE"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [42, 35, 10, "enum_LAST_LEXICAL_USE"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [46, 30, 10, "enum_LAST_LEXICAL_USE"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [3, 12, 1, "enum_CFG_NEXT"], [12, 24, 1, "enum_CFG_NEXT"], [24, 29, 1, "enum_CFG_NEXT"], [29, 41, 1, "enum_CFG_NEXT"], [13, 4, 3, "enum_LAST_WRITE"], [35, 13, 2, "enum_LAST_READ"], [35, 4, 3, "enum_LAST_WRITE"], [42, 35, 2, "enum_LAST_READ"], [42, 4, 3, "enum_LAST_WRITE"], [46, 30, 3, "enum_LAST_WRITE"], [30, 35, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "numba", "repo": "numba", "path": "numba/tests/test_dyn_array.py", "id": 29588, "has_bug": false, "code_full": "\nimport numpy as np\n\n\nclass Class:\n    def mutate_array(self, arr: np.ndarray):\n        try:\n            arr.fill(42)\n        except (TypeError, ValueError):\n            # Try something else (e.g. Numpy 1.6 with structured dtypes)\n            fill_value: bytes = b'x' * arr.dtype.itemsize\n            arr.fill(fill_value)\n", "code": "def mutate_array(self, arr: np.ndarray):\n    try:\n        arr.fill(42)\n    except (TypeError, ValueError):\n        # Try something else (e.g. Numpy 1.6 with structured dtypes)\n        fill_value: bytes = b'x' * arr.dtype.itemsize\n        arr.fill(fill_value)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "cd2945f6519c423fa424d64d9f40bedf7a9ca91d"}
{"source_tokens": ["#NEWLINE#", "def widget_move(", "request", ")", ":", "#NEWLINE#", "#INDENT#", "\"Handle moving of admin widgets.\\n\\n    This will update the saved position of the admin widgets based on a user's\\n    activity in the dashboard.\\n    \"", "#NEWLINE#", "profile", "=", "Profile", ".", "objects", ".", "get_or_create", "(", "user", "=", "request", ".", "user", ")", "[", "0", "]", "#NEWLINE#", "profile_data", "=", "profile", ".", "extra_data", "#NEWLINE#", "widget_type", "=", "request", ".", "POST", ".", "get", "(", "'type'", ")", "#NEWLINE#", "if", "(", "widget_type", "==", "'primary'", ")", ":", "#NEWLINE#", "#INDENT#", "positions_key", "=", "'primary_widget_positions'", "#NEWLINE#", "widgets", "=", "primary_widgets", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "positions_key", "=", "'secondary_widget_positions'", "#NEWLINE#", "widgets", "=", "secondary_widgets", "#NEWLINE#", "#UNINDENT#", "positions", "=", "profile_data", ".", "setdefault", "(", "positions_key", ",", "{", "}", ")", "#NEWLINE#", "for", "widget", "in", "widgets", ":", "#NEWLINE#", "#INDENT#", "widget_position", "=", "request", ".", "POST", ".", "get", "(", "widget", ".", "widget_id", ")", "#NEWLINE#", "if", "(", "widget_position", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "positions", "[", "widget", ".", "widget_id", "]", "=", "widget_position", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "positions", "[", "widget", ".", "widget_id", "]", "=", "str", "(", "len", "(", "widgets", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "profile", ".", "save", "(", ")", "#NEWLINE#", "return", "HttpResponse", "(", ")"], "edges": [[6, 7, 7, "enum_FIELD"], [8, 23, 7, "enum_FIELD"], [26, 30, 7, "enum_FIELD"], [32, 40, 7, "enum_FIELD"], [50, 47, 7, "enum_FIELD"], [74, 82, 7, "enum_FIELD"], [89, 88, 7, "enum_FIELD"], [89, 90, 7, "enum_FIELD"], [146, 150, 7, "enum_FIELD"], [153, 155, 7, "enum_FIELD"], [23, 16, 7, "enum_FIELD"], [23, 24, 7, "enum_FIELD"], [30, 29, 7, "enum_FIELD"], [40, 38, 7, "enum_FIELD"], [47, 46, 7, "enum_FIELD"], [52, 55, 7, "enum_FIELD"], [56, 59, 7, "enum_FIELD"], [65, 68, 7, "enum_FIELD"], [69, 72, 7, "enum_FIELD"], [82, 78, 7, "enum_FIELD"], [93, 101, 7, "enum_FIELD"], [113, 110, 7, "enum_FIELD"], [150, 148, 7, "enum_FIELD"], [155, 154, 7, "enum_FIELD"], [16, 14, 7, "enum_FIELD"], [38, 36, 7, "enum_FIELD"], [78, 77, 7, "enum_FIELD"], [101, 99, 7, "enum_FIELD"], [110, 109, 7, "enum_FIELD"], [115, 123, 7, "enum_FIELD"], [129, 138, 7, "enum_FIELD"], [148, 147, 7, "enum_FIELD"], [14, 12, 7, "enum_FIELD"], [17, 20, 7, "enum_FIELD"], [36, 35, 7, "enum_FIELD"], [99, 97, 7, "enum_FIELD"], [103, 102, 7, "enum_FIELD"], [117, 116, 7, "enum_FIELD"], [117, 119, 7, "enum_FIELD"], [131, 130, 7, "enum_FIELD"], [131, 133, 7, "enum_FIELD"], [138, 137, 7, "enum_FIELD"], [12, 11, 7, "enum_FIELD"], [20, 19, 7, "enum_FIELD"], [97, 96, 7, "enum_FIELD"], [119, 118, 7, "enum_FIELD"], [133, 132, 7, "enum_FIELD"], [140, 139, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [19, 2, 10, "enum_LAST_LEXICAL_USE"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [29, 9, 10, "enum_LAST_LEXICAL_USE"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [35, 19, 10, "enum_LAST_LEXICAL_USE"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [46, 33, 10, "enum_LAST_LEXICAL_USE"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 65, 9, "enum_NEXT_SYNTAX"], [66, 53, 10, "enum_LAST_LEXICAL_USE"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [70, 57, 10, "enum_LAST_LEXICAL_USE"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [77, 27, 10, "enum_LAST_LEXICAL_USE"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [81, 66, 10, "enum_LAST_LEXICAL_USE"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [90, 70, 10, "enum_LAST_LEXICAL_USE"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [96, 35, 10, "enum_LAST_LEXICAL_USE"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [102, 88, 10, "enum_LAST_LEXICAL_USE"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [109, 94, 10, "enum_LAST_LEXICAL_USE"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 115, 9, "enum_NEXT_SYNTAX"], [116, 75, 10, "enum_LAST_LEXICAL_USE"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [118, 102, 10, "enum_LAST_LEXICAL_USE"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [123, 109, 10, "enum_LAST_LEXICAL_USE"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 129, 9, "enum_NEXT_SYNTAX"], [130, 116, 10, "enum_LAST_LEXICAL_USE"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [132, 118, 10, "enum_LAST_LEXICAL_USE"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [141, 90, 10, "enum_LAST_LEXICAL_USE"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 146, 9, "enum_NEXT_SYNTAX"], [147, 29, 10, "enum_LAST_LEXICAL_USE"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [6, 8, 1, "enum_CFG_NEXT"], [8, 26, 1, "enum_CFG_NEXT"], [26, 32, 1, "enum_CFG_NEXT"], [32, 47, 1, "enum_CFG_NEXT"], [47, 52, 1, "enum_CFG_NEXT"], [47, 65, 1, "enum_CFG_NEXT"], [52, 56, 1, "enum_CFG_NEXT"], [56, 74, 1, "enum_CFG_NEXT"], [65, 69, 1, "enum_CFG_NEXT"], [69, 74, 1, "enum_CFG_NEXT"], [74, 90, 1, "enum_CFG_NEXT"], [90, 88, 1, "enum_CFG_NEXT"], [88, 146, 1, "enum_CFG_NEXT"], [88, 93, 1, "enum_CFG_NEXT"], [93, 110, 1, "enum_CFG_NEXT"], [110, 115, 1, "enum_CFG_NEXT"], [110, 129, 1, "enum_CFG_NEXT"], [115, 88, 1, "enum_CFG_NEXT"], [129, 88, 1, "enum_CFG_NEXT"], [146, 153, 1, "enum_CFG_NEXT"], [19, 2, 3, "enum_LAST_WRITE"], [29, 9, 3, "enum_LAST_WRITE"], [35, 19, 2, "enum_LAST_READ"], [35, 2, 3, "enum_LAST_WRITE"], [46, 33, 3, "enum_LAST_WRITE"], [77, 27, 3, "enum_LAST_WRITE"], [81, 53, 3, "enum_LAST_WRITE"], [81, 66, 3, "enum_LAST_WRITE"], [90, 70, 3, "enum_LAST_WRITE"], [90, 57, 3, "enum_LAST_WRITE"], [88, 118, 2, "enum_LAST_READ"], [88, 132, 2, "enum_LAST_READ"], [88, 88, 3, "enum_LAST_WRITE"], [96, 96, 2, "enum_LAST_READ"], [96, 35, 2, "enum_LAST_READ"], [96, 2, 3, "enum_LAST_WRITE"], [102, 118, 2, "enum_LAST_READ"], [102, 132, 2, "enum_LAST_READ"], [102, 88, 3, "enum_LAST_WRITE"], [94, 109, 2, "enum_LAST_READ"], [94, 123, 2, "enum_LAST_READ"], [94, 94, 3, "enum_LAST_WRITE"], [109, 109, 2, "enum_LAST_READ"], [109, 123, 2, "enum_LAST_READ"], [109, 94, 3, "enum_LAST_WRITE"], [123, 109, 2, "enum_LAST_READ"], [123, 94, 3, "enum_LAST_WRITE"], [116, 116, 2, "enum_LAST_READ"], [116, 130, 2, "enum_LAST_READ"], [116, 75, 3, "enum_LAST_WRITE"], [118, 102, 2, "enum_LAST_READ"], [118, 88, 3, "enum_LAST_WRITE"], [137, 137, 2, "enum_LAST_READ"], [139, 139, 2, "enum_LAST_READ"], [141, 141, 2, "enum_LAST_READ"], [141, 90, 2, "enum_LAST_READ"], [141, 70, 3, "enum_LAST_WRITE"], [141, 57, 3, "enum_LAST_WRITE"], [130, 116, 2, "enum_LAST_READ"], [130, 130, 2, "enum_LAST_READ"], [130, 75, 3, "enum_LAST_WRITE"], [132, 102, 2, "enum_LAST_READ"], [132, 88, 3, "enum_LAST_WRITE"], [147, 29, 2, "enum_LAST_READ"], [147, 9, 3, "enum_LAST_WRITE"], [9, 11, 4, "enum_COMPUTED_FROM"], [9, 19, 4, "enum_COMPUTED_FROM"], [27, 29, 4, "enum_COMPUTED_FROM"], [33, 35, 4, "enum_COMPUTED_FROM"], [75, 81, 4, "enum_COMPUTED_FROM"], [75, 77, 4, "enum_COMPUTED_FROM"], [57, 59, 4, "enum_COMPUTED_FROM"], [70, 72, 4, "enum_COMPUTED_FROM"], [94, 102, 4, "enum_COMPUTED_FROM"], [94, 96, 4, "enum_COMPUTED_FROM"], [117, 123, 4, "enum_COMPUTED_FROM"], [131, 137, 4, "enum_COMPUTED_FROM"], [131, 139, 4, "enum_COMPUTED_FROM"], [131, 141, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "reviewboard", "repo": "reviewboard", "path": "reviewboard/admin/views.py", "id": 44198, "has_bug": false, "code_full": "from typing import Any, Dict, List, Optional, Tuple\n\nfrom django.contrib.auth.models import User\nfrom django.http import HttpRequest, HttpResponse\n\n\nclass Profile:\n    extra_data: Dict[str, Any]\n\n    class objects:\n        @staticmethod\n        def get_or_create(user: User) -> Tuple['Profile', Any]:\n            return Profile(), None\n        \n    def save(self):\n        pass\n        \n    \nclass Widget:\n    widget_id: str\n\n    def __init__(self, widget: str):\n        pass\n\n\nprimary_widgets: List[Widget] = []\nsecondary_widgets: List[Widget] = []\n\n\ndef widget_move(request: HttpRequest) -> HttpResponse:\n    \"\"\"Handle moving of admin widgets.\n\n    This will update the saved position of the admin widgets based on a user's\n    activity in the dashboard.\n    \"\"\"\n    profile: Profile = Profile.objects.get_or_create(user=request.user)[0]\n    profile_data: Dict[str, Any] = profile.extra_data\n\n    widget_type: str = request.POST.get('type')\n\n    if widget_type == 'primary':\n        positions_key: str = 'primary_widget_positions'\n        widgets: List[Widget] = primary_widgets\n    else:\n        positions_key: str = 'secondary_widget_positions'\n        widgets: List[Widget] = secondary_widgets\n\n    positions: Dict[str, Any] = profile_data.setdefault(positions_key, {})\n\n    for widget in widgets:\n        widget_position: Optional[str] = request.POST.get(widget.widget_id)\n        if widget_position is not None:\n            positions[widget.widget_id] = widget_position\n        else:\n            # All widgets removed from the dashboard have the same position.\n            positions[widget.widget_id] = str(len(widgets))\n\n    profile.save()\n\n    return HttpResponse()\n", "code": "def widget_move(request: HttpRequest) -> HttpResponse:\n    \"\"\"Handle moving of admin widgets.\n\n    This will update the saved position of the admin widgets based on a user's\n    activity in the dashboard.\n    \"\"\"\n    profile: Profile = Profile.objects.get_or_create(user=request.user)[0]\n    profile_data: Dict[str, Any] = profile.extra_data\n\n    widget_type: str = request.POST.get('type')\n\n    if widget_type == 'primary':\n        positions_key: str = 'primary_widget_positions'\n        widgets: List[Widget] = primary_widgets\n    else:\n        positions_key: str = 'secondary_widget_positions'\n        widgets: List[Widget] = secondary_widgets\n\n    positions: Dict[str, Any] = profile_data.setdefault(positions_key, {})\n\n    for widget in widgets:\n        widget_position: Optional[str] = request.POST.get(widget.widget_id)\n        if widget_position is not None:\n            positions[widget.widget_id] = widget_position\n        else:\n            # All widgets removed from the dashboard have the same position.\n            positions[widget.widget_id] = str(len(widgets))\n\n    profile.save()\n\n    return HttpResponse()\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "6875281357bd36d221e823e6d777db799c21e5a6"}
{"source_tokens": ["#NEWLINE#", "def test_identity(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "def func(", "n", ")", ":", "#NEWLINE#", "#INDENT#", "return", "np", ".", "identity", "(", "n", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "check_identity", "(", "func", ")"], "edges": [[21, 25, 7, "enum_FIELD"], [13, 17, 7, "enum_FIELD"], [25, 23, 7, "enum_FIELD"], [17, 15, 7, "enum_FIELD"], [23, 22, 7, "enum_FIELD"], [15, 14, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [18, 8, 10, "enum_LAST_LEXICAL_USE"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 21, 9, "enum_NEXT_SYNTAX"], [22, 2, 10, "enum_LAST_LEXICAL_USE"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [9, 21, 1, "enum_CFG_NEXT"], [18, 8, 3, "enum_LAST_WRITE"], [22, 2, 3, "enum_LAST_WRITE"], [26, 9, 3, "enum_LAST_WRITE"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "numba", "repo": "numba", "path": "numba/tests/test_dyn_array.py", "id": 29603, "has_bug": false, "code_full": "from typing import Callable\n\nimport numpy as np\n\n\nclass Class:\n    def check_identity(self, func: Callable[[int], np.ndarray]):\n        pass\n\n    def test_identity(self):\n        def func(n: int):\n            return np.identity(n)\n        self.check_identity(func)\n", "code": "def test_identity(self):\n    def func(n: int):\n        return np.identity(n)\n    self.check_identity(func)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "cd2945f6519c423fa424d64d9f40bedf7a9ca91d"}
{"source_tokens": ["#NEWLINE#", "def test_unmount_manifestation_when_leased_elsewhere(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    If the filesystem for a dataset is mounted on the node and the\\n    configuration says the dataset is not meant to be manifest on that\\n    node, ``BlockDeviceDeployer.calculate_changes`` returns a state\\n    change to unmount the filesystem even if there is a lease, as long\\n    as the lease is for another node.\\n    '", "#NEWLINE#", "node_state", "=", "self", ".", "ONE_DATASET_STATE", "#NEWLINE#", "leases", "=", "Leases", "(", ")", ".", "acquire", "(", "datetime", ".", "now", "(", "tz", "=", "UTC", ")", ",", "self", ".", "DATASET_ID", ",", "uuid4", "(", ")", ")", "#NEWLINE#", "node_config", "=", "to_node", "(", "self", ".", "ONE_DATASET_STATE", ")", ".", "transform", "(", "[", "'manifestations'", ",", "unicode", "(", "self", ".", "DATASET_ID", ")", "]", ",", "discard", ")", "#NEWLINE#", "assert_calculated_changes", "(", "self", ",", "node_state", ",", "node_config", ",", "set", "(", ")", ",", "in_parallel", "(", "changes", "=", "[", "UnmountBlockDevice", "(", "dataset_id", "=", "self", ".", "DATASET_ID", ",", "blockdevice_id", "=", "self", ".", "BLOCKDEVICE_ID", ")", "]", ")", ",", "leases", "=", "leases", ")"], "edges": [[6, 7, 7, "enum_FIELD"], [8, 12, 7, "enum_FIELD"], [14, 31, 7, "enum_FIELD"], [40, 62, 7, "enum_FIELD"], [65, 73, 7, "enum_FIELD"], [12, 11, 7, "enum_FIELD"], [31, 20, 7, "enum_FIELD"], [62, 49, 7, "enum_FIELD"], [73, 66, 7, "enum_FIELD"], [20, 18, 7, "enum_FIELD"], [26, 24, 7, "enum_FIELD"], [33, 32, 7, "enum_FIELD"], [37, 36, 7, "enum_FIELD"], [49, 44, 7, "enum_FIELD"], [75, 74, 7, "enum_FIELD"], [79, 78, 7, "enum_FIELD"], [100, 102, 7, "enum_FIELD"], [18, 17, 7, "enum_FIELD"], [24, 23, 7, "enum_FIELD"], [27, 29, 7, "enum_FIELD"], [44, 43, 7, "enum_FIELD"], [56, 55, 7, "enum_FIELD"], [80, 82, 7, "enum_FIELD"], [46, 45, 7, "enum_FIELD"], [58, 57, 7, "enum_FIELD"], [90, 83, 7, "enum_FIELD"], [85, 88, 7, "enum_FIELD"], [91, 94, 7, "enum_FIELD"], [88, 87, 7, "enum_FIELD"], [94, 93, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [11, 2, 10, "enum_LAST_LEXICAL_USE"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [32, 11, 10, "enum_LAST_LEXICAL_USE"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [45, 32, 10, "enum_LAST_LEXICAL_USE"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [57, 45, 10, "enum_LAST_LEXICAL_USE"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [68, 57, 10, "enum_LAST_LEXICAL_USE"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [70, 9, 10, "enum_LAST_LEXICAL_USE"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [72, 41, 10, "enum_LAST_LEXICAL_USE"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [87, 68, 10, "enum_LAST_LEXICAL_USE"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [93, 87, 10, "enum_LAST_LEXICAL_USE"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [102, 15, 10, "enum_LAST_LEXICAL_USE"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [6, 8, 1, "enum_CFG_NEXT"], [8, 14, 1, "enum_CFG_NEXT"], [14, 40, 1, "enum_CFG_NEXT"], [40, 65, 1, "enum_CFG_NEXT"], [11, 2, 3, "enum_LAST_WRITE"], [32, 11, 2, "enum_LAST_READ"], [32, 2, 3, "enum_LAST_WRITE"], [45, 32, 2, "enum_LAST_READ"], [45, 2, 3, "enum_LAST_WRITE"], [57, 45, 2, "enum_LAST_READ"], [57, 2, 3, "enum_LAST_WRITE"], [68, 57, 2, "enum_LAST_READ"], [68, 2, 3, "enum_LAST_WRITE"], [70, 9, 3, "enum_LAST_WRITE"], [72, 41, 3, "enum_LAST_WRITE"], [87, 68, 2, "enum_LAST_READ"], [87, 2, 3, "enum_LAST_WRITE"], [93, 87, 2, "enum_LAST_READ"], [93, 2, 3, "enum_LAST_WRITE"], [102, 15, 3, "enum_LAST_WRITE"], [9, 11, 4, "enum_COMPUTED_FROM"], [15, 32, 4, "enum_COMPUTED_FROM"], [15, 36, 4, "enum_COMPUTED_FROM"], [15, 17, 4, "enum_COMPUTED_FROM"], [15, 23, 4, "enum_COMPUTED_FROM"], [15, 29, 4, "enum_COMPUTED_FROM"], [41, 63, 4, "enum_COMPUTED_FROM"], [41, 43, 4, "enum_COMPUTED_FROM"], [41, 55, 4, "enum_COMPUTED_FROM"], [41, 45, 4, "enum_COMPUTED_FROM"], [41, 57, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "ClusterHQ", "repo": "flocker", "path": "flocker/node/agents/test/test_blockdevice.py", "id": 4280, "has_bug": false, "code_full": "\n\nfrom datetime import datetime\nfrom typing import Any, List, Set\nfrom uuid import uuid4\n\n\nclass Leases:\n    def acquire(self, datetime: datetime, dataset_id: str, uuid4: Any) -> \"Leases\":\n        return self\n\n\nclass UnmountBlockDevice:\n    def __init__(self, dataset_id: str, blockdevice_id: str) -> None:\n        pass\n\n\ndef to_node(state: Any) -> Any:\n    pass\n\n\ndef discard():\n    pass\n\n\ndef in_parallel(changes: List) -> Any:\n    pass\n\n\ndef assert_calculated_changes(test_case: Any, node_state: Any, node_config: Any, set: Set, in_parallel: Any, leases: Leases) -> None:\n    pass\n\n\nunicode = str\n\n\nUTC: Any = None\n\n\nclass Class:\n    DATASET_ID: str\n    BLOCKDEVICE_ID: str\n    ONE_DATASET_STATE: Any\n\n    def test_unmount_manifestation_when_leased_elsewhere(self):\n        \"\"\"\n        If the filesystem for a dataset is mounted on the node and the\n        configuration says the dataset is not meant to be manifest on that\n        node, ``BlockDeviceDeployer.calculate_changes`` returns a state\n        change to unmount the filesystem even if there is a lease, as long\n        as the lease is for another node.\n        \"\"\"\n        # Give it a state that says it has a manifestation of the dataset.\n        node_state = self.ONE_DATASET_STATE\n        leases = Leases().acquire(datetime.now(tz=UTC), self.DATASET_ID,\n                                    uuid4())\n\n        # Give it a configuration that says it shouldn't have that\n        # manifestation.\n        node_config = to_node(self.ONE_DATASET_STATE).transform(\n            [\"manifestations\", unicode(self.DATASET_ID)], discard\n        )\n\n        assert_calculated_changes(\n            self, node_state, node_config, set(),\n            in_parallel(changes=[\n                UnmountBlockDevice(dataset_id=self.DATASET_ID,\n                                    blockdevice_id=self.BLOCKDEVICE_ID)\n            ]), leases=leases,\n        )\n", "code": "def test_unmount_manifestation_when_leased_elsewhere(self):\n    \"\"\"\n    If the filesystem for a dataset is mounted on the node and the\n    configuration says the dataset is not meant to be manifest on that\n    node, ``BlockDeviceDeployer.calculate_changes`` returns a state\n    change to unmount the filesystem even if there is a lease, as long\n    as the lease is for another node.\n    \"\"\"\n    # Give it a state that says it has a manifestation of the dataset.\n    node_state = self.ONE_DATASET_STATE\n    leases = Leases().acquire(datetime.now(tz=UTC), self.DATASET_ID,\n                                uuid4())\n\n    # Give it a configuration that says it shouldn't have that\n    # manifestation.\n    node_config = to_node(self.ONE_DATASET_STATE).transform(\n        [\"manifestations\", unicode(self.DATASET_ID)], discard\n    )\n\n    assert_calculated_changes(\n        self, node_state, node_config, set(),\n        in_parallel(changes=[\n            UnmountBlockDevice(dataset_id=self.DATASET_ID,\n                                blockdevice_id=self.BLOCKDEVICE_ID)\n        ]), leases=leases,\n    )\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "eaa586248986d7cd681c99c948546c2b507e44de"}
{"source_tokens": ["#NEWLINE#", "def callLater(", "self", ",", "s", ",", "f", ",", "*", "a", ",", "**k", ")", ":", "#NEWLINE#", "#INDENT#", "assert", "(", "f", "is not", "None", ")", "#NEWLINE#", "tup", "=", "(", "(", "self", ".", "time", "+", "s", ")", ",", "f", ",", "a", ",", "k", ")", "#NEWLINE#", "self", ".", "calls", ".", "append", "(", "tup", ")", "#NEWLINE#", "self", ".", "calls", ".", "sort", "(", ")", "#NEWLINE#", "return", "FakeDelayedCall", "(", "self", ",", "tup", ")"], "edges": [[1, 7, 7, "enum_FIELD"], [7, 9, 7, "enum_FIELD"], [16, 19, 7, "enum_FIELD"], [22, 35, 7, "enum_FIELD"], [40, 46, 7, "enum_FIELD"], [49, 55, 7, "enum_FIELD"], [58, 62, 7, "enum_FIELD"], [19, 18, 7, "enum_FIELD"], [46, 44, 7, "enum_FIELD"], [55, 53, 7, "enum_FIELD"], [62, 59, 7, "enum_FIELD"], [30, 28, 7, "enum_FIELD"], [30, 31, 7, "enum_FIELD"], [44, 42, 7, "enum_FIELD"], [53, 51, 7, "enum_FIELD"], [28, 27, 7, "enum_FIELD"], [42, 41, 7, "enum_FIELD"], [51, 50, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [18, 6, 10, "enum_LAST_LEXICAL_USE"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [27, 2, 10, "enum_LAST_LEXICAL_USE"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [31, 4, 10, "enum_LAST_LEXICAL_USE"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [34, 18, 10, "enum_LAST_LEXICAL_USE"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [36, 9, 10, "enum_LAST_LEXICAL_USE"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [41, 27, 10, "enum_LAST_LEXICAL_USE"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [47, 23, 10, "enum_LAST_LEXICAL_USE"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [50, 41, 10, "enum_LAST_LEXICAL_USE"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [61, 50, 10, "enum_LAST_LEXICAL_USE"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [63, 47, 10, "enum_LAST_LEXICAL_USE"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [7, 16, 1, "enum_CFG_NEXT"], [16, 22, 1, "enum_CFG_NEXT"], [22, 40, 1, "enum_CFG_NEXT"], [40, 49, 1, "enum_CFG_NEXT"], [49, 58, 1, "enum_CFG_NEXT"], [18, 6, 3, "enum_LAST_WRITE"], [27, 2, 3, "enum_LAST_WRITE"], [31, 4, 3, "enum_LAST_WRITE"], [34, 18, 2, "enum_LAST_READ"], [34, 6, 3, "enum_LAST_WRITE"], [36, 9, 3, "enum_LAST_WRITE"], [41, 27, 2, "enum_LAST_READ"], [41, 2, 3, "enum_LAST_WRITE"], [47, 23, 3, "enum_LAST_WRITE"], [50, 41, 2, "enum_LAST_READ"], [50, 2, 3, "enum_LAST_WRITE"], [61, 50, 2, "enum_LAST_READ"], [61, 2, 3, "enum_LAST_WRITE"], [63, 47, 2, "enum_LAST_READ"], [63, 23, 3, "enum_LAST_WRITE"], [23, 34, 4, "enum_COMPUTED_FROM"], [23, 36, 4, "enum_COMPUTED_FROM"], [23, 38, 4, "enum_COMPUTED_FROM"], [23, 31, 4, "enum_COMPUTED_FROM"], [23, 27, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "twisted", "repo": "vertex", "path": "vertex/test/helpers.py", "id": 59906, "has_bug": false, "code_full": "from typing import Any, Callable, Dict, List, Tuple\n\n\nclass FakeDelayedCall:\n    def __init__(self, sercice: \"FakeQ2QService\", tup: Tuple[float, Callable, Tuple[Any, ...], Dict[str, Any]]):\n        pass\n\n\nclass FakeQ2QService:\n    time: float\n    calls: List[Tuple[float, Callable, Tuple[Any, ...], Dict[str, Any]]]\n\n    def callLater(self, s: float, f: Callable, *a: Any, **k: Any):\n        # XXX TODO: return canceller\n        assert f is not None\n        tup: Tuple[float, Callable, Tuple[Any, ...], Dict[str, Any]] = (self.time + s, f, a, k)\n        self.calls.append(tup)\n        self.calls.sort()\n        return FakeDelayedCall(self, tup)\n", "code": "def callLater(self, s: float, f: Callable, *a: Any, **k: Any):\n    # XXX TODO: return canceller\n    assert f is not None\n    tup: Tuple[float, Callable, Tuple[Any, ...], Dict[str, Any]] = (self.time + s, f, a, k)\n    self.calls.append(tup)\n    self.calls.sort()\n    return FakeDelayedCall(self, tup)\n    )\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "34f0edd369c11620c7408ddccf98e7676b611324"}
{"source_tokens": ["#NEWLINE#", "def test_linearsvc(", ")", ":", "#NEWLINE#", "#INDENT#", "clf", "=", "svm", ".", "LinearSVC", "(", "random_state", "=", "0", ")", ".", "fit", "(", "X", ",", "Y", ")", "#NEWLINE#", "assert_true", "(", "clf", ".", "fit_intercept", ")", "#NEWLINE#", "assert_array_equal", "(", "clf", ".", "predict", "(", "T", ")", ",", "true_result", ")", "#NEWLINE#", "assert_array_almost_equal", "(", "clf", ".", "intercept_", ",", "[", "0", "]", ",", "decimal", "=", "3", ")", "#NEWLINE#", "clf", "=", "svm", ".", "LinearSVC", "(", "penalty", "=", "'l1'", ",", "loss", "=", "'squared_hinge'", ",", "dual", "=", "False", ",", "random_state", "=", "0", ")", ".", "fit", "(", "X", ",", "Y", ")", "#NEWLINE#", "assert_array_equal", "(", "clf", ".", "predict", "(", "T", ")", ",", "true_result", ")", "#NEWLINE#", "clf", "=", "svm", ".", "LinearSVC", "(", "penalty", "=", "'l2'", ",", "dual", "=", "True", ",", "random_state", "=", "0", ")", ".", "fit", "(", "X", ",", "Y", ")", "#NEWLINE#", "assert_array_equal", "(", "clf", ".", "predict", "(", "T", ")", ",", "true_result", ")", "#NEWLINE#", "clf", "=", "svm", ".", "LinearSVC", "(", "penalty", "=", "'l2'", ",", "loss", "=", "'hinge'", ",", "dual", "=", "True", ",", "random_state", "=", "0", ")", "#NEWLINE#", "clf", ".", "fit", "(", "X", ",", "Y", ")", "#NEWLINE#", "assert_array_equal", "(", "clf", ".", "predict", "(", "T", ")", ",", "true_result", ")", "#NEWLINE#", "dec", "=", "clf", ".", "decision_function", "(", "T", ")", "#NEWLINE#", "res", "=", "(", "(", "dec", ">", "0", ")", ".", "astype", "(", "np", ".", "int", ")", "+", "1", ")", "#NEWLINE#", "assert_array_equal", "(", "res", ",", "true_result", ")"], "edges": [[5, 20, 7, "enum_FIELD"], [23, 25, 7, "enum_FIELD"], [30, 39, 7, "enum_FIELD"], [42, 48, 7, "enum_FIELD"], [57, 84, 7, "enum_FIELD"], [87, 96, 7, "enum_FIELD"], [99, 122, 7, "enum_FIELD"], [125, 134, 7, "enum_FIELD"], [137, 151, 7, "enum_FIELD"], [160, 166, 7, "enum_FIELD"], [169, 178, 7, "enum_FIELD"], [181, 187, 7, "enum_FIELD"], [190, 206, 7, "enum_FIELD"], [209, 213, 7, "enum_FIELD"], [20, 16, 7, "enum_FIELD"], [25, 24, 7, "enum_FIELD"], [39, 31, 7, "enum_FIELD"], [48, 43, 7, "enum_FIELD"], [84, 80, 7, "enum_FIELD"], [96, 88, 7, "enum_FIELD"], [122, 118, 7, "enum_FIELD"], [134, 126, 7, "enum_FIELD"], [151, 141, 7, "enum_FIELD"], [166, 162, 7, "enum_FIELD"], [178, 170, 7, "enum_FIELD"], [187, 185, 7, "enum_FIELD"], [206, 201, 7, "enum_FIELD"], [206, 207, 7, "enum_FIELD"], [213, 210, 7, "enum_FIELD"], [16, 11, 7, "enum_FIELD"], [27, 26, 7, "enum_FIELD"], [36, 34, 7, "enum_FIELD"], [46, 45, 7, "enum_FIELD"], [53, 55, 7, "enum_FIELD"], [80, 71, 7, "enum_FIELD"], [93, 91, 7, "enum_FIELD"], [118, 109, 7, "enum_FIELD"], [131, 129, 7, "enum_FIELD"], [141, 140, 7, "enum_FIELD"], [144, 146, 7, "enum_FIELD"], [148, 150, 7, "enum_FIELD"], [152, 154, 7, "enum_FIELD"], [156, 158, 7, "enum_FIELD"], [162, 161, 7, "enum_FIELD"], [175, 173, 7, "enum_FIELD"], [185, 184, 7, "enum_FIELD"], [201, 199, 7, "enum_FIELD"], [11, 9, 7, "enum_FIELD"], [34, 33, 7, "enum_FIELD"], [71, 61, 7, "enum_FIELD"], [91, 90, 7, "enum_FIELD"], [109, 103, 7, "enum_FIELD"], [129, 128, 7, "enum_FIELD"], [173, 172, 7, "enum_FIELD"], [199, 196, 7, "enum_FIELD"], [203, 202, 7, "enum_FIELD"], [9, 8, 7, "enum_FIELD"], [12, 14, 7, "enum_FIELD"], [61, 60, 7, "enum_FIELD"], [64, 66, 7, "enum_FIELD"], [68, 70, 7, "enum_FIELD"], [72, 74, 7, "enum_FIELD"], [76, 78, 7, "enum_FIELD"], [103, 102, 7, "enum_FIELD"], [106, 108, 7, "enum_FIELD"], [110, 112, 7, "enum_FIELD"], [114, 116, 7, "enum_FIELD"], [196, 195, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [26, 6, 10, "enum_LAST_LEXICAL_USE"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [33, 26, 10, "enum_LAST_LEXICAL_USE"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [45, 33, 10, "enum_LAST_LEXICAL_USE"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [58, 45, 10, "enum_LAST_LEXICAL_USE"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [60, 8, 10, "enum_LAST_LEXICAL_USE"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [83, 19, 10, "enum_LAST_LEXICAL_USE"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [85, 21, 10, "enum_LAST_LEXICAL_USE"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [88, 31, 10, "enum_LAST_LEXICAL_USE"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [90, 58, 10, "enum_LAST_LEXICAL_USE"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [94, 37, 10, "enum_LAST_LEXICAL_USE"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [97, 40, 10, "enum_LAST_LEXICAL_USE"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [100, 90, 10, "enum_LAST_LEXICAL_USE"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [102, 60, 10, "enum_LAST_LEXICAL_USE"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [121, 83, 10, "enum_LAST_LEXICAL_USE"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [123, 85, 10, "enum_LAST_LEXICAL_USE"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [126, 88, 10, "enum_LAST_LEXICAL_USE"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [128, 100, 10, "enum_LAST_LEXICAL_USE"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [132, 94, 10, "enum_LAST_LEXICAL_USE"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [135, 97, 10, "enum_LAST_LEXICAL_USE"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [138, 128, 10, "enum_LAST_LEXICAL_USE"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [140, 102, 10, "enum_LAST_LEXICAL_USE"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [161, 138, 10, "enum_LAST_LEXICAL_USE"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [165, 121, 10, "enum_LAST_LEXICAL_USE"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [167, 123, 10, "enum_LAST_LEXICAL_USE"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [170, 126, 10, "enum_LAST_LEXICAL_USE"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [172, 161, 10, "enum_LAST_LEXICAL_USE"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [176, 132, 10, "enum_LAST_LEXICAL_USE"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 178, 9, "enum_NEXT_SYNTAX"], [179, 135, 10, "enum_LAST_LEXICAL_USE"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [184, 172, 10, "enum_LAST_LEXICAL_USE"], [183, 184, 9, "enum_NEXT_SYNTAX"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [188, 176, 10, "enum_LAST_LEXICAL_USE"], [187, 188, 9, "enum_NEXT_SYNTAX"], [188, 189, 9, "enum_NEXT_SYNTAX"], [189, 190, 9, "enum_NEXT_SYNTAX"], [190, 191, 9, "enum_NEXT_SYNTAX"], [191, 192, 9, "enum_NEXT_SYNTAX"], [192, 193, 9, "enum_NEXT_SYNTAX"], [193, 194, 9, "enum_NEXT_SYNTAX"], [195, 182, 10, "enum_LAST_LEXICAL_USE"], [194, 195, 9, "enum_NEXT_SYNTAX"], [195, 196, 9, "enum_NEXT_SYNTAX"], [196, 197, 9, "enum_NEXT_SYNTAX"], [197, 198, 9, "enum_NEXT_SYNTAX"], [198, 199, 9, "enum_NEXT_SYNTAX"], [199, 200, 9, "enum_NEXT_SYNTAX"], [200, 201, 9, "enum_NEXT_SYNTAX"], [201, 202, 9, "enum_NEXT_SYNTAX"], [202, 203, 9, "enum_NEXT_SYNTAX"], [203, 204, 9, "enum_NEXT_SYNTAX"], [204, 205, 9, "enum_NEXT_SYNTAX"], [205, 206, 9, "enum_NEXT_SYNTAX"], [206, 207, 9, "enum_NEXT_SYNTAX"], [207, 208, 9, "enum_NEXT_SYNTAX"], [208, 209, 9, "enum_NEXT_SYNTAX"], [210, 170, 10, "enum_LAST_LEXICAL_USE"], [209, 210, 9, "enum_NEXT_SYNTAX"], [210, 211, 9, "enum_NEXT_SYNTAX"], [212, 191, 10, "enum_LAST_LEXICAL_USE"], [211, 212, 9, "enum_NEXT_SYNTAX"], [212, 213, 9, "enum_NEXT_SYNTAX"], [214, 179, 10, "enum_LAST_LEXICAL_USE"], [213, 214, 9, "enum_NEXT_SYNTAX"], [214, 215, 9, "enum_NEXT_SYNTAX"], [5, 23, 1, "enum_CFG_NEXT"], [23, 30, 1, "enum_CFG_NEXT"], [30, 42, 1, "enum_CFG_NEXT"], [42, 57, 1, "enum_CFG_NEXT"], [57, 87, 1, "enum_CFG_NEXT"], [87, 99, 1, "enum_CFG_NEXT"], [99, 125, 1, "enum_CFG_NEXT"], [125, 137, 1, "enum_CFG_NEXT"], [137, 160, 1, "enum_CFG_NEXT"], [160, 169, 1, "enum_CFG_NEXT"], [169, 181, 1, "enum_CFG_NEXT"], [181, 190, 1, "enum_CFG_NEXT"], [190, 209, 1, "enum_CFG_NEXT"], [26, 6, 3, "enum_LAST_WRITE"], [33, 26, 2, "enum_LAST_READ"], [33, 6, 3, "enum_LAST_WRITE"], [45, 33, 2, "enum_LAST_READ"], [45, 6, 3, "enum_LAST_WRITE"], [60, 8, 2, "enum_LAST_READ"], [83, 19, 2, "enum_LAST_READ"], [85, 21, 2, "enum_LAST_READ"], [58, 45, 2, "enum_LAST_READ"], [58, 6, 3, "enum_LAST_WRITE"], [88, 31, 2, "enum_LAST_READ"], [90, 45, 2, "enum_LAST_READ"], [90, 58, 3, "enum_LAST_WRITE"], [94, 37, 2, "enum_LAST_READ"], [97, 40, 2, "enum_LAST_READ"], [102, 60, 2, "enum_LAST_READ"], [121, 83, 2, "enum_LAST_READ"], [123, 85, 2, "enum_LAST_READ"], [100, 90, 2, "enum_LAST_READ"], [100, 58, 3, "enum_LAST_WRITE"], [126, 88, 2, "enum_LAST_READ"], [128, 90, 2, "enum_LAST_READ"], [128, 100, 3, "enum_LAST_WRITE"], [132, 94, 2, "enum_LAST_READ"], [135, 97, 2, "enum_LAST_READ"], [140, 102, 2, "enum_LAST_READ"], [138, 128, 2, "enum_LAST_READ"], [138, 100, 3, "enum_LAST_WRITE"], [161, 128, 2, "enum_LAST_READ"], [161, 138, 3, "enum_LAST_WRITE"], [165, 121, 2, "enum_LAST_READ"], [167, 123, 2, "enum_LAST_READ"], [170, 126, 2, "enum_LAST_READ"], [172, 161, 2, "enum_LAST_READ"], [172, 138, 3, "enum_LAST_WRITE"], [176, 132, 2, "enum_LAST_READ"], [179, 135, 2, "enum_LAST_READ"], [184, 172, 2, "enum_LAST_READ"], [184, 138, 3, "enum_LAST_WRITE"], [188, 176, 2, "enum_LAST_READ"], [195, 182, 3, "enum_LAST_WRITE"], [210, 170, 2, "enum_LAST_READ"], [212, 191, 3, "enum_LAST_WRITE"], [214, 179, 2, "enum_LAST_READ"], [6, 19, 4, "enum_COMPUTED_FROM"], [6, 21, 4, "enum_COMPUTED_FROM"], [6, 8, 4, "enum_COMPUTED_FROM"], [58, 83, 4, "enum_COMPUTED_FROM"], [58, 85, 4, "enum_COMPUTED_FROM"], [58, 60, 4, "enum_COMPUTED_FROM"], [100, 121, 4, "enum_COMPUTED_FROM"], [100, 123, 4, "enum_COMPUTED_FROM"], [100, 102, 4, "enum_COMPUTED_FROM"], [138, 140, 4, "enum_COMPUTED_FROM"], [182, 188, 4, "enum_COMPUTED_FROM"], [182, 184, 4, "enum_COMPUTED_FROM"], [191, 202, 4, "enum_COMPUTED_FROM"], [191, 195, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "scikit-learn", "repo": "scikit-learn", "path": "sklearn/svm/tests/test_svm.py", "id": 48494, "has_bug": false, "code_full": "import numpy as np\nfrom numpy.testing import assert_array_almost_equal, assert_array_equal\nfrom sklearn import svm\n\n\ndef assert_true(cond: bool):\n    pass\n\n\nX: np.ndarray = np.zeros((1, 1))\nY: np.ndarray = np.zeros((1,))\nT: np.ndarray = np.zeros((1, 1))\nresult: np.ndarray = np.zeros((1,))\ntrue_result: np.ndarray = np.zeros((1,))\n\n\ndef test_linearsvc():\n    # Test basic routines using LinearSVC\n    clf: svm.LinearSVC = svm.LinearSVC(random_state=0).fit(X, Y)\n\n    # by default should have intercept\n    assert_true(clf.fit_intercept)\n\n    assert_array_equal(clf.predict(T), true_result)\n    assert_array_almost_equal(clf.intercept_, [0], decimal=3)\n\n    # the same with l1 penalty\n    clf = svm.LinearSVC(penalty='l1', loss='squared_hinge', dual=False,\n                        random_state=0).fit(X, Y)\n    assert_array_equal(clf.predict(T), true_result)\n\n    # l2 penalty with dual formulation\n    clf = svm.LinearSVC(penalty='l2', dual=True, random_state=0).fit(X, Y)\n    assert_array_equal(clf.predict(T), true_result)\n\n    # l2 penalty, l1 loss\n    clf = svm.LinearSVC(penalty='l2', loss='hinge', dual=True, random_state=0)\n    clf.fit(X, Y)\n    assert_array_equal(clf.predict(T), true_result)\n\n    # test also decision function\n    dec = clf.decision_function(T)\n    res = (dec > 0).astype(np.int) + 1\n    assert_array_equal(res, true_result)\n", "code": "def test_linearsvc():\n    # Test basic routines using LinearSVC\n    clf: svm.LinearSVC = svm.LinearSVC(random_state=0).fit(X, Y)\n\n    # by default should have intercept\n    assert_true(clf.fit_intercept)\n\n    assert_array_equal(clf.predict(T), true_result)\n    assert_array_almost_equal(clf.intercept_, [0], decimal=3)\n\n    # the same with l1 penalty\n    clf = svm.LinearSVC(penalty='l1', loss='squared_hinge', dual=False,\n                        random_state=0).fit(X, Y)\n    assert_array_equal(clf.predict(T), true_result)\n\n    # l2 penalty with dual formulation\n    clf = svm.LinearSVC(penalty='l2', dual=True, random_state=0).fit(X, Y)\n    assert_array_equal(clf.predict(T), true_result)\n\n    # l2 penalty, l1 loss\n    clf = svm.LinearSVC(penalty='l2', loss='hinge', dual=True, random_state=0)\n    clf.fit(X, Y)\n    assert_array_equal(clf.predict(T), true_result)\n\n    # test also decision function\n    dec = clf.decision_function(T)\n    res = (dec > 0).astype(np.int) + 1\n    assert_array_equal(res, true_result)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "attr-defined,other", "hash": "e2adbb7e037de74044db002eff5898f5e11a5507"}
{"source_tokens": ["#NEWLINE#", "@", "mock", ".", "patch", "(", "'nailgun.task.task.rpc.cast'", ")", "#NEWLINE#", "def test_custom_conf_passed_to_execute(", "self", ",", "mcast", ")", ":", "#NEWLINE#", "#INDENT#", "custom_config", "=", "{", "'test'", ":", "'config'", "}", "#NEWLINE#", "self", ".", "app", ".", "put", "(", "reverse", "(", "'LogPackageHandler'", ")", ",", "jsonutils", ".", "dumps", "(", "custom_config", ")", ",", "headers", "=", "self", ".", "default_headers", ")", "#NEWLINE#", "params", "=", "mcast", ".", "call_args_list", "[", "0", "]", "[", "0", "]", "#NEWLINE#", "self", ".", "assertEqual", "(", "params", "[", "1", "]", "[", "'args'", "]", "[", "'settings'", "]", ",", "custom_config", ")"], "edges": [[1, 11, 7, "enum_FIELD"], [16, 21, 7, "enum_FIELD"], [24, 35, 7, "enum_FIELD"], [49, 58, 7, "enum_FIELD"], [61, 76, 7, "enum_FIELD"], [5, 3, 7, "enum_FIELD"], [35, 28, 7, "enum_FIELD"], [58, 55, 7, "enum_FIELD"], [58, 59, 7, "enum_FIELD"], [76, 63, 7, "enum_FIELD"], [3, 2, 7, "enum_FIELD"], [28, 26, 7, "enum_FIELD"], [32, 31, 7, "enum_FIELD"], [39, 37, 7, "enum_FIELD"], [43, 46, 7, "enum_FIELD"], [55, 53, 7, "enum_FIELD"], [55, 56, 7, "enum_FIELD"], [63, 62, 7, "enum_FIELD"], [73, 70, 7, "enum_FIELD"], [73, 74, 7, "enum_FIELD"], [26, 25, 7, "enum_FIELD"], [37, 36, 7, "enum_FIELD"], [46, 45, 7, "enum_FIELD"], [53, 52, 7, "enum_FIELD"], [70, 67, 7, "enum_FIELD"], [70, 71, 7, "enum_FIELD"], [67, 66, 7, "enum_FIELD"], [67, 68, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [25, 10, 10, "enum_LAST_LEXICAL_USE"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [40, 17, 10, "enum_LAST_LEXICAL_USE"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [45, 25, 10, "enum_LAST_LEXICAL_USE"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [52, 12, 10, "enum_LAST_LEXICAL_USE"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [62, 45, 10, "enum_LAST_LEXICAL_USE"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [66, 50, 10, "enum_LAST_LEXICAL_USE"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [77, 40, 10, "enum_LAST_LEXICAL_USE"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [5, 1, 1, "enum_CFG_NEXT"], [11, 16, 1, "enum_CFG_NEXT"], [16, 24, 1, "enum_CFG_NEXT"], [24, 49, 1, "enum_CFG_NEXT"], [49, 61, 1, "enum_CFG_NEXT"], [25, 10, 3, "enum_LAST_WRITE"], [40, 17, 3, "enum_LAST_WRITE"], [45, 25, 2, "enum_LAST_READ"], [45, 10, 3, "enum_LAST_WRITE"], [52, 12, 3, "enum_LAST_WRITE"], [62, 45, 2, "enum_LAST_READ"], [62, 10, 3, "enum_LAST_WRITE"], [66, 50, 3, "enum_LAST_WRITE"], [77, 40, 2, "enum_LAST_READ"], [77, 17, 3, "enum_LAST_WRITE"], [50, 52, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "openstack", "repo": "fuel-web", "path": "nailgun/nailgun/test/unit/test_logs_handlers.py", "id": 35492, "has_bug": false, "code_full": "import json\nimport unittest\nfrom typing import Any, Dict\nfrom unittest.mock import MagicMock\n\nfrom django.urls import reverse\n\n\nclass App:\n    def put(self, url: str, data: str, headers: Dict[str, str]) -> Any:\n        pass\n\n\njsonutils = json\n\n\nclass Class(unittest.TestCase):\n    default_headers: Dict[str, str]\n    app: App\n\n    def test_custom_conf_passed_to_execute(self, mcast: MagicMock):\n        custom_config: Dict[str, str] = {'test': 'config'}\n\n        self.app.put(\n            reverse('LogPackageHandler'), jsonutils.dumps(custom_config),\n            headers=self.default_headers\n        )\n\n        params: Any = mcast.call_args_list[0][0]\n        self.assertEqual(params[1]['args']['settings'], custom_config)\n", "code": "def test_custom_conf_passed_to_execute(self, mcast: MagicMock):\n    custom_config: Dict[str, str] = {'test': 'config'}\n\n    self.app.put(\n        reverse('LogPackageHandler'), jsonutils.dumps(custom_config),\n        headers=self.default_headers\n    )\n\n    params: Any = mcast.call_args_list[0][0]\n    self.assertEqual(params[1]['args']['settings'], custom_config)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "f36a443837c47dea92296a8a687848ce0e43fff9"}
{"source_tokens": ["#NEWLINE#", "def check_forward(", "self", ",", "x_data", ",", "t_data", ")", ":", "#NEWLINE#", "#INDENT#", "x", "=", "chainer", ".", "Variable", "(", "x_data", ")", "#NEWLINE#", "t", "=", "chainer", ".", "Variable", "(", "t_data", ")", "#NEWLINE#", "y", "=", "functions", ".", "select_item", "(", "x", ",", "t", ")", "#NEWLINE#", "y_exp", "=", "cuda", ".", "to_cpu", "(", "x_data", ")", "[", "(", "range", "(", "t_data", ".", "size", ")", ",", "cuda", ".", "to_cpu", "(", "t_data", ")", ")", "]", "#NEWLINE#", "numpy", ".", "testing", ".", "assert_equal", "(", "cuda", ".", "to_cpu", "(", "y", ".", "data", ")", ",", "y_exp", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [10, 16, 7, "enum_FIELD"], [19, 25, 7, "enum_FIELD"], [28, 36, 7, "enum_FIELD"], [39, 48, 7, "enum_FIELD"], [65, 80, 7, "enum_FIELD"], [16, 14, 7, "enum_FIELD"], [25, 23, 7, "enum_FIELD"], [36, 32, 7, "enum_FIELD"], [48, 45, 7, "enum_FIELD"], [48, 56, 7, "enum_FIELD"], [80, 69, 7, "enum_FIELD"], [14, 13, 7, "enum_FIELD"], [23, 22, 7, "enum_FIELD"], [32, 31, 7, "enum_FIELD"], [45, 43, 7, "enum_FIELD"], [69, 67, 7, "enum_FIELD"], [75, 73, 7, "enum_FIELD"], [43, 42, 7, "enum_FIELD"], [51, 50, 7, "enum_FIELD"], [60, 58, 7, "enum_FIELD"], [67, 66, 7, "enum_FIELD"], [73, 72, 7, "enum_FIELD"], [77, 76, 7, "enum_FIELD"], [53, 52, 7, "enum_FIELD"], [58, 57, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [17, 4, 10, "enum_LAST_LEXICAL_USE"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [22, 13, 10, "enum_LAST_LEXICAL_USE"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [26, 6, 10, "enum_LAST_LEXICAL_USE"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [35, 11, 10, "enum_LAST_LEXICAL_USE"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [37, 20, 10, "enum_LAST_LEXICAL_USE"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [46, 17, 10, "enum_LAST_LEXICAL_USE"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [52, 26, 10, "enum_LAST_LEXICAL_USE"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [57, 42, 10, "enum_LAST_LEXICAL_USE"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [61, 52, 10, "enum_LAST_LEXICAL_USE"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [72, 57, 10, "enum_LAST_LEXICAL_USE"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [76, 29, 10, "enum_LAST_LEXICAL_USE"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [81, 40, 10, "enum_LAST_LEXICAL_USE"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [3, 10, 1, "enum_CFG_NEXT"], [10, 19, 1, "enum_CFG_NEXT"], [19, 28, 1, "enum_CFG_NEXT"], [28, 39, 1, "enum_CFG_NEXT"], [39, 65, 1, "enum_CFG_NEXT"], [17, 4, 3, "enum_LAST_WRITE"], [22, 13, 2, "enum_LAST_READ"], [26, 6, 3, "enum_LAST_WRITE"], [35, 11, 3, "enum_LAST_WRITE"], [37, 20, 3, "enum_LAST_WRITE"], [46, 17, 2, "enum_LAST_READ"], [46, 4, 3, "enum_LAST_WRITE"], [52, 26, 2, "enum_LAST_READ"], [52, 6, 3, "enum_LAST_WRITE"], [57, 42, 2, "enum_LAST_READ"], [61, 52, 2, "enum_LAST_READ"], [61, 6, 3, "enum_LAST_WRITE"], [72, 57, 2, "enum_LAST_READ"], [76, 29, 3, "enum_LAST_WRITE"], [81, 40, 3, "enum_LAST_WRITE"], [11, 17, 4, "enum_COMPUTED_FROM"], [11, 13, 4, "enum_COMPUTED_FROM"], [20, 26, 4, "enum_COMPUTED_FROM"], [20, 22, 4, "enum_COMPUTED_FROM"], [29, 35, 4, "enum_COMPUTED_FROM"], [29, 37, 4, "enum_COMPUTED_FROM"], [29, 31, 4, "enum_COMPUTED_FROM"], [40, 46, 4, "enum_COMPUTED_FROM"], [40, 42, 4, "enum_COMPUTED_FROM"], [40, 50, 4, "enum_COMPUTED_FROM"], [40, 61, 4, "enum_COMPUTED_FROM"], [40, 52, 4, "enum_COMPUTED_FROM"], [40, 57, 4, "enum_COMPUTED_FROM"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "pfnet", "repo": "chainer", "path": "tests/chainer_tests/functions_tests/array_tests/test_select_item.py", "id": 37947, "has_bug": false, "code_full": "import unittest\nfrom typing import Any\n\nimport numpy as np\nimport numpy.testing\n\n\nclass chainer:\n    class Variable:\n        data: np.ndarray\n\n        def __init__(self, data: np.ndarray):\n            pass\n\n\nclass functions:\n    @staticmethod\n    def select_item(x: chainer.Variable, t: chainer.Variable) -> chainer.Variable:\n        return chainer.Variable(np.zeros(1))\n\n\nclass cuda:\n    @staticmethod\n    def to_cpu(x: np.ndarray) -> np.ndarray:\n        return x\n\n\nclass Class(unittest.TestCase):\n    dtype: Any\n\n    def check_forward(self, x_data: np.ndarray, t_data: np.ndarray):\n        x: chainer.Variable = chainer.Variable(x_data)\n        t: chainer.Variable = chainer.Variable(t_data)\n        y: chainer.Variable = functions.select_item(x, t)\n        y_exp: np.ndarray = cuda.to_cpu(x_data)[range(t_data.size), cuda.to_cpu(t_data)]\n\n        self.assertEqual(y.data.dtype, self.dtype)\n        numpy.testing.assert_equal(cuda.to_cpu(y.data), y_exp)\n", "code": "def check_forward(self, x_data: np.ndarray, t_data: np.ndarray):\n    x: chainer.Variable = chainer.Variable(x_data)\n    t: chainer.Variable = chainer.Variable(t_data)\n    y: chainer.Variable = functions.select_item(x, t)\n    y_exp: np.ndarray = cuda.to_cpu(x_data)[range(t_data.size), cuda.to_cpu(t_data)]\n\n    self.assertEqual(y.data.dtype, self.dtype)\n    numpy.testing.assert_equal(cuda.to_cpu(y.data), y_exp)\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "b151873e5cd20d911969cdadbc83be2b8ea828ca"}
{"source_tokens": ["#NEWLINE#", "def assertNotRaises(", "self", ",", "exception", ",", "method", ",", "*", "args", ",", "**kwargs", ")", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "method", "(", "*", "args", ",", "**", "kwargs", ")", "#NEWLINE#", "#UNINDENT#", "except", "exception", ":", "#NEWLINE#", "#INDENT#", "self", ".", "fail", "(", "'Exception \"{0}\" raised.'", ".", "format", "(", "exception", ")", ")"], "edges": [[1, 7, 7, "enum_FIELD"], [7, 9, 7, "enum_FIELD"], [19, 24, 7, "enum_FIELD"], [30, 31, 7, "enum_FIELD"], [24, 20, 7, "enum_FIELD"], [34, 38, 7, "enum_FIELD"], [22, 23, 7, "enum_FIELD"], [25, 26, 7, "enum_FIELD"], [38, 36, 7, "enum_FIELD"], [36, 35, 7, "enum_FIELD"], [42, 40, 7, "enum_FIELD"], [40, 39, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 19, 9, "enum_NEXT_SYNTAX"], [20, 6, 10, "enum_LAST_LEXICAL_USE"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [23, 9, 10, "enum_LAST_LEXICAL_USE"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 30, 9, "enum_NEXT_SYNTAX"], [31, 4, 10, "enum_LAST_LEXICAL_USE"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 34, 9, "enum_NEXT_SYNTAX"], [35, 2, 10, "enum_LAST_LEXICAL_USE"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [43, 31, 10, "enum_LAST_LEXICAL_USE"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [7, 19, 1, "enum_CFG_NEXT"], [19, 31, 1, "enum_CFG_NEXT"], [31, 34, 1, "enum_CFG_NEXT"], [20, 6, 3, "enum_LAST_WRITE"], [23, 9, 3, "enum_LAST_WRITE"], [31, 4, 3, "enum_LAST_WRITE"], [35, 2, 3, "enum_LAST_WRITE"], [43, 31, 2, "enum_LAST_READ"], [43, 4, 3, "enum_LAST_WRITE"]], "error_location": 0, "repair_targets": [], "repair_candidates": [0], "op": "NO_BUG", "user": "openstack", "repo": "fuel-web", "path": "nailgun/nailgun/test/base.py", "id": 34530, "has_bug": false, "code_full": "import unittest\nfrom typing import Any, Callable, Type\n\n\nclass Class(unittest.TestCase):\n    def assertNotRaises(self, exception: Type[Exception], method: Callable[..., Any], *args: Any, **kwargs: Any):\n        try:\n            method(*args, **kwargs)\n        except exception:\n            self.fail('Exception \"{0}\" raised.'.format(exception))\n", "code": "def assertNotRaises(self, exception: Type[Exception], method: Callable[..., Any], *args: Any, **kwargs: Any):\n    try:\n        method(*args, **kwargs)\n    except exception:\n        self.fail('Exception \"{0}\" raised.'.format(exception))\n", "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": "", "hash": "f36a443837c47dea92296a8a687848ce0e43fff9"}
