{"source_tokens": ["#NEWLINE#", "def load_options(", "self", ",", "chunk", ")", ":", "#NEWLINE#", "#INDENT#", "for", "(", "i", ",", "name", ")", "in", "enumerate", "(", "self", ".", "options", ".", "keys", "(", ")", ")", ":", "#NEWLINE#", "#INDENT#", "value", "=", "chunk", ".", "chdt", "[", "i", "]", "#NEWLINE#", "setattr", "(", "self", ",", "name", ",", "i", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [15, 12, 7, "enum_FIELD"], [15, 17, 7, "enum_FIELD"], [17, 16, 7, "enum_FIELD"], [28, 34, 7, "enum_FIELD"], [37, 41, 7, "enum_FIELD"], [23, 21, 7, "enum_FIELD"], [34, 32, 7, "enum_FIELD"], [34, 35, 7, "enum_FIELD"], [41, 38, 7, "enum_FIELD"], [21, 19, 7, "enum_FIELD"], [32, 31, 7, "enum_FIELD"], [19, 18, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [18, 2, 10, "enum_LAST_LEXICAL_USE"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [31, 4, 10, "enum_LAST_LEXICAL_USE"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [35, 11, 10, "enum_LAST_LEXICAL_USE"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [40, 18, 10, "enum_LAST_LEXICAL_USE"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [42, 13, 10, "enum_LAST_LEXICAL_USE"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [44, 35, 10, "enum_LAST_LEXICAL_USE"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [3, 17, 1, "enum_CFG_NEXT"], [17, 12, 1, "enum_CFG_NEXT"], [12, 28, 1, "enum_CFG_NEXT"], [28, 37, 1, "enum_CFG_NEXT"], [37, 12, 1, "enum_CFG_NEXT"], [18, 2, 3, "enum_LAST_WRITE"], [11, 44, 2, "enum_LAST_READ"], [11, 11, 3, "enum_LAST_WRITE"], [13, 42, 2, "enum_LAST_READ"], [13, 13, 3, "enum_LAST_WRITE"], [31, 31, 2, "enum_LAST_READ"], [31, 4, 3, "enum_LAST_WRITE"], [35, 44, 2, "enum_LAST_READ"], [35, 11, 3, "enum_LAST_WRITE"], [29, 29, 3, "enum_LAST_WRITE"], [38, 38, 2, "enum_LAST_READ"], [40, 18, 2, "enum_LAST_READ"], [40, 40, 2, "enum_LAST_READ"], [40, 2, 3, "enum_LAST_WRITE"], [42, 42, 2, "enum_LAST_READ"], [42, 13, 3, "enum_LAST_WRITE"], [44, 35, 2, "enum_LAST_READ"], [44, 11, 3, "enum_LAST_WRITE"], [29, 35, 4, "enum_COMPUTED_FROM"], [29, 31, 4, "enum_COMPUTED_FROM"]], "error_location": 44, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/metrasynth/radiant-voices.git", "old_path": "rv/modules/module.py", "hash": "b472a30772349e0f274629a4a516ded96cd80567", "code": "def load_options(self, chunk: Chunk):\n    for i, name in enumerate(self.options.keys()):\n        value = chunk.chdt[i]\n        setattr(self, name, i)\n", "rewrite": "ReplaceText(target='value' @(124,32)->(124,33))", "error_line": 3, "has_bug": true, "code_full": "from collections import OrderedDict\nfrom typing import Optional\n\n\nclass Chunk(object):\n    \"\"\"A chunk of custom data related to a module.\"\"\"\n\n    __slots__ = [\"chnm\", \"chdt\", \"chff\", \"chfr\"]\n\n    def __init__(self):\n        self.chnm = self.chdt = self.chff = self.chfr = []\n\n\nclass Module:\n    name: Optional[str]\n    options = OrderedDict()\n\n    def load_options(self, chunk: Chunk):\n        for i, name in enumerate(self.options.keys()):\n            value = chunk.chdt[i]\n            setattr(self, name, i)\n", "error_location_char": [147, 148], "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": ""}
{"source_tokens": ["#NEWLINE#", "def createEmptyImage(", "cls", ",", "fnOut", ",", "xDim", "=", "1", ",", "yDim", "=", "1", ",", "zDim", "=", "1", ",", "nDim", "=", "1", ",", "dataType", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "dt", "=", "(", "dataType", "or", "cls", ".", "DT_FLOAT", ")", "#NEWLINE#", "xmippLib", ".", "createEmptyFile", "(", "fnOut", ",", "xDim", ",", "yDim", ",", "zDim", ",", "nDim", ",", "dataType", ")"], "edges": [[1, 13, 7, "enum_FIELD"], [28, 33, 7, "enum_FIELD"], [38, 48, 7, "enum_FIELD"], [48, 40, 7, "enum_FIELD"], [35, 34, 7, "enum_FIELD"], [40, 39, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [32, 22, 10, "enum_LAST_LEXICAL_USE"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [34, 2, 10, "enum_LAST_LEXICAL_USE"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [43, 4, 10, "enum_LAST_LEXICAL_USE"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [45, 6, 10, "enum_LAST_LEXICAL_USE"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [47, 10, 10, "enum_LAST_LEXICAL_USE"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [49, 14, 10, "enum_LAST_LEXICAL_USE"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [51, 18, 10, "enum_LAST_LEXICAL_USE"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [53, 32, 10, "enum_LAST_LEXICAL_USE"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [8, 12, 1, "enum_CFG_NEXT"], [12, 16, 1, "enum_CFG_NEXT"], [16, 20, 1, "enum_CFG_NEXT"], [20, 24, 1, "enum_CFG_NEXT"], [24, 1, 1, "enum_CFG_NEXT"], [13, 28, 1, "enum_CFG_NEXT"], [28, 38, 1, "enum_CFG_NEXT"], [32, 22, 3, "enum_LAST_WRITE"], [34, 2, 3, "enum_LAST_WRITE"], [43, 4, 3, "enum_LAST_WRITE"], [45, 6, 3, "enum_LAST_WRITE"], [47, 10, 3, "enum_LAST_WRITE"], [49, 14, 3, "enum_LAST_WRITE"], [51, 18, 3, "enum_LAST_WRITE"], [53, 32, 2, "enum_LAST_READ"], [53, 22, 3, "enum_LAST_WRITE"], [29, 32, 4, "enum_COMPUTED_FROM"], [29, 34, 4, "enum_COMPUTED_FROM"]], "error_location": 53, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/scipion-em/scipion-pyworkflow.git", "old_path": "pyworkflow/em/convert/image_handler.py", "hash": "3be24fd9b6a88e9983b36276a227cabd26477c08", "code": "def createEmptyImage(cls: ImageHandler, fnOut, xDim=1, yDim=1, zDim=1, nDim=1,\n                     dataType: Optional[str]=None):\n    dt = dataType or cls.DT_FLOAT\n    xmippLib.createEmptyFile(fnOut, xDim, yDim, zDim, nDim, dataType)\n", "rewrite": "ReplaceText(target='dt' @(422,64)->(422,72))", "error_line": 3, "has_bug": true, "code_full": "from typing import Type, Optional\n\nclass xmippLib:\n    DT_FLOAT = \"float\"\n    @staticmethod\n    def createEmptyFile(fnOut: str, xDim: int, yDim: int, zDim: int, nDim: int, dt: str) -> None:\n        # Dummy implementation for type annotation purposes\n        pass\n\nclass ImageHandler(object):\n    DT_FLOAT = xmippLib.DT_FLOAT\n\n    def createEmptyImage(cls, fnOut: str, xDim=1, yDim=1, zDim=1, nDim=1,\n                        dataType: Optional[str]=None):\n        dt = dataType or cls.DT_FLOAT\n        xmippLib.createEmptyFile(fnOut, xDim, yDim, zDim, nDim, dataType)\n", "error_location_char": [225, 233], "type_checked_pytype": true, "type_checked_mypy": false, "type_error_label": "arg-type"}
{"source_tokens": ["#NEWLINE#", "def find_function(", "self", ",", "function", ")", ":", "#NEWLINE#", "#INDENT#", "'Find the given :py:class::`~taillight.slot.Slot` instance(s), given\\n    a function.\\n\\n    Since a function may be registered multiple times, this function\\n    returns a list of functions found.\\n\\n    If a slot with the given function is not found, then a\\n    :py:class::`~taillight.slot.SlotNotFoundError` is raised.\\n    '", "#NEWLINE#", "ret", "=", "[", "]", "#NEWLINE#", "with", "self", ".", "_slots_lock", ":", "#NEWLINE#", "#INDENT#", "for", "slot", "in", "self", ".", "slots", ":", "#NEWLINE#", "#INDENT#", "if", "(", "slot", ".", "function", "is", "function", ")", ":", "#NEWLINE#", "#INDENT#", "ret", ".", "append", "(", "function", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "if", "ret", ":", "#NEWLINE#", "#INDENT#", "return", "ret", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "raise", "SlotNotFoundError", "(", "'Slot not found: {}'", ".", "format", "(", "repr", "(", "function", ")", ")", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [8, 9, 7, "enum_FIELD"], [10, 13, 7, "enum_FIELD"], [55, 54, 7, "enum_FIELD"], [25, 24, 7, "enum_FIELD"], [25, 27, 7, "enum_FIELD"], [58, 59, 7, "enum_FIELD"], [66, 68, 7, "enum_FIELD"], [18, 17, 7, "enum_FIELD"], [27, 26, 7, "enum_FIELD"], [32, 37, 7, "enum_FIELD"], [68, 67, 7, "enum_FIELD"], [37, 35, 7, "enum_FIELD"], [42, 46, 7, "enum_FIELD"], [72, 70, 7, "enum_FIELD"], [35, 34, 7, "enum_FIELD"], [46, 44, 7, "enum_FIELD"], [70, 69, 7, "enum_FIELD"], [74, 73, 7, "enum_FIELD"], [44, 43, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 16, 9, "enum_NEXT_SYNTAX"], [17, 2, 10, "enum_LAST_LEXICAL_USE"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [26, 17, 10, "enum_LAST_LEXICAL_USE"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [34, 24, 10, "enum_LAST_LEXICAL_USE"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [38, 4, 10, "enum_LAST_LEXICAL_USE"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 42, 9, "enum_NEXT_SYNTAX"], [43, 11, 10, "enum_LAST_LEXICAL_USE"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [47, 38, 10, "enum_LAST_LEXICAL_USE"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 53, 9, "enum_NEXT_SYNTAX"], [54, 43, 10, "enum_LAST_LEXICAL_USE"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 58, 9, "enum_NEXT_SYNTAX"], [59, 54, 10, "enum_LAST_LEXICAL_USE"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [75, 47, 10, "enum_LAST_LEXICAL_USE"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [3, 8, 1, "enum_CFG_NEXT"], [8, 10, 1, "enum_CFG_NEXT"], [10, 54, 1, "enum_CFG_NEXT"], [54, 66, 1, "enum_CFG_NEXT"], [54, 58, 1, "enum_CFG_NEXT"], [54, 11, 3, "enum_LAST_WRITE"], [59, 54, 2, "enum_LAST_READ"], [59, 11, 3, "enum_LAST_WRITE"], [75, 4, 3, "enum_LAST_WRITE"]], "error_location": 47, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/Elizafox/taillight.git", "old_path": "taillight/signal.py", "hash": "731c28874dd7aa29f59a862e6b01f4ea8010978e", "code": "def find_function(self, function: Any) -> List[Any]:\n    \"\"\"Find the given :py:class::`~taillight.slot.Slot` instance(s), given\n    a function.\n\n    Since a function may be registered multiple times, this function\n    returns a list of functions found.\n\n    If a slot with the given function is not found, then a\n    :py:class::`~taillight.slot.SlotNotFoundError` is raised.\n    \"\"\"\n    ret: list[Any] = []\n    with self._slots_lock:\n        for slot in self.slots:\n            if slot.function is function:\n                ret.append(function)\n\n    if ret:\n        return ret\n    else:\n        raise SlotNotFoundError(\"Slot not found: {}\".format(\n            repr(function)))\n", "rewrite": "ReplaceText(target='slot' @(134,31)->(134,39))", "error_line": 14, "has_bug": true, "code_full": "from typing import Any, List\n\n\nclass SlotNotFoundError(Exception):\n    pass\n\n\ndef find_function(self, function: Any) -> List[Any]:\n    \"\"\"Find the given :py:class::`~taillight.slot.Slot` instance(s), given\n    a function.\n\n    Since a function may be registered multiple times, this function\n    returns a list of functions found.\n\n    If a slot with the given function is not found, then a\n    :py:class::`~taillight.slot.SlotNotFoundError` is raised.\n    \"\"\"\n    ret: list[Any] = []\n    with self._slots_lock:\n        for slot in self.slots:\n            if slot.function is function:\n                ret.append(function)\n\n    if ret:\n        return ret\n    else:\n        raise SlotNotFoundError(\"Slot not found: {}\".format(\n            repr(function)))\n", "error_location_char": [535, 543], "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": ""}
{"source_tokens": ["#NEWLINE#", "def post_deploy(", "self", ",", "services", ",", "globals", ")", ":", "#NEWLINE#", "#INDENT#", "domains", "=", "globals", ".", "get", "(", "'Domains'", ",", "{", "}", ")", "#NEWLINE#", "if", "(", "not", "domains", ")", ":", "#NEWLINE#", "#INDENT#", "return", "#NEWLINE#", "#UNINDENT#", "api_ip", "=", "self", ".", "host", ".", "discover", "(", "'strowger-api'", ")", "#NEWLINE#", "strowger", "=", "StrowgerClient", "(", "api_ip", ")", "#NEWLINE#", "for", "(", "domain", ",", "data", ")", "in", "domains", ".", "items", "(", ")", ":", "#NEWLINE#", "#INDENT#", "service_name", "=", "domain", ".", "get", "(", "'http'", ")", "#NEWLINE#", "if", "(", "not", "service_name", ")", ":", "#NEWLINE#", "#INDENT#", "continue", "#NEWLINE#", "#UNINDENT#", "strowger", ".", "set_http_route", "(", "domain", ",", "service_name", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [10, 18, 7, "enum_FIELD"], [23, 25, 7, "enum_FIELD"], [33, 41, 7, "enum_FIELD"], [44, 48, 7, "enum_FIELD"], [58, 55, 7, "enum_FIELD"], [58, 62, 7, "enum_FIELD"], [18, 14, 7, "enum_FIELD"], [25, 26, 7, "enum_FIELD"], [41, 39, 7, "enum_FIELD"], [48, 47, 7, "enum_FIELD"], [62, 60, 7, "enum_FIELD"], [66, 72, 7, "enum_FIELD"], [76, 78, 7, "enum_FIELD"], [86, 92, 7, "enum_FIELD"], [14, 13, 7, "enum_FIELD"], [39, 37, 7, "enum_FIELD"], [60, 59, 7, "enum_FIELD"], [72, 70, 7, "enum_FIELD"], [78, 79, 7, "enum_FIELD"], [92, 88, 7, "enum_FIELD"], [37, 36, 7, "enum_FIELD"], [70, 69, 7, "enum_FIELD"], [88, 87, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [13, 6, 10, "enum_LAST_LEXICAL_USE"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [26, 11, 10, "enum_LAST_LEXICAL_USE"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 31, 9, "enum_NEXT_SYNTAX"], [31, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [36, 2, 10, "enum_LAST_LEXICAL_USE"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [49, 34, 10, "enum_LAST_LEXICAL_USE"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [59, 26, 10, "enum_LAST_LEXICAL_USE"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [69, 54, 10, "enum_LAST_LEXICAL_USE"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [79, 67, 10, "enum_LAST_LEXICAL_USE"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 84, 9, "enum_NEXT_SYNTAX"], [84, 86, 9, "enum_NEXT_SYNTAX"], [87, 45, 10, "enum_LAST_LEXICAL_USE"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [91, 69, 10, "enum_LAST_LEXICAL_USE"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [93, 79, 10, "enum_LAST_LEXICAL_USE"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [3, 10, 1, "enum_CFG_NEXT"], [10, 25, 1, "enum_CFG_NEXT"], [25, 31, 1, "enum_CFG_NEXT"], [25, 33, 1, "enum_CFG_NEXT"], [33, 44, 1, "enum_CFG_NEXT"], [44, 62, 1, "enum_CFG_NEXT"], [62, 55, 1, "enum_CFG_NEXT"], [55, 66, 1, "enum_CFG_NEXT"], [66, 78, 1, "enum_CFG_NEXT"], [78, 55, 1, "enum_CFG_NEXT"], [78, 86, 1, "enum_CFG_NEXT"], [86, 55, 1, "enum_CFG_NEXT"], [13, 6, 3, "enum_LAST_WRITE"], [26, 11, 3, "enum_LAST_WRITE"], [36, 2, 3, "enum_LAST_WRITE"], [49, 34, 3, "enum_LAST_WRITE"], [59, 26, 2, "enum_LAST_READ"], [59, 11, 3, "enum_LAST_WRITE"], [54, 69, 2, "enum_LAST_READ"], [54, 91, 2, "enum_LAST_READ"], [54, 54, 3, "enum_LAST_WRITE"], [56, 56, 3, "enum_LAST_WRITE"], [69, 69, 2, "enum_LAST_READ"], [69, 91, 2, "enum_LAST_READ"], [69, 54, 3, "enum_LAST_WRITE"], [67, 79, 2, "enum_LAST_READ"], [67, 93, 2, "enum_LAST_READ"], [67, 67, 3, "enum_LAST_WRITE"], [79, 79, 2, "enum_LAST_READ"], [79, 93, 2, "enum_LAST_READ"], [79, 67, 3, "enum_LAST_WRITE"], [87, 87, 2, "enum_LAST_READ"], [87, 45, 3, "enum_LAST_WRITE"], [91, 69, 2, "enum_LAST_READ"], [91, 54, 3, "enum_LAST_WRITE"], [93, 79, 2, "enum_LAST_READ"], [93, 67, 3, "enum_LAST_WRITE"], [11, 13, 4, "enum_COMPUTED_FROM"], [34, 36, 4, "enum_COMPUTED_FROM"], [45, 47, 4, "enum_COMPUTED_FROM"], [45, 49, 4, "enum_COMPUTED_FROM"], [67, 69, 4, "enum_COMPUTED_FROM"]], "error_location": 69, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/miracle2k/docker-deploy.git", "old_path": "deploylib/plugins/domains.py", "hash": "f91f61ec18461b9f88802f2c01ed463565b66f19", "code": "def post_deploy(self, services: Any, globals: Dict[str, Any]):\n    domains: Optional[Dict[str, Dict]] = globals.get('Domains', {})\n    if not domains:\n        return\n\n    api_ip = self.host.discover('strowger-api')\n    strowger = StrowgerClient(api_ip)\n\n    for domain, data in domains.items():\n        service_name = domain.get('http')\n        if not service_name:\n            continue\n        strowger.set_http_route(domain, service_name)\n", "rewrite": "ReplaceText(target='data' @(64,27)->(64,33))", "error_line": 9, "has_bug": true, "code_full": "from typing import Any, Dict, Optional\n\n\nclass StrowgerClient:\n    def __init__(self, api_ip: str):\n        # Dummy implementation for type annotation purposes\n        pass\n\n    def set_http_route(self, domain: str, service_name: str) -> None:\n        # Dummy implementation for type annotation purposes\n        pass\n\ndef post_deploy(self, services: Any, globals: Dict[str, Any]):\n    domains: Optional[Dict[str, Dict]] = globals.get('Domains', {})\n    if not domains:\n        return\n\n    api_ip = self.host.discover('strowger-api')\n    strowger = StrowgerClient(api_ip)\n\n    for domain, data in domains.items():\n        service_name = domain.get('http')\n        if not service_name:\n            continue\n        strowger.set_http_route(domain, service_name)\n", "error_location_char": [318, 324], "type_checked_pytype": false, "type_checked_mypy": false, "type_error_label": "attribute-error"}
{"source_tokens": ["#NEWLINE#", "def get_columns(", "self", ",", "with_aliases", "=", "False", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n    Returns the list of columns to use in the select statement. If no\\n    columns have been specified, returns all columns relating to fields in\\n    the model.\\n\\n    If 'with_aliases' is true, any column names that are duplicated\\n    (without the table names) are given unique aliases. This is needed in\\n    some cases to avoid ambiguity with nested queries.\\n    \"", "#NEWLINE#", "qn", "=", "self", ".", "quote_name_unless_alias", "#NEWLINE#", "qn2", "=", "self", ".", "connection", ".", "ops", ".", "quote_name", "#NEWLINE#", "result", "=", "[", "(", "'(%s) AS %s'", "%", "(", "col", "[", "0", "]", ",", "qn2", "(", "alias", ")", ")", ")", "for", "(", "alias", ",", "col", ")", "in", "self", ".", "query", ".", "extra_select", ".", "iteritems", "(", ")", "]", "#NEWLINE#", "aliases", "=", "set", "(", "self", ".", "query", ".", "extra_select", ".", "keys", "(", ")", ")", "#NEWLINE#", "if", "with_aliases", ":", "#NEWLINE#", "#INDENT#", "col_aliases", "=", "aliases", ".", "copy", "(", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "col_aliases", "=", "set", "(", ")", "#NEWLINE#", "#UNINDENT#", "if", "self", ".", "query", ".", "select", ":", "#NEWLINE#", "#INDENT#", "only_load", "=", "self", ".", "deferred_to_columns", "(", ")", "#NEWLINE#", "for", "col", "in", "self", ".", "query", ".", "select", ":", "#NEWLINE#", "#INDENT#", "if", "isinstance", "(", "col", ",", "(", "list", ",", "tuple", ")", ")", ":", "#NEWLINE#", "#INDENT#", "(", "alias", ",", "column", ")", "=", "col", "#NEWLINE#", "table", "=", "self", ".", "query", ".", "alias_map", "[", "alias", "]", "[", "TABLE_NAME", "]", "#NEWLINE#", "if", "(", "(", "table", "in", "only_load", ")", "and", "(", "col", "not in", "only_load", "[", "table", "]", ")", ")", ":", "#NEWLINE#", "#INDENT#", "continue", "#NEWLINE#", "#UNINDENT#", "r", "=", "(", "'%s.%s'", "%", "(", "qn", "(", "alias", ")", ",", "qn", "(", "column", ")", ")", ")", "#NEWLINE#", "if", "with_aliases", ":", "#NEWLINE#", "#INDENT#", "if", "(", "col", "[", "1", "]", "in", "col_aliases", ")", ":", "#NEWLINE#", "#INDENT#", "c_alias", "=", "(", "'Col%d'", "%", "len", "(", "col_aliases", ")", ")", "#NEWLINE#", "result", ".", "append", "(", "(", "'%s AS %s'", "%", "(", "r", ",", "c_alias", ")", ")", ")", "#NEWLINE#", "aliases", ".", "add", "(", "c_alias", ")", "#NEWLINE#", "col_aliases", ".", "add", "(", "c_alias", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "result", ".", "append", "(", "(", "'%s AS %s'", "%", "(", "r", ",", "qn2", "(", "col", "[", "1", "]", ")", ")", ")", ")", "#NEWLINE#", "aliases", ".", "add", "(", "r", ")", "#NEWLINE#", "col_aliases", ".", "add", "(", "col", "[", "1", "]", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "result", ".", "append", "(", "r", ")", "#NEWLINE#", "aliases", ".", "add", "(", "r", ")", "#NEWLINE#", "col_aliases", ".", "add", "(", "col", "[", "1", "]", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "result", ".", "append", "(", "col", ".", "as_sql", "(", "qn", ",", "self", ".", "connection", ")", ")", "#NEWLINE#", "if", "hasattr", "(", "col", ",", "'alias'", ")", ":", "#NEWLINE#", "#INDENT#", "aliases", ".", "add", "(", "col", ".", "alias", ")", "#NEWLINE#", "col_aliases", ".", "add", "(", "col", ".", "alias", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "self", ".", "query", ".", "default_cols", ":", "#NEWLINE#", "#INDENT#", "(", "cols", ",", "new_aliases", ")", "=", "self", ".", "get_default_columns", "(", "with_aliases", ",", "col_aliases", ")", "#NEWLINE#", "result", ".", "extend", "(", "cols", ")", "#NEWLINE#", "aliases", ".", "update", "(", "new_aliases", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "max_name_length", "=", "self", ".", "connection", ".", "ops", ".", "max_name_length", "(", ")", "#NEWLINE#", "result", ".", "extend", "(", "[", "(", "'%s%s'", "%", "(", "aggregate", ".", "as_sql", "(", "qn", ",", "self", ".", "connection", ")", ",", "(", "(", "(", "alias", "is not", "None", ")", "and", "(", "' AS %s'", "%", "qn", "(", "truncate_name", "(", "alias", ",", "max_name_length", ")", ")", ")", ")", "or", "''", ")", ")", ")", "for", "(", "alias", ",", "aggregate", ")", "in", "self", ".", "query", ".", "aggregate_select", ".", "items", "(", ")", "]", ")", "#NEWLINE#", "for", "(", "table", ",", "col", ")", "in", "self", ".", "query", ".", "related_select_cols", ":", "#NEWLINE#", "#INDENT#", "r", "=", "(", "'%s.%s'", "%", "(", "qn", "(", "table", ")", ",", "qn", "(", "col", ")", ")", ")", "#NEWLINE#", "if", "(", "with_aliases", "and", "(", "col", "in", "col_aliases", ")", ")", ":", "#NEWLINE#", "#INDENT#", "c_alias", "=", "(", "'Col%d'", "%", "len", "(", "col_aliases", ")", ")", "#NEWLINE#", "result", ".", "append", "(", "(", "'%s AS %s'", "%", "(", "r", ",", "c_alias", ")", ")", ")", "#NEWLINE#", "aliases", ".", "add", "(", "c_alias", ")", "#NEWLINE#", "col_aliases", ".", "add", "(", "c_alias", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "result", ".", "append", "(", "r", ")", "#NEWLINE#", "aliases", ".", "add", "(", "r", ")", "#NEWLINE#", "col_aliases", ".", "add", "(", "col", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "self", ".", "_select_aliases", "=", "aliases", "#NEWLINE#", "return", "result"], "edges": [[1, 3, 7, "enum_FIELD"], [10, 11, 7, "enum_FIELD"], [12, 16, 7, "enum_FIELD"], [18, 26, 7, "enum_FIELD"], [28, 31, 7, "enum_FIELD"], [64, 68, 7, "enum_FIELD"], [82, 81, 7, "enum_FIELD"], [111, 109, 7, "enum_FIELD"], [437, 447, 7, "enum_FIELD"], [449, 453, 7, "enum_FIELD"], [522, 519, 7, "enum_FIELD"], [522, 526, 7, "enum_FIELD"], [629, 634, 7, "enum_FIELD"], [636, 637, 7, "enum_FIELD"], [16, 15, 7, "enum_FIELD"], [26, 24, 7, "enum_FIELD"], [31, 34, 7, "enum_FIELD"], [68, 67, 7, "enum_FIELD"], [84, 90, 7, "enum_FIELD"], [97, 101, 7, "enum_FIELD"], [109, 107, 7, "enum_FIELD"], [113, 119, 7, "enum_FIELD"], [124, 123, 7, "enum_FIELD"], [124, 128, 7, "enum_FIELD"], [398, 402, 7, "enum_FIELD"], [447, 445, 7, "enum_FIELD"], [453, 451, 7, "enum_FIELD"], [526, 524, 7, "enum_FIELD"], [530, 535, 7, "enum_FIELD"], [559, 552, 7, "enum_FIELD"], [631, 630, 7, "enum_FIELD"], [24, 22, 7, "enum_FIELD"], [34, 33, 7, "enum_FIELD"], [34, 40, 7, "enum_FIELD"], [47, 50, 7, "enum_FIELD"], [47, 61, 7, "enum_FIELD"], [76, 74, 7, "enum_FIELD"], [90, 88, 7, "enum_FIELD"], [101, 100, 7, "enum_FIELD"], [107, 106, 7, "enum_FIELD"], [119, 117, 7, "enum_FIELD"], [128, 126, 7, "enum_FIELD"], [144, 137, 7, "enum_FIELD"], [402, 400, 7, "enum_FIELD"], [406, 418, 7, "enum_FIELD"], [421, 425, 7, "enum_FIELD"], [428, 432, 7, "enum_FIELD"], [445, 443, 7, "enum_FIELD"], [451, 450, 7, "enum_FIELD"], [454, 457, 7, "enum_FIELD"], [524, 523, 7, "enum_FIELD"], [535, 534, 7, "enum_FIELD"], [535, 541, 7, "enum_FIELD"], [561, 566, 7, "enum_FIELD"], [572, 576, 7, "enum_FIELD"], [587, 591, 7, "enum_FIELD"], [594, 598, 7, "enum_FIELD"], [606, 610, 7, "enum_FIELD"], [613, 617, 7, "enum_FIELD"], [620, 624, 7, "enum_FIELD"], [22, 21, 7, "enum_FIELD"], [61, 59, 7, "enum_FIELD"], [74, 72, 7, "enum_FIELD"], [88, 87, 7, "enum_FIELD"], [117, 116, 7, "enum_FIELD"], [126, 125, 7, "enum_FIELD"], [137, 134, 7, "enum_FIELD"], [146, 153, 7, "enum_FIELD"], [154, 165, 7, "enum_FIELD"], [169, 176, 7, "enum_FIELD"], [191, 196, 7, "enum_FIELD"], [212, 211, 7, "enum_FIELD"], [345, 349, 7, "enum_FIELD"], [362, 366, 7, "enum_FIELD"], [400, 399, 7, "enum_FIELD"], [418, 414, 7, "enum_FIELD"], [425, 423, 7, "enum_FIELD"], [432, 430, 7, "enum_FIELD"], [443, 441, 7, "enum_FIELD"], [457, 456, 7, "enum_FIELD"], [457, 469, 7, "enum_FIELD"], [497, 500, 7, "enum_FIELD"], [497, 511, 7, "enum_FIELD"], [555, 554, 7, "enum_FIELD"], [566, 565, 7, "enum_FIELD"], [566, 568, 7, "enum_FIELD"], [576, 574, 7, "enum_FIELD"], [591, 589, 7, "enum_FIELD"], [598, 596, 7, "enum_FIELD"], [610, 608, 7, "enum_FIELD"], [617, 615, 7, "enum_FIELD"], [624, 622, 7, "enum_FIELD"], [37, 36, 7, "enum_FIELD"], [37, 38, 7, "enum_FIELD"], [42, 41, 7, "enum_FIELD"], [59, 57, 7, "enum_FIELD"], [72, 70, 7, "enum_FIELD"], [165, 162, 7, "enum_FIELD"], [165, 166, 7, "enum_FIELD"], [196, 195, 7, "enum_FIELD"], [196, 202, 7, "enum_FIELD"], [224, 221, 7, "enum_FIELD"], [315, 319, 7, "enum_FIELD"], [322, 326, 7, "enum_FIELD"], [329, 333, 7, "enum_FIELD"], [349, 347, 7, "enum_FIELD"], [366, 363, 7, "enum_FIELD"], [371, 375, 7, "enum_FIELD"], [380, 384, 7, "enum_FIELD"], [414, 413, 7, "enum_FIELD"], [423, 422, 7, "enum_FIELD"], [430, 429, 7, "enum_FIELD"], [441, 440, 7, "enum_FIELD"], [511, 509, 7, "enum_FIELD"], [538, 537, 7, "enum_FIELD"], [543, 542, 7, "enum_FIELD"], [568, 567, 7, "enum_FIELD"], [574, 573, 7, "enum_FIELD"], [579, 578, 7, "enum_FIELD"], [579, 582, 7, "enum_FIELD"], [589, 588, 7, "enum_FIELD"], [596, 595, 7, "enum_FIELD"], [608, 607, 7, "enum_FIELD"], [615, 614, 7, "enum_FIELD"], [622, 621, 7, "enum_FIELD"], [57, 55, 7, "enum_FIELD"], [70, 69, 7, "enum_FIELD"], [162, 160, 7, "enum_FIELD"], [162, 163, 7, "enum_FIELD"], [173, 172, 7, "enum_FIELD"], [179, 178, 7, "enum_FIELD"], [221, 218, 7, "enum_FIELD"], [226, 231, 7, "enum_FIELD"], [237, 241, 7, "enum_FIELD"], [252, 256, 7, "enum_FIELD"], [259, 263, 7, "enum_FIELD"], [271, 275, 7, "enum_FIELD"], [292, 296, 7, "enum_FIELD"], [299, 303, 7, "enum_FIELD"], [319, 317, 7, "enum_FIELD"], [326, 324, 7, "enum_FIELD"], [333, 331, 7, "enum_FIELD"], [347, 346, 7, "enum_FIELD"], [355, 351, 7, "enum_FIELD"], [375, 373, 7, "enum_FIELD"], [384, 382, 7, "enum_FIELD"], [464, 460, 7, "enum_FIELD"], [509, 507, 7, "enum_FIELD"], [55, 54, 7, "enum_FIELD"], [160, 158, 7, "enum_FIELD"], [181, 180, 7, "enum_FIELD"], [181, 182, 7, "enum_FIELD"], [199, 198, 7, "enum_FIELD"], [204, 203, 7, "enum_FIELD"], [218, 217, 7, "enum_FIELD"], [218, 219, 7, "enum_FIELD"], [231, 230, 7, "enum_FIELD"], [231, 233, 7, "enum_FIELD"], [241, 239, 7, "enum_FIELD"], [256, 254, 7, "enum_FIELD"], [263, 261, 7, "enum_FIELD"], [275, 273, 7, "enum_FIELD"], [296, 294, 7, "enum_FIELD"], [303, 301, 7, "enum_FIELD"], [317, 316, 7, "enum_FIELD"], [324, 323, 7, "enum_FIELD"], [331, 330, 7, "enum_FIELD"], [335, 334, 7, "enum_FIELD"], [335, 336, 7, "enum_FIELD"], [351, 350, 7, "enum_FIELD"], [357, 356, 7, "enum_FIELD"], [373, 372, 7, "enum_FIELD"], [377, 376, 7, "enum_FIELD"], [382, 381, 7, "enum_FIELD"], [386, 385, 7, "enum_FIELD"], [460, 459, 7, "enum_FIELD"], [466, 465, 7, "enum_FIELD"], [507, 505, 7, "enum_FIELD"], [158, 157, 7, "enum_FIELD"], [233, 232, 7, "enum_FIELD"], [239, 238, 7, "enum_FIELD"], [244, 243, 7, "enum_FIELD"], [244, 247, 7, "enum_FIELD"], [254, 253, 7, "enum_FIELD"], [261, 260, 7, "enum_FIELD"], [273, 272, 7, "enum_FIELD"], [278, 277, 7, "enum_FIELD"], [278, 281, 7, "enum_FIELD"], [294, 293, 7, "enum_FIELD"], [301, 300, 7, "enum_FIELD"], [305, 304, 7, "enum_FIELD"], [305, 306, 7, "enum_FIELD"], [474, 473, 7, "enum_FIELD"], [480, 479, 7, "enum_FIELD"], [480, 482, 7, "enum_FIELD"], [505, 504, 7, "enum_FIELD"], [482, 481, 7, "enum_FIELD"], [283, 282, 7, "enum_FIELD"], [486, 483, 7, "enum_FIELD"], [285, 284, 7, "enum_FIELD"], [285, 286, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [15, 2, 10, "enum_LAST_LEXICAL_USE"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [21, 15, 10, "enum_LAST_LEXICAL_USE"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [41, 19, 10, "enum_LAST_LEXICAL_USE"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [49, 43, 10, "enum_LAST_LEXICAL_USE"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [51, 36, 10, "enum_LAST_LEXICAL_USE"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [54, 21, 10, "enum_LAST_LEXICAL_USE"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [69, 54, 10, "enum_LAST_LEXICAL_USE"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 80, 9, "enum_NEXT_SYNTAX"], [81, 4, 10, "enum_LAST_LEXICAL_USE"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [87, 65, 10, "enum_LAST_LEXICAL_USE"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 97, 9, "enum_NEXT_SYNTAX"], [98, 85, 10, "enum_LAST_LEXICAL_USE"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [100, 67, 10, "enum_LAST_LEXICAL_USE"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 105, 9, "enum_NEXT_SYNTAX"], [106, 69, 10, "enum_LAST_LEXICAL_USE"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [116, 106, 10, "enum_LAST_LEXICAL_USE"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 122, 9, "enum_NEXT_SYNTAX"], [123, 51, 10, "enum_LAST_LEXICAL_USE"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [125, 116, 10, "enum_LAST_LEXICAL_USE"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [136, 123, 10, "enum_LAST_LEXICAL_USE"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [148, 49, 10, "enum_LAST_LEXICAL_USE"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [153, 136, 10, "enum_LAST_LEXICAL_USE"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [157, 125, 10, "enum_LAST_LEXICAL_USE"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [163, 148, 10, "enum_LAST_LEXICAL_USE"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [172, 155, 10, "enum_LAST_LEXICAL_USE"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [174, 114, 10, "enum_LAST_LEXICAL_USE"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [178, 153, 10, "enum_LAST_LEXICAL_USE"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [180, 174, 10, "enum_LAST_LEXICAL_USE"], [179, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [182, 172, 10, "enum_LAST_LEXICAL_USE"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 184, 9, "enum_NEXT_SYNTAX"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 189, 9, "enum_NEXT_SYNTAX"], [189, 191, 9, "enum_NEXT_SYNTAX"], [191, 192, 9, "enum_NEXT_SYNTAX"], [192, 193, 9, "enum_NEXT_SYNTAX"], [193, 194, 9, "enum_NEXT_SYNTAX"], [194, 195, 9, "enum_NEXT_SYNTAX"], [195, 196, 9, "enum_NEXT_SYNTAX"], [196, 197, 9, "enum_NEXT_SYNTAX"], [198, 13, 10, "enum_LAST_LEXICAL_USE"], [197, 198, 9, "enum_NEXT_SYNTAX"], [198, 199, 9, "enum_NEXT_SYNTAX"], [200, 163, 10, "enum_LAST_LEXICAL_USE"], [199, 200, 9, "enum_NEXT_SYNTAX"], [200, 201, 9, "enum_NEXT_SYNTAX"], [201, 202, 9, "enum_NEXT_SYNTAX"], [203, 198, 10, "enum_LAST_LEXICAL_USE"], [202, 203, 9, "enum_NEXT_SYNTAX"], [203, 204, 9, "enum_NEXT_SYNTAX"], [205, 150, 10, "enum_LAST_LEXICAL_USE"], [204, 205, 9, "enum_NEXT_SYNTAX"], [205, 206, 9, "enum_NEXT_SYNTAX"], [206, 207, 9, "enum_NEXT_SYNTAX"], [207, 208, 9, "enum_NEXT_SYNTAX"], [208, 210, 9, "enum_NEXT_SYNTAX"], [211, 81, 10, "enum_LAST_LEXICAL_USE"], [210, 211, 9, "enum_NEXT_SYNTAX"], [211, 212, 9, "enum_NEXT_SYNTAX"], [212, 215, 9, "enum_NEXT_SYNTAX"], [215, 216, 9, "enum_NEXT_SYNTAX"], [217, 178, 10, "enum_LAST_LEXICAL_USE"], [216, 217, 9, "enum_NEXT_SYNTAX"], [217, 218, 9, "enum_NEXT_SYNTAX"], [218, 219, 9, "enum_NEXT_SYNTAX"], [219, 220, 9, "enum_NEXT_SYNTAX"], [220, 221, 9, "enum_NEXT_SYNTAX"], [222, 98, 10, "enum_LAST_LEXICAL_USE"], [221, 222, 9, "enum_NEXT_SYNTAX"], [222, 223, 9, "enum_NEXT_SYNTAX"], [223, 224, 9, "enum_NEXT_SYNTAX"], [224, 226, 9, "enum_NEXT_SYNTAX"], [226, 227, 9, "enum_NEXT_SYNTAX"], [227, 228, 9, "enum_NEXT_SYNTAX"], [228, 229, 9, "enum_NEXT_SYNTAX"], [229, 230, 9, "enum_NEXT_SYNTAX"], [230, 231, 9, "enum_NEXT_SYNTAX"], [231, 232, 9, "enum_NEXT_SYNTAX"], [232, 233, 9, "enum_NEXT_SYNTAX"], [234, 222, 10, "enum_LAST_LEXICAL_USE"], [233, 234, 9, "enum_NEXT_SYNTAX"], [234, 235, 9, "enum_NEXT_SYNTAX"], [235, 236, 9, "enum_NEXT_SYNTAX"], [236, 237, 9, "enum_NEXT_SYNTAX"], [238, 29, 10, "enum_LAST_LEXICAL_USE"], [237, 238, 9, "enum_NEXT_SYNTAX"], [238, 239, 9, "enum_NEXT_SYNTAX"], [239, 240, 9, "enum_NEXT_SYNTAX"], [240, 241, 9, "enum_NEXT_SYNTAX"], [241, 242, 9, "enum_NEXT_SYNTAX"], [242, 243, 9, "enum_NEXT_SYNTAX"], [243, 244, 9, "enum_NEXT_SYNTAX"], [244, 245, 9, "enum_NEXT_SYNTAX"], [246, 192, 10, "enum_LAST_LEXICAL_USE"], [245, 246, 9, "enum_NEXT_SYNTAX"], [246, 247, 9, "enum_NEXT_SYNTAX"], [248, 227, 10, "enum_LAST_LEXICAL_USE"], [247, 248, 9, "enum_NEXT_SYNTAX"], [248, 249, 9, "enum_NEXT_SYNTAX"], [249, 250, 9, "enum_NEXT_SYNTAX"], [250, 251, 9, "enum_NEXT_SYNTAX"], [251, 252, 9, "enum_NEXT_SYNTAX"], [253, 87, 10, "enum_LAST_LEXICAL_USE"], [252, 253, 9, "enum_NEXT_SYNTAX"], [253, 254, 9, "enum_NEXT_SYNTAX"], [254, 255, 9, "enum_NEXT_SYNTAX"], [255, 256, 9, "enum_NEXT_SYNTAX"], [257, 248, 10, "enum_LAST_LEXICAL_USE"], [256, 257, 9, "enum_NEXT_SYNTAX"], [257, 258, 9, "enum_NEXT_SYNTAX"], [258, 259, 9, "enum_NEXT_SYNTAX"], [260, 234, 10, "enum_LAST_LEXICAL_USE"], [259, 260, 9, "enum_NEXT_SYNTAX"], [260, 261, 9, "enum_NEXT_SYNTAX"], [261, 262, 9, "enum_NEXT_SYNTAX"], [262, 263, 9, "enum_NEXT_SYNTAX"], [264, 257, 10, "enum_LAST_LEXICAL_USE"], [263, 264, 9, "enum_NEXT_SYNTAX"], [264, 265, 9, "enum_NEXT_SYNTAX"], [265, 268, 9, "enum_NEXT_SYNTAX"], [268, 269, 9, "enum_NEXT_SYNTAX"], [269, 271, 9, "enum_NEXT_SYNTAX"], [272, 238, 10, "enum_LAST_LEXICAL_USE"], [271, 272, 9, "enum_NEXT_SYNTAX"], [272, 273, 9, "enum_NEXT_SYNTAX"], [273, 274, 9, "enum_NEXT_SYNTAX"], [274, 275, 9, "enum_NEXT_SYNTAX"], [275, 276, 9, "enum_NEXT_SYNTAX"], [276, 277, 9, "enum_NEXT_SYNTAX"], [277, 278, 9, "enum_NEXT_SYNTAX"], [278, 279, 9, "enum_NEXT_SYNTAX"], [280, 246, 10, "enum_LAST_LEXICAL_USE"], [279, 280, 9, "enum_NEXT_SYNTAX"], [280, 281, 9, "enum_NEXT_SYNTAX"], [282, 41, 10, "enum_LAST_LEXICAL_USE"], [281, 282, 9, "enum_NEXT_SYNTAX"], [282, 283, 9, "enum_NEXT_SYNTAX"], [284, 217, 10, "enum_LAST_LEXICAL_USE"], [283, 284, 9, "enum_NEXT_SYNTAX"], [284, 285, 9, "enum_NEXT_SYNTAX"], [285, 286, 9, "enum_NEXT_SYNTAX"], [286, 287, 9, "enum_NEXT_SYNTAX"], [287, 288, 9, "enum_NEXT_SYNTAX"], [288, 289, 9, "enum_NEXT_SYNTAX"], [289, 290, 9, "enum_NEXT_SYNTAX"], [290, 291, 9, "enum_NEXT_SYNTAX"], [291, 292, 9, "enum_NEXT_SYNTAX"], [293, 253, 10, "enum_LAST_LEXICAL_USE"], [292, 293, 9, "enum_NEXT_SYNTAX"], [293, 294, 9, "enum_NEXT_SYNTAX"], [294, 295, 9, "enum_NEXT_SYNTAX"], [295, 296, 9, "enum_NEXT_SYNTAX"], [297, 280, 10, "enum_LAST_LEXICAL_USE"], [296, 297, 9, "enum_NEXT_SYNTAX"], [297, 298, 9, "enum_NEXT_SYNTAX"], [298, 299, 9, "enum_NEXT_SYNTAX"], [300, 260, 10, "enum_LAST_LEXICAL_USE"], [299, 300, 9, "enum_NEXT_SYNTAX"], [300, 301, 9, "enum_NEXT_SYNTAX"], [301, 302, 9, "enum_NEXT_SYNTAX"], [302, 303, 9, "enum_NEXT_SYNTAX"], [304, 284, 10, "enum_LAST_LEXICAL_USE"], [303, 304, 9, "enum_NEXT_SYNTAX"], [304, 305, 9, "enum_NEXT_SYNTAX"], [305, 306, 9, "enum_NEXT_SYNTAX"], [306, 307, 9, "enum_NEXT_SYNTAX"], [307, 308, 9, "enum_NEXT_SYNTAX"], [308, 312, 9, "enum_NEXT_SYNTAX"], [312, 313, 9, "enum_NEXT_SYNTAX"], [313, 315, 9, "enum_NEXT_SYNTAX"], [316, 272, 10, "enum_LAST_LEXICAL_USE"], [315, 316, 9, "enum_NEXT_SYNTAX"], [316, 317, 9, "enum_NEXT_SYNTAX"], [317, 318, 9, "enum_NEXT_SYNTAX"], [318, 319, 9, "enum_NEXT_SYNTAX"], [320, 297, 10, "enum_LAST_LEXICAL_USE"], [319, 320, 9, "enum_NEXT_SYNTAX"], [320, 321, 9, "enum_NEXT_SYNTAX"], [321, 322, 9, "enum_NEXT_SYNTAX"], [323, 293, 10, "enum_LAST_LEXICAL_USE"], [322, 323, 9, "enum_NEXT_SYNTAX"], [323, 324, 9, "enum_NEXT_SYNTAX"], [324, 325, 9, "enum_NEXT_SYNTAX"], [325, 326, 9, "enum_NEXT_SYNTAX"], [327, 320, 10, "enum_LAST_LEXICAL_USE"], [326, 327, 9, "enum_NEXT_SYNTAX"], [327, 328, 9, "enum_NEXT_SYNTAX"], [328, 329, 9, "enum_NEXT_SYNTAX"], [330, 300, 10, "enum_LAST_LEXICAL_USE"], [329, 330, 9, "enum_NEXT_SYNTAX"], [330, 331, 9, "enum_NEXT_SYNTAX"], [331, 332, 9, "enum_NEXT_SYNTAX"], [332, 333, 9, "enum_NEXT_SYNTAX"], [334, 304, 10, "enum_LAST_LEXICAL_USE"], [333, 334, 9, "enum_NEXT_SYNTAX"], [334, 335, 9, "enum_NEXT_SYNTAX"], [335, 336, 9, "enum_NEXT_SYNTAX"], [336, 337, 9, "enum_NEXT_SYNTAX"], [337, 338, 9, "enum_NEXT_SYNTAX"], [338, 342, 9, "enum_NEXT_SYNTAX"], [342, 343, 9, "enum_NEXT_SYNTAX"], [343, 345, 9, "enum_NEXT_SYNTAX"], [346, 316, 10, "enum_LAST_LEXICAL_USE"], [345, 346, 9, "enum_NEXT_SYNTAX"], [346, 347, 9, "enum_NEXT_SYNTAX"], [347, 348, 9, "enum_NEXT_SYNTAX"], [348, 349, 9, "enum_NEXT_SYNTAX"], [350, 334, 10, "enum_LAST_LEXICAL_USE"], [349, 350, 9, "enum_NEXT_SYNTAX"], [350, 351, 9, "enum_NEXT_SYNTAX"], [351, 352, 9, "enum_NEXT_SYNTAX"], [352, 353, 9, "enum_NEXT_SYNTAX"], [354, 203, 10, "enum_LAST_LEXICAL_USE"], [353, 354, 9, "enum_NEXT_SYNTAX"], [354, 355, 9, "enum_NEXT_SYNTAX"], [356, 157, 10, "enum_LAST_LEXICAL_USE"], [355, 356, 9, "enum_NEXT_SYNTAX"], [356, 357, 9, "enum_NEXT_SYNTAX"], [357, 358, 9, "enum_NEXT_SYNTAX"], [358, 359, 9, "enum_NEXT_SYNTAX"], [359, 360, 9, "enum_NEXT_SYNTAX"], [360, 362, 9, "enum_NEXT_SYNTAX"], [362, 363, 9, "enum_NEXT_SYNTAX"], [363, 364, 9, "enum_NEXT_SYNTAX"], [365, 350, 10, "enum_LAST_LEXICAL_USE"], [364, 365, 9, "enum_NEXT_SYNTAX"], [365, 366, 9, "enum_NEXT_SYNTAX"], [366, 367, 9, "enum_NEXT_SYNTAX"], [367, 368, 9, "enum_NEXT_SYNTAX"], [368, 369, 9, "enum_NEXT_SYNTAX"], [369, 371, 9, "enum_NEXT_SYNTAX"], [372, 323, 10, "enum_LAST_LEXICAL_USE"], [371, 372, 9, "enum_NEXT_SYNTAX"], [372, 373, 9, "enum_NEXT_SYNTAX"], [373, 374, 9, "enum_NEXT_SYNTAX"], [374, 375, 9, "enum_NEXT_SYNTAX"], [376, 365, 10, "enum_LAST_LEXICAL_USE"], [375, 376, 9, "enum_NEXT_SYNTAX"], [376, 377, 9, "enum_NEXT_SYNTAX"], [377, 378, 9, "enum_NEXT_SYNTAX"], [378, 379, 9, "enum_NEXT_SYNTAX"], [379, 380, 9, "enum_NEXT_SYNTAX"], [381, 330, 10, "enum_LAST_LEXICAL_USE"], [380, 381, 9, "enum_NEXT_SYNTAX"], [381, 382, 9, "enum_NEXT_SYNTAX"], [382, 383, 9, "enum_NEXT_SYNTAX"], [383, 384, 9, "enum_NEXT_SYNTAX"], [385, 376, 10, "enum_LAST_LEXICAL_USE"], [384, 385, 9, "enum_NEXT_SYNTAX"], [385, 386, 9, "enum_NEXT_SYNTAX"], [386, 387, 9, "enum_NEXT_SYNTAX"], [387, 388, 9, "enum_NEXT_SYNTAX"], [388, 394, 9, "enum_NEXT_SYNTAX"], [394, 395, 9, "enum_NEXT_SYNTAX"], [395, 398, 9, "enum_NEXT_SYNTAX"], [399, 356, 10, "enum_LAST_LEXICAL_USE"], [398, 399, 9, "enum_NEXT_SYNTAX"], [399, 400, 9, "enum_NEXT_SYNTAX"], [400, 401, 9, "enum_NEXT_SYNTAX"], [401, 402, 9, "enum_NEXT_SYNTAX"], [402, 403, 9, "enum_NEXT_SYNTAX"], [403, 404, 9, "enum_NEXT_SYNTAX"], [404, 406, 9, "enum_NEXT_SYNTAX"], [406, 407, 9, "enum_NEXT_SYNTAX"], [407, 408, 9, "enum_NEXT_SYNTAX"], [408, 409, 9, "enum_NEXT_SYNTAX"], [409, 410, 9, "enum_NEXT_SYNTAX"], [410, 411, 9, "enum_NEXT_SYNTAX"], [411, 412, 9, "enum_NEXT_SYNTAX"], [413, 399, 10, "enum_LAST_LEXICAL_USE"], [412, 413, 9, "enum_NEXT_SYNTAX"], [413, 414, 9, "enum_NEXT_SYNTAX"], [414, 415, 9, "enum_NEXT_SYNTAX"], [415, 416, 9, "enum_NEXT_SYNTAX"], [417, 211, 10, "enum_LAST_LEXICAL_USE"], [416, 417, 9, "enum_NEXT_SYNTAX"], [417, 418, 9, "enum_NEXT_SYNTAX"], [419, 381, 10, "enum_LAST_LEXICAL_USE"], [418, 419, 9, "enum_NEXT_SYNTAX"], [419, 420, 9, "enum_NEXT_SYNTAX"], [420, 421, 9, "enum_NEXT_SYNTAX"], [422, 346, 10, "enum_LAST_LEXICAL_USE"], [421, 422, 9, "enum_NEXT_SYNTAX"], [422, 423, 9, "enum_NEXT_SYNTAX"], [423, 424, 9, "enum_NEXT_SYNTAX"], [424, 425, 9, "enum_NEXT_SYNTAX"], [426, 408, 10, "enum_LAST_LEXICAL_USE"], [425, 426, 9, "enum_NEXT_SYNTAX"], [426, 427, 9, "enum_NEXT_SYNTAX"], [427, 428, 9, "enum_NEXT_SYNTAX"], [429, 372, 10, "enum_LAST_LEXICAL_USE"], [428, 429, 9, "enum_NEXT_SYNTAX"], [429, 430, 9, "enum_NEXT_SYNTAX"], [430, 431, 9, "enum_NEXT_SYNTAX"], [431, 432, 9, "enum_NEXT_SYNTAX"], [433, 410, 10, "enum_LAST_LEXICAL_USE"], [432, 433, 9, "enum_NEXT_SYNTAX"], [433, 434, 9, "enum_NEXT_SYNTAX"], [434, 437, 9, "enum_NEXT_SYNTAX"], [437, 438, 9, "enum_NEXT_SYNTAX"], [438, 439, 9, "enum_NEXT_SYNTAX"], [440, 413, 10, "enum_LAST_LEXICAL_USE"], [439, 440, 9, "enum_NEXT_SYNTAX"], [440, 441, 9, "enum_NEXT_SYNTAX"], [441, 442, 9, "enum_NEXT_SYNTAX"], [442, 443, 9, "enum_NEXT_SYNTAX"], [443, 444, 9, "enum_NEXT_SYNTAX"], [444, 445, 9, "enum_NEXT_SYNTAX"], [445, 446, 9, "enum_NEXT_SYNTAX"], [446, 447, 9, "enum_NEXT_SYNTAX"], [447, 448, 9, "enum_NEXT_SYNTAX"], [448, 449, 9, "enum_NEXT_SYNTAX"], [450, 422, 10, "enum_LAST_LEXICAL_USE"], [449, 450, 9, "enum_NEXT_SYNTAX"], [450, 451, 9, "enum_NEXT_SYNTAX"], [451, 452, 9, "enum_NEXT_SYNTAX"], [452, 453, 9, "enum_NEXT_SYNTAX"], [453, 454, 9, "enum_NEXT_SYNTAX"], [454, 455, 9, "enum_NEXT_SYNTAX"], [455, 456, 9, "enum_NEXT_SYNTAX"], [456, 457, 9, "enum_NEXT_SYNTAX"], [457, 458, 9, "enum_NEXT_SYNTAX"], [458, 459, 9, "enum_NEXT_SYNTAX"], [459, 460, 9, "enum_NEXT_SYNTAX"], [460, 461, 9, "enum_NEXT_SYNTAX"], [461, 462, 9, "enum_NEXT_SYNTAX"], [463, 354, 10, "enum_LAST_LEXICAL_USE"], [462, 463, 9, "enum_NEXT_SYNTAX"], [463, 464, 9, "enum_NEXT_SYNTAX"], [465, 440, 10, "enum_LAST_LEXICAL_USE"], [464, 465, 9, "enum_NEXT_SYNTAX"], [465, 466, 9, "enum_NEXT_SYNTAX"], [466, 467, 9, "enum_NEXT_SYNTAX"], [467, 468, 9, "enum_NEXT_SYNTAX"], [468, 469, 9, "enum_NEXT_SYNTAX"], [469, 470, 9, "enum_NEXT_SYNTAX"], [470, 471, 9, "enum_NEXT_SYNTAX"], [471, 472, 9, "enum_NEXT_SYNTAX"], [473, 200, 10, "enum_LAST_LEXICAL_USE"], [472, 473, 9, "enum_NEXT_SYNTAX"], [473, 474, 9, "enum_NEXT_SYNTAX"], [474, 475, 9, "enum_NEXT_SYNTAX"], [475, 476, 9, "enum_NEXT_SYNTAX"], [476, 477, 9, "enum_NEXT_SYNTAX"], [477, 478, 9, "enum_NEXT_SYNTAX"], [478, 479, 9, "enum_NEXT_SYNTAX"], [479, 480, 9, "enum_NEXT_SYNTAX"], [481, 463, 10, "enum_LAST_LEXICAL_USE"], [480, 481, 9, "enum_NEXT_SYNTAX"], [481, 482, 9, "enum_NEXT_SYNTAX"], [482, 483, 9, "enum_NEXT_SYNTAX"], [483, 484, 9, "enum_NEXT_SYNTAX"], [485, 473, 10, "enum_LAST_LEXICAL_USE"], [484, 485, 9, "enum_NEXT_SYNTAX"], [485, 486, 9, "enum_NEXT_SYNTAX"], [487, 438, 10, "enum_LAST_LEXICAL_USE"], [486, 487, 9, "enum_NEXT_SYNTAX"], [487, 488, 9, "enum_NEXT_SYNTAX"], [488, 489, 9, "enum_NEXT_SYNTAX"], [489, 490, 9, "enum_NEXT_SYNTAX"], [490, 491, 9, "enum_NEXT_SYNTAX"], [491, 492, 9, "enum_NEXT_SYNTAX"], [492, 493, 9, "enum_NEXT_SYNTAX"], [493, 494, 9, "enum_NEXT_SYNTAX"], [494, 495, 9, "enum_NEXT_SYNTAX"], [495, 496, 9, "enum_NEXT_SYNTAX"], [496, 497, 9, "enum_NEXT_SYNTAX"], [497, 498, 9, "enum_NEXT_SYNTAX"], [499, 485, 10, "enum_LAST_LEXICAL_USE"], [498, 499, 9, "enum_NEXT_SYNTAX"], [499, 500, 9, "enum_NEXT_SYNTAX"], [501, 459, 10, "enum_LAST_LEXICAL_USE"], [500, 501, 9, "enum_NEXT_SYNTAX"], [501, 502, 9, "enum_NEXT_SYNTAX"], [502, 503, 9, "enum_NEXT_SYNTAX"], [504, 465, 10, "enum_LAST_LEXICAL_USE"], [503, 504, 9, "enum_NEXT_SYNTAX"], [504, 505, 9, "enum_NEXT_SYNTAX"], [505, 506, 9, "enum_NEXT_SYNTAX"], [506, 507, 9, "enum_NEXT_SYNTAX"], [507, 508, 9, "enum_NEXT_SYNTAX"], [508, 509, 9, "enum_NEXT_SYNTAX"], [509, 510, 9, "enum_NEXT_SYNTAX"], [510, 511, 9, "enum_NEXT_SYNTAX"], [511, 512, 9, "enum_NEXT_SYNTAX"], [512, 513, 9, "enum_NEXT_SYNTAX"], [513, 514, 9, "enum_NEXT_SYNTAX"], [514, 516, 9, "enum_NEXT_SYNTAX"], [516, 517, 9, "enum_NEXT_SYNTAX"], [518, 182, 10, "enum_LAST_LEXICAL_USE"], [517, 518, 9, "enum_NEXT_SYNTAX"], [518, 519, 9, "enum_NEXT_SYNTAX"], [520, 385, 10, "enum_LAST_LEXICAL_USE"], [519, 520, 9, "enum_NEXT_SYNTAX"], [520, 521, 9, "enum_NEXT_SYNTAX"], [521, 522, 9, "enum_NEXT_SYNTAX"], [523, 504, 10, "enum_LAST_LEXICAL_USE"], [522, 523, 9, "enum_NEXT_SYNTAX"], [523, 524, 9, "enum_NEXT_SYNTAX"], [524, 525, 9, "enum_NEXT_SYNTAX"], [525, 526, 9, "enum_NEXT_SYNTAX"], [526, 527, 9, "enum_NEXT_SYNTAX"], [527, 528, 9, "enum_NEXT_SYNTAX"], [528, 530, 9, "enum_NEXT_SYNTAX"], [531, 327, 10, "enum_LAST_LEXICAL_USE"], [530, 531, 9, "enum_NEXT_SYNTAX"], [531, 532, 9, "enum_NEXT_SYNTAX"], [532, 533, 9, "enum_NEXT_SYNTAX"], [533, 534, 9, "enum_NEXT_SYNTAX"], [534, 535, 9, "enum_NEXT_SYNTAX"], [535, 536, 9, "enum_NEXT_SYNTAX"], [537, 481, 10, "enum_LAST_LEXICAL_USE"], [536, 537, 9, "enum_NEXT_SYNTAX"], [537, 538, 9, "enum_NEXT_SYNTAX"], [539, 518, 10, "enum_LAST_LEXICAL_USE"], [538, 539, 9, "enum_NEXT_SYNTAX"], [539, 540, 9, "enum_NEXT_SYNTAX"], [540, 541, 9, "enum_NEXT_SYNTAX"], [542, 537, 10, "enum_LAST_LEXICAL_USE"], [541, 542, 9, "enum_NEXT_SYNTAX"], [542, 543, 9, "enum_NEXT_SYNTAX"], [544, 520, 10, "enum_LAST_LEXICAL_USE"], [543, 544, 9, "enum_NEXT_SYNTAX"], [544, 545, 9, "enum_NEXT_SYNTAX"], [545, 546, 9, "enum_NEXT_SYNTAX"], [546, 547, 9, "enum_NEXT_SYNTAX"], [547, 549, 9, "enum_NEXT_SYNTAX"], [549, 550, 9, "enum_NEXT_SYNTAX"], [551, 417, 10, "enum_LAST_LEXICAL_USE"], [550, 551, 9, "enum_NEXT_SYNTAX"], [551, 552, 9, "enum_NEXT_SYNTAX"], [552, 553, 9, "enum_NEXT_SYNTAX"], [554, 544, 10, "enum_LAST_LEXICAL_USE"], [553, 554, 9, "enum_NEXT_SYNTAX"], [554, 555, 9, "enum_NEXT_SYNTAX"], [556, 419, 10, "enum_LAST_LEXICAL_USE"], [555, 556, 9, "enum_NEXT_SYNTAX"], [556, 557, 9, "enum_NEXT_SYNTAX"], [557, 558, 9, "enum_NEXT_SYNTAX"], [558, 559, 9, "enum_NEXT_SYNTAX"], [559, 561, 9, "enum_NEXT_SYNTAX"], [562, 264, 10, "enum_LAST_LEXICAL_USE"], [561, 562, 9, "enum_NEXT_SYNTAX"], [562, 563, 9, "enum_NEXT_SYNTAX"], [563, 564, 9, "enum_NEXT_SYNTAX"], [564, 565, 9, "enum_NEXT_SYNTAX"], [565, 566, 9, "enum_NEXT_SYNTAX"], [567, 232, 10, "enum_LAST_LEXICAL_USE"], [566, 567, 9, "enum_NEXT_SYNTAX"], [567, 568, 9, "enum_NEXT_SYNTAX"], [569, 556, 10, "enum_LAST_LEXICAL_USE"], [568, 569, 9, "enum_NEXT_SYNTAX"], [569, 570, 9, "enum_NEXT_SYNTAX"], [570, 571, 9, "enum_NEXT_SYNTAX"], [571, 572, 9, "enum_NEXT_SYNTAX"], [573, 450, 10, "enum_LAST_LEXICAL_USE"], [572, 573, 9, "enum_NEXT_SYNTAX"], [573, 574, 9, "enum_NEXT_SYNTAX"], [574, 575, 9, "enum_NEXT_SYNTAX"], [575, 576, 9, "enum_NEXT_SYNTAX"], [576, 577, 9, "enum_NEXT_SYNTAX"], [577, 578, 9, "enum_NEXT_SYNTAX"], [578, 579, 9, "enum_NEXT_SYNTAX"], [579, 580, 9, "enum_NEXT_SYNTAX"], [581, 531, 10, "enum_LAST_LEXICAL_USE"], [580, 581, 9, "enum_NEXT_SYNTAX"], [581, 582, 9, "enum_NEXT_SYNTAX"], [583, 562, 10, "enum_LAST_LEXICAL_USE"], [582, 583, 9, "enum_NEXT_SYNTAX"], [583, 584, 9, "enum_NEXT_SYNTAX"], [584, 585, 9, "enum_NEXT_SYNTAX"], [585, 586, 9, "enum_NEXT_SYNTAX"], [586, 587, 9, "enum_NEXT_SYNTAX"], [588, 429, 10, "enum_LAST_LEXICAL_USE"], [587, 588, 9, "enum_NEXT_SYNTAX"], [588, 589, 9, "enum_NEXT_SYNTAX"], [589, 590, 9, "enum_NEXT_SYNTAX"], [590, 591, 9, "enum_NEXT_SYNTAX"], [592, 583, 10, "enum_LAST_LEXICAL_USE"], [591, 592, 9, "enum_NEXT_SYNTAX"], [592, 593, 9, "enum_NEXT_SYNTAX"], [593, 594, 9, "enum_NEXT_SYNTAX"], [595, 569, 10, "enum_LAST_LEXICAL_USE"], [594, 595, 9, "enum_NEXT_SYNTAX"], [595, 596, 9, "enum_NEXT_SYNTAX"], [596, 597, 9, "enum_NEXT_SYNTAX"], [597, 598, 9, "enum_NEXT_SYNTAX"], [599, 592, 10, "enum_LAST_LEXICAL_USE"], [598, 599, 9, "enum_NEXT_SYNTAX"], [599, 600, 9, "enum_NEXT_SYNTAX"], [600, 603, 9, "enum_NEXT_SYNTAX"], [603, 604, 9, "enum_NEXT_SYNTAX"], [604, 606, 9, "enum_NEXT_SYNTAX"], [607, 573, 10, "enum_LAST_LEXICAL_USE"], [606, 607, 9, "enum_NEXT_SYNTAX"], [607, 608, 9, "enum_NEXT_SYNTAX"], [608, 609, 9, "enum_NEXT_SYNTAX"], [609, 610, 9, "enum_NEXT_SYNTAX"], [611, 581, 10, "enum_LAST_LEXICAL_USE"], [610, 611, 9, "enum_NEXT_SYNTAX"], [611, 612, 9, "enum_NEXT_SYNTAX"], [612, 613, 9, "enum_NEXT_SYNTAX"], [614, 588, 10, "enum_LAST_LEXICAL_USE"], [613, 614, 9, "enum_NEXT_SYNTAX"], [614, 615, 9, "enum_NEXT_SYNTAX"], [615, 616, 9, "enum_NEXT_SYNTAX"], [616, 617, 9, "enum_NEXT_SYNTAX"], [618, 611, 10, "enum_LAST_LEXICAL_USE"], [617, 618, 9, "enum_NEXT_SYNTAX"], [618, 619, 9, "enum_NEXT_SYNTAX"], [619, 620, 9, "enum_NEXT_SYNTAX"], [621, 595, 10, "enum_LAST_LEXICAL_USE"], [620, 621, 9, "enum_NEXT_SYNTAX"], [621, 622, 9, "enum_NEXT_SYNTAX"], [622, 623, 9, "enum_NEXT_SYNTAX"], [623, 624, 9, "enum_NEXT_SYNTAX"], [625, 554, 10, "enum_LAST_LEXICAL_USE"], [624, 625, 9, "enum_NEXT_SYNTAX"], [625, 626, 9, "enum_NEXT_SYNTAX"], [626, 629, 9, "enum_NEXT_SYNTAX"], [630, 523, 10, "enum_LAST_LEXICAL_USE"], [629, 630, 9, "enum_NEXT_SYNTAX"], [630, 631, 9, "enum_NEXT_SYNTAX"], [631, 632, 9, "enum_NEXT_SYNTAX"], [632, 633, 9, "enum_NEXT_SYNTAX"], [634, 614, 10, "enum_LAST_LEXICAL_USE"], [633, 634, 9, "enum_NEXT_SYNTAX"], [634, 636, 9, "enum_NEXT_SYNTAX"], [637, 607, 10, "enum_LAST_LEXICAL_USE"], [636, 637, 9, "enum_NEXT_SYNTAX"], [6, 1, 1, "enum_CFG_NEXT"], [3, 10, 1, "enum_CFG_NEXT"], [10, 12, 1, "enum_CFG_NEXT"], [12, 18, 1, "enum_CFG_NEXT"], [18, 28, 1, "enum_CFG_NEXT"], [28, 64, 1, "enum_CFG_NEXT"], [64, 81, 1, "enum_CFG_NEXT"], [81, 84, 1, "enum_CFG_NEXT"], [81, 97, 1, "enum_CFG_NEXT"], [84, 109, 1, "enum_CFG_NEXT"], [97, 109, 1, "enum_CFG_NEXT"], [109, 113, 1, "enum_CFG_NEXT"], [109, 402, 1, "enum_CFG_NEXT"], [113, 128, 1, "enum_CFG_NEXT"], [128, 123, 1, "enum_CFG_NEXT"], [123, 437, 1, "enum_CFG_NEXT"], [123, 137, 1, "enum_CFG_NEXT"], [137, 146, 1, "enum_CFG_NEXT"], [137, 345, 1, "enum_CFG_NEXT"], [146, 154, 1, "enum_CFG_NEXT"], [154, 176, 1, "enum_CFG_NEXT"], [176, 123, 1, "enum_CFG_NEXT"], [176, 191, 1, "enum_CFG_NEXT"], [191, 211, 1, "enum_CFG_NEXT"], [211, 221, 1, "enum_CFG_NEXT"], [211, 315, 1, "enum_CFG_NEXT"], [221, 226, 1, "enum_CFG_NEXT"], [221, 271, 1, "enum_CFG_NEXT"], [226, 237, 1, "enum_CFG_NEXT"], [237, 252, 1, "enum_CFG_NEXT"], [252, 259, 1, "enum_CFG_NEXT"], [259, 123, 1, "enum_CFG_NEXT"], [271, 292, 1, "enum_CFG_NEXT"], [292, 299, 1, "enum_CFG_NEXT"], [299, 123, 1, "enum_CFG_NEXT"], [315, 322, 1, "enum_CFG_NEXT"], [322, 329, 1, "enum_CFG_NEXT"], [329, 123, 1, "enum_CFG_NEXT"], [345, 366, 1, "enum_CFG_NEXT"], [366, 371, 1, "enum_CFG_NEXT"], [366, 123, 1, "enum_CFG_NEXT"], [371, 380, 1, "enum_CFG_NEXT"], [380, 123, 1, "enum_CFG_NEXT"], [402, 437, 1, "enum_CFG_NEXT"], [402, 406, 1, "enum_CFG_NEXT"], [406, 421, 1, "enum_CFG_NEXT"], [421, 428, 1, "enum_CFG_NEXT"], [428, 437, 1, "enum_CFG_NEXT"], [437, 449, 1, "enum_CFG_NEXT"], [449, 526, 1, "enum_CFG_NEXT"], [526, 519, 1, "enum_CFG_NEXT"], [519, 629, 1, "enum_CFG_NEXT"], [519, 530, 1, "enum_CFG_NEXT"], [530, 552, 1, "enum_CFG_NEXT"], [552, 561, 1, "enum_CFG_NEXT"], [552, 606, 1, "enum_CFG_NEXT"], [561, 572, 1, "enum_CFG_NEXT"], [572, 587, 1, "enum_CFG_NEXT"], [587, 594, 1, "enum_CFG_NEXT"], [594, 519, 1, "enum_CFG_NEXT"], [606, 613, 1, "enum_CFG_NEXT"], [613, 620, 1, "enum_CFG_NEXT"], [620, 519, 1, "enum_CFG_NEXT"], [629, 636, 1, "enum_CFG_NEXT"], [15, 2, 3, "enum_LAST_WRITE"], [21, 15, 2, "enum_LAST_READ"], [21, 2, 3, "enum_LAST_WRITE"], [41, 19, 3, "enum_LAST_WRITE"], [49, 43, 2, "enum_LAST_READ"], [51, 36, 2, "enum_LAST_READ"], [54, 21, 2, "enum_LAST_READ"], [54, 2, 3, "enum_LAST_WRITE"], [69, 54, 2, "enum_LAST_READ"], [69, 2, 3, "enum_LAST_WRITE"], [81, 4, 3, "enum_LAST_WRITE"], [87, 65, 3, "enum_LAST_WRITE"], [100, 67, 2, "enum_LAST_READ"], [106, 69, 2, "enum_LAST_READ"], [106, 2, 3, "enum_LAST_WRITE"], [116, 106, 2, "enum_LAST_READ"], [116, 2, 3, "enum_LAST_WRITE"], [125, 116, 2, "enum_LAST_READ"], [125, 2, 3, "enum_LAST_WRITE"], [123, 365, 2, "enum_LAST_READ"], [123, 304, 2, "enum_LAST_READ"], [123, 217, 2, "enum_LAST_READ"], [123, 385, 2, "enum_LAST_READ"], [123, 178, 2, "enum_LAST_READ"], [123, 36, 2, "enum_LAST_READ"], [123, 334, 2, "enum_LAST_READ"], [123, 123, 3, "enum_LAST_WRITE"], [123, 51, 3, "enum_LAST_WRITE"], [134, 134, 2, "enum_LAST_READ"], [136, 365, 2, "enum_LAST_READ"], [136, 304, 2, "enum_LAST_READ"], [136, 217, 2, "enum_LAST_READ"], [136, 385, 2, "enum_LAST_READ"], [136, 178, 2, "enum_LAST_READ"], [136, 36, 2, "enum_LAST_READ"], [136, 334, 2, "enum_LAST_READ"], [136, 123, 3, "enum_LAST_WRITE"], [139, 139, 2, "enum_LAST_READ"], [141, 141, 2, "enum_LAST_READ"], [153, 136, 2, "enum_LAST_READ"], [153, 123, 3, "enum_LAST_WRITE"], [148, 163, 2, "enum_LAST_READ"], [148, 200, 2, "enum_LAST_READ"], [148, 43, 2, "enum_LAST_READ"], [148, 148, 3, "enum_LAST_WRITE"], [148, 49, 3, "enum_LAST_WRITE"], [150, 205, 2, "enum_LAST_READ"], [150, 150, 3, "enum_LAST_WRITE"], [157, 157, 2, "enum_LAST_READ"], [157, 125, 2, "enum_LAST_READ"], [157, 356, 2, "enum_LAST_READ"], [157, 2, 3, "enum_LAST_WRITE"], [163, 163, 2, "enum_LAST_READ"], [163, 200, 2, "enum_LAST_READ"], [163, 43, 2, "enum_LAST_READ"], [163, 148, 3, "enum_LAST_WRITE"], [166, 166, 2, "enum_LAST_READ"], [155, 182, 2, "enum_LAST_READ"], [155, 155, 3, "enum_LAST_WRITE"], [172, 182, 2, "enum_LAST_READ"], [172, 155, 3, "enum_LAST_WRITE"], [174, 180, 2, "enum_LAST_READ"], [174, 114, 3, "enum_LAST_WRITE"], [178, 153, 2, "enum_LAST_READ"], [178, 123, 3, "enum_LAST_WRITE"], [180, 174, 2, "enum_LAST_READ"], [180, 114, 3, "enum_LAST_WRITE"], [182, 172, 2, "enum_LAST_READ"], [182, 155, 3, "enum_LAST_WRITE"], [198, 354, 2, "enum_LAST_READ"], [198, 203, 2, "enum_LAST_READ"], [198, 13, 3, "enum_LAST_WRITE"], [200, 163, 2, "enum_LAST_READ"], [200, 148, 3, "enum_LAST_WRITE"], [203, 198, 2, "enum_LAST_READ"], [203, 13, 3, "enum_LAST_WRITE"], [205, 205, 2, "enum_LAST_READ"], [205, 150, 3, "enum_LAST_WRITE"], [192, 297, 2, "enum_LAST_READ"], [192, 246, 2, "enum_LAST_READ"], [192, 327, 2, "enum_LAST_READ"], [192, 192, 3, "enum_LAST_WRITE"], [211, 211, 2, "enum_LAST_READ"], [211, 81, 2, "enum_LAST_READ"], [211, 4, 3, "enum_LAST_WRITE"], [217, 178, 2, "enum_LAST_READ"], [217, 123, 3, "enum_LAST_WRITE"], [222, 300, 2, "enum_LAST_READ"], [222, 381, 2, "enum_LAST_READ"], [222, 260, 2, "enum_LAST_READ"], [222, 330, 2, "enum_LAST_READ"], [222, 98, 3, "enum_LAST_WRITE"], [222, 85, 3, "enum_LAST_WRITE"], [232, 232, 2, "enum_LAST_READ"], [234, 222, 2, "enum_LAST_READ"], [234, 98, 3, "enum_LAST_WRITE"], [234, 85, 3, "enum_LAST_WRITE"], [227, 264, 2, "enum_LAST_READ"], [227, 227, 3, "enum_LAST_WRITE"], [238, 238, 2, "enum_LAST_READ"], [238, 316, 2, "enum_LAST_READ"], [238, 272, 2, "enum_LAST_READ"], [238, 346, 2, "enum_LAST_READ"], [238, 29, 3, "enum_LAST_WRITE"], [246, 297, 2, "enum_LAST_READ"], [246, 246, 2, "enum_LAST_READ"], [246, 327, 2, "enum_LAST_READ"], [246, 192, 3, "enum_LAST_WRITE"], [248, 264, 2, "enum_LAST_READ"], [248, 227, 3, "enum_LAST_WRITE"], [253, 323, 2, "enum_LAST_READ"], [253, 372, 2, "enum_LAST_READ"], [253, 293, 2, "enum_LAST_READ"], [253, 87, 2, "enum_LAST_READ"], [253, 253, 2, "enum_LAST_READ"], [253, 65, 3, "enum_LAST_WRITE"], [257, 248, 2, "enum_LAST_READ"], [257, 227, 3, "enum_LAST_WRITE"], [260, 234, 2, "enum_LAST_READ"], [260, 98, 3, "enum_LAST_WRITE"], [260, 85, 3, "enum_LAST_WRITE"], [264, 257, 2, "enum_LAST_READ"], [264, 227, 3, "enum_LAST_WRITE"], [272, 238, 2, "enum_LAST_READ"], [272, 316, 2, "enum_LAST_READ"], [272, 272, 2, "enum_LAST_READ"], [272, 346, 2, "enum_LAST_READ"], [272, 29, 3, "enum_LAST_WRITE"], [280, 297, 2, "enum_LAST_READ"], [280, 246, 2, "enum_LAST_READ"], [280, 327, 2, "enum_LAST_READ"], [280, 192, 3, "enum_LAST_WRITE"], [282, 41, 2, "enum_LAST_READ"], [282, 282, 2, "enum_LAST_READ"], [282, 19, 3, "enum_LAST_WRITE"], [284, 217, 2, "enum_LAST_READ"], [284, 123, 3, "enum_LAST_WRITE"], [293, 323, 2, "enum_LAST_READ"], [293, 372, 2, "enum_LAST_READ"], [293, 293, 2, "enum_LAST_READ"], [293, 87, 2, "enum_LAST_READ"], [293, 253, 2, "enum_LAST_READ"], [293, 65, 3, "enum_LAST_WRITE"], [297, 280, 2, "enum_LAST_READ"], [297, 192, 3, "enum_LAST_WRITE"], [300, 222, 2, "enum_LAST_READ"], [300, 98, 3, "enum_LAST_WRITE"], [300, 85, 3, "enum_LAST_WRITE"], [304, 284, 2, "enum_LAST_READ"], [304, 123, 3, "enum_LAST_WRITE"], [316, 238, 2, "enum_LAST_READ"], [316, 316, 2, "enum_LAST_READ"], [316, 272, 2, "enum_LAST_READ"], [316, 346, 2, "enum_LAST_READ"], [316, 29, 3, "enum_LAST_WRITE"], [320, 297, 2, "enum_LAST_READ"], [320, 246, 2, "enum_LAST_READ"], [320, 327, 2, "enum_LAST_READ"], [320, 192, 3, "enum_LAST_WRITE"], [323, 323, 2, "enum_LAST_READ"], [323, 372, 2, "enum_LAST_READ"], [323, 293, 2, "enum_LAST_READ"], [323, 87, 2, "enum_LAST_READ"], [323, 253, 2, "enum_LAST_READ"], [323, 65, 3, "enum_LAST_WRITE"], [327, 320, 2, "enum_LAST_READ"], [327, 192, 3, "enum_LAST_WRITE"], [330, 300, 2, "enum_LAST_READ"], [330, 381, 2, "enum_LAST_READ"], [330, 260, 2, "enum_LAST_READ"], [330, 330, 2, "enum_LAST_READ"], [330, 98, 3, "enum_LAST_WRITE"], [330, 85, 3, "enum_LAST_WRITE"], [334, 178, 2, "enum_LAST_READ"], [334, 123, 3, "enum_LAST_WRITE"], [346, 238, 2, "enum_LAST_READ"], [346, 316, 2, "enum_LAST_READ"], [346, 272, 2, "enum_LAST_READ"], [346, 346, 2, "enum_LAST_READ"], [346, 29, 3, "enum_LAST_WRITE"], [350, 136, 2, "enum_LAST_READ"], [350, 123, 3, "enum_LAST_WRITE"], [354, 354, 2, "enum_LAST_READ"], [354, 203, 2, "enum_LAST_READ"], [354, 13, 3, "enum_LAST_WRITE"], [356, 157, 2, "enum_LAST_READ"], [356, 125, 2, "enum_LAST_READ"], [356, 356, 2, "enum_LAST_READ"], [356, 2, 3, "enum_LAST_WRITE"], [363, 363, 2, "enum_LAST_READ"], [365, 350, 2, "enum_LAST_READ"], [365, 123, 3, "enum_LAST_WRITE"], [372, 323, 2, "enum_LAST_READ"], [372, 372, 2, "enum_LAST_READ"], [372, 293, 2, "enum_LAST_READ"], [372, 87, 2, "enum_LAST_READ"], [372, 253, 2, "enum_LAST_READ"], [372, 65, 3, "enum_LAST_WRITE"], [376, 365, 2, "enum_LAST_READ"], [376, 123, 3, "enum_LAST_WRITE"], [381, 300, 2, "enum_LAST_READ"], [381, 381, 2, "enum_LAST_READ"], [381, 260, 2, "enum_LAST_READ"], [381, 330, 2, "enum_LAST_READ"], [381, 98, 3, "enum_LAST_WRITE"], [381, 85, 3, "enum_LAST_WRITE"], [385, 376, 2, "enum_LAST_READ"], [385, 123, 3, "enum_LAST_WRITE"], [399, 106, 2, "enum_LAST_READ"], [399, 2, 3, "enum_LAST_WRITE"], [413, 399, 2, "enum_LAST_READ"], [413, 2, 3, "enum_LAST_WRITE"], [417, 81, 2, "enum_LAST_READ"], [417, 4, 3, "enum_LAST_WRITE"], [419, 98, 3, "enum_LAST_WRITE"], [419, 85, 3, "enum_LAST_WRITE"], [422, 29, 3, "enum_LAST_WRITE"], [426, 408, 3, "enum_LAST_WRITE"], [429, 87, 2, "enum_LAST_READ"], [429, 65, 3, "enum_LAST_WRITE"], [433, 410, 3, "enum_LAST_WRITE"], [440, 399, 2, "enum_LAST_READ"], [440, 157, 2, "enum_LAST_READ"], [440, 125, 2, "enum_LAST_READ"], [440, 356, 2, "enum_LAST_READ"], [440, 413, 2, "enum_LAST_READ"], [440, 2, 3, "enum_LAST_WRITE"], [450, 316, 2, "enum_LAST_READ"], [450, 238, 2, "enum_LAST_READ"], [450, 422, 2, "enum_LAST_READ"], [450, 272, 2, "enum_LAST_READ"], [450, 346, 2, "enum_LAST_READ"], [450, 29, 3, "enum_LAST_WRITE"], [463, 354, 2, "enum_LAST_READ"], [463, 203, 2, "enum_LAST_READ"], [463, 13, 3, "enum_LAST_WRITE"], [465, 440, 2, "enum_LAST_READ"], [465, 2, 3, "enum_LAST_WRITE"], [473, 163, 2, "enum_LAST_READ"], [473, 200, 2, "enum_LAST_READ"], [473, 43, 2, "enum_LAST_READ"], [473, 148, 3, "enum_LAST_WRITE"], [473, 49, 3, "enum_LAST_WRITE"], [481, 463, 2, "enum_LAST_READ"], [481, 13, 3, "enum_LAST_WRITE"], [485, 473, 2, "enum_LAST_READ"], [485, 148, 3, "enum_LAST_WRITE"], [485, 49, 3, "enum_LAST_WRITE"], [487, 438, 3, "enum_LAST_WRITE"], [499, 485, 2, "enum_LAST_READ"], [499, 148, 3, "enum_LAST_WRITE"], [499, 49, 3, "enum_LAST_WRITE"], [501, 459, 2, "enum_LAST_READ"], [504, 465, 2, "enum_LAST_READ"], [504, 2, 3, "enum_LAST_WRITE"], [523, 504, 2, "enum_LAST_READ"], [523, 2, 3, "enum_LAST_WRITE"], [518, 539, 2, "enum_LAST_READ"], [518, 182, 2, "enum_LAST_READ"], [518, 155, 3, "enum_LAST_WRITE"], [518, 518, 3, "enum_LAST_WRITE"], [520, 304, 2, "enum_LAST_READ"], [520, 385, 2, "enum_LAST_READ"], [520, 334, 2, "enum_LAST_READ"], [520, 365, 2, "enum_LAST_READ"], [520, 554, 2, "enum_LAST_READ"], [520, 217, 2, "enum_LAST_READ"], [520, 625, 2, "enum_LAST_READ"], [520, 36, 2, "enum_LAST_READ"], [520, 178, 2, "enum_LAST_READ"], [520, 123, 3, "enum_LAST_WRITE"], [520, 520, 3, "enum_LAST_WRITE"], [520, 51, 3, "enum_LAST_WRITE"], [537, 542, 2, "enum_LAST_READ"], [537, 481, 2, "enum_LAST_READ"], [537, 13, 3, "enum_LAST_WRITE"], [539, 539, 2, "enum_LAST_READ"], [539, 182, 2, "enum_LAST_READ"], [539, 518, 3, "enum_LAST_WRITE"], [542, 537, 2, "enum_LAST_READ"], [542, 13, 3, "enum_LAST_WRITE"], [544, 304, 2, "enum_LAST_READ"], [544, 385, 2, "enum_LAST_READ"], [544, 334, 2, "enum_LAST_READ"], [544, 365, 2, "enum_LAST_READ"], [544, 554, 2, "enum_LAST_READ"], [544, 217, 2, "enum_LAST_READ"], [544, 625, 2, "enum_LAST_READ"], [544, 36, 2, "enum_LAST_READ"], [544, 178, 2, "enum_LAST_READ"], [544, 520, 3, "enum_LAST_WRITE"], [531, 297, 2, "enum_LAST_READ"], [531, 327, 2, "enum_LAST_READ"], [531, 581, 2, "enum_LAST_READ"], [531, 246, 2, "enum_LAST_READ"], [531, 618, 2, "enum_LAST_READ"], [531, 192, 3, "enum_LAST_WRITE"], [531, 531, 3, "enum_LAST_WRITE"], [551, 551, 2, "enum_LAST_READ"], [551, 81, 2, "enum_LAST_READ"], [551, 211, 2, "enum_LAST_READ"], [551, 417, 2, "enum_LAST_READ"], [551, 4, 3, "enum_LAST_WRITE"], [554, 544, 2, "enum_LAST_READ"], [554, 520, 3, "enum_LAST_WRITE"], [556, 300, 2, "enum_LAST_READ"], [556, 621, 2, "enum_LAST_READ"], [556, 595, 2, "enum_LAST_READ"], [556, 330, 2, "enum_LAST_READ"], [556, 381, 2, "enum_LAST_READ"], [556, 260, 2, "enum_LAST_READ"], [556, 419, 2, "enum_LAST_READ"], [556, 98, 3, "enum_LAST_WRITE"], [556, 85, 3, "enum_LAST_WRITE"], [567, 232, 2, "enum_LAST_READ"], [567, 567, 2, "enum_LAST_READ"], [569, 556, 2, "enum_LAST_READ"], [569, 98, 3, "enum_LAST_WRITE"], [569, 85, 3, "enum_LAST_WRITE"], [562, 599, 2, "enum_LAST_READ"], [562, 264, 2, "enum_LAST_READ"], [562, 227, 3, "enum_LAST_WRITE"], [562, 562, 3, "enum_LAST_WRITE"], [573, 573, 2, "enum_LAST_READ"], [573, 450, 2, "enum_LAST_READ"], [573, 607, 2, "enum_LAST_READ"], [573, 29, 3, "enum_LAST_WRITE"], [581, 297, 2, "enum_LAST_READ"], [581, 327, 2, "enum_LAST_READ"], [581, 581, 2, "enum_LAST_READ"], [581, 246, 2, "enum_LAST_READ"], [581, 618, 2, "enum_LAST_READ"], [581, 531, 3, "enum_LAST_WRITE"], [583, 599, 2, "enum_LAST_READ"], [583, 264, 2, "enum_LAST_READ"], [583, 562, 3, "enum_LAST_WRITE"], [588, 323, 2, "enum_LAST_READ"], [588, 614, 2, "enum_LAST_READ"], [588, 429, 2, "enum_LAST_READ"], [588, 253, 2, "enum_LAST_READ"], [588, 372, 2, "enum_LAST_READ"], [588, 588, 2, "enum_LAST_READ"], [588, 293, 2, "enum_LAST_READ"], [588, 87, 2, "enum_LAST_READ"], [588, 65, 3, "enum_LAST_WRITE"], [592, 583, 2, "enum_LAST_READ"], [592, 562, 3, "enum_LAST_WRITE"], [595, 569, 2, "enum_LAST_READ"], [595, 98, 3, "enum_LAST_WRITE"], [595, 85, 3, "enum_LAST_WRITE"], [599, 592, 2, "enum_LAST_READ"], [599, 562, 3, "enum_LAST_WRITE"], [607, 573, 2, "enum_LAST_READ"], [607, 450, 2, "enum_LAST_READ"], [607, 607, 2, "enum_LAST_READ"], [607, 29, 3, "enum_LAST_WRITE"], [611, 297, 2, "enum_LAST_READ"], [611, 327, 2, "enum_LAST_READ"], [611, 581, 2, "enum_LAST_READ"], [611, 246, 2, "enum_LAST_READ"], [611, 618, 2, "enum_LAST_READ"], [611, 531, 3, "enum_LAST_WRITE"], [614, 323, 2, "enum_LAST_READ"], [614, 614, 2, "enum_LAST_READ"], [614, 429, 2, "enum_LAST_READ"], [614, 253, 2, "enum_LAST_READ"], [614, 372, 2, "enum_LAST_READ"], [614, 588, 2, "enum_LAST_READ"], [614, 293, 2, "enum_LAST_READ"], [614, 87, 2, "enum_LAST_READ"], [614, 65, 3, "enum_LAST_WRITE"], [618, 611, 2, "enum_LAST_READ"], [618, 531, 3, "enum_LAST_WRITE"], [621, 556, 2, "enum_LAST_READ"], [621, 98, 3, "enum_LAST_WRITE"], [621, 85, 3, "enum_LAST_WRITE"], [625, 554, 2, "enum_LAST_READ"], [625, 520, 3, "enum_LAST_WRITE"], [634, 323, 2, "enum_LAST_READ"], [634, 614, 2, "enum_LAST_READ"], [634, 429, 2, "enum_LAST_READ"], [634, 253, 2, "enum_LAST_READ"], [634, 372, 2, "enum_LAST_READ"], [634, 588, 2, "enum_LAST_READ"], [634, 293, 2, "enum_LAST_READ"], [634, 87, 2, "enum_LAST_READ"], [634, 65, 3, "enum_LAST_WRITE"], [630, 523, 2, "enum_LAST_READ"], [630, 2, 3, "enum_LAST_WRITE"], [637, 573, 2, "enum_LAST_READ"], [637, 450, 2, "enum_LAST_READ"], [637, 607, 2, "enum_LAST_READ"], [637, 29, 3, "enum_LAST_WRITE"], [13, 15, 4, "enum_COMPUTED_FROM"], [19, 21, 4, "enum_COMPUTED_FROM"], [29, 49, 4, "enum_COMPUTED_FROM"], [29, 51, 4, "enum_COMPUTED_FROM"], [29, 36, 4, "enum_COMPUTED_FROM"], [29, 41, 4, "enum_COMPUTED_FROM"], [29, 43, 4, "enum_COMPUTED_FROM"], [29, 54, 4, "enum_COMPUTED_FROM"], [65, 67, 4, "enum_COMPUTED_FROM"], [65, 69, 4, "enum_COMPUTED_FROM"], [438, 440, 4, "enum_COMPUTED_FROM"], [631, 634, 4, "enum_COMPUTED_FROM"], [85, 87, 4, "enum_COMPUTED_FROM"], [98, 100, 4, "enum_COMPUTED_FROM"], [114, 116, 4, "enum_COMPUTED_FROM"], [531, 537, 4, "enum_COMPUTED_FROM"], [531, 539, 4, "enum_COMPUTED_FROM"], [531, 542, 4, "enum_COMPUTED_FROM"], [531, 544, 4, "enum_COMPUTED_FROM"], [409, 417, 4, "enum_COMPUTED_FROM"], [409, 419, 4, "enum_COMPUTED_FROM"], [409, 413, 4, "enum_COMPUTED_FROM"], [562, 567, 4, "enum_COMPUTED_FROM"], [562, 569, 4, "enum_COMPUTED_FROM"], [149, 153, 4, "enum_COMPUTED_FROM"], [155, 166, 4, "enum_COMPUTED_FROM"], [155, 163, 4, "enum_COMPUTED_FROM"], [155, 157, 4, "enum_COMPUTED_FROM"], [192, 198, 4, "enum_COMPUTED_FROM"], [192, 200, 4, "enum_COMPUTED_FROM"], [192, 203, 4, "enum_COMPUTED_FROM"], [192, 205, 4, "enum_COMPUTED_FROM"], [227, 232, 4, "enum_COMPUTED_FROM"], [227, 234, 4, "enum_COMPUTED_FROM"]], "error_location": 178, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/Fak3/minidjango.git", "old_path": "django/db/models/sql/compiler.py", "hash": "b2050ff546da4164f90a795e55d7d8c55981783d", "code": "def get_columns(self, with_aliases: bool=False) -> List[str]:\n    \"\"\"\n    Returns the list of columns to use in the select statement. If no\n    columns have been specified, returns all columns relating to fields in\n    the model.\n\n    If 'with_aliases' is true, any column names that are duplicated\n    (without the table names) are given unique aliases. This is needed in\n    some cases to avoid ambiguity with nested queries.\n    \"\"\"\n    qn: Callable[[str], str] = self.quote_name_unless_alias\n    qn2: Callable[[str], str] = self.connection.ops.quote_name\n    result: list[str] = ['(%s) AS %s' % (col[0], qn2(alias)) for alias, col in self.query.extra_select.iteritems()]\n    aliases: Set[str] = set(self.query.extra_select.keys())\n    if with_aliases:\n        col_aliases: Set[str] = aliases.copy()\n    else:\n        col_aliases = set()\n    if self.query.select:\n        only_load: list[str] = self.deferred_to_columns()\n        for col in self.query.select:\n            if isinstance(col, (list, tuple)):\n                alias, column = col\n                table = self.query.alias_map[alias][TABLE_NAME]\n                if table in only_load and col not in only_load[table]:\n                    continue\n                r = '%s.%s' % (qn(alias), qn(column))\n                if with_aliases:\n                    if col[1] in col_aliases:\n                        c_alias = 'Col%d' % len(col_aliases)\n                        result.append('%s AS %s' % (r, c_alias))\n                        aliases.add(c_alias)\n                        col_aliases.add(c_alias)\n                    else:\n                        result.append('%s AS %s' % (r, qn2(col[1])))\n                        aliases.add(r)\n                        col_aliases.add(col[1])\n                else:\n                    result.append(r)\n                    aliases.add(r)\n                    col_aliases.add(col[1])\n            else:\n                result.append(col.as_sql(qn, self.connection))\n\n                if hasattr(col, 'alias'):\n                    aliases.add(col.alias)\n                    col_aliases.add(col.alias)\n\n    elif self.query.default_cols:\n        cols, new_aliases = self.get_default_columns(with_aliases,\n                col_aliases)\n        result.extend(cols)\n        aliases.update(new_aliases)\n\n    max_name_length = self.connection.ops.max_name_length()\n    result.extend([\n        '%s%s' % (\n            aggregate.as_sql(qn, self.connection),\n            alias is not None\n                and ' AS %s' % qn(truncate_name(alias, max_name_length))\n                or ''\n        )\n        for alias, aggregate in self.query.aggregate_select.items()\n    ])\n\n    for table, col in self.query.related_select_cols:\n        r = '%s.%s' % (qn(table), qn(col))\n        if with_aliases and col in col_aliases:\n            c_alias = 'Col%d' % len(col_aliases)\n            result.append('%s AS %s' % (r, c_alias))\n            aliases.add(c_alias)\n            col_aliases.add(c_alias)\n        else:\n            result.append(r)\n            aliases.add(r)\n            col_aliases.add(col)\n\n    self._select_aliases = aliases\n    return result\n", "rewrite": "ReplaceText(target='column' @(172,46)->(172,49))", "error_line": 24, "has_bug": true, "code_full": "from typing import Callable, Dict, List, Set, Tuple, Union\n\nimport TABLE_NAME\nimport truncate_name\n\n\ndef get_columns(self, with_aliases: bool=False) -> List[str]:\n    \"\"\"\n    Returns the list of columns to use in the select statement. If no\n    columns have been specified, returns all columns relating to fields in\n    the model.\n\n    If 'with_aliases' is true, any column names that are duplicated\n    (without the table names) are given unique aliases. This is needed in\n    some cases to avoid ambiguity with nested queries.\n    \"\"\"\n    qn: Callable[[str], str] = self.quote_name_unless_alias\n    qn2: Callable[[str], str] = self.connection.ops.quote_name\n    result: list[str] = ['(%s) AS %s' % (col[0], qn2(alias)) for alias, col in self.query.extra_select.iteritems()]\n    aliases: Set[str] = set(self.query.extra_select.keys())\n    if with_aliases:\n        col_aliases: Set[str] = aliases.copy()\n    else:\n        col_aliases = set()\n    if self.query.select:\n        only_load: list[str] = self.deferred_to_columns()\n        for col in self.query.select:\n            if isinstance(col, (list, tuple)):\n                alias, column = col\n                table = self.query.alias_map[alias][TABLE_NAME]\n                if table in only_load and col not in only_load[table]:\n                    continue\n                r = '%s.%s' % (qn(alias), qn(column))\n                if with_aliases:\n                    if col[1] in col_aliases:\n                        c_alias = 'Col%d' % len(col_aliases)\n                        result.append('%s AS %s' % (r, c_alias))\n                        aliases.add(c_alias)\n                        col_aliases.add(c_alias)\n                    else:\n                        result.append('%s AS %s' % (r, qn2(col[1])))\n                        aliases.add(r)\n                        col_aliases.add(col[1])\n                else:\n                    result.append(r)\n                    aliases.add(r)\n                    col_aliases.add(col[1])\n            else:\n                result.append(col.as_sql(qn, self.connection))\n\n                if hasattr(col, 'alias'):\n                    aliases.add(col.alias)\n                    col_aliases.add(col.alias)\n\n    elif self.query.default_cols:\n        cols, new_aliases = self.get_default_columns(with_aliases,\n                col_aliases)\n        result.extend(cols)\n        aliases.update(new_aliases)\n\n    max_name_length = self.connection.ops.max_name_length()\n    result.extend([\n        '%s%s' % (\n            aggregate.as_sql(qn, self.connection),\n            alias is not None\n                and ' AS %s' % qn(truncate_name(alias, max_name_length))\n                or ''\n        )\n        for alias, aggregate in self.query.aggregate_select.items()\n    ])\n\n    for table, col in self.query.related_select_cols:\n        r = '%s.%s' % (qn(table), qn(col))\n        if with_aliases and col in col_aliases:\n            c_alias = 'Col%d' % len(col_aliases)\n            result.append('%s AS %s' % (r, c_alias))\n            aliases.add(c_alias)\n            col_aliases.add(c_alias)\n        else:\n            result.append(r)\n            aliases.add(r)\n            col_aliases.add(col)\n\n    self._select_aliases = aliases\n    return result\n", "error_location_char": [1152, 1155], "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": ""}
{"source_tokens": ["#NEWLINE#", "def record(", "self", ",", "value", "=", "1.0", ",", "time_ms", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Record a value at a known time.\\n    Arguments:\\n        value (double): The value we are recording\\n        time_ms (int): The current POSIX time in milliseconds\\n\\n    Raises:\\n        QuotaViolationException: if recording this value moves a\\n            metric beyond its configured maximum or minimum bound\\n    '", "#NEWLINE#", "now", "=", "(", "time", ".", "time", "(", ")", "*", "1000", ")", "#NEWLINE#", "if", "(", "time_ms", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "time_ms", "=", "now", "#NEWLINE#", "#UNINDENT#", "self", ".", "_last_record_time", "=", "now", "#NEWLINE#", "with", "self", ".", "_lock", ":", "#NEWLINE#", "#INDENT#", "for", "stat", "in", "self", ".", "_stats", ":", "#NEWLINE#", "#INDENT#", "stat", ".", "record", "(", "self", ".", "_config", ",", "value", ",", "time_ms", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "_check_quotas", "(", "time_ms", ")", "#NEWLINE#", "#UNINDENT#", "for", "parent", "in", "self", ".", "_parents", ":", "#NEWLINE#", "#INDENT#", "parent", ".", "record", "(", "value", ",", "time_ms", ")"], "edges": [[1, 5, 7, "enum_FIELD"], [14, 15, 7, "enum_FIELD"], [16, 25, 7, "enum_FIELD"], [29, 32, 7, "enum_FIELD"], [42, 47, 7, "enum_FIELD"], [89, 88, 7, "enum_FIELD"], [89, 91, 7, "enum_FIELD"], [25, 23, 7, "enum_FIELD"], [25, 26, 7, "enum_FIELD"], [32, 31, 7, "enum_FIELD"], [37, 40, 7, "enum_FIELD"], [44, 43, 7, "enum_FIELD"], [58, 57, 7, "enum_FIELD"], [58, 60, 7, "enum_FIELD"], [78, 82, 7, "enum_FIELD"], [91, 90, 7, "enum_FIELD"], [95, 101, 7, "enum_FIELD"], [23, 21, 7, "enum_FIELD"], [51, 50, 7, "enum_FIELD"], [60, 59, 7, "enum_FIELD"], [64, 72, 7, "enum_FIELD"], [82, 80, 7, "enum_FIELD"], [101, 97, 7, "enum_FIELD"], [21, 20, 7, "enum_FIELD"], [72, 66, 7, "enum_FIELD"], [80, 79, 7, "enum_FIELD"], [97, 96, 7, "enum_FIELD"], [66, 65, 7, "enum_FIELD"], [70, 69, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [31, 8, 10, "enum_LAST_LEXICAL_USE"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 37, 9, "enum_NEXT_SYNTAX"], [38, 31, 10, "enum_LAST_LEXICAL_USE"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [40, 17, 10, "enum_LAST_LEXICAL_USE"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 42, 9, "enum_NEXT_SYNTAX"], [43, 2, 10, "enum_LAST_LEXICAL_USE"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [47, 40, 10, "enum_LAST_LEXICAL_USE"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 49, 9, "enum_NEXT_SYNTAX"], [50, 43, 10, "enum_LAST_LEXICAL_USE"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [59, 50, 10, "enum_LAST_LEXICAL_USE"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 64, 9, "enum_NEXT_SYNTAX"], [65, 57, 10, "enum_LAST_LEXICAL_USE"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [69, 59, 10, "enum_LAST_LEXICAL_USE"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [73, 4, 10, "enum_LAST_LEXICAL_USE"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [75, 38, 10, "enum_LAST_LEXICAL_USE"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 78, 9, "enum_NEXT_SYNTAX"], [79, 69, 10, "enum_LAST_LEXICAL_USE"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [83, 75, 10, "enum_LAST_LEXICAL_USE"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [90, 79, 10, "enum_LAST_LEXICAL_USE"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 95, 9, "enum_NEXT_SYNTAX"], [96, 88, 10, "enum_LAST_LEXICAL_USE"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [100, 73, 10, "enum_LAST_LEXICAL_USE"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [102, 83, 10, "enum_LAST_LEXICAL_USE"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [6, 10, 1, "enum_CFG_NEXT"], [10, 1, 1, "enum_CFG_NEXT"], [5, 14, 1, "enum_CFG_NEXT"], [14, 16, 1, "enum_CFG_NEXT"], [16, 32, 1, "enum_CFG_NEXT"], [32, 42, 1, "enum_CFG_NEXT"], [32, 37, 1, "enum_CFG_NEXT"], [37, 42, 1, "enum_CFG_NEXT"], [42, 91, 1, "enum_CFG_NEXT"], [91, 88, 1, "enum_CFG_NEXT"], [88, 95, 1, "enum_CFG_NEXT"], [95, 88, 1, "enum_CFG_NEXT"], [31, 8, 3, "enum_LAST_WRITE"], [40, 17, 3, "enum_LAST_WRITE"], [38, 31, 2, "enum_LAST_READ"], [38, 8, 3, "enum_LAST_WRITE"], [47, 40, 2, "enum_LAST_READ"], [47, 17, 3, "enum_LAST_WRITE"], [43, 2, 3, "enum_LAST_WRITE"], [90, 43, 2, "enum_LAST_READ"], [90, 2, 3, "enum_LAST_WRITE"], [88, 96, 2, "enum_LAST_READ"], [88, 88, 3, "enum_LAST_WRITE"], [96, 96, 2, "enum_LAST_READ"], [96, 88, 3, "enum_LAST_WRITE"], [100, 100, 2, "enum_LAST_READ"], [100, 4, 3, "enum_LAST_WRITE"], [102, 102, 2, "enum_LAST_READ"], [102, 31, 2, "enum_LAST_READ"], [102, 38, 3, "enum_LAST_WRITE"], [102, 8, 3, "enum_LAST_WRITE"], [17, 20, 4, "enum_COMPUTED_FROM"], [44, 47, 4, "enum_COMPUTED_FROM"], [38, 40, 4, "enum_COMPUTED_FROM"]], "error_location": 47, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/thaiphamquoc/kafka-python.git", "old_path": "kafka/metrics/stats/sensor.py", "hash": "416f50b6f78328878e950d7bd8dd902c52d35b13", "code": "def record(self, value: float=1.0, time_ms: Optional[float]=None) -> None:\n    \"\"\"\n    Record a value at a known time.\n    Arguments:\n        value (double): The value we are recording\n        time_ms (int): The current POSIX time in milliseconds\n\n    Raises:\n        QuotaViolationException: if recording this value moves a\n            metric beyond its configured maximum or minimum bound\n    \"\"\"\n    now: float = time.time() * 1000\n    if time_ms is None:\n        time_ms = now\n    self._last_record_time = now\n    with self._lock:  # XXX high volume, might be performance issue\n        # increment all the stats\n        for stat in self._stats:\n            stat.record(self._config, value, time_ms)\n        self._check_quotas(time_ms)\n    for parent in self._parents:\n        parent.record(value, time_ms)\n", "rewrite": "ReplaceText(target='time_ms' @(67,33)->(67,36))", "error_line": 14, "has_bug": true, "code_full": "import time\nfrom typing import Optional\n\n\ndef record(self, value: float=1.0, time_ms: Optional[float]=None) -> None:\n    \"\"\"\n    Record a value at a known time.\n    Arguments:\n        value (double): The value we are recording\n        time_ms (int): The current POSIX time in milliseconds\n\n    Raises:\n        QuotaViolationException: if recording this value moves a\n            metric beyond its configured maximum or minimum bound\n    \"\"\"\n    now: float = time.time() * 1000\n    if time_ms is None:\n        time_ms = now\n    self._last_record_time = now\n    with self._lock:  # XXX high volume, might be performance issue\n        # increment all the stats\n        for stat in self._stats:\n            stat.record(self._config, value, time_ms)\n        self._check_quotas(time_ms)\n    for parent in self._parents:\n        parent.record(value, time_ms)\n", "error_location_char": [510, 513], "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": ""}
{"source_tokens": ["#NEWLINE#", "def process_steps(", "self", ",", "beddf", ",", "newPath", ",", "parentId", ",", "databaseSynId", ",", "seq_assay_id", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Process bed file, update bed database, write bed file to path\\n\\n    Args:\\n        beddf: Bed dataframe\\n        newPath: Path to new bed file\\n        parentId: Synapse id to store gene panel file\\n        databaseSynId: Synapse id of bed database\\n        seq_assay_id: GENIE seq assay id\\n\\n    Returns:\\n        string: Path to new bed file\\n    '", "#NEWLINE#", "final_beddf", "=", "self", ".", "_process", "(", "beddf", ",", "seq_assay_id", ",", "newPath", ",", "parentId", ")", "#NEWLINE#", "process_functions", ".", "updateData", "(", "self", ".", "syn", ",", "databaseSynId", ",", "beddf", ",", "seq_assay_id", ",", "filterByColumn", "=", "'SEQ_ASSAY_ID'", ",", "toDelete", "=", "True", ")", "#NEWLINE#", "final_beddf", ".", "to_csv", "(", "newPath", ",", "sep", "=", "'\\t'", ",", "index", "=", "False", ")", "#NEWLINE#", "return", "newPath"], "edges": [[1, 7, 7, "enum_FIELD"], [16, 17, 7, "enum_FIELD"], [18, 28, 7, "enum_FIELD"], [33, 45, 7, "enum_FIELD"], [56, 62, 7, "enum_FIELD"], [72, 73, 7, "enum_FIELD"], [28, 22, 7, "enum_FIELD"], [45, 35, 7, "enum_FIELD"], [62, 58, 7, "enum_FIELD"], [22, 21, 7, "enum_FIELD"], [35, 34, 7, "enum_FIELD"], [39, 38, 7, "enum_FIELD"], [48, 50, 7, "enum_FIELD"], [52, 54, 7, "enum_FIELD"], [58, 57, 7, "enum_FIELD"], [63, 65, 7, "enum_FIELD"], [67, 69, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [21, 2, 10, "enum_LAST_LEXICAL_USE"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [25, 4, 10, "enum_LAST_LEXICAL_USE"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [27, 12, 10, "enum_LAST_LEXICAL_USE"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [29, 6, 10, "enum_LAST_LEXICAL_USE"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [31, 8, 10, "enum_LAST_LEXICAL_USE"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [38, 21, 10, "enum_LAST_LEXICAL_USE"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [42, 10, 10, "enum_LAST_LEXICAL_USE"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [44, 25, 10, "enum_LAST_LEXICAL_USE"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [46, 27, 10, "enum_LAST_LEXICAL_USE"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [57, 19, 10, "enum_LAST_LEXICAL_USE"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [61, 29, 10, "enum_LAST_LEXICAL_USE"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 72, 9, "enum_NEXT_SYNTAX"], [73, 61, 10, "enum_LAST_LEXICAL_USE"], [72, 73, 9, "enum_NEXT_SYNTAX"], [7, 16, 1, "enum_CFG_NEXT"], [16, 18, 1, "enum_CFG_NEXT"], [18, 33, 1, "enum_CFG_NEXT"], [33, 56, 1, "enum_CFG_NEXT"], [56, 72, 1, "enum_CFG_NEXT"], [21, 2, 3, "enum_LAST_WRITE"], [25, 4, 3, "enum_LAST_WRITE"], [27, 12, 3, "enum_LAST_WRITE"], [29, 6, 3, "enum_LAST_WRITE"], [31, 8, 3, "enum_LAST_WRITE"], [38, 21, 2, "enum_LAST_READ"], [38, 2, 3, "enum_LAST_WRITE"], [42, 10, 3, "enum_LAST_WRITE"], [44, 25, 2, "enum_LAST_READ"], [44, 4, 3, "enum_LAST_WRITE"], [46, 27, 2, "enum_LAST_READ"], [46, 12, 3, "enum_LAST_WRITE"], [57, 19, 3, "enum_LAST_WRITE"], [61, 29, 2, "enum_LAST_READ"], [61, 6, 3, "enum_LAST_WRITE"], [73, 61, 2, "enum_LAST_READ"], [73, 6, 3, "enum_LAST_WRITE"], [19, 25, 4, "enum_COMPUTED_FROM"], [19, 27, 4, "enum_COMPUTED_FROM"], [19, 29, 4, "enum_COMPUTED_FROM"], [19, 31, 4, "enum_COMPUTED_FROM"], [19, 21, 4, "enum_COMPUTED_FROM"]], "error_location": 44, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/Sage-Bionetworks/Genie.git", "old_path": "genie/bed.py", "hash": "e140dee708542afa35c5d1e30671d8083fcbcd29", "code": "def process_steps(self, beddf: pd.DataFrame, newPath: str, parentId: str, databaseSynId: str,\n                seq_assay_id: str) -> str:\n    \"\"\"\n    Process bed file, update bed database, write bed file to path\n\n    Args:\n        beddf: Bed dataframe\n        newPath: Path to new bed file\n        parentId: Synapse id to store gene panel file\n        databaseSynId: Synapse id of bed database\n        seq_assay_id: GENIE seq assay id\n\n    Returns:\n        string: Path to new bed file\n    \"\"\"\n    final_beddf = self._process(beddf, seq_assay_id, newPath, parentId)\n    process_functions.updateData(self.syn, databaseSynId, beddf,\n                                seq_assay_id,\n                                filterByColumn=\"SEQ_ASSAY_ID\",\n                                toDelete=True)\n    final_beddf.to_csv(newPath, sep=\"\t\", index=False)\n    return newPath\n", "rewrite": "ReplaceText(target='final_beddf' @(515,62)->(515,67))", "error_line": 16, "has_bug": true, "code_full": "from typing import Any\n\nimport pandas as pd\n\n\nclass Functions:\n    def updateData(self, syn: Any, synId: str, df: pd.DataFrame, seq_assay_id: str, filterByColumn: str, toDelete: bool = False) -> None:\n        pass\n\nprocess_functions = Functions()\n\nclass Program:\n    syn: Any\n\n    def _process(self, beddf: pd.DataFrame, seq_assay_id: str, newPath: str, parentId: str) -> pd.DataFrame:\n        pass\n    \n    def process_steps(self, beddf: pd.DataFrame, newPath: str, parentId: str, databaseSynId: str,\n                    seq_assay_id: str) -> str:\n        \"\"\"\n        Process bed file, update bed database, write bed file to path\n\n        Args:\n            beddf: Bed dataframe\n            newPath: Path to new bed file\n            parentId: Synapse id to store gene panel file\n            databaseSynId: Synapse id of bed database\n            seq_assay_id: GENIE seq assay id\n\n        Returns:\n            string: Path to new bed file\n        \"\"\"\n        final_beddf = self._process(beddf, seq_assay_id, newPath, parentId)\n        process_functions.updateData(self.syn, databaseSynId, beddf,\n                                    seq_assay_id,\n                                    filterByColumn=\"SEQ_ASSAY_ID\",\n                                    toDelete=True)\n        final_beddf.to_csv(newPath, sep=\"\t\", index=False)\n        return newPath\n", "error_location_char": [623, 628], "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": ""}
{"source_tokens": ["#NEWLINE#", "def build_value(", "self", ",", "obj", ")", ":", "#NEWLINE#", "#INDENT#", "target_getter", "=", "self", ".", "resolve_target", "(", "obj", "=", "obj", ",", "target_name", "=", "self", ".", "target", ")", "#NEWLINE#", "target", "=", "target_getter", "(", ")", "#NEWLINE#", "dehydrator", "=", "self", ".", "dehydrator_cls", "(", "fields", "=", "self", ".", "fields", ")", "#NEWLINE#", "if", "self", ".", "is_iterable", ":", "#NEWLINE#", "#INDENT#", "return", "map", "(", "dehydrator", ".", "dehydrate", ",", "target", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "return", "dehydrator", ".", "dehydrate", "(", "obj", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [8, 18, 7, "enum_FIELD"], [25, 29, 7, "enum_FIELD"], [31, 37, 7, "enum_FIELD"], [49, 47, 7, "enum_FIELD"], [18, 12, 7, "enum_FIELD"], [29, 28, 7, "enum_FIELD"], [37, 35, 7, "enum_FIELD"], [47, 46, 7, "enum_FIELD"], [52, 58, 7, "enum_FIELD"], [67, 71, 7, "enum_FIELD"], [12, 11, 7, "enum_FIELD"], [15, 17, 7, "enum_FIELD"], [19, 22, 7, "enum_FIELD"], [35, 34, 7, "enum_FIELD"], [38, 41, 7, "enum_FIELD"], [58, 53, 7, "enum_FIELD"], [71, 69, 7, "enum_FIELD"], [22, 21, 7, "enum_FIELD"], [41, 40, 7, "enum_FIELD"], [56, 55, 7, "enum_FIELD"], [69, 68, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [11, 2, 10, "enum_LAST_LEXICAL_USE"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [17, 4, 10, "enum_LAST_LEXICAL_USE"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [21, 11, 10, "enum_LAST_LEXICAL_USE"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [28, 9, 10, "enum_LAST_LEXICAL_USE"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [34, 21, 10, "enum_LAST_LEXICAL_USE"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [40, 34, 10, "enum_LAST_LEXICAL_USE"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 45, 9, "enum_NEXT_SYNTAX"], [46, 40, 10, "enum_LAST_LEXICAL_USE"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [55, 32, 10, "enum_LAST_LEXICAL_USE"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [59, 26, 10, "enum_LAST_LEXICAL_USE"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 67, 9, "enum_NEXT_SYNTAX"], [68, 55, 10, "enum_LAST_LEXICAL_USE"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [72, 17, 10, "enum_LAST_LEXICAL_USE"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [3, 8, 1, "enum_CFG_NEXT"], [8, 25, 1, "enum_CFG_NEXT"], [25, 31, 1, "enum_CFG_NEXT"], [31, 47, 1, "enum_CFG_NEXT"], [47, 52, 1, "enum_CFG_NEXT"], [47, 67, 1, "enum_CFG_NEXT"], [11, 2, 3, "enum_LAST_WRITE"], [17, 4, 3, "enum_LAST_WRITE"], [21, 11, 2, "enum_LAST_READ"], [21, 2, 3, "enum_LAST_WRITE"], [28, 9, 3, "enum_LAST_WRITE"], [34, 21, 2, "enum_LAST_READ"], [34, 2, 3, "enum_LAST_WRITE"], [40, 34, 2, "enum_LAST_READ"], [40, 2, 3, "enum_LAST_WRITE"], [46, 40, 2, "enum_LAST_READ"], [46, 2, 3, "enum_LAST_WRITE"], [55, 32, 3, "enum_LAST_WRITE"], [59, 26, 3, "enum_LAST_WRITE"], [68, 32, 3, "enum_LAST_WRITE"], [72, 17, 2, "enum_LAST_READ"], [72, 4, 3, "enum_LAST_WRITE"], [9, 11, 4, "enum_COMPUTED_FROM"], [9, 17, 4, "enum_COMPUTED_FROM"], [9, 21, 4, "enum_COMPUTED_FROM"], [26, 28, 4, "enum_COMPUTED_FROM"], [32, 34, 4, "enum_COMPUTED_FROM"], [32, 40, 4, "enum_COMPUTED_FROM"]], "error_location": 72, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/l0kix2/python-dehydrate.git", "old_path": "dehydrate/fields.py", "hash": "47212c6e5d2433bbe399dfbdb01ba65b48c5636b", "code": "def build_value(self, obj: object):\n    target_getter = self.resolve_target(obj=obj, target_name=self.target)\n    target = target_getter()\n\n    dehydrator = self.dehydrator_cls(fields=self.fields)\n    if self.is_iterable:\n        return map(dehydrator.dehydrate, target)\n    else:\n        return dehydrator.dehydrate(obj)\n", "rewrite": "ReplaceText(target='target' @(154,40)->(154,43))", "error_line": 8, "has_bug": true, "code_full": "\nfrom typing import Any, Callable, Dict, List\n\n\nclass Dehydrator:\n    fields: List[str]\n\n    def __init__(self, fields: List[str]) -> None:\n        self.fields = fields\n\n    def dehydrate(self, obj: Any) -> Dict[str, Any]:\n        return {}\n\nclass Field:\n    dehydrator_cls = Dehydrator\n    target: str\n    fields: List[str]\n    is_iterable: bool\n\n    def resolve_target(self, obj: object, target_name: str) -> Callable[[], Any]:\n        return lambda: \"dummy\"\n\n\n    def build_value(self, obj: object):\n        target_getter = self.resolve_target(obj=obj, target_name=self.target)\n        target = target_getter()\n\n        dehydrator = self.dehydrator_cls(fields=self.fields)\n        if self.is_iterable:\n            return map(dehydrator.dehydrate, target)\n        else:\n            return dehydrator.dehydrate(obj)\n", "error_location_char": [317, 320], "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": ""}
{"source_tokens": ["#NEWLINE#", "def _evaluate_predict_element(", "model", ",", "triple_index", ",", "num_expands", ",", "element_type", ",", "rank_fn", ",", "ranks_list", ",", "filtered_ranks_list", ")", ":", "#NEWLINE#", "#INDENT#", "batch", "=", "data", ".", "expand_triple_to_sets", "(", "kgekit", ".", "data", ".", "unpack", "(", "triple_index", ")", ",", "num_expands", ",", "element_type", ")", "#NEWLINE#", "batch", "=", "data", ".", "convert_triple_tuple_to_torch", "(", "batch", ")", "#NEWLINE#", "logging", ".", "debug", "(", "element_type", ")", "#NEWLINE#", "logging", ".", "debug", "(", "(", "(", "(", "'Batch len: '", "+", "str", "(", "len", "(", "batch", ")", ")", ")", "+", "'; batch sample: '", ")", "+", "str", "(", "batch", "[", "0", "]", ")", ")", ")", "#NEWLINE#", "predicted_batch", "=", "model", ".", "forward", "(", "batch", ")", ".", "cpu", "(", ")", "#NEWLINE#", "logging", ".", "debug", "(", "(", "(", "(", "'Predicted batch len'", "+", "str", "(", "len", "(", "batch", ")", ")", ")", "+", "'; batch sample: '", ")", "+", "str", "(", "predicted_batch", "[", "0", "]", ")", ")", ")", "#NEWLINE#", "(", "rank", ",", "filtered_rank", ")", "=", "rank_fn", "(", "predicted_batch", ".", "data", ".", "numpy", "(", ")", ",", "triple_index", ")", "#NEWLINE#", "logging", ".", "debug", "(", "(", "(", "(", "'Rank :'", "+", "str", "(", "rank", ")", ")", "+", "'; Filtered rank length :'", ")", "+", "str", "(", "filtered_rank", ")", ")", ")", "#NEWLINE#", "ranks_list", ".", "append", "(", "rank", ")", "#NEWLINE#", "filtered_ranks_list", ".", "append", "(", "filtered_rank", ")"], "edges": [[1, 7, 7, "enum_FIELD"], [18, 33, 7, "enum_FIELD"], [38, 44, 7, "enum_FIELD"], [47, 51, 7, "enum_FIELD"], [54, 58, 7, "enum_FIELD"], [85, 96, 7, "enum_FIELD"], [98, 102, 7, "enum_FIELD"], [129, 145, 7, "enum_FIELD"], [148, 152, 7, "enum_FIELD"], [173, 177, 7, "enum_FIELD"], [180, 184, 7, "enum_FIELD"], [33, 22, 7, "enum_FIELD"], [44, 42, 7, "enum_FIELD"], [51, 49, 7, "enum_FIELD"], [58, 56, 7, "enum_FIELD"], [96, 94, 7, "enum_FIELD"], [102, 100, 7, "enum_FIELD"], [145, 136, 7, "enum_FIELD"], [152, 150, 7, "enum_FIELD"], [177, 175, 7, "enum_FIELD"], [184, 182, 7, "enum_FIELD"], [22, 21, 7, "enum_FIELD"], [30, 28, 7, "enum_FIELD"], [42, 41, 7, "enum_FIELD"], [49, 48, 7, "enum_FIELD"], [56, 55, 7, "enum_FIELD"], [75, 72, 7, "enum_FIELD"], [75, 77, 7, "enum_FIELD"], [94, 91, 7, "enum_FIELD"], [100, 99, 7, "enum_FIELD"], [119, 116, 7, "enum_FIELD"], [119, 121, 7, "enum_FIELD"], [143, 141, 7, "enum_FIELD"], [150, 149, 7, "enum_FIELD"], [166, 163, 7, "enum_FIELD"], [166, 168, 7, "enum_FIELD"], [175, 174, 7, "enum_FIELD"], [182, 181, 7, "enum_FIELD"], [28, 26, 7, "enum_FIELD"], [72, 63, 7, "enum_FIELD"], [72, 73, 7, "enum_FIELD"], [77, 76, 7, "enum_FIELD"], [91, 89, 7, "enum_FIELD"], [116, 107, 7, "enum_FIELD"], [116, 117, 7, "enum_FIELD"], [121, 120, 7, "enum_FIELD"], [141, 139, 7, "enum_FIELD"], [163, 157, 7, "enum_FIELD"], [163, 164, 7, "enum_FIELD"], [168, 167, 7, "enum_FIELD"], [26, 25, 7, "enum_FIELD"], [63, 62, 7, "enum_FIELD"], [63, 65, 7, "enum_FIELD"], [79, 78, 7, "enum_FIELD"], [79, 80, 7, "enum_FIELD"], [89, 88, 7, "enum_FIELD"], [107, 106, 7, "enum_FIELD"], [107, 109, 7, "enum_FIELD"], [123, 122, 7, "enum_FIELD"], [123, 124, 7, "enum_FIELD"], [139, 138, 7, "enum_FIELD"], [157, 156, 7, "enum_FIELD"], [157, 159, 7, "enum_FIELD"], [65, 64, 7, "enum_FIELD"], [109, 108, 7, "enum_FIELD"], [159, 158, 7, "enum_FIELD"], [67, 66, 7, "enum_FIELD"], [111, 110, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [31, 4, 10, "enum_LAST_LEXICAL_USE"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [34, 6, 10, "enum_LAST_LEXICAL_USE"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [36, 8, 10, "enum_LAST_LEXICAL_USE"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [39, 19, 10, "enum_LAST_LEXICAL_USE"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [41, 21, 10, "enum_LAST_LEXICAL_USE"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [45, 39, 10, "enum_LAST_LEXICAL_USE"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [52, 36, 10, "enum_LAST_LEXICAL_USE"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [55, 48, 10, "enum_LAST_LEXICAL_USE"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [68, 45, 10, "enum_LAST_LEXICAL_USE"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [76, 64, 10, "enum_LAST_LEXICAL_USE"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [78, 68, 10, "enum_LAST_LEXICAL_USE"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [88, 2, 10, "enum_LAST_LEXICAL_USE"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [92, 78, 10, "enum_LAST_LEXICAL_USE"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [99, 55, 10, "enum_LAST_LEXICAL_USE"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [108, 76, 10, "enum_LAST_LEXICAL_USE"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [110, 66, 10, "enum_LAST_LEXICAL_USE"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [112, 92, 10, "enum_LAST_LEXICAL_USE"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [120, 108, 10, "enum_LAST_LEXICAL_USE"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [122, 86, 10, "enum_LAST_LEXICAL_USE"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [136, 10, 10, "enum_LAST_LEXICAL_USE"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [138, 122, 10, "enum_LAST_LEXICAL_USE"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [146, 31, 10, "enum_LAST_LEXICAL_USE"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [149, 99, 10, "enum_LAST_LEXICAL_USE"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [158, 120, 10, "enum_LAST_LEXICAL_USE"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [160, 131, 10, "enum_LAST_LEXICAL_USE"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [167, 158, 10, "enum_LAST_LEXICAL_USE"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [169, 133, 10, "enum_LAST_LEXICAL_USE"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [174, 12, 10, "enum_LAST_LEXICAL_USE"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [178, 160, 10, "enum_LAST_LEXICAL_USE"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 180, 9, "enum_NEXT_SYNTAX"], [181, 14, 10, "enum_LAST_LEXICAL_USE"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 184, 9, "enum_NEXT_SYNTAX"], [185, 169, 10, "enum_LAST_LEXICAL_USE"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [7, 18, 1, "enum_CFG_NEXT"], [18, 38, 1, "enum_CFG_NEXT"], [38, 47, 1, "enum_CFG_NEXT"], [47, 54, 1, "enum_CFG_NEXT"], [54, 85, 1, "enum_CFG_NEXT"], [85, 98, 1, "enum_CFG_NEXT"], [98, 129, 1, "enum_CFG_NEXT"], [129, 148, 1, "enum_CFG_NEXT"], [148, 173, 1, "enum_CFG_NEXT"], [173, 180, 1, "enum_CFG_NEXT"], [31, 4, 3, "enum_LAST_WRITE"], [34, 6, 3, "enum_LAST_WRITE"], [36, 8, 3, "enum_LAST_WRITE"], [41, 21, 2, "enum_LAST_READ"], [45, 19, 3, "enum_LAST_WRITE"], [39, 45, 2, "enum_LAST_READ"], [39, 19, 3, "enum_LAST_WRITE"], [52, 36, 2, "enum_LAST_READ"], [52, 8, 3, "enum_LAST_WRITE"], [55, 48, 2, "enum_LAST_READ"], [68, 45, 2, "enum_LAST_READ"], [68, 39, 3, "enum_LAST_WRITE"], [76, 64, 2, "enum_LAST_READ"], [78, 68, 2, "enum_LAST_READ"], [78, 39, 3, "enum_LAST_WRITE"], [88, 2, 3, "enum_LAST_WRITE"], [92, 78, 2, "enum_LAST_READ"], [92, 39, 3, "enum_LAST_WRITE"], [99, 55, 2, "enum_LAST_READ"], [108, 76, 2, "enum_LAST_READ"], [110, 66, 2, "enum_LAST_READ"], [112, 92, 2, "enum_LAST_READ"], [112, 39, 3, "enum_LAST_WRITE"], [120, 108, 2, "enum_LAST_READ"], [122, 86, 3, "enum_LAST_WRITE"], [136, 10, 3, "enum_LAST_WRITE"], [138, 122, 2, "enum_LAST_READ"], [138, 86, 3, "enum_LAST_WRITE"], [146, 31, 2, "enum_LAST_READ"], [146, 4, 3, "enum_LAST_WRITE"], [149, 99, 2, "enum_LAST_READ"], [158, 120, 2, "enum_LAST_READ"], [160, 131, 3, "enum_LAST_WRITE"], [167, 158, 2, "enum_LAST_READ"], [169, 133, 3, "enum_LAST_WRITE"], [174, 12, 3, "enum_LAST_WRITE"], [178, 160, 2, "enum_LAST_READ"], [178, 131, 3, "enum_LAST_WRITE"], [181, 14, 3, "enum_LAST_WRITE"], [185, 169, 2, "enum_LAST_READ"], [185, 133, 3, "enum_LAST_WRITE"], [19, 34, 4, "enum_COMPUTED_FROM"], [19, 36, 4, "enum_COMPUTED_FROM"], [19, 21, 4, "enum_COMPUTED_FROM"], [19, 31, 4, "enum_COMPUTED_FROM"], [19, 25, 4, "enum_COMPUTED_FROM"], [39, 45, 4, "enum_COMPUTED_FROM"], [39, 41, 4, "enum_COMPUTED_FROM"], [86, 92, 4, "enum_COMPUTED_FROM"], [86, 88, 4, "enum_COMPUTED_FROM"], [132, 136, 4, "enum_COMPUTED_FROM"], [132, 146, 4, "enum_COMPUTED_FROM"], [132, 138, 4, "enum_COMPUTED_FROM"]], "error_location": 112, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/fantasticfears/kgegrok.git", "old_path": "estimate.py", "hash": "cc7f0c2a3ed727b7f2cc656c6205be6e08be9f23", "code": "def _evaluate_predict_element(model: Model, triple_index:int, num_expands: int, element_type: str, rank_fn: Callable[[np.ndarray, int], Tuple[int, int]], ranks_list: List[int], filtered_ranks_list: list[int]):\n    batch = data.expand_triple_to_sets(kgekit.data.unpack(triple_index), num_expands, element_type)\n    batch = data.convert_triple_tuple_to_torch(batch)\n    logging.debug(element_type)\n    logging.debug(\"Batch len: \" + str(len(batch)) + \"; batch sample: \" + str(batch[0]))\n    predicted_batch = model.forward(batch).cpu()\n    logging.debug(\"Predicted batch len\" + str(len(batch)) + \"; batch sample: \" + str(predicted_batch[0]))\n    rank, filtered_rank = rank_fn(predicted_batch.data.numpy(), triple_index)\n    logging.debug(\"Rank :\" + str(rank) + \"; Filtered rank length :\" + str(filtered_rank))\n    ranks_list.append(rank)\n    filtered_ranks_list.append(filtered_rank)\n", "rewrite": "ReplaceText(target='predicted_batch' @(18,50)->(18,55))", "error_line": 6, "has_bug": true, "code_full": "import logging\nfrom typing import Callable, List, Tuple\n\nimport kgekit\nimport numpy as np\nimport torch\n\n\nclass Data:\n    def expand_triple_to_sets(self, triple: Tuple[int, int, int], num_expands: int, element_type: str) -> List[Tuple[int, int, int]]:\n        # Dummy implementation for type annotation purposes\n        return []\n    \n    def convert_triple_tuple_to_torch(self, batch: List[Tuple[int, int, int]]) -> torch.Tensor:\n        # Dummy implementation for type annotation purposes\n        return torch.Tensor()\n\nclass Model:\n    def forward(self, batch: torch.Tensor) -> torch.Tensor:\n        pass\n\n\ndata = Data()\n\ndef _evaluate_predict_element(model: Model, triple_index:int, num_expands: int, element_type: str, rank_fn: Callable[[np.ndarray, int], Tuple[int, int]], ranks_list: List[int], filtered_ranks_list: list[int]):\n    batch = data.expand_triple_to_sets(kgekit.data.unpack(triple_index), num_expands, element_type)\n    batch = data.convert_triple_tuple_to_torch(batch)\n    logging.debug(element_type)\n    logging.debug(\"Batch len: \" + str(len(batch)) + \"; batch sample: \" + str(batch[0]))\n    predicted_batch = model.forward(batch).cpu()\n    logging.debug(\"Predicted batch len\" + str(len(batch)) + \"; batch sample: \" + str(predicted_batch[0]))\n    rank, filtered_rank = rank_fn(predicted_batch.data.numpy(), triple_index)\n    logging.debug(\"Rank :\" + str(rank) + \"; Filtered rank length :\" + str(filtered_rank))\n    ranks_list.append(rank)\n    filtered_ranks_list.append(filtered_rank)\n", "error_location_char": [583, 588], "type_checked_pytype": true, "type_checked_mypy": true, "type_error_label": ""}
{"source_tokens": ["#NEWLINE#", "def _get_key(", "self", ",", "full_path", ")", ":", "#NEWLINE#", "#INDENT#", "'Build a checksum used to identify this filepath'", "#NEWLINE#", "full_path_checksum", "=", "hashlib", ".", "sha1", "(", "full_path", ")", ".", "digest", "(", ")", "#NEWLINE#", "return", "full_path"], "edges": [[1, 3, 7, "enum_FIELD"], [8, 9, 7, "enum_FIELD"], [10, 21, 7, "enum_FIELD"], [24, 25, 7, "enum_FIELD"], [21, 19, 7, "enum_FIELD"], [19, 16, 7, "enum_FIELD"], [16, 14, 7, "enum_FIELD"], [14, 13, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [17, 4, 10, "enum_LAST_LEXICAL_USE"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 24, 9, "enum_NEXT_SYNTAX"], [25, 17, 10, "enum_LAST_LEXICAL_USE"], [24, 25, 9, "enum_NEXT_SYNTAX"], [3, 8, 1, "enum_CFG_NEXT"], [8, 10, 1, "enum_CFG_NEXT"], [10, 24, 1, "enum_CFG_NEXT"], [17, 4, 3, "enum_LAST_WRITE"], [25, 17, 2, "enum_LAST_READ"], [25, 4, 3, "enum_LAST_WRITE"], [11, 17, 4, "enum_COMPUTED_FROM"], [11, 13, 4, "enum_COMPUTED_FROM"]], "error_location": 25, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/benemery/filewatch.git", "old_path": "filewatch/watcher.py", "hash": "3fbf9780eb51d3efe869bfbeb85e7e6bb25f152e", "code": "def _get_key(self, full_path: str) -> bytes:\n    \"\"\"Build a checksum used to identify this filepath\"\"\"\n    full_path_checksum = hashlib.sha1(full_path).digest()\n    return full_path\n", "rewrite": "ReplaceText(target='full_path_checksum' @(61,15)->(61,24))", "error_line": 3, "has_bug": true, "code_full": "import hashlib\nimport os\n\ndef _get_key(self, full_path: str) -> bytes:\n    \"\"\"Build a checksum used to identify this filepath\"\"\"\n    full_path_checksum = hashlib.sha1(full_path).digest()\n    return full_path\n", "error_location_char": [172, 181], "type_checked_pytype": false, "type_error_label": "bad-return-type", "type_checked_mypy": false}
{"source_tokens": ["#NEWLINE#", "def _recursive_directory_find(", "path", ",", "directory_name", ")", "->", "str", ":", "#NEWLINE#", "#INDENT#", "if", "(", "str", "(", "path", ")", "==", "expanduser", "(", "'~'", ")", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "FileNotFoundError", "(", ")", "#NEWLINE#", "#UNINDENT#", "joined_with_driectory", "=", "path", ".", "joinpath", "(", "directory_name", ")", "#NEWLINE#", "if", "joined_with_driectory", ".", "is_dir", "(", ")", ":", "#NEWLINE#", "#INDENT#", "return", "str", "(", "joined_with_driectory", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "return", "_recursive_directory_find", "(", "path", ".", "parent", ",", "directory_name", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [1, 7, 7, "enum_FIELD"], [11, 17, 7, "enum_FIELD"], [31, 37, 7, "enum_FIELD"], [47, 45, 7, "enum_FIELD"], [17, 14, 7, "enum_FIELD"], [26, 28, 7, "enum_FIELD"], [37, 35, 7, "enum_FIELD"], [45, 43, 7, "enum_FIELD"], [50, 52, 7, "enum_FIELD"], [61, 67, 7, "enum_FIELD"], [14, 13, 7, "enum_FIELD"], [19, 18, 7, "enum_FIELD"], [28, 27, 7, "enum_FIELD"], [35, 34, 7, "enum_FIELD"], [43, 42, 7, "enum_FIELD"], [52, 51, 7, "enum_FIELD"], [67, 62, 7, "enum_FIELD"], [65, 64, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [13, 7, 10, "enum_LAST_LEXICAL_USE"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [15, 2, 10, "enum_LAST_LEXICAL_USE"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [34, 15, 10, "enum_LAST_LEXICAL_USE"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [38, 4, 10, "enum_LAST_LEXICAL_USE"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 41, 9, "enum_NEXT_SYNTAX"], [42, 32, 10, "enum_LAST_LEXICAL_USE"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 50, 9, "enum_NEXT_SYNTAX"], [51, 13, 10, "enum_LAST_LEXICAL_USE"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [53, 42, 10, "enum_LAST_LEXICAL_USE"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [64, 34, 10, "enum_LAST_LEXICAL_USE"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [68, 38, 10, "enum_LAST_LEXICAL_USE"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [3, 17, 1, "enum_CFG_NEXT"], [17, 31, 1, "enum_CFG_NEXT"], [17, 26, 1, "enum_CFG_NEXT"], [31, 45, 1, "enum_CFG_NEXT"], [45, 61, 1, "enum_CFG_NEXT"], [45, 50, 1, "enum_CFG_NEXT"], [15, 2, 3, "enum_LAST_WRITE"], [34, 15, 2, "enum_LAST_READ"], [34, 2, 3, "enum_LAST_WRITE"], [38, 4, 3, "enum_LAST_WRITE"], [42, 32, 3, "enum_LAST_WRITE"], [51, 13, 2, "enum_LAST_READ"], [53, 42, 2, "enum_LAST_READ"], [53, 32, 3, "enum_LAST_WRITE"], [64, 34, 2, "enum_LAST_READ"], [64, 2, 3, "enum_LAST_WRITE"], [68, 38, 2, "enum_LAST_READ"], [68, 4, 3, "enum_LAST_WRITE"], [32, 38, 4, "enum_COMPUTED_FROM"], [32, 34, 4, "enum_COMPUTED_FROM"], [67, 1, 11, "enum_CALLS"], [50, 67, 5, "enum_RETURNS_TO"], [61, 67, 5, "enum_RETURNS_TO"], [65, 2, 6, "enum_FORMAL_ARG_NAME"], [68, 4, 6, "enum_FORMAL_ARG_NAME"]], "error_location": 53, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/chiptopher/guet.git", "old_path": "guet/util/_recursive_directory_find.py", "hash": "f95c54917b51e65f47789534ab88ecbede1838eb", "code": "def _recursive_directory_find(path: Path, directory_name: str) -> str:\n    if str(path) == expanduser('~'):\n        raise FileNotFoundError()\n    joined_with_driectory: Path = path.joinpath(directory_name)\n    if joined_with_driectory.is_dir():\n        return str(joined_with_driectory)\n    else:\n        return _recursive_directory_find(path.parent, directory_name)\n", "rewrite": "ReplaceText(target='path' @(14,19)->(14,40))", "error_line": 5, "has_bug": true, "code_full": "from os.path import expanduser\nfrom pathlib import Path\n\n\ndef _recursive_directory_find(path: Path, directory_name: str) -> str:\n    if str(path) == expanduser('~'):\n        raise FileNotFoundError()\n    joined_with_driectory: Path = path.joinpath(directory_name)\n    if joined_with_driectory.is_dir():\n        return str(joined_with_driectory)\n    else:\n        return _recursive_directory_find(path.parent, directory_name)\n", "error_location_char": [264, 284], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def setup_attributes(", "self", ")", "->", "None", ":", "#NEWLINE#", "#INDENT#", "_POSITION", "=", "0", "#NEWLINE#", "_COLOR", "=", "1", "#NEWLINE#", "self", ".", "create_vao_vbos", "(", "2", ")", "#NEWLINE#", "vertices", "=", "self", ".", "element", ".", "vertices", ".", "astype", "(", "np", ".", "float32", ")", "#NEWLINE#", "colors", "=", "self", ".", "element", ".", "rgba", ".", "astype", "(", "np", ".", "float32", ")", "#NEWLINE#", "self", ".", "num_vertices", "=", "len", "(", "vertices", ")", "#NEWLINE#", "glBindVertexArray", "(", "self", ".", "vao", ")", "#NEWLINE#", "self", ".", "fill_buffer", "(", "_POSITION", ",", "3", ",", "vertices", ",", "GLfloat", ",", "GL_FLOAT", ",", "self", ".", "vbos", "[", "_POSITION", "]", ")", "#NEWLINE#", "self", ".", "fill_buffer", "(", "_COLOR", ",", "4", ",", "colors", ",", "GLfloat", ",", "GL_FLOAT", ",", "self", ".", "vbos", "[", "_POSITION", "]", ")", "#NEWLINE#", "glVertexAttribDivisor", "(", "_COLOR", ",", "1", ")", "#NEWLINE#", "glBindVertexArray", "(", "0", ")"], "edges": [[1, 5, 7, "enum_FIELD"], [8, 11, 7, "enum_FIELD"], [12, 15, 7, "enum_FIELD"], [16, 20, 7, "enum_FIELD"], [23, 33, 7, "enum_FIELD"], [38, 48, 7, "enum_FIELD"], [53, 59, 7, "enum_FIELD"], [62, 64, 7, "enum_FIELD"], [69, 79, 7, "enum_FIELD"], [91, 101, 7, "enum_FIELD"], [113, 117, 7, "enum_FIELD"], [120, 122, 7, "enum_FIELD"], [20, 18, 7, "enum_FIELD"], [33, 31, 7, "enum_FIELD"], [48, 46, 7, "enum_FIELD"], [55, 54, 7, "enum_FIELD"], [59, 58, 7, "enum_FIELD"], [64, 63, 7, "enum_FIELD"], [79, 71, 7, "enum_FIELD"], [101, 93, 7, "enum_FIELD"], [117, 114, 7, "enum_FIELD"], [122, 121, 7, "enum_FIELD"], [18, 17, 7, "enum_FIELD"], [31, 29, 7, "enum_FIELD"], [35, 34, 7, "enum_FIELD"], [46, 44, 7, "enum_FIELD"], [50, 49, 7, "enum_FIELD"], [66, 65, 7, "enum_FIELD"], [71, 70, 7, "enum_FIELD"], [87, 85, 7, "enum_FIELD"], [87, 88, 7, "enum_FIELD"], [93, 92, 7, "enum_FIELD"], [109, 107, 7, "enum_FIELD"], [109, 110, 7, "enum_FIELD"], [29, 27, 7, "enum_FIELD"], [44, 42, 7, "enum_FIELD"], [85, 84, 7, "enum_FIELD"], [107, 106, 7, "enum_FIELD"], [27, 26, 7, "enum_FIELD"], [42, 41, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [17, 2, 10, "enum_LAST_LEXICAL_USE"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [26, 17, 10, "enum_LAST_LEXICAL_USE"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [41, 26, 10, "enum_LAST_LEXICAL_USE"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [49, 34, 10, "enum_LAST_LEXICAL_USE"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [54, 41, 10, "enum_LAST_LEXICAL_USE"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [60, 24, 10, "enum_LAST_LEXICAL_USE"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [65, 54, 10, "enum_LAST_LEXICAL_USE"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [70, 65, 10, "enum_LAST_LEXICAL_USE"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [74, 9, 10, "enum_LAST_LEXICAL_USE"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [78, 60, 10, "enum_LAST_LEXICAL_USE"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [84, 70, 10, "enum_LAST_LEXICAL_USE"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [88, 74, 10, "enum_LAST_LEXICAL_USE"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [92, 84, 10, "enum_LAST_LEXICAL_USE"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [96, 13, 10, "enum_LAST_LEXICAL_USE"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [100, 39, 10, "enum_LAST_LEXICAL_USE"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [102, 80, 10, "enum_LAST_LEXICAL_USE"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [104, 82, 10, "enum_LAST_LEXICAL_USE"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [106, 92, 10, "enum_LAST_LEXICAL_USE"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [110, 88, 10, "enum_LAST_LEXICAL_USE"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [116, 96, 10, "enum_LAST_LEXICAL_USE"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [121, 63, 10, "enum_LAST_LEXICAL_USE"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [8, 12, 1, "enum_CFG_NEXT"], [12, 16, 1, "enum_CFG_NEXT"], [16, 23, 1, "enum_CFG_NEXT"], [23, 38, 1, "enum_CFG_NEXT"], [38, 53, 1, "enum_CFG_NEXT"], [53, 62, 1, "enum_CFG_NEXT"], [62, 69, 1, "enum_CFG_NEXT"], [69, 91, 1, "enum_CFG_NEXT"], [91, 113, 1, "enum_CFG_NEXT"], [113, 120, 1, "enum_CFG_NEXT"], [17, 2, 3, "enum_LAST_WRITE"], [26, 17, 2, "enum_LAST_READ"], [26, 2, 3, "enum_LAST_WRITE"], [41, 26, 2, "enum_LAST_READ"], [41, 2, 3, "enum_LAST_WRITE"], [49, 34, 2, "enum_LAST_READ"], [60, 24, 3, "enum_LAST_WRITE"], [54, 41, 2, "enum_LAST_READ"], [54, 2, 3, "enum_LAST_WRITE"], [65, 54, 2, "enum_LAST_READ"], [65, 2, 3, "enum_LAST_WRITE"], [70, 65, 2, "enum_LAST_READ"], [70, 2, 3, "enum_LAST_WRITE"], [74, 9, 3, "enum_LAST_WRITE"], [78, 60, 2, "enum_LAST_READ"], [78, 24, 3, "enum_LAST_WRITE"], [84, 70, 2, "enum_LAST_READ"], [84, 2, 3, "enum_LAST_WRITE"], [88, 74, 2, "enum_LAST_READ"], [88, 9, 3, "enum_LAST_WRITE"], [92, 84, 2, "enum_LAST_READ"], [92, 2, 3, "enum_LAST_WRITE"], [96, 13, 3, "enum_LAST_WRITE"], [100, 39, 3, "enum_LAST_WRITE"], [102, 80, 2, "enum_LAST_READ"], [104, 82, 2, "enum_LAST_READ"], [106, 92, 2, "enum_LAST_READ"], [106, 2, 3, "enum_LAST_WRITE"], [110, 88, 2, "enum_LAST_READ"], [110, 9, 3, "enum_LAST_WRITE"], [116, 96, 2, "enum_LAST_READ"], [116, 13, 3, "enum_LAST_WRITE"], [121, 63, 2, "enum_LAST_READ"], [24, 34, 4, "enum_COMPUTED_FROM"], [24, 26, 4, "enum_COMPUTED_FROM"], [39, 49, 4, "enum_COMPUTED_FROM"], [39, 41, 4, "enum_COMPUTED_FROM"], [55, 58, 4, "enum_COMPUTED_FROM"], [55, 60, 4, "enum_COMPUTED_FROM"]], "error_location": 110, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/gsanhueza/BlastSight.git", "old_path": "blastsight/view/drawables/linegl.py", "hash": "ba4c91b6850cb04fec7d049d0f20e7ea86b79454", "code": "def setup_attributes(self) -> None:\n    _POSITION: int = 0\n    _COLOR: int = 1\n\n    # Generate VAO and VBOs (see GLDrawable)\n    self.create_vao_vbos(2)\n\n    # Data\n    vertices = self.element.vertices.astype(np.float32)\n    colors = self.element.rgba.astype(np.float32)\n\n    # np.array([[0, 1, 2]], type) has size 3, despite having only 1 list there\n    self.num_vertices = len(vertices)\n\n    glBindVertexArray(self.vao)\n\n    # Fill buffers (see GLDrawable)\n    self.fill_buffer(_POSITION, 3, vertices, GLfloat, GL_FLOAT, self.vbos[_POSITION])\n    self.fill_buffer(_COLOR, 4, colors, GLfloat, GL_FLOAT, self.vbos[_POSITION])\n\n    glVertexAttribDivisor(_COLOR, 1)\n\n    glBindVertexArray(0)\n", "rewrite": "ReplaceText(target='_COLOR' @(37,73)->(37,82))", "error_line": 18, "has_bug": true, "code_full": "from typing import Any, List\n\nimport numpy as np\nfrom OpenGL.GL import (GL_FLOAT, GLfloat, glBindVertexArray,\n                       glVertexAttribDivisor)\n\n\nclass Class:\n    vbos: List\n    element: Any\n    vao: int\n\n    def create_vao_vbos(self, num_vbos: int) -> None:\n        pass\n\n    def fill_buffer(self, index: int, size: int, data: np.ndarray, dtype, gl_type, vbo: List) -> None:\n        # Dummy implementation for type annotation purposes\n        pass\n\n    def setup_attributes(self) -> None:\n        _POSITION: int = 0\n        _COLOR: int = 1\n\n        # Generate VAO and VBOs (see GLDrawable)\n        self.create_vao_vbos(2)\n\n        # Data\n        vertices = self.element.vertices.astype(np.float32)\n        colors = self.element.rgba.astype(np.float32)\n\n        # np.array([[0, 1, 2]], type) has size 3, despite having only 1 list there\n        self.num_vertices = len(vertices)\n\n        glBindVertexArray(self.vao)\n\n        # Fill buffers (see GLDrawable)\n        self.fill_buffer(_POSITION, 3, vertices, GLfloat, GL_FLOAT, self.vbos[_POSITION])\n        self.fill_buffer(_COLOR, 4, colors, GLfloat, GL_FLOAT, self.vbos[_POSITION])\n\n        glVertexAttribDivisor(_COLOR, 1)\n\n        glBindVertexArray(0)\n", "error_location_char": [614, 623], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def leave_Return(", "self", ",", "original_node", ",", "updated_node", ")", "->", "cst", ".", "Return", ":", "#NEWLINE#", "#INDENT#", "if", "(", "not", "m", ".", "matches", "(", "original_node", ".", "value", ",", "m", ".", "Tuple", "(", ")", ")", ")", ":", "#NEWLINE#", "#INDENT#", "return", "original_node", "#NEWLINE#", "#UNINDENT#", "if", "(", "not", "original_node", ".", "value", ".", "lpar", ")", ":", "#NEWLINE#", "#INDENT#", "return", "original_node", "#NEWLINE#", "#UNINDENT#", "changed_tuple", "=", "original_node", ".", "value", ".", "with_changes", "(", "lpar", "=", "[", "]", ",", "rpar", "=", "[", "]", ")", "#NEWLINE#", "return", "original_node", ".", "with_changes", "(", "value", "=", "changed_tuple", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [1, 10, 7, "enum_FIELD"], [15, 17, 7, "enum_FIELD"], [40, 42, 7, "enum_FIELD"], [55, 68, 7, "enum_FIELD"], [75, 79, 7, "enum_FIELD"], [10, 9, 7, "enum_FIELD"], [17, 25, 7, "enum_FIELD"], [36, 37, 7, "enum_FIELD"], [42, 46, 7, "enum_FIELD"], [52, 53, 7, "enum_FIELD"], [68, 61, 7, "enum_FIELD"], [79, 77, 7, "enum_FIELD"], [25, 19, 7, "enum_FIELD"], [46, 44, 7, "enum_FIELD"], [61, 59, 7, "enum_FIELD"], [64, 66, 7, "enum_FIELD"], [69, 71, 7, "enum_FIELD"], [77, 76, 7, "enum_FIELD"], [80, 82, 7, "enum_FIELD"], [19, 18, 7, "enum_FIELD"], [23, 22, 7, "enum_FIELD"], [29, 27, 7, "enum_FIELD"], [44, 43, 7, "enum_FIELD"], [59, 58, 7, "enum_FIELD"], [27, 26, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [22, 4, 10, "enum_LAST_LEXICAL_USE"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [26, 18, 10, "enum_LAST_LEXICAL_USE"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 36, 9, "enum_NEXT_SYNTAX"], [37, 22, 10, "enum_LAST_LEXICAL_USE"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [43, 37, 10, "enum_LAST_LEXICAL_USE"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 52, 9, "enum_NEXT_SYNTAX"], [53, 43, 10, "enum_LAST_LEXICAL_USE"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [58, 53, 10, "enum_LAST_LEXICAL_USE"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 75, 9, "enum_NEXT_SYNTAX"], [76, 58, 10, "enum_LAST_LEXICAL_USE"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [82, 56, 10, "enum_LAST_LEXICAL_USE"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [3, 17, 1, "enum_CFG_NEXT"], [17, 36, 1, "enum_CFG_NEXT"], [17, 42, 1, "enum_CFG_NEXT"], [42, 55, 1, "enum_CFG_NEXT"], [42, 52, 1, "enum_CFG_NEXT"], [55, 75, 1, "enum_CFG_NEXT"], [22, 4, 3, "enum_LAST_WRITE"], [26, 18, 2, "enum_LAST_READ"], [37, 22, 2, "enum_LAST_READ"], [37, 4, 3, "enum_LAST_WRITE"], [43, 22, 2, "enum_LAST_READ"], [43, 4, 3, "enum_LAST_WRITE"], [53, 43, 2, "enum_LAST_READ"], [53, 4, 3, "enum_LAST_WRITE"], [58, 43, 2, "enum_LAST_READ"], [58, 4, 3, "enum_LAST_WRITE"], [76, 58, 2, "enum_LAST_READ"], [76, 4, 3, "enum_LAST_WRITE"], [82, 56, 3, "enum_LAST_WRITE"], [56, 58, 4, "enum_COMPUTED_FROM"]], "error_location": 76, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/lensvol/pybetter.git", "old_path": "pybetter/transformers/parenthesized_return.py", "hash": "625e8fc854c7544df702d6001a57e46838b7df70", "code": "def leave_Return(\n    self, original_node: cst.Return, updated_node: cst.Return\n) -> cst.Return:\n    if not m.matches(original_node.value, m.Tuple()):\n        return original_node\n\n    if not original_node.value.lpar:\n        return original_node\n\n    changed_tuple = original_node.value.with_changes(lpar=[], rpar=[])\n\n    return original_node.with_changes(value=changed_tuple)\n", "rewrite": "ReplaceText(target='updated_node' @(17,15)->(17,28))", "error_line": 11, "has_bug": true, "code_full": "import libcst as cst\nfrom libcst import matchers as m\n\n\ndef leave_Return(\n    self, original_node: cst.Return, updated_node: cst.Return\n) -> cst.Return:\n    if not m.matches(original_node.value, m.Tuple()):\n        return original_node\n\n    if not original_node.value.lpar:\n        return original_node\n\n    changed_tuple = original_node.value.with_changes(lpar=[], rpar=[])\n\n    return original_node.with_changes(value=changed_tuple)\n", "error_location_char": [166, 179], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def get_alignment_error(", "self", ",", "ename", ")", ":", "#NEWLINE#", "#INDENT#", "align_error_conf", "=", "[", "]", "#NEWLINE#", "dx", "=", "self", ".", "_get_config", "(", "ename", ",", "CONFIG_ALIGNMENT_DX", ",", "None", ")", "#NEWLINE#", "if", "(", "dx", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "_LOGGER", ".", "info", "(", "'Alignment error: dx of {} is {} m.'", ".", "format", "(", "ename", ",", "dx", ")", ")", "#NEWLINE#", "align_error_conf", ".", "append", "(", "(", "'dx'", ",", "float", "(", "dx", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "dy", "=", "self", ".", "_get_config", "(", "ename", ",", "CONFIG_ALIGNMENT_DY", ",", "None", ")", "#NEWLINE#", "if", "(", "dx", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "_LOGGER", ".", "info", "(", "'Alignment error: dx of {} is {} m.'", ".", "format", "(", "ename", ",", "dx", ")", ")", "#NEWLINE#", "align_error_conf", ".", "append", "(", "(", "'dy'", ",", "float", "(", "dy", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "align_error_conf"], "edges": [[1, 3, 7, "enum_FIELD"], [8, 11, 7, "enum_FIELD"], [13, 21, 7, "enum_FIELD"], [27, 30, 7, "enum_FIELD"], [64, 72, 7, "enum_FIELD"], [78, 81, 7, "enum_FIELD"], [116, 117, 7, "enum_FIELD"], [21, 17, 7, "enum_FIELD"], [30, 29, 7, "enum_FIELD"], [35, 39, 7, "enum_FIELD"], [49, 53, 7, "enum_FIELD"], [72, 68, 7, "enum_FIELD"], [81, 80, 7, "enum_FIELD"], [86, 90, 7, "enum_FIELD"], [100, 104, 7, "enum_FIELD"], [17, 16, 7, "enum_FIELD"], [39, 37, 7, "enum_FIELD"], [53, 51, 7, "enum_FIELD"], [68, 67, 7, "enum_FIELD"], [90, 88, 7, "enum_FIELD"], [104, 102, 7, "enum_FIELD"], [37, 36, 7, "enum_FIELD"], [45, 41, 7, "enum_FIELD"], [51, 50, 7, "enum_FIELD"], [88, 87, 7, "enum_FIELD"], [96, 92, 7, "enum_FIELD"], [102, 101, 7, "enum_FIELD"], [41, 40, 7, "enum_FIELD"], [58, 57, 7, "enum_FIELD"], [92, 91, 7, "enum_FIELD"], [109, 108, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [16, 2, 10, "enum_LAST_LEXICAL_USE"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [20, 4, 10, "enum_LAST_LEXICAL_USE"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [29, 14, 10, "enum_LAST_LEXICAL_USE"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [44, 20, 10, "enum_LAST_LEXICAL_USE"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [46, 29, 10, "enum_LAST_LEXICAL_USE"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [50, 9, 10, "enum_LAST_LEXICAL_USE"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [59, 46, 10, "enum_LAST_LEXICAL_USE"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [67, 16, 10, "enum_LAST_LEXICAL_USE"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [71, 44, 10, "enum_LAST_LEXICAL_USE"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [80, 59, 10, "enum_LAST_LEXICAL_USE"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 86, 9, "enum_NEXT_SYNTAX"], [87, 36, 10, "enum_LAST_LEXICAL_USE"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [95, 71, 10, "enum_LAST_LEXICAL_USE"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [97, 80, 10, "enum_LAST_LEXICAL_USE"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [101, 50, 10, "enum_LAST_LEXICAL_USE"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [108, 57, 10, "enum_LAST_LEXICAL_USE"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [110, 65, 10, "enum_LAST_LEXICAL_USE"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 116, 9, "enum_NEXT_SYNTAX"], [117, 101, 10, "enum_LAST_LEXICAL_USE"], [116, 117, 9, "enum_NEXT_SYNTAX"], [3, 8, 1, "enum_CFG_NEXT"], [8, 13, 1, "enum_CFG_NEXT"], [13, 30, 1, "enum_CFG_NEXT"], [30, 35, 1, "enum_CFG_NEXT"], [30, 64, 1, "enum_CFG_NEXT"], [35, 49, 1, "enum_CFG_NEXT"], [49, 64, 1, "enum_CFG_NEXT"], [64, 81, 1, "enum_CFG_NEXT"], [81, 86, 1, "enum_CFG_NEXT"], [81, 116, 1, "enum_CFG_NEXT"], [86, 100, 1, "enum_CFG_NEXT"], [100, 116, 1, "enum_CFG_NEXT"], [16, 2, 3, "enum_LAST_WRITE"], [20, 4, 3, "enum_LAST_WRITE"], [29, 14, 3, "enum_LAST_WRITE"], [44, 20, 2, "enum_LAST_READ"], [44, 4, 3, "enum_LAST_WRITE"], [46, 29, 2, "enum_LAST_READ"], [46, 14, 3, "enum_LAST_WRITE"], [50, 9, 3, "enum_LAST_WRITE"], [59, 46, 2, "enum_LAST_READ"], [59, 14, 3, "enum_LAST_WRITE"], [67, 16, 2, "enum_LAST_READ"], [67, 2, 3, "enum_LAST_WRITE"], [71, 44, 2, "enum_LAST_READ"], [71, 20, 2, "enum_LAST_READ"], [71, 4, 3, "enum_LAST_WRITE"], [80, 59, 2, "enum_LAST_READ"], [80, 29, 2, "enum_LAST_READ"], [80, 14, 3, "enum_LAST_WRITE"], [87, 36, 2, "enum_LAST_READ"], [95, 71, 2, "enum_LAST_READ"], [95, 4, 3, "enum_LAST_WRITE"], [97, 80, 2, "enum_LAST_READ"], [97, 14, 3, "enum_LAST_WRITE"], [101, 50, 2, "enum_LAST_READ"], [101, 9, 3, "enum_LAST_WRITE"], [108, 57, 2, "enum_LAST_READ"], [110, 65, 3, "enum_LAST_WRITE"], [117, 50, 2, "enum_LAST_READ"], [117, 101, 2, "enum_LAST_READ"], [117, 9, 3, "enum_LAST_WRITE"], [14, 20, 4, "enum_COMPUTED_FROM"], [14, 22, 4, "enum_COMPUTED_FROM"], [14, 16, 4, "enum_COMPUTED_FROM"], [65, 71, 4, "enum_COMPUTED_FROM"], [65, 73, 4, "enum_COMPUTED_FROM"], [65, 67, 4, "enum_COMPUTED_FROM"]], "error_location": 80, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/archman/phantasy.git", "old_path": "phantasy/library/lattice/flame.py", "hash": "a6485f5f71a295581d7ed558e6ff6e4fb6f3f2aa", "code": "def get_alignment_error(self, ename: str) -> List[Tuple[str, float]]:\n    align_error_conf: List[Tuple[str, float]] = []\n    dx: Optional[str] = self._get_config(ename, CONFIG_ALIGNMENT_DX, None)\n    if dx is not None:\n        _LOGGER.info(\"Alignment error: dx of {} is {} m.\".format(ename, dx))\n        align_error_conf.append(('dx', float(dx)))\n    dy: Optional[str] = self._get_config(ename, CONFIG_ALIGNMENT_DY, None)\n    if dx is not None:\n        _LOGGER.info(\"Alignment error: dy of {} is {} m.\".format(ename, dy))\n        align_error_conf.append(('dy', float(dy)))\n    return align_error_conf\n", "rewrite": "ReplaceText(target='dy' @(330,11)->(330,13))", "error_line": 7, "has_bug": true, "code_full": "# Assuming _LOGGER is defined elsewhere\nimport logging\nfrom typing import Any, List, Optional, Tuple\n\n_LOGGER = logging.getLogger(__name__)\n\nCONFIG_ALIGNMENT_DX = \"alignment_dx\"\nCONFIG_ALIGNMENT_DY = \"alignment_dy\"\n\nclass Class:\n    def _get_config(self, ename: str, config_key: str, default: Optional[Any]) -> Optional[str]:\n        # Dummy implementation for type annotation purposes\n        pass\n\n    def get_alignment_error(self, ename: str) -> List[Tuple[str, float]]:\n        align_error_conf: List[Tuple[str, float]] = []\n        dx: Optional[str] = self._get_config(ename, CONFIG_ALIGNMENT_DX, None)\n        if dx is not None:\n            _LOGGER.info(\"Alignment error: dx of {} is {} m.\".format(ename, dx))\n            align_error_conf.append(('dx', float(dx)))\n        dy: Optional[str] = self._get_config(ename, CONFIG_ALIGNMENT_DY, None)\n        if dx is not None:\n            _LOGGER.info(\"Alignment error: dy of {} is {} m.\".format(ename, dy))\n            align_error_conf.append(('dy', float(dy)))\n        return align_error_conf\n", "error_location_char": [429, 431], "type_checked_pytype": true, "type_error_label": "wrong-arg-types, indirect", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def test_build_regular_packet(", "iv", ",", "iv_hash", ",", "payload_hash", ",", "handshake_key", ",", "payload", ")", ":", "#NEWLINE#", "#INDENT#", "data", "=", "join_encode_data", "(", "[", "iv", ",", "iv_hash", ",", "payload_hash", ",", "handshake_key", ",", "payload", "]", ")", "#NEWLINE#", "if", "(", "(", "len", "(", "iv", ")", "==", "packets", ".", "IV_LEN", ")", "and", "(", "len", "(", "iv_hash", ")", "==", "packets", ".", "HASH_LEN", ")", "and", "(", "len", "(", "payload_hash", ")", "==", "packets", ".", "HASH_LEN", ")", "and", "(", "not", "len", "(", "handshake_key", ")", ")", "and", "len", "(", "payload_hash", ")", ")", ":", "#NEWLINE#", "#INDENT#", "assert", "isinstance", "(", "packets", ".", "build_regular_packet", "(", "data", ")", ",", "packets", ".", "RegularPacket", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "with", "pytest", ".", "raises", "(", "errors", ".", "MalformedPacketError", ")", ":", "#NEWLINE#", "#INDENT#", "packets", ".", "build_regular_packet", "(", "data", ")"], "edges": [[1, 5, 7, "enum_FIELD"], [14, 18, 7, "enum_FIELD"], [80, 55, 7, "enum_FIELD"], [18, 17, 7, "enum_FIELD"], [83, 92, 7, "enum_FIELD"], [39, 36, 7, "enum_FIELD"], [50, 47, 7, "enum_FIELD"], [61, 58, 7, "enum_FIELD"], [68, 70, 7, "enum_FIELD"], [76, 75, 7, "enum_FIELD"], [92, 84, 7, "enum_FIELD"], [114, 118, 7, "enum_FIELD"], [36, 35, 7, "enum_FIELD"], [41, 40, 7, "enum_FIELD"], [47, 46, 7, "enum_FIELD"], [52, 51, 7, "enum_FIELD"], [58, 57, 7, "enum_FIELD"], [63, 62, 7, "enum_FIELD"], [70, 69, 7, "enum_FIELD"], [89, 87, 7, "enum_FIELD"], [94, 93, 7, "enum_FIELD"], [107, 105, 7, "enum_FIELD"], [118, 116, 7, "enum_FIELD"], [87, 86, 7, "enum_FIELD"], [105, 104, 7, "enum_FIELD"], [109, 108, 7, "enum_FIELD"], [116, 115, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [20, 2, 10, "enum_LAST_LEXICAL_USE"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [22, 4, 10, "enum_LAST_LEXICAL_USE"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [24, 6, 10, "enum_LAST_LEXICAL_USE"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [26, 8, 10, "enum_LAST_LEXICAL_USE"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [28, 10, 10, "enum_LAST_LEXICAL_USE"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [37, 20, 10, "enum_LAST_LEXICAL_USE"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [46, 35, 10, "enum_LAST_LEXICAL_USE"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [48, 22, 10, "enum_LAST_LEXICAL_USE"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [51, 40, 10, "enum_LAST_LEXICAL_USE"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [57, 46, 10, "enum_LAST_LEXICAL_USE"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [59, 24, 10, "enum_LAST_LEXICAL_USE"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [62, 51, 10, "enum_LAST_LEXICAL_USE"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [69, 57, 10, "enum_LAST_LEXICAL_USE"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [71, 26, 10, "enum_LAST_LEXICAL_USE"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [75, 69, 10, "enum_LAST_LEXICAL_USE"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [77, 59, 10, "enum_LAST_LEXICAL_USE"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [86, 62, 10, "enum_LAST_LEXICAL_USE"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [90, 15, 10, "enum_LAST_LEXICAL_USE"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [93, 86, 10, "enum_LAST_LEXICAL_USE"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 114, 9, "enum_NEXT_SYNTAX"], [115, 93, 10, "enum_LAST_LEXICAL_USE"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [119, 90, 10, "enum_LAST_LEXICAL_USE"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [5, 14, 1, "enum_CFG_NEXT"], [14, 55, 1, "enum_CFG_NEXT"], [55, 83, 1, "enum_CFG_NEXT"], [20, 2, 3, "enum_LAST_WRITE"], [22, 4, 3, "enum_LAST_WRITE"], [24, 6, 3, "enum_LAST_WRITE"], [26, 8, 3, "enum_LAST_WRITE"], [28, 10, 3, "enum_LAST_WRITE"], [37, 20, 2, "enum_LAST_READ"], [37, 2, 3, "enum_LAST_WRITE"], [46, 35, 2, "enum_LAST_READ"], [48, 22, 2, "enum_LAST_READ"], [48, 4, 3, "enum_LAST_WRITE"], [51, 40, 2, "enum_LAST_READ"], [57, 46, 2, "enum_LAST_READ"], [59, 24, 2, "enum_LAST_READ"], [59, 6, 3, "enum_LAST_WRITE"], [62, 51, 2, "enum_LAST_READ"], [69, 57, 2, "enum_LAST_READ"], [71, 26, 2, "enum_LAST_READ"], [71, 8, 3, "enum_LAST_WRITE"], [75, 69, 2, "enum_LAST_READ"], [77, 59, 2, "enum_LAST_READ"], [77, 6, 3, "enum_LAST_WRITE"], [86, 62, 2, "enum_LAST_READ"], [90, 15, 3, "enum_LAST_WRITE"], [93, 86, 2, "enum_LAST_READ"], [15, 17, 4, "enum_COMPUTED_FROM"], [15, 20, 4, "enum_COMPUTED_FROM"], [15, 22, 4, "enum_COMPUTED_FROM"], [15, 24, 4, "enum_COMPUTED_FROM"], [15, 26, 4, "enum_COMPUTED_FROM"], [15, 28, 4, "enum_COMPUTED_FROM"]], "error_location": 77, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/AnemoneLabs/unmessage.git", "old_path": "tests/test_packets.py", "hash": "cdbdf31e6db0a03b7521240aab8ef7e78f259027", "code": "def test_build_regular_packet(iv: bytes,\n                              iv_hash: bytes,\n                              payload_hash: bytes,\n                              handshake_key: bytes,\n                              payload: bytes):\n    data: bytes = join_encode_data([iv,\n                             iv_hash,\n                             payload_hash,\n                             handshake_key,\n                             payload])\n    if (len(iv) == packets.IV_LEN and\n            len(iv_hash) == packets.HASH_LEN and\n            len(payload_hash) == packets.HASH_LEN and\n            not len(handshake_key) and\n            len(payload_hash)):\n        assert isinstance(packets.build_regular_packet(data),\n                          packets.RegularPacket)\n    else:\n        with pytest.raises(errors.MalformedPacketError):\n            packets.build_regular_packet(data)\n", "rewrite": "ReplaceText(target='payload' @(36,16)->(36,28))", "error_line": 14, "has_bug": true, "code_full": "from typing import List, Union\n\nimport pytest\nfrom unmessage import errors, packets\n\n\ndef join_encode_data(lines: List[bytes]) -> bytes:\n    # Dummy implementation for type annotation purposes\n    return b\"\"\n\ndef test_build_regular_packet(iv: bytes,\n                              iv_hash: bytes,\n                              payload_hash: bytes,\n                              handshake_key: bytes,\n                              payload: bytes):\n    data: bytes = join_encode_data([iv,\n                             iv_hash,\n                             payload_hash,\n                             handshake_key,\n                             payload])\n    if (len(iv) == packets.IV_LEN and\n            len(iv_hash) == packets.HASH_LEN and\n            len(payload_hash) == packets.HASH_LEN and\n            not len(handshake_key) and\n            len(payload_hash)):\n        assert isinstance(packets.build_regular_packet(data),\n                          packets.RegularPacket)\n    else:\n        with pytest.raises(errors.MalformedPacketError):\n            packets.build_regular_packet(data)\n", "error_location_char": [637, 649], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def measure_future(", "self", ",", "future", ",", "logging_level", "=", "MetricLevel", ".", "RUNTIME", ",", "value_getter", "=", "time", ".", "monotonic", ",", "**labels", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    A function to measure a difference between some value after the method call\\n    and before it.\\n\\n    The value will be taken at the moment this function executes, and the moment the future completes\\n    (with or without an exception)\\n\\n    :param future: future that is considered\\n    :param logging_level: one of RUNTIME or DEBUG\\n    :param value_getter: a callable that takes no arguments and returns a float, which is\\n        the value\\n    :param labels: extra labels to call handle() with\\n    '", "#NEWLINE#", "future", ".", "old_value", "=", "value_getter", "(", ")", "#NEWLINE#", "def on_future_done(", "fut", ")", ":", "#NEWLINE#", "#INDENT#", "elapsed", "=", "(", "value_getter", "(", ")", "-", "future", ".", "old_value", ")", "#NEWLINE#", "self", ".", "handle", "(", "logging_level", ",", "elapsed", ",", "**", "labels", ")", "#NEWLINE#", "#UNINDENT#", "future", ".", "add_done_callback", "(", "future", ")"], "edges": [[1, 11, 7, "enum_FIELD"], [22, 23, 7, "enum_FIELD"], [24, 30, 7, "enum_FIELD"], [63, 67, 7, "enum_FIELD"], [9, 8, 7, "enum_FIELD"], [15, 14, 7, "enum_FIELD"], [26, 25, 7, "enum_FIELD"], [30, 29, 7, "enum_FIELD"], [38, 45, 7, "enum_FIELD"], [50, 56, 7, "enum_FIELD"], [67, 65, 7, "enum_FIELD"], [45, 43, 7, "enum_FIELD"], [45, 47, 7, "enum_FIELD"], [56, 52, 7, "enum_FIELD"], [65, 64, 7, "enum_FIELD"], [43, 42, 7, "enum_FIELD"], [47, 46, 7, "enum_FIELD"], [52, 51, 7, "enum_FIELD"], [59, 60, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [25, 4, 10, "enum_LAST_LEXICAL_USE"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [29, 12, 10, "enum_LAST_LEXICAL_USE"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [42, 29, 10, "enum_LAST_LEXICAL_USE"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [46, 25, 10, "enum_LAST_LEXICAL_USE"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [51, 2, 10, "enum_LAST_LEXICAL_USE"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [55, 6, 10, "enum_LAST_LEXICAL_USE"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [57, 39, 10, "enum_LAST_LEXICAL_USE"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 63, 9, "enum_NEXT_SYNTAX"], [64, 46, 10, "enum_LAST_LEXICAL_USE"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [68, 64, 10, "enum_LAST_LEXICAL_USE"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [9, 15, 1, "enum_CFG_NEXT"], [15, 1, 1, "enum_CFG_NEXT"], [11, 22, 1, "enum_CFG_NEXT"], [22, 24, 1, "enum_CFG_NEXT"], [24, 35, 1, "enum_CFG_NEXT"], [35, 63, 1, "enum_CFG_NEXT"], [38, 50, 1, "enum_CFG_NEXT"], [29, 12, 3, "enum_LAST_WRITE"], [25, 4, 3, "enum_LAST_WRITE"], [57, 39, 3, "enum_LAST_WRITE"], [64, 25, 2, "enum_LAST_READ"], [64, 4, 3, "enum_LAST_WRITE"], [68, 64, 2, "enum_LAST_READ"], [68, 4, 3, "enum_LAST_WRITE"], [26, 29, 4, "enum_COMPUTED_FROM"], [39, 42, 4, "enum_COMPUTED_FROM"], [39, 46, 4, "enum_COMPUTED_FROM"]], "error_location": 68, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/piotrmaslanka/satella.git", "old_path": "satella/instrumentation/metrics/metric_types/measurable_mixin.py", "hash": "fab19fa60841455e2ec0ec4493c618b7f5225f7d", "code": "def measure_future(self, future: Future, logging_level: MetricLevel = MetricLevel.RUNTIME,\n                   value_getter: tp.Callable[[], float] = time.monotonic, **labels):\n    \"\"\"\n    A function to measure a difference between some value after the method call\n    and before it.\n\n    The value will be taken at the moment this function executes, and the moment the future completes\n    (with or without an exception)\n\n    :param future: future that is considered\n    :param logging_level: one of RUNTIME or DEBUG\n    :param value_getter: a callable that takes no arguments and returns a float, which is\n        the value\n    :param labels: extra labels to call handle() with\n    \"\"\"\n    future.old_value = value_getter()\n\n    def on_future_done(fut: Future):\n        elapsed = value_getter() - future.old_value\n        self.handle(logging_level, elapsed, **labels)\n\n    future.add_done_callback(future)\n", "rewrite": "ReplaceText(target='on_future_done' @(38,33)->(38,39))", "error_line": 21, "has_bug": true, "code_full": "import enum\nimport time\nimport typing as tp\nfrom concurrent.futures import Future\n\n\nclass MetricLevel(enum.IntEnum):\n    DISABLED = 1\n    RUNTIME = 2\n    DEBUG = 3\n    INHERIT = 4\n\n    def __ge__(self, other: 'MetricLevel') -> bool:\n        return self.value >= other.value\n\ndef measure_future(self, future: Future, logging_level: MetricLevel = MetricLevel.RUNTIME,\n                   value_getter: tp.Callable[[], float] = time.monotonic, **labels):\n    \"\"\"\n    A function to measure a difference between some value after the method call\n    and before it.\n\n    The value will be taken at the moment this function executes, and the moment the future completes\n    (with or without an exception)\n\n    :param future: future that is considered\n    :param logging_level: one of RUNTIME or DEBUG\n    :param value_getter: a callable that takes no arguments and returns a float, which is\n        the value\n    :param labels: extra labels to call handle() with\n    \"\"\"\n    future.old_value = value_getter()\n\n    def on_future_done(fut: Future):\n        elapsed = value_getter() - future.old_value\n        self.handle(logging_level, elapsed, **labels)\n\n    future.add_done_callback(future)\n", "error_location_char": [899, 905], "type_checked_pytype": false, "type_error_label": "wrong-arg-types", "type_checked_mypy": false}
{"source_tokens": ["#NEWLINE#", "def ReciprocalRank(", "results", ",", "query", ")", ":", "#NEWLINE#", "#INDENT#", "' The Reciprocal Rank (RR) is the multiplicative inverse of the rank of\\n    the first correct answer.\\n\\n    Args:\\n        results: array\\n            Array with the responses. => [[4, 2, 12, 52], [3, 2, 10]]\\n\\n        query: array\\n            Array with the query. => [[12], [10, 4]]\\n\\n    Returns:\\n        List of floats\\n\\n    '", "#NEWLINE#", "all_ranks", "=", "[", "]", "#NEWLINE#", "for", "i", "in", "range", "(", "len", "(", "results", ")", ")", ":", "#NEWLINE#", "#INDENT#", "all_rr", "=", "[", "]", "#NEWLINE#", "for", "j", "in", "query", "[", "i", "]", ":", "#NEWLINE#", "#INDENT#", "rank", "=", "np", ".", "where", "(", "(", "results", "[", "i", "]", "==", "j", ")", ")", "[", "0", "]", "#NEWLINE#", "if", "(", "len", "(", "rank", ")", "==", "0", ")", ":", "#NEWLINE#", "#INDENT#", "rank", "=", "len", "(", "query", "[", "i", "]", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "rank", "=", "rank", "[", "0", "]", "#NEWLINE#", "#UNINDENT#", "all_rr", ".", "append", "(", "rank", ")", "#NEWLINE#", "#UNINDENT#", "min_rank", "=", "min", "(", "all_rr", ")", "#NEWLINE#", "rr", "=", "(", "1.0", "/", "(", "min_rank", "+", "1", ")", ")", "#NEWLINE#", "all_ranks", ".", "append", "(", "rr", ")", "#NEWLINE#", "#UNINDENT#", "return", "all_ranks"], "edges": [[1, 3, 7, "enum_FIELD"], [8, 9, 7, "enum_FIELD"], [10, 13, 7, "enum_FIELD"], [18, 17, 7, "enum_FIELD"], [18, 20, 7, "enum_FIELD"], [133, 134, 7, "enum_FIELD"], [20, 19, 7, "enum_FIELD"], [28, 31, 7, "enum_FIELD"], [36, 35, 7, "enum_FIELD"], [36, 38, 7, "enum_FIELD"], [105, 109, 7, "enum_FIELD"], [112, 117, 7, "enum_FIELD"], [124, 128, 7, "enum_FIELD"], [22, 21, 7, "enum_FIELD"], [38, 37, 7, "enum_FIELD"], [38, 39, 7, "enum_FIELD"], [43, 59, 7, "enum_FIELD"], [72, 69, 7, "enum_FIELD"], [97, 101, 7, "enum_FIELD"], [109, 108, 7, "enum_FIELD"], [117, 116, 7, "enum_FIELD"], [117, 120, 7, "enum_FIELD"], [128, 126, 7, "enum_FIELD"], [59, 49, 7, "enum_FIELD"], [59, 60, 7, "enum_FIELD"], [69, 66, 7, "enum_FIELD"], [74, 78, 7, "enum_FIELD"], [89, 93, 7, "enum_FIELD"], [101, 99, 7, "enum_FIELD"], [120, 119, 7, "enum_FIELD"], [120, 121, 7, "enum_FIELD"], [126, 125, 7, "enum_FIELD"], [49, 47, 7, "enum_FIELD"], [66, 65, 7, "enum_FIELD"], [78, 77, 7, "enum_FIELD"], [93, 92, 7, "enum_FIELD"], [93, 94, 7, "enum_FIELD"], [99, 98, 7, "enum_FIELD"], [47, 46, 7, "enum_FIELD"], [55, 52, 7, "enum_FIELD"], [80, 79, 7, "enum_FIELD"], [80, 81, 7, "enum_FIELD"], [52, 51, 7, "enum_FIELD"], [52, 53, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [23, 2, 10, "enum_LAST_LEXICAL_USE"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [37, 4, 10, "enum_LAST_LEXICAL_USE"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [39, 17, 10, "enum_LAST_LEXICAL_USE"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [51, 23, 10, "enum_LAST_LEXICAL_USE"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [53, 39, 10, "enum_LAST_LEXICAL_USE"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [56, 35, 10, "enum_LAST_LEXICAL_USE"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [65, 21, 10, "enum_LAST_LEXICAL_USE"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [67, 44, 10, "enum_LAST_LEXICAL_USE"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 74, 9, "enum_NEXT_SYNTAX"], [75, 67, 10, "enum_LAST_LEXICAL_USE"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [77, 65, 10, "enum_LAST_LEXICAL_USE"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [79, 37, 10, "enum_LAST_LEXICAL_USE"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [81, 53, 10, "enum_LAST_LEXICAL_USE"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 89, 9, "enum_NEXT_SYNTAX"], [90, 75, 10, "enum_LAST_LEXICAL_USE"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [92, 90, 10, "enum_LAST_LEXICAL_USE"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 97, 9, "enum_NEXT_SYNTAX"], [98, 29, 10, "enum_LAST_LEXICAL_USE"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [102, 92, 10, "enum_LAST_LEXICAL_USE"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [110, 98, 10, "enum_LAST_LEXICAL_USE"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [119, 106, 10, "enum_LAST_LEXICAL_USE"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [125, 11, 10, "enum_LAST_LEXICAL_USE"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [129, 113, 10, "enum_LAST_LEXICAL_USE"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 133, 9, "enum_NEXT_SYNTAX"], [134, 125, 10, "enum_LAST_LEXICAL_USE"], [133, 134, 9, "enum_NEXT_SYNTAX"], [3, 8, 1, "enum_CFG_NEXT"], [8, 10, 1, "enum_CFG_NEXT"], [10, 20, 1, "enum_CFG_NEXT"], [20, 17, 1, "enum_CFG_NEXT"], [17, 133, 1, "enum_CFG_NEXT"], [17, 28, 1, "enum_CFG_NEXT"], [28, 38, 1, "enum_CFG_NEXT"], [38, 35, 1, "enum_CFG_NEXT"], [35, 105, 1, "enum_CFG_NEXT"], [35, 43, 1, "enum_CFG_NEXT"], [43, 69, 1, "enum_CFG_NEXT"], [69, 89, 1, "enum_CFG_NEXT"], [69, 74, 1, "enum_CFG_NEXT"], [74, 97, 1, "enum_CFG_NEXT"], [89, 97, 1, "enum_CFG_NEXT"], [97, 35, 1, "enum_CFG_NEXT"], [105, 112, 1, "enum_CFG_NEXT"], [112, 124, 1, "enum_CFG_NEXT"], [124, 17, 1, "enum_CFG_NEXT"], [23, 2, 3, "enum_LAST_WRITE"], [17, 81, 2, "enum_LAST_READ"], [17, 53, 2, "enum_LAST_READ"], [17, 39, 2, "enum_LAST_READ"], [17, 17, 3, "enum_LAST_WRITE"], [29, 110, 2, "enum_LAST_READ"], [29, 29, 3, "enum_LAST_WRITE"], [37, 79, 2, "enum_LAST_READ"], [37, 37, 2, "enum_LAST_READ"], [37, 4, 3, "enum_LAST_WRITE"], [39, 81, 2, "enum_LAST_READ"], [39, 53, 2, "enum_LAST_READ"], [39, 39, 2, "enum_LAST_READ"], [39, 17, 3, "enum_LAST_WRITE"], [35, 56, 2, "enum_LAST_READ"], [35, 35, 3, "enum_LAST_WRITE"], [46, 46, 2, "enum_LAST_READ"], [51, 51, 2, "enum_LAST_READ"], [51, 23, 2, "enum_LAST_READ"], [51, 2, 3, "enum_LAST_WRITE"], [53, 81, 2, "enum_LAST_READ"], [53, 53, 2, "enum_LAST_READ"], [53, 39, 2, "enum_LAST_READ"], [53, 17, 3, "enum_LAST_WRITE"], [56, 56, 2, "enum_LAST_READ"], [56, 35, 3, "enum_LAST_WRITE"], [44, 102, 2, "enum_LAST_READ"], [44, 75, 3, "enum_LAST_WRITE"], [44, 90, 3, "enum_LAST_WRITE"], [65, 77, 2, "enum_LAST_READ"], [65, 65, 2, "enum_LAST_READ"], [65, 21, 2, "enum_LAST_READ"], [67, 102, 2, "enum_LAST_READ"], [67, 44, 3, "enum_LAST_WRITE"], [77, 65, 2, "enum_LAST_READ"], [79, 79, 2, "enum_LAST_READ"], [79, 37, 2, "enum_LAST_READ"], [79, 4, 3, "enum_LAST_WRITE"], [81, 53, 2, "enum_LAST_READ"], [81, 17, 3, "enum_LAST_WRITE"], [75, 67, 2, "enum_LAST_READ"], [75, 44, 3, "enum_LAST_WRITE"], [92, 67, 2, "enum_LAST_READ"], [92, 44, 3, "enum_LAST_WRITE"], [90, 92, 2, "enum_LAST_READ"], [90, 44, 3, "enum_LAST_WRITE"], [98, 110, 2, "enum_LAST_READ"], [98, 98, 2, "enum_LAST_READ"], [98, 29, 3, "enum_LAST_WRITE"], [102, 67, 2, "enum_LAST_READ"], [102, 92, 2, "enum_LAST_READ"], [102, 75, 3, "enum_LAST_WRITE"], [102, 90, 3, "enum_LAST_WRITE"], [108, 108, 2, "enum_LAST_READ"], [110, 110, 2, "enum_LAST_READ"], [110, 98, 2, "enum_LAST_READ"], [110, 29, 3, "enum_LAST_WRITE"], [106, 119, 2, "enum_LAST_READ"], [106, 106, 3, "enum_LAST_WRITE"], [119, 119, 2, "enum_LAST_READ"], [119, 106, 3, "enum_LAST_WRITE"], [113, 129, 2, "enum_LAST_READ"], [113, 113, 3, "enum_LAST_WRITE"], [125, 125, 2, "enum_LAST_READ"], [125, 11, 3, "enum_LAST_WRITE"], [129, 129, 2, "enum_LAST_READ"], [129, 113, 3, "enum_LAST_WRITE"], [134, 125, 2, "enum_LAST_READ"], [134, 11, 3, "enum_LAST_WRITE"], [106, 108, 4, "enum_COMPUTED_FROM"], [106, 110, 4, "enum_COMPUTED_FROM"], [113, 119, 4, "enum_COMPUTED_FROM"], [44, 46, 4, "enum_COMPUTED_FROM"], [44, 56, 4, "enum_COMPUTED_FROM"], [44, 51, 4, "enum_COMPUTED_FROM"], [44, 53, 4, "enum_COMPUTED_FROM"], [75, 77, 4, "enum_COMPUTED_FROM"], [75, 79, 4, "enum_COMPUTED_FROM"], [75, 81, 4, "enum_COMPUTED_FROM"], [90, 92, 4, "enum_COMPUTED_FROM"]], "error_location": 79, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/biolab/orange3-recommendation.git", "old_path": "orangecontrib/recommendation/evaluation/ranking.py", "hash": "55f4a56c940175a50cd6ccf73783bf66cda42a92", "code": "def ReciprocalRank(results: List[List[int]], query: List[List[int]]) -> List[float]:\n    \"\"\" The Reciprocal Rank (RR) is the multiplicative inverse of the rank of\n    the first correct answer.\n\n    Args:\n        results: array\n            Array with the responses. => [[4, 2, 12, 52], [3, 2, 10]]\n\n        query: array\n            Array with the query. => [[12], [10, 4]]\n\n    Returns:\n        List of floats\n\n    \"\"\"\n\n    all_ranks: List[float] = []\n    for i in range(len(results)):\n\n        all_rr: List[int] = []\n        for j in query[i]:\n            rank: Union[np.ndarray] = np.where(results[i] == j)[0]\n\n            if len(rank) == 0:  # Check values not found\n                rank: int = len(query[i])\n            else:\n                rank: int = rank[0]\n            all_rr.append(rank)\n\n        # Get the item best ranked (the smaller, the better; 1st, 2nd,..)\n        min_rank: int = min(all_rr)\n\n        rr: float = 1.0 / (min_rank + 1)\n        all_ranks.append(rr)\n\n    return all_ranks\n", "rewrite": "ReplaceText(target='results' @(29,27)->(29,32))", "error_line": 24, "has_bug": true, "code_full": "from typing import List, Union\n\nimport numpy as np\n\n\ndef ReciprocalRank(results: List[List[int]], query: List[List[int]]) -> List[float]:\n    \"\"\" The Reciprocal Rank (RR) is the multiplicative inverse of the rank of\n    the first correct answer.\n\n    Args:\n        results: array\n            Array with the responses. => [[4, 2, 12, 52], [3, 2, 10]]\n\n        query: array\n            Array with the query. => [[12], [10, 4]]\n\n    Returns:\n        List of floats\n\n    \"\"\"\n\n    all_ranks: List[float] = []\n    for i in range(len(results)):\n\n        all_rr: List[int] = []\n        for j in query[i]:\n            rank: Union[np.ndarray] = np.where(results[i] == j)[0]\n\n            if len(rank) == 0:  # Check values not found\n                rank: int = len(query[i])\n            else:\n                rank: int = rank[0]\n            all_rr.append(rank)\n\n        # Get the item best ranked (the smaller, the better; 1st, 2nd,..)\n        min_rank: int = min(all_rr)\n\n        rr: float = 1.0 / (min_rank + 1)\n        all_ranks.append(rr)\n\n    return all_ranks\n", "error_location_char": [701, 706], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def craft(", "name", ",", "word", ",", "inventory", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Craft an item by name\\n\\n    :param str name: name of the item to craft\\n    :param str word: command/action word used by player\\n    :param text_game_maker.game_objects.items.Container inventory: inventory        object to use for crafting\\n    :return: crafted item\\n    :rtype: text_game_maker.game_objects.items.Item\\n    '", "#NEWLINE#", "items", "=", "[", "]", "#NEWLINE#", "item", "=", "None", "#NEWLINE#", "if", "(", "name", "in", "craftables", ")", ":", "#NEWLINE#", "#INDENT#", "(", "items", ",", "item", ")", "=", "craftables", "[", "item", "]", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "for", "k", "in", "craftables", ":", "#NEWLINE#", "#INDENT#", "if", "(", "k", ".", "startswith", "(", "name", ")", "or", "k", ".", "endswith", "(", "name", ")", "or", "(", "k", "in", "name", ")", ")", ":", "#NEWLINE#", "#INDENT#", "(", "items", ",", "item", ")", "=", "craftables", "[", "k", "]", "#NEWLINE#", "break", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "if", "(", "(", "not", "items", ")", "or", "(", "not", "item", ")", ")", ":", "#NEWLINE#", "#INDENT#", "utils", ".", "save_sound", "(", "audio", ".", "FAILURE_SOUND", ")", "#NEWLINE#", "utils", ".", "game_print", "(", "(", "\"Don't know how to %s %s\"", "%", "(", "word", ",", "name", ")", ")", ")", "#NEWLINE#", "return", "#NEWLINE#", "#UNINDENT#", "ingredients", "=", "[", "]", "#NEWLINE#", "for", "i", "in", "items", ":", "#NEWLINE#", "#INDENT#", "ingredient", "=", "_get_inventory_item", "(", "i", ".", "name", ",", "inventory", ")", "#NEWLINE#", "if", "(", "ingredient", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "_need_items", "(", "name", ",", "word", ",", "items", ")", "#NEWLINE#", "return", "#NEWLINE#", "#UNINDENT#", "ingredients", ".", "append", "(", "ingredient", ")", "#NEWLINE#", "#UNINDENT#", "for", "i", "in", "ingredients", ":", "#NEWLINE#", "#INDENT#", "i", ".", "delete", "(", ")", "#NEWLINE#", "#UNINDENT#", "inventory", ".", "add_item", "(", "item", ")", "#NEWLINE#", "utils", ".", "save_sound", "(", "audio", ".", "NEW_ITEM_SOUND", ")", "#NEWLINE#", "utils", ".", "game_print", "(", "(", "'Created %s.'", "%", "item", ".", "name", ")", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [10, 11, 7, "enum_FIELD"], [12, 15, 7, "enum_FIELD"], [17, 20, 7, "enum_FIELD"], [28, 25, 7, "enum_FIELD"], [95, 101, 7, "enum_FIELD"], [136, 139, 7, "enum_FIELD"], [144, 143, 7, "enum_FIELD"], [144, 145, 7, "enum_FIELD"], [191, 190, 7, "enum_FIELD"], [191, 192, 7, "enum_FIELD"], [202, 206, 7, "enum_FIELD"], [209, 213, 7, "enum_FIELD"], [218, 222, 7, "enum_FIELD"], [25, 24, 7, "enum_FIELD"], [30, 38, 7, "enum_FIELD"], [49, 48, 7, "enum_FIELD"], [49, 50, 7, "enum_FIELD"], [109, 113, 7, "enum_FIELD"], [118, 122, 7, "enum_FIELD"], [148, 156, 7, "enum_FIELD"], [160, 163, 7, "enum_FIELD"], [180, 184, 7, "enum_FIELD"], [195, 199, 7, "enum_FIELD"], [206, 204, 7, "enum_FIELD"], [213, 211, 7, "enum_FIELD"], [222, 220, 7, "enum_FIELD"], [38, 37, 7, "enum_FIELD"], [38, 39, 7, "enum_FIELD"], [54, 62, 7, "enum_FIELD"], [98, 99, 7, "enum_FIELD"], [103, 104, 7, "enum_FIELD"], [113, 111, 7, "enum_FIELD"], [122, 120, 7, "enum_FIELD"], [156, 151, 7, "enum_FIELD"], [163, 162, 7, "enum_FIELD"], [168, 172, 7, "enum_FIELD"], [184, 182, 7, "enum_FIELD"], [199, 197, 7, "enum_FIELD"], [204, 203, 7, "enum_FIELD"], [211, 210, 7, "enum_FIELD"], [215, 214, 7, "enum_FIELD"], [220, 219, 7, "enum_FIELD"], [225, 224, 7, "enum_FIELD"], [225, 227, 7, "enum_FIELD"], [78, 86, 7, "enum_FIELD"], [111, 110, 7, "enum_FIELD"], [115, 114, 7, "enum_FIELD"], [120, 119, 7, "enum_FIELD"], [125, 124, 7, "enum_FIELD"], [125, 128, 7, "enum_FIELD"], [154, 153, 7, "enum_FIELD"], [172, 169, 7, "enum_FIELD"], [182, 181, 7, "enum_FIELD"], [197, 196, 7, "enum_FIELD"], [227, 226, 7, "enum_FIELD"], [59, 57, 7, "enum_FIELD"], [66, 64, 7, "enum_FIELD"], [72, 71, 7, "enum_FIELD"], [86, 85, 7, "enum_FIELD"], [86, 87, 7, "enum_FIELD"], [57, 56, 7, "enum_FIELD"], [64, 63, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [24, 2, 10, "enum_LAST_LEXICAL_USE"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [32, 13, 10, "enum_LAST_LEXICAL_USE"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [34, 18, 10, "enum_LAST_LEXICAL_USE"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [37, 26, 10, "enum_LAST_LEXICAL_USE"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [39, 34, 10, "enum_LAST_LEXICAL_USE"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [50, 37, 10, "enum_LAST_LEXICAL_USE"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [56, 48, 10, "enum_LAST_LEXICAL_USE"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [60, 24, 10, "enum_LAST_LEXICAL_USE"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [63, 56, 10, "enum_LAST_LEXICAL_USE"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [67, 60, 10, "enum_LAST_LEXICAL_USE"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [71, 63, 10, "enum_LAST_LEXICAL_USE"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [73, 67, 10, "enum_LAST_LEXICAL_USE"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [80, 32, 10, "enum_LAST_LEXICAL_USE"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [82, 39, 10, "enum_LAST_LEXICAL_USE"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [85, 50, 10, "enum_LAST_LEXICAL_USE"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [87, 71, 10, "enum_LAST_LEXICAL_USE"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 90, 9, "enum_NEXT_SYNTAX"], [90, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [99, 80, 10, "enum_LAST_LEXICAL_USE"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [104, 82, 10, "enum_LAST_LEXICAL_USE"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [119, 110, 10, "enum_LAST_LEXICAL_USE"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [127, 4, 10, "enum_LAST_LEXICAL_USE"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [129, 73, 10, "enum_LAST_LEXICAL_USE"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 134, 9, "enum_NEXT_SYNTAX"], [134, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [145, 99, 10, "enum_LAST_LEXICAL_USE"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [153, 143, 10, "enum_LAST_LEXICAL_USE"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [157, 6, 10, "enum_LAST_LEXICAL_USE"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [162, 149, 10, "enum_LAST_LEXICAL_USE"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [171, 129, 10, "enum_LAST_LEXICAL_USE"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [173, 127, 10, "enum_LAST_LEXICAL_USE"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [175, 145, 10, "enum_LAST_LEXICAL_USE"], [174, 175, 9, "enum_NEXT_SYNTAX"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 178, 9, "enum_NEXT_SYNTAX"], [178, 180, 9, "enum_NEXT_SYNTAX"], [181, 137, 10, "enum_LAST_LEXICAL_USE"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 184, 9, "enum_NEXT_SYNTAX"], [185, 162, 10, "enum_LAST_LEXICAL_USE"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 189, 9, "enum_NEXT_SYNTAX"], [190, 153, 10, "enum_LAST_LEXICAL_USE"], [189, 190, 9, "enum_NEXT_SYNTAX"], [190, 191, 9, "enum_NEXT_SYNTAX"], [192, 181, 10, "enum_LAST_LEXICAL_USE"], [191, 192, 9, "enum_NEXT_SYNTAX"], [192, 193, 9, "enum_NEXT_SYNTAX"], [193, 195, 9, "enum_NEXT_SYNTAX"], [196, 190, 10, "enum_LAST_LEXICAL_USE"], [195, 196, 9, "enum_NEXT_SYNTAX"], [196, 197, 9, "enum_NEXT_SYNTAX"], [197, 198, 9, "enum_NEXT_SYNTAX"], [198, 199, 9, "enum_NEXT_SYNTAX"], [199, 200, 9, "enum_NEXT_SYNTAX"], [200, 202, 9, "enum_NEXT_SYNTAX"], [203, 157, 10, "enum_LAST_LEXICAL_USE"], [202, 203, 9, "enum_NEXT_SYNTAX"], [203, 204, 9, "enum_NEXT_SYNTAX"], [204, 205, 9, "enum_NEXT_SYNTAX"], [205, 206, 9, "enum_NEXT_SYNTAX"], [207, 104, 10, "enum_LAST_LEXICAL_USE"], [206, 207, 9, "enum_NEXT_SYNTAX"], [207, 208, 9, "enum_NEXT_SYNTAX"], [208, 209, 9, "enum_NEXT_SYNTAX"], [210, 119, 10, "enum_LAST_LEXICAL_USE"], [209, 210, 9, "enum_NEXT_SYNTAX"], [210, 211, 9, "enum_NEXT_SYNTAX"], [211, 212, 9, "enum_NEXT_SYNTAX"], [212, 213, 9, "enum_NEXT_SYNTAX"], [214, 114, 10, "enum_LAST_LEXICAL_USE"], [213, 214, 9, "enum_NEXT_SYNTAX"], [214, 215, 9, "enum_NEXT_SYNTAX"], [215, 216, 9, "enum_NEXT_SYNTAX"], [216, 217, 9, "enum_NEXT_SYNTAX"], [217, 218, 9, "enum_NEXT_SYNTAX"], [219, 210, 10, "enum_LAST_LEXICAL_USE"], [218, 219, 9, "enum_NEXT_SYNTAX"], [219, 220, 9, "enum_NEXT_SYNTAX"], [220, 221, 9, "enum_NEXT_SYNTAX"], [221, 222, 9, "enum_NEXT_SYNTAX"], [222, 223, 9, "enum_NEXT_SYNTAX"], [223, 224, 9, "enum_NEXT_SYNTAX"], [224, 225, 9, "enum_NEXT_SYNTAX"], [226, 207, 10, "enum_LAST_LEXICAL_USE"], [225, 226, 9, "enum_NEXT_SYNTAX"], [226, 227, 9, "enum_NEXT_SYNTAX"], [227, 228, 9, "enum_NEXT_SYNTAX"], [228, 229, 9, "enum_NEXT_SYNTAX"], [229, 230, 9, "enum_NEXT_SYNTAX"], [3, 10, 1, "enum_CFG_NEXT"], [10, 12, 1, "enum_CFG_NEXT"], [12, 17, 1, "enum_CFG_NEXT"], [17, 25, 1, "enum_CFG_NEXT"], [25, 30, 1, "enum_CFG_NEXT"], [25, 50, 1, "enum_CFG_NEXT"], [30, 101, 1, "enum_CFG_NEXT"], [50, 48, 1, "enum_CFG_NEXT"], [48, 101, 1, "enum_CFG_NEXT"], [48, 62, 1, "enum_CFG_NEXT"], [62, 78, 1, "enum_CFG_NEXT"], [62, 48, 1, "enum_CFG_NEXT"], [78, 101, 1, "enum_CFG_NEXT"], [101, 109, 1, "enum_CFG_NEXT"], [101, 136, 1, "enum_CFG_NEXT"], [109, 118, 1, "enum_CFG_NEXT"], [118, 134, 1, "enum_CFG_NEXT"], [136, 145, 1, "enum_CFG_NEXT"], [145, 143, 1, "enum_CFG_NEXT"], [143, 148, 1, "enum_CFG_NEXT"], [143, 192, 1, "enum_CFG_NEXT"], [148, 163, 1, "enum_CFG_NEXT"], [163, 180, 1, "enum_CFG_NEXT"], [163, 168, 1, "enum_CFG_NEXT"], [168, 178, 1, "enum_CFG_NEXT"], [180, 143, 1, "enum_CFG_NEXT"], [192, 190, 1, "enum_CFG_NEXT"], [190, 202, 1, "enum_CFG_NEXT"], [190, 195, 1, "enum_CFG_NEXT"], [195, 190, 1, "enum_CFG_NEXT"], [202, 209, 1, "enum_CFG_NEXT"], [209, 218, 1, "enum_CFG_NEXT"], [24, 2, 3, "enum_LAST_WRITE"], [37, 26, 2, "enum_LAST_READ"], [39, 18, 3, "enum_LAST_WRITE"], [32, 13, 3, "enum_LAST_WRITE"], [34, 39, 2, "enum_LAST_READ"], [34, 18, 3, "enum_LAST_WRITE"], [50, 26, 2, "enum_LAST_READ"], [48, 71, 2, "enum_LAST_READ"], [48, 48, 3, "enum_LAST_WRITE"], [56, 71, 2, "enum_LAST_READ"], [56, 48, 3, "enum_LAST_WRITE"], [60, 73, 2, "enum_LAST_READ"], [60, 24, 2, "enum_LAST_READ"], [60, 2, 3, "enum_LAST_WRITE"], [63, 56, 2, "enum_LAST_READ"], [63, 48, 3, "enum_LAST_WRITE"], [67, 60, 2, "enum_LAST_READ"], [67, 2, 3, "enum_LAST_WRITE"], [71, 63, 2, "enum_LAST_READ"], [71, 48, 3, "enum_LAST_WRITE"], [73, 67, 2, "enum_LAST_READ"], [73, 2, 3, "enum_LAST_WRITE"], [85, 50, 2, "enum_LAST_READ"], [87, 71, 2, "enum_LAST_READ"], [87, 48, 3, "enum_LAST_WRITE"], [80, 13, 3, "enum_LAST_WRITE"], [82, 18, 3, "enum_LAST_WRITE"], [99, 32, 3, "enum_LAST_WRITE"], [99, 80, 3, "enum_LAST_WRITE"], [99, 13, 3, "enum_LAST_WRITE"], [104, 39, 2, "enum_LAST_READ"], [104, 34, 3, "enum_LAST_WRITE"], [104, 18, 3, "enum_LAST_WRITE"], [104, 82, 3, "enum_LAST_WRITE"], [119, 110, 2, "enum_LAST_READ"], [127, 4, 3, "enum_LAST_WRITE"], [129, 73, 2, "enum_LAST_READ"], [129, 24, 2, "enum_LAST_READ"], [129, 2, 3, "enum_LAST_WRITE"], [145, 99, 2, "enum_LAST_READ"], [145, 32, 3, "enum_LAST_WRITE"], [145, 80, 3, "enum_LAST_WRITE"], [145, 13, 3, "enum_LAST_WRITE"], [143, 153, 2, "enum_LAST_READ"], [143, 143, 3, "enum_LAST_WRITE"], [151, 151, 2, "enum_LAST_READ"], [153, 153, 2, "enum_LAST_READ"], [153, 143, 3, "enum_LAST_WRITE"], [157, 157, 2, "enum_LAST_READ"], [157, 6, 3, "enum_LAST_WRITE"], [149, 185, 2, "enum_LAST_READ"], [149, 149, 3, "enum_LAST_WRITE"], [162, 185, 2, "enum_LAST_READ"], [162, 149, 3, "enum_LAST_WRITE"], [171, 73, 2, "enum_LAST_READ"], [171, 24, 2, "enum_LAST_READ"], [171, 2, 3, "enum_LAST_WRITE"], [173, 4, 3, "enum_LAST_WRITE"], [175, 145, 2, "enum_LAST_READ"], [175, 32, 3, "enum_LAST_WRITE"], [175, 80, 3, "enum_LAST_WRITE"], [175, 13, 3, "enum_LAST_WRITE"], [181, 181, 2, "enum_LAST_READ"], [181, 137, 3, "enum_LAST_WRITE"], [185, 162, 2, "enum_LAST_READ"], [185, 149, 3, "enum_LAST_WRITE"], [192, 181, 2, "enum_LAST_READ"], [192, 137, 3, "enum_LAST_WRITE"], [190, 196, 2, "enum_LAST_READ"], [190, 153, 2, "enum_LAST_READ"], [190, 190, 3, "enum_LAST_WRITE"], [190, 143, 3, "enum_LAST_WRITE"], [196, 196, 2, "enum_LAST_READ"], [196, 153, 2, "enum_LAST_READ"], [196, 190, 3, "enum_LAST_WRITE"], [203, 157, 2, "enum_LAST_READ"], [203, 6, 3, "enum_LAST_WRITE"], [207, 104, 2, "enum_LAST_READ"], [207, 34, 3, "enum_LAST_WRITE"], [207, 18, 3, "enum_LAST_WRITE"], [207, 82, 3, "enum_LAST_WRITE"], [219, 210, 2, "enum_LAST_READ"], [226, 207, 2, "enum_LAST_READ"], [226, 34, 3, "enum_LAST_WRITE"], [226, 18, 3, "enum_LAST_WRITE"], [226, 82, 3, "enum_LAST_WRITE"], [33, 37, 4, "enum_COMPUTED_FROM"], [33, 39, 4, "enum_COMPUTED_FROM"], [149, 151, 4, "enum_COMPUTED_FROM"], [149, 157, 4, "enum_COMPUTED_FROM"], [149, 153, 4, "enum_COMPUTED_FROM"], [81, 85, 4, "enum_COMPUTED_FROM"], [81, 87, 4, "enum_COMPUTED_FROM"]], "error_location": 39, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/eriknyquist/text_game_maker.git", "old_path": "text_game_maker/crafting/crafting.py", "hash": "a890d63064b801645a425df5d2d69ad4a9056d8f", "code": "def craft(name: str, word: str, inventory: Container):\n    \"\"\"\n    Craft an item by name\n\n    :param str name: name of the item to craft\n    :param str word: command/action word used by player\n    :param text_game_maker.game_objects.items.Container inventory: inventory        object to use for crafting\n    :return: crafted item\n    :rtype: text_game_maker.game_objects.items.Item\n    \"\"\"\n    items: list[Item] = []\n    item: Optional[Item] = None\n\n    if name in craftables:\n        items, item = craftables[item]\n    else:\n        for k in craftables:\n            if k.startswith(name) or k.endswith(name) or (k in name):\n                items, item = craftables[k]\n                break\n\n    if (not items) or (not item):\n        utils.save_sound(audio.FAILURE_SOUND)\n        utils.game_print(\"Don't know how to %s %s\" % (word, name))\n        return\n\n    ingredients: List[Item] = []\n\n    for i in items:\n        ingredient = _get_inventory_item(i.name, inventory)\n        if ingredient is None:\n            _need_items(name, word, items)\n            return\n\n        ingredients.append(ingredient)\n\n    for i in ingredients:\n        i.delete()\n\n    inventory.add_item(item)\n    utils.save_sound(audio.NEW_ITEM_SOUND)\n    utils.game_print(\"Created %s.\" % item.name)\n", "rewrite": "ReplaceText(target='name' @(64,33)->(64,37))", "error_line": 15, "has_bug": true, "code_full": "from typing import Any, Dict, List, Optional\n\nfrom text_game_maker.audio import audio\nfrom text_game_maker.utils import utils\n\ncraftables: Dict[str, Any] = {}\n\nclass Container:\n    def add_item(self, item: Any):\n        pass\n\nclass Item:\n    name: str\n\n    def delete(self):\n        pass\n\ndef _get_inventory_item(item_name: str, inventory: Container) -> Optional[Item]:\n    # Dummy implementation for type annotation purposes\n    pass\n\ndef _need_items(name: str, word: str, items_list: List[Item]) -> None:\n    # Dummy implementation for type annotation purposes\n    pass\n\n\ndef craft(name: str, word: str, inventory: Container):\n    \"\"\"\n    Craft an item by name\n\n    :param str name: name of the item to craft\n    :param str word: command/action word used by player\n    :param text_game_maker.game_objects.items.Container inventory: inventory        object to use for crafting\n    :return: crafted item\n    :rtype: text_game_maker.game_objects.items.Item\n    \"\"\"\n    items: list[Item] = []\n    item: Optional[Item] = None\n\n    if name in craftables:\n        items, item = craftables[item]\n    else:\n        for k in craftables:\n            if k.startswith(name) or k.endswith(name) or (k in name):\n                items, item = craftables[k]\n                break\n\n    if (not items) or (not item):\n        utils.save_sound(audio.FAILURE_SOUND)\n        utils.game_print(\"Don't know how to %s %s\" % (word, name))\n        return\n\n    ingredients: List[Item] = []\n\n    for i in items:\n        ingredient = _get_inventory_item(i.name, inventory)\n        if ingredient is None:\n            _need_items(name, word, items)\n            return\n\n        ingredients.append(ingredient)\n\n    for i in ingredients:\n        i.delete()\n\n    inventory.add_item(item)\n    utils.save_sound(audio.NEW_ITEM_SOUND)\n    utils.game_print(\"Created %s.\" % item.name)\n", "error_location_char": [510, 514], "type_checked_pytype": false, "type_error_label": "unsupported-operands", "type_checked_mypy": false}
{"source_tokens": ["#NEWLINE#", "def ddot(", "L", ",", "R", ",", "left", "=", "True", ",", "out", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "'Dot product of a matrix and a diagonal one.\\n\\n    Args:\\n        L (array_like): Left matrix.\\n        R (array_like): Right matrix.\\n        out (:class:`numpy.ndarray`, optional): copy result to.\\n\\n    Returns:\\n        :class:`numpy.ndarray`: Resulting matrix.\\n    '", "#NEWLINE#", "L", "=", "asarray", "(", "L", ",", "float", ")", "#NEWLINE#", "R", "=", "asarray", "(", "R", ",", "float", ")", "#NEWLINE#", "ok", "=", "(", "(", "min", "(", "L", ".", "ndim", ",", "R", ".", "ndim", ")", "==", "1", ")", "and", "(", "max", "(", "L", ".", "ndim", ",", "R", ".", "ndim", ")", "==", "2", ")", ")", "#NEWLINE#", "if", "(", "not", "ok", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "ValueError", "(", "(", "'Wrong array layout. One array should have'", "+", "' ndim=1 and the other one ndim=2.'", ")", ")", "#NEWLINE#", "#UNINDENT#", "if", "(", "L", ".", "ndim", "==", "1", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "out", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "out", "=", "copy", "(", "R", ")", "#NEWLINE#", "#UNINDENT#", "return", "multiply", "(", "L", "[", "(", ":", ",", "newaxis", ")", "]", ",", "R", ",", "out", "=", "out", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "out", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "out", "=", "copy", "(", "L", ")", "#NEWLINE#", "#UNINDENT#", "return", "multiply", "(", "out", ",", "R", ",", "out", "=", "out", ")"], "edges": [[1, 7, 7, "enum_FIELD"], [16, 17, 7, "enum_FIELD"], [18, 24, 7, "enum_FIELD"], [27, 33, 7, "enum_FIELD"], [36, 54, 7, "enum_FIELD"], [71, 73, 7, "enum_FIELD"], [98, 95, 7, "enum_FIELD"], [24, 21, 7, "enum_FIELD"], [33, 30, 7, "enum_FIELD"], [73, 74, 7, "enum_FIELD"], [79, 81, 7, "enum_FIELD"], [95, 93, 7, "enum_FIELD"], [101, 104, 7, "enum_FIELD"], [118, 129, 7, "enum_FIELD"], [142, 145, 7, "enum_FIELD"], [159, 163, 7, "enum_FIELD"], [51, 46, 7, "enum_FIELD"], [66, 61, 7, "enum_FIELD"], [81, 80, 7, "enum_FIELD"], [93, 92, 7, "enum_FIELD"], [104, 103, 7, "enum_FIELD"], [109, 113, 7, "enum_FIELD"], [129, 119, 7, "enum_FIELD"], [145, 144, 7, "enum_FIELD"], [150, 154, 7, "enum_FIELD"], [163, 160, 7, "enum_FIELD"], [46, 41, 7, "enum_FIELD"], [61, 56, 7, "enum_FIELD"], [84, 83, 7, "enum_FIELD"], [84, 85, 7, "enum_FIELD"], [113, 112, 7, "enum_FIELD"], [122, 121, 7, "enum_FIELD"], [122, 125, 7, "enum_FIELD"], [132, 134, 7, "enum_FIELD"], [154, 153, 7, "enum_FIELD"], [166, 168, 7, "enum_FIELD"], [44, 43, 7, "enum_FIELD"], [48, 47, 7, "enum_FIELD"], [59, 58, 7, "enum_FIELD"], [63, 62, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [19, 2, 10, "enum_LAST_LEXICAL_USE"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [23, 19, 10, "enum_LAST_LEXICAL_USE"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [28, 4, 10, "enum_LAST_LEXICAL_USE"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [30, 21, 10, "enum_LAST_LEXICAL_USE"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [32, 28, 10, "enum_LAST_LEXICAL_USE"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [34, 25, 10, "enum_LAST_LEXICAL_USE"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [43, 23, 10, "enum_LAST_LEXICAL_USE"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [47, 32, 10, "enum_LAST_LEXICAL_USE"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [58, 43, 10, "enum_LAST_LEXICAL_USE"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [62, 47, 10, "enum_LAST_LEXICAL_USE"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [74, 37, 10, "enum_LAST_LEXICAL_USE"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [92, 58, 10, "enum_LAST_LEXICAL_USE"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [103, 10, 10, "enum_LAST_LEXICAL_USE"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 109, 9, "enum_NEXT_SYNTAX"], [110, 103, 10, "enum_LAST_LEXICAL_USE"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [114, 62, 10, "enum_LAST_LEXICAL_USE"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [121, 92, 10, "enum_LAST_LEXICAL_USE"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [130, 114, 10, "enum_LAST_LEXICAL_USE"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [134, 110, 10, "enum_LAST_LEXICAL_USE"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [144, 134, 10, "enum_LAST_LEXICAL_USE"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 150, 9, "enum_NEXT_SYNTAX"], [151, 144, 10, "enum_LAST_LEXICAL_USE"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [153, 112, 10, "enum_LAST_LEXICAL_USE"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [155, 121, 10, "enum_LAST_LEXICAL_USE"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 159, 9, "enum_NEXT_SYNTAX"], [160, 119, 10, "enum_LAST_LEXICAL_USE"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [162, 151, 10, "enum_LAST_LEXICAL_USE"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [164, 130, 10, "enum_LAST_LEXICAL_USE"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [168, 162, 10, "enum_LAST_LEXICAL_USE"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [8, 12, 1, "enum_CFG_NEXT"], [12, 1, 1, "enum_CFG_NEXT"], [7, 16, 1, "enum_CFG_NEXT"], [16, 18, 1, "enum_CFG_NEXT"], [18, 27, 1, "enum_CFG_NEXT"], [27, 36, 1, "enum_CFG_NEXT"], [36, 73, 1, "enum_CFG_NEXT"], [73, 79, 1, "enum_CFG_NEXT"], [73, 95, 1, "enum_CFG_NEXT"], [95, 104, 1, "enum_CFG_NEXT"], [95, 145, 1, "enum_CFG_NEXT"], [104, 109, 1, "enum_CFG_NEXT"], [104, 118, 1, "enum_CFG_NEXT"], [109, 118, 1, "enum_CFG_NEXT"], [145, 150, 1, "enum_CFG_NEXT"], [145, 159, 1, "enum_CFG_NEXT"], [150, 159, 1, "enum_CFG_NEXT"], [23, 2, 3, "enum_LAST_WRITE"], [19, 23, 2, "enum_LAST_READ"], [19, 2, 3, "enum_LAST_WRITE"], [30, 21, 2, "enum_LAST_READ"], [32, 4, 3, "enum_LAST_WRITE"], [34, 25, 2, "enum_LAST_READ"], [28, 32, 2, "enum_LAST_READ"], [28, 4, 3, "enum_LAST_WRITE"], [43, 23, 2, "enum_LAST_READ"], [43, 19, 3, "enum_LAST_WRITE"], [47, 32, 2, "enum_LAST_READ"], [47, 28, 3, "enum_LAST_WRITE"], [58, 43, 2, "enum_LAST_READ"], [58, 19, 3, "enum_LAST_WRITE"], [62, 47, 2, "enum_LAST_READ"], [62, 28, 3, "enum_LAST_WRITE"], [74, 37, 3, "enum_LAST_WRITE"], [92, 58, 2, "enum_LAST_READ"], [92, 19, 3, "enum_LAST_WRITE"], [103, 10, 3, "enum_LAST_WRITE"], [114, 62, 2, "enum_LAST_READ"], [114, 28, 3, "enum_LAST_WRITE"], [110, 103, 2, "enum_LAST_READ"], [110, 10, 3, "enum_LAST_WRITE"], [121, 92, 2, "enum_LAST_READ"], [121, 19, 3, "enum_LAST_WRITE"], [130, 114, 2, "enum_LAST_READ"], [130, 62, 2, "enum_LAST_READ"], [130, 28, 3, "enum_LAST_WRITE"], [134, 103, 2, "enum_LAST_READ"], [134, 110, 3, "enum_LAST_WRITE"], [134, 10, 3, "enum_LAST_WRITE"], [144, 10, 3, "enum_LAST_WRITE"], [155, 92, 2, "enum_LAST_READ"], [155, 19, 3, "enum_LAST_WRITE"], [151, 144, 2, "enum_LAST_READ"], [151, 10, 3, "enum_LAST_WRITE"], [162, 144, 2, "enum_LAST_READ"], [162, 151, 3, "enum_LAST_WRITE"], [162, 10, 3, "enum_LAST_WRITE"], [164, 62, 2, "enum_LAST_READ"], [164, 28, 3, "enum_LAST_WRITE"], [168, 162, 2, "enum_LAST_READ"], [168, 151, 3, "enum_LAST_WRITE"], [168, 10, 3, "enum_LAST_WRITE"], [19, 21, 4, "enum_COMPUTED_FROM"], [19, 23, 4, "enum_COMPUTED_FROM"], [19, 25, 4, "enum_COMPUTED_FROM"], [28, 30, 4, "enum_COMPUTED_FROM"], [28, 32, 4, "enum_COMPUTED_FROM"], [28, 34, 4, "enum_COMPUTED_FROM"], [37, 41, 4, "enum_COMPUTED_FROM"], [37, 56, 4, "enum_COMPUTED_FROM"], [37, 43, 4, "enum_COMPUTED_FROM"], [37, 47, 4, "enum_COMPUTED_FROM"], [37, 58, 4, "enum_COMPUTED_FROM"], [37, 62, 4, "enum_COMPUTED_FROM"], [110, 112, 4, "enum_COMPUTED_FROM"], [110, 114, 4, "enum_COMPUTED_FROM"], [151, 153, 4, "enum_COMPUTED_FROM"], [151, 155, 4, "enum_COMPUTED_FROM"]], "error_location": 162, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/glimix/numpy-sugar.git", "old_path": "numpy_sugar/linalg/dot.py", "hash": "59fb36f9110b7ac9ae2ce6e06d443c7d44aac42f", "code": "def ddot(L: np.ndarray, R: np.ndarray, left: bool = True, out: Optional[np.ndarray] = None) -> np.ndarray:\n    r\"\"\"Dot product of a matrix and a diagonal one.\n\n    Args:\n        L (array_like): Left matrix.\n        R (array_like): Right matrix.\n        out (:class:`numpy.ndarray`, optional): copy result to.\n\n    Returns:\n        :class:`numpy.ndarray`: Resulting matrix.\n    \"\"\"\n    L = asarray(L, float)\n    R = asarray(R, float)\n    ok: float = min(L.ndim, R.ndim) == 1 and max(L.ndim, R.ndim) == 2\n    if not ok:\n        raise ValueError(\"Wrong array layout. One array should have\" +\n                         \" ndim=1 and the other one ndim=2.\")\n    if L.ndim == 1:\n        if out is None:\n            out = copy(R)\n        return multiply(L[:, newaxis], R, out=out)\n    else:\n        if out is None:\n            out = copy(L)\n        return multiply(out, R, out=out)\n", "rewrite": "ReplaceText(target='L' @(53,24)->(53,27))", "error_line": 24, "has_bug": true, "code_full": "from typing import Optional, Union\n\nimport numpy as np\nfrom numpy import asarray, copy, dot, einsum, empty, multiply, newaxis\n\n\ndef ddot(L: np.ndarray, R: np.ndarray, left: bool = True, out: Optional[np.ndarray] = None) -> np.ndarray:\n    r\"\"\"Dot product of a matrix and a diagonal one.\n\n    Args:\n        L (array_like): Left matrix.\n        R (array_like): Right matrix.\n        out (:class:`numpy.ndarray`, optional): copy result to.\n\n    Returns:\n        :class:`numpy.ndarray`: Resulting matrix.\n    \"\"\"\n    L = asarray(L, float)\n    R = asarray(R, float)\n    ok: float = min(L.ndim, R.ndim) == 1 and max(L.ndim, R.ndim) == 2\n    if not ok:\n        raise ValueError(\"Wrong array layout. One array should have\" +\n                         \" ndim=1 and the other one ndim=2.\")\n    if L.ndim == 1:\n        if out is None:\n            out = copy(R)\n        return multiply(L[:, newaxis], R, out=out)\n    else:\n        if out is None:\n            out = copy(L)\n        return multiply(out, R, out=out)\n", "error_location_char": [856, 859], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def print_position(", "lines", ",", "line_no", ")", ":", "#NEWLINE#", "#INDENT#", "lines", "=", "[", "l", ".", "strip", "(", "' \\n'", ")", ".", "split", "(", "'\\t'", ")", "for", "l", "in", "lines", "]", "#NEWLINE#", "word", "=", "lines", "[", "0", "]", "[", "0", "]", "#NEWLINE#", "position", "=", "[", "word", "]", "#NEWLINE#", "for", "(", "i", ",", "line", ")", "in", "enumerate", "(", "lines", ")", ":", "#NEWLINE#", "#INDENT#", "assert", "(", "line", "[", "0", "]", "==", "word", ")", ",", "f", "'Expected first attribute {word} but got {line[0]} in vertical #{(i + 1)} at line #{(line_no + 1)}. Are you sure the verticals represent the same corpus?'", "#NEWLINE#", "position", ".", "extend", "(", "line", "[", "1", ":", "]", ")", "#NEWLINE#", "#UNINDENT#", "print", "(", "'\\t'", ".", "join", "(", "line", ")", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [8, 11, 7, "enum_FIELD"], [28, 35, 7, "enum_FIELD"], [38, 41, 7, "enum_FIELD"], [51, 48, 7, "enum_FIELD"], [51, 53, 7, "enum_FIELD"], [83, 85, 7, "enum_FIELD"], [11, 20, 7, "enum_FIELD"], [35, 32, 7, "enum_FIELD"], [35, 36, 7, "enum_FIELD"], [53, 52, 7, "enum_FIELD"], [59, 65, 7, "enum_FIELD"], [59, 69, 7, "enum_FIELD"], [71, 75, 7, "enum_FIELD"], [85, 84, 7, "enum_FIELD"], [20, 18, 7, "enum_FIELD"], [23, 24, 7, "enum_FIELD"], [23, 26, 7, "enum_FIELD"], [32, 31, 7, "enum_FIELD"], [32, 33, 7, "enum_FIELD"], [65, 62, 7, "enum_FIELD"], [75, 73, 7, "enum_FIELD"], [89, 87, 7, "enum_FIELD"], [18, 15, 7, "enum_FIELD"], [62, 61, 7, "enum_FIELD"], [62, 63, 7, "enum_FIELD"], [73, 72, 7, "enum_FIELD"], [77, 76, 7, "enum_FIELD"], [77, 79, 7, "enum_FIELD"], [87, 86, 7, "enum_FIELD"], [15, 13, 7, "enum_FIELD"], [79, 78, 7, "enum_FIELD"], [13, 12, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 8, 9, "enum_NEXT_SYNTAX"], [9, 2, 10, "enum_LAST_LEXICAL_USE"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [24, 12, 10, "enum_LAST_LEXICAL_USE"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [26, 9, 10, "enum_LAST_LEXICAL_USE"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [31, 26, 10, "enum_LAST_LEXICAL_USE"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [42, 29, 10, "enum_LAST_LEXICAL_USE"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [54, 31, 10, "enum_LAST_LEXICAL_USE"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [61, 49, 10, "enum_LAST_LEXICAL_USE"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [66, 42, 10, "enum_LAST_LEXICAL_USE"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [72, 39, 10, "enum_LAST_LEXICAL_USE"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [76, 61, 10, "enum_LAST_LEXICAL_USE"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [90, 76, 10, "enum_LAST_LEXICAL_USE"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [3, 8, 1, "enum_CFG_NEXT"], [8, 28, 1, "enum_CFG_NEXT"], [28, 38, 1, "enum_CFG_NEXT"], [38, 53, 1, "enum_CFG_NEXT"], [53, 48, 1, "enum_CFG_NEXT"], [48, 83, 1, "enum_CFG_NEXT"], [48, 59, 1, "enum_CFG_NEXT"], [59, 71, 1, "enum_CFG_NEXT"], [71, 48, 1, "enum_CFG_NEXT"], [24, 12, 2, "enum_LAST_READ"], [26, 2, 3, "enum_LAST_WRITE"], [9, 26, 2, "enum_LAST_READ"], [9, 2, 3, "enum_LAST_WRITE"], [31, 26, 2, "enum_LAST_READ"], [31, 9, 3, "enum_LAST_WRITE"], [42, 29, 3, "enum_LAST_WRITE"], [54, 31, 2, "enum_LAST_READ"], [54, 9, 3, "enum_LAST_WRITE"], [47, 47, 3, "enum_LAST_WRITE"], [49, 76, 2, "enum_LAST_READ"], [49, 49, 3, "enum_LAST_WRITE"], [61, 76, 2, "enum_LAST_READ"], [61, 49, 3, "enum_LAST_WRITE"], [66, 42, 2, "enum_LAST_READ"], [66, 29, 3, "enum_LAST_WRITE"], [72, 72, 2, "enum_LAST_READ"], [72, 39, 3, "enum_LAST_WRITE"], [76, 49, 3, "enum_LAST_WRITE"], [90, 76, 2, "enum_LAST_READ"], [90, 49, 3, "enum_LAST_WRITE"], [9, 24, 4, "enum_COMPUTED_FROM"], [9, 26, 4, "enum_COMPUTED_FROM"], [9, 12, 4, "enum_COMPUTED_FROM"], [29, 31, 4, "enum_COMPUTED_FROM"], [39, 42, 4, "enum_COMPUTED_FROM"]], "error_location": 90, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/dlukes/corpy.git", "old_path": "corpy/scripts/zip_verticals.py", "hash": "4bf35b8dd0ed5971bd05896adda646f4452e47a8", "code": "def print_position(lines: List[str], line_no: int):\n    lines: List[List[str]] = [l.strip(\" \n\").split(\"\t\") for l in lines]\n    word: str = lines[0][0]\n    position: list[str] = [word]\n    for i, line in enumerate(lines):\n        assert line[0] == word, (\n            f\"Expected first attribute {word} but got {line[0]} in vertical \"\n            f\"#{i+1} at line #{line_no+1}. Are you sure the verticals \"\n            \"represent the same corpus?\"\n        )\n        position.extend(line[1:])\n    print(\"\t\".join(line))\n", "rewrite": "ReplaceText(target='position' @(26,20)->(26,24))", "error_line": 11, "has_bug": true, "code_full": "from typing import List\n\n\ndef print_position(lines: List[str], line_no: int):\n    lines: List[List[str]] = [l.strip(\" \n\").split(\"\t\") for l in lines]\n    word: str = lines[0][0]\n    position: list[str] = [word]\n    for i, line in enumerate(lines):\n        assert line[0] == word, (\n            f\"Expected first attribute {word} but got {line[0]} in vertical \"\n            f\"#{i+1} at line #{line_no+1}. Are you sure the verticals \"\n            \"represent the same corpus?\"\n        )\n        position.extend(line[1:])\n    print(\"\t\".join(line))\n", "error_location_char": [509, 513], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def hasPartOfDay(", "text", ")", ":", "#NEWLINE#", "#INDENT#", "text_lower", "=", "text", ".", "lower", "(", ")", "#NEWLINE#", "text_norm", "=", "text", ".", "translate", "(", "str", ".", "maketrans", "(", "string", ".", "punctuation", ",", "(", "' '", "*", "len", "(", "string", ".", "punctuation", ")", ")", ")", ")", ".", "strip", "(", ")", "#NEWLINE#", "text_list", "=", "text_norm", ".", "split", "(", "' '", ")", "#NEWLINE#", "partofday", "=", "[", "'morning'", ",", "'evening'", ",", "'afternoon'", ",", "'night'", ",", "'dawn'", ",", "'dusk'", ",", "'tonight'", ",", "'overnight'", ",", "'nights'", ",", "'mornings'", ",", "'evening'", ",", "'afternoons'", ",", "'noon'", "]", "#NEWLINE#", "for", "t", "in", "text_list", ":", "#NEWLINE#", "#INDENT#", "answer", "=", "next", "(", "(", "m", "for", "m", "in", "partofday", "if", "(", "m", "in", "t", ")", ")", ",", "None", ")", "#NEWLINE#", "if", "(", "answer", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "return", "True", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "return", "False", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "return", "False"], "edges": [[6, 12, 7, "enum_FIELD"], [14, 43, 7, "enum_FIELD"], [45, 51, 7, "enum_FIELD"], [54, 69, 7, "enum_FIELD"], [87, 86, 7, "enum_FIELD"], [87, 88, 7, "enum_FIELD"], [135, 136, 7, "enum_FIELD"], [12, 10, 7, "enum_FIELD"], [43, 41, 7, "enum_FIELD"], [51, 49, 7, "enum_FIELD"], [91, 109, 7, "enum_FIELD"], [119, 116, 7, "enum_FIELD"], [10, 9, 7, "enum_FIELD"], [41, 20, 7, "enum_FIELD"], [49, 48, 7, "enum_FIELD"], [109, 94, 7, "enum_FIELD"], [116, 115, 7, "enum_FIELD"], [122, 123, 7, "enum_FIELD"], [130, 131, 7, "enum_FIELD"], [20, 18, 7, "enum_FIELD"], [96, 97, 7, "enum_FIELD"], [18, 17, 7, "enum_FIELD"], [28, 22, 7, "enum_FIELD"], [100, 99, 7, "enum_FIELD"], [100, 101, 7, "enum_FIELD"], [22, 21, 7, "enum_FIELD"], [26, 25, 7, "enum_FIELD"], [31, 30, 7, "enum_FIELD"], [31, 33, 7, "enum_FIELD"], [105, 104, 7, "enum_FIELD"], [33, 32, 7, "enum_FIELD"], [35, 34, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [9, 2, 10, "enum_LAST_LEXICAL_USE"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [17, 9, 10, "enum_LAST_LEXICAL_USE"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [34, 25, 10, "enum_LAST_LEXICAL_USE"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [48, 15, 10, "enum_LAST_LEXICAL_USE"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [88, 46, 10, "enum_LAST_LEXICAL_USE"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [99, 97, 10, "enum_LAST_LEXICAL_USE"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [101, 55, 10, "enum_LAST_LEXICAL_USE"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [104, 99, 10, "enum_LAST_LEXICAL_USE"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [106, 86, 10, "enum_LAST_LEXICAL_USE"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [115, 92, 10, "enum_LAST_LEXICAL_USE"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [6, 14, 1, "enum_CFG_NEXT"], [14, 45, 1, "enum_CFG_NEXT"], [45, 54, 1, "enum_CFG_NEXT"], [54, 88, 1, "enum_CFG_NEXT"], [88, 86, 1, "enum_CFG_NEXT"], [86, 135, 1, "enum_CFG_NEXT"], [86, 91, 1, "enum_CFG_NEXT"], [91, 116, 1, "enum_CFG_NEXT"], [116, 122, 1, "enum_CFG_NEXT"], [116, 130, 1, "enum_CFG_NEXT"], [9, 2, 3, "enum_LAST_WRITE"], [17, 9, 2, "enum_LAST_READ"], [17, 2, 3, "enum_LAST_WRITE"], [34, 25, 2, "enum_LAST_READ"], [48, 15, 3, "enum_LAST_WRITE"], [88, 46, 3, "enum_LAST_WRITE"], [99, 97, 2, "enum_LAST_READ"], [101, 55, 3, "enum_LAST_WRITE"], [104, 97, 2, "enum_LAST_READ"], [104, 99, 3, "enum_LAST_WRITE"], [106, 86, 3, "enum_LAST_WRITE"], [115, 92, 3, "enum_LAST_WRITE"], [7, 9, 4, "enum_COMPUTED_FROM"], [15, 17, 4, "enum_COMPUTED_FROM"], [15, 21, 4, "enum_COMPUTED_FROM"], [15, 25, 4, "enum_COMPUTED_FROM"], [15, 32, 4, "enum_COMPUTED_FROM"], [15, 34, 4, "enum_COMPUTED_FROM"], [46, 48, 4, "enum_COMPUTED_FROM"], [92, 94, 4, "enum_COMPUTED_FROM"], [92, 97, 4, "enum_COMPUTED_FROM"], [92, 99, 4, "enum_COMPUTED_FROM"], [92, 101, 4, "enum_COMPUTED_FROM"], [92, 104, 4, "enum_COMPUTED_FROM"], [92, 106, 4, "enum_COMPUTED_FROM"]], "error_location": 17, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/AmyOlex/Chrono.git", "old_path": "Chrono/temporalTest.py", "hash": "91f5ba63a7825e0b85b5b69b6d32a2336d5142ba", "code": "def hasPartOfDay(text: str) -> bool:\n    \n    #convert to all lower\n    text_lower: str = text.lower()\n    #remove all punctuation\n    text_norm: str = text.translate(str.maketrans(string.punctuation, \" \"*len(string.punctuation))).strip()\n    #convert to list\n    text_list: List[str] = text_norm.split(\" \")\n    \n    #define my part of day lists\n    partofday: List[str] = [\"morning\",\"evening\",\"afternoon\",\"night\",\"dawn\",\"dusk\",\"tonight\",\"overnight\",\"nights\",\"mornings\",\"evening\",\"afternoons\",\"noon\"] \n    \n    for t in text_list:\n        answer = next((m for m in partofday if m in t), None)\n        if answer is not None:\n            return True\n        else:\n            return False\n    return False\n", "rewrite": "ReplaceText(target='text_lower' @(267,16)->(267,20))", "error_line": 5, "has_bug": true, "code_full": "import string\nfrom typing import List\n\n\ndef hasPartOfDay(text: str) -> bool:\n    \n    #convert to all lower\n    text_lower: str = text.lower()\n    #remove all punctuation\n    text_norm: str = text.translate(str.maketrans(string.punctuation, \" \"*len(string.punctuation))).strip()\n    #convert to list\n    text_list: List[str] = text_norm.split(\" \")\n    \n    #define my part of day lists\n    partofday: List[str] = [\"morning\",\"evening\",\"afternoon\",\"night\",\"dawn\",\"dusk\",\"tonight\",\"overnight\",\"nights\",\"mornings\",\"evening\",\"afternoons\",\"noon\"] \n    \n    for t in text_list:\n        answer = next((m for m in partofday if m in t), None)\n        if answer is not None:\n            return True\n        else:\n            return False\n    return False\n", "error_location_char": [152, 156], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def get_copysetup(", "copytools", ",", "copytool_name", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Return the copysetup for the given copytool.\\n\\n    :param copytools: copytools list from infosys.\\n    :param copytool name: name of copytool (string).\\n    :return: copysetup (string).\\n    '", "#NEWLINE#", "copysetup", "=", "''", "#NEWLINE#", "if", "(", "not", "copysetup", ")", ":", "#NEWLINE#", "#INDENT#", "return", "''", "#NEWLINE#", "#UNINDENT#", "for", "ct", "in", "list", "(", "copytools", ".", "keys", "(", ")", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "copytool_name", "==", "ct", ")", ":", "#NEWLINE#", "#INDENT#", "copysetup", "=", "copytools", "[", "ct", "]", ".", "get", "(", "'setup'", ")", "#NEWLINE#", "break", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "return", "copysetup"], "edges": [[1, 3, 7, "enum_FIELD"], [8, 9, 7, "enum_FIELD"], [10, 13, 7, "enum_FIELD"], [15, 17, 7, "enum_FIELD"], [29, 28, 7, "enum_FIELD"], [29, 31, 7, "enum_FIELD"], [66, 67, 7, "enum_FIELD"], [17, 18, 7, "enum_FIELD"], [23, 24, 7, "enum_FIELD"], [31, 30, 7, "enum_FIELD"], [41, 44, 7, "enum_FIELD"], [35, 33, 7, "enum_FIELD"], [44, 43, 7, "enum_FIELD"], [49, 58, 7, "enum_FIELD"], [33, 32, 7, "enum_FIELD"], [58, 56, 7, "enum_FIELD"], [56, 53, 7, "enum_FIELD"], [53, 52, 7, "enum_FIELD"], [53, 54, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [18, 11, 10, "enum_LAST_LEXICAL_USE"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [32, 2, 10, "enum_LAST_LEXICAL_USE"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [43, 4, 10, "enum_LAST_LEXICAL_USE"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [45, 28, 10, "enum_LAST_LEXICAL_USE"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 49, 9, "enum_NEXT_SYNTAX"], [50, 18, 10, "enum_LAST_LEXICAL_USE"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [52, 32, 10, "enum_LAST_LEXICAL_USE"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [54, 45, 10, "enum_LAST_LEXICAL_USE"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 62, 9, "enum_NEXT_SYNTAX"], [62, 66, 9, "enum_NEXT_SYNTAX"], [67, 50, 10, "enum_LAST_LEXICAL_USE"], [66, 67, 9, "enum_NEXT_SYNTAX"], [3, 8, 1, "enum_CFG_NEXT"], [8, 10, 1, "enum_CFG_NEXT"], [10, 17, 1, "enum_CFG_NEXT"], [17, 23, 1, "enum_CFG_NEXT"], [17, 31, 1, "enum_CFG_NEXT"], [31, 28, 1, "enum_CFG_NEXT"], [28, 44, 1, "enum_CFG_NEXT"], [28, 66, 1, "enum_CFG_NEXT"], [44, 49, 1, "enum_CFG_NEXT"], [44, 28, 1, "enum_CFG_NEXT"], [49, 66, 1, "enum_CFG_NEXT"], [18, 11, 3, "enum_LAST_WRITE"], [32, 2, 3, "enum_LAST_WRITE"], [28, 45, 2, "enum_LAST_READ"], [28, 28, 3, "enum_LAST_WRITE"], [43, 43, 2, "enum_LAST_READ"], [43, 4, 3, "enum_LAST_WRITE"], [45, 45, 2, "enum_LAST_READ"], [45, 28, 3, "enum_LAST_WRITE"], [52, 32, 2, "enum_LAST_READ"], [52, 2, 3, "enum_LAST_WRITE"], [54, 45, 2, "enum_LAST_READ"], [54, 28, 3, "enum_LAST_WRITE"], [50, 18, 2, "enum_LAST_READ"], [50, 11, 3, "enum_LAST_WRITE"], [67, 18, 2, "enum_LAST_READ"], [67, 11, 3, "enum_LAST_WRITE"], [67, 50, 3, "enum_LAST_WRITE"], [50, 52, 4, "enum_COMPUTED_FROM"], [50, 54, 4, "enum_COMPUTED_FROM"]], "error_location": 18, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/PanDAWMS/pilot2.git", "old_path": "pilot/copytool/common.py", "hash": "7810aa90923f7e6380f364a173db0fdedc65f07c", "code": "def get_copysetup(copytools: Optional[dict], copytool_name: str) -> str:\n    \"\"\"\n    Return the copysetup for the given copytool.\n\n    :param copytools: copytools list from infosys.\n    :param copytool name: name of copytool (string).\n    :return: copysetup (string).\n    \"\"\"\n    copysetup: str = \"\"\n\n    if not copysetup:\n        return \"\"\n\n    for ct in list(copytools.keys()):  # Python 2/3\n        if copytool_name == ct:\n            copysetup = copytools[ct].get('setup')\n            break\n\n    return copysetup\n", "rewrite": "ReplaceText(target='copytools' @(116,11)->(116,20))", "error_line": 10, "has_bug": true, "code_full": "from typing import Optional\n\n\ndef get_copysetup(copytools: Optional[dict], copytool_name: str) -> str:\n    \"\"\"\n    Return the copysetup for the given copytool.\n\n    :param copytools: copytools list from infosys.\n    :param copytool name: name of copytool (string).\n    :return: copysetup (string).\n    \"\"\"\n    copysetup: str = \"\"\n\n    if not copysetup:\n        return \"\"\n\n    for ct in list(copytools.keys()):  # Python 2/3\n        if copytool_name == ct:\n            copysetup = copytools[ct].get('setup')\n            break\n\n    return copysetup\n", "error_location_char": [312, 321], "type_checked_pytype": true, "type_error_label": "attribute-error,indirect", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def get_measurement(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "plugin", "=", "get_plugin", "(", "'gpio.sensor.envirophat'", ")", "#NEWLINE#", "sensors", "=", "plugin", ".", "get_data", "(", "qnh", "=", "self", ".", "qnh", ")", ".", "output", "#NEWLINE#", "ret", "=", "{", "sensor", ":", "sensors", "[", "sensor", "]", "for", "(", "sensor", ",", "enabled", ")", "in", "self", ".", "enabled_sensors", ".", "items", "(", ")", "if", "(", "enabled", "and", "(", "sensor", "in", "sensors", ")", "and", "(", "sensors", "[", "sensor", "]", "!=", "self", ".", "_last_read", ".", "get", "(", "sensor", ")", ")", ")", "}", "#NEWLINE#", "self", ".", "_last_read", "=", "ret", "#NEWLINE#", "return", "ret"], "edges": [[6, 10, 7, "enum_FIELD"], [13, 26, 7, "enum_FIELD"], [28, 33, 7, "enum_FIELD"], [79, 84, 7, "enum_FIELD"], [86, 87, 7, "enum_FIELD"], [10, 9, 7, "enum_FIELD"], [26, 19, 7, "enum_FIELD"], [33, 32, 7, "enum_FIELD"], [33, 35, 7, "enum_FIELD"], [81, 80, 7, "enum_FIELD"], [19, 17, 7, "enum_FIELD"], [35, 34, 7, "enum_FIELD"], [35, 36, 7, "enum_FIELD"], [44, 41, 7, "enum_FIELD"], [44, 50, 7, "enum_FIELD"], [17, 16, 7, "enum_FIELD"], [20, 23, 7, "enum_FIELD"], [50, 48, 7, "enum_FIELD"], [23, 22, 7, "enum_FIELD"], [48, 46, 7, "enum_FIELD"], [58, 57, 7, "enum_FIELD"], [67, 64, 7, "enum_FIELD"], [46, 45, 7, "enum_FIELD"], [64, 63, 7, "enum_FIELD"], [64, 65, 7, "enum_FIELD"], [73, 71, 7, "enum_FIELD"], [71, 69, 7, "enum_FIELD"], [69, 68, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [16, 7, 10, "enum_LAST_LEXICAL_USE"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [22, 2, 10, "enum_LAST_LEXICAL_USE"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [34, 14, 10, "enum_LAST_LEXICAL_USE"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [36, 32, 10, "enum_LAST_LEXICAL_USE"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [40, 36, 10, "enum_LAST_LEXICAL_USE"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [45, 22, 10, "enum_LAST_LEXICAL_USE"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [54, 42, 10, "enum_LAST_LEXICAL_USE"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [57, 40, 10, "enum_LAST_LEXICAL_USE"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [59, 34, 10, "enum_LAST_LEXICAL_USE"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [63, 59, 10, "enum_LAST_LEXICAL_USE"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [65, 57, 10, "enum_LAST_LEXICAL_USE"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [68, 45, 10, "enum_LAST_LEXICAL_USE"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [74, 65, 10, "enum_LAST_LEXICAL_USE"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [80, 68, 10, "enum_LAST_LEXICAL_USE"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [84, 29, 10, "enum_LAST_LEXICAL_USE"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 86, 9, "enum_NEXT_SYNTAX"], [87, 84, 10, "enum_LAST_LEXICAL_USE"], [86, 87, 9, "enum_NEXT_SYNTAX"], [6, 13, 1, "enum_CFG_NEXT"], [13, 28, 1, "enum_CFG_NEXT"], [28, 79, 1, "enum_CFG_NEXT"], [79, 86, 1, "enum_CFG_NEXT"], [16, 7, 3, "enum_LAST_WRITE"], [22, 2, 3, "enum_LAST_WRITE"], [34, 14, 3, "enum_LAST_WRITE"], [36, 32, 2, "enum_LAST_READ"], [40, 36, 2, "enum_LAST_READ"], [45, 22, 2, "enum_LAST_READ"], [45, 2, 3, "enum_LAST_WRITE"], [54, 42, 3, "enum_LAST_WRITE"], [57, 36, 2, "enum_LAST_READ"], [57, 40, 3, "enum_LAST_WRITE"], [59, 34, 2, "enum_LAST_READ"], [59, 14, 3, "enum_LAST_WRITE"], [63, 59, 2, "enum_LAST_READ"], [63, 14, 3, "enum_LAST_WRITE"], [65, 57, 2, "enum_LAST_READ"], [65, 40, 3, "enum_LAST_WRITE"], [68, 45, 2, "enum_LAST_READ"], [68, 2, 3, "enum_LAST_WRITE"], [74, 65, 2, "enum_LAST_READ"], [74, 40, 3, "enum_LAST_WRITE"], [84, 29, 3, "enum_LAST_WRITE"], [80, 68, 2, "enum_LAST_READ"], [80, 2, 3, "enum_LAST_WRITE"], [87, 84, 2, "enum_LAST_READ"], [87, 29, 3, "enum_LAST_WRITE"], [7, 9, 4, "enum_COMPUTED_FROM"], [14, 16, 4, "enum_COMPUTED_FROM"], [14, 22, 4, "enum_COMPUTED_FROM"], [29, 32, 4, "enum_COMPUTED_FROM"], [29, 34, 4, "enum_COMPUTED_FROM"], [29, 36, 4, "enum_COMPUTED_FROM"], [29, 40, 4, "enum_COMPUTED_FROM"], [29, 42, 4, "enum_COMPUTED_FROM"], [29, 54, 4, "enum_COMPUTED_FROM"], [29, 57, 4, "enum_COMPUTED_FROM"], [29, 59, 4, "enum_COMPUTED_FROM"], [29, 45, 4, "enum_COMPUTED_FROM"], [29, 63, 4, "enum_COMPUTED_FROM"], [29, 65, 4, "enum_COMPUTED_FROM"], [29, 74, 4, "enum_COMPUTED_FROM"], [29, 68, 4, "enum_COMPUTED_FROM"], [81, 84, 4, "enum_COMPUTED_FROM"]], "error_location": 84, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/BlackLight/platypush.git", "old_path": "platypush/backend/sensor/envirophat.py", "hash": "c9dc1aac44ec4df76071092f4a17601d97955a38", "code": "def get_measurement(self) -> Dict[str, Any]:\n    plugin = get_plugin('gpio.sensor.envirophat')\n    sensors: Dict[str, Any] = plugin.get_data(qnh=self.qnh).output\n    ret = {\n        sensor: sensors[sensor]\n        for sensor, enabled in self.enabled_sensors.items()\n        if enabled and sensor in sensors and sensors[sensor] != self._last_read.get(sensor)\n    }\n\n    self._last_read = ret\n    return ret\n", "rewrite": "ReplaceText(target='sensors' @(50,26)->(50,29))", "error_line": 9, "has_bug": true, "code_full": "from typing import Any, Dict\n\nfrom platypush.context import get_plugin\n\n\nclass Class:\n    def __init__(self, qnh: float, enabled_sensors: Dict[str, bool]):\n        self.qnh = qnh\n        self.enabled_sensors = enabled_sensors\n        self._last_read: Dict[str, Any]= {}\n\n    def get_measurement(self) -> Dict[str, Any]:\n        plugin = get_plugin('gpio.sensor.envirophat')\n        sensors: Dict[str, Any] = plugin.get_data(qnh=self.qnh).output\n        ret = {\n            sensor: sensors[sensor]\n            for sensor, enabled in self.enabled_sensors.items()\n            if enabled and sensor in sensors and sensors[sensor] != self._last_read.get(sensor)\n        }\n\n        self._last_read = ret\n        return ret\n", "error_location_char": [387, 390], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def load_userdict(", "self", ",", "f", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Load personalized dict to improve detect rate.\\n\\n    Parameter:\\n        - f : A plain text file contains words and their ocurrences.\\n              Can be a file-like object, or the path of the dictionary file,\\n              whose encoding must be utf-8.\\n\\n    Structure of dict file:\\n    word1 freq1 word_type1\\n    word2 freq2 word_type2\\n    ...\\n    Word type may be ignored\\n    '", "#NEWLINE#", "self", ".", "check_initialized", "(", ")", "#NEWLINE#", "if", "isinstance", "(", "f", ",", "string_types", ")", ":", "#NEWLINE#", "#INDENT#", "f", "=", "open", "(", "f", ",", "'rb'", ")", "#NEWLINE#", "#UNINDENT#", "for", "(", "lineno", ",", "ln", ")", "in", "enumerate", "(", "f", ",", "1", ")", ":", "#NEWLINE#", "#INDENT#", "line", "=", "ln", ".", "strip", "(", ")", "#NEWLINE#", "if", "(", "not", "isinstance", "(", "f", ",", "text_type", ")", ")", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "line", "=", "line", ".", "decode", "(", "'utf-8'", ")", ".", "lstrip", "(", "'\\ufeff'", ")", "#NEWLINE#", "#UNINDENT#", "except", "UnicodeDecodeError", ":", "#NEWLINE#", "#INDENT#", "raise", "ValueError", "(", "(", "'dictionary file %s must be utf-8'", "%", "f", ".", "name", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "if", "(", "not", "line", ")", ":", "#NEWLINE#", "#INDENT#", "continue", "#NEWLINE#", "#UNINDENT#", "(", "word", ",", "freq", ",", "tag", ")", "=", "re_userdict", ".", "match", "(", "line", ")", ".", "groups", "(", ")", "#NEWLINE#", "if", "(", "freq", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "freq", "=", "freq", ".", "strip", "(", ")", "#NEWLINE#", "#UNINDENT#", "if", "(", "tag", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "tag", "=", "tag", ".", "strip", "(", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "add_word", "(", "word", ",", "freq", ",", "tag", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [8, 9, 7, "enum_FIELD"], [10, 14, 7, "enum_FIELD"], [17, 21, 7, "enum_FIELD"], [43, 40, 7, "enum_FIELD"], [43, 47, 7, "enum_FIELD"], [14, 12, 7, "enum_FIELD"], [21, 18, 7, "enum_FIELD"], [26, 32, 7, "enum_FIELD"], [47, 44, 7, "enum_FIELD"], [52, 58, 7, "enum_FIELD"], [61, 63, 7, "enum_FIELD"], [112, 114, 7, "enum_FIELD"], [122, 139, 7, "enum_FIELD"], [142, 145, 7, "enum_FIELD"], [160, 163, 7, "enum_FIELD"], [177, 183, 7, "enum_FIELD"], [12, 11, 7, "enum_FIELD"], [32, 29, 7, "enum_FIELD"], [58, 56, 7, "enum_FIELD"], [63, 67, 7, "enum_FIELD"], [114, 115, 7, "enum_FIELD"], [139, 137, 7, "enum_FIELD"], [145, 144, 7, "enum_FIELD"], [150, 156, 7, "enum_FIELD"], [163, 162, 7, "enum_FIELD"], [168, 174, 7, "enum_FIELD"], [183, 179, 7, "enum_FIELD"], [56, 55, 7, "enum_FIELD"], [67, 64, 7, "enum_FIELD"], [77, 88, 7, "enum_FIELD"], [93, 94, 7, "enum_FIELD"], [137, 134, 7, "enum_FIELD"], [156, 154, 7, "enum_FIELD"], [174, 172, 7, "enum_FIELD"], [179, 178, 7, "enum_FIELD"], [88, 86, 7, "enum_FIELD"], [98, 100, 7, "enum_FIELD"], [134, 132, 7, "enum_FIELD"], [154, 153, 7, "enum_FIELD"], [172, 171, 7, "enum_FIELD"], [86, 83, 7, "enum_FIELD"], [100, 99, 7, "enum_FIELD"], [132, 131, 7, "enum_FIELD"], [83, 81, 7, "enum_FIELD"], [103, 102, 7, "enum_FIELD"], [103, 105, 7, "enum_FIELD"], [81, 80, 7, "enum_FIELD"], [105, 104, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [11, 2, 10, "enum_LAST_LEXICAL_USE"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [20, 4, 10, "enum_LAST_LEXICAL_USE"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 26, 9, "enum_NEXT_SYNTAX"], [27, 20, 10, "enum_LAST_LEXICAL_USE"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [31, 27, 10, "enum_LAST_LEXICAL_USE"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [46, 31, 10, "enum_LAST_LEXICAL_USE"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [55, 41, 10, "enum_LAST_LEXICAL_USE"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [64, 18, 10, "enum_LAST_LEXICAL_USE"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [66, 46, 10, "enum_LAST_LEXICAL_USE"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 77, 9, "enum_NEXT_SYNTAX"], [78, 53, 10, "enum_LAST_LEXICAL_USE"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [80, 78, 10, "enum_LAST_LEXICAL_USE"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [104, 66, 10, "enum_LAST_LEXICAL_USE"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [115, 80, 10, "enum_LAST_LEXICAL_USE"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 120, 9, "enum_NEXT_SYNTAX"], [120, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [135, 115, 10, "enum_LAST_LEXICAL_USE"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [144, 126, 10, "enum_LAST_LEXICAL_USE"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 150, 9, "enum_NEXT_SYNTAX"], [151, 144, 10, "enum_LAST_LEXICAL_USE"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [153, 151, 10, "enum_LAST_LEXICAL_USE"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [162, 128, 10, "enum_LAST_LEXICAL_USE"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 168, 9, "enum_NEXT_SYNTAX"], [169, 162, 10, "enum_LAST_LEXICAL_USE"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [171, 169, 10, "enum_LAST_LEXICAL_USE"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [175, 177, 9, "enum_NEXT_SYNTAX"], [178, 11, 10, "enum_LAST_LEXICAL_USE"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [182, 124, 10, "enum_LAST_LEXICAL_USE"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [184, 153, 10, "enum_LAST_LEXICAL_USE"], [183, 184, 9, "enum_NEXT_SYNTAX"], [184, 185, 9, "enum_NEXT_SYNTAX"], [186, 171, 10, "enum_LAST_LEXICAL_USE"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [3, 8, 1, "enum_CFG_NEXT"], [8, 10, 1, "enum_CFG_NEXT"], [10, 21, 1, "enum_CFG_NEXT"], [21, 26, 1, "enum_CFG_NEXT"], [21, 47, 1, "enum_CFG_NEXT"], [26, 47, 1, "enum_CFG_NEXT"], [47, 40, 1, "enum_CFG_NEXT"], [40, 52, 1, "enum_CFG_NEXT"], [52, 63, 1, "enum_CFG_NEXT"], [63, 114, 1, "enum_CFG_NEXT"], [63, 77, 1, "enum_CFG_NEXT"], [77, 94, 1, "enum_CFG_NEXT"], [77, 114, 1, "enum_CFG_NEXT"], [94, 98, 1, "enum_CFG_NEXT"], [114, 122, 1, "enum_CFG_NEXT"], [114, 40, 1, "enum_CFG_NEXT"], [122, 145, 1, "enum_CFG_NEXT"], [145, 150, 1, "enum_CFG_NEXT"], [145, 163, 1, "enum_CFG_NEXT"], [150, 163, 1, "enum_CFG_NEXT"], [163, 177, 1, "enum_CFG_NEXT"], [163, 168, 1, "enum_CFG_NEXT"], [168, 177, 1, "enum_CFG_NEXT"], [177, 40, 1, "enum_CFG_NEXT"], [11, 2, 3, "enum_LAST_WRITE"], [20, 4, 3, "enum_LAST_WRITE"], [31, 20, 2, "enum_LAST_READ"], [31, 4, 3, "enum_LAST_WRITE"], [27, 31, 2, "enum_LAST_READ"], [27, 4, 3, "enum_LAST_WRITE"], [46, 20, 2, "enum_LAST_READ"], [46, 31, 2, "enum_LAST_READ"], [46, 4, 3, "enum_LAST_WRITE"], [46, 27, 3, "enum_LAST_WRITE"], [39, 39, 3, "enum_LAST_WRITE"], [41, 55, 2, "enum_LAST_READ"], [41, 41, 3, "enum_LAST_WRITE"], [55, 55, 2, "enum_LAST_READ"], [55, 41, 3, "enum_LAST_WRITE"], [53, 135, 2, "enum_LAST_READ"], [53, 115, 2, "enum_LAST_READ"], [53, 53, 3, "enum_LAST_WRITE"], [53, 78, 3, "enum_LAST_WRITE"], [64, 18, 2, "enum_LAST_READ"], [64, 64, 2, "enum_LAST_READ"], [66, 46, 2, "enum_LAST_READ"], [66, 66, 2, "enum_LAST_READ"], [66, 4, 3, "enum_LAST_WRITE"], [66, 27, 3, "enum_LAST_WRITE"], [68, 68, 2, "enum_LAST_READ"], [80, 135, 2, "enum_LAST_READ"], [80, 115, 2, "enum_LAST_READ"], [80, 53, 3, "enum_LAST_WRITE"], [78, 80, 2, "enum_LAST_READ"], [78, 53, 3, "enum_LAST_WRITE"], [104, 66, 2, "enum_LAST_READ"], [104, 4, 3, "enum_LAST_WRITE"], [104, 27, 3, "enum_LAST_WRITE"], [115, 135, 2, "enum_LAST_READ"], [115, 80, 2, "enum_LAST_READ"], [115, 115, 2, "enum_LAST_READ"], [115, 53, 3, "enum_LAST_WRITE"], [115, 78, 3, "enum_LAST_WRITE"], [131, 131, 2, "enum_LAST_READ"], [135, 115, 2, "enum_LAST_READ"], [135, 53, 3, "enum_LAST_WRITE"], [135, 78, 3, "enum_LAST_WRITE"], [124, 182, 2, "enum_LAST_READ"], [124, 124, 3, "enum_LAST_WRITE"], [126, 184, 2, "enum_LAST_READ"], [126, 126, 3, "enum_LAST_WRITE"], [126, 151, 3, "enum_LAST_WRITE"], [128, 186, 2, "enum_LAST_READ"], [128, 169, 3, "enum_LAST_WRITE"], [128, 128, 3, "enum_LAST_WRITE"], [144, 184, 2, "enum_LAST_READ"], [144, 126, 3, "enum_LAST_WRITE"], [153, 144, 2, "enum_LAST_READ"], [153, 126, 3, "enum_LAST_WRITE"], [151, 153, 2, "enum_LAST_READ"], [151, 126, 3, "enum_LAST_WRITE"], [162, 186, 2, "enum_LAST_READ"], [162, 128, 3, "enum_LAST_WRITE"], [171, 162, 2, "enum_LAST_READ"], [171, 128, 3, "enum_LAST_WRITE"], [169, 171, 2, "enum_LAST_READ"], [169, 128, 3, "enum_LAST_WRITE"], [178, 178, 2, "enum_LAST_READ"], [178, 11, 2, "enum_LAST_READ"], [178, 2, 3, "enum_LAST_WRITE"], [182, 182, 2, "enum_LAST_READ"], [182, 124, 3, "enum_LAST_WRITE"], [184, 153, 2, "enum_LAST_READ"], [184, 144, 2, "enum_LAST_READ"], [184, 126, 3, "enum_LAST_WRITE"], [184, 151, 3, "enum_LAST_WRITE"], [186, 171, 2, "enum_LAST_READ"], [186, 162, 2, "enum_LAST_READ"], [186, 169, 3, "enum_LAST_WRITE"], [186, 128, 3, "enum_LAST_WRITE"], [27, 29, 4, "enum_COMPUTED_FROM"], [27, 31, 4, "enum_COMPUTED_FROM"], [53, 55, 4, "enum_COMPUTED_FROM"], [125, 135, 4, "enum_COMPUTED_FROM"], [125, 131, 4, "enum_COMPUTED_FROM"], [151, 153, 4, "enum_COMPUTED_FROM"], [169, 171, 4, "enum_COMPUTED_FROM"], [78, 80, 4, "enum_COMPUTED_FROM"]], "error_location": 66, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/theblackcat102/jieba-tw.git", "old_path": "jieba/__init__.py", "hash": "5270ed66ff64b2001c1bf5c4ba927fec09189e33", "code": "def load_userdict(self, f: Union[IO, str]):\n    '''\n    Load personalized dict to improve detect rate.\n\n    Parameter:\n        - f : A plain text file contains words and their ocurrences.\n            Can be a file-like object, or the path of the dictionary file,\n            whose encoding must be utf-8.\n\n    Structure of dict file:\n    word1 freq1 word_type1\n    word2 freq2 word_type2\n    ...\n    Word type may be ignored\n    '''\n    self.check_initialized()\n    if isinstance(f, string_types):\n        f: IO = open(f, 'rb')\n    for lineno, ln in enumerate(f, 1):\n        line: str = ln.strip()\n        if not isinstance(f, text_type):\n            try:\n                line = line.decode('utf-8').lstrip('\ufeff')\n            except UnicodeDecodeError:\n                raise ValueError('dictionary file %s must be utf-8' % f.name)\n        if not line:\n            continue\n        # match won't be None because there's at least one character\n        word, freq, tag = re_userdict.match(line).groups()\n        if freq is not None:\n            freq = freq.strip()\n        if tag is not None:\n            tag = tag.strip()\n        self.add_word(word, freq, tag)\n", "rewrite": "ReplaceText(target='line' @(369,30)->(369,31))", "error_line": 20, "has_bug": true, "code_full": "import re\nfrom typing import IO, Optional, Tuple, Union\n\nstring_types: Tuple  = ()\ntext_type: type = str\nre_userdict: re.Pattern = re.compile(r'1')\n\nclass Class:\n    def check_initialized(self):\n        pass\n\n    def add_word(self, word: str, freq: Optional[str], tag: Optional[str]):\n        pass\n\n    def load_userdict(self, f: Union[IO, str]):\n        '''\n        Load personalized dict to improve detect rate.\n\n        Parameter:\n            - f : A plain text file contains words and their ocurrences.\n                Can be a file-like object, or the path of the dictionary file,\n                whose encoding must be utf-8.\n\n        Structure of dict file:\n        word1 freq1 word_type1\n        word2 freq2 word_type2\n        ...\n        Word type may be ignored\n        '''\n        self.check_initialized()\n        if isinstance(f, string_types):\n            f: IO = open(f, 'rb')\n        for lineno, ln in enumerate(f, 1):\n            line: str = ln.strip()\n            if not isinstance(f, text_type):\n                try:\n                    line = line.decode('utf-8').lstrip('\ufeff')\n                except UnicodeDecodeError:\n                    raise ValueError('dictionary file %s must be utf-8' % f.name)\n            if not line:\n                continue\n            # match won't be None because there's at least one character\n            word, freq, tag = re_userdict.match(line).groups()\n            if freq is not None:\n                freq = freq.strip()\n            if tag is not None:\n                tag = tag.strip()\n            self.add_word(word, freq, tag)\n", "error_location_char": [480, 481], "type_checked_pytype": true, "type_error_label": "attribute-error, indirect", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def start(", "name", ",", "callback_list", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Initialize and start based with name and list of callbacks\\n    '", "#NEWLINE#", "callbacks", "=", "Callbacks", "(", ")", "#NEWLINE#", "for", "(", "cback", ",", "func", ")", "in", "callback_list", ":", "#NEWLINE#", "#INDENT#", "callbacks", ".", "add", "(", "cback", ",", "func", ")", "#NEWLINE#", "#UNINDENT#", "config", "=", "Config", "(", "name", ")", "#NEWLINE#", "conf", "=", "config", ".", "get", "(", ")", "#NEWLINE#", "callbacks", ".", "call", "(", "Callback", ".", "BASED_CONFIG", ",", "(", "-", "1", ")", ",", "(", "conf", ",", ")", ")", "#NEWLINE#", "loggers", "=", "Loggers", "(", "config", ")", "#NEWLINE#", "account_list", "=", "AccountList", "(", "conf", ",", "loggers", ",", "callbacks", ")", "#NEWLINE#", "accounts", "=", "account_list", ".", "load", "(", ")", "#NEWLINE#", "for", "acc", "in", "accounts", ".", "values", "(", ")", ":", "#NEWLINE#", "#INDENT#", "callbacks", ".", "call", "(", "Callback", ".", "ADD_ACCOUNT", ",", "acc", ".", "aid", ",", "(", "acc", ",", ")", ")", "#NEWLINE#", "#UNINDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "server", "=", "Server", "(", "config", ",", "loggers", ",", "callbacks", ",", "account_list", ")", "#NEWLINE#", "server", ".", "run", "(", ")", "#NEWLINE#", "#UNINDENT#", "except", "KeyboardInterrupt", ":", "#NEWLINE#", "#INDENT#", "callbacks", ".", "call", "(", "Callback", ".", "BASED_INTERRUPT", ",", "(", "-", "1", ")", ",", "(", ")", ")", "#NEWLINE#", "#UNINDENT#", "finally", ":", "#NEWLINE#", "#INDENT#", "callbacks", ".", "call", "(", "Callback", ".", "BASED_QUIT", ",", "(", "-", "1", ")", ",", "(", ")", ")", "#NEWLINE#", "sys", ".", "exit", "(", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [8, 9, 7, "enum_FIELD"], [10, 14, 7, "enum_FIELD"], [23, 20, 7, "enum_FIELD"], [23, 24, 7, "enum_FIELD"], [37, 41, 7, "enum_FIELD"], [44, 50, 7, "enum_FIELD"], [52, 60, 7, "enum_FIELD"], [71, 75, 7, "enum_FIELD"], [78, 84, 7, "enum_FIELD"], [89, 95, 7, "enum_FIELD"], [100, 99, 7, "enum_FIELD"], [100, 104, 7, "enum_FIELD"], [14, 13, 7, "enum_FIELD"], [27, 33, 7, "enum_FIELD"], [41, 40, 7, "enum_FIELD"], [50, 48, 7, "enum_FIELD"], [60, 54, 7, "enum_FIELD"], [75, 74, 7, "enum_FIELD"], [84, 81, 7, "enum_FIELD"], [95, 93, 7, "enum_FIELD"], [104, 102, 7, "enum_FIELD"], [108, 116, 7, "enum_FIELD"], [131, 139, 7, "enum_FIELD"], [144, 148, 7, "enum_FIELD"], [152, 153, 7, "enum_FIELD"], [178, 186, 7, "enum_FIELD"], [195, 199, 7, "enum_FIELD"], [33, 29, 7, "enum_FIELD"], [48, 47, 7, "enum_FIELD"], [54, 53, 7, "enum_FIELD"], [58, 57, 7, "enum_FIELD"], [62, 63, 7, "enum_FIELD"], [93, 92, 7, "enum_FIELD"], [102, 101, 7, "enum_FIELD"], [116, 110, 7, "enum_FIELD"], [139, 134, 7, "enum_FIELD"], [148, 146, 7, "enum_FIELD"], [156, 164, 7, "enum_FIELD"], [186, 180, 7, "enum_FIELD"], [199, 197, 7, "enum_FIELD"], [29, 28, 7, "enum_FIELD"], [110, 109, 7, "enum_FIELD"], [114, 113, 7, "enum_FIELD"], [118, 117, 7, "enum_FIELD"], [146, 145, 7, "enum_FIELD"], [164, 158, 7, "enum_FIELD"], [180, 179, 7, "enum_FIELD"], [184, 183, 7, "enum_FIELD"], [188, 189, 7, "enum_FIELD"], [197, 196, 7, "enum_FIELD"], [158, 157, 7, "enum_FIELD"], [162, 161, 7, "enum_FIELD"], [166, 167, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [24, 4, 10, "enum_LAST_LEXICAL_USE"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 27, 9, "enum_NEXT_SYNTAX"], [28, 11, 10, "enum_LAST_LEXICAL_USE"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [32, 19, 10, "enum_LAST_LEXICAL_USE"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [34, 21, 10, "enum_LAST_LEXICAL_USE"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [42, 2, 10, "enum_LAST_LEXICAL_USE"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [47, 38, 10, "enum_LAST_LEXICAL_USE"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [53, 28, 10, "enum_LAST_LEXICAL_USE"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [67, 45, 10, "enum_LAST_LEXICAL_USE"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [76, 47, 10, "enum_LAST_LEXICAL_USE"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [83, 67, 10, "enum_LAST_LEXICAL_USE"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [85, 72, 10, "enum_LAST_LEXICAL_USE"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [87, 53, 10, "enum_LAST_LEXICAL_USE"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [92, 79, 10, "enum_LAST_LEXICAL_USE"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [101, 90, 10, "enum_LAST_LEXICAL_USE"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 108, 9, "enum_NEXT_SYNTAX"], [109, 87, 10, "enum_LAST_LEXICAL_USE"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [113, 57, 10, "enum_LAST_LEXICAL_USE"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [117, 99, 10, "enum_LAST_LEXICAL_USE"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [122, 117, 10, "enum_LAST_LEXICAL_USE"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [136, 76, 10, "enum_LAST_LEXICAL_USE"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [138, 85, 10, "enum_LAST_LEXICAL_USE"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [140, 109, 10, "enum_LAST_LEXICAL_USE"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [142, 92, 10, "enum_LAST_LEXICAL_USE"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [145, 132, 10, "enum_LAST_LEXICAL_USE"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 156, 9, "enum_NEXT_SYNTAX"], [157, 140, 10, "enum_LAST_LEXICAL_USE"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [161, 113, 10, "enum_LAST_LEXICAL_USE"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 175, 9, "enum_NEXT_SYNTAX"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 178, 9, "enum_NEXT_SYNTAX"], [179, 157, 10, "enum_LAST_LEXICAL_USE"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [183, 161, 10, "enum_LAST_LEXICAL_USE"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 184, 9, "enum_NEXT_SYNTAX"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [187, 188, 9, "enum_NEXT_SYNTAX"], [188, 189, 9, "enum_NEXT_SYNTAX"], [189, 190, 9, "enum_NEXT_SYNTAX"], [190, 191, 9, "enum_NEXT_SYNTAX"], [191, 192, 9, "enum_NEXT_SYNTAX"], [192, 193, 9, "enum_NEXT_SYNTAX"], [193, 194, 9, "enum_NEXT_SYNTAX"], [194, 195, 9, "enum_NEXT_SYNTAX"], [195, 196, 9, "enum_NEXT_SYNTAX"], [196, 197, 9, "enum_NEXT_SYNTAX"], [197, 198, 9, "enum_NEXT_SYNTAX"], [198, 199, 9, "enum_NEXT_SYNTAX"], [199, 200, 9, "enum_NEXT_SYNTAX"], [3, 8, 1, "enum_CFG_NEXT"], [8, 10, 1, "enum_CFG_NEXT"], [10, 24, 1, "enum_CFG_NEXT"], [24, 20, 1, "enum_CFG_NEXT"], [20, 37, 1, "enum_CFG_NEXT"], [20, 27, 1, "enum_CFG_NEXT"], [27, 20, 1, "enum_CFG_NEXT"], [37, 44, 1, "enum_CFG_NEXT"], [44, 52, 1, "enum_CFG_NEXT"], [52, 71, 1, "enum_CFG_NEXT"], [71, 78, 1, "enum_CFG_NEXT"], [78, 89, 1, "enum_CFG_NEXT"], [89, 104, 1, "enum_CFG_NEXT"], [104, 99, 1, "enum_CFG_NEXT"], [99, 108, 1, "enum_CFG_NEXT"], [99, 131, 1, "enum_CFG_NEXT"], [108, 99, 1, "enum_CFG_NEXT"], [178, 195, 1, "enum_CFG_NEXT"], [131, 144, 1, "enum_CFG_NEXT"], [144, 178, 1, "enum_CFG_NEXT"], [144, 153, 1, "enum_CFG_NEXT"], [153, 178, 1, "enum_CFG_NEXT"], [153, 156, 1, "enum_CFG_NEXT"], [156, 178, 1, "enum_CFG_NEXT"], [24, 4, 3, "enum_LAST_WRITE"], [19, 32, 2, "enum_LAST_READ"], [19, 19, 3, "enum_LAST_WRITE"], [21, 34, 2, "enum_LAST_READ"], [21, 21, 3, "enum_LAST_WRITE"], [28, 28, 2, "enum_LAST_READ"], [28, 11, 3, "enum_LAST_WRITE"], [32, 32, 2, "enum_LAST_READ"], [32, 19, 3, "enum_LAST_WRITE"], [34, 34, 2, "enum_LAST_READ"], [34, 21, 3, "enum_LAST_WRITE"], [42, 2, 3, "enum_LAST_WRITE"], [47, 38, 3, "enum_LAST_WRITE"], [53, 28, 2, "enum_LAST_READ"], [53, 11, 3, "enum_LAST_WRITE"], [67, 45, 3, "enum_LAST_WRITE"], [76, 47, 2, "enum_LAST_READ"], [76, 38, 3, "enum_LAST_WRITE"], [83, 67, 2, "enum_LAST_READ"], [83, 45, 3, "enum_LAST_WRITE"], [85, 72, 3, "enum_LAST_WRITE"], [87, 53, 2, "enum_LAST_READ"], [87, 11, 3, "enum_LAST_WRITE"], [92, 79, 3, "enum_LAST_WRITE"], [101, 90, 3, "enum_LAST_WRITE"], [99, 122, 2, "enum_LAST_READ"], [99, 99, 3, "enum_LAST_WRITE"], [109, 109, 2, "enum_LAST_READ"], [109, 87, 2, "enum_LAST_READ"], [109, 11, 3, "enum_LAST_WRITE"], [113, 113, 2, "enum_LAST_READ"], [113, 57, 2, "enum_LAST_READ"], [117, 122, 2, "enum_LAST_READ"], [117, 99, 3, "enum_LAST_WRITE"], [122, 117, 2, "enum_LAST_READ"], [122, 99, 3, "enum_LAST_WRITE"], [179, 157, 2, "enum_LAST_READ"], [179, 140, 2, "enum_LAST_READ"], [179, 11, 3, "enum_LAST_WRITE"], [183, 161, 2, "enum_LAST_READ"], [183, 57, 2, "enum_LAST_READ"], [183, 113, 2, "enum_LAST_READ"], [136, 76, 2, "enum_LAST_READ"], [136, 38, 3, "enum_LAST_WRITE"], [138, 85, 2, "enum_LAST_READ"], [138, 72, 3, "enum_LAST_WRITE"], [140, 109, 2, "enum_LAST_READ"], [140, 87, 2, "enum_LAST_READ"], [140, 11, 3, "enum_LAST_WRITE"], [142, 92, 2, "enum_LAST_READ"], [142, 79, 3, "enum_LAST_WRITE"], [145, 132, 3, "enum_LAST_WRITE"], [157, 140, 2, "enum_LAST_READ"], [157, 11, 3, "enum_LAST_WRITE"], [161, 113, 2, "enum_LAST_READ"], [161, 57, 2, "enum_LAST_READ"], [11, 13, 4, "enum_COMPUTED_FROM"], [38, 40, 4, "enum_COMPUTED_FROM"], [38, 42, 4, "enum_COMPUTED_FROM"], [45, 47, 4, "enum_COMPUTED_FROM"], [72, 74, 4, "enum_COMPUTED_FROM"], [72, 76, 4, "enum_COMPUTED_FROM"], [79, 81, 4, "enum_COMPUTED_FROM"], [79, 83, 4, "enum_COMPUTED_FROM"], [79, 85, 4, "enum_COMPUTED_FROM"], [79, 87, 4, "enum_COMPUTED_FROM"], [90, 92, 4, "enum_COMPUTED_FROM"], [132, 134, 4, "enum_COMPUTED_FROM"], [132, 136, 4, "enum_COMPUTED_FROM"], [132, 138, 4, "enum_COMPUTED_FROM"], [132, 140, 4, "enum_COMPUTED_FROM"], [132, 142, 4, "enum_COMPUTED_FROM"]], "error_location": 83, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/hwipl/nuqql-based.git", "old_path": "nuqql_based/based.py", "hash": "9bae0ed6eca32793dc8d5a4789454627572a6fc0", "code": "def start(name: str, callback_list: List[Tuple[str, Callable]]):\n    \"\"\"\n    Initialize and start based with name and list of callbacks\n    \"\"\"\n\n    # register all callbacks\n    callbacks = Callbacks()\n    for cback, func in callback_list:\n        callbacks.add(cback, func)\n\n    # initialize configuration from command line and config file\n    config = Config(name)\n    conf = config.get()\n    callbacks.call(Callback.BASED_CONFIG, -1, (conf, ))\n\n    # initialize main logger\n    loggers = Loggers(config)\n\n    # load accounts\n    account_list = AccountList(conf, loggers, callbacks)\n    accounts = account_list.load()\n\n    # call add account callback for each account\n    for acc in accounts.values():\n        callbacks.call(Callback.ADD_ACCOUNT, acc.aid, (acc, ))\n\n    # start server\n    try:\n        server = Server(config, loggers, callbacks, account_list)\n        server.run()\n    except KeyboardInterrupt:\n        callbacks.call(Callback.BASED_INTERRUPT, -1, ())\n    finally:\n        callbacks.call(Callback.BASED_QUIT, -1, ())\n        sys.exit()\n", "rewrite": "ReplaceText(target='config' @(35,31)->(35,35))", "error_line": 19, "has_bug": true, "code_full": "import sys\nfrom typing import Any, Callable, List, Tuple\n\n\nclass Callbacks:\n    def add(self, cback: str, func: Callable):\n        # Dummy implementation for type annotation purposes\n        pass\n\n    def call(self, cback: str, aid: int, args: Tuple[Any, ...]):\n        # Dummy implementation for type annotation purposes\n        pass    \n\nclass Config:\n    def __init__(self, name: str):\n        # Dummy implementation for type annotation purposes\n        pass\n\n    def get(self) -> dict:\n        # Dummy implementation for type annotation purposes\n        return {}\n\nclass Loggers:\n    def __init__(self, config: Config):\n        # Dummy implementation for type annotation purposes\n        pass\n\n\nclass AccountList:\n    def __init__(self, config: Config, loggers: Loggers, callbacks: Callbacks):\n        # Dummy implementation for type annotation purposes\n        pass\n\n    def load(self) -> dict:\n        # Dummy implementation for type annotation purposes\n        return {}\n\nclass Server:\n    def __init__(self, config: Config, loggers: Loggers, callbacks: Callbacks, account_list: AccountList):\n        # Dummy implementation for type annotation purposes\n        pass\n\n    def run(self):\n        # Dummy implementation for type annotation purposes\n        pass\n\nclass Callback:\n    BASED_CONFIG = 'BASED_CONFIG'\n    ADD_ACCOUNT = 'ADD_ACCOUNT'\n    BASED_INTERRUPT = 'BASED_INTERRUPT'\n    BASED_QUIT = 'BASED_QUIT'\n\ndef start(name: str, callback_list: List[Tuple[str, Callable]]):\n    \"\"\"\n    Initialize and start based with name and list of callbacks\n    \"\"\"\n\n    # register all callbacks\n    callbacks = Callbacks()\n    for cback, func in callback_list:\n        callbacks.add(cback, func)\n\n    # initialize configuration from command line and config file\n    config = Config(name)\n    conf = config.get()\n    callbacks.call(Callback.BASED_CONFIG, -1, (conf, ))\n\n    # initialize main logger\n    loggers = Loggers(config)\n\n    # load accounts\n    account_list = AccountList(conf, loggers, callbacks)\n    accounts = account_list.load()\n\n    # call add account callback for each account\n    for acc in accounts.values():\n        callbacks.call(Callback.ADD_ACCOUNT, acc.aid, (acc, ))\n\n    # start server\n    try:\n        server = Server(config, loggers, callbacks, account_list)\n        server.run()\n    except KeyboardInterrupt:\n        callbacks.call(Callback.BASED_INTERRUPT, -1, ())\n    finally:\n        callbacks.call(Callback.BASED_QUIT, -1, ())\n        sys.exit()\n", "error_location_char": [559, 563], "type_checked_pytype": false, "type_error_label": "wrong-arg-types", "type_checked_mypy": false}
{"source_tokens": ["#NEWLINE#", "def test_SVDPlusPlus_objective(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "data", "=", "Orange", ".", "data", ".", "Table", "(", "'ratings.tab'", ")", "#NEWLINE#", "steps", "=", "[", "1", ",", "10", ",", "30", "]", "#NEWLINE#", "objectives", "=", "[", "]", "#NEWLINE#", "for", "step", "in", "steps", ":", "#NEWLINE#", "#INDENT#", "learner", "=", "SVDPlusPlusLearner", "(", "K", "=", "2", ",", "steps", "=", "step", ",", "alpha", "=", "0.007", ",", "random_state", "=", "42", ",", "verbose", "=", "False", ")", "#NEWLINE#", "recommender", "=", "learner", "(", "data", ")", "#NEWLINE#", "objectives", ".", "append", "(", "recommender", ".", "compute_objective", "(", "data", "=", "data", ",", "P", "=", "recommender", ".", "P", ",", "Q", "=", "recommender", ".", "Q", ",", "Y", "=", "recommender", ".", "Y", ",", "bias", "=", "learner", ".", "bias", ",", "beta", "=", "learner", ".", "beta", ")", ")", "#NEWLINE#", "#UNINDENT#", "test", "=", "list", "(", "map", "(", "(", "lambda", "t", ":", "(", "t", "[", "0", "]", ">=", "t", "[", "1", "]", ")", ")", ",", "zip", "(", "objectives", ",", "objectives", "[", "1", ":", "]", ")", ")", ")", "#NEWLINE#", "self", ".", "assertTrue", "(", "all", "(", "test", ")", ")"], "edges": [[6, 14, 7, "enum_FIELD"], [17, 22, 7, "enum_FIELD"], [27, 30, 7, "enum_FIELD"], [35, 34, 7, "enum_FIELD"], [35, 36, 7, "enum_FIELD"], [116, 120, 7, "enum_FIELD"], [152, 156, 7, "enum_FIELD"], [14, 12, 7, "enum_FIELD"], [39, 51, 7, "enum_FIELD"], [64, 68, 7, "enum_FIELD"], [71, 75, 7, "enum_FIELD"], [120, 119, 7, "enum_FIELD"], [156, 154, 7, "enum_FIELD"], [12, 10, 7, "enum_FIELD"], [51, 42, 7, "enum_FIELD"], [68, 67, 7, "enum_FIELD"], [75, 73, 7, "enum_FIELD"], [139, 121, 7, "enum_FIELD"], [154, 153, 7, "enum_FIELD"], [158, 157, 7, "enum_FIELD"], [10, 9, 7, "enum_FIELD"], [44, 46, 7, "enum_FIELD"], [48, 50, 7, "enum_FIELD"], [52, 54, 7, "enum_FIELD"], [56, 58, 7, "enum_FIELD"], [60, 62, 7, "enum_FIELD"], [73, 72, 7, "enum_FIELD"], [95, 77, 7, "enum_FIELD"], [124, 132, 7, "enum_FIELD"], [143, 140, 7, "enum_FIELD"], [77, 76, 7, "enum_FIELD"], [80, 82, 7, "enum_FIELD"], [84, 87, 7, "enum_FIELD"], [90, 93, 7, "enum_FIELD"], [96, 99, 7, "enum_FIELD"], [102, 105, 7, "enum_FIELD"], [108, 111, 7, "enum_FIELD"], [132, 129, 7, "enum_FIELD"], [145, 144, 7, "enum_FIELD"], [145, 147, 7, "enum_FIELD"], [87, 86, 7, "enum_FIELD"], [93, 92, 7, "enum_FIELD"], [99, 98, 7, "enum_FIELD"], [105, 104, 7, "enum_FIELD"], [111, 110, 7, "enum_FIELD"], [129, 128, 7, "enum_FIELD"], [129, 130, 7, "enum_FIELD"], [134, 133, 7, "enum_FIELD"], [134, 135, 7, "enum_FIELD"], [147, 146, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [36, 18, 10, "enum_LAST_LEXICAL_USE"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [50, 34, 10, "enum_LAST_LEXICAL_USE"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [67, 40, 10, "enum_LAST_LEXICAL_USE"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [69, 7, 10, "enum_LAST_LEXICAL_USE"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [72, 28, 10, "enum_LAST_LEXICAL_USE"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [76, 65, 10, "enum_LAST_LEXICAL_USE"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [82, 69, 10, "enum_LAST_LEXICAL_USE"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [86, 76, 10, "enum_LAST_LEXICAL_USE"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [92, 86, 10, "enum_LAST_LEXICAL_USE"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [98, 92, 10, "enum_LAST_LEXICAL_USE"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [104, 67, 10, "enum_LAST_LEXICAL_USE"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [110, 104, 10, "enum_LAST_LEXICAL_USE"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [128, 125, 10, "enum_LAST_LEXICAL_USE"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [133, 128, 10, "enum_LAST_LEXICAL_USE"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [142, 72, 10, "enum_LAST_LEXICAL_USE"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [144, 142, 10, "enum_LAST_LEXICAL_USE"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [153, 2, 10, "enum_LAST_LEXICAL_USE"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [159, 117, 10, "enum_LAST_LEXICAL_USE"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [6, 17, 1, "enum_CFG_NEXT"], [17, 27, 1, "enum_CFG_NEXT"], [27, 36, 1, "enum_CFG_NEXT"], [36, 34, 1, "enum_CFG_NEXT"], [34, 116, 1, "enum_CFG_NEXT"], [34, 39, 1, "enum_CFG_NEXT"], [39, 64, 1, "enum_CFG_NEXT"], [64, 71, 1, "enum_CFG_NEXT"], [71, 34, 1, "enum_CFG_NEXT"], [116, 152, 1, "enum_CFG_NEXT"], [36, 18, 3, "enum_LAST_WRITE"], [34, 50, 2, "enum_LAST_READ"], [34, 34, 3, "enum_LAST_WRITE"], [42, 42, 2, "enum_LAST_READ"], [50, 50, 2, "enum_LAST_READ"], [50, 34, 3, "enum_LAST_WRITE"], [40, 110, 2, "enum_LAST_READ"], [40, 40, 3, "enum_LAST_WRITE"], [67, 110, 2, "enum_LAST_READ"], [67, 40, 3, "enum_LAST_WRITE"], [69, 82, 2, "enum_LAST_READ"], [69, 7, 3, "enum_LAST_WRITE"], [65, 98, 2, "enum_LAST_READ"], [65, 65, 3, "enum_LAST_WRITE"], [72, 72, 2, "enum_LAST_READ"], [72, 28, 3, "enum_LAST_WRITE"], [76, 98, 2, "enum_LAST_READ"], [76, 65, 3, "enum_LAST_WRITE"], [82, 69, 2, "enum_LAST_READ"], [82, 7, 3, "enum_LAST_WRITE"], [86, 76, 2, "enum_LAST_READ"], [86, 65, 3, "enum_LAST_WRITE"], [92, 86, 2, "enum_LAST_READ"], [92, 65, 3, "enum_LAST_WRITE"], [98, 92, 2, "enum_LAST_READ"], [98, 65, 3, "enum_LAST_WRITE"], [104, 67, 2, "enum_LAST_READ"], [104, 40, 3, "enum_LAST_WRITE"], [110, 104, 2, "enum_LAST_READ"], [110, 40, 3, "enum_LAST_WRITE"], [128, 125, 3, "enum_LAST_WRITE"], [133, 128, 2, "enum_LAST_READ"], [133, 125, 3, "enum_LAST_WRITE"], [142, 72, 2, "enum_LAST_READ"], [142, 28, 3, "enum_LAST_WRITE"], [144, 142, 2, "enum_LAST_READ"], [144, 28, 3, "enum_LAST_WRITE"], [153, 2, 3, "enum_LAST_WRITE"], [159, 117, 3, "enum_LAST_WRITE"], [7, 9, 4, "enum_COMPUTED_FROM"], [117, 119, 4, "enum_COMPUTED_FROM"], [117, 121, 4, "enum_COMPUTED_FROM"], [117, 140, 4, "enum_COMPUTED_FROM"], [117, 142, 4, "enum_COMPUTED_FROM"], [117, 125, 4, "enum_COMPUTED_FROM"], [117, 144, 4, "enum_COMPUTED_FROM"], [117, 128, 4, "enum_COMPUTED_FROM"], [117, 133, 4, "enum_COMPUTED_FROM"], [40, 42, 4, "enum_COMPUTED_FROM"], [40, 50, 4, "enum_COMPUTED_FROM"], [65, 67, 4, "enum_COMPUTED_FROM"], [65, 69, 4, "enum_COMPUTED_FROM"]], "error_location": 104, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/biolab/orange3-recommendation.git", "old_path": "orangecontrib/recommendation/tests/test_svdplusplus.py", "hash": "971301a39ce26450ac6bdeee8c9028699b9a240e", "code": "def test_SVDPlusPlus_objective(self) -> None:\n    # Load data\n    data: Orange.data.Table = Orange.data.Table('ratings.tab')\n\n    steps: List[int] = [1, 10, 30]\n    objectives: List[float] = []\n\n    for step in steps:\n        learner = SVDPlusPlusLearner(K=2, steps=step, alpha=0.007,\n                                    random_state=42, verbose=False)\n        recommender = learner(data)\n        objectives.append(\n            recommender.compute_objective(data=data, P=recommender.P,\n                                        Q=recommender.Q,\n                                        Y=recommender.Y,\n                                        bias=learner.bias,\n                                        beta=learner.beta))\n\n    # Assert objective values decrease\n    test = list(\n        map(lambda t: t[0] >= t[1], zip(objectives, objectives[1:])))\n    self.assertTrue(all(test))\n", "rewrite": "ReplaceText(target='recommender' @(160,51)->(160,58))", "error_line": 15, "has_bug": true, "code_full": "from typing import Any, List\n\nimport Orange\n\n\nclass Recommender:\n    def __init__(self):\n        self.P = None\n        self.Q = None\n        self.Y = None\n\n    def compute_objective(self, data: Orange.data.Table, P: Any, Q: Any, Y: Any, bias: Any, beta: Any) -> float:\n        # Dummy implementation for type annotation purposes\n        return 0.0\n\n\nclass SVDPlusPlusLearner(Orange.base.Learner):\n    def __init__(self, K: int, steps: int, alpha: float, random_state: int, verbose: bool):\n        pass\n\n    def __call__(self, data: Orange.data.Table) -> Recommender:\n        return Recommender()\n\nclass Class:\n    def assertTrue(self, expr: bool):\n        pass\n\n\n    def test_SVDPlusPlus_objective(self) -> None:\n        # Load data\n        data: Orange.data.Table = Orange.data.Table('ratings.tab')\n\n        steps: List[int] = [1, 10, 30]\n        objectives: List[float] = []\n\n        for step in steps:\n            learner = SVDPlusPlusLearner(K=2, steps=step, alpha=0.007,\n                                        random_state=42, verbose=False)\n            recommender = learner(data)\n            objectives.append(\n                recommender.compute_objective(data=data, P=recommender.P,\n                                            Q=recommender.Q,\n                                            Y=recommender.Y,\n                                            bias=learner.bias,\n                                            beta=learner.beta))\n\n        # Assert objective values decrease\n        test = list(\n            map(lambda t: t[0] >= t[1], zip(objectives, objectives[1:])))\n        self.assertTrue(all(test))\n", "error_location_char": [645, 652], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def connection_divergence_average(", "config", "=", "None", ",", "nodes", "=", "None", ",", "edges", "=", "None", ",", "sources", "=", "[", "]", ",", "targets", "=", "[", "]", ",", "sids", "=", "[", "]", ",", "tids", "=", "[", "]", ",", "prepend_pop", "=", "True", ",", "convergence", "=", "False", ")", ":", "#NEWLINE#", "#INDENT#", "def total_connection_relationship(", "**kwargs", ")", ":", "#NEWLINE#", "#INDENT#", "edges", "=", "kwargs", "[", "'edges'", "]", "#NEWLINE#", "source_id_type", "=", "kwargs", "[", "'sid'", "]", "#NEWLINE#", "target_id_type", "=", "kwargs", "[", "'tid'", "]", "#NEWLINE#", "source_id", "=", "kwargs", "[", "'source_id'", "]", "#NEWLINE#", "target_id", "=", "kwargs", "[", "'target_id'", "]", "#NEWLINE#", "t_list", "=", "kwargs", "[", "'target_nodes'", "]", "#NEWLINE#", "s_list", "=", "kwargs", "[", "'source_nodes'", "]", "#NEWLINE#", "count", "=", "1", "#NEWLINE#", "if", "convergence", ":", "#NEWLINE#", "#INDENT#", "vc", "=", "t_list", ".", "apply", "(", "pd", ".", "Series", ".", "value_counts", ")", "#NEWLINE#", "vc", "=", "vc", "[", "target_id_type", "]", ".", "dropna", "(", ")", ".", "sort_index", "(", ")", "#NEWLINE#", "count", "=", "vc", ".", "ix", "[", "target_id", "]", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "vc", "=", "t_list", ".", "apply", "(", "pd", ".", "Series", ".", "value_counts", ")", "#NEWLINE#", "vc", "=", "vc", "[", "source_id_type", "]", ".", "dropna", "(", ")", ".", "sort_index", "(", ")", "#NEWLINE#", "count", "=", "vc", ".", "ix", "[", "source_id", "]", "#NEWLINE#", "#UNINDENT#", "total", "=", "edges", "[", "(", "(", "edges", "[", "source_id_type", "]", "==", "source_id", ")", "&", "(", "edges", "[", "target_id_type", "]", "==", "target_id", ")", ")", "]", ".", "count", "(", ")", "#NEWLINE#", "total", "=", "total", ".", "source_node_id", "#NEWLINE#", "return", "round", "(", "(", "total", "/", "count", ")", ",", "1", ")", "#NEWLINE#", "#UNINDENT#", "return", "relation_matrix", "(", "config", ",", "nodes", ",", "edges", ",", "sources", ",", "targets", ",", "sids", ",", "tids", ",", "prepend_pop", ",", "relation_func", "=", "total_connection_relationship", ")"], "edges": [[1, 20, 7, "enum_FIELD"], [47, 46, 7, "enum_FIELD"], [237, 247, 7, "enum_FIELD"], [50, 54, 7, "enum_FIELD"], [57, 61, 7, "enum_FIELD"], [64, 68, 7, "enum_FIELD"], [71, 75, 7, "enum_FIELD"], [78, 82, 7, "enum_FIELD"], [85, 89, 7, "enum_FIELD"], [92, 96, 7, "enum_FIELD"], [99, 102, 7, "enum_FIELD"], [106, 105, 7, "enum_FIELD"], [188, 215, 7, "enum_FIELD"], [217, 221, 7, "enum_FIELD"], [224, 232, 7, "enum_FIELD"], [247, 238, 7, "enum_FIELD"], [54, 53, 7, "enum_FIELD"], [54, 55, 7, "enum_FIELD"], [61, 60, 7, "enum_FIELD"], [61, 62, 7, "enum_FIELD"], [68, 67, 7, "enum_FIELD"], [68, 69, 7, "enum_FIELD"], [75, 74, 7, "enum_FIELD"], [75, 76, 7, "enum_FIELD"], [82, 81, 7, "enum_FIELD"], [82, 83, 7, "enum_FIELD"], [89, 88, 7, "enum_FIELD"], [89, 90, 7, "enum_FIELD"], [96, 95, 7, "enum_FIELD"], [96, 97, 7, "enum_FIELD"], [108, 114, 7, "enum_FIELD"], [121, 134, 7, "enum_FIELD"], [136, 142, 7, "enum_FIELD"], [150, 156, 7, "enum_FIELD"], [163, 176, 7, "enum_FIELD"], [178, 184, 7, "enum_FIELD"], [215, 213, 7, "enum_FIELD"], [221, 220, 7, "enum_FIELD"], [232, 225, 7, "enum_FIELD"], [256, 258, 7, "enum_FIELD"], [114, 112, 7, "enum_FIELD"], [134, 132, 7, "enum_FIELD"], [142, 140, 7, "enum_FIELD"], [142, 143, 7, "enum_FIELD"], [156, 154, 7, "enum_FIELD"], [176, 174, 7, "enum_FIELD"], [184, 182, 7, "enum_FIELD"], [184, 185, 7, "enum_FIELD"], [213, 192, 7, "enum_FIELD"], [229, 228, 7, "enum_FIELD"], [229, 230, 7, "enum_FIELD"], [112, 111, 7, "enum_FIELD"], [118, 116, 7, "enum_FIELD"], [132, 130, 7, "enum_FIELD"], [140, 139, 7, "enum_FIELD"], [154, 153, 7, "enum_FIELD"], [160, 158, 7, "enum_FIELD"], [174, 172, 7, "enum_FIELD"], [182, 181, 7, "enum_FIELD"], [192, 191, 7, "enum_FIELD"], [192, 202, 7, "enum_FIELD"], [116, 115, 7, "enum_FIELD"], [130, 128, 7, "enum_FIELD"], [158, 157, 7, "enum_FIELD"], [172, 170, 7, "enum_FIELD"], [202, 199, 7, "enum_FIELD"], [202, 208, 7, "enum_FIELD"], [128, 125, 7, "enum_FIELD"], [170, 167, 7, "enum_FIELD"], [199, 196, 7, "enum_FIELD"], [208, 205, 7, "enum_FIELD"], [125, 124, 7, "enum_FIELD"], [125, 126, 7, "enum_FIELD"], [167, 166, 7, "enum_FIELD"], [167, 168, 7, "enum_FIELD"], [196, 195, 7, "enum_FIELD"], [196, 197, 7, "enum_FIELD"], [205, 204, 7, "enum_FIELD"], [205, 206, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 50, 9, "enum_NEXT_SYNTAX"], [51, 10, 10, "enum_LAST_LEXICAL_USE"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [60, 53, 10, "enum_LAST_LEXICAL_USE"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [67, 60, 10, "enum_LAST_LEXICAL_USE"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [74, 67, 10, "enum_LAST_LEXICAL_USE"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [81, 74, 10, "enum_LAST_LEXICAL_USE"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [88, 81, 10, "enum_LAST_LEXICAL_USE"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [95, 88, 10, "enum_LAST_LEXICAL_USE"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 104, 9, "enum_NEXT_SYNTAX"], [105, 38, 10, "enum_LAST_LEXICAL_USE"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [111, 86, 10, "enum_LAST_LEXICAL_USE"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [122, 109, 10, "enum_LAST_LEXICAL_USE"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [124, 122, 10, "enum_LAST_LEXICAL_USE"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [126, 65, 10, "enum_LAST_LEXICAL_USE"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [137, 100, 10, "enum_LAST_LEXICAL_USE"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [139, 124, 10, "enum_LAST_LEXICAL_USE"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [143, 79, 10, "enum_LAST_LEXICAL_USE"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 150, 9, "enum_NEXT_SYNTAX"], [151, 139, 10, "enum_LAST_LEXICAL_USE"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [153, 111, 10, "enum_LAST_LEXICAL_USE"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [157, 115, 10, "enum_LAST_LEXICAL_USE"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [164, 151, 10, "enum_LAST_LEXICAL_USE"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [166, 164, 10, "enum_LAST_LEXICAL_USE"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [168, 58, 10, "enum_LAST_LEXICAL_USE"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 178, 9, "enum_NEXT_SYNTAX"], [179, 137, 10, "enum_LAST_LEXICAL_USE"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 180, 9, "enum_NEXT_SYNTAX"], [181, 166, 10, "enum_LAST_LEXICAL_USE"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 184, 9, "enum_NEXT_SYNTAX"], [185, 72, 10, "enum_LAST_LEXICAL_USE"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 188, 9, "enum_NEXT_SYNTAX"], [188, 189, 9, "enum_NEXT_SYNTAX"], [189, 190, 9, "enum_NEXT_SYNTAX"], [191, 51, 10, "enum_LAST_LEXICAL_USE"], [190, 191, 9, "enum_NEXT_SYNTAX"], [191, 192, 9, "enum_NEXT_SYNTAX"], [192, 193, 9, "enum_NEXT_SYNTAX"], [193, 194, 9, "enum_NEXT_SYNTAX"], [195, 191, 10, "enum_LAST_LEXICAL_USE"], [194, 195, 9, "enum_NEXT_SYNTAX"], [195, 196, 9, "enum_NEXT_SYNTAX"], [197, 168, 10, "enum_LAST_LEXICAL_USE"], [196, 197, 9, "enum_NEXT_SYNTAX"], [197, 198, 9, "enum_NEXT_SYNTAX"], [198, 199, 9, "enum_NEXT_SYNTAX"], [200, 185, 10, "enum_LAST_LEXICAL_USE"], [199, 200, 9, "enum_NEXT_SYNTAX"], [200, 201, 9, "enum_NEXT_SYNTAX"], [201, 202, 9, "enum_NEXT_SYNTAX"], [202, 203, 9, "enum_NEXT_SYNTAX"], [204, 195, 10, "enum_LAST_LEXICAL_USE"], [203, 204, 9, "enum_NEXT_SYNTAX"], [204, 205, 9, "enum_NEXT_SYNTAX"], [206, 126, 10, "enum_LAST_LEXICAL_USE"], [205, 206, 9, "enum_NEXT_SYNTAX"], [206, 207, 9, "enum_NEXT_SYNTAX"], [207, 208, 9, "enum_NEXT_SYNTAX"], [209, 143, 10, "enum_LAST_LEXICAL_USE"], [208, 209, 9, "enum_NEXT_SYNTAX"], [209, 210, 9, "enum_NEXT_SYNTAX"], [210, 211, 9, "enum_NEXT_SYNTAX"], [211, 212, 9, "enum_NEXT_SYNTAX"], [212, 213, 9, "enum_NEXT_SYNTAX"], [213, 214, 9, "enum_NEXT_SYNTAX"], [214, 215, 9, "enum_NEXT_SYNTAX"], [215, 216, 9, "enum_NEXT_SYNTAX"], [216, 217, 9, "enum_NEXT_SYNTAX"], [218, 189, 10, "enum_LAST_LEXICAL_USE"], [217, 218, 9, "enum_NEXT_SYNTAX"], [218, 219, 9, "enum_NEXT_SYNTAX"], [220, 218, 10, "enum_LAST_LEXICAL_USE"], [219, 220, 9, "enum_NEXT_SYNTAX"], [220, 221, 9, "enum_NEXT_SYNTAX"], [221, 222, 9, "enum_NEXT_SYNTAX"], [222, 224, 9, "enum_NEXT_SYNTAX"], [224, 225, 9, "enum_NEXT_SYNTAX"], [225, 226, 9, "enum_NEXT_SYNTAX"], [226, 227, 9, "enum_NEXT_SYNTAX"], [228, 220, 10, "enum_LAST_LEXICAL_USE"], [227, 228, 9, "enum_NEXT_SYNTAX"], [228, 229, 9, "enum_NEXT_SYNTAX"], [230, 179, 10, "enum_LAST_LEXICAL_USE"], [229, 230, 9, "enum_NEXT_SYNTAX"], [230, 231, 9, "enum_NEXT_SYNTAX"], [231, 232, 9, "enum_NEXT_SYNTAX"], [232, 233, 9, "enum_NEXT_SYNTAX"], [233, 234, 9, "enum_NEXT_SYNTAX"], [234, 237, 9, "enum_NEXT_SYNTAX"], [237, 238, 9, "enum_NEXT_SYNTAX"], [238, 239, 9, "enum_NEXT_SYNTAX"], [240, 2, 10, "enum_LAST_LEXICAL_USE"], [239, 240, 9, "enum_NEXT_SYNTAX"], [240, 241, 9, "enum_NEXT_SYNTAX"], [242, 6, 10, "enum_LAST_LEXICAL_USE"], [241, 242, 9, "enum_NEXT_SYNTAX"], [242, 243, 9, "enum_NEXT_SYNTAX"], [244, 204, 10, "enum_LAST_LEXICAL_USE"], [243, 244, 9, "enum_NEXT_SYNTAX"], [244, 245, 9, "enum_NEXT_SYNTAX"], [246, 14, 10, "enum_LAST_LEXICAL_USE"], [245, 246, 9, "enum_NEXT_SYNTAX"], [246, 247, 9, "enum_NEXT_SYNTAX"], [248, 19, 10, "enum_LAST_LEXICAL_USE"], [247, 248, 9, "enum_NEXT_SYNTAX"], [248, 249, 9, "enum_NEXT_SYNTAX"], [250, 24, 10, "enum_LAST_LEXICAL_USE"], [249, 250, 9, "enum_NEXT_SYNTAX"], [250, 251, 9, "enum_NEXT_SYNTAX"], [252, 29, 10, "enum_LAST_LEXICAL_USE"], [251, 252, 9, "enum_NEXT_SYNTAX"], [252, 253, 9, "enum_NEXT_SYNTAX"], [254, 34, 10, "enum_LAST_LEXICAL_USE"], [253, 254, 9, "enum_NEXT_SYNTAX"], [254, 255, 9, "enum_NEXT_SYNTAX"], [255, 256, 9, "enum_NEXT_SYNTAX"], [256, 257, 9, "enum_NEXT_SYNTAX"], [257, 258, 9, "enum_NEXT_SYNTAX"], [258, 259, 9, "enum_NEXT_SYNTAX"], [4, 8, 1, "enum_CFG_NEXT"], [8, 12, 1, "enum_CFG_NEXT"], [12, 16, 1, "enum_CFG_NEXT"], [16, 21, 1, "enum_CFG_NEXT"], [21, 26, 1, "enum_CFG_NEXT"], [26, 31, 1, "enum_CFG_NEXT"], [31, 36, 1, "enum_CFG_NEXT"], [36, 40, 1, "enum_CFG_NEXT"], [40, 1, 1, "enum_CFG_NEXT"], [20, 47, 1, "enum_CFG_NEXT"], [47, 237, 1, "enum_CFG_NEXT"], [46, 50, 1, "enum_CFG_NEXT"], [50, 57, 1, "enum_CFG_NEXT"], [57, 64, 1, "enum_CFG_NEXT"], [64, 71, 1, "enum_CFG_NEXT"], [71, 78, 1, "enum_CFG_NEXT"], [78, 85, 1, "enum_CFG_NEXT"], [85, 92, 1, "enum_CFG_NEXT"], [92, 99, 1, "enum_CFG_NEXT"], [99, 105, 1, "enum_CFG_NEXT"], [105, 150, 1, "enum_CFG_NEXT"], [105, 108, 1, "enum_CFG_NEXT"], [108, 121, 1, "enum_CFG_NEXT"], [121, 136, 1, "enum_CFG_NEXT"], [136, 188, 1, "enum_CFG_NEXT"], [150, 163, 1, "enum_CFG_NEXT"], [163, 178, 1, "enum_CFG_NEXT"], [178, 188, 1, "enum_CFG_NEXT"], [188, 217, 1, "enum_CFG_NEXT"], [217, 224, 1, "enum_CFG_NEXT"], [60, 53, 2, "enum_LAST_READ"], [67, 60, 2, "enum_LAST_READ"], [74, 67, 2, "enum_LAST_READ"], [81, 74, 2, "enum_LAST_READ"], [88, 81, 2, "enum_LAST_READ"], [95, 88, 2, "enum_LAST_READ"], [111, 86, 3, "enum_LAST_WRITE"], [124, 109, 3, "enum_LAST_WRITE"], [126, 65, 3, "enum_LAST_WRITE"], [122, 124, 2, "enum_LAST_READ"], [122, 109, 3, "enum_LAST_WRITE"], [139, 124, 2, "enum_LAST_READ"], [139, 122, 3, "enum_LAST_WRITE"], [143, 79, 3, "enum_LAST_WRITE"], [137, 100, 3, "enum_LAST_WRITE"], [153, 86, 3, "enum_LAST_WRITE"], [166, 151, 3, "enum_LAST_WRITE"], [168, 58, 3, "enum_LAST_WRITE"], [164, 166, 2, "enum_LAST_READ"], [164, 151, 3, "enum_LAST_WRITE"], [181, 166, 2, "enum_LAST_READ"], [181, 164, 3, "enum_LAST_WRITE"], [185, 72, 3, "enum_LAST_WRITE"], [179, 100, 3, "enum_LAST_WRITE"], [191, 51, 3, "enum_LAST_WRITE"], [195, 191, 2, "enum_LAST_READ"], [195, 51, 3, "enum_LAST_WRITE"], [197, 168, 2, "enum_LAST_READ"], [197, 58, 3, "enum_LAST_WRITE"], [200, 185, 2, "enum_LAST_READ"], [200, 72, 3, "enum_LAST_WRITE"], [204, 195, 2, "enum_LAST_READ"], [204, 51, 3, "enum_LAST_WRITE"], [206, 126, 2, "enum_LAST_READ"], [206, 65, 3, "enum_LAST_WRITE"], [209, 143, 2, "enum_LAST_READ"], [209, 79, 3, "enum_LAST_WRITE"], [220, 189, 3, "enum_LAST_WRITE"], [218, 220, 2, "enum_LAST_READ"], [218, 189, 3, "enum_LAST_WRITE"], [228, 220, 2, "enum_LAST_READ"], [228, 218, 3, "enum_LAST_WRITE"], [230, 179, 3, "enum_LAST_WRITE"], [230, 137, 3, "enum_LAST_WRITE"], [240, 2, 3, "enum_LAST_WRITE"], [242, 6, 3, "enum_LAST_WRITE"], [244, 10, 3, "enum_LAST_WRITE"], [246, 14, 3, "enum_LAST_WRITE"], [248, 19, 3, "enum_LAST_WRITE"], [250, 24, 3, "enum_LAST_WRITE"], [252, 29, 3, "enum_LAST_WRITE"], [254, 34, 3, "enum_LAST_WRITE"], [258, 47, 3, "enum_LAST_WRITE"], [51, 53, 4, "enum_COMPUTED_FROM"], [58, 60, 4, "enum_COMPUTED_FROM"], [65, 67, 4, "enum_COMPUTED_FROM"], [72, 74, 4, "enum_COMPUTED_FROM"], [79, 81, 4, "enum_COMPUTED_FROM"], [86, 88, 4, "enum_COMPUTED_FROM"], [93, 95, 4, "enum_COMPUTED_FROM"], [189, 191, 4, "enum_COMPUTED_FROM"], [189, 200, 4, "enum_COMPUTED_FROM"], [189, 209, 4, "enum_COMPUTED_FROM"], [189, 195, 4, "enum_COMPUTED_FROM"], [189, 197, 4, "enum_COMPUTED_FROM"], [189, 204, 4, "enum_COMPUTED_FROM"], [189, 206, 4, "enum_COMPUTED_FROM"], [218, 220, 4, "enum_COMPUTED_FROM"], [109, 111, 4, "enum_COMPUTED_FROM"], [109, 115, 4, "enum_COMPUTED_FROM"], [122, 124, 4, "enum_COMPUTED_FROM"], [122, 126, 4, "enum_COMPUTED_FROM"], [137, 143, 4, "enum_COMPUTED_FROM"], [137, 139, 4, "enum_COMPUTED_FROM"], [151, 153, 4, "enum_COMPUTED_FROM"], [151, 157, 4, "enum_COMPUTED_FROM"], [164, 166, 4, "enum_COMPUTED_FROM"], [164, 168, 4, "enum_COMPUTED_FROM"], [179, 185, 4, "enum_COMPUTED_FROM"], [179, 181, 4, "enum_COMPUTED_FROM"]], "error_location": 153, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/tjbanks/bmtools.git", "old_path": "bmtools/util.py", "hash": "6c3bec26dc0e7338760233359c320ebfd94c4c8d", "code": "def connection_divergence_average(config: Optional[Dict[str, Any]] = None, nodes: Optional[pd.DataFrame] = None, edges: Optional[pd.DataFrame] = None, sources: List[str] = [], targets: List[str] = [], sids: List[str] = [], tids: List[str] = [], prepend_pop: bool = True, convergence: bool = False) -> pd.DataFrame:\n\n    def total_connection_relationship(**kwargs) -> float:\n        edges: pd.DataFrame = kwargs[\"edges\"]\n        source_id_type: str = kwargs[\"sid\"]\n        target_id_type: str = kwargs[\"tid\"]\n        source_id: Any = kwargs[\"source_id\"]\n        target_id: Any = kwargs[\"target_id\"]\n        t_list: pd.DataFrame = kwargs[\"target_nodes\"]\n        s_list: pd.DataFrame = kwargs[\"source_nodes\"]\n        count: int = 1\n\n        if convergence:\n            vc = t_list.apply(pd.Series.value_counts)\n            vc = vc[target_id_type].dropna().sort_index()\n            count = vc.ix[target_id]#t_list[t_list[target_id_type]==target_id]\n        else:\n            vc = t_list.apply(pd.Series.value_counts)\n            vc = vc[source_id_type].dropna().sort_index()\n            count = vc.ix[source_id]#count = s_list[s_list[source_id_type]==source_id]\n\n        total: Any = edges[(edges[source_id_type] == source_id) & (edges[target_id_type]==target_id)].count()\n        total: float = total.source_node_id # may not be the best way to pick\n        return round(total/count,1)\n\n    return relation_matrix(config,nodes,edges,sources,targets,sids,tids,prepend_pop,relation_func=total_connection_relationship)\n", "rewrite": "ReplaceText(target='s_list' @(342,17)->(342,23))", "error_line": 17, "has_bug": true, "code_full": "from typing import Any, Callable, Dict, List, Optional\n\nimport pandas as pd\n\n\ndef relation_matrix(config: Optional[Dict[str, Any]], nodes: pd.DataFrame, edges: pd.DataFrame, sources: List[str], targets: List[str], sids: List[str], tids: List[str], prepend_pop: bool, relation_func: Callable) -> pd.DataFrame:\n    pass\n\n\ndef connection_divergence_average(config: Optional[Dict[str, Any]] = None, nodes: Optional[pd.DataFrame] = None, edges: Optional[pd.DataFrame] = None, sources: List[str] = [], targets: List[str] = [], sids: List[str] = [], tids: List[str] = [], prepend_pop: bool = True, convergence: bool = False) -> pd.DataFrame:\n\n    def total_connection_relationship(**kwargs) -> float:\n        edges: pd.DataFrame = kwargs[\"edges\"]\n        source_id_type: str = kwargs[\"sid\"]\n        target_id_type: str = kwargs[\"tid\"]\n        source_id: Any = kwargs[\"source_id\"]\n        target_id: Any = kwargs[\"target_id\"]\n        t_list: pd.DataFrame = kwargs[\"target_nodes\"]\n        s_list: pd.DataFrame = kwargs[\"source_nodes\"]\n        count: int = 1\n\n        if convergence:\n            vc = t_list.apply(pd.Series.value_counts)\n            vc = vc[target_id_type].dropna().sort_index()\n            count = vc.ix[target_id]#t_list[t_list[target_id_type]==target_id]\n        else:\n            vc = t_list.apply(pd.Series.value_counts)\n            vc = vc[source_id_type].dropna().sort_index()\n            count = vc.ix[source_id]#count = s_list[s_list[source_id_type]==source_id]\n\n        total: Any = edges[(edges[source_id_type] == source_id) & (edges[target_id_type]==target_id)].count()\n        total: float = total.source_node_id # may not be the best way to pick\n        return round(total/count,1)\n\n    return relation_matrix(config,nodes,edges,sources,targets,sids,tids,prepend_pop,relation_func=total_connection_relationship)\n", "error_location_char": [976, 982], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def setup(", "hass", ",", "config", ")", ":", "#NEWLINE#", "#INDENT#", "'Set up the ZoneMinder component.'", "#NEWLINE#", "hass", ".", "data", "[", "DOMAIN", "]", "=", "{", "}", "#NEWLINE#", "success", "=", "True", "#NEWLINE#", "for", "conf", "in", "config", "[", "DOMAIN", "]", ":", "#NEWLINE#", "#INDENT#", "protocol", "=", "(", "'https'", "if", "config", "[", "CONF_SSL", "]", "else", "'http'", ")", "#NEWLINE#", "host_name", "=", "conf", "[", "CONF_HOST", "]", "#NEWLINE#", "server_origin", "=", "f", "'{protocol}://{host_name}'", "#NEWLINE#", "zm_client", "=", "ZoneMinder", "(", "server_origin", ",", "conf", ".", "get", "(", "CONF_USERNAME", ")", ",", "conf", ".", "get", "(", "CONF_PASSWORD", ")", ",", "conf", ".", "get", "(", "CONF_PATH", ")", ",", "conf", ".", "get", "(", "CONF_PATH_ZMS", ")", ",", "conf", ".", "get", "(", "CONF_VERIFY_SSL", ")", ")", "#NEWLINE#", "hass", ".", "data", "[", "DOMAIN", "]", "[", "host_name", "]", "=", "zm_client", "#NEWLINE#", "success", "=", "(", "zm_client", ".", "login", "(", ")", "and", "success", ")", "#NEWLINE#", "#UNINDENT#", "def set_active_state(", "call", ")", ":", "#NEWLINE#", "#INDENT#", "'Set the ZoneMinder run state to the given state name.'", "#NEWLINE#", "zm_id", "=", "call", ".", "data", "[", "ATTR_ID", "]", "#NEWLINE#", "state_name", "=", "call", ".", "data", "[", "ATTR_NAME", "]", "#NEWLINE#", "if", "(", "zm_id", "not in", "hass", ".", "data", "[", "DOMAIN", "]", ")", ":", "#NEWLINE#", "#INDENT#", "_LOGGER", ".", "error", "(", "'Invalid ZoneMinder host provided: %s'", ",", "zm_id", ")", "#NEWLINE#", "#UNINDENT#", "if", "(", "not", "hass", ".", "data", "[", "DOMAIN", "]", "[", "zm_id", "]", ".", "set_active_state", "(", "state_name", ")", ")", ":", "#NEWLINE#", "#INDENT#", "_LOGGER", ".", "error", "(", "'Unable to change ZoneMinder state. Host: %s, state: %s'", ",", "zm_id", ",", "state_name", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "hass", ".", "services", ".", "register", "(", "DOMAIN", ",", "SERVICE_SET_RUN_STATE", ",", "set_active_state", ",", "schema", "=", "SET_RUN_STATE_SCHEMA", ")", "#NEWLINE#", "hass", ".", "async_create_task", "(", "async_load_platform", "(", "hass", ",", "'binary_sensor'", ",", "DOMAIN", ",", "{", "}", ",", "config", ")", ")", "#NEWLINE#", "return", "success"], "edges": [[1, 3, 7, "enum_FIELD"], [8, 9, 7, "enum_FIELD"], [10, 18, 7, "enum_FIELD"], [20, 23, 7, "enum_FIELD"], [27, 26, 7, "enum_FIELD"], [27, 29, 7, "enum_FIELD"], [210, 220, 7, "enum_FIELD"], [227, 231, 7, "enum_FIELD"], [247, 248, 7, "enum_FIELD"], [14, 12, 7, "enum_FIELD"], [14, 15, 7, "enum_FIELD"], [29, 28, 7, "enum_FIELD"], [29, 30, 7, "enum_FIELD"], [34, 39, 7, "enum_FIELD"], [47, 51, 7, "enum_FIELD"], [54, 57, 7, "enum_FIELD"], [59, 79, 7, "enum_FIELD"], [101, 112, 7, "enum_FIELD"], [113, 122, 7, "enum_FIELD"], [132, 133, 7, "enum_FIELD"], [134, 140, 7, "enum_FIELD"], [143, 149, 7, "enum_FIELD"], [153, 156, 7, "enum_FIELD"], [177, 179, 7, "enum_FIELD"], [220, 214, 7, "enum_FIELD"], [231, 229, 7, "enum_FIELD"], [12, 11, 7, "enum_FIELD"], [39, 41, 7, "enum_FIELD"], [39, 38, 7, "enum_FIELD"], [39, 45, 7, "enum_FIELD"], [51, 50, 7, "enum_FIELD"], [51, 52, 7, "enum_FIELD"], [79, 62, 7, "enum_FIELD"], [108, 105, 7, "enum_FIELD"], [108, 109, 7, "enum_FIELD"], [140, 138, 7, "enum_FIELD"], [140, 141, 7, "enum_FIELD"], [149, 147, 7, "enum_FIELD"], [149, 150, 7, "enum_FIELD"], [156, 155, 7, "enum_FIELD"], [166, 172, 7, "enum_FIELD"], [179, 191, 7, "enum_FIELD"], [197, 203, 7, "enum_FIELD"], [214, 212, 7, "enum_FIELD"], [223, 225, 7, "enum_FIELD"], [229, 228, 7, "enum_FIELD"], [237, 232, 7, "enum_FIELD"], [41, 40, 7, "enum_FIELD"], [41, 42, 7, "enum_FIELD"], [69, 67, 7, "enum_FIELD"], [76, 74, 7, "enum_FIELD"], [83, 81, 7, "enum_FIELD"], [90, 88, 7, "enum_FIELD"], [97, 95, 7, "enum_FIELD"], [105, 103, 7, "enum_FIELD"], [105, 106, 7, "enum_FIELD"], [120, 118, 7, "enum_FIELD"], [138, 137, 7, "enum_FIELD"], [147, 146, 7, "enum_FIELD"], [160, 158, 7, "enum_FIELD"], [160, 161, 7, "enum_FIELD"], [172, 168, 7, "enum_FIELD"], [191, 189, 7, "enum_FIELD"], [203, 199, 7, "enum_FIELD"], [212, 211, 7, "enum_FIELD"], [67, 66, 7, "enum_FIELD"], [74, 73, 7, "enum_FIELD"], [81, 80, 7, "enum_FIELD"], [88, 87, 7, "enum_FIELD"], [95, 94, 7, "enum_FIELD"], [103, 102, 7, "enum_FIELD"], [118, 117, 7, "enum_FIELD"], [158, 157, 7, "enum_FIELD"], [168, 167, 7, "enum_FIELD"], [189, 186, 7, "enum_FIELD"], [199, 198, 7, "enum_FIELD"], [186, 183, 7, "enum_FIELD"], [186, 187, 7, "enum_FIELD"], [183, 181, 7, "enum_FIELD"], [183, 184, 7, "enum_FIELD"], [181, 180, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [11, 2, 10, "enum_LAST_LEXICAL_USE"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [28, 4, 10, "enum_LAST_LEXICAL_USE"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [30, 15, 10, "enum_LAST_LEXICAL_USE"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [40, 28, 10, "enum_LAST_LEXICAL_USE"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [50, 26, 10, "enum_LAST_LEXICAL_USE"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [64, 55, 10, "enum_LAST_LEXICAL_USE"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [66, 50, 10, "enum_LAST_LEXICAL_USE"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [73, 66, 10, "enum_LAST_LEXICAL_USE"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [80, 73, 10, "enum_LAST_LEXICAL_USE"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [87, 80, 10, "enum_LAST_LEXICAL_USE"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [94, 87, 10, "enum_LAST_LEXICAL_USE"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [102, 11, 10, "enum_LAST_LEXICAL_USE"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [106, 30, 10, "enum_LAST_LEXICAL_USE"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [109, 48, 10, "enum_LAST_LEXICAL_USE"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [112, 60, 10, "enum_LAST_LEXICAL_USE"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [114, 21, 10, "enum_LAST_LEXICAL_USE"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [117, 112, 10, "enum_LAST_LEXICAL_USE"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [123, 114, 10, "enum_LAST_LEXICAL_USE"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [137, 128, 10, "enum_LAST_LEXICAL_USE"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [146, 137, 10, "enum_LAST_LEXICAL_USE"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [155, 135, 10, "enum_LAST_LEXICAL_USE"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [157, 102, 10, "enum_LAST_LEXICAL_USE"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [161, 106, 10, "enum_LAST_LEXICAL_USE"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [173, 155, 10, "enum_LAST_LEXICAL_USE"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 177, 9, "enum_NEXT_SYNTAX"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [180, 157, 10, "enum_LAST_LEXICAL_USE"], [179, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [184, 161, 10, "enum_LAST_LEXICAL_USE"], [183, 184, 9, "enum_NEXT_SYNTAX"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [187, 173, 10, "enum_LAST_LEXICAL_USE"], [186, 187, 9, "enum_NEXT_SYNTAX"], [187, 188, 9, "enum_NEXT_SYNTAX"], [188, 189, 9, "enum_NEXT_SYNTAX"], [189, 190, 9, "enum_NEXT_SYNTAX"], [190, 191, 9, "enum_NEXT_SYNTAX"], [192, 144, 10, "enum_LAST_LEXICAL_USE"], [191, 192, 9, "enum_NEXT_SYNTAX"], [192, 193, 9, "enum_NEXT_SYNTAX"], [193, 194, 9, "enum_NEXT_SYNTAX"], [194, 195, 9, "enum_NEXT_SYNTAX"], [195, 197, 9, "enum_NEXT_SYNTAX"], [198, 167, 10, "enum_LAST_LEXICAL_USE"], [197, 198, 9, "enum_NEXT_SYNTAX"], [198, 199, 9, "enum_NEXT_SYNTAX"], [199, 200, 9, "enum_NEXT_SYNTAX"], [200, 201, 9, "enum_NEXT_SYNTAX"], [201, 202, 9, "enum_NEXT_SYNTAX"], [202, 203, 9, "enum_NEXT_SYNTAX"], [204, 187, 10, "enum_LAST_LEXICAL_USE"], [203, 204, 9, "enum_NEXT_SYNTAX"], [204, 205, 9, "enum_NEXT_SYNTAX"], [206, 192, 10, "enum_LAST_LEXICAL_USE"], [205, 206, 9, "enum_NEXT_SYNTAX"], [206, 207, 9, "enum_NEXT_SYNTAX"], [207, 210, 9, "enum_NEXT_SYNTAX"], [211, 180, 10, "enum_LAST_LEXICAL_USE"], [210, 211, 9, "enum_NEXT_SYNTAX"], [211, 212, 9, "enum_NEXT_SYNTAX"], [212, 213, 9, "enum_NEXT_SYNTAX"], [213, 214, 9, "enum_NEXT_SYNTAX"], [214, 215, 9, "enum_NEXT_SYNTAX"], [215, 216, 9, "enum_NEXT_SYNTAX"], [217, 184, 10, "enum_LAST_LEXICAL_USE"], [216, 217, 9, "enum_NEXT_SYNTAX"], [217, 218, 9, "enum_NEXT_SYNTAX"], [218, 219, 9, "enum_NEXT_SYNTAX"], [219, 220, 9, "enum_NEXT_SYNTAX"], [220, 221, 9, "enum_NEXT_SYNTAX"], [221, 222, 9, "enum_NEXT_SYNTAX"], [222, 223, 9, "enum_NEXT_SYNTAX"], [223, 224, 9, "enum_NEXT_SYNTAX"], [224, 225, 9, "enum_NEXT_SYNTAX"], [225, 226, 9, "enum_NEXT_SYNTAX"], [226, 227, 9, "enum_NEXT_SYNTAX"], [228, 211, 10, "enum_LAST_LEXICAL_USE"], [227, 228, 9, "enum_NEXT_SYNTAX"], [228, 229, 9, "enum_NEXT_SYNTAX"], [229, 230, 9, "enum_NEXT_SYNTAX"], [230, 231, 9, "enum_NEXT_SYNTAX"], [231, 232, 9, "enum_NEXT_SYNTAX"], [232, 233, 9, "enum_NEXT_SYNTAX"], [234, 228, 10, "enum_LAST_LEXICAL_USE"], [233, 234, 9, "enum_NEXT_SYNTAX"], [234, 235, 9, "enum_NEXT_SYNTAX"], [235, 236, 9, "enum_NEXT_SYNTAX"], [236, 237, 9, "enum_NEXT_SYNTAX"], [238, 217, 10, "enum_LAST_LEXICAL_USE"], [237, 238, 9, "enum_NEXT_SYNTAX"], [238, 239, 9, "enum_NEXT_SYNTAX"], [239, 240, 9, "enum_NEXT_SYNTAX"], [240, 241, 9, "enum_NEXT_SYNTAX"], [241, 242, 9, "enum_NEXT_SYNTAX"], [243, 40, 10, "enum_LAST_LEXICAL_USE"], [242, 243, 9, "enum_NEXT_SYNTAX"], [243, 244, 9, "enum_NEXT_SYNTAX"], [244, 245, 9, "enum_NEXT_SYNTAX"], [245, 247, 9, "enum_NEXT_SYNTAX"], [248, 123, 10, "enum_LAST_LEXICAL_USE"], [247, 248, 9, "enum_NEXT_SYNTAX"], [3, 8, 1, "enum_CFG_NEXT"], [8, 10, 1, "enum_CFG_NEXT"], [10, 20, 1, "enum_CFG_NEXT"], [20, 29, 1, "enum_CFG_NEXT"], [29, 26, 1, "enum_CFG_NEXT"], [26, 34, 1, "enum_CFG_NEXT"], [26, 129, 1, "enum_CFG_NEXT"], [34, 47, 1, "enum_CFG_NEXT"], [47, 54, 1, "enum_CFG_NEXT"], [54, 59, 1, "enum_CFG_NEXT"], [59, 101, 1, "enum_CFG_NEXT"], [101, 113, 1, "enum_CFG_NEXT"], [113, 26, 1, "enum_CFG_NEXT"], [129, 210, 1, "enum_CFG_NEXT"], [132, 134, 1, "enum_CFG_NEXT"], [134, 143, 1, "enum_CFG_NEXT"], [143, 156, 1, "enum_CFG_NEXT"], [156, 166, 1, "enum_CFG_NEXT"], [156, 179, 1, "enum_CFG_NEXT"], [166, 179, 1, "enum_CFG_NEXT"], [179, 197, 1, "enum_CFG_NEXT"], [210, 227, 1, "enum_CFG_NEXT"], [227, 247, 1, "enum_CFG_NEXT"], [11, 2, 3, "enum_LAST_WRITE"], [28, 4, 3, "enum_LAST_WRITE"], [30, 15, 2, "enum_LAST_READ"], [26, 94, 2, "enum_LAST_READ"], [26, 26, 3, "enum_LAST_WRITE"], [40, 40, 2, "enum_LAST_READ"], [40, 28, 2, "enum_LAST_READ"], [40, 4, 3, "enum_LAST_WRITE"], [42, 42, 2, "enum_LAST_READ"], [35, 35, 3, "enum_LAST_WRITE"], [50, 94, 2, "enum_LAST_READ"], [50, 26, 3, "enum_LAST_WRITE"], [52, 52, 2, "enum_LAST_READ"], [48, 109, 2, "enum_LAST_READ"], [48, 48, 3, "enum_LAST_WRITE"], [55, 64, 2, "enum_LAST_READ"], [55, 55, 3, "enum_LAST_WRITE"], [62, 62, 2, "enum_LAST_READ"], [64, 64, 2, "enum_LAST_READ"], [64, 55, 3, "enum_LAST_WRITE"], [66, 50, 2, "enum_LAST_READ"], [66, 26, 3, "enum_LAST_WRITE"], [70, 70, 2, "enum_LAST_READ"], [73, 66, 2, "enum_LAST_READ"], [73, 26, 3, "enum_LAST_WRITE"], [77, 77, 2, "enum_LAST_READ"], [80, 73, 2, "enum_LAST_READ"], [80, 26, 3, "enum_LAST_WRITE"], [84, 84, 2, "enum_LAST_READ"], [87, 80, 2, "enum_LAST_READ"], [87, 26, 3, "enum_LAST_WRITE"], [91, 91, 2, "enum_LAST_READ"], [94, 87, 2, "enum_LAST_READ"], [94, 26, 3, "enum_LAST_WRITE"], [98, 98, 2, "enum_LAST_READ"], [60, 117, 2, "enum_LAST_READ"], [60, 60, 3, "enum_LAST_WRITE"], [112, 117, 2, "enum_LAST_READ"], [112, 60, 3, "enum_LAST_WRITE"], [102, 102, 2, "enum_LAST_READ"], [102, 11, 2, "enum_LAST_READ"], [102, 2, 3, "enum_LAST_WRITE"], [106, 106, 2, "enum_LAST_READ"], [106, 30, 2, "enum_LAST_READ"], [109, 48, 3, "enum_LAST_WRITE"], [117, 112, 2, "enum_LAST_READ"], [117, 60, 3, "enum_LAST_WRITE"], [123, 123, 2, "enum_LAST_READ"], [123, 114, 3, "enum_LAST_WRITE"], [123, 21, 3, "enum_LAST_WRITE"], [114, 123, 2, "enum_LAST_READ"], [114, 114, 3, "enum_LAST_WRITE"], [114, 21, 3, "enum_LAST_WRITE"], [137, 128, 3, "enum_LAST_WRITE"], [146, 137, 2, "enum_LAST_READ"], [146, 128, 3, "enum_LAST_WRITE"], [155, 135, 3, "enum_LAST_WRITE"], [173, 155, 2, "enum_LAST_READ"], [173, 135, 3, "enum_LAST_WRITE"], [180, 157, 2, "enum_LAST_READ"], [184, 161, 2, "enum_LAST_READ"], [187, 173, 2, "enum_LAST_READ"], [187, 155, 2, "enum_LAST_READ"], [187, 135, 3, "enum_LAST_WRITE"], [192, 144, 3, "enum_LAST_WRITE"], [198, 167, 2, "enum_LAST_READ"], [204, 187, 2, "enum_LAST_READ"], [204, 135, 3, "enum_LAST_WRITE"], [206, 192, 2, "enum_LAST_READ"], [206, 144, 3, "enum_LAST_WRITE"], [211, 102, 2, "enum_LAST_READ"], [211, 11, 2, "enum_LAST_READ"], [211, 2, 3, "enum_LAST_WRITE"], [217, 106, 2, "enum_LAST_READ"], [217, 30, 2, "enum_LAST_READ"], [221, 129, 3, "enum_LAST_WRITE"], [228, 211, 2, "enum_LAST_READ"], [228, 2, 3, "enum_LAST_WRITE"], [234, 228, 2, "enum_LAST_READ"], [234, 2, 3, "enum_LAST_WRITE"], [238, 217, 2, "enum_LAST_READ"], [243, 40, 2, "enum_LAST_READ"], [243, 28, 2, "enum_LAST_READ"], [243, 4, 3, "enum_LAST_WRITE"], [248, 123, 2, "enum_LAST_READ"], [248, 114, 3, "enum_LAST_WRITE"], [248, 21, 3, "enum_LAST_WRITE"], [35, 40, 4, "enum_COMPUTED_FROM"], [35, 42, 4, "enum_COMPUTED_FROM"], [48, 50, 4, "enum_COMPUTED_FROM"], [48, 52, 4, "enum_COMPUTED_FROM"], [60, 62, 4, "enum_COMPUTED_FROM"], [60, 64, 4, "enum_COMPUTED_FROM"], [60, 70, 4, "enum_COMPUTED_FROM"], [60, 77, 4, "enum_COMPUTED_FROM"], [60, 84, 4, "enum_COMPUTED_FROM"], [60, 91, 4, "enum_COMPUTED_FROM"], [60, 98, 4, "enum_COMPUTED_FROM"], [60, 66, 4, "enum_COMPUTED_FROM"], [60, 73, 4, "enum_COMPUTED_FROM"], [60, 80, 4, "enum_COMPUTED_FROM"], [60, 87, 4, "enum_COMPUTED_FROM"], [60, 94, 4, "enum_COMPUTED_FROM"], [108, 112, 4, "enum_COMPUTED_FROM"], [114, 123, 4, "enum_COMPUTED_FROM"], [114, 117, 4, "enum_COMPUTED_FROM"], [135, 141, 4, "enum_COMPUTED_FROM"], [135, 137, 4, "enum_COMPUTED_FROM"], [144, 150, 4, "enum_COMPUTED_FROM"], [144, 146, 4, "enum_COMPUTED_FROM"]], "error_location": 40, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/sviete/home-assistant.git", "old_path": "homeassistant/components/zoneminder/__init__.py", "hash": "a6b407d706a0ed00d740a9c50eeb5107acccddc1", "code": "def setup(hass: Any, config: Dict[str, Any]) -> bool:\n    \"\"\"Set up the ZoneMinder component.\"\"\"\n\n    hass.data[DOMAIN] = {}\n\n    success = True\n\n    for conf in config[DOMAIN]:\n        protocol = \"https\" if config[CONF_SSL] else \"http\"\n\n        host_name = conf[CONF_HOST]\n        server_origin = f\"{protocol}://{host_name}\"\n        zm_client = ZoneMinder(\n            server_origin,\n            conf.get(CONF_USERNAME),\n            conf.get(CONF_PASSWORD),\n            conf.get(CONF_PATH),\n            conf.get(CONF_PATH_ZMS),\n            conf.get(CONF_VERIFY_SSL),\n        )\n        hass.data[DOMAIN][host_name] = zm_client\n\n        success = zm_client.login() and success\n\n    def set_active_state(call):\n        \"\"\"Set the ZoneMinder run state to the given state name.\"\"\"\n        zm_id = call.data[ATTR_ID]\n        state_name = call.data[ATTR_NAME]\n        if zm_id not in hass.data[DOMAIN]:\n            _LOGGER.error(\"Invalid ZoneMinder host provided: %s\", zm_id)\n        if not hass.data[DOMAIN][zm_id].set_active_state(state_name):\n            _LOGGER.error(\n                \"Unable to change ZoneMinder state. Host: %s, state: %s\",\n                zm_id,\n                state_name,\n            )\n\n    hass.services.register(\n        DOMAIN, SERVICE_SET_RUN_STATE, set_active_state, schema=SET_RUN_STATE_SCHEMA\n    )\n\n    hass.async_create_task(\n        async_load_platform(hass, \"binary_sensor\", DOMAIN, {}, config)\n    )\n\n    return success\n", "rewrite": "ReplaceText(target='conf' @(61,30)->(61,36))", "error_line": 8, "has_bug": true, "code_full": "import logging\nfrom typing import Any, Dict\n\n_LOGGER = logging.getLogger(__name__)\n\nDOMAIN = ''\nCONF_SSL = ''\nCONF_HOST = ''\nCONF_USERNAME = ''\nCONF_PASSWORD = ''\nCONF_PATH = ''\nCONF_PATH_ZMS = ''\nCONF_VERIFY_SSL = ''\nATTR_ID = ''\nATTR_NAME = ''\nSERVICE_SET_RUN_STATE = ''\nSET_RUN_STATE_SCHEMA: Dict = {}\n\nclass ZoneMinder:\n    def __init__(self, server_origin: str, username: str, password: str, path: str, path_zms: str, verify_ssl: bool):\n        self.server_origin = server_origin\n        self.username = username\n        self.password = password\n        self.path = path\n        self.path_zms = path_zms\n        self.verify_ssl = verify_ssl\n\n    def login(self) -> bool:\n        return True\n\n    def set_active_state(self, state_name: str) -> bool:\n        return True\n\ndef async_load_platform(hass: Any, platform: str, domain: str, config: Dict[str, Any], base_config: Dict[str, Any]):\n    pass\n\ndef setup(hass: Any, config: Dict[str, Any]) -> bool:\n    \"\"\"Set up the ZoneMinder component.\"\"\"\n\n    hass.data[DOMAIN] = {}\n\n    success = True\n\n    for conf in config[DOMAIN]:\n        protocol = \"https\" if config[CONF_SSL] else \"http\"\n\n        host_name = conf[CONF_HOST]\n        server_origin = f\"{protocol}://{host_name}\"\n        zm_client = ZoneMinder(\n            server_origin,\n            conf.get(CONF_USERNAME),\n            conf.get(CONF_PASSWORD),\n            conf.get(CONF_PATH),\n            conf.get(CONF_PATH_ZMS),\n            conf.get(CONF_VERIFY_SSL),\n        )\n        hass.data[DOMAIN][host_name] = zm_client\n\n        success = zm_client.login() and success\n\n    def set_active_state(call):\n        \"\"\"Set the ZoneMinder run state to the given state name.\"\"\"\n        zm_id = call.data[ATTR_ID]\n        state_name = call.data[ATTR_NAME]\n        if zm_id not in hass.data[DOMAIN]:\n            _LOGGER.error(\"Invalid ZoneMinder host provided: %s\", zm_id)\n        if not hass.data[DOMAIN][zm_id].set_active_state(state_name):\n            _LOGGER.error(\n                \"Unable to change ZoneMinder state. Host: %s, state: %s\",\n                zm_id,\n                state_name,\n            )\n\n    hass.services.register(\n        DOMAIN, SERVICE_SET_RUN_STATE, set_active_state, schema=SET_RUN_STATE_SCHEMA\n    )\n\n    hass.async_create_task(\n        async_load_platform(hass, \"binary_sensor\", DOMAIN, {}, config)\n    )\n\n    return success\n", "error_location_char": [208, 214], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def one_document_hypernyms(", "self", ",", "vec", ",", "idx", ",", "hypernyms_count", ")", ":", "#NEWLINE#", "#INDENT#", "local_graph", "=", "[", "]", "#NEWLINE#", "initial_terms", "=", "[", "]", "#NEWLINE#", "hypernyms", "=", "[", "]", "#NEWLINE#", "if", "self", ".", "reversed_wmap", ":", "#NEWLINE#", "#INDENT#", "document", "=", "[", "self", ".", "reversed_wmap", "[", "x", "]", "for", "x", "in", "vec", ".", "tolist", "(", ")", "if", "(", "(", "x", ">", "0", ")", "and", "(", "x", "in", "self", ".", "reversed_wmap", ".", "keys", "(", ")", ")", ")", "]", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "document", "=", "vec", "#NEWLINE#", "#UNINDENT#", "text", "=", "' '", ".", "join", "(", "document", ")", "#NEWLINE#", "doc", "=", "self", ".", "nlp", "(", "text", ")", "#NEWLINE#", "for", "token", "in", "doc", ":", "#NEWLINE#", "#INDENT#", "if", "(", "(", "token", ".", "tag_", "==", "'NNP'", ")", "or", "(", "token", ".", "tag_", "==", "'NN'", ")", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "str", "(", "token", ")", "==", "self", ".", "document_split_symbol", ")", ":", "#NEWLINE#", "#INDENT#", "continue", "#NEWLINE#", "#UNINDENT#", "initial_terms", ".", "append", "(", "str", "(", "token", ")", ")", "#NEWLINE#", "if", "(", "hypernyms_count", "==", "'all'", ")", ":", "#NEWLINE#", "#INDENT#", "out", "=", "self", ".", "add_all_hypernyms", "(", "token", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "isinstance", "(", "hypernyms_count", ",", "int", ")", ":", "#NEWLINE#", "#INDENT#", "out", "=", "self", ".", "add_best_n_hypernyms", "(", "token", ",", "hypernyms_count", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "print", "(", "\"Enter either positive integer or 'all' as the parameter 'hyp'.\"", ")", "#NEWLINE#", "return", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "if", "(", "out", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "hypernyms", ".", "extend", "(", "out", ")", "#NEWLINE#", "for", "h", "in", "hypernyms", ":", "#NEWLINE#", "#INDENT#", "local_graph", ".", "append", "(", "(", "str", "(", "token", ")", ",", "h", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "return", "(", "initial_terms", ",", "idx", ",", "hypernyms", ",", "local_graph", ")"], "edges": [[1, 5, 7, "enum_FIELD"], [12, 15, 7, "enum_FIELD"], [17, 20, 7, "enum_FIELD"], [22, 25, 7, "enum_FIELD"], [32, 30, 7, "enum_FIELD"], [83, 89, 7, "enum_FIELD"], [92, 98, 7, "enum_FIELD"], [104, 103, 7, "enum_FIELD"], [104, 105, 7, "enum_FIELD"], [256, 261, 7, "enum_FIELD"], [30, 29, 7, "enum_FIELD"], [34, 37, 7, "enum_FIELD"], [78, 81, 7, "enum_FIELD"], [89, 87, 7, "enum_FIELD"], [98, 96, 7, "enum_FIELD"], [109, 118, 7, "enum_FIELD"], [37, 41, 7, "enum_FIELD"], [87, 86, 7, "enum_FIELD"], [96, 95, 7, "enum_FIELD"], [130, 136, 7, "enum_FIELD"], [146, 150, 7, "enum_FIELD"], [163, 160, 7, "enum_FIELD"], [215, 218, 7, "enum_FIELD"], [41, 39, 7, "enum_FIELD"], [41, 42, 7, "enum_FIELD"], [46, 45, 7, "enum_FIELD"], [46, 50, 7, "enum_FIELD"], [115, 113, 7, "enum_FIELD"], [123, 121, 7, "enum_FIELD"], [136, 133, 7, "enum_FIELD"], [150, 148, 7, "enum_FIELD"], [160, 159, 7, "enum_FIELD"], [165, 171, 7, "enum_FIELD"], [187, 184, 7, "enum_FIELD"], [218, 217, 7, "enum_FIELD"], [223, 227, 7, "enum_FIELD"], [233, 232, 7, "enum_FIELD"], [233, 234, 7, "enum_FIELD"], [39, 38, 7, "enum_FIELD"], [50, 48, 7, "enum_FIELD"], [113, 112, 7, "enum_FIELD"], [121, 120, 7, "enum_FIELD"], [133, 132, 7, "enum_FIELD"], [138, 137, 7, "enum_FIELD"], [148, 147, 7, "enum_FIELD"], [152, 151, 7, "enum_FIELD"], [171, 169, 7, "enum_FIELD"], [184, 181, 7, "enum_FIELD"], [189, 197, 7, "enum_FIELD"], [205, 207, 7, "enum_FIELD"], [227, 225, 7, "enum_FIELD"], [237, 241, 7, "enum_FIELD"], [48, 47, 7, "enum_FIELD"], [56, 55, 7, "enum_FIELD"], [62, 61, 7, "enum_FIELD"], [169, 168, 7, "enum_FIELD"], [197, 193, 7, "enum_FIELD"], [207, 206, 7, "enum_FIELD"], [225, 224, 7, "enum_FIELD"], [241, 239, 7, "enum_FIELD"], [68, 66, 7, "enum_FIELD"], [193, 192, 7, "enum_FIELD"], [239, 238, 7, "enum_FIELD"], [66, 64, 7, "enum_FIELD"], [244, 243, 7, "enum_FIELD"], [64, 63, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 28, 9, "enum_NEXT_SYNTAX"], [29, 2, 10, "enum_LAST_LEXICAL_USE"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [38, 29, 10, "enum_LAST_LEXICAL_USE"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [45, 42, 10, "enum_LAST_LEXICAL_USE"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [47, 4, 10, "enum_LAST_LEXICAL_USE"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [55, 45, 10, "enum_LAST_LEXICAL_USE"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [61, 55, 10, "enum_LAST_LEXICAL_USE"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [63, 38, 10, "enum_LAST_LEXICAL_USE"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 78, 9, "enum_NEXT_SYNTAX"], [79, 35, 10, "enum_LAST_LEXICAL_USE"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [81, 47, 10, "enum_LAST_LEXICAL_USE"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [90, 79, 10, "enum_LAST_LEXICAL_USE"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [95, 63, 10, "enum_LAST_LEXICAL_USE"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [99, 84, 10, "enum_LAST_LEXICAL_USE"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [105, 93, 10, "enum_LAST_LEXICAL_USE"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [112, 103, 10, "enum_LAST_LEXICAL_USE"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [120, 112, 10, "enum_LAST_LEXICAL_USE"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [134, 120, 10, "enum_LAST_LEXICAL_USE"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [137, 95, 10, "enum_LAST_LEXICAL_USE"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 144, 9, "enum_NEXT_SYNTAX"], [144, 146, 9, "enum_NEXT_SYNTAX"], [147, 18, 10, "enum_LAST_LEXICAL_USE"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [151, 132, 10, "enum_LAST_LEXICAL_USE"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [153, 134, 10, "enum_LAST_LEXICAL_USE"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [159, 8, 10, "enum_LAST_LEXICAL_USE"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [168, 137, 10, "enum_LAST_LEXICAL_USE"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [172, 153, 10, "enum_LAST_LEXICAL_USE"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [183, 159, 10, "enum_LAST_LEXICAL_USE"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 184, 9, "enum_NEXT_SYNTAX"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [187, 189, 9, "enum_NEXT_SYNTAX"], [190, 166, 10, "enum_LAST_LEXICAL_USE"], [189, 190, 9, "enum_NEXT_SYNTAX"], [190, 191, 9, "enum_NEXT_SYNTAX"], [192, 168, 10, "enum_LAST_LEXICAL_USE"], [191, 192, 9, "enum_NEXT_SYNTAX"], [192, 193, 9, "enum_NEXT_SYNTAX"], [193, 194, 9, "enum_NEXT_SYNTAX"], [194, 195, 9, "enum_NEXT_SYNTAX"], [196, 172, 10, "enum_LAST_LEXICAL_USE"], [195, 196, 9, "enum_NEXT_SYNTAX"], [196, 197, 9, "enum_NEXT_SYNTAX"], [198, 183, 10, "enum_LAST_LEXICAL_USE"], [197, 198, 9, "enum_NEXT_SYNTAX"], [198, 199, 9, "enum_NEXT_SYNTAX"], [199, 202, 9, "enum_NEXT_SYNTAX"], [202, 203, 9, "enum_NEXT_SYNTAX"], [203, 205, 9, "enum_NEXT_SYNTAX"], [205, 206, 9, "enum_NEXT_SYNTAX"], [206, 207, 9, "enum_NEXT_SYNTAX"], [207, 208, 9, "enum_NEXT_SYNTAX"], [208, 209, 9, "enum_NEXT_SYNTAX"], [209, 211, 9, "enum_NEXT_SYNTAX"], [211, 215, 9, "enum_NEXT_SYNTAX"], [215, 216, 9, "enum_NEXT_SYNTAX"], [217, 190, 10, "enum_LAST_LEXICAL_USE"], [216, 217, 9, "enum_NEXT_SYNTAX"], [217, 218, 9, "enum_NEXT_SYNTAX"], [218, 219, 9, "enum_NEXT_SYNTAX"], [219, 220, 9, "enum_NEXT_SYNTAX"], [220, 221, 9, "enum_NEXT_SYNTAX"], [221, 223, 9, "enum_NEXT_SYNTAX"], [224, 23, 10, "enum_LAST_LEXICAL_USE"], [223, 224, 9, "enum_NEXT_SYNTAX"], [224, 225, 9, "enum_NEXT_SYNTAX"], [225, 226, 9, "enum_NEXT_SYNTAX"], [226, 227, 9, "enum_NEXT_SYNTAX"], [228, 217, 10, "enum_LAST_LEXICAL_USE"], [227, 228, 9, "enum_NEXT_SYNTAX"], [228, 229, 9, "enum_NEXT_SYNTAX"], [229, 231, 9, "enum_NEXT_SYNTAX"], [231, 232, 9, "enum_NEXT_SYNTAX"], [232, 233, 9, "enum_NEXT_SYNTAX"], [234, 224, 10, "enum_LAST_LEXICAL_USE"], [233, 234, 9, "enum_NEXT_SYNTAX"], [234, 235, 9, "enum_NEXT_SYNTAX"], [235, 237, 9, "enum_NEXT_SYNTAX"], [238, 13, 10, "enum_LAST_LEXICAL_USE"], [237, 238, 9, "enum_NEXT_SYNTAX"], [238, 239, 9, "enum_NEXT_SYNTAX"], [239, 240, 9, "enum_NEXT_SYNTAX"], [240, 241, 9, "enum_NEXT_SYNTAX"], [241, 242, 9, "enum_NEXT_SYNTAX"], [243, 151, 10, "enum_LAST_LEXICAL_USE"], [242, 243, 9, "enum_NEXT_SYNTAX"], [243, 244, 9, "enum_NEXT_SYNTAX"], [245, 196, 10, "enum_LAST_LEXICAL_USE"], [244, 245, 9, "enum_NEXT_SYNTAX"], [245, 246, 9, "enum_NEXT_SYNTAX"], [246, 247, 9, "enum_NEXT_SYNTAX"], [248, 232, 10, "enum_LAST_LEXICAL_USE"], [247, 248, 9, "enum_NEXT_SYNTAX"], [248, 249, 9, "enum_NEXT_SYNTAX"], [249, 250, 9, "enum_NEXT_SYNTAX"], [250, 256, 9, "enum_NEXT_SYNTAX"], [256, 257, 9, "enum_NEXT_SYNTAX"], [258, 147, 10, "enum_LAST_LEXICAL_USE"], [257, 258, 9, "enum_NEXT_SYNTAX"], [258, 259, 9, "enum_NEXT_SYNTAX"], [260, 6, 10, "enum_LAST_LEXICAL_USE"], [259, 260, 9, "enum_NEXT_SYNTAX"], [260, 261, 9, "enum_NEXT_SYNTAX"], [262, 234, 10, "enum_LAST_LEXICAL_USE"], [261, 262, 9, "enum_NEXT_SYNTAX"], [262, 263, 9, "enum_NEXT_SYNTAX"], [264, 238, 10, "enum_LAST_LEXICAL_USE"], [263, 264, 9, "enum_NEXT_SYNTAX"], [264, 265, 9, "enum_NEXT_SYNTAX"], [5, 12, 1, "enum_CFG_NEXT"], [12, 17, 1, "enum_CFG_NEXT"], [17, 22, 1, "enum_CFG_NEXT"], [22, 30, 1, "enum_CFG_NEXT"], [30, 78, 1, "enum_CFG_NEXT"], [30, 34, 1, "enum_CFG_NEXT"], [34, 83, 1, "enum_CFG_NEXT"], [78, 83, 1, "enum_CFG_NEXT"], [83, 92, 1, "enum_CFG_NEXT"], [92, 105, 1, "enum_CFG_NEXT"], [105, 103, 1, "enum_CFG_NEXT"], [103, 118, 1, "enum_CFG_NEXT"], [103, 256, 1, "enum_CFG_NEXT"], [118, 136, 1, "enum_CFG_NEXT"], [118, 103, 1, "enum_CFG_NEXT"], [136, 146, 1, "enum_CFG_NEXT"], [136, 103, 1, "enum_CFG_NEXT"], [146, 160, 1, "enum_CFG_NEXT"], [160, 184, 1, "enum_CFG_NEXT"], [160, 165, 1, "enum_CFG_NEXT"], [165, 218, 1, "enum_CFG_NEXT"], [184, 189, 1, "enum_CFG_NEXT"], [184, 205, 1, "enum_CFG_NEXT"], [189, 218, 1, "enum_CFG_NEXT"], [205, 211, 1, "enum_CFG_NEXT"], [218, 103, 1, "enum_CFG_NEXT"], [218, 223, 1, "enum_CFG_NEXT"], [223, 234, 1, "enum_CFG_NEXT"], [234, 232, 1, "enum_CFG_NEXT"], [232, 103, 1, "enum_CFG_NEXT"], [232, 237, 1, "enum_CFG_NEXT"], [237, 232, 1, "enum_CFG_NEXT"], [29, 2, 3, "enum_LAST_WRITE"], [38, 29, 2, "enum_LAST_READ"], [38, 2, 3, "enum_LAST_WRITE"], [45, 42, 2, "enum_LAST_READ"], [47, 4, 3, "enum_LAST_WRITE"], [55, 42, 2, "enum_LAST_READ"], [55, 45, 3, "enum_LAST_WRITE"], [61, 55, 2, "enum_LAST_READ"], [61, 45, 3, "enum_LAST_WRITE"], [63, 38, 2, "enum_LAST_READ"], [63, 2, 3, "enum_LAST_WRITE"], [81, 4, 3, "enum_LAST_WRITE"], [90, 35, 3, "enum_LAST_WRITE"], [90, 79, 3, "enum_LAST_WRITE"], [95, 29, 2, "enum_LAST_READ"], [95, 63, 2, "enum_LAST_READ"], [95, 2, 3, "enum_LAST_WRITE"], [99, 84, 3, "enum_LAST_WRITE"], [105, 93, 3, "enum_LAST_WRITE"], [103, 172, 2, "enum_LAST_READ"], [103, 134, 2, "enum_LAST_READ"], [103, 245, 2, "enum_LAST_READ"], [103, 120, 2, "enum_LAST_READ"], [103, 196, 2, "enum_LAST_READ"], [103, 103, 3, "enum_LAST_WRITE"], [112, 172, 2, "enum_LAST_READ"], [112, 134, 2, "enum_LAST_READ"], [112, 245, 2, "enum_LAST_READ"], [112, 120, 2, "enum_LAST_READ"], [112, 196, 2, "enum_LAST_READ"], [112, 103, 3, "enum_LAST_WRITE"], [120, 112, 2, "enum_LAST_READ"], [120, 103, 3, "enum_LAST_WRITE"], [132, 151, 2, "enum_LAST_READ"], [132, 132, 2, "enum_LAST_READ"], [132, 243, 2, "enum_LAST_READ"], [134, 120, 2, "enum_LAST_READ"], [134, 103, 3, "enum_LAST_WRITE"], [137, 137, 2, "enum_LAST_READ"], [137, 168, 2, "enum_LAST_READ"], [137, 192, 2, "enum_LAST_READ"], [137, 95, 2, "enum_LAST_READ"], [137, 2, 3, "enum_LAST_WRITE"], [147, 147, 2, "enum_LAST_READ"], [147, 18, 3, "enum_LAST_WRITE"], [151, 132, 2, "enum_LAST_READ"], [153, 134, 2, "enum_LAST_READ"], [153, 103, 3, "enum_LAST_WRITE"], [159, 159, 2, "enum_LAST_READ"], [159, 198, 2, "enum_LAST_READ"], [159, 8, 3, "enum_LAST_WRITE"], [168, 137, 2, "enum_LAST_READ"], [168, 2, 3, "enum_LAST_WRITE"], [172, 153, 2, "enum_LAST_READ"], [172, 103, 3, "enum_LAST_WRITE"], [166, 228, 2, "enum_LAST_READ"], [166, 217, 2, "enum_LAST_READ"], [166, 166, 3, "enum_LAST_WRITE"], [166, 190, 3, "enum_LAST_WRITE"], [181, 181, 2, "enum_LAST_READ"], [183, 159, 2, "enum_LAST_READ"], [183, 8, 3, "enum_LAST_WRITE"], [185, 185, 2, "enum_LAST_READ"], [192, 137, 2, "enum_LAST_READ"], [192, 2, 3, "enum_LAST_WRITE"], [196, 153, 2, "enum_LAST_READ"], [196, 103, 3, "enum_LAST_WRITE"], [198, 183, 2, "enum_LAST_READ"], [198, 8, 3, "enum_LAST_WRITE"], [190, 228, 2, "enum_LAST_READ"], [190, 217, 2, "enum_LAST_READ"], [190, 166, 3, "enum_LAST_WRITE"], [190, 190, 3, "enum_LAST_WRITE"], [217, 228, 2, "enum_LAST_READ"], [217, 217, 2, "enum_LAST_READ"], [217, 166, 3, "enum_LAST_WRITE"], [217, 190, 3, "enum_LAST_WRITE"], [224, 234, 2, "enum_LAST_READ"], [224, 23, 3, "enum_LAST_WRITE"], [228, 217, 2, "enum_LAST_READ"], [228, 166, 3, "enum_LAST_WRITE"], [228, 190, 3, "enum_LAST_WRITE"], [234, 224, 2, "enum_LAST_READ"], [234, 23, 3, "enum_LAST_WRITE"], [232, 248, 2, "enum_LAST_READ"], [232, 232, 3, "enum_LAST_WRITE"], [238, 238, 2, "enum_LAST_READ"], [238, 13, 3, "enum_LAST_WRITE"], [243, 151, 2, "enum_LAST_READ"], [243, 243, 2, "enum_LAST_READ"], [245, 172, 2, "enum_LAST_READ"], [245, 196, 2, "enum_LAST_READ"], [245, 245, 2, "enum_LAST_READ"], [245, 103, 3, "enum_LAST_WRITE"], [248, 248, 2, "enum_LAST_READ"], [248, 232, 3, "enum_LAST_WRITE"], [258, 147, 2, "enum_LAST_READ"], [258, 18, 3, "enum_LAST_WRITE"], [260, 6, 3, "enum_LAST_WRITE"], [262, 234, 2, "enum_LAST_READ"], [262, 23, 3, "enum_LAST_WRITE"], [264, 238, 2, "enum_LAST_READ"], [264, 13, 3, "enum_LAST_WRITE"], [84, 90, 4, "enum_COMPUTED_FROM"], [93, 99, 4, "enum_COMPUTED_FROM"], [93, 95, 4, "enum_COMPUTED_FROM"], [35, 42, 4, "enum_COMPUTED_FROM"], [35, 45, 4, "enum_COMPUTED_FROM"], [35, 38, 4, "enum_COMPUTED_FROM"], [35, 47, 4, "enum_COMPUTED_FROM"], [35, 55, 4, "enum_COMPUTED_FROM"], [35, 61, 4, "enum_COMPUTED_FROM"], [35, 63, 4, "enum_COMPUTED_FROM"], [79, 81, 4, "enum_COMPUTED_FROM"], [166, 172, 4, "enum_COMPUTED_FROM"], [166, 168, 4, "enum_COMPUTED_FROM"], [190, 196, 4, "enum_COMPUTED_FROM"], [190, 198, 4, "enum_COMPUTED_FROM"], [190, 192, 4, "enum_COMPUTED_FROM"]], "error_location": 234, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/skblaz/tax2vec.git", "old_path": "tax2vec/__init__.py", "hash": "722d18184211d2f1e4934cdac4464be2a37de869", "code": "def one_document_hypernyms(self, vec: Any, idx: int, hypernyms_count: Union[int, str]) -> Any:\n    local_graph: List[Tuple[str, str]] = []\n    initial_terms: List[str] = []\n    hypernyms: List[str] = []\n\n    if self.reversed_wmap:\n        document: List[str] = [self.reversed_wmap[x] for x in vec.tolist(\n        ) if x > 0 and x in self.reversed_wmap.keys()]\n    else:\n        document = vec\n\n    text: str = ' '.join(document)\n    doc: Any = self.nlp(text)\n\n    for token in doc:\n        if token.tag_ == 'NNP' or token.tag_ == 'NN':\n            if str(token) == self.document_split_symbol:\n                continue\n            initial_terms.append(str(token))\n\n            if hypernyms_count == 'all':  # add all hypernyms of given word\n                out: Optional[List[str]] = self.add_all_hypernyms(token)\n            elif isinstance(hypernyms_count, int):  # add just the best hypernym\n                out: Optional[List[str]] = self.add_best_n_hypernyms(token, hypernyms_count)\n            else:\n                print(\n                    \"Enter either positive integer or 'all' as the parameter 'hyp'.\")\n                return\n\n            if out is not None:\n                hypernyms.extend(out)\n                for h in hypernyms:\n                    local_graph.append((str(token), h))\n\n    return initial_terms, idx, hypernyms, local_graph\n", "rewrite": "ReplaceText(target='out' @(373,29)->(373,38))", "error_line": 31, "has_bug": true, "code_full": "from typing import Any, Dict, List, Optional, Tuple, Union\n\n\nclass Class:\n    nlp: Any\n    reversed_wmap: Dict[Any, str]\n    document_split_symbol: str\n\n    def add_all_hypernyms(self, token) -> Optional[List[str]]:\n        return []\n    \n    def add_best_n_hypernyms(self, token, n: int) -> Optional[List[str]]:\n        return []\n\n    def one_document_hypernyms(self, vec: Any, idx: int, hypernyms_count: Union[int, str]) -> Any:\n        local_graph: List[Tuple[str, str]] = []\n        initial_terms: List[str] = []\n        hypernyms: List[str] = []\n\n        if self.reversed_wmap:\n            document: List[str] = [self.reversed_wmap[x] for x in vec.tolist(\n            ) if x > 0 and x in self.reversed_wmap.keys()]\n        else:\n            document = vec\n\n        text: str = ' '.join(document)\n        doc: Any = self.nlp(text)\n\n        for token in doc:\n            if token.tag_ == 'NNP' or token.tag_ == 'NN':\n                if str(token) == self.document_split_symbol:\n                    continue\n                initial_terms.append(str(token))\n\n                if hypernyms_count == 'all':  # add all hypernyms of given word\n                    out: Optional[List[str]] = self.add_all_hypernyms(token)\n                elif isinstance(hypernyms_count, int):  # add just the best hypernym\n                    out: Optional[List[str]] = self.add_best_n_hypernyms(token, hypernyms_count)\n                else:\n                    print(\n                        \"Enter either positive integer or 'all' as the parameter 'hyp'.\")\n                    return\n\n                if out is not None:\n                    hypernyms.extend(out)\n                    for h in hypernyms:\n                        local_graph.append((str(token), h))\n\n        return initial_terms, idx, hypernyms, local_graph\n", "error_location_char": [1233, 1242], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def get_proxy(", "self", ",", "filter_opts", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "_validate_filter_opts", "(", "filter_opts", ")", "#NEWLINE#", "combined_filter_opts", "=", "dict", "(", ")", "#NEWLINE#", "self", ".", "_extend_filter", "(", "combined_filter_opts", ",", "self", ".", "_filter_opts", ")", "#NEWLINE#", "self", ".", "_extend_filter", "(", "combined_filter_opts", ",", "filter_opts", ")", "#NEWLINE#", "self", ".", "_refresh_resources", "(", "False", ")", "#NEWLINE#", "return", "self", ".", "_store", ".", "get_proxy", "(", "filter_opts", ",", "self", ".", "_blacklist", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [10, 14, 7, "enum_FIELD"], [17, 21, 7, "enum_FIELD"], [23, 29, 7, "enum_FIELD"], [34, 40, 7, "enum_FIELD"], [43, 47, 7, "enum_FIELD"], [51, 59, 7, "enum_FIELD"], [14, 12, 7, "enum_FIELD"], [21, 20, 7, "enum_FIELD"], [29, 25, 7, "enum_FIELD"], [40, 36, 7, "enum_FIELD"], [47, 45, 7, "enum_FIELD"], [59, 55, 7, "enum_FIELD"], [12, 11, 7, "enum_FIELD"], [25, 24, 7, "enum_FIELD"], [31, 30, 7, "enum_FIELD"], [36, 35, 7, "enum_FIELD"], [45, 44, 7, "enum_FIELD"], [55, 53, 7, "enum_FIELD"], [61, 60, 7, "enum_FIELD"], [53, 52, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 10, 9, "enum_NEXT_SYNTAX"], [11, 2, 10, "enum_LAST_LEXICAL_USE"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [15, 4, 10, "enum_LAST_LEXICAL_USE"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [24, 11, 10, "enum_LAST_LEXICAL_USE"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [28, 18, 10, "enum_LAST_LEXICAL_USE"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [30, 24, 10, "enum_LAST_LEXICAL_USE"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [35, 30, 10, "enum_LAST_LEXICAL_USE"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [39, 28, 10, "enum_LAST_LEXICAL_USE"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [41, 15, 10, "enum_LAST_LEXICAL_USE"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [44, 35, 10, "enum_LAST_LEXICAL_USE"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 51, 9, "enum_NEXT_SYNTAX"], [52, 44, 10, "enum_LAST_LEXICAL_USE"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [58, 41, 10, "enum_LAST_LEXICAL_USE"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [60, 52, 10, "enum_LAST_LEXICAL_USE"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [6, 1, 1, "enum_CFG_NEXT"], [3, 10, 1, "enum_CFG_NEXT"], [10, 17, 1, "enum_CFG_NEXT"], [17, 23, 1, "enum_CFG_NEXT"], [23, 34, 1, "enum_CFG_NEXT"], [34, 43, 1, "enum_CFG_NEXT"], [43, 51, 1, "enum_CFG_NEXT"], [11, 2, 3, "enum_LAST_WRITE"], [15, 4, 3, "enum_LAST_WRITE"], [24, 11, 2, "enum_LAST_READ"], [24, 2, 3, "enum_LAST_WRITE"], [28, 18, 3, "enum_LAST_WRITE"], [30, 24, 2, "enum_LAST_READ"], [30, 2, 3, "enum_LAST_WRITE"], [35, 30, 2, "enum_LAST_READ"], [35, 2, 3, "enum_LAST_WRITE"], [39, 28, 2, "enum_LAST_READ"], [39, 18, 3, "enum_LAST_WRITE"], [41, 15, 2, "enum_LAST_READ"], [41, 4, 3, "enum_LAST_WRITE"], [44, 35, 2, "enum_LAST_READ"], [44, 2, 3, "enum_LAST_WRITE"], [52, 44, 2, "enum_LAST_READ"], [52, 2, 3, "enum_LAST_WRITE"], [58, 41, 2, "enum_LAST_READ"], [58, 4, 3, "enum_LAST_WRITE"], [60, 52, 2, "enum_LAST_READ"], [60, 2, 3, "enum_LAST_WRITE"], [18, 20, 4, "enum_COMPUTED_FROM"]], "error_location": 58, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/hyan15/proxyscrape.git", "old_path": "proxyscrape/proxyscrape.py", "hash": "14c34e8e90643885f1839878b3ac55f4b51bcd29", "code": "def get_proxy(self, filter_opts=None):\n    self._validate_filter_opts(filter_opts)\n\n    combined_filter_opts: Dict = dict()\n    self._extend_filter(combined_filter_opts, self._filter_opts)\n    self._extend_filter(combined_filter_opts, filter_opts)\n\n    self._refresh_resources(False)\n    return self._store.get_proxy(filter_opts, self._blacklist)\n", "rewrite": "ReplaceText(target='combined_filter_opts' @(241,37)->(241,48))", "error_line": 8, "has_bug": true, "code_full": "from typing import Any, Dict, Optional, Set\n\n\nclass Store:\n    def get_proxy(self, filter_opts: Optional[Dict], blacklist: Optional[Dict]):\n        pass\n\n\nclass Class:\n    _filter_opts: Dict\n    _store: Any\n    _blacklist: Set\n\n    def _validate_filter_opts(self, filter_opts: Optional[Dict]):\n        pass\n\n    def _extend_filter(self, existing_filter_opts: Dict, new_filter_opts: Optional[Dict]):\n        pass\n    \n    def _refresh_resources(self, force: bool):\n        pass\n\n    def get_proxy(self, filter_opts=None):\n        self._validate_filter_opts(filter_opts)\n\n        combined_filter_opts: Dict = dict()\n        self._extend_filter(combined_filter_opts, self._filter_opts)\n        self._extend_filter(combined_filter_opts, filter_opts)\n\n        self._refresh_resources(False)\n        return self._store.get_proxy(filter_opts, self._blacklist)\n", "error_location_char": [317, 328], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def index(", "request", ")", ":", "#NEWLINE#", "#INDENT#", "'Renders the contact form.'", "#NEWLINE#", "page", "=", "request", ".", "page", "#NEWLINE#", "content", "=", "page", ".", "content", "#NEWLINE#", "ContactForm", "=", "CONTACT_FORMS", "[", "content", ".", "form_type", "]", "#NEWLINE#", "if", "(", "request", ".", "method", "==", "'POST'", ")", ":", "#NEWLINE#", "#INDENT#", "contact_form", "=", "ContactForm", "(", "request", ".", "POST", ")", "#NEWLINE#", "if", "contact_form", ".", "is_valid", "(", ")", ":", "#NEWLINE#", "#INDENT#", "cleaned_data", "=", "contact_form", ".", "cleaned_data", "#NEWLINE#", "subject", "=", "content", ".", "confirmation_subject", "#NEWLINE#", "name", "=", "contact_form", ".", "cleaned_data", "[", "'name'", "]", "#NEWLINE#", "email", "=", "contact_form", ".", "cleaned_data", "[", "'email'", "]", "#NEWLINE#", "sender", "=", "(", "'%s <%s>'", "%", "(", "name", ",", "email", ")", ")", "#NEWLINE#", "recipient", "=", "content", ".", "send_to", "#NEWLINE#", "messages", "=", "[", "]", "#NEWLINE#", "data", "=", "[", "(", "field", ".", "label", ",", "cleaned_data", "[", "field", ".", "name", "]", ")", "for", "field", "in", "contact_form", "]", "#NEWLINE#", "notification_context", "=", "{", "'name'", ":", "name", ",", "'email'", ":", "email", ",", "'data'", ":", "data", "}", "#NEWLINE#", "notification_message", "=", "template", ".", "loader", ".", "render_to_string", "(", "'contact/notification.txt'", ",", "notification_context", ",", "template", ".", "RequestContext", "(", "request", ")", ")", "#NEWLINE#", "messages", ".", "append", "(", "mail", ".", "EmailMessage", "(", "subject", ",", "notification_message", ",", "settings", ".", "DEFAULT_FROM_EMAIL", ",", "[", "recipient", "]", ",", "headers", "=", "{", "'Reply-To'", ":", "sender", "}", ")", ")", "#NEWLINE#", "confirmation_context", "=", "template", ".", "RequestContext", "(", "request", ",", "contact_form", ".", "cleaned_data", ")", "#NEWLINE#", "confirmation_email", "=", "template", ".", "Template", "(", "content", ".", "confirmation_message", ")", "#NEWLINE#", "confirmation_message", "=", "confirmation_email", ".", "render", "(", "confirmation_context", ")", "#NEWLINE#", "messages", ".", "append", "(", "mail", ".", "EmailMessage", "(", "subject", ",", "confirmation_message", ",", "settings", ".", "DEFAULT_FROM_EMAIL", ",", "[", "sender", "]", ")", ")", "#NEWLINE#", "connection", "=", "mail", ".", "SMTPConnection", "(", ")", "#NEWLINE#", "connection", ".", "send_messages", "(", "messages", ")", "#NEWLINE#", "return", "redirect", "(", "content", ".", "reverse", "(", "'message_sent'", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "contact_form", "=", "ContactForm", "(", ")", "#NEWLINE#", "#UNINDENT#", "context", "=", "{", "'contact_form'", ":", "contact_form", "}", "#NEWLINE#", "return", "page", ".", "render_to_response", "(", "request", ",", "'contact/index.html'", ",", "context", ")"], "edges": [[6, 7, 7, "enum_FIELD"], [8, 12, 7, "enum_FIELD"], [14, 18, 7, "enum_FIELD"], [20, 24, 7, "enum_FIELD"], [38, 35, 7, "enum_FIELD"], [292, 297, 7, "enum_FIELD"], [301, 307, 7, "enum_FIELD"], [12, 11, 7, "enum_FIELD"], [18, 17, 7, "enum_FIELD"], [24, 23, 7, "enum_FIELD"], [24, 26, 7, "enum_FIELD"], [35, 33, 7, "enum_FIELD"], [40, 44, 7, "enum_FIELD"], [50, 54, 7, "enum_FIELD"], [285, 289, 7, "enum_FIELD"], [307, 303, 7, "enum_FIELD"], [26, 25, 7, "enum_FIELD"], [33, 32, 7, "enum_FIELD"], [44, 43, 7, "enum_FIELD"], [54, 52, 7, "enum_FIELD"], [58, 62, 7, "enum_FIELD"], [64, 68, 7, "enum_FIELD"], [70, 76, 7, "enum_FIELD"], [79, 85, 7, "enum_FIELD"], [88, 93, 7, "enum_FIELD"], [100, 104, 7, "enum_FIELD"], [106, 109, 7, "enum_FIELD"], [111, 114, 7, "enum_FIELD"], [132, 141, 7, "enum_FIELD"], [148, 158, 7, "enum_FIELD"], [168, 172, 7, "enum_FIELD"], [198, 206, 7, "enum_FIELD"], [211, 217, 7, "enum_FIELD"], [222, 228, 7, "enum_FIELD"], [231, 235, 7, "enum_FIELD"], [253, 259, 7, "enum_FIELD"], [261, 265, 7, "enum_FIELD"], [269, 271, 7, "enum_FIELD"], [289, 288, 7, "enum_FIELD"], [303, 302, 7, "enum_FIELD"], [46, 45, 7, "enum_FIELD"], [52, 51, 7, "enum_FIELD"], [62, 61, 7, "enum_FIELD"], [68, 67, 7, "enum_FIELD"], [76, 74, 7, "enum_FIELD"], [76, 77, 7, "enum_FIELD"], [85, 83, 7, "enum_FIELD"], [85, 86, 7, "enum_FIELD"], [93, 92, 7, "enum_FIELD"], [93, 96, 7, "enum_FIELD"], [104, 103, 7, "enum_FIELD"], [114, 119, 7, "enum_FIELD"], [158, 154, 7, "enum_FIELD"], [172, 170, 7, "enum_FIELD"], [206, 202, 7, "enum_FIELD"], [217, 215, 7, "enum_FIELD"], [228, 226, 7, "enum_FIELD"], [235, 233, 7, "enum_FIELD"], [259, 257, 7, "enum_FIELD"], [265, 263, 7, "enum_FIELD"], [271, 270, 7, "enum_FIELD"], [74, 73, 7, "enum_FIELD"], [83, 82, 7, "enum_FIELD"], [127, 128, 7, "enum_FIELD"], [127, 130, 7, "enum_FIELD"], [154, 152, 7, "enum_FIELD"], [164, 162, 7, "enum_FIELD"], [170, 169, 7, "enum_FIELD"], [180, 174, 7, "enum_FIELD"], [202, 201, 7, "enum_FIELD"], [208, 207, 7, "enum_FIELD"], [215, 214, 7, "enum_FIELD"], [219, 218, 7, "enum_FIELD"], [226, 225, 7, "enum_FIELD"], [233, 232, 7, "enum_FIELD"], [243, 237, 7, "enum_FIELD"], [257, 256, 7, "enum_FIELD"], [263, 262, 7, "enum_FIELD"], [275, 273, 7, "enum_FIELD"], [117, 116, 7, "enum_FIELD"], [121, 120, 7, "enum_FIELD"], [121, 123, 7, "enum_FIELD"], [152, 151, 7, "enum_FIELD"], [162, 161, 7, "enum_FIELD"], [174, 173, 7, "enum_FIELD"], [182, 181, 7, "enum_FIELD"], [189, 193, 7, "enum_FIELD"], [237, 236, 7, "enum_FIELD"], [245, 244, 7, "enum_FIELD"], [273, 272, 7, "enum_FIELD"], [123, 122, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [11, 2, 10, "enum_LAST_LEXICAL_USE"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [17, 9, 10, "enum_LAST_LEXICAL_USE"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [25, 15, 10, "enum_LAST_LEXICAL_USE"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [32, 11, 10, "enum_LAST_LEXICAL_USE"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [43, 21, 10, "enum_LAST_LEXICAL_USE"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [45, 32, 10, "enum_LAST_LEXICAL_USE"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 50, 9, "enum_NEXT_SYNTAX"], [51, 41, 10, "enum_LAST_LEXICAL_USE"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [61, 51, 10, "enum_LAST_LEXICAL_USE"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [67, 25, 10, "enum_LAST_LEXICAL_USE"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [73, 61, 10, "enum_LAST_LEXICAL_USE"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [82, 73, 10, "enum_LAST_LEXICAL_USE"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [95, 71, 10, "enum_LAST_LEXICAL_USE"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [97, 80, 10, "enum_LAST_LEXICAL_USE"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [103, 67, 10, "enum_LAST_LEXICAL_USE"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [120, 59, 10, "enum_LAST_LEXICAL_USE"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [122, 116, 10, "enum_LAST_LEXICAL_USE"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [128, 122, 10, "enum_LAST_LEXICAL_USE"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [130, 82, 10, "enum_LAST_LEXICAL_USE"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [138, 95, 10, "enum_LAST_LEXICAL_USE"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [142, 97, 10, "enum_LAST_LEXICAL_USE"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [146, 112, 10, "enum_LAST_LEXICAL_USE"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [159, 133, 10, "enum_LAST_LEXICAL_USE"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [161, 151, 10, "enum_LAST_LEXICAL_USE"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [165, 45, 10, "enum_LAST_LEXICAL_USE"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [169, 107, 10, "enum_LAST_LEXICAL_USE"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [175, 176, 9, "enum_NEXT_SYNTAX"], [177, 65, 10, "enum_LAST_LEXICAL_USE"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 178, 9, "enum_NEXT_SYNTAX"], [179, 149, 10, "enum_LAST_LEXICAL_USE"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 184, 9, "enum_NEXT_SYNTAX"], [184, 185, 9, "enum_NEXT_SYNTAX"], [186, 101, 10, "enum_LAST_LEXICAL_USE"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [187, 188, 9, "enum_NEXT_SYNTAX"], [188, 189, 9, "enum_NEXT_SYNTAX"], [189, 190, 9, "enum_NEXT_SYNTAX"], [190, 191, 9, "enum_NEXT_SYNTAX"], [191, 192, 9, "enum_NEXT_SYNTAX"], [192, 193, 9, "enum_NEXT_SYNTAX"], [194, 89, 10, "enum_LAST_LEXICAL_USE"], [193, 194, 9, "enum_NEXT_SYNTAX"], [194, 195, 9, "enum_NEXT_SYNTAX"], [195, 196, 9, "enum_NEXT_SYNTAX"], [196, 197, 9, "enum_NEXT_SYNTAX"], [197, 198, 9, "enum_NEXT_SYNTAX"], [198, 199, 9, "enum_NEXT_SYNTAX"], [199, 200, 9, "enum_NEXT_SYNTAX"], [201, 161, 10, "enum_LAST_LEXICAL_USE"], [200, 201, 9, "enum_NEXT_SYNTAX"], [201, 202, 9, "enum_NEXT_SYNTAX"], [202, 203, 9, "enum_NEXT_SYNTAX"], [203, 204, 9, "enum_NEXT_SYNTAX"], [205, 165, 10, "enum_LAST_LEXICAL_USE"], [204, 205, 9, "enum_NEXT_SYNTAX"], [205, 206, 9, "enum_NEXT_SYNTAX"], [207, 130, 10, "enum_LAST_LEXICAL_USE"], [206, 207, 9, "enum_NEXT_SYNTAX"], [207, 208, 9, "enum_NEXT_SYNTAX"], [208, 209, 9, "enum_NEXT_SYNTAX"], [209, 210, 9, "enum_NEXT_SYNTAX"], [210, 211, 9, "enum_NEXT_SYNTAX"], [211, 212, 9, "enum_NEXT_SYNTAX"], [212, 213, 9, "enum_NEXT_SYNTAX"], [214, 201, 10, "enum_LAST_LEXICAL_USE"], [213, 214, 9, "enum_NEXT_SYNTAX"], [214, 215, 9, "enum_NEXT_SYNTAX"], [215, 216, 9, "enum_NEXT_SYNTAX"], [216, 217, 9, "enum_NEXT_SYNTAX"], [218, 103, 10, "enum_LAST_LEXICAL_USE"], [217, 218, 9, "enum_NEXT_SYNTAX"], [218, 219, 9, "enum_NEXT_SYNTAX"], [219, 220, 9, "enum_NEXT_SYNTAX"], [220, 221, 9, "enum_NEXT_SYNTAX"], [221, 222, 9, "enum_NEXT_SYNTAX"], [222, 223, 9, "enum_NEXT_SYNTAX"], [223, 224, 9, "enum_NEXT_SYNTAX"], [225, 212, 10, "enum_LAST_LEXICAL_USE"], [224, 225, 9, "enum_NEXT_SYNTAX"], [225, 226, 9, "enum_NEXT_SYNTAX"], [226, 227, 9, "enum_NEXT_SYNTAX"], [227, 228, 9, "enum_NEXT_SYNTAX"], [229, 199, 10, "enum_LAST_LEXICAL_USE"], [228, 229, 9, "enum_NEXT_SYNTAX"], [229, 230, 9, "enum_NEXT_SYNTAX"], [230, 231, 9, "enum_NEXT_SYNTAX"], [232, 169, 10, "enum_LAST_LEXICAL_USE"], [231, 232, 9, "enum_NEXT_SYNTAX"], [232, 233, 9, "enum_NEXT_SYNTAX"], [233, 234, 9, "enum_NEXT_SYNTAX"], [234, 235, 9, "enum_NEXT_SYNTAX"], [236, 173, 10, "enum_LAST_LEXICAL_USE"], [235, 236, 9, "enum_NEXT_SYNTAX"], [236, 237, 9, "enum_NEXT_SYNTAX"], [237, 238, 9, "enum_NEXT_SYNTAX"], [238, 239, 9, "enum_NEXT_SYNTAX"], [240, 177, 10, "enum_LAST_LEXICAL_USE"], [239, 240, 9, "enum_NEXT_SYNTAX"], [240, 241, 9, "enum_NEXT_SYNTAX"], [242, 223, 10, "enum_LAST_LEXICAL_USE"], [241, 242, 9, "enum_NEXT_SYNTAX"], [242, 243, 9, "enum_NEXT_SYNTAX"], [244, 181, 10, "enum_LAST_LEXICAL_USE"], [243, 244, 9, "enum_NEXT_SYNTAX"], [244, 245, 9, "enum_NEXT_SYNTAX"], [245, 246, 9, "enum_NEXT_SYNTAX"], [246, 247, 9, "enum_NEXT_SYNTAX"], [247, 248, 9, "enum_NEXT_SYNTAX"], [249, 194, 10, "enum_LAST_LEXICAL_USE"], [248, 249, 9, "enum_NEXT_SYNTAX"], [249, 250, 9, "enum_NEXT_SYNTAX"], [250, 251, 9, "enum_NEXT_SYNTAX"], [251, 252, 9, "enum_NEXT_SYNTAX"], [252, 253, 9, "enum_NEXT_SYNTAX"], [253, 254, 9, "enum_NEXT_SYNTAX"], [254, 255, 9, "enum_NEXT_SYNTAX"], [256, 236, 10, "enum_LAST_LEXICAL_USE"], [255, 256, 9, "enum_NEXT_SYNTAX"], [256, 257, 9, "enum_NEXT_SYNTAX"], [257, 258, 9, "enum_NEXT_SYNTAX"], [258, 259, 9, "enum_NEXT_SYNTAX"], [259, 260, 9, "enum_NEXT_SYNTAX"], [260, 261, 9, "enum_NEXT_SYNTAX"], [262, 254, 10, "enum_LAST_LEXICAL_USE"], [261, 262, 9, "enum_NEXT_SYNTAX"], [262, 263, 9, "enum_NEXT_SYNTAX"], [263, 264, 9, "enum_NEXT_SYNTAX"], [264, 265, 9, "enum_NEXT_SYNTAX"], [266, 232, 10, "enum_LAST_LEXICAL_USE"], [265, 266, 9, "enum_NEXT_SYNTAX"], [266, 267, 9, "enum_NEXT_SYNTAX"], [267, 269, 9, "enum_NEXT_SYNTAX"], [269, 270, 9, "enum_NEXT_SYNTAX"], [270, 271, 9, "enum_NEXT_SYNTAX"], [272, 218, 10, "enum_LAST_LEXICAL_USE"], [271, 272, 9, "enum_NEXT_SYNTAX"], [272, 273, 9, "enum_NEXT_SYNTAX"], [273, 274, 9, "enum_NEXT_SYNTAX"], [274, 275, 9, "enum_NEXT_SYNTAX"], [275, 276, 9, "enum_NEXT_SYNTAX"], [276, 277, 9, "enum_NEXT_SYNTAX"], [277, 278, 9, "enum_NEXT_SYNTAX"], [278, 282, 9, "enum_NEXT_SYNTAX"], [282, 283, 9, "enum_NEXT_SYNTAX"], [283, 285, 9, "enum_NEXT_SYNTAX"], [286, 207, 10, "enum_LAST_LEXICAL_USE"], [285, 286, 9, "enum_NEXT_SYNTAX"], [286, 287, 9, "enum_NEXT_SYNTAX"], [288, 43, 10, "enum_LAST_LEXICAL_USE"], [287, 288, 9, "enum_NEXT_SYNTAX"], [288, 289, 9, "enum_NEXT_SYNTAX"], [289, 290, 9, "enum_NEXT_SYNTAX"], [290, 292, 9, "enum_NEXT_SYNTAX"], [292, 293, 9, "enum_NEXT_SYNTAX"], [293, 294, 9, "enum_NEXT_SYNTAX"], [294, 295, 9, "enum_NEXT_SYNTAX"], [295, 296, 9, "enum_NEXT_SYNTAX"], [296, 297, 9, "enum_NEXT_SYNTAX"], [298, 286, 10, "enum_LAST_LEXICAL_USE"], [297, 298, 9, "enum_NEXT_SYNTAX"], [298, 299, 9, "enum_NEXT_SYNTAX"], [299, 301, 9, "enum_NEXT_SYNTAX"], [302, 17, 10, "enum_LAST_LEXICAL_USE"], [301, 302, 9, "enum_NEXT_SYNTAX"], [302, 303, 9, "enum_NEXT_SYNTAX"], [303, 304, 9, "enum_NEXT_SYNTAX"], [304, 305, 9, "enum_NEXT_SYNTAX"], [306, 205, 10, "enum_LAST_LEXICAL_USE"], [305, 306, 9, "enum_NEXT_SYNTAX"], [306, 307, 9, "enum_NEXT_SYNTAX"], [307, 308, 9, "enum_NEXT_SYNTAX"], [308, 309, 9, "enum_NEXT_SYNTAX"], [310, 293, 10, "enum_LAST_LEXICAL_USE"], [309, 310, 9, "enum_NEXT_SYNTAX"], [310, 311, 9, "enum_NEXT_SYNTAX"], [6, 8, 1, "enum_CFG_NEXT"], [8, 14, 1, "enum_CFG_NEXT"], [14, 20, 1, "enum_CFG_NEXT"], [20, 35, 1, "enum_CFG_NEXT"], [35, 285, 1, "enum_CFG_NEXT"], [35, 40, 1, "enum_CFG_NEXT"], [40, 54, 1, "enum_CFG_NEXT"], [54, 292, 1, "enum_CFG_NEXT"], [54, 58, 1, "enum_CFG_NEXT"], [58, 64, 1, "enum_CFG_NEXT"], [64, 70, 1, "enum_CFG_NEXT"], [70, 79, 1, "enum_CFG_NEXT"], [79, 88, 1, "enum_CFG_NEXT"], [88, 100, 1, "enum_CFG_NEXT"], [100, 106, 1, "enum_CFG_NEXT"], [106, 111, 1, "enum_CFG_NEXT"], [111, 132, 1, "enum_CFG_NEXT"], [132, 148, 1, "enum_CFG_NEXT"], [148, 168, 1, "enum_CFG_NEXT"], [168, 198, 1, "enum_CFG_NEXT"], [198, 211, 1, "enum_CFG_NEXT"], [211, 222, 1, "enum_CFG_NEXT"], [222, 231, 1, "enum_CFG_NEXT"], [231, 253, 1, "enum_CFG_NEXT"], [253, 261, 1, "enum_CFG_NEXT"], [261, 269, 1, "enum_CFG_NEXT"], [285, 292, 1, "enum_CFG_NEXT"], [292, 301, 1, "enum_CFG_NEXT"], [11, 2, 3, "enum_LAST_WRITE"], [17, 9, 3, "enum_LAST_WRITE"], [25, 15, 3, "enum_LAST_WRITE"], [32, 11, 2, "enum_LAST_READ"], [32, 2, 3, "enum_LAST_WRITE"], [43, 21, 3, "enum_LAST_WRITE"], [45, 32, 2, "enum_LAST_READ"], [45, 2, 3, "enum_LAST_WRITE"], [51, 41, 3, "enum_LAST_WRITE"], [61, 51, 2, "enum_LAST_READ"], [61, 41, 3, "enum_LAST_WRITE"], [67, 25, 2, "enum_LAST_READ"], [67, 15, 3, "enum_LAST_WRITE"], [73, 61, 2, "enum_LAST_READ"], [73, 41, 3, "enum_LAST_WRITE"], [82, 73, 2, "enum_LAST_READ"], [82, 41, 3, "enum_LAST_WRITE"], [95, 71, 3, "enum_LAST_WRITE"], [97, 80, 3, "enum_LAST_WRITE"], [103, 67, 2, "enum_LAST_READ"], [103, 15, 3, "enum_LAST_WRITE"], [120, 59, 3, "enum_LAST_WRITE"], [122, 116, 2, "enum_LAST_READ"], [128, 122, 2, "enum_LAST_READ"], [130, 82, 2, "enum_LAST_READ"], [130, 41, 3, "enum_LAST_WRITE"], [138, 95, 2, "enum_LAST_READ"], [138, 71, 3, "enum_LAST_WRITE"], [142, 97, 2, "enum_LAST_READ"], [142, 80, 3, "enum_LAST_WRITE"], [146, 112, 3, "enum_LAST_WRITE"], [159, 133, 3, "enum_LAST_WRITE"], [161, 151, 2, "enum_LAST_READ"], [165, 45, 2, "enum_LAST_READ"], [165, 2, 3, "enum_LAST_WRITE"], [169, 107, 3, "enum_LAST_WRITE"], [177, 65, 3, "enum_LAST_WRITE"], [179, 149, 3, "enum_LAST_WRITE"], [186, 101, 3, "enum_LAST_WRITE"], [194, 89, 3, "enum_LAST_WRITE"], [201, 161, 2, "enum_LAST_READ"], [205, 165, 2, "enum_LAST_READ"], [205, 2, 3, "enum_LAST_WRITE"], [207, 130, 2, "enum_LAST_READ"], [207, 41, 3, "enum_LAST_WRITE"], [214, 201, 2, "enum_LAST_READ"], [218, 103, 2, "enum_LAST_READ"], [218, 15, 3, "enum_LAST_WRITE"], [225, 212, 3, "enum_LAST_WRITE"], [229, 199, 3, "enum_LAST_WRITE"], [232, 169, 2, "enum_LAST_READ"], [232, 107, 3, "enum_LAST_WRITE"], [236, 173, 2, "enum_LAST_READ"], [240, 177, 2, "enum_LAST_READ"], [240, 65, 3, "enum_LAST_WRITE"], [242, 223, 3, "enum_LAST_WRITE"], [244, 181, 2, "enum_LAST_READ"], [249, 194, 2, "enum_LAST_READ"], [249, 89, 3, "enum_LAST_WRITE"], [256, 236, 2, "enum_LAST_READ"], [262, 254, 3, "enum_LAST_WRITE"], [266, 232, 2, "enum_LAST_READ"], [266, 107, 3, "enum_LAST_WRITE"], [272, 218, 2, "enum_LAST_READ"], [272, 15, 3, "enum_LAST_WRITE"], [288, 21, 3, "enum_LAST_WRITE"], [298, 51, 2, "enum_LAST_READ"], [298, 41, 3, "enum_LAST_WRITE"], [298, 286, 3, "enum_LAST_WRITE"], [302, 17, 2, "enum_LAST_READ"], [302, 9, 3, "enum_LAST_WRITE"], [306, 32, 2, "enum_LAST_READ"], [306, 45, 2, "enum_LAST_READ"], [306, 2, 3, "enum_LAST_WRITE"], [310, 293, 3, "enum_LAST_WRITE"], [9, 11, 4, "enum_COMPUTED_FROM"], [15, 17, 4, "enum_COMPUTED_FROM"], [21, 23, 4, "enum_COMPUTED_FROM"], [21, 25, 4, "enum_COMPUTED_FROM"], [293, 298, 4, "enum_COMPUTED_FROM"], [41, 43, 4, "enum_COMPUTED_FROM"], [41, 45, 4, "enum_COMPUTED_FROM"], [286, 288, 4, "enum_COMPUTED_FROM"], [59, 61, 4, "enum_COMPUTED_FROM"], [65, 67, 4, "enum_COMPUTED_FROM"], [71, 73, 4, "enum_COMPUTED_FROM"], [80, 82, 4, "enum_COMPUTED_FROM"], [89, 95, 4, "enum_COMPUTED_FROM"], [89, 97, 4, "enum_COMPUTED_FROM"], [101, 103, 4, "enum_COMPUTED_FROM"], [112, 128, 4, "enum_COMPUTED_FROM"], [112, 130, 4, "enum_COMPUTED_FROM"], [112, 116, 4, "enum_COMPUTED_FROM"], [112, 120, 4, "enum_COMPUTED_FROM"], [112, 122, 4, "enum_COMPUTED_FROM"], [133, 138, 4, "enum_COMPUTED_FROM"], [133, 142, 4, "enum_COMPUTED_FROM"], [133, 146, 4, "enum_COMPUTED_FROM"], [149, 159, 4, "enum_COMPUTED_FROM"], [149, 165, 4, "enum_COMPUTED_FROM"], [149, 151, 4, "enum_COMPUTED_FROM"], [149, 161, 4, "enum_COMPUTED_FROM"], [199, 205, 4, "enum_COMPUTED_FROM"], [199, 201, 4, "enum_COMPUTED_FROM"], [199, 207, 4, "enum_COMPUTED_FROM"], [212, 214, 4, "enum_COMPUTED_FROM"], [212, 218, 4, "enum_COMPUTED_FROM"], [223, 229, 4, "enum_COMPUTED_FROM"], [223, 225, 4, "enum_COMPUTED_FROM"], [254, 256, 4, "enum_COMPUTED_FROM"]], "error_location": 272, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/etianen/cms.git", "old_path": "src/cms/apps/contact/views.py", "hash": "b521ab26117288742645598a82ed547fc446580e", "code": "def index(request: HttpRequest) -> HttpResponse:\n    \"\"\"Renders the contact form.\"\"\"\n    page: Any = request.page\n    content: Any = page.content\n    ContactForm: Any = CONTACT_FORMS[content.form_type]\n    # Respond to POST data.\n    if request.method == \"POST\":\n        contact_form = ContactForm(request.POST)\n        if contact_form.is_valid():\n            cleaned_data: Dict[str, str] = contact_form.cleaned_data\n            subject: str = content.confirmation_subject\n            name: str = contact_form.cleaned_data[\"name\"]\n            email: str = contact_form.cleaned_data[\"email\"]\n            sender: str = \"%s <%s>\" % (name, email)\n            recipient: str = content.send_to\n            messages: List[mail.EmailMessage] = []\n            # Compile the email to the contact form recipient.\n            data: List[Tuple[str, str]] = [(field.label, cleaned_data[field.name]) for field in contact_form]\n            notification_context: Dict[str, Any] = {\"name\": name,\n                                    \"email\": email,\n                                    \"data\": data}\n            notification_message: str = template.loader.render_to_string(\"contact/notification.txt\", notification_context, template.RequestContext(request))\n            messages.append(mail.EmailMessage(subject, \n                                              notification_message, \n                                              settings.DEFAULT_FROM_EMAIL, \n                                              [recipient],\n                                              headers={\"Reply-To\": sender}))\n            # Compile the confirmation email.\n            confirmation_context = template.RequestContext(request, contact_form.cleaned_data)\n            confirmation_email = template.Template(content.confirmation_message)\n            confirmation_message: str = confirmation_email.render(confirmation_context)\n            messages.append(mail.EmailMessage(subject,\n                                              confirmation_message,\n                                              settings.DEFAULT_FROM_EMAIL,\n                                              [sender]))\n            # Send both emails.\n            connection = mail.SMTPConnection()\n            connection.send_messages(messages)\n            # Redirect the user.\n            return redirect(content.reverse(\"message_sent\"))\n    else:    \n        contact_form = ContactForm()\n    context: Dict[str, forms.Form] = {\"contact_form\": contact_form}\n    return page.render_to_response(request, \"contact/index.html\", context)\n", "rewrite": "ReplaceText(target='page' @(51,28)->(51,35))", "error_line": 39, "has_bug": true, "code_full": "from typing import Any, Dict, List, Tuple\n\nfrom django import forms, mail, template\nfrom django.conf import settings\nfrom django.http import HttpRequest, HttpResponse\nfrom django.shortcuts import redirect\n\nCONTACT_FORMS: Dict = {}\n\ndef index(request: HttpRequest) -> HttpResponse:\n    \"\"\"Renders the contact form.\"\"\"\n    page: Any = request.page\n    content: Any = page.content\n    ContactForm: Any = CONTACT_FORMS[content.form_type]\n    # Respond to POST data.\n    if request.method == \"POST\":\n        contact_form = ContactForm(request.POST)\n        if contact_form.is_valid():\n            cleaned_data: Dict[str, str] = contact_form.cleaned_data\n            subject: str = content.confirmation_subject\n            name: str = contact_form.cleaned_data[\"name\"]\n            email: str = contact_form.cleaned_data[\"email\"]\n            sender: str = \"%s <%s>\" % (name, email)\n            recipient: str = content.send_to\n            messages: List[mail.EmailMessage] = []\n            # Compile the email to the contact form recipient.\n            data: List[Tuple[str, str]] = [(field.label, cleaned_data[field.name]) for field in contact_form]\n            notification_context: Dict[str, Any] = {\"name\": name,\n                                    \"email\": email,\n                                    \"data\": data}\n            notification_message: str = template.loader.render_to_string(\"contact/notification.txt\", notification_context, template.RequestContext(request))\n            messages.append(mail.EmailMessage(subject, \n                                              notification_message, \n                                              settings.DEFAULT_FROM_EMAIL, \n                                              [recipient],\n                                              headers={\"Reply-To\": sender}))\n            # Compile the confirmation email.\n            confirmation_context = template.RequestContext(request, contact_form.cleaned_data)\n            confirmation_email = template.Template(content.confirmation_message)\n            confirmation_message: str = confirmation_email.render(confirmation_context)\n            messages.append(mail.EmailMessage(subject,\n                                              confirmation_message,\n                                              settings.DEFAULT_FROM_EMAIL,\n                                              [sender]))\n            # Send both emails.\n            connection = mail.SMTPConnection()\n            connection.send_messages(messages)\n            # Redirect the user.\n            return redirect(content.reverse(\"message_sent\"))\n    else:    \n        contact_form = ContactForm()\n    context: Dict[str, forms.Form] = {\"contact_form\": contact_form}\n    return page.render_to_response(request, \"contact/index.html\", context)\n", "error_location_char": [2326, 2333], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def dict_flatten(", "dict_in", ")", ":", "#NEWLINE#", "#INDENT#", "dict_out", "=", "dict", "(", ")", "#NEWLINE#", "for", "k", "in", "list", "(", "dict_in", ".", "keys", "(", ")", ")", ":", "#NEWLINE#", "#INDENT#", "if", "isinstance", "(", "dict_in", "[", "k", "]", ",", "dict", ")", ":", "#NEWLINE#", "#INDENT#", "for", "(", "kk", ",", "vv", ")", "in", "dict_in", "[", "k", "]", ".", "items", "(", ")", ":", "#NEWLINE#", "#INDENT#", "dict_out", "[", "f", "'{k}:{kk}'", "]", "=", "vv", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "dict_out", "[", "k", "]", "=", "dict_in", "[", "k", "]", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "return", "dict_in"], "edges": [[6, 10, 7, "enum_FIELD"], [15, 14, 7, "enum_FIELD"], [15, 17, 7, "enum_FIELD"], [84, 85, 7, "enum_FIELD"], [10, 9, 7, "enum_FIELD"], [17, 16, 7, "enum_FIELD"], [37, 34, 7, "enum_FIELD"], [21, 19, 7, "enum_FIELD"], [34, 28, 7, "enum_FIELD"], [46, 43, 7, "enum_FIELD"], [46, 53, 7, "enum_FIELD"], [71, 78, 7, "enum_FIELD"], [19, 18, 7, "enum_FIELD"], [31, 30, 7, "enum_FIELD"], [31, 32, 7, "enum_FIELD"], [53, 51, 7, "enum_FIELD"], [57, 64, 7, "enum_FIELD"], [73, 72, 7, "enum_FIELD"], [73, 74, 7, "enum_FIELD"], [78, 77, 7, "enum_FIELD"], [78, 79, 7, "enum_FIELD"], [51, 48, 7, "enum_FIELD"], [59, 58, 7, "enum_FIELD"], [59, 60, 7, "enum_FIELD"], [48, 47, 7, "enum_FIELD"], [48, 49, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [18, 2, 10, "enum_LAST_LEXICAL_USE"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [30, 18, 10, "enum_LAST_LEXICAL_USE"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [32, 14, 10, "enum_LAST_LEXICAL_USE"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [35, 9, 10, "enum_LAST_LEXICAL_USE"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [47, 30, 10, "enum_LAST_LEXICAL_USE"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [49, 32, 10, "enum_LAST_LEXICAL_USE"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 57, 9, "enum_NEXT_SYNTAX"], [58, 7, 10, "enum_LAST_LEXICAL_USE"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [64, 44, 10, "enum_LAST_LEXICAL_USE"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 71, 9, "enum_NEXT_SYNTAX"], [72, 58, 10, "enum_LAST_LEXICAL_USE"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [74, 49, 10, "enum_LAST_LEXICAL_USE"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [77, 47, 10, "enum_LAST_LEXICAL_USE"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [79, 74, 10, "enum_LAST_LEXICAL_USE"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 84, 9, "enum_NEXT_SYNTAX"], [85, 77, 10, "enum_LAST_LEXICAL_USE"], [84, 85, 9, "enum_NEXT_SYNTAX"], [6, 17, 1, "enum_CFG_NEXT"], [17, 14, 1, "enum_CFG_NEXT"], [14, 34, 1, "enum_CFG_NEXT"], [14, 84, 1, "enum_CFG_NEXT"], [34, 53, 1, "enum_CFG_NEXT"], [34, 71, 1, "enum_CFG_NEXT"], [53, 43, 1, "enum_CFG_NEXT"], [43, 14, 1, "enum_CFG_NEXT"], [43, 57, 1, "enum_CFG_NEXT"], [57, 43, 1, "enum_CFG_NEXT"], [71, 14, 1, "enum_CFG_NEXT"], [18, 2, 3, "enum_LAST_WRITE"], [14, 74, 2, "enum_LAST_READ"], [14, 49, 2, "enum_LAST_READ"], [14, 14, 3, "enum_LAST_WRITE"], [28, 28, 2, "enum_LAST_READ"], [30, 47, 2, "enum_LAST_READ"], [30, 77, 2, "enum_LAST_READ"], [30, 18, 2, "enum_LAST_READ"], [30, 2, 3, "enum_LAST_WRITE"], [32, 74, 2, "enum_LAST_READ"], [32, 49, 2, "enum_LAST_READ"], [32, 14, 3, "enum_LAST_WRITE"], [35, 9, 2, "enum_LAST_READ"], [35, 35, 2, "enum_LAST_READ"], [47, 30, 2, "enum_LAST_READ"], [47, 2, 3, "enum_LAST_WRITE"], [49, 32, 2, "enum_LAST_READ"], [49, 14, 3, "enum_LAST_WRITE"], [42, 42, 3, "enum_LAST_WRITE"], [44, 64, 2, "enum_LAST_READ"], [44, 44, 3, "enum_LAST_WRITE"], [64, 64, 2, "enum_LAST_READ"], [64, 44, 3, "enum_LAST_WRITE"], [58, 72, 2, "enum_LAST_READ"], [58, 58, 2, "enum_LAST_READ"], [58, 7, 3, "enum_LAST_WRITE"], [77, 30, 2, "enum_LAST_READ"], [77, 2, 3, "enum_LAST_WRITE"], [79, 32, 2, "enum_LAST_READ"], [79, 14, 3, "enum_LAST_WRITE"], [72, 72, 2, "enum_LAST_READ"], [72, 58, 2, "enum_LAST_READ"], [72, 7, 3, "enum_LAST_WRITE"], [74, 79, 2, "enum_LAST_READ"], [74, 14, 3, "enum_LAST_WRITE"], [85, 47, 2, "enum_LAST_READ"], [85, 77, 2, "enum_LAST_READ"], [85, 18, 2, "enum_LAST_READ"], [85, 2, 3, "enum_LAST_WRITE"], [7, 9, 4, "enum_COMPUTED_FROM"], [73, 77, 4, "enum_COMPUTED_FROM"], [73, 79, 4, "enum_COMPUTED_FROM"], [59, 64, 4, "enum_COMPUTED_FROM"]], "error_location": 85, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/fsepy/sfeprapy.git", "old_path": "sfeprapy/func/mcs_gen.py", "hash": "ffdf8d512d6ca26a685f58fceac853d9ac9241b6", "code": "def dict_flatten(dict_in: dict) -> dict:\n\n    dict_out = dict()\n\n    for k in list(dict_in.keys()):\n        if isinstance(dict_in[k], dict):\n            for kk, vv in dict_in[k].items():\n                dict_out[f'{k}:{kk}'] = vv\n        else:\n            dict_out[k] = dict_in[k]\n            \n    return dict_in\n", "rewrite": "ReplaceText(target='dict_out' @(140,11)->(140,18))", "error_line": 11, "has_bug": true, "code_full": "def dict_flatten(dict_in: dict) -> dict:\n\n    dict_out = dict()\n\n    for k in list(dict_in.keys()):\n        if isinstance(dict_in[k], dict):\n            for kk, vv in dict_in[k].items():\n                dict_out[f'{k}:{kk}'] = vv\n        else:\n           \n    return dict_in\n", "error_location_char": [305, 312], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def onverbalization(", "e", ")", ":", "#NEWLINE#", "#INDENT#", "for", "t", "in", "e", ":", "#NEWLINE#", "#INDENT#", "text", "=", "pr2", ".", "knowledge", "[", "(", "'%s verbalisesTo *'", "%", "t", ")", "]", "[", "0", "]", "#NEWLINE#", "logger", ".", "warning", "(", "(", "'New verbalization from Dialogs: <%s>'", "%", "text", ")", ")", "#NEWLINE#", "pr2", ".", "say", "(", "t", ")"], "edges": [[9, 8, 7, "enum_FIELD"], [9, 10, 7, "enum_FIELD"], [13, 26, 7, "enum_FIELD"], [29, 33, 7, "enum_FIELD"], [40, 44, 7, "enum_FIELD"], [26, 19, 7, "enum_FIELD"], [26, 27, 7, "enum_FIELD"], [33, 31, 7, "enum_FIELD"], [44, 42, 7, "enum_FIELD"], [19, 17, 7, "enum_FIELD"], [19, 22, 7, "enum_FIELD"], [31, 30, 7, "enum_FIELD"], [36, 35, 7, "enum_FIELD"], [36, 37, 7, "enum_FIELD"], [42, 41, 7, "enum_FIELD"], [17, 16, 7, "enum_FIELD"], [22, 21, 7, "enum_FIELD"], [22, 23, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [10, 2, 10, "enum_LAST_LEXICAL_USE"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [23, 8, 10, "enum_LAST_LEXICAL_USE"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [37, 14, 10, "enum_LAST_LEXICAL_USE"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [41, 16, 10, "enum_LAST_LEXICAL_USE"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [45, 23, 10, "enum_LAST_LEXICAL_USE"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [10, 8, 1, "enum_CFG_NEXT"], [8, 13, 1, "enum_CFG_NEXT"], [13, 29, 1, "enum_CFG_NEXT"], [29, 40, 1, "enum_CFG_NEXT"], [40, 8, 1, "enum_CFG_NEXT"], [10, 2, 3, "enum_LAST_WRITE"], [8, 45, 2, "enum_LAST_READ"], [8, 8, 3, "enum_LAST_WRITE"], [16, 41, 2, "enum_LAST_READ"], [23, 45, 2, "enum_LAST_READ"], [23, 8, 3, "enum_LAST_WRITE"], [14, 37, 2, "enum_LAST_READ"], [14, 14, 3, "enum_LAST_WRITE"], [30, 30, 2, "enum_LAST_READ"], [37, 37, 2, "enum_LAST_READ"], [37, 14, 3, "enum_LAST_WRITE"], [41, 16, 2, "enum_LAST_READ"], [45, 23, 2, "enum_LAST_READ"], [45, 8, 3, "enum_LAST_WRITE"], [14, 16, 4, "enum_COMPUTED_FROM"], [14, 23, 4, "enum_COMPUTED_FROM"]], "error_location": 45, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/chili-epfl/pyrobots.git", "old_path": "scripts/handover.py", "hash": "146de875a3a4cdea20c0778bd454e7255d0ff78d", "code": "def onverbalization(e: List[str]):\n    for t in e:\n        text: str = pr2.knowledge[\"%s verbalisesTo *\" % t][0]\n        logger.warning(\"New verbalization from Dialogs: <%s>\" % text)\n        pr2.say(t)\n    return dict_in\n", "rewrite": "ReplaceText(target='text' @(60,20)->(60,21))", "error_line": 4, "has_bug": true, "code_full": "import logging\nfrom typing import List\n\nimport pyoro\nimport robots\n\nlogger = logging.getLogger(\"robot\")\n\npr2 = robots.PR2(knowledge = pyoro.Oro(), init = False)\n\ndef onverbalization(e: List[str]):\n    for t in e:\n        text: str = pr2.knowledge[\"%s verbalisesTo *\" % t][0]\n        logger.warning(\"New verbalization from Dialogs: <%s>\" % text)\n        pr2.say(t)\n    return dict_in\n", "error_location_char": [199, 200], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def from_repo(", "repo_url", ",", "chart", ",", "version", "=", "None", ",", "headers", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "'Downloads the chart from a repo to a temporary dir, the path of which is determined by the platform'", "#NEWLINE#", "_tmp_dir", "=", "tempfile", ".", "mkdtemp", "(", "prefix", "=", "'pyhelm-'", ")", "#NEWLINE#", "repo_scheme", "=", "urlparse", "(", "repo_url", ")", ".", "scheme", "#NEWLINE#", "index", "=", "repo_index", "(", "repo_url", ",", "headers", ")", "#NEWLINE#", "if", "(", "chart", "not in", "index", "[", "'entries'", "]", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "RuntimeError", "(", "'Chart not found in repo'", ")", "#NEWLINE#", "#UNINDENT#", "versions", "=", "index", "[", "'entries'", "]", "[", "chart", "]", "#NEWLINE#", "if", "(", "version", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "versions", "=", "itertools", ".", "ifilter", "(", "(", "lambda", "k", ":", "(", "k", "[", "'version'", "]", "==", "version", ")", ")", ",", "versions", ")", "#NEWLINE#", "#UNINDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "metadata", "=", "sorted", "(", "versions", ",", "key", "=", "(", "lambda", "x", ":", "list", "(", "map", "(", "int", ",", "x", "[", "'version'", "]", ".", "split", "(", "'.'", ")", ")", ")", ")", ")", "[", "(", "-", "1", ")", "]", "#NEWLINE#", "for", "url", "in", "metadata", "[", "'urls'", "]", ":", "#NEWLINE#", "#INDENT#", "fname", "=", "url", ".", "split", "(", "'/'", ")", "[", "(", "-", "1", ")", "]", "#NEWLINE#", "try", ":", "#NEWLINE#", "#INDENT#", "fobj", "=", "cStringIO", ".", "StringIO", "(", "_get_from_repo", "(", "repo_scheme", ",", "repo_url", ",", "fname", ",", "stream", "=", "True", ",", "headers", "=", "headers", ")", ")", "#NEWLINE#", "tar", "=", "tarfile", ".", "open", "(", "mode", "=", "'r:*'", ",", "fileobj", "=", "fobj", ")", "#NEWLINE#", "tar", ".", "extractall", "(", "_tmp_dir", ")", "#NEWLINE#", "return", "os", ".", "path", ".", "join", "(", "_tmp_dir", ",", "chart", ")", "#NEWLINE#", "#UNINDENT#", "except", ":", "#NEWLINE#", "#INDENT#", "pass", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "except", "IndexError", ":", "#NEWLINE#", "#INDENT#", "raise", "RuntimeError", "(", "(", "'Chart version %s not found'", "%", "version", ")", ")"], "edges": [[1, 7, 7, "enum_FIELD"], [16, 17, 7, "enum_FIELD"], [18, 24, 7, "enum_FIELD"], [29, 36, 7, "enum_FIELD"], [38, 44, 7, "enum_FIELD"], [48, 51, 7, "enum_FIELD"], [66, 73, 7, "enum_FIELD"], [77, 80, 7, "enum_FIELD"], [24, 22, 7, "enum_FIELD"], [36, 33, 7, "enum_FIELD"], [44, 41, 7, "enum_FIELD"], [51, 50, 7, "enum_FIELD"], [60, 62, 7, "enum_FIELD"], [73, 70, 7, "enum_FIELD"], [73, 74, 7, "enum_FIELD"], [80, 79, 7, "enum_FIELD"], [85, 105, 7, "enum_FIELD"], [113, 145, 7, "enum_FIELD"], [154, 153, 7, "enum_FIELD"], [154, 156, 7, "enum_FIELD"], [249, 250, 7, "enum_FIELD"], [22, 21, 7, "enum_FIELD"], [25, 27, 7, "enum_FIELD"], [33, 32, 7, "enum_FIELD"], [53, 52, 7, "enum_FIELD"], [53, 54, 7, "enum_FIELD"], [62, 61, 7, "enum_FIELD"], [70, 69, 7, "enum_FIELD"], [70, 71, 7, "enum_FIELD"], [105, 89, 7, "enum_FIELD"], [145, 119, 7, "enum_FIELD"], [145, 147, 7, "enum_FIELD"], [156, 155, 7, "enum_FIELD"], [156, 157, 7, "enum_FIELD"], [161, 170, 7, "enum_FIELD"], [254, 256, 7, "enum_FIELD"], [89, 88, 7, "enum_FIELD"], [93, 101, 7, "enum_FIELD"], [119, 116, 7, "enum_FIELD"], [147, 148, 7, "enum_FIELD"], [170, 167, 7, "enum_FIELD"], [170, 172, 7, "enum_FIELD"], [180, 186, 7, "enum_FIELD"], [204, 214, 7, "enum_FIELD"], [219, 223, 7, "enum_FIELD"], [227, 235, 7, "enum_FIELD"], [256, 255, 7, "enum_FIELD"], [101, 98, 7, "enum_FIELD"], [120, 123, 7, "enum_FIELD"], [167, 165, 7, "enum_FIELD"], [172, 173, 7, "enum_FIELD"], [186, 184, 7, "enum_FIELD"], [214, 208, 7, "enum_FIELD"], [223, 221, 7, "enum_FIELD"], [235, 231, 7, "enum_FIELD"], [259, 258, 7, "enum_FIELD"], [259, 260, 7, "enum_FIELD"], [98, 97, 7, "enum_FIELD"], [98, 99, 7, "enum_FIELD"], [123, 127, 7, "enum_FIELD"], [165, 164, 7, "enum_FIELD"], [184, 183, 7, "enum_FIELD"], [192, 187, 7, "enum_FIELD"], [208, 207, 7, "enum_FIELD"], [211, 213, 7, "enum_FIELD"], [215, 217, 7, "enum_FIELD"], [221, 220, 7, "enum_FIELD"], [231, 229, 7, "enum_FIELD"], [127, 126, 7, "enum_FIELD"], [195, 197, 7, "enum_FIELD"], [199, 201, 7, "enum_FIELD"], [229, 228, 7, "enum_FIELD"], [131, 128, 7, "enum_FIELD"], [138, 136, 7, "enum_FIELD"], [136, 133, 7, "enum_FIELD"], [133, 132, 7, "enum_FIELD"], [133, 134, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [34, 2, 10, "enum_LAST_LEXICAL_USE"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [43, 34, 10, "enum_LAST_LEXICAL_USE"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [45, 10, 10, "enum_LAST_LEXICAL_USE"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [50, 4, 10, "enum_LAST_LEXICAL_USE"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [52, 39, 10, "enum_LAST_LEXICAL_USE"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [69, 52, 10, "enum_LAST_LEXICAL_USE"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [74, 50, 10, "enum_LAST_LEXICAL_USE"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [79, 6, 10, "enum_LAST_LEXICAL_USE"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 85, 9, "enum_NEXT_SYNTAX"], [86, 67, 10, "enum_LAST_LEXICAL_USE"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [97, 94, 10, "enum_LAST_LEXICAL_USE"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [102, 79, 10, "enum_LAST_LEXICAL_USE"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [106, 86, 10, "enum_LAST_LEXICAL_USE"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [118, 106, 10, "enum_LAST_LEXICAL_USE"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [132, 124, 10, "enum_LAST_LEXICAL_USE"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [155, 114, 10, "enum_LAST_LEXICAL_USE"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [164, 153, 10, "enum_LAST_LEXICAL_USE"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [175, 177, 9, "enum_NEXT_SYNTAX"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 184, 9, "enum_NEXT_SYNTAX"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [187, 188, 9, "enum_NEXT_SYNTAX"], [189, 30, 10, "enum_LAST_LEXICAL_USE"], [188, 189, 9, "enum_NEXT_SYNTAX"], [189, 190, 9, "enum_NEXT_SYNTAX"], [191, 43, 10, "enum_LAST_LEXICAL_USE"], [190, 191, 9, "enum_NEXT_SYNTAX"], [191, 192, 9, "enum_NEXT_SYNTAX"], [193, 162, 10, "enum_LAST_LEXICAL_USE"], [192, 193, 9, "enum_NEXT_SYNTAX"], [193, 194, 9, "enum_NEXT_SYNTAX"], [194, 195, 9, "enum_NEXT_SYNTAX"], [195, 196, 9, "enum_NEXT_SYNTAX"], [196, 197, 9, "enum_NEXT_SYNTAX"], [197, 198, 9, "enum_NEXT_SYNTAX"], [198, 199, 9, "enum_NEXT_SYNTAX"], [199, 200, 9, "enum_NEXT_SYNTAX"], [201, 45, 10, "enum_LAST_LEXICAL_USE"], [200, 201, 9, "enum_NEXT_SYNTAX"], [201, 202, 9, "enum_NEXT_SYNTAX"], [202, 203, 9, "enum_NEXT_SYNTAX"], [203, 204, 9, "enum_NEXT_SYNTAX"], [204, 205, 9, "enum_NEXT_SYNTAX"], [205, 206, 9, "enum_NEXT_SYNTAX"], [206, 207, 9, "enum_NEXT_SYNTAX"], [207, 208, 9, "enum_NEXT_SYNTAX"], [208, 209, 9, "enum_NEXT_SYNTAX"], [209, 210, 9, "enum_NEXT_SYNTAX"], [210, 211, 9, "enum_NEXT_SYNTAX"], [211, 212, 9, "enum_NEXT_SYNTAX"], [212, 213, 9, "enum_NEXT_SYNTAX"], [213, 214, 9, "enum_NEXT_SYNTAX"], [214, 215, 9, "enum_NEXT_SYNTAX"], [215, 216, 9, "enum_NEXT_SYNTAX"], [217, 181, 10, "enum_LAST_LEXICAL_USE"], [216, 217, 9, "enum_NEXT_SYNTAX"], [217, 218, 9, "enum_NEXT_SYNTAX"], [218, 219, 9, "enum_NEXT_SYNTAX"], [220, 205, 10, "enum_LAST_LEXICAL_USE"], [219, 220, 9, "enum_NEXT_SYNTAX"], [220, 221, 9, "enum_NEXT_SYNTAX"], [221, 222, 9, "enum_NEXT_SYNTAX"], [222, 223, 9, "enum_NEXT_SYNTAX"], [224, 19, 10, "enum_LAST_LEXICAL_USE"], [223, 224, 9, "enum_NEXT_SYNTAX"], [224, 225, 9, "enum_NEXT_SYNTAX"], [225, 227, 9, "enum_NEXT_SYNTAX"], [227, 228, 9, "enum_NEXT_SYNTAX"], [228, 229, 9, "enum_NEXT_SYNTAX"], [229, 230, 9, "enum_NEXT_SYNTAX"], [230, 231, 9, "enum_NEXT_SYNTAX"], [231, 232, 9, "enum_NEXT_SYNTAX"], [232, 233, 9, "enum_NEXT_SYNTAX"], [234, 224, 10, "enum_LAST_LEXICAL_USE"], [233, 234, 9, "enum_NEXT_SYNTAX"], [234, 235, 9, "enum_NEXT_SYNTAX"], [236, 74, 10, "enum_LAST_LEXICAL_USE"], [235, 236, 9, "enum_NEXT_SYNTAX"], [236, 237, 9, "enum_NEXT_SYNTAX"], [237, 240, 9, "enum_NEXT_SYNTAX"], [240, 241, 9, "enum_NEXT_SYNTAX"], [241, 244, 9, "enum_NEXT_SYNTAX"], [244, 249, 9, "enum_NEXT_SYNTAX"], [249, 250, 9, "enum_NEXT_SYNTAX"], [250, 251, 9, "enum_NEXT_SYNTAX"], [251, 254, 9, "enum_NEXT_SYNTAX"], [255, 61, 10, "enum_LAST_LEXICAL_USE"], [254, 255, 9, "enum_NEXT_SYNTAX"], [255, 256, 9, "enum_NEXT_SYNTAX"], [256, 257, 9, "enum_NEXT_SYNTAX"], [257, 258, 9, "enum_NEXT_SYNTAX"], [258, 259, 9, "enum_NEXT_SYNTAX"], [260, 102, 10, "enum_LAST_LEXICAL_USE"], [259, 260, 9, "enum_NEXT_SYNTAX"], [260, 261, 9, "enum_NEXT_SYNTAX"], [261, 262, 9, "enum_NEXT_SYNTAX"], [8, 12, 1, "enum_CFG_NEXT"], [12, 1, 1, "enum_CFG_NEXT"], [7, 16, 1, "enum_CFG_NEXT"], [16, 18, 1, "enum_CFG_NEXT"], [18, 29, 1, "enum_CFG_NEXT"], [29, 38, 1, "enum_CFG_NEXT"], [38, 51, 1, "enum_CFG_NEXT"], [51, 60, 1, "enum_CFG_NEXT"], [51, 66, 1, "enum_CFG_NEXT"], [66, 80, 1, "enum_CFG_NEXT"], [80, 113, 1, "enum_CFG_NEXT"], [80, 85, 1, "enum_CFG_NEXT"], [85, 113, 1, "enum_CFG_NEXT"], [113, 156, 1, "enum_CFG_NEXT"], [156, 250, 1, "enum_CFG_NEXT"], [156, 153, 1, "enum_CFG_NEXT"], [153, 250, 1, "enum_CFG_NEXT"], [153, 161, 1, "enum_CFG_NEXT"], [161, 250, 1, "enum_CFG_NEXT"], [161, 180, 1, "enum_CFG_NEXT"], [180, 204, 1, "enum_CFG_NEXT"], [204, 219, 1, "enum_CFG_NEXT"], [219, 227, 1, "enum_CFG_NEXT"], [227, 153, 1, "enum_CFG_NEXT"], [250, 254, 1, "enum_CFG_NEXT"], [34, 2, 3, "enum_LAST_WRITE"], [43, 34, 2, "enum_LAST_READ"], [43, 2, 3, "enum_LAST_WRITE"], [45, 10, 3, "enum_LAST_WRITE"], [50, 4, 3, "enum_LAST_WRITE"], [52, 39, 3, "enum_LAST_WRITE"], [69, 52, 2, "enum_LAST_READ"], [69, 39, 3, "enum_LAST_WRITE"], [74, 50, 2, "enum_LAST_READ"], [74, 4, 3, "enum_LAST_WRITE"], [79, 6, 3, "enum_LAST_WRITE"], [97, 94, 3, "enum_LAST_WRITE"], [102, 79, 2, "enum_LAST_READ"], [102, 6, 3, "enum_LAST_WRITE"], [106, 67, 3, "enum_LAST_WRITE"], [86, 106, 2, "enum_LAST_READ"], [86, 67, 3, "enum_LAST_WRITE"], [118, 106, 2, "enum_LAST_READ"], [118, 86, 3, "enum_LAST_WRITE"], [118, 67, 3, "enum_LAST_WRITE"], [132, 124, 3, "enum_LAST_WRITE"], [155, 114, 3, "enum_LAST_WRITE"], [153, 164, 2, "enum_LAST_READ"], [153, 153, 3, "enum_LAST_WRITE"], [164, 164, 2, "enum_LAST_READ"], [164, 153, 3, "enum_LAST_WRITE"], [162, 193, 2, "enum_LAST_READ"], [162, 162, 3, "enum_LAST_WRITE"], [183, 183, 2, "enum_LAST_READ"], [187, 187, 2, "enum_LAST_READ"], [189, 189, 2, "enum_LAST_READ"], [189, 30, 3, "enum_LAST_WRITE"], [191, 43, 2, "enum_LAST_READ"], [191, 191, 2, "enum_LAST_READ"], [191, 2, 3, "enum_LAST_WRITE"], [193, 193, 2, "enum_LAST_READ"], [193, 162, 3, "enum_LAST_WRITE"], [201, 201, 2, "enum_LAST_READ"], [201, 45, 2, "enum_LAST_READ"], [201, 10, 3, "enum_LAST_WRITE"], [181, 217, 2, "enum_LAST_READ"], [181, 181, 3, "enum_LAST_WRITE"], [207, 207, 2, "enum_LAST_READ"], [217, 217, 2, "enum_LAST_READ"], [217, 181, 3, "enum_LAST_WRITE"], [205, 220, 2, "enum_LAST_READ"], [205, 205, 3, "enum_LAST_WRITE"], [220, 220, 2, "enum_LAST_READ"], [220, 205, 3, "enum_LAST_WRITE"], [224, 234, 2, "enum_LAST_READ"], [224, 19, 3, "enum_LAST_WRITE"], [228, 228, 2, "enum_LAST_READ"], [234, 224, 2, "enum_LAST_READ"], [234, 19, 3, "enum_LAST_WRITE"], [236, 74, 2, "enum_LAST_READ"], [236, 236, 2, "enum_LAST_READ"], [236, 4, 3, "enum_LAST_WRITE"], [260, 102, 2, "enum_LAST_READ"], [260, 79, 2, "enum_LAST_READ"], [260, 6, 3, "enum_LAST_WRITE"], [19, 21, 4, "enum_COMPUTED_FROM"], [30, 32, 4, "enum_COMPUTED_FROM"], [30, 34, 4, "enum_COMPUTED_FROM"], [39, 41, 4, "enum_COMPUTED_FROM"], [39, 43, 4, "enum_COMPUTED_FROM"], [39, 45, 4, "enum_COMPUTED_FROM"], [67, 74, 4, "enum_COMPUTED_FROM"], [67, 69, 4, "enum_COMPUTED_FROM"], [86, 106, 4, "enum_COMPUTED_FROM"], [86, 88, 4, "enum_COMPUTED_FROM"], [86, 94, 4, "enum_COMPUTED_FROM"], [86, 102, 4, "enum_COMPUTED_FROM"], [86, 97, 4, "enum_COMPUTED_FROM"], [114, 116, 4, "enum_COMPUTED_FROM"], [114, 118, 4, "enum_COMPUTED_FROM"], [114, 124, 4, "enum_COMPUTED_FROM"], [114, 126, 4, "enum_COMPUTED_FROM"], [114, 128, 4, "enum_COMPUTED_FROM"], [114, 130, 4, "enum_COMPUTED_FROM"], [114, 132, 4, "enum_COMPUTED_FROM"], [162, 164, 4, "enum_COMPUTED_FROM"], [181, 183, 4, "enum_COMPUTED_FROM"], [181, 187, 4, "enum_COMPUTED_FROM"], [181, 189, 4, "enum_COMPUTED_FROM"], [181, 191, 4, "enum_COMPUTED_FROM"], [181, 193, 4, "enum_COMPUTED_FROM"], [181, 201, 4, "enum_COMPUTED_FROM"], [205, 207, 4, "enum_COMPUTED_FROM"], [205, 217, 4, "enum_COMPUTED_FROM"]], "error_location": 193, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/Dominick1993/pyhelm.git", "old_path": "pyhelm/repo.py", "hash": "7ce03b8f5b2d35015bf34f6df059d61ee4c57054", "code": "def from_repo(repo_url: str, chart: str, version: Optional[str]=None, headers: Optional[Dict[str, str]]=None):\n    \"\"\"Downloads the chart from a repo to a temporary dir, the path of which is determined by the platform\"\"\"\n    _tmp_dir: str = tempfile.mkdtemp(prefix='pyhelm-')\n    repo_scheme: str = urlparse(repo_url).scheme\n    index: Dict[str, Any] = repo_index(repo_url, headers)\n\n    if chart not in index['entries']:\n        raise RuntimeError('Chart not found in repo')\n\n    versions: Optional[List[Dict]] = index['entries'][chart]\n\n    if version is not None:\n        versions = itertools.ifilter(lambda k: k['version'] == version,\n                                     versions)\n    try:\n        metadata = sorted(versions, key=lambda x: list(map(int, x['version'].split('.'))))[-1]\n        for url in metadata['urls']:\n            fname = url.split('/')[-1]\n            try:\n                fobj = cStringIO.StringIO(\n                    _get_from_repo(\n                        repo_scheme,\n                        repo_url,\n                        fname,\n                        stream=True,\n                        headers=headers,\n                    )\n                )\n\n                tar = tarfile.open(mode=\"r:*\", fileobj=fobj)\n                tar.extractall(_tmp_dir)\n                return os.path.join(_tmp_dir, chart)\n            except:\n                # NOTE(flaper87): Catch requests errors\n                # and untar errors\n                pass\n    except IndexError:\n        raise RuntimeError('Chart version %s not found' % version)\n", "rewrite": "ReplaceText(target='url' @(109,24)->(109,29))", "error_line": 23, "has_bug": true, "code_full": "import itertools\nimport os\nimport tarfile\nimport tempfile\nfrom typing import Any, Dict, List, Optional\nfrom urllib.parse import urlparse\n\nimport cStringIO\n\n\ndef repo_index(repo_url: str, headers: Optional[Dict[str, str]]) -> Dict[str, Any]: \n    return {}\n\ndef _get_from_repo(repo_scheme: str, repo_url: str, url: str, stream: bool, headers: Optional[Dict[str, str]]) -> bytes:\n    return b''\n\n\ndef from_repo(repo_url: str, chart: str, version: Optional[str]=None, headers: Optional[Dict[str, str]]=None):\n    \"\"\"Downloads the chart from a repo to a temporary dir, the path of which is determined by the platform\"\"\"\n    _tmp_dir: str = tempfile.mkdtemp(prefix='pyhelm-')\n    repo_scheme: str = urlparse(repo_url).scheme\n    index: Dict[str, Any] = repo_index(repo_url, headers)\n\n    if chart not in index['entries']:\n        raise RuntimeError('Chart not found in repo')\n\n    versions: Optional[List[Dict]] = index['entries'][chart]\n\n    if version is not None:\n        versions = itertools.ifilter(lambda k: k['version'] == version,\n                                     versions)\n    try:\n        metadata = sorted(versions, key=lambda x: list(map(int, x['version'].split('.'))))[-1]\n        for url in metadata['urls']:\n            fname = url.split('/')[-1]\n            try:\n                fobj = cStringIO.StringIO(\n                    _get_from_repo(\n                        repo_scheme,\n                        repo_url,\n                        fname,\n                        stream=True,\n                        headers=headers,\n                    )\n                )\n\n                tar = tarfile.open(mode=\"r:*\", fileobj=fobj)\n                tar.extractall(_tmp_dir)\n                return os.path.join(_tmp_dir, chart)\n            except:\n                # NOTE(flaper87): Catch requests errors\n                # and untar errors\n                pass\n    except IndexError:\n        raise RuntimeError('Chart version %s not found' % version)\n", "error_location_char": [1057, 1062], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def base_image(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'Updates for base image.'", "#NEWLINE#", "dockerfile", "=", "'{}/Dockerfile'", ".", "format", "(", "self", ".", "name", ")", "#NEWLINE#", "buildfile", "=", "'{}/build.json'", ".", "format", "(", "self", ".", "name", ")", "#NEWLINE#", "remote_dockerfile", "=", "self", ".", "get_file_obj", "(", "dockerfile", ")", "#NEWLINE#", "dockerfile_content", "=", "self", ".", "get_file_content", "(", "remote_dockerfile", ")", "#NEWLINE#", "remote_buildfile", "=", "self", ".", "get_file_obj", "(", "buildfile", ")", "#NEWLINE#", "buildfile_content", "=", "self", ".", "get_file_content", "(", "remote_buildfile", ")", "#NEWLINE#", "used_file", "=", "remote_dockerfile", ".", "split", "(", "'BUILD_FROM=hassioaddons/'", ")", "[", "1", "]", "#NEWLINE#", "used_file", "=", "used_file", ".", "split", "(", "'\\n'", ")", "[", "0", "]", "#NEWLINE#", "base", "=", "used_file", ".", "split", "(", "':'", ")", "[", "1", "]", "#NEWLINE#", "version", "=", "used_file", ".", "split", "(", "':'", ")", "[", "1", "]", "#NEWLINE#", "if", "(", "base", "==", "'ubuntu-base'", ")", ":", "#NEWLINE#", "#INDENT#", "repo", "=", "self", ".", "github", ".", "get_repo", "(", "'hassio-addons/addon-ubuntu-base'", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "repo", "=", "self", ".", "github", ".", "get_repo", "(", "'hassio-addons/addon-base'", ")", "#NEWLINE#", "#UNINDENT#", "remote_version", "=", "list", "(", "repo", ".", "get_releases", "(", ")", ")", "[", "0", "]", ".", "tag_name", "#NEWLINE#", "if", "self", ".", "verbose", ":", "#NEWLINE#", "#INDENT#", "print", "(", "'Current version'", ",", "version", ")", "#NEWLINE#", "print", "(", "'Available version'", ",", "remote_version", ")", "#NEWLINE#", "#UNINDENT#", "if", "(", "remote_version", "!=", "version", ")", ":", "#NEWLINE#", "#INDENT#", "msg", "=", "COMMIT_MSG", ".", "format", "(", "'add-on base image'", ",", "remote_version", ")", "#NEWLINE#", "new_dockerfile", "=", "dockerfile_content", ".", "replace", "(", "version", ",", "remote_version", ")", "#NEWLINE#", "self", ".", "commit", "(", "dockerfile", ",", "msg", ",", "new_dockerfile", ",", "remote_dockerfile", ".", "sha", ")", "#NEWLINE#", "current_buildfile", "=", "json", ".", "loads", "(", "buildfile_content", ")", "#NEWLINE#", "new_dockerfile", "=", "current_buildfile", ".", "replace", "(", "version", ",", "remote_version", ")", "#NEWLINE#", "self", ".", "commit", "(", "dockerfile", ",", "msg", ",", "new_dockerfile", ",", "remote_buildfile", ".", "sha", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "print", "(", "'Base image already have the newest version'", ",", "version", ")"], "edges": [[6, 7, 7, "enum_FIELD"], [8, 14, 7, "enum_FIELD"], [19, 25, 7, "enum_FIELD"], [30, 36, 7, "enum_FIELD"], [39, 45, 7, "enum_FIELD"], [48, 54, 7, "enum_FIELD"], [57, 63, 7, "enum_FIELD"], [66, 75, 7, "enum_FIELD"], [78, 87, 7, "enum_FIELD"], [90, 99, 7, "enum_FIELD"], [102, 111, 7, "enum_FIELD"], [121, 118, 7, "enum_FIELD"], [151, 165, 7, "enum_FIELD"], [168, 170, 7, "enum_FIELD"], [196, 193, 7, "enum_FIELD"], [14, 12, 7, "enum_FIELD"], [25, 23, 7, "enum_FIELD"], [36, 34, 7, "enum_FIELD"], [45, 43, 7, "enum_FIELD"], [54, 52, 7, "enum_FIELD"], [63, 61, 7, "enum_FIELD"], [75, 72, 7, "enum_FIELD"], [75, 76, 7, "enum_FIELD"], [87, 84, 7, "enum_FIELD"], [87, 88, 7, "enum_FIELD"], [99, 96, 7, "enum_FIELD"], [99, 100, 7, "enum_FIELD"], [111, 108, 7, "enum_FIELD"], [111, 112, 7, "enum_FIELD"], [118, 117, 7, "enum_FIELD"], [123, 131, 7, "enum_FIELD"], [139, 147, 7, "enum_FIELD"], [165, 162, 7, "enum_FIELD"], [170, 169, 7, "enum_FIELD"], [174, 178, 7, "enum_FIELD"], [181, 185, 7, "enum_FIELD"], [193, 192, 7, "enum_FIELD"], [198, 206, 7, "enum_FIELD"], [209, 217, 7, "enum_FIELD"], [220, 228, 7, "enum_FIELD"], [235, 241, 7, "enum_FIELD"], [244, 252, 7, "enum_FIELD"], [255, 263, 7, "enum_FIELD"], [275, 279, 7, "enum_FIELD"], [12, 11, 7, "enum_FIELD"], [16, 15, 7, "enum_FIELD"], [23, 22, 7, "enum_FIELD"], [27, 26, 7, "enum_FIELD"], [34, 33, 7, "enum_FIELD"], [43, 42, 7, "enum_FIELD"], [52, 51, 7, "enum_FIELD"], [61, 60, 7, "enum_FIELD"], [72, 70, 7, "enum_FIELD"], [84, 82, 7, "enum_FIELD"], [96, 94, 7, "enum_FIELD"], [108, 106, 7, "enum_FIELD"], [131, 129, 7, "enum_FIELD"], [147, 145, 7, "enum_FIELD"], [162, 155, 7, "enum_FIELD"], [162, 163, 7, "enum_FIELD"], [178, 175, 7, "enum_FIELD"], [185, 182, 7, "enum_FIELD"], [206, 202, 7, "enum_FIELD"], [217, 213, 7, "enum_FIELD"], [228, 222, 7, "enum_FIELD"], [241, 239, 7, "enum_FIELD"], [252, 248, 7, "enum_FIELD"], [263, 257, 7, "enum_FIELD"], [279, 276, 7, "enum_FIELD"], [70, 69, 7, "enum_FIELD"], [82, 81, 7, "enum_FIELD"], [94, 93, 7, "enum_FIELD"], [106, 105, 7, "enum_FIELD"], [129, 127, 7, "enum_FIELD"], [145, 143, 7, "enum_FIELD"], [155, 154, 7, "enum_FIELD"], [202, 201, 7, "enum_FIELD"], [213, 212, 7, "enum_FIELD"], [222, 221, 7, "enum_FIELD"], [232, 231, 7, "enum_FIELD"], [239, 238, 7, "enum_FIELD"], [248, 247, 7, "enum_FIELD"], [257, 256, 7, "enum_FIELD"], [267, 266, 7, "enum_FIELD"], [127, 126, 7, "enum_FIELD"], [143, 142, 7, "enum_FIELD"], [159, 157, 7, "enum_FIELD"], [157, 156, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [15, 2, 10, "enum_LAST_LEXICAL_USE"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [26, 15, 10, "enum_LAST_LEXICAL_USE"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [33, 26, 10, "enum_LAST_LEXICAL_USE"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [37, 9, 10, "enum_LAST_LEXICAL_USE"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [42, 33, 10, "enum_LAST_LEXICAL_USE"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [46, 31, 10, "enum_LAST_LEXICAL_USE"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [51, 42, 10, "enum_LAST_LEXICAL_USE"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [55, 20, 10, "enum_LAST_LEXICAL_USE"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [60, 51, 10, "enum_LAST_LEXICAL_USE"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [64, 49, 10, "enum_LAST_LEXICAL_USE"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [69, 46, 10, "enum_LAST_LEXICAL_USE"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [79, 67, 10, "enum_LAST_LEXICAL_USE"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [81, 79, 10, "enum_LAST_LEXICAL_USE"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [93, 81, 10, "enum_LAST_LEXICAL_USE"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [105, 93, 10, "enum_LAST_LEXICAL_USE"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [117, 91, 10, "enum_LAST_LEXICAL_USE"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [126, 60, 10, "enum_LAST_LEXICAL_USE"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 139, 9, "enum_NEXT_SYNTAX"], [140, 124, 10, "enum_LAST_LEXICAL_USE"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [142, 126, 10, "enum_LAST_LEXICAL_USE"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [156, 140, 10, "enum_LAST_LEXICAL_USE"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 168, 9, "enum_NEXT_SYNTAX"], [169, 142, 10, "enum_LAST_LEXICAL_USE"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 178, 9, "enum_NEXT_SYNTAX"], [179, 103, 10, "enum_LAST_LEXICAL_USE"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [182, 175, 10, "enum_LAST_LEXICAL_USE"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 184, 9, "enum_NEXT_SYNTAX"], [184, 185, 9, "enum_NEXT_SYNTAX"], [186, 152, 10, "enum_LAST_LEXICAL_USE"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [187, 190, 9, "enum_NEXT_SYNTAX"], [190, 191, 9, "enum_NEXT_SYNTAX"], [192, 186, 10, "enum_LAST_LEXICAL_USE"], [191, 192, 9, "enum_NEXT_SYNTAX"], [192, 193, 9, "enum_NEXT_SYNTAX"], [194, 179, 10, "enum_LAST_LEXICAL_USE"], [193, 194, 9, "enum_NEXT_SYNTAX"], [194, 195, 9, "enum_NEXT_SYNTAX"], [195, 196, 9, "enum_NEXT_SYNTAX"], [196, 198, 9, "enum_NEXT_SYNTAX"], [198, 199, 9, "enum_NEXT_SYNTAX"], [199, 200, 9, "enum_NEXT_SYNTAX"], [200, 201, 9, "enum_NEXT_SYNTAX"], [201, 202, 9, "enum_NEXT_SYNTAX"], [202, 203, 9, "enum_NEXT_SYNTAX"], [203, 204, 9, "enum_NEXT_SYNTAX"], [204, 205, 9, "enum_NEXT_SYNTAX"], [205, 206, 9, "enum_NEXT_SYNTAX"], [207, 192, 10, "enum_LAST_LEXICAL_USE"], [206, 207, 9, "enum_NEXT_SYNTAX"], [207, 208, 9, "enum_NEXT_SYNTAX"], [208, 209, 9, "enum_NEXT_SYNTAX"], [209, 210, 9, "enum_NEXT_SYNTAX"], [210, 211, 9, "enum_NEXT_SYNTAX"], [212, 40, 10, "enum_LAST_LEXICAL_USE"], [211, 212, 9, "enum_NEXT_SYNTAX"], [212, 213, 9, "enum_NEXT_SYNTAX"], [213, 214, 9, "enum_NEXT_SYNTAX"], [214, 215, 9, "enum_NEXT_SYNTAX"], [216, 194, 10, "enum_LAST_LEXICAL_USE"], [215, 216, 9, "enum_NEXT_SYNTAX"], [216, 217, 9, "enum_NEXT_SYNTAX"], [218, 207, 10, "enum_LAST_LEXICAL_USE"], [217, 218, 9, "enum_NEXT_SYNTAX"], [218, 219, 9, "enum_NEXT_SYNTAX"], [219, 220, 9, "enum_NEXT_SYNTAX"], [221, 169, 10, "enum_LAST_LEXICAL_USE"], [220, 221, 9, "enum_NEXT_SYNTAX"], [221, 222, 9, "enum_NEXT_SYNTAX"], [222, 223, 9, "enum_NEXT_SYNTAX"], [223, 224, 9, "enum_NEXT_SYNTAX"], [225, 37, 10, "enum_LAST_LEXICAL_USE"], [224, 225, 9, "enum_NEXT_SYNTAX"], [225, 226, 9, "enum_NEXT_SYNTAX"], [227, 199, 10, "enum_LAST_LEXICAL_USE"], [226, 227, 9, "enum_NEXT_SYNTAX"], [227, 228, 9, "enum_NEXT_SYNTAX"], [229, 210, 10, "enum_LAST_LEXICAL_USE"], [228, 229, 9, "enum_NEXT_SYNTAX"], [229, 230, 9, "enum_NEXT_SYNTAX"], [231, 69, 10, "enum_LAST_LEXICAL_USE"], [230, 231, 9, "enum_NEXT_SYNTAX"], [231, 232, 9, "enum_NEXT_SYNTAX"], [232, 233, 9, "enum_NEXT_SYNTAX"], [233, 234, 9, "enum_NEXT_SYNTAX"], [234, 235, 9, "enum_NEXT_SYNTAX"], [235, 236, 9, "enum_NEXT_SYNTAX"], [236, 237, 9, "enum_NEXT_SYNTAX"], [237, 238, 9, "enum_NEXT_SYNTAX"], [238, 239, 9, "enum_NEXT_SYNTAX"], [239, 240, 9, "enum_NEXT_SYNTAX"], [240, 241, 9, "enum_NEXT_SYNTAX"], [242, 58, 10, "enum_LAST_LEXICAL_USE"], [241, 242, 9, "enum_NEXT_SYNTAX"], [242, 243, 9, "enum_NEXT_SYNTAX"], [243, 244, 9, "enum_NEXT_SYNTAX"], [245, 229, 10, "enum_LAST_LEXICAL_USE"], [244, 245, 9, "enum_NEXT_SYNTAX"], [245, 246, 9, "enum_NEXT_SYNTAX"], [247, 236, 10, "enum_LAST_LEXICAL_USE"], [246, 247, 9, "enum_NEXT_SYNTAX"], [247, 248, 9, "enum_NEXT_SYNTAX"], [248, 249, 9, "enum_NEXT_SYNTAX"], [249, 250, 9, "enum_NEXT_SYNTAX"], [251, 216, 10, "enum_LAST_LEXICAL_USE"], [250, 251, 9, "enum_NEXT_SYNTAX"], [251, 252, 9, "enum_NEXT_SYNTAX"], [253, 218, 10, "enum_LAST_LEXICAL_USE"], [252, 253, 9, "enum_NEXT_SYNTAX"], [253, 254, 9, "enum_NEXT_SYNTAX"], [254, 255, 9, "enum_NEXT_SYNTAX"], [256, 221, 10, "enum_LAST_LEXICAL_USE"], [255, 256, 9, "enum_NEXT_SYNTAX"], [256, 257, 9, "enum_NEXT_SYNTAX"], [257, 258, 9, "enum_NEXT_SYNTAX"], [258, 259, 9, "enum_NEXT_SYNTAX"], [260, 225, 10, "enum_LAST_LEXICAL_USE"], [259, 260, 9, "enum_NEXT_SYNTAX"], [260, 261, 9, "enum_NEXT_SYNTAX"], [262, 227, 10, "enum_LAST_LEXICAL_USE"], [261, 262, 9, "enum_NEXT_SYNTAX"], [262, 263, 9, "enum_NEXT_SYNTAX"], [264, 245, 10, "enum_LAST_LEXICAL_USE"], [263, 264, 9, "enum_NEXT_SYNTAX"], [264, 265, 9, "enum_NEXT_SYNTAX"], [266, 64, 10, "enum_LAST_LEXICAL_USE"], [265, 266, 9, "enum_NEXT_SYNTAX"], [266, 267, 9, "enum_NEXT_SYNTAX"], [267, 268, 9, "enum_NEXT_SYNTAX"], [268, 269, 9, "enum_NEXT_SYNTAX"], [269, 272, 9, "enum_NEXT_SYNTAX"], [272, 273, 9, "enum_NEXT_SYNTAX"], [273, 275, 9, "enum_NEXT_SYNTAX"], [276, 182, 10, "enum_LAST_LEXICAL_USE"], [275, 276, 9, "enum_NEXT_SYNTAX"], [276, 277, 9, "enum_NEXT_SYNTAX"], [277, 278, 9, "enum_NEXT_SYNTAX"], [278, 279, 9, "enum_NEXT_SYNTAX"], [280, 251, 10, "enum_LAST_LEXICAL_USE"], [279, 280, 9, "enum_NEXT_SYNTAX"], [280, 281, 9, "enum_NEXT_SYNTAX"], [6, 8, 1, "enum_CFG_NEXT"], [8, 19, 1, "enum_CFG_NEXT"], [19, 30, 1, "enum_CFG_NEXT"], [30, 39, 1, "enum_CFG_NEXT"], [39, 48, 1, "enum_CFG_NEXT"], [48, 57, 1, "enum_CFG_NEXT"], [57, 66, 1, "enum_CFG_NEXT"], [66, 78, 1, "enum_CFG_NEXT"], [78, 90, 1, "enum_CFG_NEXT"], [90, 102, 1, "enum_CFG_NEXT"], [102, 118, 1, "enum_CFG_NEXT"], [118, 123, 1, "enum_CFG_NEXT"], [118, 139, 1, "enum_CFG_NEXT"], [123, 151, 1, "enum_CFG_NEXT"], [139, 151, 1, "enum_CFG_NEXT"], [151, 170, 1, "enum_CFG_NEXT"], [170, 174, 1, "enum_CFG_NEXT"], [170, 193, 1, "enum_CFG_NEXT"], [174, 181, 1, "enum_CFG_NEXT"], [181, 193, 1, "enum_CFG_NEXT"], [193, 275, 1, "enum_CFG_NEXT"], [193, 198, 1, "enum_CFG_NEXT"], [198, 209, 1, "enum_CFG_NEXT"], [209, 220, 1, "enum_CFG_NEXT"], [220, 235, 1, "enum_CFG_NEXT"], [235, 244, 1, "enum_CFG_NEXT"], [244, 255, 1, "enum_CFG_NEXT"], [15, 2, 3, "enum_LAST_WRITE"], [26, 15, 2, "enum_LAST_READ"], [26, 2, 3, "enum_LAST_WRITE"], [33, 26, 2, "enum_LAST_READ"], [33, 2, 3, "enum_LAST_WRITE"], [37, 9, 3, "enum_LAST_WRITE"], [42, 33, 2, "enum_LAST_READ"], [42, 2, 3, "enum_LAST_WRITE"], [46, 31, 3, "enum_LAST_WRITE"], [51, 42, 2, "enum_LAST_READ"], [51, 2, 3, "enum_LAST_WRITE"], [55, 20, 3, "enum_LAST_WRITE"], [60, 51, 2, "enum_LAST_READ"], [60, 2, 3, "enum_LAST_WRITE"], [64, 49, 3, "enum_LAST_WRITE"], [69, 46, 2, "enum_LAST_READ"], [69, 31, 3, "enum_LAST_WRITE"], [81, 67, 3, "enum_LAST_WRITE"], [79, 81, 2, "enum_LAST_READ"], [79, 67, 3, "enum_LAST_WRITE"], [93, 81, 2, "enum_LAST_READ"], [93, 79, 3, "enum_LAST_WRITE"], [105, 93, 2, "enum_LAST_READ"], [105, 79, 3, "enum_LAST_WRITE"], [117, 91, 3, "enum_LAST_WRITE"], [126, 60, 2, "enum_LAST_READ"], [126, 2, 3, "enum_LAST_WRITE"], [142, 60, 2, "enum_LAST_READ"], [142, 2, 3, "enum_LAST_WRITE"], [156, 124, 3, "enum_LAST_WRITE"], [156, 140, 3, "enum_LAST_WRITE"], [169, 126, 2, "enum_LAST_READ"], [169, 142, 2, "enum_LAST_READ"], [169, 2, 3, "enum_LAST_WRITE"], [179, 103, 3, "enum_LAST_WRITE"], [182, 175, 2, "enum_LAST_READ"], [186, 152, 3, "enum_LAST_WRITE"], [192, 186, 2, "enum_LAST_READ"], [192, 152, 3, "enum_LAST_WRITE"], [194, 179, 2, "enum_LAST_READ"], [194, 103, 3, "enum_LAST_WRITE"], [207, 192, 2, "enum_LAST_READ"], [207, 152, 3, "enum_LAST_WRITE"], [212, 40, 3, "enum_LAST_WRITE"], [216, 194, 2, "enum_LAST_READ"], [216, 103, 3, "enum_LAST_WRITE"], [218, 207, 2, "enum_LAST_READ"], [218, 152, 3, "enum_LAST_WRITE"], [221, 169, 2, "enum_LAST_READ"], [221, 2, 3, "enum_LAST_WRITE"], [225, 37, 2, "enum_LAST_READ"], [225, 9, 3, "enum_LAST_WRITE"], [227, 199, 3, "enum_LAST_WRITE"], [229, 210, 3, "enum_LAST_WRITE"], [231, 69, 2, "enum_LAST_READ"], [231, 31, 3, "enum_LAST_WRITE"], [242, 58, 3, "enum_LAST_WRITE"], [247, 236, 3, "enum_LAST_WRITE"], [251, 216, 2, "enum_LAST_READ"], [251, 103, 3, "enum_LAST_WRITE"], [253, 218, 2, "enum_LAST_READ"], [253, 152, 3, "enum_LAST_WRITE"], [245, 229, 2, "enum_LAST_READ"], [245, 210, 3, "enum_LAST_WRITE"], [256, 221, 2, "enum_LAST_READ"], [256, 2, 3, "enum_LAST_WRITE"], [260, 225, 2, "enum_LAST_READ"], [260, 9, 3, "enum_LAST_WRITE"], [262, 227, 2, "enum_LAST_READ"], [262, 199, 3, "enum_LAST_WRITE"], [264, 229, 2, "enum_LAST_READ"], [264, 245, 3, "enum_LAST_WRITE"], [266, 64, 2, "enum_LAST_READ"], [266, 49, 3, "enum_LAST_WRITE"], [276, 182, 2, "enum_LAST_READ"], [280, 194, 2, "enum_LAST_READ"], [280, 103, 3, "enum_LAST_WRITE"], [9, 15, 4, "enum_COMPUTED_FROM"], [20, 26, 4, "enum_COMPUTED_FROM"], [31, 37, 4, "enum_COMPUTED_FROM"], [31, 33, 4, "enum_COMPUTED_FROM"], [40, 46, 4, "enum_COMPUTED_FROM"], [40, 42, 4, "enum_COMPUTED_FROM"], [49, 55, 4, "enum_COMPUTED_FROM"], [49, 51, 4, "enum_COMPUTED_FROM"], [58, 64, 4, "enum_COMPUTED_FROM"], [58, 60, 4, "enum_COMPUTED_FROM"], [67, 69, 4, "enum_COMPUTED_FROM"], [79, 81, 4, "enum_COMPUTED_FROM"], [91, 93, 4, "enum_COMPUTED_FROM"], [103, 105, 4, "enum_COMPUTED_FROM"], [152, 154, 4, "enum_COMPUTED_FROM"], [152, 156, 4, "enum_COMPUTED_FROM"], [124, 126, 4, "enum_COMPUTED_FROM"], [140, 142, 4, "enum_COMPUTED_FROM"], [199, 207, 4, "enum_COMPUTED_FROM"], [199, 201, 4, "enum_COMPUTED_FROM"], [210, 216, 4, "enum_COMPUTED_FROM"], [210, 218, 4, "enum_COMPUTED_FROM"], [210, 212, 4, "enum_COMPUTED_FROM"], [236, 242, 4, "enum_COMPUTED_FROM"], [236, 238, 4, "enum_COMPUTED_FROM"], [245, 251, 4, "enum_COMPUTED_FROM"], [245, 253, 4, "enum_COMPUTED_FROM"], [245, 247, 4, "enum_COMPUTED_FROM"]], "error_location": 69, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/ludeeus/addonupdater.git", "old_path": "addonupdater/updater.py", "hash": "fe325d28af7bcade5a806009c943fc0afbca63b1", "code": "def base_image(self) -> None:\n    \"\"\"Updates for base image.\"\"\"\n    dockerfile: str = \"{}/Dockerfile\".format(self.name)\n    buildfile: str = \"{}/build.json\".format(self.name)\n\n    remote_dockerfile: Any = self.get_file_obj(dockerfile)\n    dockerfile_content: str = self.get_file_content(remote_dockerfile)\n\n    remote_buildfile: Any = self.get_file_obj(buildfile)\n    buildfile_content: str = self.get_file_content(remote_buildfile)\n\n    used_file: Any = remote_dockerfile.split('BUILD_FROM=hassioaddons/')[1]\n    used_file: Any = used_file.split('\n')[0]\n\n    base: str = used_file.split(':')[1]\n    version: str = used_file.split(':')[1]\n\n    if base == 'ubuntu-base':\n        repo = self.github.get_repo('hassio-addons/addon-ubuntu-base')\n    else:\n        repo = self.github.get_repo('hassio-addons/addon-base')\n\n    remote_version: str = list(repo.get_releases())[0].tag_name\n\n    if self.verbose:\n        print(\"Current version\", version)\n        print(\"Available version\", remote_version)\n\n    if remote_version != version:\n        msg: str = COMMIT_MSG.format('add-on base image', remote_version)\n\n        new_dockerfile: str = dockerfile_content.replace(version,\n                                                    remote_version)\n        self.commit(dockerfile, msg, new_dockerfile, remote_dockerfile.sha)\n\n        current_buildfile: str = json.loads(buildfile_content)\n        new_dockerfile: str = current_buildfile.replace(version,\n                                                remote_version)\n        self.commit(dockerfile, msg, new_dockerfile, remote_buildfile.sha)\n    else:\n        print(\"Base image already have the newest version\", version)\n", "rewrite": "ReplaceText(target='dockerfile_content' @(381,20)->(381,37))", "error_line": 11, "has_bug": true, "code_full": "import json\nfrom typing import Any, Dict\n\nCOMMIT_MSG: str = \"\"\n\nclass Class:\n    name: str\n    github: Any\n    verbose: bool\n\n    def get_file_obj(self, file: str) -> Any:\n        return \"\"\n\n    def get_file_content(self, file: Any) -> str:\n        return \"\"\n    \n    def commit(self, file: str, msg: str, content: str, sha: str):\n        pass\n\n    def base_image(self) -> None:\n        \"\"\"Updates for base image.\"\"\"\n        dockerfile: str = \"{}/Dockerfile\".format(self.name)\n        buildfile: str = \"{}/build.json\".format(self.name)\n\n        remote_dockerfile: Any = self.get_file_obj(dockerfile)\n        dockerfile_content: str = self.get_file_content(remote_dockerfile)\n\n        remote_buildfile: Any = self.get_file_obj(buildfile)\n        buildfile_content: str = self.get_file_content(remote_buildfile)\n\n        used_file: Any = remote_dockerfile.split('BUILD_FROM=hassioaddons/')[1]\n        used_file: Any = used_file.split('\n')[0]\n\n        base: str = used_file.split(':')[1]\n        version: str = used_file.split(':')[1]\n\n        if base == 'ubuntu-base':\n            repo = self.github.get_repo('hassio-addons/addon-ubuntu-base')\n        else:\n            repo = self.github.get_repo('hassio-addons/addon-base')\n\n        remote_version: str = list(repo.get_releases())[0].tag_name\n\n        if self.verbose:\n            print(\"Current version\", version)\n            print(\"Available version\", remote_version)\n\n        if remote_version != version:\n            msg: str = COMMIT_MSG.format('add-on base image', remote_version)\n\n            new_dockerfile: str = dockerfile_content.replace(version,\n                                                        remote_version)\n            self.commit(dockerfile, msg, new_dockerfile, remote_dockerfile.sha)\n\n            current_buildfile: str = json.loads(buildfile_content)\n            new_dockerfile: str = current_buildfile.replace(version,\n                                                    remote_version)\n            self.commit(dockerfile, msg, new_dockerfile, remote_buildfile.sha)\n        else:\n            print(\"Base image already have the newest version\", version)\n", "error_location_char": [455, 472], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def get_libraries(", "fastq", ",", "fasta", ",", "mapq", ",", "threads", ",", "verbose", ",", "limit", "=", "0", ")", ":", "#NEWLINE#", "#INDENT#", "'Return libraries'", "#NEWLINE#", "if", "(", "(", "not", "limit", ")", "or", "(", "limit", "<", "1000000.0", ")", ")", ":", "#NEWLINE#", "#INDENT#", "limit", "=", "1000000.0", "#NEWLINE#", "#UNINDENT#", "libdata", "=", "fastq2insert_size", "(", "sys", ".", "stderr", ",", "fastq", ",", "fasta", ",", "mapq", ",", "threads", ",", "(", "limit", "/", "100", ")", ",", "verbose", ")", "#NEWLINE#", "libraries", "=", "[", "]", "#NEWLINE#", "for", "(", "fq1", ",", "fq2", ",", "ismedian", ",", "ismean", ",", "isstd", ",", "pairs", ")", "in", "sorted", "(", "libdata", ",", "key", "=", "(", "lambda", "x", ":", "x", "[", "3", "]", ")", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "(", "not", "libraries", ")", "or", "(", "ismedian", ">", "(", "1.5", "*", "libraries", "[", "(", "-", "1", ")", "]", "[", "4", "]", "[", "0", "]", ")", ")", ")", ":", "#NEWLINE#", "#INDENT#", "libraries", ".", "append", "(", "[", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "]", ")", "#NEWLINE#", "i", "=", "1", "#NEWLINE#", "#UNINDENT#", "libraries", "[", "(", "-", "1", ")", "]", "[", "0", "]", ".", "append", "(", "(", "'lib%s'", "%", "i", ")", ")", "#NEWLINE#", "libraries", "[", "(", "-", "1", ")", "]", "[", "1", "]", ".", "append", "(", "open", "(", "fq1", ")", ")", "#NEWLINE#", "libraries", "[", "(", "-", "1", ")", "]", "[", "2", "]", ".", "append", "(", "open", "(", "fq2", ")", ")", "#NEWLINE#", "orientation", "=", "get_orientation", "(", "pairs", ",", "fq1", ",", "fq2", ")", "#NEWLINE#", "libraries", "[", "(", "-", "1", ")", "]", "[", "3", "]", ".", "append", "(", "orientation", ")", "#NEWLINE#", "libraries", "[", "(", "-", "1", ")", "]", "[", "4", "]", ".", "append", "(", "int", "(", "ismean", ")", ")", "#NEWLINE#", "stdfrac", "=", "(", "isstd", "/", "ismean", ")", "#NEWLINE#", "if", "(", "stdfrac", ">", "0.66", ")", ":", "#NEWLINE#", "#INDENT#", "sys", ".", "stderr", ".", "write", "(", "(", "'[WARNING] Highly variable insert size (%.f +- %.2f) in %s - %s!\\n'", "%", "(", "ismean", ",", "isstd", ",", "fq1", ",", "fq2", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "if", "(", "stdfrac", ">", "1", ")", ":", "#NEWLINE#", "#INDENT#", "stdfrac", "=", "1.0", "#NEWLINE#", "#UNINDENT#", "libraries", "[", "(", "-", "1", ")", "]", "[", "5", "]", ".", "append", "(", "stdfrac", ")", "#NEWLINE#", "i", "+=", "1", "#NEWLINE#", "#UNINDENT#", "return", "libraries"], "edges": [[1, 7, 7, "enum_FIELD"], [18, 19, 7, "enum_FIELD"], [21, 27, 7, "enum_FIELD"], [41, 53, 7, "enum_FIELD"], [66, 69, 7, "enum_FIELD"], [86, 79, 7, "enum_FIELD"], [86, 90, 7, "enum_FIELD"], [346, 347, 7, "enum_FIELD"], [36, 39, 7, "enum_FIELD"], [53, 44, 7, "enum_FIELD"], [90, 87, 7, "enum_FIELD"], [106, 112, 7, "enum_FIELD"], [167, 180, 7, "enum_FIELD"], [187, 200, 7, "enum_FIELD"], [206, 219, 7, "enum_FIELD"], [225, 231, 7, "enum_FIELD"], [236, 249, 7, "enum_FIELD"], [252, 265, 7, "enum_FIELD"], [271, 276, 7, "enum_FIELD"], [280, 283, 7, "enum_FIELD"], [311, 314, 7, "enum_FIELD"], [324, 337, 7, "enum_FIELD"], [340, 341, 7, "enum_FIELD"], [340, 343, 7, "enum_FIELD"], [24, 25, 7, "enum_FIELD"], [30, 29, 7, "enum_FIELD"], [47, 46, 7, "enum_FIELD"], [60, 59, 7, "enum_FIELD"], [60, 61, 7, "enum_FIELD"], [91, 94, 7, "enum_FIELD"], [137, 141, 7, "enum_FIELD"], [162, 165, 7, "enum_FIELD"], [180, 178, 7, "enum_FIELD"], [200, 198, 7, "enum_FIELD"], [219, 217, 7, "enum_FIELD"], [231, 228, 7, "enum_FIELD"], [249, 247, 7, "enum_FIELD"], [265, 263, 7, "enum_FIELD"], [276, 275, 7, "enum_FIELD"], [276, 277, 7, "enum_FIELD"], [283, 282, 7, "enum_FIELD"], [288, 294, 7, "enum_FIELD"], [314, 313, 7, "enum_FIELD"], [319, 322, 7, "enum_FIELD"], [337, 335, 7, "enum_FIELD"], [94, 98, 7, "enum_FIELD"], [109, 110, 7, "enum_FIELD"], [115, 114, 7, "enum_FIELD"], [141, 139, 7, "enum_FIELD"], [178, 175, 7, "enum_FIELD"], [183, 182, 7, "enum_FIELD"], [183, 184, 7, "enum_FIELD"], [198, 195, 7, "enum_FIELD"], [202, 201, 7, "enum_FIELD"], [217, 214, 7, "enum_FIELD"], [221, 220, 7, "enum_FIELD"], [247, 244, 7, "enum_FIELD"], [263, 260, 7, "enum_FIELD"], [267, 266, 7, "enum_FIELD"], [294, 292, 7, "enum_FIELD"], [335, 332, 7, "enum_FIELD"], [98, 97, 7, "enum_FIELD"], [98, 99, 7, "enum_FIELD"], [118, 117, 7, "enum_FIELD"], [118, 129, 7, "enum_FIELD"], [139, 138, 7, "enum_FIELD"], [175, 169, 7, "enum_FIELD"], [175, 176, 7, "enum_FIELD"], [195, 189, 7, "enum_FIELD"], [195, 196, 7, "enum_FIELD"], [214, 208, 7, "enum_FIELD"], [214, 215, 7, "enum_FIELD"], [244, 238, 7, "enum_FIELD"], [244, 245, 7, "enum_FIELD"], [260, 254, 7, "enum_FIELD"], [260, 261, 7, "enum_FIELD"], [292, 290, 7, "enum_FIELD"], [297, 296, 7, "enum_FIELD"], [297, 302, 7, "enum_FIELD"], [332, 326, 7, "enum_FIELD"], [332, 333, 7, "enum_FIELD"], [129, 126, 7, "enum_FIELD"], [129, 130, 7, "enum_FIELD"], [169, 168, 7, "enum_FIELD"], [169, 171, 7, "enum_FIELD"], [189, 188, 7, "enum_FIELD"], [189, 191, 7, "enum_FIELD"], [208, 207, 7, "enum_FIELD"], [208, 210, 7, "enum_FIELD"], [238, 237, 7, "enum_FIELD"], [238, 240, 7, "enum_FIELD"], [254, 253, 7, "enum_FIELD"], [254, 256, 7, "enum_FIELD"], [290, 289, 7, "enum_FIELD"], [326, 325, 7, "enum_FIELD"], [326, 328, 7, "enum_FIELD"], [126, 120, 7, "enum_FIELD"], [126, 127, 7, "enum_FIELD"], [171, 172, 7, "enum_FIELD"], [191, 192, 7, "enum_FIELD"], [210, 211, 7, "enum_FIELD"], [240, 241, 7, "enum_FIELD"], [256, 257, 7, "enum_FIELD"], [328, 329, 7, "enum_FIELD"], [120, 119, 7, "enum_FIELD"], [120, 122, 7, "enum_FIELD"], [122, 123, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [25, 12, 10, "enum_LAST_LEXICAL_USE"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [29, 25, 10, "enum_LAST_LEXICAL_USE"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 36, 9, "enum_NEXT_SYNTAX"], [37, 29, 10, "enum_LAST_LEXICAL_USE"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [50, 2, 10, "enum_LAST_LEXICAL_USE"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [52, 4, 10, "enum_LAST_LEXICAL_USE"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [54, 6, 10, "enum_LAST_LEXICAL_USE"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [56, 8, 10, "enum_LAST_LEXICAL_USE"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [59, 37, 10, "enum_LAST_LEXICAL_USE"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [64, 10, 10, "enum_LAST_LEXICAL_USE"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [89, 42, 10, "enum_LAST_LEXICAL_USE"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [97, 95, 10, "enum_LAST_LEXICAL_USE"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [110, 67, 10, "enum_LAST_LEXICAL_USE"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [114, 78, 10, "enum_LAST_LEXICAL_USE"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [119, 110, 10, "enum_LAST_LEXICAL_USE"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 137, 9, "enum_NEXT_SYNTAX"], [138, 119, 10, "enum_LAST_LEXICAL_USE"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 167, 9, "enum_NEXT_SYNTAX"], [168, 138, 10, "enum_LAST_LEXICAL_USE"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [184, 163, 10, "enum_LAST_LEXICAL_USE"], [183, 184, 9, "enum_NEXT_SYNTAX"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [188, 168, 10, "enum_LAST_LEXICAL_USE"], [187, 188, 9, "enum_NEXT_SYNTAX"], [188, 189, 9, "enum_NEXT_SYNTAX"], [189, 190, 9, "enum_NEXT_SYNTAX"], [190, 191, 9, "enum_NEXT_SYNTAX"], [191, 192, 9, "enum_NEXT_SYNTAX"], [192, 193, 9, "enum_NEXT_SYNTAX"], [193, 194, 9, "enum_NEXT_SYNTAX"], [194, 195, 9, "enum_NEXT_SYNTAX"], [195, 196, 9, "enum_NEXT_SYNTAX"], [196, 197, 9, "enum_NEXT_SYNTAX"], [197, 198, 9, "enum_NEXT_SYNTAX"], [198, 199, 9, "enum_NEXT_SYNTAX"], [199, 200, 9, "enum_NEXT_SYNTAX"], [200, 201, 9, "enum_NEXT_SYNTAX"], [201, 202, 9, "enum_NEXT_SYNTAX"], [203, 74, 10, "enum_LAST_LEXICAL_USE"], [202, 203, 9, "enum_NEXT_SYNTAX"], [203, 204, 9, "enum_NEXT_SYNTAX"], [204, 205, 9, "enum_NEXT_SYNTAX"], [205, 206, 9, "enum_NEXT_SYNTAX"], [207, 188, 10, "enum_LAST_LEXICAL_USE"], [206, 207, 9, "enum_NEXT_SYNTAX"], [207, 208, 9, "enum_NEXT_SYNTAX"], [208, 209, 9, "enum_NEXT_SYNTAX"], [209, 210, 9, "enum_NEXT_SYNTAX"], [210, 211, 9, "enum_NEXT_SYNTAX"], [211, 212, 9, "enum_NEXT_SYNTAX"], [212, 213, 9, "enum_NEXT_SYNTAX"], [213, 214, 9, "enum_NEXT_SYNTAX"], [214, 215, 9, "enum_NEXT_SYNTAX"], [215, 216, 9, "enum_NEXT_SYNTAX"], [216, 217, 9, "enum_NEXT_SYNTAX"], [217, 218, 9, "enum_NEXT_SYNTAX"], [218, 219, 9, "enum_NEXT_SYNTAX"], [220, 201, 10, "enum_LAST_LEXICAL_USE"], [219, 220, 9, "enum_NEXT_SYNTAX"], [220, 221, 9, "enum_NEXT_SYNTAX"], [222, 76, 10, "enum_LAST_LEXICAL_USE"], [221, 222, 9, "enum_NEXT_SYNTAX"], [222, 223, 9, "enum_NEXT_SYNTAX"], [223, 224, 9, "enum_NEXT_SYNTAX"], [224, 225, 9, "enum_NEXT_SYNTAX"], [225, 226, 9, "enum_NEXT_SYNTAX"], [226, 227, 9, "enum_NEXT_SYNTAX"], [227, 228, 9, "enum_NEXT_SYNTAX"], [228, 229, 9, "enum_NEXT_SYNTAX"], [230, 84, 10, "enum_LAST_LEXICAL_USE"], [229, 230, 9, "enum_NEXT_SYNTAX"], [230, 231, 9, "enum_NEXT_SYNTAX"], [232, 203, 10, "enum_LAST_LEXICAL_USE"], [231, 232, 9, "enum_NEXT_SYNTAX"], [232, 233, 9, "enum_NEXT_SYNTAX"], [234, 222, 10, "enum_LAST_LEXICAL_USE"], [233, 234, 9, "enum_NEXT_SYNTAX"], [234, 235, 9, "enum_NEXT_SYNTAX"], [235, 236, 9, "enum_NEXT_SYNTAX"], [237, 207, 10, "enum_LAST_LEXICAL_USE"], [236, 237, 9, "enum_NEXT_SYNTAX"], [237, 238, 9, "enum_NEXT_SYNTAX"], [238, 239, 9, "enum_NEXT_SYNTAX"], [239, 240, 9, "enum_NEXT_SYNTAX"], [240, 241, 9, "enum_NEXT_SYNTAX"], [241, 242, 9, "enum_NEXT_SYNTAX"], [242, 243, 9, "enum_NEXT_SYNTAX"], [243, 244, 9, "enum_NEXT_SYNTAX"], [244, 245, 9, "enum_NEXT_SYNTAX"], [245, 246, 9, "enum_NEXT_SYNTAX"], [246, 247, 9, "enum_NEXT_SYNTAX"], [247, 248, 9, "enum_NEXT_SYNTAX"], [248, 249, 9, "enum_NEXT_SYNTAX"], [250, 226, 10, "enum_LAST_LEXICAL_USE"], [249, 250, 9, "enum_NEXT_SYNTAX"], [250, 251, 9, "enum_NEXT_SYNTAX"], [251, 252, 9, "enum_NEXT_SYNTAX"], [253, 237, 10, "enum_LAST_LEXICAL_USE"], [252, 253, 9, "enum_NEXT_SYNTAX"], [253, 254, 9, "enum_NEXT_SYNTAX"], [254, 255, 9, "enum_NEXT_SYNTAX"], [255, 256, 9, "enum_NEXT_SYNTAX"], [256, 257, 9, "enum_NEXT_SYNTAX"], [257, 258, 9, "enum_NEXT_SYNTAX"], [258, 259, 9, "enum_NEXT_SYNTAX"], [259, 260, 9, "enum_NEXT_SYNTAX"], [260, 261, 9, "enum_NEXT_SYNTAX"], [261, 262, 9, "enum_NEXT_SYNTAX"], [262, 263, 9, "enum_NEXT_SYNTAX"], [263, 264, 9, "enum_NEXT_SYNTAX"], [264, 265, 9, "enum_NEXT_SYNTAX"], [265, 266, 9, "enum_NEXT_SYNTAX"], [266, 267, 9, "enum_NEXT_SYNTAX"], [268, 80, 10, "enum_LAST_LEXICAL_USE"], [267, 268, 9, "enum_NEXT_SYNTAX"], [268, 269, 9, "enum_NEXT_SYNTAX"], [269, 270, 9, "enum_NEXT_SYNTAX"], [270, 271, 9, "enum_NEXT_SYNTAX"], [271, 272, 9, "enum_NEXT_SYNTAX"], [272, 273, 9, "enum_NEXT_SYNTAX"], [273, 274, 9, "enum_NEXT_SYNTAX"], [275, 82, 10, "enum_LAST_LEXICAL_USE"], [274, 275, 9, "enum_NEXT_SYNTAX"], [275, 276, 9, "enum_NEXT_SYNTAX"], [277, 268, 10, "enum_LAST_LEXICAL_USE"], [276, 277, 9, "enum_NEXT_SYNTAX"], [277, 278, 9, "enum_NEXT_SYNTAX"], [278, 280, 9, "enum_NEXT_SYNTAX"], [280, 281, 9, "enum_NEXT_SYNTAX"], [282, 272, 10, "enum_LAST_LEXICAL_USE"], [281, 282, 9, "enum_NEXT_SYNTAX"], [282, 283, 9, "enum_NEXT_SYNTAX"], [283, 284, 9, "enum_NEXT_SYNTAX"], [284, 285, 9, "enum_NEXT_SYNTAX"], [285, 286, 9, "enum_NEXT_SYNTAX"], [286, 288, 9, "enum_NEXT_SYNTAX"], [289, 46, 10, "enum_LAST_LEXICAL_USE"], [288, 289, 9, "enum_NEXT_SYNTAX"], [289, 290, 9, "enum_NEXT_SYNTAX"], [290, 291, 9, "enum_NEXT_SYNTAX"], [291, 292, 9, "enum_NEXT_SYNTAX"], [292, 293, 9, "enum_NEXT_SYNTAX"], [293, 294, 9, "enum_NEXT_SYNTAX"], [294, 295, 9, "enum_NEXT_SYNTAX"], [295, 296, 9, "enum_NEXT_SYNTAX"], [296, 297, 9, "enum_NEXT_SYNTAX"], [297, 298, 9, "enum_NEXT_SYNTAX"], [299, 277, 10, "enum_LAST_LEXICAL_USE"], [298, 299, 9, "enum_NEXT_SYNTAX"], [299, 300, 9, "enum_NEXT_SYNTAX"], [301, 275, 10, "enum_LAST_LEXICAL_USE"], [300, 301, 9, "enum_NEXT_SYNTAX"], [301, 302, 9, "enum_NEXT_SYNTAX"], [303, 232, 10, "enum_LAST_LEXICAL_USE"], [302, 303, 9, "enum_NEXT_SYNTAX"], [303, 304, 9, "enum_NEXT_SYNTAX"], [305, 234, 10, "enum_LAST_LEXICAL_USE"], [304, 305, 9, "enum_NEXT_SYNTAX"], [305, 306, 9, "enum_NEXT_SYNTAX"], [306, 307, 9, "enum_NEXT_SYNTAX"], [307, 308, 9, "enum_NEXT_SYNTAX"], [308, 311, 9, "enum_NEXT_SYNTAX"], [311, 312, 9, "enum_NEXT_SYNTAX"], [313, 282, 10, "enum_LAST_LEXICAL_USE"], [312, 313, 9, "enum_NEXT_SYNTAX"], [313, 314, 9, "enum_NEXT_SYNTAX"], [314, 315, 9, "enum_NEXT_SYNTAX"], [315, 316, 9, "enum_NEXT_SYNTAX"], [316, 317, 9, "enum_NEXT_SYNTAX"], [317, 319, 9, "enum_NEXT_SYNTAX"], [320, 313, 10, "enum_LAST_LEXICAL_USE"], [319, 320, 9, "enum_NEXT_SYNTAX"], [320, 321, 9, "enum_NEXT_SYNTAX"], [321, 322, 9, "enum_NEXT_SYNTAX"], [322, 324, 9, "enum_NEXT_SYNTAX"], [325, 253, 10, "enum_LAST_LEXICAL_USE"], [324, 325, 9, "enum_NEXT_SYNTAX"], [325, 326, 9, "enum_NEXT_SYNTAX"], [326, 327, 9, "enum_NEXT_SYNTAX"], [327, 328, 9, "enum_NEXT_SYNTAX"], [328, 329, 9, "enum_NEXT_SYNTAX"], [329, 330, 9, "enum_NEXT_SYNTAX"], [330, 331, 9, "enum_NEXT_SYNTAX"], [331, 332, 9, "enum_NEXT_SYNTAX"], [332, 333, 9, "enum_NEXT_SYNTAX"], [333, 334, 9, "enum_NEXT_SYNTAX"], [334, 335, 9, "enum_NEXT_SYNTAX"], [335, 336, 9, "enum_NEXT_SYNTAX"], [336, 337, 9, "enum_NEXT_SYNTAX"], [338, 320, 10, "enum_LAST_LEXICAL_USE"], [337, 338, 9, "enum_NEXT_SYNTAX"], [338, 339, 9, "enum_NEXT_SYNTAX"], [339, 340, 9, "enum_NEXT_SYNTAX"], [341, 184, 10, "enum_LAST_LEXICAL_USE"], [340, 341, 9, "enum_NEXT_SYNTAX"], [341, 342, 9, "enum_NEXT_SYNTAX"], [342, 343, 9, "enum_NEXT_SYNTAX"], [343, 346, 9, "enum_NEXT_SYNTAX"], [347, 325, 10, "enum_LAST_LEXICAL_USE"], [346, 347, 9, "enum_NEXT_SYNTAX"], [14, 1, 1, "enum_CFG_NEXT"], [7, 18, 1, "enum_CFG_NEXT"], [18, 27, 1, "enum_CFG_NEXT"], [27, 41, 1, "enum_CFG_NEXT"], [27, 36, 1, "enum_CFG_NEXT"], [36, 41, 1, "enum_CFG_NEXT"], [41, 66, 1, "enum_CFG_NEXT"], [66, 90, 1, "enum_CFG_NEXT"], [90, 79, 1, "enum_CFG_NEXT"], [79, 112, 1, "enum_CFG_NEXT"], [79, 346, 1, "enum_CFG_NEXT"], [112, 137, 1, "enum_CFG_NEXT"], [112, 167, 1, "enum_CFG_NEXT"], [137, 162, 1, "enum_CFG_NEXT"], [162, 167, 1, "enum_CFG_NEXT"], [167, 187, 1, "enum_CFG_NEXT"], [187, 206, 1, "enum_CFG_NEXT"], [206, 225, 1, "enum_CFG_NEXT"], [225, 236, 1, "enum_CFG_NEXT"], [236, 252, 1, "enum_CFG_NEXT"], [252, 271, 1, "enum_CFG_NEXT"], [271, 283, 1, "enum_CFG_NEXT"], [283, 314, 1, "enum_CFG_NEXT"], [283, 288, 1, "enum_CFG_NEXT"], [288, 314, 1, "enum_CFG_NEXT"], [314, 319, 1, "enum_CFG_NEXT"], [314, 324, 1, "enum_CFG_NEXT"], [319, 324, 1, "enum_CFG_NEXT"], [324, 340, 1, "enum_CFG_NEXT"], [340, 79, 1, "enum_CFG_NEXT"], [25, 12, 3, "enum_LAST_WRITE"], [29, 25, 2, "enum_LAST_READ"], [29, 12, 3, "enum_LAST_WRITE"], [37, 29, 2, "enum_LAST_READ"], [37, 12, 3, "enum_LAST_WRITE"], [50, 2, 3, "enum_LAST_WRITE"], [52, 4, 3, "enum_LAST_WRITE"], [54, 6, 3, "enum_LAST_WRITE"], [56, 8, 3, "enum_LAST_WRITE"], [59, 29, 2, "enum_LAST_READ"], [59, 37, 3, "enum_LAST_WRITE"], [59, 12, 3, "enum_LAST_WRITE"], [64, 10, 3, "enum_LAST_WRITE"], [89, 42, 3, "enum_LAST_WRITE"], [97, 95, 3, "enum_LAST_WRITE"], [74, 303, 2, "enum_LAST_READ"], [74, 232, 2, "enum_LAST_READ"], [74, 74, 3, "enum_LAST_WRITE"], [76, 234, 2, "enum_LAST_READ"], [76, 305, 2, "enum_LAST_READ"], [76, 76, 3, "enum_LAST_WRITE"], [78, 114, 2, "enum_LAST_READ"], [78, 78, 3, "enum_LAST_WRITE"], [80, 299, 2, "enum_LAST_READ"], [80, 277, 2, "enum_LAST_READ"], [80, 80, 3, "enum_LAST_WRITE"], [82, 275, 2, "enum_LAST_READ"], [82, 301, 2, "enum_LAST_READ"], [82, 82, 3, "enum_LAST_WRITE"], [84, 230, 2, "enum_LAST_READ"], [84, 84, 3, "enum_LAST_WRITE"], [110, 325, 2, "enum_LAST_READ"], [110, 67, 3, "enum_LAST_WRITE"], [114, 114, 2, "enum_LAST_READ"], [114, 78, 3, "enum_LAST_WRITE"], [119, 110, 2, "enum_LAST_READ"], [119, 67, 3, "enum_LAST_WRITE"], [138, 119, 2, "enum_LAST_READ"], [138, 67, 3, "enum_LAST_WRITE"], [163, 341, 2, "enum_LAST_READ"], [163, 341, 3, "enum_LAST_WRITE"], [168, 119, 2, "enum_LAST_READ"], [168, 138, 2, "enum_LAST_READ"], [168, 67, 3, "enum_LAST_WRITE"], [184, 341, 2, "enum_LAST_READ"], [184, 163, 3, "enum_LAST_WRITE"], [184, 341, 3, "enum_LAST_WRITE"], [188, 168, 2, "enum_LAST_READ"], [188, 67, 3, "enum_LAST_WRITE"], [201, 220, 2, "enum_LAST_READ"], [203, 303, 2, "enum_LAST_READ"], [203, 232, 2, "enum_LAST_READ"], [203, 74, 3, "enum_LAST_WRITE"], [207, 188, 2, "enum_LAST_READ"], [207, 67, 3, "enum_LAST_WRITE"], [220, 201, 2, "enum_LAST_READ"], [222, 234, 2, "enum_LAST_READ"], [222, 305, 2, "enum_LAST_READ"], [222, 76, 3, "enum_LAST_WRITE"], [228, 228, 2, "enum_LAST_READ"], [230, 230, 2, "enum_LAST_READ"], [230, 84, 3, "enum_LAST_WRITE"], [232, 203, 2, "enum_LAST_READ"], [232, 74, 3, "enum_LAST_WRITE"], [234, 222, 2, "enum_LAST_READ"], [234, 76, 3, "enum_LAST_WRITE"], [226, 250, 2, "enum_LAST_READ"], [226, 226, 3, "enum_LAST_WRITE"], [237, 207, 2, "enum_LAST_READ"], [237, 67, 3, "enum_LAST_WRITE"], [250, 250, 2, "enum_LAST_READ"], [250, 226, 3, "enum_LAST_WRITE"], [253, 237, 2, "enum_LAST_READ"], [253, 67, 3, "enum_LAST_WRITE"], [266, 266, 2, "enum_LAST_READ"], [268, 299, 2, "enum_LAST_READ"], [268, 277, 2, "enum_LAST_READ"], [268, 80, 3, "enum_LAST_WRITE"], [275, 275, 2, "enum_LAST_READ"], [275, 301, 2, "enum_LAST_READ"], [275, 82, 3, "enum_LAST_WRITE"], [277, 268, 2, "enum_LAST_READ"], [277, 80, 3, "enum_LAST_WRITE"], [272, 338, 2, "enum_LAST_READ"], [272, 320, 3, "enum_LAST_WRITE"], [272, 272, 3, "enum_LAST_WRITE"], [282, 338, 2, "enum_LAST_READ"], [282, 272, 3, "enum_LAST_WRITE"], [289, 289, 2, "enum_LAST_READ"], [289, 46, 2, "enum_LAST_READ"], [299, 277, 2, "enum_LAST_READ"], [299, 80, 3, "enum_LAST_WRITE"], [301, 275, 2, "enum_LAST_READ"], [301, 82, 3, "enum_LAST_WRITE"], [303, 232, 2, "enum_LAST_READ"], [303, 74, 3, "enum_LAST_WRITE"], [305, 234, 2, "enum_LAST_READ"], [305, 76, 3, "enum_LAST_WRITE"], [313, 282, 2, "enum_LAST_READ"], [313, 272, 3, "enum_LAST_WRITE"], [320, 313, 2, "enum_LAST_READ"], [320, 272, 3, "enum_LAST_WRITE"], [325, 253, 2, "enum_LAST_READ"], [325, 67, 3, "enum_LAST_WRITE"], [338, 313, 2, "enum_LAST_READ"], [338, 320, 3, "enum_LAST_WRITE"], [338, 272, 3, "enum_LAST_WRITE"], [341, 184, 2, "enum_LAST_READ"], [341, 163, 3, "enum_LAST_WRITE"], [341, 341, 3, "enum_LAST_WRITE"], [341, 341, 2, "enum_LAST_READ"], [341, 163, 3, "enum_LAST_WRITE"], [341, 341, 3, "enum_LAST_WRITE"], [347, 325, 2, "enum_LAST_READ"], [347, 67, 3, "enum_LAST_WRITE"], [42, 44, 4, "enum_COMPUTED_FROM"], [42, 50, 4, "enum_COMPUTED_FROM"], [42, 52, 4, "enum_COMPUTED_FROM"], [42, 54, 4, "enum_COMPUTED_FROM"], [42, 56, 4, "enum_COMPUTED_FROM"], [42, 64, 4, "enum_COMPUTED_FROM"], [42, 46, 4, "enum_COMPUTED_FROM"], [42, 59, 4, "enum_COMPUTED_FROM"], [226, 228, 4, "enum_COMPUTED_FROM"], [226, 230, 4, "enum_COMPUTED_FROM"], [226, 232, 4, "enum_COMPUTED_FROM"], [226, 234, 4, "enum_COMPUTED_FROM"], [272, 275, 4, "enum_COMPUTED_FROM"], [272, 277, 4, "enum_COMPUTED_FROM"]], "error_location": 114, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/lpryszcz/redundans.git", "old_path": "redundans.py", "hash": "4a62bd283b434b2faebbab9b82fd6a333bfad8ea", "code": "def get_libraries(fastq: Any, fasta: Any, mapq: Any, threads: Any, verbose: Any, limit: float=0):\n    \"\"\"Return libraries\"\"\"\n    # otherwise process all reads\n    if not limit or limit<10e5:\n        limit = 10e5\n    \n    # get libraries statistics using 1% of mapped read limit\n    libdata = fastq2insert_size(sys.stderr, fastq, fasta, mapq, threads,                                 limit/100, verbose)\n    # separate paired-end & mate pairs\n    ## also separate 300 and 600 paired-ends\n    libraries: List[List] = []\n    # add libraries strating from lowest insert size\n    for fq1, fq2, ismedian, ismean, isstd, pairs in sorted(libdata, key=lambda x: x[3]):\n        # add new library set if \n        if not libraries or ismedian > 1.5*libraries[-1][4][0]:\n            # libnames, libFs, libRs, orientations, libIS, libISStDev\n            libraries.append([[], [], [], [], [], []])\n            i = 1\n        # add libname & fastq files\n        libraries[-1][0].append(\"lib%s\"%i)\n        libraries[-1][1].append(open(fq1))\n        libraries[-1][2].append(open(fq2))\n        # orientation\n        orientation = get_orientation(pairs, fq1, fq2)\n        libraries[-1][3].append(orientation)\n        # insert size information\n        libraries[-1][4].append(int(ismean))\n        stdfrac = isstd / ismean\n        # capture large stdev\n        if stdfrac > 0.66:\n            sys.stderr.write(\"[WARNING] Highly variable insert size (%.f +- %.2f) in %s - %s!\n\"%(ismean, isstd, fq1, fq2))\n        # SSSPACE accepts stdfrac 0-1.0\n        if stdfrac > 1:\n            stdfrac = 1.0\n        libraries[-1][5].append(stdfrac)\n        # update counter\n        i += 1\n    return libraries\n", "rewrite": "ReplaceText(target='ismean' @(68,28)->(68,36))", "error_line": 15, "has_bug": true, "code_full": "import sys\nfrom typing import Any, List, Tuple\n\n\ndef fastq2insert_size(stderr: Any, fastq: Any, fasta: Any, mapq: Any, threads: Any, limit: float, verbose: Any) -> List[Tuple[str, str, float, float, float, Any]]:\n    return []\n\ndef get_orientation(pairs: Any, fq1: str, fq2: str) -> str:\n    return \"\"\n\ndef get_libraries(fastq: Any, fasta: Any, mapq: Any, threads: Any, verbose: Any, limit: float=0):\n    \"\"\"Return libraries\"\"\"\n    # otherwise process all reads\n    if not limit or limit<10e5:\n        limit = 10e5\n    \n    # get libraries statistics using 1% of mapped read limit\n    libdata = fastq2insert_size(sys.stderr, fastq, fasta, mapq, threads,                                 limit/100, verbose)\n    # separate paired-end & mate pairs\n    ## also separate 300 and 600 paired-ends\n    libraries: List[List] = []\n    # add libraries strating from lowest insert size\n    for fq1, fq2, ismedian, ismean, isstd, pairs in sorted(libdata, key=lambda x: x[3]):\n        # add new library set if \n        if not libraries or ismedian > 1.5*libraries[-1][4][0]:\n            # libnames, libFs, libRs, orientations, libIS, libISStDev\n            libraries.append([[], [], [], [], [], []])\n            i = 1\n        # add libname & fastq files\n        libraries[-1][0].append(\"lib%s\"%i)\n        libraries[-1][1].append(open(fq1))\n        libraries[-1][2].append(open(fq2))\n        # orientation\n        orientation = get_orientation(pairs, fq1, fq2)\n        libraries[-1][3].append(orientation)\n        # insert size information\n        libraries[-1][4].append(int(ismean))\n        stdfrac = isstd / ismean\n        # capture large stdev\n        if stdfrac > 0.66:\n            sys.stderr.write(\"[WARNING] Highly variable insert size (%.f +- %.2f) in %s - %s!\n\"%(ismean, isstd, fq1, fq2))\n        # SSSPACE accepts stdfrac 0-1.0\n        if stdfrac > 1:\n            stdfrac = 1.0\n        libraries[-1][5].append(stdfrac)\n        # update counter\n        i += 1\n    return libraries\n", "error_location_char": [722, 730], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def canClaimBeAdded(", "item", ",", "claim", ",", "checkDupe", "=", "True", ")", ":", "#NEWLINE#", "#INDENT#", "prop", "=", "WDProperty", "(", "item", ".", "repo", ",", "claim", ".", "getID", "(", ")", ")", "#NEWLINE#", "prop", ".", "get", "(", ")", "#NEWLINE#", "if", "(", "not", "hasattr", "(", "item", ",", "'_content'", ")", ")", ":", "#NEWLINE#", "#INDENT#", "item", ".", "get", "(", ")", "#NEWLINE#", "#UNINDENT#", "if", "checkDupe", ":", "#NEWLINE#", "#INDENT#", "if", "(", "prop", ".", "getID", "(", ")", "in", "item", ".", "claims", ")", ":", "#NEWLINE#", "#INDENT#", "for", "c", "in", "item", ".", "claims", "[", "prop", ".", "getID", "(", ")", "]", ":", "#NEWLINE#", "#INDENT#", "if", "(", "c", ".", "getTarget", "(", ")", ".", "getID", "(", ")", "==", "claim", ".", "getTarget", "(", ")", ".", "getID", "(", ")", ")", ":", "#NEWLINE#", "#INDENT#", "return", "(", "False", ",", "'checkDupe'", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "if", "(", "(", "'format'", "in", "prop", ".", "constraints", "(", ")", ")", "and", "(", "prop", ".", "getType", "(", ")", "==", "'string'", ")", ")", ":", "#NEWLINE#", "#INDENT#", "match", "=", "re", ".", "match", "(", "prop", ".", "constraints", "(", ")", "[", "'format'", "]", ",", "claim", ".", "getTarget", "(", ")", ")", "#NEWLINE#", "if", "(", "(", "not", "match", ")", "or", "(", "match", ".", "group", "(", "0", ")", "!=", "claim", ".", "getTarget", "(", ")", ")", ")", ":", "#NEWLINE#", "#INDENT#", "return", "(", "False", ",", "'format'", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "if", "(", "(", "'oneof'", "in", "prop", ".", "constraints", "(", ")", ")", "and", "(", "prop", ".", "getType", "(", ")", "==", "'wikibase-item'", ")", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "not", "(", "claim", ".", "getTarget", "(", ")", ".", "getID", "(", ")", "in", "prop", ".", "constraints", "(", ")", "[", "'oneof'", "]", ")", ")", ":", "#NEWLINE#", "#INDENT#", "return", "(", "False", ",", "'oneof'", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "if", "(", "'single'", "in", "prop", ".", "constraints", "(", ")", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "item", ".", "getID", "(", ")", "in", "item", ".", "claims", ")", ":", "#NEWLINE#", "#INDENT#", "return", "(", "False", ",", "'single'", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "return", "(", "True", ",", "None", ")"], "edges": [[1, 5, 7, "enum_FIELD"], [12, 20, 7, "enum_FIELD"], [27, 31, 7, "enum_FIELD"], [34, 36, 7, "enum_FIELD"], [54, 55, 7, "enum_FIELD"], [126, 137, 7, "enum_FIELD"], [207, 218, 7, "enum_FIELD"], [268, 271, 7, "enum_FIELD"], [305, 308, 7, "enum_FIELD"], [20, 15, 7, "enum_FIELD"], [31, 29, 7, "enum_FIELD"], [36, 40, 7, "enum_FIELD"], [46, 50, 7, "enum_FIELD"], [59, 66, 7, "enum_FIELD"], [150, 165, 7, "enum_FIELD"], [173, 179, 7, "enum_FIELD"], [232, 234, 7, "enum_FIELD"], [271, 270, 7, "enum_FIELD"], [281, 288, 7, "enum_FIELD"], [18, 17, 7, "enum_FIELD"], [24, 22, 7, "enum_FIELD"], [29, 28, 7, "enum_FIELD"], [40, 37, 7, "enum_FIELD"], [50, 48, 7, "enum_FIELD"], [66, 64, 7, "enum_FIELD"], [76, 75, 7, "enum_FIELD"], [76, 80, 7, "enum_FIELD"], [130, 129, 7, "enum_FIELD"], [144, 142, 7, "enum_FIELD"], [165, 154, 7, "enum_FIELD"], [198, 201, 7, "enum_FIELD"], [211, 210, 7, "enum_FIELD"], [225, 223, 7, "enum_FIELD"], [234, 245, 7, "enum_FIELD"], [259, 262, 7, "enum_FIELD"], [275, 273, 7, "enum_FIELD"], [288, 286, 7, "enum_FIELD"], [296, 299, 7, "enum_FIELD"], [22, 21, 7, "enum_FIELD"], [48, 47, 7, "enum_FIELD"], [64, 62, 7, "enum_FIELD"], [68, 67, 7, "enum_FIELD"], [80, 78, 7, "enum_FIELD"], [80, 84, 7, "enum_FIELD"], [90, 101, 7, "enum_FIELD"], [134, 132, 7, "enum_FIELD"], [142, 140, 7, "enum_FIELD"], [154, 153, 7, "enum_FIELD"], [162, 160, 7, "enum_FIELD"], [162, 163, 7, "enum_FIELD"], [169, 167, 7, "enum_FIELD"], [176, 177, 7, "enum_FIELD"], [187, 184, 7, "enum_FIELD"], [215, 213, 7, "enum_FIELD"], [223, 221, 7, "enum_FIELD"], [245, 243, 7, "enum_FIELD"], [273, 272, 7, "enum_FIELD"], [286, 284, 7, "enum_FIELD"], [290, 289, 7, "enum_FIELD"], [62, 61, 7, "enum_FIELD"], [78, 77, 7, "enum_FIELD"], [84, 82, 7, "enum_FIELD"], [101, 99, 7, "enum_FIELD"], [115, 118, 7, "enum_FIELD"], [132, 131, 7, "enum_FIELD"], [140, 139, 7, "enum_FIELD"], [160, 158, 7, "enum_FIELD"], [167, 166, 7, "enum_FIELD"], [184, 182, 7, "enum_FIELD"], [191, 189, 7, "enum_FIELD"], [213, 212, 7, "enum_FIELD"], [221, 220, 7, "enum_FIELD"], [243, 241, 7, "enum_FIELD"], [251, 249, 7, "enum_FIELD"], [251, 252, 7, "enum_FIELD"], [284, 283, 7, "enum_FIELD"], [82, 81, 7, "enum_FIELD"], [99, 97, 7, "enum_FIELD"], [109, 107, 7, "enum_FIELD"], [158, 157, 7, "enum_FIELD"], [182, 181, 7, "enum_FIELD"], [189, 188, 7, "enum_FIELD"], [241, 239, 7, "enum_FIELD"], [249, 247, 7, "enum_FIELD"], [97, 95, 7, "enum_FIELD"], [107, 105, 7, "enum_FIELD"], [239, 237, 7, "enum_FIELD"], [247, 246, 7, "enum_FIELD"], [95, 93, 7, "enum_FIELD"], [105, 103, 7, "enum_FIELD"], [237, 236, 7, "enum_FIELD"], [93, 92, 7, "enum_FIELD"], [103, 102, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [17, 2, 10, "enum_LAST_LEXICAL_USE"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [21, 4, 10, "enum_LAST_LEXICAL_USE"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [28, 13, 10, "enum_LAST_LEXICAL_USE"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [39, 17, 10, "enum_LAST_LEXICAL_USE"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 46, 9, "enum_NEXT_SYNTAX"], [47, 39, 10, "enum_LAST_LEXICAL_USE"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 54, 9, "enum_NEXT_SYNTAX"], [55, 6, 10, "enum_LAST_LEXICAL_USE"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [61, 28, 10, "enum_LAST_LEXICAL_USE"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [67, 47, 10, "enum_LAST_LEXICAL_USE"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [77, 67, 10, "enum_LAST_LEXICAL_USE"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [81, 61, 10, "enum_LAST_LEXICAL_USE"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [92, 75, 10, "enum_LAST_LEXICAL_USE"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [102, 21, 10, "enum_LAST_LEXICAL_USE"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [131, 81, 10, "enum_LAST_LEXICAL_USE"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [139, 131, 10, "enum_LAST_LEXICAL_USE"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [157, 139, 10, "enum_LAST_LEXICAL_USE"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [166, 102, 10, "enum_LAST_LEXICAL_USE"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [175, 176, 9, "enum_NEXT_SYNTAX"], [177, 151, 10, "enum_LAST_LEXICAL_USE"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 180, 9, "enum_NEXT_SYNTAX"], [181, 177, 10, "enum_LAST_LEXICAL_USE"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 184, 9, "enum_NEXT_SYNTAX"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [188, 166, 10, "enum_LAST_LEXICAL_USE"], [187, 188, 9, "enum_NEXT_SYNTAX"], [188, 189, 9, "enum_NEXT_SYNTAX"], [189, 190, 9, "enum_NEXT_SYNTAX"], [190, 191, 9, "enum_NEXT_SYNTAX"], [191, 192, 9, "enum_NEXT_SYNTAX"], [192, 193, 9, "enum_NEXT_SYNTAX"], [193, 194, 9, "enum_NEXT_SYNTAX"], [194, 195, 9, "enum_NEXT_SYNTAX"], [195, 198, 9, "enum_NEXT_SYNTAX"], [198, 199, 9, "enum_NEXT_SYNTAX"], [199, 200, 9, "enum_NEXT_SYNTAX"], [200, 201, 9, "enum_NEXT_SYNTAX"], [201, 202, 9, "enum_NEXT_SYNTAX"], [202, 203, 9, "enum_NEXT_SYNTAX"], [203, 207, 9, "enum_NEXT_SYNTAX"], [207, 208, 9, "enum_NEXT_SYNTAX"], [208, 209, 9, "enum_NEXT_SYNTAX"], [209, 210, 9, "enum_NEXT_SYNTAX"], [210, 211, 9, "enum_NEXT_SYNTAX"], [212, 157, 10, "enum_LAST_LEXICAL_USE"], [211, 212, 9, "enum_NEXT_SYNTAX"], [212, 213, 9, "enum_NEXT_SYNTAX"], [213, 214, 9, "enum_NEXT_SYNTAX"], [214, 215, 9, "enum_NEXT_SYNTAX"], [215, 216, 9, "enum_NEXT_SYNTAX"], [216, 217, 9, "enum_NEXT_SYNTAX"], [217, 218, 9, "enum_NEXT_SYNTAX"], [218, 219, 9, "enum_NEXT_SYNTAX"], [220, 212, 10, "enum_LAST_LEXICAL_USE"], [219, 220, 9, "enum_NEXT_SYNTAX"], [220, 221, 9, "enum_NEXT_SYNTAX"], [221, 222, 9, "enum_NEXT_SYNTAX"], [222, 223, 9, "enum_NEXT_SYNTAX"], [223, 224, 9, "enum_NEXT_SYNTAX"], [224, 225, 9, "enum_NEXT_SYNTAX"], [225, 226, 9, "enum_NEXT_SYNTAX"], [226, 227, 9, "enum_NEXT_SYNTAX"], [227, 228, 9, "enum_NEXT_SYNTAX"], [228, 229, 9, "enum_NEXT_SYNTAX"], [229, 232, 9, "enum_NEXT_SYNTAX"], [232, 233, 9, "enum_NEXT_SYNTAX"], [233, 234, 9, "enum_NEXT_SYNTAX"], [234, 235, 9, "enum_NEXT_SYNTAX"], [236, 188, 10, "enum_LAST_LEXICAL_USE"], [235, 236, 9, "enum_NEXT_SYNTAX"], [236, 237, 9, "enum_NEXT_SYNTAX"], [237, 238, 9, "enum_NEXT_SYNTAX"], [238, 239, 9, "enum_NEXT_SYNTAX"], [239, 240, 9, "enum_NEXT_SYNTAX"], [240, 241, 9, "enum_NEXT_SYNTAX"], [241, 242, 9, "enum_NEXT_SYNTAX"], [242, 243, 9, "enum_NEXT_SYNTAX"], [243, 244, 9, "enum_NEXT_SYNTAX"], [244, 245, 9, "enum_NEXT_SYNTAX"], [246, 220, 10, "enum_LAST_LEXICAL_USE"], [245, 246, 9, "enum_NEXT_SYNTAX"], [246, 247, 9, "enum_NEXT_SYNTAX"], [247, 248, 9, "enum_NEXT_SYNTAX"], [248, 249, 9, "enum_NEXT_SYNTAX"], [249, 250, 9, "enum_NEXT_SYNTAX"], [250, 251, 9, "enum_NEXT_SYNTAX"], [251, 252, 9, "enum_NEXT_SYNTAX"], [252, 253, 9, "enum_NEXT_SYNTAX"], [253, 254, 9, "enum_NEXT_SYNTAX"], [254, 255, 9, "enum_NEXT_SYNTAX"], [255, 256, 9, "enum_NEXT_SYNTAX"], [256, 259, 9, "enum_NEXT_SYNTAX"], [259, 260, 9, "enum_NEXT_SYNTAX"], [260, 261, 9, "enum_NEXT_SYNTAX"], [261, 262, 9, "enum_NEXT_SYNTAX"], [262, 263, 9, "enum_NEXT_SYNTAX"], [263, 264, 9, "enum_NEXT_SYNTAX"], [264, 268, 9, "enum_NEXT_SYNTAX"], [268, 269, 9, "enum_NEXT_SYNTAX"], [269, 270, 9, "enum_NEXT_SYNTAX"], [270, 271, 9, "enum_NEXT_SYNTAX"], [272, 246, 10, "enum_LAST_LEXICAL_USE"], [271, 272, 9, "enum_NEXT_SYNTAX"], [272, 273, 9, "enum_NEXT_SYNTAX"], [273, 274, 9, "enum_NEXT_SYNTAX"], [274, 275, 9, "enum_NEXT_SYNTAX"], [275, 276, 9, "enum_NEXT_SYNTAX"], [276, 277, 9, "enum_NEXT_SYNTAX"], [277, 278, 9, "enum_NEXT_SYNTAX"], [278, 281, 9, "enum_NEXT_SYNTAX"], [281, 282, 9, "enum_NEXT_SYNTAX"], [283, 77, 10, "enum_LAST_LEXICAL_USE"], [282, 283, 9, "enum_NEXT_SYNTAX"], [283, 284, 9, "enum_NEXT_SYNTAX"], [284, 285, 9, "enum_NEXT_SYNTAX"], [285, 286, 9, "enum_NEXT_SYNTAX"], [286, 287, 9, "enum_NEXT_SYNTAX"], [287, 288, 9, "enum_NEXT_SYNTAX"], [289, 283, 10, "enum_LAST_LEXICAL_USE"], [288, 289, 9, "enum_NEXT_SYNTAX"], [289, 290, 9, "enum_NEXT_SYNTAX"], [290, 291, 9, "enum_NEXT_SYNTAX"], [291, 292, 9, "enum_NEXT_SYNTAX"], [292, 293, 9, "enum_NEXT_SYNTAX"], [293, 296, 9, "enum_NEXT_SYNTAX"], [296, 297, 9, "enum_NEXT_SYNTAX"], [297, 298, 9, "enum_NEXT_SYNTAX"], [298, 299, 9, "enum_NEXT_SYNTAX"], [299, 300, 9, "enum_NEXT_SYNTAX"], [300, 301, 9, "enum_NEXT_SYNTAX"], [301, 305, 9, "enum_NEXT_SYNTAX"], [305, 306, 9, "enum_NEXT_SYNTAX"], [306, 307, 9, "enum_NEXT_SYNTAX"], [307, 308, 9, "enum_NEXT_SYNTAX"], [308, 309, 9, "enum_NEXT_SYNTAX"], [309, 310, 9, "enum_NEXT_SYNTAX"], [8, 1, 1, "enum_CFG_NEXT"], [5, 12, 1, "enum_CFG_NEXT"], [12, 27, 1, "enum_CFG_NEXT"], [27, 36, 1, "enum_CFG_NEXT"], [36, 55, 1, "enum_CFG_NEXT"], [36, 46, 1, "enum_CFG_NEXT"], [46, 55, 1, "enum_CFG_NEXT"], [55, 66, 1, "enum_CFG_NEXT"], [55, 137, 1, "enum_CFG_NEXT"], [66, 80, 1, "enum_CFG_NEXT"], [66, 137, 1, "enum_CFG_NEXT"], [80, 75, 1, "enum_CFG_NEXT"], [75, 101, 1, "enum_CFG_NEXT"], [75, 137, 1, "enum_CFG_NEXT"], [101, 115, 1, "enum_CFG_NEXT"], [101, 75, 1, "enum_CFG_NEXT"], [137, 150, 1, "enum_CFG_NEXT"], [137, 218, 1, "enum_CFG_NEXT"], [150, 179, 1, "enum_CFG_NEXT"], [179, 198, 1, "enum_CFG_NEXT"], [179, 218, 1, "enum_CFG_NEXT"], [218, 234, 1, "enum_CFG_NEXT"], [218, 271, 1, "enum_CFG_NEXT"], [234, 259, 1, "enum_CFG_NEXT"], [234, 271, 1, "enum_CFG_NEXT"], [271, 305, 1, "enum_CFG_NEXT"], [271, 288, 1, "enum_CFG_NEXT"], [288, 296, 1, "enum_CFG_NEXT"], [288, 305, 1, "enum_CFG_NEXT"], [17, 2, 3, "enum_LAST_WRITE"], [21, 4, 3, "enum_LAST_WRITE"], [28, 13, 3, "enum_LAST_WRITE"], [39, 17, 2, "enum_LAST_READ"], [39, 2, 3, "enum_LAST_WRITE"], [47, 39, 2, "enum_LAST_READ"], [47, 2, 3, "enum_LAST_WRITE"], [55, 6, 3, "enum_LAST_WRITE"], [61, 28, 2, "enum_LAST_READ"], [61, 13, 3, "enum_LAST_WRITE"], [67, 47, 2, "enum_LAST_READ"], [67, 39, 2, "enum_LAST_READ"], [67, 2, 3, "enum_LAST_WRITE"], [77, 67, 2, "enum_LAST_READ"], [77, 2, 3, "enum_LAST_WRITE"], [81, 61, 2, "enum_LAST_READ"], [81, 13, 3, "enum_LAST_WRITE"], [75, 92, 2, "enum_LAST_READ"], [75, 75, 3, "enum_LAST_WRITE"], [92, 92, 2, "enum_LAST_READ"], [92, 75, 3, "enum_LAST_WRITE"], [102, 102, 2, "enum_LAST_READ"], [102, 21, 2, "enum_LAST_READ"], [102, 4, 3, "enum_LAST_WRITE"], [131, 28, 2, "enum_LAST_READ"], [131, 81, 2, "enum_LAST_READ"], [131, 61, 2, "enum_LAST_READ"], [131, 13, 3, "enum_LAST_WRITE"], [139, 131, 2, "enum_LAST_READ"], [139, 13, 3, "enum_LAST_WRITE"], [157, 139, 2, "enum_LAST_READ"], [157, 13, 3, "enum_LAST_WRITE"], [166, 102, 2, "enum_LAST_READ"], [166, 21, 2, "enum_LAST_READ"], [166, 4, 3, "enum_LAST_WRITE"], [177, 151, 3, "enum_LAST_WRITE"], [181, 177, 2, "enum_LAST_READ"], [181, 151, 3, "enum_LAST_WRITE"], [188, 166, 2, "enum_LAST_READ"], [188, 4, 3, "enum_LAST_WRITE"], [212, 157, 2, "enum_LAST_READ"], [212, 139, 2, "enum_LAST_READ"], [212, 13, 3, "enum_LAST_WRITE"], [220, 212, 2, "enum_LAST_READ"], [220, 13, 3, "enum_LAST_WRITE"], [236, 102, 2, "enum_LAST_READ"], [236, 188, 2, "enum_LAST_READ"], [236, 21, 2, "enum_LAST_READ"], [236, 4, 3, "enum_LAST_WRITE"], [246, 220, 2, "enum_LAST_READ"], [246, 13, 3, "enum_LAST_WRITE"], [272, 220, 2, "enum_LAST_READ"], [272, 246, 2, "enum_LAST_READ"], [272, 13, 3, "enum_LAST_WRITE"], [283, 67, 2, "enum_LAST_READ"], [283, 47, 2, "enum_LAST_READ"], [283, 77, 2, "enum_LAST_READ"], [283, 39, 2, "enum_LAST_READ"], [283, 2, 3, "enum_LAST_WRITE"], [289, 283, 2, "enum_LAST_READ"], [289, 2, 3, "enum_LAST_WRITE"], [13, 15, 4, "enum_COMPUTED_FROM"], [13, 17, 4, "enum_COMPUTED_FROM"], [13, 21, 4, "enum_COMPUTED_FROM"], [151, 153, 4, "enum_COMPUTED_FROM"], [151, 166, 4, "enum_COMPUTED_FROM"], [151, 157, 4, "enum_COMPUTED_FROM"]], "error_location": 283, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/legoktm/wdapi.git", "old_path": "wdapi/main.py", "hash": "b7b1335a06b92c9b5182d54db8f8d1ba46c2cbe5", "code": "def canClaimBeAdded(item: Item, claim: Claim, checkDupe: bool=True) -> Tuple[bool, Any]:\n    prop: WDProperty = WDProperty(item.repo, claim.getID())\n    prop.get()\n    if not hasattr(item, '_content'):\n        # TODO: Not all constraints require fetching this, so it should be lazy\n        item.get()\n    if checkDupe:\n        if prop.getID() in item.claims:\n            for c in item.claims[prop.getID()]:\n                if c.getTarget().getID() == claim.getTarget().getID():\n                    return False, 'checkDupe'\n\n    # Run through the various constraints\n    if 'format' in prop.constraints() and prop.getType() == 'string':\n        match: re.Match = re.match(prop.constraints()['format'], claim.getTarget())\n        if not match or match.group(0) != claim.getTarget():\n            return False, 'format'\n    if 'oneof' in prop.constraints() and prop.getType() == 'wikibase-item':\n        if not claim.getTarget().getID() in prop.constraints()['oneof']:\n            return False, 'oneof'\n    if 'single' in prop.constraints():\n        if item.getID() in item.claims:\n            return False, 'single'\n\n    #TODO: target, unique, item, reciprocal\n    #at this point nothing failed.\n    return True, None\n", "rewrite": "ReplaceText(target='claim' @(97,11)->(97,15))", "error_line": 21, "has_bug": true, "code_full": "import re\nfrom typing import Any, Dict, Tuple\n\n\nclass WDProperty:\n    repo: Any\n    prop_id: str\n\n    def __init__(self, repo: Any, prop_id: str):\n        pass\n\n    def getID(self) -> str:\n        return \"\"\n    \n    def get(self) -> None:\n        pass\n\n    def constraints(self) -> Dict:\n        return {}\n\n    def getType(self) -> str:\n        return ''\n\nclass Target:\n    def getID(self) -> str:\n        # Dummy implementation for type annotation purposes\n        return ''\n    \n    def __str__(self) -> str:\n        return ''\n    \nclass Claim:\n    def getID(self) -> str:\n        return ''\n\n    def getTarget(self) -> Target:\n        return Target()\n\n\nclass Item:\n    repo: Any\n    claims: Dict\n    _content: Dict\n\n\n    def get(self):\n        pass\n\n    def getID(self) -> str:\n        return ''\n\n\ndef canClaimBeAdded(item: Item, claim: Claim, checkDupe: bool=True) -> Tuple[bool, Any]:\n    prop: WDProperty = WDProperty(item.repo, claim.getID())\n    prop.get()\n    if not hasattr(item, '_content'):\n        # TODO: Not all constraints require fetching this, so it should be lazy\n        item.get()\n    if checkDupe:\n        if prop.getID() in item.claims:\n            for c in item.claims[prop.getID()]:\n                if c.getTarget().getID() == claim.getTarget().getID():\n                    return False, 'checkDupe'\n\n    # Run through the various constraints\n    if 'format' in prop.constraints() and prop.getType() == 'string':\n        match: re.Match = re.match(prop.constraints()['format'], claim.getTarget())\n        if not match or match.group(0) != claim.getTarget():\n            return False, 'format'\n    if 'oneof' in prop.constraints() and prop.getType() == 'wikibase-item':\n        if not claim.getTarget().getID() in prop.constraints()['oneof']:\n            return False, 'oneof'\n    if 'single' in prop.constraints():\n        if item.getID() in item.claims:\n            return False, 'single'\n\n    #TODO: target, unique, item, reciprocal\n    #at this point nothing failed.\n    return True, None\n", "error_location_char": [1050, 1054], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def copy_output(", "job", ",", "job_scratch_dir", ",", "work_dir", ")", ":", "#NEWLINE#", "#INDENT#", "cp_start", "=", "time", ".", "time", "(", ")", "#NEWLINE#", "try", ":", "#NEWLINE#", "#INDENT#", "for", "outfile", "in", "job", ".", "output_files", ".", "keys", "(", ")", ":", "#NEWLINE#", "#INDENT#", "if", "os", ".", "path", ".", "exists", "(", "outfile", ")", ":", "#NEWLINE#", "#INDENT#", "copy", "(", "os", ".", "path", ".", "join", "(", "job_scratch_dir", ",", "outfile", ")", ",", "os", ".", "path", ".", "join", "(", "job_scratch_dir", ",", "outfile", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "os", ".", "chdir", "(", "work_dir", ")", "#NEWLINE#", "#UNINDENT#", "except", "IOError", ":", "#NEWLINE#", "#INDENT#", "raise", "FileHandlingFailure", "(", "'Copy from scratch dir to access point failed'", ")", "#NEWLINE#", "#UNINDENT#", "finally", ":", "#NEWLINE#", "#INDENT#", "cp_time", "=", "(", "time", ".", "time", "(", ")", "-", "cp_start", ")", "#NEWLINE#", "logger", ".", "info", "(", "'Copy of outputs took: {0} sec.'", ".", "format", "(", "cp_time", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "0"], "edges": [[1, 3, 7, "enum_FIELD"], [10, 16, 7, "enum_FIELD"], [124, 125, 7, "enum_FIELD"], [16, 14, 7, "enum_FIELD"], [25, 24, 7, "enum_FIELD"], [25, 31, 7, "enum_FIELD"], [74, 78, 7, "enum_FIELD"], [83, 84, 7, "enum_FIELD"], [98, 107, 7, "enum_FIELD"], [110, 114, 7, "enum_FIELD"], [14, 13, 7, "enum_FIELD"], [31, 29, 7, "enum_FIELD"], [36, 42, 7, "enum_FIELD"], [78, 76, 7, "enum_FIELD"], [88, 90, 7, "enum_FIELD"], [107, 105, 7, "enum_FIELD"], [107, 108, 7, "enum_FIELD"], [114, 112, 7, "enum_FIELD"], [29, 27, 7, "enum_FIELD"], [42, 40, 7, "enum_FIELD"], [47, 60, 7, "enum_FIELD"], [76, 75, 7, "enum_FIELD"], [90, 89, 7, "enum_FIELD"], [105, 103, 7, "enum_FIELD"], [112, 111, 7, "enum_FIELD"], [118, 116, 7, "enum_FIELD"], [27, 26, 7, "enum_FIELD"], [40, 38, 7, "enum_FIELD"], [60, 48, 7, "enum_FIELD"], [103, 102, 7, "enum_FIELD"], [116, 115, 7, "enum_FIELD"], [38, 37, 7, "enum_FIELD"], [57, 53, 7, "enum_FIELD"], [68, 64, 7, "enum_FIELD"], [53, 51, 7, "enum_FIELD"], [64, 62, 7, "enum_FIELD"], [51, 50, 7, "enum_FIELD"], [62, 61, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [26, 2, 10, "enum_LAST_LEXICAL_USE"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [43, 24, 10, "enum_LAST_LEXICAL_USE"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [50, 37, 10, "enum_LAST_LEXICAL_USE"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [56, 4, 10, "enum_LAST_LEXICAL_USE"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [58, 43, 10, "enum_LAST_LEXICAL_USE"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [61, 50, 10, "enum_LAST_LEXICAL_USE"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [67, 56, 10, "enum_LAST_LEXICAL_USE"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [69, 58, 10, "enum_LAST_LEXICAL_USE"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 74, 9, "enum_NEXT_SYNTAX"], [75, 61, 10, "enum_LAST_LEXICAL_USE"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [79, 6, 10, "enum_LAST_LEXICAL_USE"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [102, 13, 10, "enum_LAST_LEXICAL_USE"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [108, 11, 10, "enum_LAST_LEXICAL_USE"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [119, 99, 10, "enum_LAST_LEXICAL_USE"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [3, 10, 1, "enum_CFG_NEXT"], [10, 31, 1, "enum_CFG_NEXT"], [98, 110, 1, "enum_CFG_NEXT"], [110, 124, 1, "enum_CFG_NEXT"], [31, 84, 1, "enum_CFG_NEXT"], [31, 24, 1, "enum_CFG_NEXT"], [24, 74, 1, "enum_CFG_NEXT"], [24, 84, 1, "enum_CFG_NEXT"], [24, 42, 1, "enum_CFG_NEXT"], [42, 47, 1, "enum_CFG_NEXT"], [42, 84, 1, "enum_CFG_NEXT"], [42, 24, 1, "enum_CFG_NEXT"], [47, 84, 1, "enum_CFG_NEXT"], [47, 24, 1, "enum_CFG_NEXT"], [74, 84, 1, "enum_CFG_NEXT"], [74, 98, 1, "enum_CFG_NEXT"], [84, 88, 1, "enum_CFG_NEXT"], [84, 98, 1, "enum_CFG_NEXT"], [88, 98, 1, "enum_CFG_NEXT"], [102, 13, 2, "enum_LAST_READ"], [108, 11, 3, "enum_LAST_WRITE"], [119, 99, 3, "enum_LAST_WRITE"], [26, 2, 3, "enum_LAST_WRITE"], [24, 69, 2, "enum_LAST_READ"], [24, 43, 2, "enum_LAST_READ"], [24, 24, 3, "enum_LAST_WRITE"], [37, 37, 2, "enum_LAST_READ"], [37, 61, 2, "enum_LAST_READ"], [43, 69, 2, "enum_LAST_READ"], [43, 43, 2, "enum_LAST_READ"], [43, 24, 3, "enum_LAST_WRITE"], [48, 48, 2, "enum_LAST_READ"], [50, 37, 2, "enum_LAST_READ"], [56, 67, 2, "enum_LAST_READ"], [56, 4, 3, "enum_LAST_WRITE"], [58, 43, 2, "enum_LAST_READ"], [58, 24, 3, "enum_LAST_WRITE"], [61, 50, 2, "enum_LAST_READ"], [67, 56, 2, "enum_LAST_READ"], [67, 4, 3, "enum_LAST_WRITE"], [69, 58, 2, "enum_LAST_READ"], [69, 24, 3, "enum_LAST_WRITE"], [75, 37, 2, "enum_LAST_READ"], [75, 61, 2, "enum_LAST_READ"], [79, 6, 3, "enum_LAST_WRITE"], [11, 13, 4, "enum_COMPUTED_FROM"], [99, 108, 4, "enum_COMPUTED_FROM"], [99, 102, 4, "enum_COMPUTED_FROM"]], "error_location": 67, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/PanDAWMS/pilot2.git", "old_path": "pilot/workflow/generic_hpc.py", "hash": "bf8e5359f24dd7da724fe770d893ba3e3af41ef7", "code": "def copy_output(job: Any, job_scratch_dir: str, work_dir: str):\n    cp_start: float = time.time()\n    try:\n        for outfile in job.output_files.keys():\n            if os.path.exists(outfile):\n                copy(os.path.join(job_scratch_dir, outfile), os.path.join(job_scratch_dir, outfile))\n        os.chdir(work_dir)\n    except IOError:\n        raise FileHandlingFailure(\"Copy from scratch dir to access point failed\")\n    finally:\n        cp_time: float = time.time() - cp_start\n        logger.info(\"Copy of outputs took: {0} sec.\".format(cp_time))\n    return 0\n", "rewrite": "ReplaceText(target='work_dir' @(197,74)->(197,89))", "error_line": 5, "has_bug": true, "code_full": "import logging\nimport os\nimport time\nfrom shutil import copy\nfrom typing import Any\n\nlogger = logging.getLogger(__name__)\n\n\nclass FileHandlingFailure(Exception):\n    pass\n\ndef copy_output(job: Any, job_scratch_dir: str, work_dir: str):\n    cp_start: float = time.time()\n    try:\n        for outfile in job.output_files.keys():\n            if os.path.exists(outfile):\n                copy(os.path.join(job_scratch_dir, outfile), os.path.join(job_scratch_dir, outfile))\n        os.chdir(work_dir)\n    except IOError:\n        raise FileHandlingFailure(\"Copy from scratch dir to access point failed\")\n    finally:\n        cp_time: float = time.time() - cp_start\n        logger.info(\"Copy of outputs took: {0} sec.\".format(cp_time))\n    return 0\n", "error_location_char": [269, 284], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def from_dict(", "cls", ",", "data", ")", "->", "'Fragment'", ":", "#NEWLINE#", "#INDENT#", "'\\n    Creates a :class:`~github.query.Fragment` object from a dict.\\n\\n    Parameters\\n    ----------\\n    data: :class:`dict`\\n        The dict to convert into a :class:`~github.query.Fragment`.\\n\\n    Returns\\n    -------\\n    :class:`github.query.Fragment`\\n        The :class:`~github.query.Fragment` object.\\n    '", "#NEWLINE#", "name", "=", "data", "[", "'name'", "]", "#NEWLINE#", "type", "=", "data", "[", "'type'", "]", "#NEWLINE#", "fragment", "=", "cls", "(", "name", "=", "name", ",", "type", "=", "type", ")", "#NEWLINE#", "collections", "=", "data", ".", "get", "(", "'collections'", ",", "list", "(", ")", ")", "#NEWLINE#", "for", "collection", "in", "collections", ":", "#NEWLINE#", "#INDENT#", "collection", "=", "Collection", ".", "from_dict", "(", "collection", ")", "#NEWLINE#", "fragment", ".", "add_collection", "(", "collection", ")", "#NEWLINE#", "#UNINDENT#", "fields", "=", "data", ".", "get", "(", "'fields'", ",", "list", "(", ")", ")", "#NEWLINE#", "for", "field", "in", "fields", ":", "#NEWLINE#", "#INDENT#", "field", "=", "Field", ".", "from_dict", "(", "field", ")", "#NEWLINE#", "fragment", ".", "add_field", "(", "fields", ")", "#NEWLINE#", "#UNINDENT#", "return", "fragment"], "edges": [[1, 3, 7, "enum_FIELD"], [1, 7, 7, "enum_FIELD"], [10, 11, 7, "enum_FIELD"], [12, 16, 7, "enum_FIELD"], [19, 23, 7, "enum_FIELD"], [26, 34, 7, "enum_FIELD"], [39, 47, 7, "enum_FIELD"], [55, 54, 7, "enum_FIELD"], [55, 56, 7, "enum_FIELD"], [76, 84, 7, "enum_FIELD"], [92, 91, 7, "enum_FIELD"], [92, 93, 7, "enum_FIELD"], [114, 115, 7, "enum_FIELD"], [16, 15, 7, "enum_FIELD"], [16, 17, 7, "enum_FIELD"], [23, 22, 7, "enum_FIELD"], [23, 24, 7, "enum_FIELD"], [34, 29, 7, "enum_FIELD"], [47, 43, 7, "enum_FIELD"], [59, 65, 7, "enum_FIELD"], [68, 72, 7, "enum_FIELD"], [84, 80, 7, "enum_FIELD"], [96, 102, 7, "enum_FIELD"], [105, 109, 7, "enum_FIELD"], [31, 33, 7, "enum_FIELD"], [35, 37, 7, "enum_FIELD"], [43, 42, 7, "enum_FIELD"], [49, 48, 7, "enum_FIELD"], [65, 63, 7, "enum_FIELD"], [72, 70, 7, "enum_FIELD"], [80, 79, 7, "enum_FIELD"], [86, 85, 7, "enum_FIELD"], [102, 100, 7, "enum_FIELD"], [109, 107, 7, "enum_FIELD"], [63, 62, 7, "enum_FIELD"], [70, 69, 7, "enum_FIELD"], [100, 99, 7, "enum_FIELD"], [107, 106, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [15, 4, 10, "enum_LAST_LEXICAL_USE"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [22, 15, 10, "enum_LAST_LEXICAL_USE"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [29, 2, 10, "enum_LAST_LEXICAL_USE"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [33, 13, 10, "enum_LAST_LEXICAL_USE"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [37, 20, 10, "enum_LAST_LEXICAL_USE"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [42, 22, 10, "enum_LAST_LEXICAL_USE"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [56, 40, 10, "enum_LAST_LEXICAL_USE"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 59, 9, "enum_NEXT_SYNTAX"], [60, 54, 10, "enum_LAST_LEXICAL_USE"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [66, 60, 10, "enum_LAST_LEXICAL_USE"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [69, 27, 10, "enum_LAST_LEXICAL_USE"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [73, 66, 10, "enum_LAST_LEXICAL_USE"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [79, 42, 10, "enum_LAST_LEXICAL_USE"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [85, 48, 10, "enum_LAST_LEXICAL_USE"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [93, 77, 10, "enum_LAST_LEXICAL_USE"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 96, 9, "enum_NEXT_SYNTAX"], [97, 91, 10, "enum_LAST_LEXICAL_USE"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [103, 97, 10, "enum_LAST_LEXICAL_USE"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [106, 69, 10, "enum_LAST_LEXICAL_USE"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [110, 93, 10, "enum_LAST_LEXICAL_USE"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 114, 9, "enum_NEXT_SYNTAX"], [115, 106, 10, "enum_LAST_LEXICAL_USE"], [114, 115, 9, "enum_NEXT_SYNTAX"], [3, 10, 1, "enum_CFG_NEXT"], [10, 12, 1, "enum_CFG_NEXT"], [12, 19, 1, "enum_CFG_NEXT"], [19, 26, 1, "enum_CFG_NEXT"], [26, 39, 1, "enum_CFG_NEXT"], [39, 56, 1, "enum_CFG_NEXT"], [56, 54, 1, "enum_CFG_NEXT"], [54, 59, 1, "enum_CFG_NEXT"], [54, 76, 1, "enum_CFG_NEXT"], [59, 68, 1, "enum_CFG_NEXT"], [68, 54, 1, "enum_CFG_NEXT"], [76, 93, 1, "enum_CFG_NEXT"], [93, 91, 1, "enum_CFG_NEXT"], [91, 96, 1, "enum_CFG_NEXT"], [91, 114, 1, "enum_CFG_NEXT"], [96, 105, 1, "enum_CFG_NEXT"], [105, 91, 1, "enum_CFG_NEXT"], [15, 4, 3, "enum_LAST_WRITE"], [22, 15, 2, "enum_LAST_READ"], [22, 4, 3, "enum_LAST_WRITE"], [29, 2, 3, "enum_LAST_WRITE"], [33, 13, 3, "enum_LAST_WRITE"], [37, 20, 3, "enum_LAST_WRITE"], [42, 22, 2, "enum_LAST_READ"], [42, 4, 3, "enum_LAST_WRITE"], [56, 40, 3, "enum_LAST_WRITE"], [54, 73, 2, "enum_LAST_READ"], [54, 60, 3, "enum_LAST_WRITE"], [62, 62, 2, "enum_LAST_READ"], [66, 73, 2, "enum_LAST_READ"], [66, 54, 3, "enum_LAST_WRITE"], [60, 66, 2, "enum_LAST_READ"], [60, 54, 3, "enum_LAST_WRITE"], [69, 69, 2, "enum_LAST_READ"], [69, 27, 3, "enum_LAST_WRITE"], [73, 66, 2, "enum_LAST_READ"], [73, 60, 3, "enum_LAST_WRITE"], [79, 42, 2, "enum_LAST_READ"], [79, 4, 3, "enum_LAST_WRITE"], [85, 48, 2, "enum_LAST_READ"], [93, 77, 3, "enum_LAST_WRITE"], [91, 103, 2, "enum_LAST_READ"], [91, 97, 3, "enum_LAST_WRITE"], [99, 99, 2, "enum_LAST_READ"], [103, 103, 2, "enum_LAST_READ"], [103, 91, 3, "enum_LAST_WRITE"], [97, 103, 2, "enum_LAST_READ"], [97, 91, 3, "enum_LAST_WRITE"], [106, 69, 2, "enum_LAST_READ"], [106, 106, 2, "enum_LAST_READ"], [106, 27, 3, "enum_LAST_WRITE"], [110, 93, 2, "enum_LAST_READ"], [110, 110, 2, "enum_LAST_READ"], [110, 77, 3, "enum_LAST_WRITE"], [115, 69, 2, "enum_LAST_READ"], [115, 106, 2, "enum_LAST_READ"], [115, 27, 3, "enum_LAST_WRITE"], [13, 15, 4, "enum_COMPUTED_FROM"], [20, 22, 4, "enum_COMPUTED_FROM"], [27, 29, 4, "enum_COMPUTED_FROM"], [27, 33, 4, "enum_COMPUTED_FROM"], [27, 37, 4, "enum_COMPUTED_FROM"], [40, 42, 4, "enum_COMPUTED_FROM"], [40, 48, 4, "enum_COMPUTED_FROM"], [77, 79, 4, "enum_COMPUTED_FROM"], [77, 85, 4, "enum_COMPUTED_FROM"], [60, 66, 4, "enum_COMPUTED_FROM"], [60, 62, 4, "enum_COMPUTED_FROM"], [97, 103, 4, "enum_COMPUTED_FROM"], [97, 99, 4, "enum_COMPUTED_FROM"]], "error_location": 110, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/ShineyDev/github.py.git", "old_path": "github/query/builder.py", "hash": "84f7746b34d378990a15a0b7a685e1739b4f9350", "code": "def from_dict(cls, data: Dict) -> \"Fragment\":\n    \"\"\"\n    Creates a :class:`~github.query.Fragment` object from a dict.\n\n    Parameters\n    ----------\n    data: :class:`dict`\n        The dict to convert into a :class:`~github.query.Fragment`.\n\n    Returns\n    -------\n    :class:`github.query.Fragment`\n        The :class:`~github.query.Fragment` object.\n    \"\"\"\n\n    name: Any = data[\"name\"]\n    type: Any = data[\"type\"]\n\n    fragment = cls(name=name, type=type)\n    \n    collections: List[Dict] = data.get(\"collections\", list())\n    for (collection) in collections:\n        collection: Collection = Collection.from_dict(collection)\n        fragment.add_collection(collection)\n    \n    fields: List[Dict] = data.get(\"fields\", list())\n    for (field) in fields:\n        field: Field = Field.from_dict(field)\n        fragment.add_field(fields)\n\n    return fragment\n", "rewrite": "ReplaceText(target='field' @(818,31)->(818,37))", "error_line": 28, "has_bug": true, "code_full": "\nfrom typing import Any, Dict, List\n\n\nclass Collection:\n    @classmethod\n    def from_dict(cls, data: Dict) -> \"Collection\":\n        return cls()\n\nclass Field:\n    @classmethod\n    def from_dict(cls, data: Dict) -> \"Field\":\n        return cls()\n\nclass Fragment:\n    name: Any\n    type: Any\n    collections: List[Collection]\n    fields: List[Field]\n\n    def __init__(self, name: Any, type: Any):\n        pass\n\n    def add_collection(self, collection: Collection):\n        pass\n\n    def add_field(self, field: Field):\n        pass\n\n    @classmethod\n    def from_dict(cls, data: Dict) -> \"Fragment\":\n        \"\"\"\n        Creates a :class:`~github.query.Fragment` object from a dict.\n\n        Parameters\n        ----------\n        data: :class:`dict`\n            The dict to convert into a :class:`~github.query.Fragment`.\n\n        Returns\n        -------\n        :class:`github.query.Fragment`\n            The :class:`~github.query.Fragment` object.\n        \"\"\"\n\n        name: Any = data[\"name\"]\n        type: Any = data[\"type\"]\n\n        fragment = cls(name=name, type=type)\n        \n        collections: List[Dict] = data.get(\"collections\", list())\n        for (collection) in collections:\n            collection: Collection = Collection.from_dict(collection)\n            fragment.add_collection(collection)\n        \n        fields: List[Dict] = data.get(\"fields\", list())\n        for (field) in fields:\n            field: Field = Field.from_dict(field)\n            fragment.add_field(fields)\n\n        return fragment\n", "error_location_char": [835, 841], "type_checked_pytype": false, "type_error_label": "wrong-arg-types", "type_checked_mypy": false}
{"source_tokens": ["#NEWLINE#", "def FilterDateRange(", "self", ",", "entity", ",", "field", "=", "''", ",", "start", "=", "''", ",", "end", "=", "''", ",", "cdoID", "=", "0", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n        Given an Eloqua date field, create a bounded or open date range filter\\n\\n        Arguments:\\n\\n        * entity -- one of: contacts, customObjects, accounts, activities\\n        * field -- field to filter by; must resolve to a date type field\\n        * start -- beginning of date range\\n        * end -- end of date range\\n        * cdoID -- identifier of specific CDO; required if entity = 'customObjects'; use method GetCdoId to retrieve\\n\\n    \"", "#NEWLINE#", "if", "(", "(", "start", "==", "''", ")", "and", "(", "end", "==", "''", ")", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "ValueError", "(", "'Please enter at least one datetime value: start, end'", ")", "#NEWLINE#", "#UNINDENT#", "if", "(", "(", "field", "==", "''", ")", "and", "(", "entity", "!=", "'activities'", ")", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "ValueError", "(", "(", "(", "\"Parameter 'field' is required for entity '\"", "+", "entity", ")", "+", "\"'\"", ")", ")", "#NEWLINE#", "#UNINDENT#", "if", "(", "entity", "==", "'activities'", ")", ":", "#NEWLINE#", "#INDENT#", "field", "=", "'ActivityDate'", "#NEWLINE#", "#UNINDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "test1", "=", "datetime", ".", "strptime", "(", "start", ",", "'%Y-%m-%d %H:%M:%S'", ")", "#NEWLINE#", "test2", "=", "datetime", ".", "strptime", "(", "start", ",", "'%Y-%m-%d %H:%M:%S'", ")", "#NEWLINE#", "#UNINDENT#", "except", ":", "#NEWLINE#", "#INDENT#", "raise", "ValueError", "(", "\"Invalid datetime format; use 'YYYY-MM-DD hh:mm:ss'\"", ")", "#NEWLINE#", "#UNINDENT#", "if", "(", "(", "entity", "!=", "'activities'", ")", "or", "(", "(", "entity", "in", "[", "'contacts'", ",", "'accounts'", "]", ")", "and", "(", "field", "in", "[", "'createdAt'", ",", "'updatedAt'", "]", ")", ")", ")", ":", "#NEWLINE#", "#INDENT#", "fieldDef", "=", "self", ".", "GetFields", "(", "entity", "=", "entity", ",", "fields", "=", "[", "field", "]", ",", "cdoID", "=", "cdoID", ")", "#NEWLINE#", "if", "(", "fieldDef", "[", "0", "]", "[", "'dataType'", "]", "!=", "'date'", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "Exception", "(", "(", "(", "\"Field '\"", "+", "field", ")", "+", "\"' is not a date field\"", ")", ")", "#NEWLINE#", "#UNINDENT#", "fieldStatement", "=", "fieldDef", "[", "0", "]", "[", "'statement'", "]", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "entity", "==", "'activities'", ")", ":", "#NEWLINE#", "#INDENT#", "fieldStatement", "=", "system_fields", ".", "ACTIVITY_FIELDS", "[", "'CommonFields'", "]", "[", "'ActivityDate'", "]", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "fieldStatement", "=", "system_fields", ".", "CONTACT_SYSTEM_FIELDS", "[", "field", "]", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "statement", "=", "''", "#NEWLINE#", "if", "(", "start", "!=", "''", ")", ":", "#NEWLINE#", "#INDENT#", "statement", "+=", "(", "(", "(", "(", "\" '\"", "+", "fieldStatement", ")", "+", "\"' >= '\"", ")", "+", "start", ")", "+", "\"' \"", ")", "#NEWLINE#", "#UNINDENT#", "if", "(", "(", "start", "!=", "''", ")", "and", "(", "end", "!=", "''", ")", ")", ":", "#NEWLINE#", "#INDENT#", "statement", "+=", "' AND '", "#NEWLINE#", "#UNINDENT#", "if", "(", "end", "!=", "''", ")", ":", "#NEWLINE#", "#INDENT#", "statement", "+=", "(", "(", "(", "(", "\" '\"", "+", "fieldStatement", ")", "+", "\"' <= '\"", ")", "+", "end", ")", "+", "\"' \"", ")", "#NEWLINE#", "#UNINDENT#", "return", "statement"], "edges": [[1, 11, 7, "enum_FIELD"], [24, 25, 7, "enum_FIELD"], [27, 34, 7, "enum_FIELD"], [51, 58, 7, "enum_FIELD"], [83, 86, 7, "enum_FIELD"], [165, 142, 7, "enum_FIELD"], [270, 273, 7, "enum_FIELD"], [275, 278, 7, "enum_FIELD"], [305, 312, 7, "enum_FIELD"], [327, 330, 7, "enum_FIELD"], [357, 358, 7, "enum_FIELD"], [44, 46, 7, "enum_FIELD"], [68, 70, 7, "enum_FIELD"], [86, 85, 7, "enum_FIELD"], [91, 94, 7, "enum_FIELD"], [100, 108, 7, "enum_FIELD"], [111, 119, 7, "enum_FIELD"], [167, 177, 7, "enum_FIELD"], [189, 198, 7, "enum_FIELD"], [218, 225, 7, "enum_FIELD"], [240, 237, 7, "enum_FIELD"], [278, 277, 7, "enum_FIELD"], [283, 284, 7, "enum_FIELD"], [283, 300, 7, "enum_FIELD"], [321, 322, 7, "enum_FIELD"], [321, 324, 7, "enum_FIELD"], [330, 329, 7, "enum_FIELD"], [335, 336, 7, "enum_FIELD"], [335, 352, 7, "enum_FIELD"], [31, 30, 7, "enum_FIELD"], [37, 36, 7, "enum_FIELD"], [46, 45, 7, "enum_FIELD"], [55, 54, 7, "enum_FIELD"], [61, 60, 7, "enum_FIELD"], [70, 69, 7, "enum_FIELD"], [108, 104, 7, "enum_FIELD"], [119, 115, 7, "enum_FIELD"], [128, 130, 7, "enum_FIELD"], [139, 138, 7, "enum_FIELD"], [177, 171, 7, "enum_FIELD"], [198, 195, 7, "enum_FIELD"], [204, 206, 7, "enum_FIELD"], [225, 222, 7, "enum_FIELD"], [225, 226, 7, "enum_FIELD"], [237, 236, 7, "enum_FIELD"], [242, 251, 7, "enum_FIELD"], [259, 265, 7, "enum_FIELD"], [300, 297, 7, "enum_FIELD"], [300, 301, 7, "enum_FIELD"], [309, 308, 7, "enum_FIELD"], [315, 314, 7, "enum_FIELD"], [352, 349, 7, "enum_FIELD"], [352, 353, 7, "enum_FIELD"], [77, 74, 7, "enum_FIELD"], [77, 78, 7, "enum_FIELD"], [104, 103, 7, "enum_FIELD"], [115, 114, 7, "enum_FIELD"], [130, 129, 7, "enum_FIELD"], [146, 145, 7, "enum_FIELD"], [156, 155, 7, "enum_FIELD"], [171, 170, 7, "enum_FIELD"], [174, 176, 7, "enum_FIELD"], [178, 180, 7, "enum_FIELD"], [184, 186, 7, "enum_FIELD"], [195, 192, 7, "enum_FIELD"], [195, 196, 7, "enum_FIELD"], [206, 205, 7, "enum_FIELD"], [222, 221, 7, "enum_FIELD"], [222, 223, 7, "enum_FIELD"], [251, 248, 7, "enum_FIELD"], [251, 252, 7, "enum_FIELD"], [265, 263, 7, "enum_FIELD"], [265, 266, 7, "enum_FIELD"], [297, 294, 7, "enum_FIELD"], [297, 298, 7, "enum_FIELD"], [349, 346, 7, "enum_FIELD"], [349, 350, 7, "enum_FIELD"], [74, 73, 7, "enum_FIELD"], [74, 75, 7, "enum_FIELD"], [192, 191, 7, "enum_FIELD"], [192, 193, 7, "enum_FIELD"], [213, 210, 7, "enum_FIELD"], [213, 214, 7, "enum_FIELD"], [248, 246, 7, "enum_FIELD"], [248, 249, 7, "enum_FIELD"], [263, 262, 7, "enum_FIELD"], [294, 291, 7, "enum_FIELD"], [294, 295, 7, "enum_FIELD"], [346, 343, 7, "enum_FIELD"], [346, 347, 7, "enum_FIELD"], [210, 209, 7, "enum_FIELD"], [210, 211, 7, "enum_FIELD"], [246, 245, 7, "enum_FIELD"], [291, 290, 7, "enum_FIELD"], [291, 292, 7, "enum_FIELD"], [343, 342, 7, "enum_FIELD"], [343, 344, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [30, 10, 10, "enum_LAST_LEXICAL_USE"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [36, 14, 10, "enum_LAST_LEXICAL_USE"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [54, 6, 10, "enum_LAST_LEXICAL_USE"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [60, 4, 10, "enum_LAST_LEXICAL_USE"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 68, 9, "enum_NEXT_SYNTAX"], [69, 45, 10, "enum_LAST_LEXICAL_USE"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [75, 60, 10, "enum_LAST_LEXICAL_USE"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [85, 75, 10, "enum_LAST_LEXICAL_USE"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 91, 9, "enum_NEXT_SYNTAX"], [92, 54, 10, "enum_LAST_LEXICAL_USE"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [107, 30, 10, "enum_LAST_LEXICAL_USE"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [114, 103, 10, "enum_LAST_LEXICAL_USE"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [118, 107, 10, "enum_LAST_LEXICAL_USE"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 128, 9, "enum_NEXT_SYNTAX"], [129, 69, 10, "enum_LAST_LEXICAL_USE"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [138, 85, 10, "enum_LAST_LEXICAL_USE"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [145, 138, 10, "enum_LAST_LEXICAL_USE"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [155, 92, 10, "enum_LAST_LEXICAL_USE"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [170, 2, 10, "enum_LAST_LEXICAL_USE"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [176, 145, 10, "enum_LAST_LEXICAL_USE"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 180, 9, "enum_NEXT_SYNTAX"], [181, 155, 10, "enum_LAST_LEXICAL_USE"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 184, 9, "enum_NEXT_SYNTAX"], [184, 185, 9, "enum_NEXT_SYNTAX"], [186, 18, 10, "enum_LAST_LEXICAL_USE"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [187, 189, 9, "enum_NEXT_SYNTAX"], [189, 190, 9, "enum_NEXT_SYNTAX"], [191, 168, 10, "enum_LAST_LEXICAL_USE"], [190, 191, 9, "enum_NEXT_SYNTAX"], [191, 192, 9, "enum_NEXT_SYNTAX"], [192, 193, 9, "enum_NEXT_SYNTAX"], [193, 194, 9, "enum_NEXT_SYNTAX"], [194, 195, 9, "enum_NEXT_SYNTAX"], [195, 196, 9, "enum_NEXT_SYNTAX"], [196, 197, 9, "enum_NEXT_SYNTAX"], [197, 198, 9, "enum_NEXT_SYNTAX"], [198, 199, 9, "enum_NEXT_SYNTAX"], [199, 200, 9, "enum_NEXT_SYNTAX"], [200, 201, 9, "enum_NEXT_SYNTAX"], [201, 204, 9, "enum_NEXT_SYNTAX"], [204, 205, 9, "enum_NEXT_SYNTAX"], [205, 206, 9, "enum_NEXT_SYNTAX"], [206, 207, 9, "enum_NEXT_SYNTAX"], [207, 208, 9, "enum_NEXT_SYNTAX"], [208, 209, 9, "enum_NEXT_SYNTAX"], [209, 210, 9, "enum_NEXT_SYNTAX"], [211, 181, 10, "enum_LAST_LEXICAL_USE"], [210, 211, 9, "enum_NEXT_SYNTAX"], [211, 212, 9, "enum_NEXT_SYNTAX"], [212, 213, 9, "enum_NEXT_SYNTAX"], [213, 214, 9, "enum_NEXT_SYNTAX"], [214, 215, 9, "enum_NEXT_SYNTAX"], [215, 216, 9, "enum_NEXT_SYNTAX"], [216, 218, 9, "enum_NEXT_SYNTAX"], [218, 219, 9, "enum_NEXT_SYNTAX"], [219, 220, 9, "enum_NEXT_SYNTAX"], [221, 191, 10, "enum_LAST_LEXICAL_USE"], [220, 221, 9, "enum_NEXT_SYNTAX"], [221, 222, 9, "enum_NEXT_SYNTAX"], [222, 223, 9, "enum_NEXT_SYNTAX"], [223, 224, 9, "enum_NEXT_SYNTAX"], [224, 225, 9, "enum_NEXT_SYNTAX"], [225, 226, 9, "enum_NEXT_SYNTAX"], [226, 227, 9, "enum_NEXT_SYNTAX"], [227, 230, 9, "enum_NEXT_SYNTAX"], [230, 231, 9, "enum_NEXT_SYNTAX"], [231, 234, 9, "enum_NEXT_SYNTAX"], [234, 235, 9, "enum_NEXT_SYNTAX"], [236, 176, 10, "enum_LAST_LEXICAL_USE"], [235, 236, 9, "enum_NEXT_SYNTAX"], [236, 237, 9, "enum_NEXT_SYNTAX"], [237, 238, 9, "enum_NEXT_SYNTAX"], [238, 239, 9, "enum_NEXT_SYNTAX"], [239, 240, 9, "enum_NEXT_SYNTAX"], [240, 242, 9, "enum_NEXT_SYNTAX"], [243, 219, 10, "enum_LAST_LEXICAL_USE"], [242, 243, 9, "enum_NEXT_SYNTAX"], [243, 244, 9, "enum_NEXT_SYNTAX"], [244, 245, 9, "enum_NEXT_SYNTAX"], [245, 246, 9, "enum_NEXT_SYNTAX"], [246, 247, 9, "enum_NEXT_SYNTAX"], [247, 248, 9, "enum_NEXT_SYNTAX"], [248, 249, 9, "enum_NEXT_SYNTAX"], [249, 250, 9, "enum_NEXT_SYNTAX"], [250, 251, 9, "enum_NEXT_SYNTAX"], [251, 252, 9, "enum_NEXT_SYNTAX"], [252, 253, 9, "enum_NEXT_SYNTAX"], [253, 256, 9, "enum_NEXT_SYNTAX"], [256, 257, 9, "enum_NEXT_SYNTAX"], [257, 259, 9, "enum_NEXT_SYNTAX"], [260, 243, 10, "enum_LAST_LEXICAL_USE"], [259, 260, 9, "enum_NEXT_SYNTAX"], [260, 261, 9, "enum_NEXT_SYNTAX"], [262, 245, 10, "enum_LAST_LEXICAL_USE"], [261, 262, 9, "enum_NEXT_SYNTAX"], [262, 263, 9, "enum_NEXT_SYNTAX"], [263, 264, 9, "enum_NEXT_SYNTAX"], [264, 265, 9, "enum_NEXT_SYNTAX"], [266, 211, 10, "enum_LAST_LEXICAL_USE"], [265, 266, 9, "enum_NEXT_SYNTAX"], [266, 267, 9, "enum_NEXT_SYNTAX"], [267, 270, 9, "enum_NEXT_SYNTAX"], [270, 271, 9, "enum_NEXT_SYNTAX"], [271, 272, 9, "enum_NEXT_SYNTAX"], [272, 273, 9, "enum_NEXT_SYNTAX"], [273, 275, 9, "enum_NEXT_SYNTAX"], [275, 276, 9, "enum_NEXT_SYNTAX"], [277, 118, 10, "enum_LAST_LEXICAL_USE"], [276, 277, 9, "enum_NEXT_SYNTAX"], [277, 278, 9, "enum_NEXT_SYNTAX"], [278, 279, 9, "enum_NEXT_SYNTAX"], [279, 280, 9, "enum_NEXT_SYNTAX"], [280, 281, 9, "enum_NEXT_SYNTAX"], [281, 283, 9, "enum_NEXT_SYNTAX"], [284, 271, 10, "enum_LAST_LEXICAL_USE"], [283, 284, 9, "enum_NEXT_SYNTAX"], [284, 285, 9, "enum_NEXT_SYNTAX"], [285, 286, 9, "enum_NEXT_SYNTAX"], [286, 287, 9, "enum_NEXT_SYNTAX"], [287, 288, 9, "enum_NEXT_SYNTAX"], [288, 289, 9, "enum_NEXT_SYNTAX"], [289, 290, 9, "enum_NEXT_SYNTAX"], [290, 291, 9, "enum_NEXT_SYNTAX"], [292, 260, 10, "enum_LAST_LEXICAL_USE"], [291, 292, 9, "enum_NEXT_SYNTAX"], [292, 293, 9, "enum_NEXT_SYNTAX"], [293, 294, 9, "enum_NEXT_SYNTAX"], [294, 295, 9, "enum_NEXT_SYNTAX"], [295, 296, 9, "enum_NEXT_SYNTAX"], [296, 297, 9, "enum_NEXT_SYNTAX"], [298, 277, 10, "enum_LAST_LEXICAL_USE"], [297, 298, 9, "enum_NEXT_SYNTAX"], [298, 299, 9, "enum_NEXT_SYNTAX"], [299, 300, 9, "enum_NEXT_SYNTAX"], [300, 301, 9, "enum_NEXT_SYNTAX"], [301, 302, 9, "enum_NEXT_SYNTAX"], [302, 305, 9, "enum_NEXT_SYNTAX"], [305, 306, 9, "enum_NEXT_SYNTAX"], [306, 307, 9, "enum_NEXT_SYNTAX"], [308, 298, 10, "enum_LAST_LEXICAL_USE"], [307, 308, 9, "enum_NEXT_SYNTAX"], [308, 309, 9, "enum_NEXT_SYNTAX"], [309, 310, 9, "enum_NEXT_SYNTAX"], [310, 311, 9, "enum_NEXT_SYNTAX"], [311, 312, 9, "enum_NEXT_SYNTAX"], [312, 313, 9, "enum_NEXT_SYNTAX"], [314, 36, 10, "enum_LAST_LEXICAL_USE"], [313, 314, 9, "enum_NEXT_SYNTAX"], [314, 315, 9, "enum_NEXT_SYNTAX"], [315, 316, 9, "enum_NEXT_SYNTAX"], [316, 317, 9, "enum_NEXT_SYNTAX"], [317, 318, 9, "enum_NEXT_SYNTAX"], [318, 319, 9, "enum_NEXT_SYNTAX"], [319, 321, 9, "enum_NEXT_SYNTAX"], [322, 284, 10, "enum_LAST_LEXICAL_USE"], [321, 322, 9, "enum_NEXT_SYNTAX"], [322, 323, 9, "enum_NEXT_SYNTAX"], [323, 324, 9, "enum_NEXT_SYNTAX"], [324, 327, 9, "enum_NEXT_SYNTAX"], [327, 328, 9, "enum_NEXT_SYNTAX"], [329, 314, 10, "enum_LAST_LEXICAL_USE"], [328, 329, 9, "enum_NEXT_SYNTAX"], [329, 330, 9, "enum_NEXT_SYNTAX"], [330, 331, 9, "enum_NEXT_SYNTAX"], [331, 332, 9, "enum_NEXT_SYNTAX"], [332, 333, 9, "enum_NEXT_SYNTAX"], [333, 335, 9, "enum_NEXT_SYNTAX"], [336, 322, 10, "enum_LAST_LEXICAL_USE"], [335, 336, 9, "enum_NEXT_SYNTAX"], [336, 337, 9, "enum_NEXT_SYNTAX"], [337, 338, 9, "enum_NEXT_SYNTAX"], [338, 339, 9, "enum_NEXT_SYNTAX"], [339, 340, 9, "enum_NEXT_SYNTAX"], [340, 341, 9, "enum_NEXT_SYNTAX"], [341, 342, 9, "enum_NEXT_SYNTAX"], [342, 343, 9, "enum_NEXT_SYNTAX"], [344, 292, 10, "enum_LAST_LEXICAL_USE"], [343, 344, 9, "enum_NEXT_SYNTAX"], [344, 345, 9, "enum_NEXT_SYNTAX"], [345, 346, 9, "enum_NEXT_SYNTAX"], [346, 347, 9, "enum_NEXT_SYNTAX"], [347, 348, 9, "enum_NEXT_SYNTAX"], [348, 349, 9, "enum_NEXT_SYNTAX"], [350, 329, 10, "enum_LAST_LEXICAL_USE"], [349, 350, 9, "enum_NEXT_SYNTAX"], [350, 351, 9, "enum_NEXT_SYNTAX"], [351, 352, 9, "enum_NEXT_SYNTAX"], [352, 353, 9, "enum_NEXT_SYNTAX"], [353, 354, 9, "enum_NEXT_SYNTAX"], [354, 357, 9, "enum_NEXT_SYNTAX"], [358, 336, 10, "enum_LAST_LEXICAL_USE"], [357, 358, 9, "enum_NEXT_SYNTAX"], [8, 12, 1, "enum_CFG_NEXT"], [12, 16, 1, "enum_CFG_NEXT"], [16, 20, 1, "enum_CFG_NEXT"], [20, 1, 1, "enum_CFG_NEXT"], [11, 24, 1, "enum_CFG_NEXT"], [24, 34, 1, "enum_CFG_NEXT"], [34, 58, 1, "enum_CFG_NEXT"], [34, 44, 1, "enum_CFG_NEXT"], [58, 86, 1, "enum_CFG_NEXT"], [58, 68, 1, "enum_CFG_NEXT"], [86, 91, 1, "enum_CFG_NEXT"], [86, 100, 1, "enum_CFG_NEXT"], [91, 100, 1, "enum_CFG_NEXT"], [100, 111, 1, "enum_CFG_NEXT"], [111, 128, 1, "enum_CFG_NEXT"], [111, 142, 1, "enum_CFG_NEXT"], [142, 167, 1, "enum_CFG_NEXT"], [142, 237, 1, "enum_CFG_NEXT"], [167, 198, 1, "enum_CFG_NEXT"], [198, 218, 1, "enum_CFG_NEXT"], [198, 204, 1, "enum_CFG_NEXT"], [218, 270, 1, "enum_CFG_NEXT"], [237, 259, 1, "enum_CFG_NEXT"], [237, 242, 1, "enum_CFG_NEXT"], [242, 270, 1, "enum_CFG_NEXT"], [259, 270, 1, "enum_CFG_NEXT"], [270, 278, 1, "enum_CFG_NEXT"], [278, 283, 1, "enum_CFG_NEXT"], [278, 312, 1, "enum_CFG_NEXT"], [283, 312, 1, "enum_CFG_NEXT"], [312, 330, 1, "enum_CFG_NEXT"], [312, 321, 1, "enum_CFG_NEXT"], [321, 330, 1, "enum_CFG_NEXT"], [330, 357, 1, "enum_CFG_NEXT"], [330, 335, 1, "enum_CFG_NEXT"], [335, 357, 1, "enum_CFG_NEXT"], [30, 10, 3, "enum_LAST_WRITE"], [36, 14, 3, "enum_LAST_WRITE"], [54, 6, 3, "enum_LAST_WRITE"], [60, 4, 3, "enum_LAST_WRITE"], [75, 60, 2, "enum_LAST_READ"], [75, 4, 3, "enum_LAST_WRITE"], [85, 60, 2, "enum_LAST_READ"], [85, 4, 3, "enum_LAST_WRITE"], [92, 54, 2, "enum_LAST_READ"], [92, 6, 3, "enum_LAST_WRITE"], [107, 30, 2, "enum_LAST_READ"], [107, 10, 3, "enum_LAST_WRITE"], [114, 103, 2, "enum_LAST_READ"], [118, 107, 2, "enum_LAST_READ"], [118, 10, 3, "enum_LAST_WRITE"], [138, 85, 2, "enum_LAST_READ"], [138, 4, 3, "enum_LAST_WRITE"], [145, 138, 2, "enum_LAST_READ"], [145, 4, 3, "enum_LAST_WRITE"], [155, 54, 2, "enum_LAST_READ"], [155, 6, 3, "enum_LAST_WRITE"], [155, 92, 3, "enum_LAST_WRITE"], [170, 2, 3, "enum_LAST_WRITE"], [176, 145, 2, "enum_LAST_READ"], [176, 4, 3, "enum_LAST_WRITE"], [181, 155, 2, "enum_LAST_READ"], [181, 6, 3, "enum_LAST_WRITE"], [181, 92, 3, "enum_LAST_WRITE"], [186, 18, 3, "enum_LAST_WRITE"], [191, 168, 3, "enum_LAST_WRITE"], [211, 181, 2, "enum_LAST_READ"], [211, 6, 3, "enum_LAST_WRITE"], [211, 92, 3, "enum_LAST_WRITE"], [221, 191, 2, "enum_LAST_READ"], [221, 168, 3, "enum_LAST_WRITE"], [236, 145, 2, "enum_LAST_READ"], [236, 4, 3, "enum_LAST_WRITE"], [266, 155, 2, "enum_LAST_READ"], [266, 6, 3, "enum_LAST_WRITE"], [266, 92, 3, "enum_LAST_WRITE"], [277, 118, 2, "enum_LAST_READ"], [277, 10, 3, "enum_LAST_WRITE"], [292, 219, 3, "enum_LAST_WRITE"], [292, 260, 3, "enum_LAST_WRITE"], [292, 243, 3, "enum_LAST_WRITE"], [298, 277, 2, "enum_LAST_READ"], [298, 10, 3, "enum_LAST_WRITE"], [284, 271, 3, "enum_LAST_WRITE"], [284, 284, 2, "enum_LAST_READ"], [284, 271, 3, "enum_LAST_WRITE"], [308, 277, 2, "enum_LAST_READ"], [308, 298, 2, "enum_LAST_READ"], [308, 10, 3, "enum_LAST_WRITE"], [314, 36, 2, "enum_LAST_READ"], [314, 14, 3, "enum_LAST_WRITE"], [322, 284, 2, "enum_LAST_READ"], [322, 271, 3, "enum_LAST_WRITE"], [322, 284, 3, "enum_LAST_WRITE"], [322, 322, 2, "enum_LAST_READ"], [322, 271, 3, "enum_LAST_WRITE"], [322, 284, 3, "enum_LAST_WRITE"], [329, 314, 2, "enum_LAST_READ"], [329, 14, 3, "enum_LAST_WRITE"], [344, 292, 2, "enum_LAST_READ"], [344, 219, 3, "enum_LAST_WRITE"], [344, 260, 3, "enum_LAST_WRITE"], [344, 243, 3, "enum_LAST_WRITE"], [350, 329, 2, "enum_LAST_READ"], [350, 14, 3, "enum_LAST_WRITE"], [336, 284, 2, "enum_LAST_READ"], [336, 322, 2, "enum_LAST_READ"], [336, 322, 3, "enum_LAST_WRITE"], [336, 271, 3, "enum_LAST_WRITE"], [336, 284, 3, "enum_LAST_WRITE"], [336, 336, 2, "enum_LAST_READ"], [336, 322, 3, "enum_LAST_WRITE"], [336, 271, 3, "enum_LAST_WRITE"], [336, 284, 3, "enum_LAST_WRITE"], [358, 284, 2, "enum_LAST_READ"], [358, 336, 2, "enum_LAST_READ"], [358, 322, 2, "enum_LAST_READ"], [358, 322, 3, "enum_LAST_WRITE"], [358, 271, 3, "enum_LAST_WRITE"], [358, 336, 3, "enum_LAST_WRITE"], [358, 284, 3, "enum_LAST_WRITE"], [101, 107, 4, "enum_COMPUTED_FROM"], [101, 103, 4, "enum_COMPUTED_FROM"], [112, 118, 4, "enum_COMPUTED_FROM"], [112, 114, 4, "enum_COMPUTED_FROM"], [168, 170, 4, "enum_COMPUTED_FROM"], [168, 176, 4, "enum_COMPUTED_FROM"], [168, 186, 4, "enum_COMPUTED_FROM"], [168, 181, 4, "enum_COMPUTED_FROM"], [219, 221, 4, "enum_COMPUTED_FROM"], [243, 245, 4, "enum_COMPUTED_FROM"], [260, 266, 4, "enum_COMPUTED_FROM"], [260, 262, 4, "enum_COMPUTED_FROM"]], "error_location": 118, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/colemanja91/pyeloqua.git", "old_path": "pyeloqua/pyeloqua.py", "hash": "30aaf05072a734ac40836ae4542844b05c6abb25", "code": "\ndef FilterDateRange(self, entity: str, field: str='', start: str='', end: str='', cdoID: int=0) -> str:\n\n    '''\n        Given an Eloqua date field, create a bounded or open date range filter\n\n        Arguments:\n\n        * entity -- one of: contacts, customObjects, accounts, activities\n        * field -- field to filter by; must resolve to a date type field\n        * start -- beginning of date range\n        * end -- end of date range\n        * cdoID -- identifier of specific CDO; required if entity = 'customObjects'; use method GetCdoId to retrieve\n\n    '''\n\n    if (start=='' and end==''):\n        raise ValueError(\"Please enter at least one datetime value: start, end\")\n\n    if (field=='' and entity!='activities'):\n        raise ValueError(\"Parameter 'field' is required for entity '\" + entity + \"'\")\n\n    if (entity == 'activities'):\n        field = 'ActivityDate'\n\n    try:\n        test1: datetime = datetime.strptime(start, '%Y-%m-%d %H:%M:%S')\n        test2: datetime = datetime.strptime(start, '%Y-%m-%d %H:%M:%S')\n    except:\n        raise ValueError(\"Invalid datetime format; use 'YYYY-MM-DD hh:mm:ss'\")\n\n    if (entity!='activities' or (entity in ['contacts', 'accounts'] and field in ['createdAt', 'updatedAt'])):\n        fieldDef: List = self.GetFields(entity=entity, fields=[field], cdoID=cdoID)\n\n        if (fieldDef[0]['dataType'] != 'date'):\n            raise Exception(\"Field '\" + field + \"' is not a date field\")\n        fieldStatement: str = fieldDef[0]['statement']\n    elif (entity=='activities'):\n        fieldStatement = system_fields.ACTIVITY_FIELDS['CommonFields']['ActivityDate']\n    else:\n        fieldStatement = system_fields.CONTACT_SYSTEM_FIELDS[field]\n\n    statement = ''\n\n    if (start!=''):\n        statement += \" '\" + fieldStatement + \"' >= '\" + start + \"' \"\n    if (start!='' and end!=''):\n        statement += ' AND '\n    if (end!=''):\n        statement += \" '\" + fieldStatement + \"' <= '\" + end + \"' \"\n\n    return statement\n", "rewrite": "ReplaceText(target='end' @(387,38)->(387,43))", "error_line": 26, "has_bug": true, "code_full": "from datetime import datetime\nfrom typing import Dict, List\n\n\nclass SystemFields:\n    ACTIVITY_FIELDS: Dict[str ,Dict[str, str]]\n    CONTACT_SYSTEM_FIELDS: Dict[str, str]\n\nsystem_fields = SystemFields()\n\nclass Class:\n    def GetFields(self, entity: str, fields: list, cdoID: int = 0) -> List:\n        return []\n    \n    def FilterDateRange(self, entity: str, field: str='', start: str='', end: str='', cdoID: int=0) -> str:\n\n        '''\n            Given an Eloqua date field, create a bounded or open date range filter\n\n            Arguments:\n\n            * entity -- one of: contacts, customObjects, accounts, activities\n            * field -- field to filter by; must resolve to a date type field\n            * start -- beginning of date range\n            * end -- end of date range\n            * cdoID -- identifier of specific CDO; required if entity = 'customObjects'; use method GetCdoId to retrieve\n\n        '''\n\n        if (start=='' and end==''):\n            raise ValueError(\"Please enter at least one datetime value: start, end\")\n\n        if (field=='' and entity!='activities'):\n            raise ValueError(\"Parameter 'field' is required for entity '\" + entity + \"'\")\n\n        if (entity == 'activities'):\n            field = 'ActivityDate'\n\n        try:\n            test1: datetime = datetime.strptime(start, '%Y-%m-%d %H:%M:%S')\n            test2: datetime = datetime.strptime(start, '%Y-%m-%d %H:%M:%S')\n        except:\n            raise ValueError(\"Invalid datetime format; use 'YYYY-MM-DD hh:mm:ss'\")\n\n        if (entity!='activities' or (entity in ['contacts', 'accounts'] and field in ['createdAt', 'updatedAt'])):\n            fieldDef: List = self.GetFields(entity=entity, fields=[field], cdoID=cdoID)\n\n            if (fieldDef[0]['dataType'] != 'date'):\n                raise Exception(\"Field '\" + field + \"' is not a date field\")\n            fieldStatement: str = fieldDef[0]['statement']\n        elif (entity=='activities'):\n            fieldStatement = system_fields.ACTIVITY_FIELDS['CommonFields']['ActivityDate']\n        else:\n            fieldStatement = system_fields.CONTACT_SYSTEM_FIELDS[field]\n\n        statement = ''\n\n        if (start!=''):\n            statement += \" '\" + fieldStatement + \"' >= '\" + start + \"' \"\n        if (start!='' and end!=''):\n            statement += ' AND '\n        if (end!=''):\n            statement += \" '\" + fieldStatement + \"' <= '\" + end + \"' \"\n\n        return statement\n", "error_location_char": [1002, 1007], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def rechannel(", "buf", ",", "in_channels", ",", "out_channels", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "(", "in_channels", ">", "2", ")", "or", "(", "out_channels", ">", "2", ")", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "NotImplemented", "(", ")", "#NEWLINE#", "#UNINDENT#", "if", "(", "in_channels", "==", "out_channels", ")", ":", "#NEWLINE#", "#INDENT#", "return", "buf", "#NEWLINE#", "#UNINDENT#", "num_frames", "=", "(", "len", "(", "buf", ")", "/", "in_channels", ")", "#NEWLINE#", "output", "=", "np", ".", "zeros", "(", "(", "num_frames", "*", "out_channels", ")", ",", "dtype", "=", "np", ".", "float32", ")", "#NEWLINE#", "if", "(", "in_channels", "<", "out_channels", ")", ":", "#NEWLINE#", "#INDENT#", "in_channel", "=", "0", "#NEWLINE#", "for", "out_channel", "in", "range", "(", "out_channels", ")", ":", "#NEWLINE#", "#INDENT#", "output", "[", "out_channel", ":", ":", "out_channels", "]", "+=", "buf", "[", "in_channel", ":", ":", "in_channels", "]", "#NEWLINE#", "in_channel", "=", "(", "(", "in_channel", "+", "1", ")", "%", "in_channels", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "out_channels", ">", "in_channels", ")", ":", "#NEWLINE#", "#INDENT#", "out_channel", "=", "0", "#NEWLINE#", "for", "in_channel", "in", "range", "(", "out_channels", ")", ":", "#NEWLINE#", "#INDENT#", "output", "[", "out_channel", ":", ":", "out_channels", "]", "+=", "buf", "[", "in_channel", ":", ":", "in_channels", "]", "#NEWLINE#", "out_channel", "=", "(", "(", "out_channel", "+", "1", ")", "%", "out_channels", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "return", "output"], "edges": [[1, 3, 7, "enum_FIELD"], [11, 18, 7, "enum_FIELD"], [34, 37, 7, "enum_FIELD"], [46, 54, 7, "enum_FIELD"], [57, 69, 7, "enum_FIELD"], [83, 80, 7, "enum_FIELD"], [188, 189, 7, "enum_FIELD"], [28, 30, 7, "enum_FIELD"], [37, 36, 7, "enum_FIELD"], [43, 44, 7, "enum_FIELD"], [54, 51, 7, "enum_FIELD"], [54, 55, 7, "enum_FIELD"], [69, 61, 7, "enum_FIELD"], [80, 79, 7, "enum_FIELD"], [85, 88, 7, "enum_FIELD"], [92, 91, 7, "enum_FIELD"], [92, 94, 7, "enum_FIELD"], [134, 137, 7, "enum_FIELD"], [15, 14, 7, "enum_FIELD"], [21, 20, 7, "enum_FIELD"], [30, 29, 7, "enum_FIELD"], [51, 50, 7, "enum_FIELD"], [61, 60, 7, "enum_FIELD"], [66, 65, 7, "enum_FIELD"], [66, 67, 7, "enum_FIELD"], [70, 73, 7, "enum_FIELD"], [94, 93, 7, "enum_FIELD"], [99, 101, 7, "enum_FIELD"], [99, 109, 7, "enum_FIELD"], [115, 124, 7, "enum_FIELD"], [137, 136, 7, "enum_FIELD"], [142, 145, 7, "enum_FIELD"], [149, 148, 7, "enum_FIELD"], [149, 151, 7, "enum_FIELD"], [73, 72, 7, "enum_FIELD"], [101, 100, 7, "enum_FIELD"], [101, 103, 7, "enum_FIELD"], [109, 108, 7, "enum_FIELD"], [109, 111, 7, "enum_FIELD"], [124, 121, 7, "enum_FIELD"], [124, 125, 7, "enum_FIELD"], [151, 150, 7, "enum_FIELD"], [156, 158, 7, "enum_FIELD"], [156, 166, 7, "enum_FIELD"], [172, 181, 7, "enum_FIELD"], [103, 102, 7, "enum_FIELD"], [103, 105, 7, "enum_FIELD"], [111, 110, 7, "enum_FIELD"], [111, 113, 7, "enum_FIELD"], [121, 120, 7, "enum_FIELD"], [121, 122, 7, "enum_FIELD"], [158, 157, 7, "enum_FIELD"], [158, 160, 7, "enum_FIELD"], [166, 165, 7, "enum_FIELD"], [166, 168, 7, "enum_FIELD"], [181, 178, 7, "enum_FIELD"], [181, 182, 7, "enum_FIELD"], [160, 159, 7, "enum_FIELD"], [160, 162, 7, "enum_FIELD"], [168, 167, 7, "enum_FIELD"], [168, 170, 7, "enum_FIELD"], [178, 177, 7, "enum_FIELD"], [178, 179, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [14, 4, 10, "enum_LAST_LEXICAL_USE"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [20, 6, 10, "enum_LAST_LEXICAL_USE"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [36, 14, 10, "enum_LAST_LEXICAL_USE"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [38, 20, 10, "enum_LAST_LEXICAL_USE"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 43, 9, "enum_NEXT_SYNTAX"], [44, 2, 10, "enum_LAST_LEXICAL_USE"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [52, 44, 10, "enum_LAST_LEXICAL_USE"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [55, 36, 10, "enum_LAST_LEXICAL_USE"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [65, 47, 10, "enum_LAST_LEXICAL_USE"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [67, 38, 10, "enum_LAST_LEXICAL_USE"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [72, 60, 10, "enum_LAST_LEXICAL_USE"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [79, 55, 10, "enum_LAST_LEXICAL_USE"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [81, 67, 10, "enum_LAST_LEXICAL_USE"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [95, 81, 10, "enum_LAST_LEXICAL_USE"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 99, 9, "enum_NEXT_SYNTAX"], [100, 58, 10, "enum_LAST_LEXICAL_USE"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [102, 91, 10, "enum_LAST_LEXICAL_USE"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [105, 95, 10, "enum_LAST_LEXICAL_USE"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [108, 52, 10, "enum_LAST_LEXICAL_USE"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [110, 86, 10, "enum_LAST_LEXICAL_USE"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [113, 79, 10, "enum_LAST_LEXICAL_USE"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [116, 110, 10, "enum_LAST_LEXICAL_USE"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [120, 116, 10, "enum_LAST_LEXICAL_USE"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [125, 113, 10, "enum_LAST_LEXICAL_USE"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [136, 105, 10, "enum_LAST_LEXICAL_USE"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [138, 125, 10, "enum_LAST_LEXICAL_USE"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 142, 9, "enum_NEXT_SYNTAX"], [143, 102, 10, "enum_LAST_LEXICAL_USE"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 147, 9, "enum_NEXT_SYNTAX"], [148, 120, 10, "enum_LAST_LEXICAL_USE"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [150, 93, 10, "enum_LAST_LEXICAL_USE"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [152, 136, 10, "enum_LAST_LEXICAL_USE"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 156, 9, "enum_NEXT_SYNTAX"], [157, 100, 10, "enum_LAST_LEXICAL_USE"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [159, 143, 10, "enum_LAST_LEXICAL_USE"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [162, 152, 10, "enum_LAST_LEXICAL_USE"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [165, 108, 10, "enum_LAST_LEXICAL_USE"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [167, 148, 10, "enum_LAST_LEXICAL_USE"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [170, 138, 10, "enum_LAST_LEXICAL_USE"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [173, 159, 10, "enum_LAST_LEXICAL_USE"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [175, 176, 9, "enum_NEXT_SYNTAX"], [177, 173, 10, "enum_LAST_LEXICAL_USE"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [182, 162, 10, "enum_LAST_LEXICAL_USE"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 188, 9, "enum_NEXT_SYNTAX"], [189, 157, 10, "enum_LAST_LEXICAL_USE"], [188, 189, 9, "enum_NEXT_SYNTAX"], [3, 18, 1, "enum_CFG_NEXT"], [18, 37, 1, "enum_CFG_NEXT"], [18, 28, 1, "enum_CFG_NEXT"], [37, 43, 1, "enum_CFG_NEXT"], [37, 46, 1, "enum_CFG_NEXT"], [46, 57, 1, "enum_CFG_NEXT"], [57, 80, 1, "enum_CFG_NEXT"], [80, 85, 1, "enum_CFG_NEXT"], [80, 137, 1, "enum_CFG_NEXT"], [85, 94, 1, "enum_CFG_NEXT"], [94, 91, 1, "enum_CFG_NEXT"], [91, 99, 1, "enum_CFG_NEXT"], [91, 188, 1, "enum_CFG_NEXT"], [99, 115, 1, "enum_CFG_NEXT"], [115, 91, 1, "enum_CFG_NEXT"], [137, 188, 1, "enum_CFG_NEXT"], [137, 142, 1, "enum_CFG_NEXT"], [142, 151, 1, "enum_CFG_NEXT"], [151, 148, 1, "enum_CFG_NEXT"], [148, 188, 1, "enum_CFG_NEXT"], [148, 156, 1, "enum_CFG_NEXT"], [156, 172, 1, "enum_CFG_NEXT"], [172, 148, 1, "enum_CFG_NEXT"], [14, 4, 3, "enum_LAST_WRITE"], [20, 6, 3, "enum_LAST_WRITE"], [36, 14, 2, "enum_LAST_READ"], [36, 4, 3, "enum_LAST_WRITE"], [38, 20, 2, "enum_LAST_READ"], [38, 6, 3, "enum_LAST_WRITE"], [44, 2, 3, "enum_LAST_WRITE"], [52, 2, 3, "enum_LAST_WRITE"], [55, 36, 2, "enum_LAST_READ"], [55, 4, 3, "enum_LAST_WRITE"], [65, 47, 3, "enum_LAST_WRITE"], [67, 38, 2, "enum_LAST_READ"], [67, 6, 3, "enum_LAST_WRITE"], [72, 60, 2, "enum_LAST_READ"], [79, 55, 2, "enum_LAST_READ"], [79, 4, 3, "enum_LAST_WRITE"], [81, 67, 2, "enum_LAST_READ"], [81, 6, 3, "enum_LAST_WRITE"], [95, 81, 2, "enum_LAST_READ"], [95, 6, 3, "enum_LAST_WRITE"], [91, 102, 2, "enum_LAST_READ"], [91, 91, 3, "enum_LAST_WRITE"], [108, 108, 2, "enum_LAST_READ"], [108, 52, 2, "enum_LAST_READ"], [108, 2, 3, "enum_LAST_WRITE"], [110, 120, 2, "enum_LAST_READ"], [110, 116, 3, "enum_LAST_WRITE"], [110, 86, 3, "enum_LAST_WRITE"], [113, 125, 2, "enum_LAST_READ"], [113, 79, 2, "enum_LAST_READ"], [113, 4, 3, "enum_LAST_WRITE"], [100, 100, 2, "enum_LAST_READ"], [100, 58, 3, "enum_LAST_WRITE"], [102, 102, 2, "enum_LAST_READ"], [102, 91, 3, "enum_LAST_WRITE"], [105, 105, 2, "enum_LAST_READ"], [105, 95, 2, "enum_LAST_READ"], [105, 6, 3, "enum_LAST_WRITE"], [120, 110, 2, "enum_LAST_READ"], [120, 116, 3, "enum_LAST_WRITE"], [120, 86, 3, "enum_LAST_WRITE"], [125, 113, 2, "enum_LAST_READ"], [125, 4, 3, "enum_LAST_WRITE"], [116, 120, 2, "enum_LAST_READ"], [116, 116, 3, "enum_LAST_WRITE"], [116, 86, 3, "enum_LAST_WRITE"], [136, 81, 2, "enum_LAST_READ"], [136, 6, 3, "enum_LAST_WRITE"], [138, 79, 2, "enum_LAST_READ"], [138, 4, 3, "enum_LAST_WRITE"], [152, 136, 2, "enum_LAST_READ"], [152, 6, 3, "enum_LAST_WRITE"], [148, 167, 2, "enum_LAST_READ"], [148, 148, 3, "enum_LAST_WRITE"], [165, 165, 2, "enum_LAST_READ"], [165, 52, 2, "enum_LAST_READ"], [165, 2, 3, "enum_LAST_WRITE"], [167, 167, 2, "enum_LAST_READ"], [167, 148, 3, "enum_LAST_WRITE"], [170, 170, 2, "enum_LAST_READ"], [170, 138, 2, "enum_LAST_READ"], [170, 4, 3, "enum_LAST_WRITE"], [157, 157, 2, "enum_LAST_READ"], [157, 58, 3, "enum_LAST_WRITE"], [159, 177, 2, "enum_LAST_READ"], [159, 143, 3, "enum_LAST_WRITE"], [159, 173, 3, "enum_LAST_WRITE"], [162, 152, 2, "enum_LAST_READ"], [162, 182, 2, "enum_LAST_READ"], [162, 6, 3, "enum_LAST_WRITE"], [177, 159, 2, "enum_LAST_READ"], [177, 143, 3, "enum_LAST_WRITE"], [177, 173, 3, "enum_LAST_WRITE"], [182, 162, 2, "enum_LAST_READ"], [182, 6, 3, "enum_LAST_WRITE"], [173, 177, 2, "enum_LAST_READ"], [173, 143, 3, "enum_LAST_WRITE"], [173, 173, 3, "enum_LAST_WRITE"], [189, 157, 2, "enum_LAST_READ"], [189, 100, 2, "enum_LAST_READ"], [189, 58, 3, "enum_LAST_WRITE"], [47, 55, 4, "enum_COMPUTED_FROM"], [47, 50, 4, "enum_COMPUTED_FROM"], [47, 52, 4, "enum_COMPUTED_FROM"], [58, 60, 4, "enum_COMPUTED_FROM"], [58, 65, 4, "enum_COMPUTED_FROM"], [58, 67, 4, "enum_COMPUTED_FROM"], [58, 72, 4, "enum_COMPUTED_FROM"], [116, 125, 4, "enum_COMPUTED_FROM"], [116, 120, 4, "enum_COMPUTED_FROM"], [173, 182, 4, "enum_COMPUTED_FROM"], [173, 177, 4, "enum_COMPUTED_FROM"]], "error_location": 152, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/eflynch/dspy.git", "old_path": "dspy/lib.py", "hash": "27d706cdf4e25c5750560d957e34319cfd51e145", "code": "def rechannel(buf: np.ndarray, in_channels: int, out_channels: int) -> np.ndarray:\n    if in_channels > 2 or out_channels > 2:\n        raise NotImplemented()\n\n    if in_channels == out_channels:\n        return buf\n\n    num_frames: float = len(buf)/in_channels\n    output: np.ndarray = np.zeros(num_frames*out_channels, dtype=np.float32)\n    if in_channels < out_channels:\n        in_channel = 0\n        for out_channel in range(out_channels):\n            output[out_channel::out_channels] += buf[in_channel::in_channels]\n            in_channel = (in_channel + 1) % in_channels\n    elif out_channels > in_channels:\n        out_channel = 0\n        for in_channel in range(out_channels):\n            output[out_channel::out_channels] += buf[in_channel::in_channels]\n            out_channel = (out_channel + 1) % out_channels\n\n    return output\n", "rewrite": "ReplaceText(target='in_channels' @(24,32)->(24,44))", "error_line": 16, "has_bug": true, "code_full": "import numpy as np\n\n\ndef rechannel(buf: np.ndarray, in_channels: int, out_channels: int) -> np.ndarray:\n    if in_channels > 2 or out_channels > 2:\n        raise NotImplemented()\n\n    if in_channels == out_channels:\n        return buf\n\n    num_frames: float = len(buf)/in_channels\n    output: np.ndarray = np.zeros(num_frames*out_channels, dtype=np.float32)\n    if in_channels < out_channels:\n        in_channel = 0\n        for out_channel in range(out_channels):\n            output[out_channel::out_channels] += buf[in_channel::in_channels]\n            in_channel = (in_channel + 1) % in_channels\n    elif out_channels > in_channels:\n        out_channel = 0\n        for in_channel in range(out_channels):\n            output[out_channel::out_channels] += buf[in_channel::in_channels]\n            out_channel = (out_channel + 1) % out_channels\n\n    return output\n", "error_location_char": [670, 682], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def mdata(", "path", ",", "track_element", ")", ":", "#NEWLINE#", "#INDENT#", "'Find the metadata of each accesible file, and format as XML.'", "#NEWLINE#", "tags", "=", "{", "'title'", ",", "'artist'", ",", "'album'", ",", "'genre'", ",", "'recording date'", ",", "'label'", "}", "#NEWLINE#", "cmd", "=", "[", "'ffprobe'", ",", "path", ".", "rstrip", "(", ")", "]", "#NEWLINE#", "process", "=", "subprocess", ".", "Popen", "(", "cmd", ",", "stdout", "=", "subprocess", ".", "PIPE", ",", "stderr", "=", "subprocess", ".", "STDOUT", ")", "#NEWLINE#", "while", "True", ":", "#NEWLINE#", "#INDENT#", "out", "=", "process", ".", "stdout", ".", "readline", "(", ")", "#NEWLINE#", "decoded", "=", "out", ".", "decode", "(", "'utf-8'", ")", "#NEWLINE#", "if", "(", "out", "!=", "b''", ")", ":", "#NEWLINE#", "#INDENT#", "linecheck", "=", "decoded", ".", "replace", "(", "' '", ",", "''", ")", "#NEWLINE#", "for", "tag", "in", "tags", ":", "#NEWLINE#", "#INDENT#", "tagstring", "=", "(", "tag", "+", "':'", ")", "#NEWLINE#", "if", "(", "tagstring", "in", "linecheck", ")", ":", "#NEWLINE#", "#INDENT#", "stringf", "=", "decoded", ".", "split", "(", "': '", ")", "[", "1", "]", "#NEWLINE#", "ttag", "=", "tag", "#NEWLINE#", "if", "(", "tag", "==", "'artist'", ")", ":", "#NEWLINE#", "#INDENT#", "ttag", "=", "'creator'", "#NEWLINE#", "#UNINDENT#", "if", "(", "tag", "==", "'genre'", ")", ":", "#NEWLINE#", "#INDENT#", "ttag", "=", "'info'", "#NEWLINE#", "#UNINDENT#", "ttag", "=", "SubElement", "(", "track_element", ",", "tag", ")", "#NEWLINE#", "ttag", ".", "text", "=", "stringf", ".", "rstrip", "(", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "break"], "edges": [[1, 3, 7, "enum_FIELD"], [8, 9, 7, "enum_FIELD"], [10, 19, 7, "enum_FIELD"], [26, 31, 7, "enum_FIELD"], [38, 46, 7, "enum_FIELD"], [60, 61, 7, "enum_FIELD"], [46, 42, 7, "enum_FIELD"], [64, 72, 7, "enum_FIELD"], [74, 80, 7, "enum_FIELD"], [90, 87, 7, "enum_FIELD"], [35, 33, 7, "enum_FIELD"], [42, 41, 7, "enum_FIELD"], [47, 50, 7, "enum_FIELD"], [53, 56, 7, "enum_FIELD"], [72, 70, 7, "enum_FIELD"], [80, 78, 7, "enum_FIELD"], [87, 86, 7, "enum_FIELD"], [92, 100, 7, "enum_FIELD"], [106, 105, 7, "enum_FIELD"], [106, 107, 7, "enum_FIELD"], [33, 32, 7, "enum_FIELD"], [50, 49, 7, "enum_FIELD"], [56, 55, 7, "enum_FIELD"], [70, 68, 7, "enum_FIELD"], [78, 77, 7, "enum_FIELD"], [100, 96, 7, "enum_FIELD"], [110, 115, 7, "enum_FIELD"], [119, 122, 7, "enum_FIELD"], [68, 67, 7, "enum_FIELD"], [96, 95, 7, "enum_FIELD"], [115, 114, 7, "enum_FIELD"], [115, 116, 7, "enum_FIELD"], [122, 121, 7, "enum_FIELD"], [127, 136, 7, "enum_FIELD"], [139, 142, 7, "enum_FIELD"], [144, 147, 7, "enum_FIELD"], [158, 161, 7, "enum_FIELD"], [171, 177, 7, "enum_FIELD"], [180, 188, 7, "enum_FIELD"], [136, 133, 7, "enum_FIELD"], [136, 137, 7, "enum_FIELD"], [147, 146, 7, "enum_FIELD"], [152, 155, 7, "enum_FIELD"], [161, 160, 7, "enum_FIELD"], [166, 169, 7, "enum_FIELD"], [177, 174, 7, "enum_FIELD"], [182, 181, 7, "enum_FIELD"], [188, 186, 7, "enum_FIELD"], [133, 131, 7, "enum_FIELD"], [186, 185, 7, "enum_FIELD"], [131, 130, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [32, 2, 10, "enum_LAST_LEXICAL_USE"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [45, 27, 10, "enum_LAST_LEXICAL_USE"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [49, 41, 10, "enum_LAST_LEXICAL_USE"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [55, 49, 10, "enum_LAST_LEXICAL_USE"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [67, 39, 10, "enum_LAST_LEXICAL_USE"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [77, 65, 10, "enum_LAST_LEXICAL_USE"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [86, 77, 10, "enum_LAST_LEXICAL_USE"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [95, 75, 10, "enum_LAST_LEXICAL_USE"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [107, 11, 10, "enum_LAST_LEXICAL_USE"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [114, 105, 10, "enum_LAST_LEXICAL_USE"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [121, 111, 10, "enum_LAST_LEXICAL_USE"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [123, 93, 10, "enum_LAST_LEXICAL_USE"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [130, 95, 10, "enum_LAST_LEXICAL_USE"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [142, 114, 10, "enum_LAST_LEXICAL_USE"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [146, 142, 10, "enum_LAST_LEXICAL_USE"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 152, 9, "enum_NEXT_SYNTAX"], [153, 140, 10, "enum_LAST_LEXICAL_USE"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [160, 146, 10, "enum_LAST_LEXICAL_USE"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 166, 9, "enum_NEXT_SYNTAX"], [167, 153, 10, "enum_LAST_LEXICAL_USE"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 171, 9, "enum_NEXT_SYNTAX"], [172, 167, 10, "enum_LAST_LEXICAL_USE"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [176, 4, 10, "enum_LAST_LEXICAL_USE"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [178, 160, 10, "enum_LAST_LEXICAL_USE"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 180, 9, "enum_NEXT_SYNTAX"], [181, 172, 10, "enum_LAST_LEXICAL_USE"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 184, 9, "enum_NEXT_SYNTAX"], [185, 128, 10, "enum_LAST_LEXICAL_USE"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [187, 188, 9, "enum_NEXT_SYNTAX"], [188, 189, 9, "enum_NEXT_SYNTAX"], [189, 194, 9, "enum_NEXT_SYNTAX"], [194, 195, 9, "enum_NEXT_SYNTAX"], [195, 198, 9, "enum_NEXT_SYNTAX"], [3, 8, 1, "enum_CFG_NEXT"], [8, 10, 1, "enum_CFG_NEXT"], [10, 26, 1, "enum_CFG_NEXT"], [26, 38, 1, "enum_CFG_NEXT"], [38, 61, 1, "enum_CFG_NEXT"], [61, 64, 1, "enum_CFG_NEXT"], [64, 74, 1, "enum_CFG_NEXT"], [74, 87, 1, "enum_CFG_NEXT"], [87, 92, 1, "enum_CFG_NEXT"], [92, 107, 1, "enum_CFG_NEXT"], [107, 105, 1, "enum_CFG_NEXT"], [105, 110, 1, "enum_CFG_NEXT"], [105, 61, 1, "enum_CFG_NEXT"], [110, 122, 1, "enum_CFG_NEXT"], [122, 127, 1, "enum_CFG_NEXT"], [122, 105, 1, "enum_CFG_NEXT"], [127, 139, 1, "enum_CFG_NEXT"], [139, 147, 1, "enum_CFG_NEXT"], [147, 161, 1, "enum_CFG_NEXT"], [147, 152, 1, "enum_CFG_NEXT"], [152, 161, 1, "enum_CFG_NEXT"], [161, 171, 1, "enum_CFG_NEXT"], [161, 166, 1, "enum_CFG_NEXT"], [166, 171, 1, "enum_CFG_NEXT"], [171, 180, 1, "enum_CFG_NEXT"], [180, 105, 1, "enum_CFG_NEXT"], [32, 2, 3, "enum_LAST_WRITE"], [45, 27, 3, "enum_LAST_WRITE"], [49, 41, 2, "enum_LAST_READ"], [55, 49, 2, "enum_LAST_READ"], [67, 67, 2, "enum_LAST_READ"], [67, 39, 3, "enum_LAST_WRITE"], [65, 86, 2, "enum_LAST_READ"], [65, 65, 3, "enum_LAST_WRITE"], [77, 86, 2, "enum_LAST_READ"], [77, 65, 3, "enum_LAST_WRITE"], [75, 95, 2, "enum_LAST_READ"], [75, 130, 2, "enum_LAST_READ"], [75, 75, 3, "enum_LAST_WRITE"], [86, 77, 2, "enum_LAST_READ"], [86, 65, 3, "enum_LAST_WRITE"], [95, 95, 2, "enum_LAST_READ"], [95, 130, 2, "enum_LAST_READ"], [95, 75, 3, "enum_LAST_WRITE"], [93, 123, 2, "enum_LAST_READ"], [93, 93, 3, "enum_LAST_WRITE"], [107, 107, 2, "enum_LAST_READ"], [107, 11, 3, "enum_LAST_WRITE"], [105, 114, 2, "enum_LAST_READ"], [105, 178, 2, "enum_LAST_READ"], [105, 105, 3, "enum_LAST_WRITE"], [114, 114, 2, "enum_LAST_READ"], [114, 178, 2, "enum_LAST_READ"], [114, 105, 3, "enum_LAST_WRITE"], [111, 121, 2, "enum_LAST_READ"], [111, 111, 3, "enum_LAST_WRITE"], [121, 121, 2, "enum_LAST_READ"], [121, 111, 3, "enum_LAST_WRITE"], [123, 123, 2, "enum_LAST_READ"], [123, 93, 3, "enum_LAST_WRITE"], [130, 95, 2, "enum_LAST_READ"], [130, 130, 2, "enum_LAST_READ"], [130, 75, 3, "enum_LAST_WRITE"], [128, 185, 2, "enum_LAST_READ"], [128, 128, 3, "enum_LAST_WRITE"], [142, 114, 2, "enum_LAST_READ"], [142, 105, 3, "enum_LAST_WRITE"], [140, 181, 2, "enum_LAST_READ"], [140, 172, 3, "enum_LAST_WRITE"], [146, 142, 2, "enum_LAST_READ"], [146, 105, 3, "enum_LAST_WRITE"], [153, 181, 2, "enum_LAST_READ"], [153, 140, 3, "enum_LAST_WRITE"], [160, 146, 2, "enum_LAST_READ"], [160, 105, 3, "enum_LAST_WRITE"], [167, 181, 2, "enum_LAST_READ"], [167, 153, 3, "enum_LAST_WRITE"], [167, 140, 3, "enum_LAST_WRITE"], [174, 174, 2, "enum_LAST_READ"], [176, 176, 2, "enum_LAST_READ"], [176, 4, 3, "enum_LAST_WRITE"], [178, 160, 2, "enum_LAST_READ"], [178, 105, 3, "enum_LAST_WRITE"], [172, 181, 2, "enum_LAST_READ"], [172, 153, 3, "enum_LAST_WRITE"], [172, 167, 3, "enum_LAST_WRITE"], [172, 140, 3, "enum_LAST_WRITE"], [185, 185, 2, "enum_LAST_READ"], [185, 128, 3, "enum_LAST_WRITE"], [181, 181, 2, "enum_LAST_READ"], [181, 172, 3, "enum_LAST_WRITE"], [27, 32, 4, "enum_COMPUTED_FROM"], [39, 45, 4, "enum_COMPUTED_FROM"], [39, 41, 4, "enum_COMPUTED_FROM"], [39, 49, 4, "enum_COMPUTED_FROM"], [39, 55, 4, "enum_COMPUTED_FROM"], [65, 67, 4, "enum_COMPUTED_FROM"], [75, 77, 4, "enum_COMPUTED_FROM"], [93, 95, 4, "enum_COMPUTED_FROM"], [111, 114, 4, "enum_COMPUTED_FROM"], [128, 130, 4, "enum_COMPUTED_FROM"], [140, 142, 4, "enum_COMPUTED_FROM"], [172, 174, 4, "enum_COMPUTED_FROM"], [172, 176, 4, "enum_COMPUTED_FROM"], [172, 178, 4, "enum_COMPUTED_FROM"], [182, 185, 4, "enum_COMPUTED_FROM"]], "error_location": 178, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/ibrokemypie/m3uspiff.git", "old_path": "m3uspiff.py", "hash": "aca86931f7453d9c90c2ef779ede1659d10af00d", "code": "def mdata(path, track_element: Any):\n    \"\"\"Find the metadata of each accesible file, and format as XML.\"\"\"\n    # Define list of tags to search for\n    tags: Set[str] = {\"title\", \"artist\", \"album\", \"genre\", \"recording date\", \"label\"}\n    # Define ffprobe syntax\n    cmd: List[str] = ['ffprobe', path.rstrip()]\n    process: subprocess.Popen = subprocess.Popen(cmd, stdout=subprocess.PIPE,\n                               stderr=subprocess.STDOUT)\n    # Main loop\n    while True:\n        out: bytes = process.stdout.readline()\n        decoded: str = out.decode('utf-8')\n        if out != b'':\n            linecheck: str = decoded.replace(\" \", \"\")\n            for tag in tags:\n                tagstring: str = tag+\":\"\n                if tagstring in linecheck:\n                    stringf: str = decoded.split(': ')[1]\n                    ttag: str = tag\n                    if tag == \"artist\":\n                        ttag = \"creator\"\n                    if tag == \"genre\":\n                        ttag = \"info\"\n                    ttag: Element = SubElement(track_element, tag)\n                    ttag.text = stringf.rstrip()\n        else:\n            break\n", "rewrite": "ReplaceText(target='ttag' @(48,53)->(48,56))", "error_line": 23, "has_bug": true, "code_full": "import subprocess\nfrom typing import Any, List, Set\nfrom xml.etree.ElementTree import Element, SubElement\n\n\ndef mdata(path, track_element: Any):\n    \"\"\"Find the metadata of each accesible file, and format as XML.\"\"\"\n    # Define list of tags to search for\n    tags: Set[str] = {\"title\", \"artist\", \"album\", \"genre\", \"recording date\", \"label\"}\n    # Define ffprobe syntax\n    cmd: List[str] = ['ffprobe', path.rstrip()]\n    process: subprocess.Popen = subprocess.Popen(cmd, stdout=subprocess.PIPE,\n                               stderr=subprocess.STDOUT)\n    # Main loop\n    while True:\n        out: bytes = process.stdout.readline()\n        decoded: str = out.decode('utf-8')\n        if out != b'':\n            linecheck: str = decoded.replace(\" \", \"\")\n            for tag in tags:\n                tagstring: str = tag+\":\"\n                if tagstring in linecheck:\n                    stringf: str = decoded.split(': ')[1]\n                    ttag: str = tag\n                    if tag == \"artist\":\n                        ttag = \"creator\"\n                    if tag == \"genre\":\n                        ttag = \"info\"\n                    ttag: Element = SubElement(track_element, tag)\n                    ttag.text = stringf.rstrip()\n        else:\n            break\n", "error_location_char": [1071, 1074], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def clickGraphic(", "imagepath", ",", "delay", "=", "10", ",", "confidence", "=", "1", ")", ":", "#NEWLINE#", "#INDENT#", "elemToClick", "=", "None", "#NEWLINE#", "numTries", "=", "1", "#NEWLINE#", "print", "(", "'    (0): locating {} ...'", ".", "format", "(", "imagepath", ")", ")", "#NEWLINE#", "while", "(", "(", "elemToClick", "is", "None", ")", "and", "(", "numTries", "<", "delay", ")", ")", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "elemToClick", "=", "pyautogui", ".", "locateOnScreen", "(", "imagepath", ",", "confidence", ")", "#NEWLINE#", "#UNINDENT#", "except", "Exception", "as", "exp", ":", "#NEWLINE#", "#INDENT#", "if", "isinstance", "(", "exp", ",", "pyautogui", ".", "pyscreeze", ".", "ImageNotFoundException", ")", ":", "#NEWLINE#", "#INDENT#", "print", "(", "'    ({}): locating {} ...'", ".", "format", "(", "numTries", ",", "imagepath", ")", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "print", "(", "exp", ")", "#NEWLINE#", "break", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "finally", ":", "#NEWLINE#", "#INDENT#", "numTries", "+=", "1", "#NEWLINE#", "time", ".", "sleep", "(", "1", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "if", "(", "elemToClick", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "print", "(", "'    (x): could not locate image {}'", ".", "format", "(", "elemToClick", ")", ")", "#NEWLINE#", "return", "False", "#NEWLINE#", "#UNINDENT#", "time", ".", "sleep", "(", "1", ")", "#NEWLINE#", "pyautogui", ".", "click", "(", "pyautogui", ".", "center", "(", "elemToClick", ")", ")", "#NEWLINE#", "print", "(", "'    (\u2713): clicked {}'", ".", "format", "(", "elemToClick", ")", ")", "#NEWLINE#", "time", ".", "sleep", "(", "1", ")", "#NEWLINE#", "return", "True"], "edges": [[1, 5, 7, "enum_FIELD"], [14, 17, 7, "enum_FIELD"], [18, 21, 7, "enum_FIELD"], [22, 24, 7, "enum_FIELD"], [33, 40, 7, "enum_FIELD"], [130, 133, 7, "enum_FIELD"], [152, 156, 7, "enum_FIELD"], [159, 163, 7, "enum_FIELD"], [171, 173, 7, "enum_FIELD"], [181, 185, 7, "enum_FIELD"], [189, 190, 7, "enum_FIELD"], [24, 23, 7, "enum_FIELD"], [133, 132, 7, "enum_FIELD"], [138, 140, 7, "enum_FIELD"], [149, 150, 7, "enum_FIELD"], [156, 154, 7, "enum_FIELD"], [163, 161, 7, "enum_FIELD"], [173, 172, 7, "enum_FIELD"], [185, 183, 7, "enum_FIELD"], [28, 26, 7, "enum_FIELD"], [37, 36, 7, "enum_FIELD"], [43, 42, 7, "enum_FIELD"], [53, 61, 7, "enum_FIELD"], [68, 67, 7, "enum_FIELD"], [68, 69, 7, "enum_FIELD"], [116, 117, 7, "enum_FIELD"], [116, 119, 7, "enum_FIELD"], [120, 124, 7, "enum_FIELD"], [140, 139, 7, "enum_FIELD"], [154, 153, 7, "enum_FIELD"], [161, 160, 7, "enum_FIELD"], [167, 165, 7, "enum_FIELD"], [177, 175, 7, "enum_FIELD"], [183, 182, 7, "enum_FIELD"], [26, 25, 7, "enum_FIELD"], [61, 57, 7, "enum_FIELD"], [84, 77, 7, "enum_FIELD"], [124, 122, 7, "enum_FIELD"], [144, 142, 7, "enum_FIELD"], [165, 164, 7, "enum_FIELD"], [175, 174, 7, "enum_FIELD"], [57, 56, 7, "enum_FIELD"], [77, 74, 7, "enum_FIELD"], [86, 88, 7, "enum_FIELD"], [103, 105, 7, "enum_FIELD"], [122, 121, 7, "enum_FIELD"], [142, 141, 7, "enum_FIELD"], [81, 79, 7, "enum_FIELD"], [88, 87, 7, "enum_FIELD"], [105, 104, 7, "enum_FIELD"], [79, 78, 7, "enum_FIELD"], [94, 90, 7, "enum_FIELD"], [90, 89, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [29, 2, 10, "enum_LAST_LEXICAL_USE"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [36, 15, 10, "enum_LAST_LEXICAL_USE"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [42, 19, 10, "enum_LAST_LEXICAL_USE"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [44, 4, 10, "enum_LAST_LEXICAL_USE"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 53, 9, "enum_NEXT_SYNTAX"], [54, 36, 10, "enum_LAST_LEXICAL_USE"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [60, 29, 10, "enum_LAST_LEXICAL_USE"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [62, 8, 10, "enum_LAST_LEXICAL_USE"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [76, 69, 10, "enum_LAST_LEXICAL_USE"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [78, 56, 10, "enum_LAST_LEXICAL_USE"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 86, 9, "enum_NEXT_SYNTAX"], [87, 23, 10, "enum_LAST_LEXICAL_USE"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [93, 42, 10, "enum_LAST_LEXICAL_USE"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [95, 60, 10, "enum_LAST_LEXICAL_USE"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 103, 9, "enum_NEXT_SYNTAX"], [104, 87, 10, "enum_LAST_LEXICAL_USE"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [106, 76, 10, "enum_LAST_LEXICAL_USE"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 109, 9, "enum_NEXT_SYNTAX"], [109, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 116, 9, "enum_NEXT_SYNTAX"], [117, 93, 10, "enum_LAST_LEXICAL_USE"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [132, 54, 10, "enum_LAST_LEXICAL_USE"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 138, 9, "enum_NEXT_SYNTAX"], [139, 104, 10, "enum_LAST_LEXICAL_USE"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [145, 132, 10, "enum_LAST_LEXICAL_USE"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 152, 9, "enum_NEXT_SYNTAX"], [153, 121, 10, "enum_LAST_LEXICAL_USE"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [160, 78, 10, "enum_LAST_LEXICAL_USE"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [164, 160, 10, "enum_LAST_LEXICAL_USE"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [168, 145, 10, "enum_LAST_LEXICAL_USE"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [172, 139, 10, "enum_LAST_LEXICAL_USE"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [178, 168, 10, "enum_LAST_LEXICAL_USE"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [182, 153, 10, "enum_LAST_LEXICAL_USE"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 184, 9, "enum_NEXT_SYNTAX"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [187, 189, 9, "enum_NEXT_SYNTAX"], [189, 190, 9, "enum_NEXT_SYNTAX"], [6, 10, 1, "enum_CFG_NEXT"], [10, 1, 1, "enum_CFG_NEXT"], [5, 14, 1, "enum_CFG_NEXT"], [14, 18, 1, "enum_CFG_NEXT"], [18, 22, 1, "enum_CFG_NEXT"], [22, 40, 1, "enum_CFG_NEXT"], [40, 53, 1, "enum_CFG_NEXT"], [40, 133, 1, "enum_CFG_NEXT"], [116, 120, 1, "enum_CFG_NEXT"], [120, 40, 1, "enum_CFG_NEXT"], [120, 133, 1, "enum_CFG_NEXT"], [53, 116, 1, "enum_CFG_NEXT"], [53, 67, 1, "enum_CFG_NEXT"], [67, 69, 1, "enum_CFG_NEXT"], [67, 116, 1, "enum_CFG_NEXT"], [69, 77, 1, "enum_CFG_NEXT"], [77, 86, 1, "enum_CFG_NEXT"], [77, 116, 1, "enum_CFG_NEXT"], [77, 103, 1, "enum_CFG_NEXT"], [86, 116, 1, "enum_CFG_NEXT"], [103, 116, 1, "enum_CFG_NEXT"], [133, 138, 1, "enum_CFG_NEXT"], [133, 152, 1, "enum_CFG_NEXT"], [138, 149, 1, "enum_CFG_NEXT"], [152, 159, 1, "enum_CFG_NEXT"], [159, 171, 1, "enum_CFG_NEXT"], [171, 181, 1, "enum_CFG_NEXT"], [181, 189, 1, "enum_CFG_NEXT"], [29, 2, 3, "enum_LAST_WRITE"], [36, 36, 2, "enum_LAST_READ"], [36, 54, 3, "enum_LAST_WRITE"], [36, 15, 3, "enum_LAST_WRITE"], [42, 117, 2, "enum_LAST_READ"], [42, 117, 3, "enum_LAST_WRITE"], [42, 19, 3, "enum_LAST_WRITE"], [44, 44, 2, "enum_LAST_READ"], [44, 4, 3, "enum_LAST_WRITE"], [117, 93, 2, "enum_LAST_READ"], [117, 42, 2, "enum_LAST_READ"], [117, 117, 3, "enum_LAST_WRITE"], [117, 19, 3, "enum_LAST_WRITE"], [117, 117, 2, "enum_LAST_READ"], [117, 117, 3, "enum_LAST_WRITE"], [117, 19, 3, "enum_LAST_WRITE"], [121, 121, 2, "enum_LAST_READ"], [56, 56, 2, "enum_LAST_READ"], [56, 78, 2, "enum_LAST_READ"], [60, 60, 2, "enum_LAST_READ"], [60, 95, 2, "enum_LAST_READ"], [60, 29, 2, "enum_LAST_READ"], [60, 2, 3, "enum_LAST_WRITE"], [62, 62, 2, "enum_LAST_READ"], [62, 8, 3, "enum_LAST_WRITE"], [54, 36, 2, "enum_LAST_READ"], [54, 54, 3, "enum_LAST_WRITE"], [54, 15, 3, "enum_LAST_WRITE"], [67, 67, 2, "enum_LAST_READ"], [69, 76, 2, "enum_LAST_READ"], [69, 106, 2, "enum_LAST_READ"], [69, 69, 3, "enum_LAST_WRITE"], [74, 74, 2, "enum_LAST_READ"], [76, 76, 2, "enum_LAST_READ"], [76, 106, 2, "enum_LAST_READ"], [76, 69, 3, "enum_LAST_WRITE"], [78, 56, 2, "enum_LAST_READ"], [87, 87, 2, "enum_LAST_READ"], [87, 104, 2, "enum_LAST_READ"], [87, 23, 2, "enum_LAST_READ"], [93, 42, 2, "enum_LAST_READ"], [93, 117, 3, "enum_LAST_WRITE"], [93, 19, 3, "enum_LAST_WRITE"], [95, 60, 2, "enum_LAST_READ"], [95, 2, 3, "enum_LAST_WRITE"], [104, 87, 2, "enum_LAST_READ"], [104, 104, 2, "enum_LAST_READ"], [104, 23, 2, "enum_LAST_READ"], [106, 76, 2, "enum_LAST_READ"], [106, 69, 3, "enum_LAST_WRITE"], [132, 36, 2, "enum_LAST_READ"], [132, 54, 3, "enum_LAST_WRITE"], [132, 15, 3, "enum_LAST_WRITE"], [139, 87, 2, "enum_LAST_READ"], [139, 104, 2, "enum_LAST_READ"], [139, 23, 2, "enum_LAST_READ"], [145, 132, 2, "enum_LAST_READ"], [145, 54, 3, "enum_LAST_WRITE"], [145, 15, 3, "enum_LAST_WRITE"], [153, 121, 2, "enum_LAST_READ"], [160, 56, 2, "enum_LAST_READ"], [160, 78, 2, "enum_LAST_READ"], [164, 160, 2, "enum_LAST_READ"], [168, 132, 2, "enum_LAST_READ"], [168, 54, 3, "enum_LAST_WRITE"], [168, 15, 3, "enum_LAST_WRITE"], [172, 87, 2, "enum_LAST_READ"], [172, 104, 2, "enum_LAST_READ"], [172, 23, 2, "enum_LAST_READ"], [178, 168, 2, "enum_LAST_READ"], [178, 54, 3, "enum_LAST_WRITE"], [178, 15, 3, "enum_LAST_WRITE"], [182, 153, 2, "enum_LAST_READ"], [54, 60, 4, "enum_COMPUTED_FROM"], [54, 62, 4, "enum_COMPUTED_FROM"], [54, 56, 4, "enum_COMPUTED_FROM"]], "error_location": 145, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/scubbx/webguitest.git", "old_path": "webguitest/clickGraphic.py", "hash": "ad615df8b42c2adadf5759951ed1029e7a186217", "code": "def clickGraphic(imagepath :str,delay: int=10,confidence: int=1) -> bool:\n    elemToClick: Optional[Any] = None\n    numTries: int = 1\n    print(\"    (0): locating {} ...\".format(imagepath))\n    while (elemToClick is None) and (numTries < delay):\n        try:\n            elemToClick: Any = pyautogui.locateOnScreen(imagepath,confidence)\n        except Exception as exp:\n            if isinstance(exp, pyautogui.pyscreeze.ImageNotFoundException):\n                print(\"    ({}): locating {} ...\".format(numTries,imagepath))\n            else:\n                print(exp)\n                break\n        finally:\n            numTries += 1\n            time.sleep(1)\n    if elemToClick is None:\n        print(\"    (x): could not locate image {}\".format(elemToClick))\n        return False\n    time.sleep(1)\n    pyautogui.click(pyautogui.center(elemToClick))\n    print(\"    (\u2713): clicked {}\".format(elemToClick))\n    time.sleep(1)\n    return True\n", "rewrite": "ReplaceText(target='imagepath' @(38,62)->(38,73))", "error_line": 17, "has_bug": true, "code_full": "import time\nfrom typing import Any, Optional\n\nimport pyautogui\n\n\ndef clickGraphic(imagepath :str,delay: int=10,confidence: int=1) -> bool:\n    elemToClick: Optional[Any] = None\n    numTries: int = 1\n    print(\"    (0): locating {} ...\".format(imagepath))\n    while (elemToClick is None) and (numTries < delay):\n        try:\n            elemToClick: Any = pyautogui.locateOnScreen(imagepath,confidence)\n        except Exception as exp:\n            if isinstance(exp, pyautogui.pyscreeze.ImageNotFoundException):\n                print(\"    ({}): locating {} ...\".format(numTries,imagepath))\n            else:\n                print(exp)\n                break\n        finally:\n            numTries += 1\n            time.sleep(1)\n    if elemToClick is None:\n        print(\"    (x): could not locate image {}\".format(elemToClick))\n        return False\n    time.sleep(1)\n    pyautogui.click(pyautogui.center(elemToClick))\n    print(\"    (\u2713): clicked {}\".format(elemToClick))\n    time.sleep(1)\n    return True\n", "error_location_char": [746, 757], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def render_to_response(", "self", ",", "request", ",", "template", ",", "context", "=", "None", ",", "**kwargs", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Renders a template as a HttpResponse using the context of this page.\\n    \\n    The template should extend the \"pages/base.html\" template for everything\\n    to work correctly.\\n    '", "#NEWLINE#", "page_context", "=", "{", "'meta_description'", ":", "self", ".", "meta_description", ",", "'meta_keywords'", ":", "self", ".", "meta_keywords", ",", "'robots_index'", ":", "self", ".", "robots_index", ",", "'robots_archive'", ":", "self", ".", "robots_archive", ",", "'robots_follow'", ":", "self", ".", "robots_follow", ",", "'title'", ":", "(", "self", ".", "browser_title", "or", "self", ".", "title", ")", ",", "'header'", ":", "self", ".", "title", "}", "#NEWLINE#", "page_context", ".", "update", "(", "(", "context", "or", "{", "}", ")", ")", "#NEWLINE#", "return", "render_to_response", "(", "template", ",", "context", ",", "RequestContext", "(", "request", ")", ",", "**", "kwargs", ")"], "edges": [[1, 7, 7, "enum_FIELD"], [16, 17, 7, "enum_FIELD"], [18, 41, 7, "enum_FIELD"], [70, 74, 7, "enum_FIELD"], [83, 89, 7, "enum_FIELD"], [74, 72, 7, "enum_FIELD"], [89, 84, 7, "enum_FIELD"], [25, 24, 7, "enum_FIELD"], [31, 30, 7, "enum_FIELD"], [37, 36, 7, "enum_FIELD"], [43, 42, 7, "enum_FIELD"], [49, 48, 7, "enum_FIELD"], [67, 66, 7, "enum_FIELD"], [72, 71, 7, "enum_FIELD"], [91, 90, 7, "enum_FIELD"], [95, 96, 7, "enum_FIELD"], [56, 55, 7, "enum_FIELD"], [60, 59, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [24, 2, 10, "enum_LAST_LEXICAL_USE"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [30, 24, 10, "enum_LAST_LEXICAL_USE"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [36, 30, 10, "enum_LAST_LEXICAL_USE"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [42, 36, 10, "enum_LAST_LEXICAL_USE"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [48, 42, 10, "enum_LAST_LEXICAL_USE"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [55, 48, 10, "enum_LAST_LEXICAL_USE"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [59, 55, 10, "enum_LAST_LEXICAL_USE"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [66, 59, 10, "enum_LAST_LEXICAL_USE"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [71, 19, 10, "enum_LAST_LEXICAL_USE"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [76, 8, 10, "enum_LAST_LEXICAL_USE"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [86, 6, 10, "enum_LAST_LEXICAL_USE"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [88, 76, 10, "enum_LAST_LEXICAL_USE"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [92, 4, 10, "enum_LAST_LEXICAL_USE"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [10, 1, 1, "enum_CFG_NEXT"], [7, 16, 1, "enum_CFG_NEXT"], [16, 18, 1, "enum_CFG_NEXT"], [18, 70, 1, "enum_CFG_NEXT"], [70, 83, 1, "enum_CFG_NEXT"], [24, 2, 3, "enum_LAST_WRITE"], [30, 24, 2, "enum_LAST_READ"], [30, 2, 3, "enum_LAST_WRITE"], [36, 30, 2, "enum_LAST_READ"], [36, 2, 3, "enum_LAST_WRITE"], [42, 36, 2, "enum_LAST_READ"], [42, 2, 3, "enum_LAST_WRITE"], [48, 42, 2, "enum_LAST_READ"], [48, 2, 3, "enum_LAST_WRITE"], [55, 48, 2, "enum_LAST_READ"], [55, 2, 3, "enum_LAST_WRITE"], [59, 55, 2, "enum_LAST_READ"], [59, 2, 3, "enum_LAST_WRITE"], [66, 59, 2, "enum_LAST_READ"], [66, 2, 3, "enum_LAST_WRITE"], [71, 19, 3, "enum_LAST_WRITE"], [76, 8, 3, "enum_LAST_WRITE"], [86, 6, 3, "enum_LAST_WRITE"], [88, 76, 2, "enum_LAST_READ"], [88, 8, 3, "enum_LAST_WRITE"], [92, 4, 3, "enum_LAST_WRITE"], [19, 24, 4, "enum_COMPUTED_FROM"], [19, 30, 4, "enum_COMPUTED_FROM"], [19, 36, 4, "enum_COMPUTED_FROM"], [19, 42, 4, "enum_COMPUTED_FROM"], [19, 48, 4, "enum_COMPUTED_FROM"], [19, 66, 4, "enum_COMPUTED_FROM"], [19, 55, 4, "enum_COMPUTED_FROM"], [19, 59, 4, "enum_COMPUTED_FROM"], [89, 1, 11, "enum_CALLS"], [83, 89, 5, "enum_RETURNS_TO"], [86, 2, 6, "enum_FORMAL_ARG_NAME"], [88, 4, 6, "enum_FORMAL_ARG_NAME"], [91, 6, 6, "enum_FORMAL_ARG_NAME"], [96, 7, 6, "enum_FORMAL_ARG_NAME"]], "error_location": 88, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/etianen/cms.git", "old_path": "src/cms/apps/pages/models/base.py", "hash": "ba145043590e03f70de0455a969bc6eb220db137", "code": "def render_to_response(self, request: Any, template: str, context: Optional[Dict[str, Any]]=None, **kwargs) -> HttpResponse:\n    \"\"\"\n    Renders a template as a HttpResponse using the context of this page.\n    \n    The template should extend the \"pages/base.html\" template for everything\n    to work correctly.\n    \"\"\"\n    page_context: Dict[str, Any] = {\"meta_description\": self.meta_description,\n                    \"meta_keywords\": self.meta_keywords,\n                    \"robots_index\": self.robots_index,\n                    \"robots_archive\": self.robots_archive,\n                    \"robots_follow\": self.robots_follow,\n                    \"title\": self.browser_title or self.title,\n                    \"header\": self.title}\n    page_context.update(context or {})\n    return render_to_response(template, context, RequestContext(request), **kwargs)\n", "rewrite": "ReplaceText(target='page_context' @(143,44)->(143,51))", "error_line": 15, "has_bug": true, "code_full": "from typing import Any, Dict, Optional\n\nfrom django.http import HttpResponse\nfrom django.shortcuts import render_to_response\nfrom django.template import RequestContext\n\n\nclass Class:\n    meta_description: Any\n    meta_keywords: Any\n    robots_index: Any\n    robots_archive: Any\n    robots_follow: Any\n    browser_title: Optional[str]\n    title: Any\n\n    def render_to_response(self, request: Any, template: str, context: Optional[Dict[str, Any]]=None, **kwargs) -> HttpResponse:\n        \"\"\"\n        Renders a template as a HttpResponse using the context of this page.\n        \n        The template should extend the \"pages/base.html\" template for everything\n        to work correctly.\n        \"\"\"\n        page_context: Dict[str, Any] = {\"meta_description\": self.meta_description,\n                        \"meta_keywords\": self.meta_keywords,\n                        \"robots_index\": self.robots_index,\n                        \"robots_archive\": self.robots_archive,\n                        \"robots_follow\": self.robots_follow,\n                        \"title\": self.browser_title or self.title,\n                        \"header\": self.title}\n        page_context.update(context or {})\n        return render_to_response(template, context, RequestContext(request), **kwargs)\n", "error_location_char": [810, 817], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def get_effects_status_update_msgs(", "item", ")", ":", "#NEWLINE#", "#INDENT#", "\"Generate messages about changed effect statuses.\\n\\n    Besides generating messages, it actually updates item's set of effects\\n    which are considered as running.\\n    \"", "#NEWLINE#", "new_running_effect_ids", "=", "set", "(", ")", "#NEWLINE#", "effects_status", "=", "EffectStatusResolver", ".", "resolve_effects_status", "(", "item", ")", "#NEWLINE#", "for", "(", "effect_id", ",", "status", ")", "in", "effects_status", ".", "items", "(", ")", ":", "#NEWLINE#", "#INDENT#", "if", "status", ":", "#NEWLINE#", "#INDENT#", "new_running_effect_ids", ".", "add", "(", "effect_id", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "start_ids", "=", "new_running_effect_ids", ".", "difference", "(", "item", ".", "_running_effect_ids", ")", "#NEWLINE#", "stop_ids", "=", "item", ".", "_running_effect_ids", ".", "difference", "(", "new_running_effect_ids", ")", "#NEWLINE#", "msgs", "=", "[", "]", "#NEWLINE#", "if", "start_ids", ":", "#NEWLINE#", "#INDENT#", "item", ".", "_running_effect_ids", ".", "update", "(", "start_ids", ")", "#NEWLINE#", "msgs", ".", "append", "(", "EffectsStarted", "(", "item", ",", "start_ids", ")", ")", "#NEWLINE#", "tgt_getter", "=", "getattr", "(", "item", ",", "'_get_effects_tgts'", ",", "None", ")", "#NEWLINE#", "if", "tgt_getter", ":", "#NEWLINE#", "#INDENT#", "effects_tgts", "=", "tgt_getter", "(", "start_ids", ")", "#NEWLINE#", "for", "(", "effect_id", ",", "tgt_items", ")", "in", "effects_tgts", ".", "items", "(", ")", ":", "#NEWLINE#", "#INDENT#", "msgs", ".", "append", "(", "EffectApplied", "(", "item", ",", "effect_id", ",", "tgt_items", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "if", "stop_ids", ":", "#NEWLINE#", "#INDENT#", "tgt_getter", "=", "getattr", "(", "item", ",", "'_get_effects_tgts'", ",", "None", ")", "#NEWLINE#", "if", "tgt_getter", ":", "#NEWLINE#", "#INDENT#", "effects_tgts", "=", "tgt_getter", "(", "start_ids", ")", "#NEWLINE#", "for", "(", "effect_id", ",", "tgt_items", ")", "in", "effects_tgts", ".", "items", "(", ")", ":", "#NEWLINE#", "#INDENT#", "msgs", ".", "append", "(", "EffectUnapplied", "(", "item", ",", "effect_id", ",", "tgt_items", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "msgs", ".", "append", "(", "EffectsStopped", "(", "item", ",", "stop_ids", ")", ")", "#NEWLINE#", "item", ".", "_running_effect_ids", ".", "difference_update", "(", "stop_ids", ")", "#NEWLINE#", "#UNINDENT#", "return", "msgs"], "edges": [[6, 7, 7, "enum_FIELD"], [8, 12, 7, "enum_FIELD"], [14, 20, 7, "enum_FIELD"], [30, 27, 7, "enum_FIELD"], [30, 34, 7, "enum_FIELD"], [52, 58, 7, "enum_FIELD"], [63, 71, 7, "enum_FIELD"], [74, 77, 7, "enum_FIELD"], [80, 81, 7, "enum_FIELD"], [161, 162, 7, "enum_FIELD"], [242, 243, 7, "enum_FIELD"], [12, 11, 7, "enum_FIELD"], [20, 18, 7, "enum_FIELD"], [34, 32, 7, "enum_FIELD"], [39, 40, 7, "enum_FIELD"], [58, 56, 7, "enum_FIELD"], [71, 69, 7, "enum_FIELD"], [84, 90, 7, "enum_FIELD"], [93, 97, 7, "enum_FIELD"], [105, 111, 7, "enum_FIELD"], [117, 118, 7, "enum_FIELD"], [165, 171, 7, "enum_FIELD"], [177, 178, 7, "enum_FIELD"], [219, 223, 7, "enum_FIELD"], [231, 237, 7, "enum_FIELD"], [18, 17, 7, "enum_FIELD"], [32, 31, 7, "enum_FIELD"], [43, 47, 7, "enum_FIELD"], [56, 55, 7, "enum_FIELD"], [60, 59, 7, "enum_FIELD"], [69, 67, 7, "enum_FIELD"], [90, 88, 7, "enum_FIELD"], [97, 95, 7, "enum_FIELD"], [111, 108, 7, "enum_FIELD"], [121, 125, 7, "enum_FIELD"], [135, 132, 7, "enum_FIELD"], [135, 139, 7, "enum_FIELD"], [171, 168, 7, "enum_FIELD"], [181, 185, 7, "enum_FIELD"], [195, 192, 7, "enum_FIELD"], [195, 199, 7, "enum_FIELD"], [223, 221, 7, "enum_FIELD"], [237, 235, 7, "enum_FIELD"], [47, 45, 7, "enum_FIELD"], [67, 66, 7, "enum_FIELD"], [88, 86, 7, "enum_FIELD"], [95, 94, 7, "enum_FIELD"], [101, 98, 7, "enum_FIELD"], [125, 124, 7, "enum_FIELD"], [139, 137, 7, "enum_FIELD"], [143, 147, 7, "enum_FIELD"], [185, 184, 7, "enum_FIELD"], [199, 197, 7, "enum_FIELD"], [203, 207, 7, "enum_FIELD"], [221, 220, 7, "enum_FIELD"], [227, 224, 7, "enum_FIELD"], [235, 233, 7, "enum_FIELD"], [45, 44, 7, "enum_FIELD"], [86, 85, 7, "enum_FIELD"], [137, 136, 7, "enum_FIELD"], [147, 145, 7, "enum_FIELD"], [197, 196, 7, "enum_FIELD"], [207, 205, 7, "enum_FIELD"], [233, 232, 7, "enum_FIELD"], [145, 144, 7, "enum_FIELD"], [151, 148, 7, "enum_FIELD"], [205, 204, 7, "enum_FIELD"], [211, 208, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [21, 2, 10, "enum_LAST_LEXICAL_USE"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [31, 15, 10, "enum_LAST_LEXICAL_USE"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 39, 9, "enum_NEXT_SYNTAX"], [40, 28, 10, "enum_LAST_LEXICAL_USE"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 43, 9, "enum_NEXT_SYNTAX"], [44, 9, 10, "enum_LAST_LEXICAL_USE"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [48, 26, 10, "enum_LAST_LEXICAL_USE"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [55, 44, 10, "enum_LAST_LEXICAL_USE"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [59, 21, 10, "enum_LAST_LEXICAL_USE"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [66, 59, 10, "enum_LAST_LEXICAL_USE"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [72, 55, 10, "enum_LAST_LEXICAL_USE"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 80, 9, "enum_NEXT_SYNTAX"], [81, 53, 10, "enum_LAST_LEXICAL_USE"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 84, 9, "enum_NEXT_SYNTAX"], [85, 66, 10, "enum_LAST_LEXICAL_USE"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [91, 81, 10, "enum_LAST_LEXICAL_USE"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [94, 75, 10, "enum_LAST_LEXICAL_USE"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [100, 85, 10, "enum_LAST_LEXICAL_USE"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [102, 91, 10, "enum_LAST_LEXICAL_USE"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [110, 100, 10, "enum_LAST_LEXICAL_USE"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 117, 9, "enum_NEXT_SYNTAX"], [118, 106, 10, "enum_LAST_LEXICAL_USE"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [124, 118, 10, "enum_LAST_LEXICAL_USE"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [126, 102, 10, "enum_LAST_LEXICAL_USE"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [131, 48, 10, "enum_LAST_LEXICAL_USE"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [136, 122, 10, "enum_LAST_LEXICAL_USE"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 143, 9, "enum_NEXT_SYNTAX"], [144, 94, 10, "enum_LAST_LEXICAL_USE"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [150, 110, 10, "enum_LAST_LEXICAL_USE"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [152, 131, 10, "enum_LAST_LEXICAL_USE"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [154, 133, 10, "enum_LAST_LEXICAL_USE"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 161, 9, "enum_NEXT_SYNTAX"], [162, 64, 10, "enum_LAST_LEXICAL_USE"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 165, 9, "enum_NEXT_SYNTAX"], [166, 124, 10, "enum_LAST_LEXICAL_USE"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [168, 108, 10, "enum_LAST_LEXICAL_USE"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [170, 150, 10, "enum_LAST_LEXICAL_USE"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [175, 177, 9, "enum_NEXT_SYNTAX"], [178, 166, 10, "enum_LAST_LEXICAL_USE"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 181, 9, "enum_NEXT_SYNTAX"], [182, 136, 10, "enum_LAST_LEXICAL_USE"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [184, 178, 10, "enum_LAST_LEXICAL_USE"], [183, 184, 9, "enum_NEXT_SYNTAX"], [184, 185, 9, "enum_NEXT_SYNTAX"], [186, 126, 10, "enum_LAST_LEXICAL_USE"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [187, 189, 9, "enum_NEXT_SYNTAX"], [189, 190, 9, "enum_NEXT_SYNTAX"], [191, 152, 10, "enum_LAST_LEXICAL_USE"], [190, 191, 9, "enum_NEXT_SYNTAX"], [191, 192, 9, "enum_NEXT_SYNTAX"], [193, 154, 10, "enum_LAST_LEXICAL_USE"], [192, 193, 9, "enum_NEXT_SYNTAX"], [193, 194, 9, "enum_NEXT_SYNTAX"], [194, 195, 9, "enum_NEXT_SYNTAX"], [196, 182, 10, "enum_LAST_LEXICAL_USE"], [195, 196, 9, "enum_NEXT_SYNTAX"], [196, 197, 9, "enum_NEXT_SYNTAX"], [197, 198, 9, "enum_NEXT_SYNTAX"], [198, 199, 9, "enum_NEXT_SYNTAX"], [199, 200, 9, "enum_NEXT_SYNTAX"], [200, 201, 9, "enum_NEXT_SYNTAX"], [201, 203, 9, "enum_NEXT_SYNTAX"], [204, 144, 10, "enum_LAST_LEXICAL_USE"], [203, 204, 9, "enum_NEXT_SYNTAX"], [204, 205, 9, "enum_NEXT_SYNTAX"], [205, 206, 9, "enum_NEXT_SYNTAX"], [206, 207, 9, "enum_NEXT_SYNTAX"], [207, 208, 9, "enum_NEXT_SYNTAX"], [208, 209, 9, "enum_NEXT_SYNTAX"], [210, 170, 10, "enum_LAST_LEXICAL_USE"], [209, 210, 9, "enum_NEXT_SYNTAX"], [210, 211, 9, "enum_NEXT_SYNTAX"], [212, 191, 10, "enum_LAST_LEXICAL_USE"], [211, 212, 9, "enum_NEXT_SYNTAX"], [212, 213, 9, "enum_NEXT_SYNTAX"], [214, 193, 10, "enum_LAST_LEXICAL_USE"], [213, 214, 9, "enum_NEXT_SYNTAX"], [214, 215, 9, "enum_NEXT_SYNTAX"], [215, 216, 9, "enum_NEXT_SYNTAX"], [216, 219, 9, "enum_NEXT_SYNTAX"], [220, 204, 10, "enum_LAST_LEXICAL_USE"], [219, 220, 9, "enum_NEXT_SYNTAX"], [220, 221, 9, "enum_NEXT_SYNTAX"], [221, 222, 9, "enum_NEXT_SYNTAX"], [222, 223, 9, "enum_NEXT_SYNTAX"], [223, 224, 9, "enum_NEXT_SYNTAX"], [224, 225, 9, "enum_NEXT_SYNTAX"], [226, 210, 10, "enum_LAST_LEXICAL_USE"], [225, 226, 9, "enum_NEXT_SYNTAX"], [226, 227, 9, "enum_NEXT_SYNTAX"], [228, 162, 10, "enum_LAST_LEXICAL_USE"], [227, 228, 9, "enum_NEXT_SYNTAX"], [228, 229, 9, "enum_NEXT_SYNTAX"], [229, 230, 9, "enum_NEXT_SYNTAX"], [230, 231, 9, "enum_NEXT_SYNTAX"], [232, 226, 10, "enum_LAST_LEXICAL_USE"], [231, 232, 9, "enum_NEXT_SYNTAX"], [232, 233, 9, "enum_NEXT_SYNTAX"], [233, 234, 9, "enum_NEXT_SYNTAX"], [234, 235, 9, "enum_NEXT_SYNTAX"], [235, 236, 9, "enum_NEXT_SYNTAX"], [236, 237, 9, "enum_NEXT_SYNTAX"], [238, 228, 10, "enum_LAST_LEXICAL_USE"], [237, 238, 9, "enum_NEXT_SYNTAX"], [238, 239, 9, "enum_NEXT_SYNTAX"], [239, 242, 9, "enum_NEXT_SYNTAX"], [243, 220, 10, "enum_LAST_LEXICAL_USE"], [242, 243, 9, "enum_NEXT_SYNTAX"], [6, 8, 1, "enum_CFG_NEXT"], [8, 14, 1, "enum_CFG_NEXT"], [14, 34, 1, "enum_CFG_NEXT"], [34, 27, 1, "enum_CFG_NEXT"], [27, 40, 1, "enum_CFG_NEXT"], [27, 52, 1, "enum_CFG_NEXT"], [40, 27, 1, "enum_CFG_NEXT"], [40, 43, 1, "enum_CFG_NEXT"], [43, 27, 1, "enum_CFG_NEXT"], [52, 63, 1, "enum_CFG_NEXT"], [63, 74, 1, "enum_CFG_NEXT"], [74, 81, 1, "enum_CFG_NEXT"], [81, 84, 1, "enum_CFG_NEXT"], [81, 162, 1, "enum_CFG_NEXT"], [84, 93, 1, "enum_CFG_NEXT"], [93, 105, 1, "enum_CFG_NEXT"], [105, 118, 1, "enum_CFG_NEXT"], [118, 121, 1, "enum_CFG_NEXT"], [118, 162, 1, "enum_CFG_NEXT"], [121, 139, 1, "enum_CFG_NEXT"], [139, 132, 1, "enum_CFG_NEXT"], [132, 143, 1, "enum_CFG_NEXT"], [132, 162, 1, "enum_CFG_NEXT"], [143, 132, 1, "enum_CFG_NEXT"], [162, 165, 1, "enum_CFG_NEXT"], [162, 242, 1, "enum_CFG_NEXT"], [165, 178, 1, "enum_CFG_NEXT"], [178, 181, 1, "enum_CFG_NEXT"], [178, 219, 1, "enum_CFG_NEXT"], [181, 199, 1, "enum_CFG_NEXT"], [199, 192, 1, "enum_CFG_NEXT"], [192, 203, 1, "enum_CFG_NEXT"], [192, 219, 1, "enum_CFG_NEXT"], [203, 192, 1, "enum_CFG_NEXT"], [219, 231, 1, "enum_CFG_NEXT"], [231, 242, 1, "enum_CFG_NEXT"], [21, 2, 3, "enum_LAST_WRITE"], [31, 15, 3, "enum_LAST_WRITE"], [26, 48, 2, "enum_LAST_READ"], [26, 26, 3, "enum_LAST_WRITE"], [28, 40, 2, "enum_LAST_READ"], [28, 28, 3, "enum_LAST_WRITE"], [40, 40, 2, "enum_LAST_READ"], [40, 28, 3, "enum_LAST_WRITE"], [44, 44, 2, "enum_LAST_READ"], [44, 9, 3, "enum_LAST_WRITE"], [48, 48, 2, "enum_LAST_READ"], [48, 26, 3, "enum_LAST_WRITE"], [55, 44, 2, "enum_LAST_READ"], [55, 9, 3, "enum_LAST_WRITE"], [59, 21, 2, "enum_LAST_READ"], [59, 2, 3, "enum_LAST_WRITE"], [66, 59, 2, "enum_LAST_READ"], [66, 2, 3, "enum_LAST_WRITE"], [72, 55, 2, "enum_LAST_READ"], [72, 9, 3, "enum_LAST_WRITE"], [81, 53, 3, "enum_LAST_WRITE"], [85, 66, 2, "enum_LAST_READ"], [85, 2, 3, "enum_LAST_WRITE"], [91, 81, 2, "enum_LAST_READ"], [91, 53, 3, "enum_LAST_WRITE"], [94, 75, 3, "enum_LAST_WRITE"], [100, 85, 2, "enum_LAST_READ"], [100, 2, 3, "enum_LAST_WRITE"], [102, 91, 2, "enum_LAST_READ"], [102, 53, 3, "enum_LAST_WRITE"], [110, 100, 2, "enum_LAST_READ"], [110, 2, 3, "enum_LAST_WRITE"], [118, 106, 3, "enum_LAST_WRITE"], [124, 118, 2, "enum_LAST_READ"], [124, 106, 3, "enum_LAST_WRITE"], [126, 102, 2, "enum_LAST_READ"], [126, 53, 3, "enum_LAST_WRITE"], [136, 122, 3, "enum_LAST_WRITE"], [131, 152, 2, "enum_LAST_READ"], [131, 48, 2, "enum_LAST_READ"], [131, 131, 3, "enum_LAST_WRITE"], [131, 26, 3, "enum_LAST_WRITE"], [133, 154, 2, "enum_LAST_READ"], [133, 133, 3, "enum_LAST_WRITE"], [144, 144, 2, "enum_LAST_READ"], [144, 94, 2, "enum_LAST_READ"], [144, 75, 3, "enum_LAST_WRITE"], [148, 148, 2, "enum_LAST_READ"], [150, 150, 2, "enum_LAST_READ"], [150, 110, 2, "enum_LAST_READ"], [150, 2, 3, "enum_LAST_WRITE"], [152, 152, 2, "enum_LAST_READ"], [152, 48, 2, "enum_LAST_READ"], [152, 131, 3, "enum_LAST_WRITE"], [154, 154, 2, "enum_LAST_READ"], [154, 133, 3, "enum_LAST_WRITE"], [162, 64, 3, "enum_LAST_WRITE"], [168, 108, 2, "enum_LAST_READ"], [170, 66, 2, "enum_LAST_READ"], [170, 150, 2, "enum_LAST_READ"], [170, 110, 2, "enum_LAST_READ"], [170, 2, 3, "enum_LAST_WRITE"], [166, 124, 2, "enum_LAST_READ"], [166, 118, 2, "enum_LAST_READ"], [166, 106, 3, "enum_LAST_WRITE"], [178, 124, 2, "enum_LAST_READ"], [178, 118, 2, "enum_LAST_READ"], [178, 166, 3, "enum_LAST_WRITE"], [184, 178, 2, "enum_LAST_READ"], [184, 166, 3, "enum_LAST_WRITE"], [186, 102, 2, "enum_LAST_READ"], [186, 81, 2, "enum_LAST_READ"], [186, 126, 2, "enum_LAST_READ"], [186, 53, 3, "enum_LAST_WRITE"], [182, 136, 2, "enum_LAST_READ"], [182, 122, 3, "enum_LAST_WRITE"], [196, 136, 2, "enum_LAST_READ"], [196, 182, 3, "enum_LAST_WRITE"], [191, 152, 2, "enum_LAST_READ"], [191, 48, 2, "enum_LAST_READ"], [191, 212, 2, "enum_LAST_READ"], [191, 191, 3, "enum_LAST_WRITE"], [191, 131, 3, "enum_LAST_WRITE"], [191, 26, 3, "enum_LAST_WRITE"], [193, 214, 2, "enum_LAST_READ"], [193, 154, 2, "enum_LAST_READ"], [193, 193, 3, "enum_LAST_WRITE"], [193, 133, 3, "enum_LAST_WRITE"], [204, 204, 2, "enum_LAST_READ"], [204, 144, 2, "enum_LAST_READ"], [204, 94, 2, "enum_LAST_READ"], [204, 75, 3, "enum_LAST_WRITE"], [208, 208, 2, "enum_LAST_READ"], [210, 170, 2, "enum_LAST_READ"], [210, 210, 2, "enum_LAST_READ"], [210, 2, 3, "enum_LAST_WRITE"], [212, 152, 2, "enum_LAST_READ"], [212, 48, 2, "enum_LAST_READ"], [212, 212, 2, "enum_LAST_READ"], [212, 191, 3, "enum_LAST_WRITE"], [214, 214, 2, "enum_LAST_READ"], [214, 154, 2, "enum_LAST_READ"], [214, 193, 3, "enum_LAST_WRITE"], [220, 94, 2, "enum_LAST_READ"], [220, 204, 2, "enum_LAST_READ"], [220, 144, 2, "enum_LAST_READ"], [220, 75, 3, "enum_LAST_WRITE"], [226, 170, 2, "enum_LAST_READ"], [226, 210, 2, "enum_LAST_READ"], [226, 2, 3, "enum_LAST_WRITE"], [228, 162, 2, "enum_LAST_READ"], [228, 64, 3, "enum_LAST_WRITE"], [232, 226, 2, "enum_LAST_READ"], [232, 2, 3, "enum_LAST_WRITE"], [238, 228, 2, "enum_LAST_READ"], [238, 64, 3, "enum_LAST_WRITE"], [243, 144, 2, "enum_LAST_READ"], [243, 94, 2, "enum_LAST_READ"], [243, 220, 2, "enum_LAST_READ"], [243, 75, 3, "enum_LAST_WRITE"], [9, 11, 4, "enum_COMPUTED_FROM"], [15, 21, 4, "enum_COMPUTED_FROM"], [15, 17, 4, "enum_COMPUTED_FROM"], [53, 55, 4, "enum_COMPUTED_FROM"], [53, 59, 4, "enum_COMPUTED_FROM"], [64, 72, 4, "enum_COMPUTED_FROM"], [64, 66, 4, "enum_COMPUTED_FROM"], [106, 108, 4, "enum_COMPUTED_FROM"], [106, 110, 4, "enum_COMPUTED_FROM"], [166, 168, 4, "enum_COMPUTED_FROM"], [166, 170, 4, "enum_COMPUTED_FROM"], [122, 124, 4, "enum_COMPUTED_FROM"], [122, 126, 4, "enum_COMPUTED_FROM"], [182, 184, 4, "enum_COMPUTED_FROM"], [182, 186, 4, "enum_COMPUTED_FROM"]], "error_location": 186, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/pyfa-org/eos.git", "old_path": "eos/pubsub/message/helper.py", "hash": "700a4414cab25efe4e306e64c9cee28250f7363a", "code": "def get_effects_status_update_msgs(item: Item) -> List:\n    \"\"\"Generate messages about changed effect statuses.\n\n    Besides generating messages, it actually updates item's set of effects\n    which are considered as running.\n    \"\"\"\n    # Set of effects which should be running according to new conditions\n    new_running_effect_ids: Set[str] = set()\n    effects_status: Dict[str, bool] = EffectStatusResolver.resolve_effects_status(item)\n    for effect_id, status in effects_status.items():\n        if status:\n            new_running_effect_ids.add(effect_id)\n    start_ids: Set[str] = new_running_effect_ids.difference(item._running_effect_ids)\n    stop_ids: Set[str] = item._running_effect_ids.difference(new_running_effect_ids)\n    msgs: List = []\n    if start_ids:\n        item._running_effect_ids.update(start_ids)\n        # Start effects\n        msgs.append(EffectsStarted(item, start_ids))\n        # Apply effects to targets\n        tgt_getter: Optional[Callable[[Set[str]], Dict[str, List[Any]]]] = getattr(item, '_get_effects_tgts', None)\n        if tgt_getter:\n            effects_tgts: Dict[str, List[Any]] = tgt_getter(start_ids)\n            for effect_id, tgt_items in effects_tgts.items():\n                msgs.append(EffectApplied(item, effect_id, tgt_items))\n    if stop_ids:\n        # Unapply effects from targets\n        tgt_getter: Optional[Callable[[Set[str]], Dict[str, List[Any]]]] = getattr(item, '_get_effects_tgts', None)\n        if tgt_getter:\n            effects_tgts: Dict[str, List[Any]] = tgt_getter(start_ids)\n            for effect_id, tgt_items in effects_tgts.items():\n                msgs.append(EffectUnapplied(item, effect_id, tgt_items))\n        # Stop effects\n        msgs.append(EffectsStopped(item, stop_ids))\n        item._running_effect_ids.difference_update(stop_ids)\n    return msgs\n", "rewrite": "ReplaceText(target='stop_ids' @(154,42)->(154,51))", "error_line": 29, "has_bug": true, "code_full": "from typing import Any, Callable, Dict, List, Optional, Set\n\n\nclass EffectStatusResolver:\n    @classmethod\n    def resolve_effects_status(cls, item: Any) -> Dict[str, bool]:\n        return {}\n\nclass EffectsStarted:\n    def __init__(self, item: Any, effect_ids: Set[str]):\n        pass\n\nclass EffectApplied:\n    def __init__(self, item: Any, effect_id: str, tgt_items: List[Any]):\n        pass\n\nclass EffectUnapplied:\n    def __init__(self, item: Any, effect_id: str, tgt_items: List[Any]):\n        pass\n\nclass EffectsStopped:\n    def __init__(self, item: Any, effect_ids: Set[str]):\n        pass\n\nclass Item:\n    def __init__(self) -> None:\n        self._running_effect_ids: Set[str] = set()\n\n\ndef get_effects_status_update_msgs(item: Item) -> List:\n    \"\"\"Generate messages about changed effect statuses.\n\n    Besides generating messages, it actually updates item's set of effects\n    which are considered as running.\n    \"\"\"\n    # Set of effects which should be running according to new conditions\n    new_running_effect_ids: Set[str] = set()\n    effects_status: Dict[str, bool] = EffectStatusResolver.resolve_effects_status(item)\n    for effect_id, status in effects_status.items():\n        if status:\n            new_running_effect_ids.add(effect_id)\n    start_ids: Set[str] = new_running_effect_ids.difference(item._running_effect_ids)\n    stop_ids: Set[str] = item._running_effect_ids.difference(new_running_effect_ids)\n    msgs: List = []\n    if start_ids:\n        item._running_effect_ids.update(start_ids)\n        # Start effects\n        msgs.append(EffectsStarted(item, start_ids))\n        # Apply effects to targets\n        tgt_getter: Optional[Callable[[Set[str]], Dict[str, List[Any]]]] = getattr(item, '_get_effects_tgts', None)\n        if tgt_getter:\n            effects_tgts: Dict[str, List[Any]] = tgt_getter(start_ids)\n            for effect_id, tgt_items in effects_tgts.items():\n                msgs.append(EffectApplied(item, effect_id, tgt_items))\n    if stop_ids:\n        # Unapply effects from targets\n        tgt_getter: Optional[Callable[[Set[str]], Dict[str, List[Any]]]] = getattr(item, '_get_effects_tgts', None)\n        if tgt_getter:\n            effects_tgts: Dict[str, List[Any]] = tgt_getter(start_ids)\n            for effect_id, tgt_items in effects_tgts.items():\n                msgs.append(EffectUnapplied(item, effect_id, tgt_items))\n        # Stop effects\n        msgs.append(EffectsStopped(item, stop_ids))\n        item._running_effect_ids.difference_update(stop_ids)\n    return msgs\n", "error_location_char": [1532, 1540], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def analyse_image(", "self", ",", "path", ",", "logging", "=", "True", ",", "ml_analysis", "=", "True", ",", "multi_analysis", "=", "True", ")", "->", "Dict", "[", "(", "str", ",", "Union", "[", "(", "ROIHandler", ",", "np", ".", "ndarray", ",", "Dict", "[", "(", "str", ",", "str", ")", "]", ")", "]", ")", "]", ":", "#NEWLINE#", "#INDENT#", "'\\n    Method to extract rois from the image given by path\\n\\n    :param path: The URL of the image\\n    :param logging: Enables logging\\n    :param ml_analysis: Enable image analysis via U-Net\\n    :param multi_analysis: Needed for multiprocess-analysis\\n    :return: The analysis results as dict\\n    '", "#NEWLINE#", "if", "multi_analysis", ":", "#NEWLINE#", "#INDENT#", "self", ".", "analyser", "=", "FCN", "(", ")", "#NEWLINE#", "#UNINDENT#", "start", "=", "time", ".", "time", "(", ")", "#NEWLINE#", "logging", "=", "(", "logging", "if", "(", "self", ".", "logging", "is", "None", ")", "else", "self", ".", "logging", ")", "#NEWLINE#", "imgdat", "=", "Detector", ".", "get_image_data", "(", "path", ")", "#NEWLINE#", "imgdat", "[", "'id'", "]", "=", "Detector", ".", "calculate_image_id", "(", "path", ")", "#NEWLINE#", "image", "=", "Detector", ".", "load_image", "(", "path", ")", "#NEWLINE#", "names", "=", "self", ".", "settings", "[", "'names'", "]", ".", "split", "(", "';'", ")", "#NEWLINE#", "main_channel", "=", "self", ".", "settings", "[", "'main_channel'", "]", "#NEWLINE#", "if", "(", "imgdat", "[", "'channels'", "]", "!=", "3", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "imgdat", "[", "'channels'", "]", "==", "1", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "ValueError", "(", "'Detector class can only analyse multichannel images, not grayscale!'", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "imgdat", "[", "'channels'", "]", ">", "3", ")", ":", "#NEWLINE#", "#INDENT#", "names", ".", "extend", "(", "range", "(", "imgdat", "[", "'channels'", "]", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "channels", "=", "Detector", ".", "get_channels", "(", "image", ")", "#NEWLINE#", "if", "(", "not", "ml_analysis", ")", ":", "#NEWLINE#", "#INDENT#", "thresh_chan", "=", "Detector", ".", "threshold_channels", "(", "channels", ",", "main_channel", ")", "#NEWLINE#", "rois", "=", "Detector", ".", "classic_roi_extraction", "(", "channels", ",", "thresh_chan", ",", "names", ",", "main_map", "=", "main_channel", ",", "quality_check", "=", "(", "not", "ml_analysis", ")", ",", "logging", "=", "logging", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "nuclei", "=", "self", ".", "analyser", ".", "predict_image", "(", "path", ",", "self", ".", "analyser", ".", "NUCLEI", ",", "channels", "=", "(", "main_channel", ",", ")", ",", "threshold", "=", "0.95", ")", "[", "0", "]", "#NEWLINE#", "foci", "=", "self", ".", "analyser", ".", "predict_image", "(", "path", ",", "self", ".", "analyser", ".", "FOCI", ",", "channels", "=", "[", "x", "for", "x", "in", "range", "(", "len", "(", "names", ")", ")", "if", "(", "x", "is not", "main_channel", ")", "]", ")", "#NEWLINE#", "if", "(", "main_channel", ">", "len", "(", "foci", ")", ")", ":", "#NEWLINE#", "#INDENT#", "foci", ".", "append", "(", "nuclei", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "foci", ".", "insert", "(", "main_channel", ",", "nuclei", ")", "#NEWLINE#", "#UNINDENT#", "rois", "=", "Detector", ".", "ml_roi_extraction", "(", "channels", ",", "foci", ",", "names", ",", "main_map", "=", "main_channel", ",", "logging", "=", "logging", ")", "#NEWLINE#", "#UNINDENT#", "handler", "=", "ROIHandler", "(", "ident", "=", "imgdat", "[", "'id'", "]", ")", "#NEWLINE#", "for", "roi", "in", "rois", ":", "#NEWLINE#", "#INDENT#", "handler", ".", "add_roi", "(", "roi", ")", "#NEWLINE#", "#UNINDENT#", "handler", ".", "idents", "=", "names", "#NEWLINE#", "imgdat", "[", "'handler'", "]", "=", "handler", "#NEWLINE#", "Detector", ".", "log", "(", "f", "'Total analysis time: {(time.time() - start)}'", ",", "logging", ")", "#NEWLINE#", "return", "imgdat"], "edges": [[1, 9, 7, "enum_FIELD"], [1, 20, 7, "enum_FIELD"], [47, 48, 7, "enum_FIELD"], [50, 51, 7, "enum_FIELD"], [63, 69, 7, "enum_FIELD"], [71, 76, 7, "enum_FIELD"], [89, 95, 7, "enum_FIELD"], [98, 107, 7, "enum_FIELD"], [110, 116, 7, "enum_FIELD"], [119, 130, 7, "enum_FIELD"], [133, 139, 7, "enum_FIELD"], [143, 149, 7, "enum_FIELD"], [205, 211, 7, "enum_FIELD"], [220, 217, 7, "enum_FIELD"], [392, 396, 7, "enum_FIELD"], [407, 406, 7, "enum_FIELD"], [407, 408, 7, "enum_FIELD"], [419, 424, 7, "enum_FIELD"], [425, 431, 7, "enum_FIELD"], [432, 439, 7, "enum_FIELD"], [443, 444, 7, "enum_FIELD"], [20, 19, 7, "enum_FIELD"], [20, 23, 7, "enum_FIELD"], [54, 60, 7, "enum_FIELD"], [69, 67, 7, "enum_FIELD"], [76, 81, 7, "enum_FIELD"], [76, 75, 7, "enum_FIELD"], [76, 86, 7, "enum_FIELD"], [95, 93, 7, "enum_FIELD"], [100, 99, 7, "enum_FIELD"], [100, 101, 7, "enum_FIELD"], [107, 105, 7, "enum_FIELD"], [116, 114, 7, "enum_FIELD"], [130, 128, 7, "enum_FIELD"], [139, 137, 7, "enum_FIELD"], [139, 140, 7, "enum_FIELD"], [149, 146, 7, "enum_FIELD"], [164, 161, 7, "enum_FIELD"], [211, 209, 7, "enum_FIELD"], [217, 218, 7, "enum_FIELD"], [222, 230, 7, "enum_FIELD"], [233, 245, 7, "enum_FIELD"], [266, 294, 7, "enum_FIELD"], [297, 307, 7, "enum_FIELD"], [346, 340, 7, "enum_FIELD"], [370, 380, 7, "enum_FIELD"], [396, 395, 7, "enum_FIELD"], [411, 415, 7, "enum_FIELD"], [421, 420, 7, "enum_FIELD"], [427, 426, 7, "enum_FIELD"], [427, 428, 7, "enum_FIELD"], [439, 434, 7, "enum_FIELD"], [56, 55, 7, "enum_FIELD"], [60, 59, 7, "enum_FIELD"], [67, 66, 7, "enum_FIELD"], [81, 79, 7, "enum_FIELD"], [86, 85, 7, "enum_FIELD"], [93, 92, 7, "enum_FIELD"], [105, 104, 7, "enum_FIELD"], [114, 113, 7, "enum_FIELD"], [128, 125, 7, "enum_FIELD"], [137, 136, 7, "enum_FIELD"], [146, 145, 7, "enum_FIELD"], [146, 147, 7, "enum_FIELD"], [161, 158, 7, "enum_FIELD"], [167, 169, 7, "enum_FIELD"], [178, 184, 7, "enum_FIELD"], [209, 208, 7, "enum_FIELD"], [230, 226, 7, "enum_FIELD"], [245, 237, 7, "enum_FIELD"], [294, 282, 7, "enum_FIELD"], [294, 295, 7, "enum_FIELD"], [307, 303, 7, "enum_FIELD"], [340, 339, 7, "enum_FIELD"], [348, 352, 7, "enum_FIELD"], [360, 366, 7, "enum_FIELD"], [380, 374, 7, "enum_FIELD"], [397, 400, 7, "enum_FIELD"], [415, 413, 7, "enum_FIELD"], [434, 433, 7, "enum_FIELD"], [25, 24, 7, "enum_FIELD"], [25, 28, 7, "enum_FIELD"], [79, 78, 7, "enum_FIELD"], [125, 123, 7, "enum_FIELD"], [125, 126, 7, "enum_FIELD"], [158, 157, 7, "enum_FIELD"], [158, 159, 7, "enum_FIELD"], [169, 168, 7, "enum_FIELD"], [184, 181, 7, "enum_FIELD"], [189, 193, 7, "enum_FIELD"], [226, 225, 7, "enum_FIELD"], [237, 236, 7, "enum_FIELD"], [246, 248, 7, "enum_FIELD"], [250, 253, 7, "enum_FIELD"], [257, 259, 7, "enum_FIELD"], [282, 272, 7, "enum_FIELD"], [303, 301, 7, "enum_FIELD"], [311, 309, 7, "enum_FIELD"], [314, 316, 7, "enum_FIELD"], [342, 341, 7, "enum_FIELD"], [352, 350, 7, "enum_FIELD"], [366, 362, 7, "enum_FIELD"], [374, 373, 7, "enum_FIELD"], [383, 385, 7, "enum_FIELD"], [387, 389, 7, "enum_FIELD"], [400, 399, 7, "enum_FIELD"], [400, 401, 7, "enum_FIELD"], [413, 412, 7, "enum_FIELD"], [123, 122, 7, "enum_FIELD"], [181, 180, 7, "enum_FIELD"], [181, 182, 7, "enum_FIELD"], [193, 191, 7, "enum_FIELD"], [253, 254, 7, "enum_FIELD"], [272, 270, 7, "enum_FIELD"], [280, 278, 7, "enum_FIELD"], [283, 287, 7, "enum_FIELD"], [290, 292, 7, "enum_FIELD"], [301, 300, 7, "enum_FIELD"], [309, 308, 7, "enum_FIELD"], [316, 317, 7, "enum_FIELD"], [350, 349, 7, "enum_FIELD"], [362, 361, 7, "enum_FIELD"], [30, 29, 7, "enum_FIELD"], [34, 33, 7, "enum_FIELD"], [34, 37, 7, "enum_FIELD"], [191, 190, 7, "enum_FIELD"], [195, 194, 7, "enum_FIELD"], [270, 269, 7, "enum_FIELD"], [278, 277, 7, "enum_FIELD"], [320, 319, 7, "enum_FIELD"], [320, 322, 7, "enum_FIELD"], [197, 196, 7, "enum_FIELD"], [197, 198, 7, "enum_FIELD"], [322, 321, 7, "enum_FIELD"], [331, 330, 7, "enum_FIELD"], [324, 323, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [33, 19, 10, "enum_LAST_LEXICAL_USE"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [36, 22, 10, "enum_LAST_LEXICAL_USE"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [38, 36, 10, "enum_LAST_LEXICAL_USE"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 50, 9, "enum_NEXT_SYNTAX"], [51, 14, 10, "enum_LAST_LEXICAL_USE"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 54, 9, "enum_NEXT_SYNTAX"], [55, 2, 10, "enum_LAST_LEXICAL_USE"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [72, 6, 10, "enum_LAST_LEXICAL_USE"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [75, 72, 10, "enum_LAST_LEXICAL_USE"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [78, 55, 10, "enum_LAST_LEXICAL_USE"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [85, 78, 10, "enum_LAST_LEXICAL_USE"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [96, 4, 10, "enum_LAST_LEXICAL_USE"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [99, 90, 10, "enum_LAST_LEXICAL_USE"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [104, 92, 10, "enum_LAST_LEXICAL_USE"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [108, 96, 10, "enum_LAST_LEXICAL_USE"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [113, 104, 10, "enum_LAST_LEXICAL_USE"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [117, 108, 10, "enum_LAST_LEXICAL_USE"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [122, 85, 10, "enum_LAST_LEXICAL_USE"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [136, 122, 10, "enum_LAST_LEXICAL_USE"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [145, 99, 10, "enum_LAST_LEXICAL_USE"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [157, 145, 10, "enum_LAST_LEXICAL_USE"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [175, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [180, 157, 10, "enum_LAST_LEXICAL_USE"], [179, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 184, 9, "enum_NEXT_SYNTAX"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [187, 189, 9, "enum_NEXT_SYNTAX"], [190, 120, 10, "enum_LAST_LEXICAL_USE"], [189, 190, 9, "enum_NEXT_SYNTAX"], [190, 191, 9, "enum_NEXT_SYNTAX"], [191, 192, 9, "enum_NEXT_SYNTAX"], [192, 193, 9, "enum_NEXT_SYNTAX"], [193, 194, 9, "enum_NEXT_SYNTAX"], [194, 195, 9, "enum_NEXT_SYNTAX"], [196, 180, 10, "enum_LAST_LEXICAL_USE"], [195, 196, 9, "enum_NEXT_SYNTAX"], [196, 197, 9, "enum_NEXT_SYNTAX"], [197, 198, 9, "enum_NEXT_SYNTAX"], [198, 199, 9, "enum_NEXT_SYNTAX"], [199, 200, 9, "enum_NEXT_SYNTAX"], [200, 201, 9, "enum_NEXT_SYNTAX"], [201, 205, 9, "enum_NEXT_SYNTAX"], [205, 206, 9, "enum_NEXT_SYNTAX"], [206, 207, 9, "enum_NEXT_SYNTAX"], [208, 113, 10, "enum_LAST_LEXICAL_USE"], [207, 208, 9, "enum_NEXT_SYNTAX"], [208, 209, 9, "enum_NEXT_SYNTAX"], [209, 210, 9, "enum_NEXT_SYNTAX"], [210, 211, 9, "enum_NEXT_SYNTAX"], [212, 111, 10, "enum_LAST_LEXICAL_USE"], [211, 212, 9, "enum_NEXT_SYNTAX"], [212, 213, 9, "enum_NEXT_SYNTAX"], [213, 215, 9, "enum_NEXT_SYNTAX"], [215, 216, 9, "enum_NEXT_SYNTAX"], [216, 217, 9, "enum_NEXT_SYNTAX"], [218, 10, 10, "enum_LAST_LEXICAL_USE"], [217, 218, 9, "enum_NEXT_SYNTAX"], [218, 219, 9, "enum_NEXT_SYNTAX"], [219, 220, 9, "enum_NEXT_SYNTAX"], [220, 222, 9, "enum_NEXT_SYNTAX"], [222, 223, 9, "enum_NEXT_SYNTAX"], [223, 224, 9, "enum_NEXT_SYNTAX"], [225, 208, 10, "enum_LAST_LEXICAL_USE"], [224, 225, 9, "enum_NEXT_SYNTAX"], [225, 226, 9, "enum_NEXT_SYNTAX"], [226, 227, 9, "enum_NEXT_SYNTAX"], [227, 228, 9, "enum_NEXT_SYNTAX"], [229, 206, 10, "enum_LAST_LEXICAL_USE"], [228, 229, 9, "enum_NEXT_SYNTAX"], [229, 230, 9, "enum_NEXT_SYNTAX"], [231, 134, 10, "enum_LAST_LEXICAL_USE"], [230, 231, 9, "enum_NEXT_SYNTAX"], [231, 232, 9, "enum_NEXT_SYNTAX"], [232, 233, 9, "enum_NEXT_SYNTAX"], [233, 234, 9, "enum_NEXT_SYNTAX"], [234, 235, 9, "enum_NEXT_SYNTAX"], [236, 225, 10, "enum_LAST_LEXICAL_USE"], [235, 236, 9, "enum_NEXT_SYNTAX"], [236, 237, 9, "enum_NEXT_SYNTAX"], [237, 238, 9, "enum_NEXT_SYNTAX"], [238, 239, 9, "enum_NEXT_SYNTAX"], [240, 229, 10, "enum_LAST_LEXICAL_USE"], [239, 240, 9, "enum_NEXT_SYNTAX"], [240, 241, 9, "enum_NEXT_SYNTAX"], [242, 223, 10, "enum_LAST_LEXICAL_USE"], [241, 242, 9, "enum_NEXT_SYNTAX"], [242, 243, 9, "enum_NEXT_SYNTAX"], [244, 190, 10, "enum_LAST_LEXICAL_USE"], [243, 244, 9, "enum_NEXT_SYNTAX"], [244, 245, 9, "enum_NEXT_SYNTAX"], [245, 246, 9, "enum_NEXT_SYNTAX"], [246, 247, 9, "enum_NEXT_SYNTAX"], [248, 231, 10, "enum_LAST_LEXICAL_USE"], [247, 248, 9, "enum_NEXT_SYNTAX"], [248, 249, 9, "enum_NEXT_SYNTAX"], [249, 250, 9, "enum_NEXT_SYNTAX"], [250, 251, 9, "enum_NEXT_SYNTAX"], [251, 252, 9, "enum_NEXT_SYNTAX"], [252, 253, 9, "enum_NEXT_SYNTAX"], [254, 218, 10, "enum_LAST_LEXICAL_USE"], [253, 254, 9, "enum_NEXT_SYNTAX"], [254, 255, 9, "enum_NEXT_SYNTAX"], [255, 256, 9, "enum_NEXT_SYNTAX"], [256, 257, 9, "enum_NEXT_SYNTAX"], [257, 258, 9, "enum_NEXT_SYNTAX"], [259, 75, 10, "enum_LAST_LEXICAL_USE"], [258, 259, 9, "enum_NEXT_SYNTAX"], [259, 260, 9, "enum_NEXT_SYNTAX"], [260, 263, 9, "enum_NEXT_SYNTAX"], [263, 264, 9, "enum_NEXT_SYNTAX"], [264, 266, 9, "enum_NEXT_SYNTAX"], [266, 267, 9, "enum_NEXT_SYNTAX"], [267, 268, 9, "enum_NEXT_SYNTAX"], [269, 136, 10, "enum_LAST_LEXICAL_USE"], [268, 269, 9, "enum_NEXT_SYNTAX"], [269, 270, 9, "enum_NEXT_SYNTAX"], [270, 271, 9, "enum_NEXT_SYNTAX"], [271, 272, 9, "enum_NEXT_SYNTAX"], [272, 273, 9, "enum_NEXT_SYNTAX"], [273, 274, 9, "enum_NEXT_SYNTAX"], [275, 117, 10, "enum_LAST_LEXICAL_USE"], [274, 275, 9, "enum_NEXT_SYNTAX"], [275, 276, 9, "enum_NEXT_SYNTAX"], [277, 269, 10, "enum_LAST_LEXICAL_USE"], [276, 277, 9, "enum_NEXT_SYNTAX"], [277, 278, 9, "enum_NEXT_SYNTAX"], [278, 279, 9, "enum_NEXT_SYNTAX"], [279, 280, 9, "enum_NEXT_SYNTAX"], [280, 281, 9, "enum_NEXT_SYNTAX"], [281, 282, 9, "enum_NEXT_SYNTAX"], [282, 283, 9, "enum_NEXT_SYNTAX"], [283, 284, 9, "enum_NEXT_SYNTAX"], [284, 285, 9, "enum_NEXT_SYNTAX"], [286, 248, 10, "enum_LAST_LEXICAL_USE"], [285, 286, 9, "enum_NEXT_SYNTAX"], [286, 287, 9, "enum_NEXT_SYNTAX"], [287, 288, 9, "enum_NEXT_SYNTAX"], [288, 289, 9, "enum_NEXT_SYNTAX"], [289, 290, 9, "enum_NEXT_SYNTAX"], [290, 291, 9, "enum_NEXT_SYNTAX"], [291, 292, 9, "enum_NEXT_SYNTAX"], [292, 293, 9, "enum_NEXT_SYNTAX"], [293, 294, 9, "enum_NEXT_SYNTAX"], [294, 295, 9, "enum_NEXT_SYNTAX"], [295, 296, 9, "enum_NEXT_SYNTAX"], [296, 297, 9, "enum_NEXT_SYNTAX"], [297, 298, 9, "enum_NEXT_SYNTAX"], [298, 299, 9, "enum_NEXT_SYNTAX"], [300, 277, 10, "enum_LAST_LEXICAL_USE"], [299, 300, 9, "enum_NEXT_SYNTAX"], [300, 301, 9, "enum_NEXT_SYNTAX"], [301, 302, 9, "enum_NEXT_SYNTAX"], [302, 303, 9, "enum_NEXT_SYNTAX"], [303, 304, 9, "enum_NEXT_SYNTAX"], [304, 305, 9, "enum_NEXT_SYNTAX"], [306, 275, 10, "enum_LAST_LEXICAL_USE"], [305, 306, 9, "enum_NEXT_SYNTAX"], [306, 307, 9, "enum_NEXT_SYNTAX"], [308, 300, 10, "enum_LAST_LEXICAL_USE"], [307, 308, 9, "enum_NEXT_SYNTAX"], [308, 309, 9, "enum_NEXT_SYNTAX"], [309, 310, 9, "enum_NEXT_SYNTAX"], [310, 311, 9, "enum_NEXT_SYNTAX"], [311, 312, 9, "enum_NEXT_SYNTAX"], [312, 313, 9, "enum_NEXT_SYNTAX"], [313, 314, 9, "enum_NEXT_SYNTAX"], [314, 315, 9, "enum_NEXT_SYNTAX"], [315, 316, 9, "enum_NEXT_SYNTAX"], [316, 317, 9, "enum_NEXT_SYNTAX"], [317, 318, 9, "enum_NEXT_SYNTAX"], [319, 317, 10, "enum_LAST_LEXICAL_USE"], [318, 319, 9, "enum_NEXT_SYNTAX"], [319, 320, 9, "enum_NEXT_SYNTAX"], [321, 194, 10, "enum_LAST_LEXICAL_USE"], [320, 321, 9, "enum_NEXT_SYNTAX"], [321, 322, 9, "enum_NEXT_SYNTAX"], [322, 323, 9, "enum_NEXT_SYNTAX"], [323, 324, 9, "enum_NEXT_SYNTAX"], [325, 244, 10, "enum_LAST_LEXICAL_USE"], [324, 325, 9, "enum_NEXT_SYNTAX"], [325, 326, 9, "enum_NEXT_SYNTAX"], [326, 327, 9, "enum_NEXT_SYNTAX"], [327, 328, 9, "enum_NEXT_SYNTAX"], [328, 329, 9, "enum_NEXT_SYNTAX"], [330, 319, 10, "enum_LAST_LEXICAL_USE"], [329, 330, 9, "enum_NEXT_SYNTAX"], [330, 331, 9, "enum_NEXT_SYNTAX"], [332, 286, 10, "enum_LAST_LEXICAL_USE"], [331, 332, 9, "enum_NEXT_SYNTAX"], [332, 333, 9, "enum_NEXT_SYNTAX"], [333, 334, 9, "enum_NEXT_SYNTAX"], [334, 335, 9, "enum_NEXT_SYNTAX"], [335, 337, 9, "enum_NEXT_SYNTAX"], [337, 338, 9, "enum_NEXT_SYNTAX"], [339, 332, 10, "enum_LAST_LEXICAL_USE"], [338, 339, 9, "enum_NEXT_SYNTAX"], [339, 340, 9, "enum_NEXT_SYNTAX"], [341, 323, 10, "enum_LAST_LEXICAL_USE"], [340, 341, 9, "enum_NEXT_SYNTAX"], [341, 342, 9, "enum_NEXT_SYNTAX"], [343, 298, 10, "enum_LAST_LEXICAL_USE"], [342, 343, 9, "enum_NEXT_SYNTAX"], [343, 344, 9, "enum_NEXT_SYNTAX"], [344, 345, 9, "enum_NEXT_SYNTAX"], [345, 346, 9, "enum_NEXT_SYNTAX"], [346, 348, 9, "enum_NEXT_SYNTAX"], [349, 343, 10, "enum_LAST_LEXICAL_USE"], [348, 349, 9, "enum_NEXT_SYNTAX"], [349, 350, 9, "enum_NEXT_SYNTAX"], [350, 351, 9, "enum_NEXT_SYNTAX"], [351, 352, 9, "enum_NEXT_SYNTAX"], [353, 267, 10, "enum_LAST_LEXICAL_USE"], [352, 353, 9, "enum_NEXT_SYNTAX"], [353, 354, 9, "enum_NEXT_SYNTAX"], [354, 357, 9, "enum_NEXT_SYNTAX"], [357, 358, 9, "enum_NEXT_SYNTAX"], [358, 360, 9, "enum_NEXT_SYNTAX"], [361, 349, 10, "enum_LAST_LEXICAL_USE"], [360, 361, 9, "enum_NEXT_SYNTAX"], [361, 362, 9, "enum_NEXT_SYNTAX"], [362, 363, 9, "enum_NEXT_SYNTAX"], [363, 364, 9, "enum_NEXT_SYNTAX"], [365, 339, 10, "enum_LAST_LEXICAL_USE"], [364, 365, 9, "enum_NEXT_SYNTAX"], [365, 366, 9, "enum_NEXT_SYNTAX"], [367, 353, 10, "enum_LAST_LEXICAL_USE"], [366, 367, 9, "enum_NEXT_SYNTAX"], [367, 368, 9, "enum_NEXT_SYNTAX"], [368, 370, 9, "enum_NEXT_SYNTAX"], [371, 234, 10, "enum_LAST_LEXICAL_USE"], [370, 371, 9, "enum_NEXT_SYNTAX"], [371, 372, 9, "enum_NEXT_SYNTAX"], [373, 236, 10, "enum_LAST_LEXICAL_USE"], [372, 373, 9, "enum_NEXT_SYNTAX"], [373, 374, 9, "enum_NEXT_SYNTAX"], [374, 375, 9, "enum_NEXT_SYNTAX"], [375, 376, 9, "enum_NEXT_SYNTAX"], [377, 240, 10, "enum_LAST_LEXICAL_USE"], [376, 377, 9, "enum_NEXT_SYNTAX"], [377, 378, 9, "enum_NEXT_SYNTAX"], [379, 361, 10, "enum_LAST_LEXICAL_USE"], [378, 379, 9, "enum_NEXT_SYNTAX"], [379, 380, 9, "enum_NEXT_SYNTAX"], [381, 325, 10, "enum_LAST_LEXICAL_USE"], [380, 381, 9, "enum_NEXT_SYNTAX"], [381, 382, 9, "enum_NEXT_SYNTAX"], [382, 383, 9, "enum_NEXT_SYNTAX"], [383, 384, 9, "enum_NEXT_SYNTAX"], [385, 365, 10, "enum_LAST_LEXICAL_USE"], [384, 385, 9, "enum_NEXT_SYNTAX"], [385, 386, 9, "enum_NEXT_SYNTAX"], [386, 387, 9, "enum_NEXT_SYNTAX"], [387, 388, 9, "enum_NEXT_SYNTAX"], [389, 259, 10, "enum_LAST_LEXICAL_USE"], [388, 389, 9, "enum_NEXT_SYNTAX"], [389, 390, 9, "enum_NEXT_SYNTAX"], [390, 392, 9, "enum_NEXT_SYNTAX"], [392, 393, 9, "enum_NEXT_SYNTAX"], [393, 394, 9, "enum_NEXT_SYNTAX"], [395, 27, 10, "enum_LAST_LEXICAL_USE"], [394, 395, 9, "enum_NEXT_SYNTAX"], [395, 396, 9, "enum_NEXT_SYNTAX"], [396, 397, 9, "enum_NEXT_SYNTAX"], [397, 398, 9, "enum_NEXT_SYNTAX"], [399, 196, 10, "enum_LAST_LEXICAL_USE"], [398, 399, 9, "enum_NEXT_SYNTAX"], [399, 400, 9, "enum_NEXT_SYNTAX"], [400, 401, 9, "enum_NEXT_SYNTAX"], [401, 402, 9, "enum_NEXT_SYNTAX"], [402, 403, 9, "enum_NEXT_SYNTAX"], [403, 405, 9, "enum_NEXT_SYNTAX"], [405, 406, 9, "enum_NEXT_SYNTAX"], [406, 407, 9, "enum_NEXT_SYNTAX"], [408, 371, 10, "enum_LAST_LEXICAL_USE"], [407, 408, 9, "enum_NEXT_SYNTAX"], [408, 409, 9, "enum_NEXT_SYNTAX"], [409, 411, 9, "enum_NEXT_SYNTAX"], [412, 393, 10, "enum_LAST_LEXICAL_USE"], [411, 412, 9, "enum_NEXT_SYNTAX"], [412, 413, 9, "enum_NEXT_SYNTAX"], [413, 414, 9, "enum_NEXT_SYNTAX"], [414, 415, 9, "enum_NEXT_SYNTAX"], [416, 406, 10, "enum_LAST_LEXICAL_USE"], [415, 416, 9, "enum_NEXT_SYNTAX"], [416, 417, 9, "enum_NEXT_SYNTAX"], [417, 419, 9, "enum_NEXT_SYNTAX"], [420, 412, 10, "enum_LAST_LEXICAL_USE"], [419, 420, 9, "enum_NEXT_SYNTAX"], [420, 421, 9, "enum_NEXT_SYNTAX"], [421, 422, 9, "enum_NEXT_SYNTAX"], [422, 423, 9, "enum_NEXT_SYNTAX"], [424, 381, 10, "enum_LAST_LEXICAL_USE"], [423, 424, 9, "enum_NEXT_SYNTAX"], [424, 425, 9, "enum_NEXT_SYNTAX"], [426, 399, 10, "enum_LAST_LEXICAL_USE"], [425, 426, 9, "enum_NEXT_SYNTAX"], [426, 427, 9, "enum_NEXT_SYNTAX"], [427, 428, 9, "enum_NEXT_SYNTAX"], [428, 429, 9, "enum_NEXT_SYNTAX"], [429, 430, 9, "enum_NEXT_SYNTAX"], [431, 420, 10, "enum_LAST_LEXICAL_USE"], [430, 431, 9, "enum_NEXT_SYNTAX"], [431, 432, 9, "enum_NEXT_SYNTAX"], [433, 373, 10, "enum_LAST_LEXICAL_USE"], [432, 433, 9, "enum_NEXT_SYNTAX"], [433, 434, 9, "enum_NEXT_SYNTAX"], [434, 435, 9, "enum_NEXT_SYNTAX"], [435, 436, 9, "enum_NEXT_SYNTAX"], [436, 437, 9, "enum_NEXT_SYNTAX"], [437, 438, 9, "enum_NEXT_SYNTAX"], [438, 439, 9, "enum_NEXT_SYNTAX"], [440, 389, 10, "enum_LAST_LEXICAL_USE"], [439, 440, 9, "enum_NEXT_SYNTAX"], [440, 441, 9, "enum_NEXT_SYNTAX"], [441, 443, 9, "enum_NEXT_SYNTAX"], [444, 426, 10, "enum_LAST_LEXICAL_USE"], [443, 444, 9, "enum_NEXT_SYNTAX"], [8, 12, 1, "enum_CFG_NEXT"], [12, 16, 1, "enum_CFG_NEXT"], [16, 1, 1, "enum_CFG_NEXT"], [9, 47, 1, "enum_CFG_NEXT"], [47, 51, 1, "enum_CFG_NEXT"], [51, 63, 1, "enum_CFG_NEXT"], [51, 54, 1, "enum_CFG_NEXT"], [54, 63, 1, "enum_CFG_NEXT"], [63, 71, 1, "enum_CFG_NEXT"], [71, 89, 1, "enum_CFG_NEXT"], [89, 98, 1, "enum_CFG_NEXT"], [98, 110, 1, "enum_CFG_NEXT"], [110, 119, 1, "enum_CFG_NEXT"], [119, 133, 1, "enum_CFG_NEXT"], [133, 149, 1, "enum_CFG_NEXT"], [149, 161, 1, "enum_CFG_NEXT"], [149, 205, 1, "enum_CFG_NEXT"], [161, 167, 1, "enum_CFG_NEXT"], [161, 184, 1, "enum_CFG_NEXT"], [184, 189, 1, "enum_CFG_NEXT"], [184, 205, 1, "enum_CFG_NEXT"], [189, 205, 1, "enum_CFG_NEXT"], [205, 217, 1, "enum_CFG_NEXT"], [217, 222, 1, "enum_CFG_NEXT"], [217, 266, 1, "enum_CFG_NEXT"], [222, 233, 1, "enum_CFG_NEXT"], [233, 392, 1, "enum_CFG_NEXT"], [266, 297, 1, "enum_CFG_NEXT"], [297, 340, 1, "enum_CFG_NEXT"], [340, 348, 1, "enum_CFG_NEXT"], [340, 360, 1, "enum_CFG_NEXT"], [348, 370, 1, "enum_CFG_NEXT"], [360, 370, 1, "enum_CFG_NEXT"], [370, 392, 1, "enum_CFG_NEXT"], [392, 408, 1, "enum_CFG_NEXT"], [408, 406, 1, "enum_CFG_NEXT"], [406, 419, 1, "enum_CFG_NEXT"], [406, 411, 1, "enum_CFG_NEXT"], [411, 406, 1, "enum_CFG_NEXT"], [419, 425, 1, "enum_CFG_NEXT"], [425, 432, 1, "enum_CFG_NEXT"], [432, 443, 1, "enum_CFG_NEXT"], [51, 14, 3, "enum_LAST_WRITE"], [55, 2, 3, "enum_LAST_WRITE"], [78, 55, 2, "enum_LAST_READ"], [78, 2, 3, "enum_LAST_WRITE"], [75, 6, 3, "enum_LAST_WRITE"], [85, 78, 2, "enum_LAST_READ"], [85, 2, 3, "enum_LAST_WRITE"], [72, 75, 2, "enum_LAST_READ"], [72, 6, 3, "enum_LAST_WRITE"], [96, 4, 3, "enum_LAST_WRITE"], [104, 92, 2, "enum_LAST_READ"], [108, 96, 2, "enum_LAST_READ"], [108, 4, 3, "enum_LAST_WRITE"], [99, 90, 3, "enum_LAST_WRITE"], [113, 104, 2, "enum_LAST_READ"], [117, 108, 2, "enum_LAST_READ"], [117, 4, 3, "enum_LAST_WRITE"], [122, 85, 2, "enum_LAST_READ"], [122, 2, 3, "enum_LAST_WRITE"], [136, 122, 2, "enum_LAST_READ"], [136, 2, 3, "enum_LAST_WRITE"], [145, 99, 2, "enum_LAST_READ"], [145, 90, 3, "enum_LAST_WRITE"], [157, 145, 2, "enum_LAST_READ"], [157, 90, 3, "enum_LAST_WRITE"], [180, 157, 2, "enum_LAST_READ"], [180, 90, 3, "enum_LAST_WRITE"], [190, 120, 3, "enum_LAST_WRITE"], [196, 180, 2, "enum_LAST_READ"], [196, 90, 3, "enum_LAST_WRITE"], [208, 113, 2, "enum_LAST_READ"], [212, 111, 3, "enum_LAST_WRITE"], [218, 10, 3, "enum_LAST_WRITE"], [225, 208, 2, "enum_LAST_READ"], [229, 206, 3, "enum_LAST_WRITE"], [231, 134, 3, "enum_LAST_WRITE"], [236, 225, 2, "enum_LAST_READ"], [240, 229, 2, "enum_LAST_READ"], [240, 206, 3, "enum_LAST_WRITE"], [242, 223, 3, "enum_LAST_WRITE"], [244, 190, 2, "enum_LAST_READ"], [244, 120, 3, "enum_LAST_WRITE"], [248, 231, 2, "enum_LAST_READ"], [248, 134, 3, "enum_LAST_WRITE"], [254, 218, 2, "enum_LAST_READ"], [254, 10, 3, "enum_LAST_WRITE"], [259, 75, 2, "enum_LAST_READ"], [259, 72, 3, "enum_LAST_WRITE"], [269, 136, 2, "enum_LAST_READ"], [269, 2, 3, "enum_LAST_WRITE"], [275, 117, 2, "enum_LAST_READ"], [275, 4, 3, "enum_LAST_WRITE"], [277, 269, 2, "enum_LAST_READ"], [277, 2, 3, "enum_LAST_WRITE"], [286, 134, 3, "enum_LAST_WRITE"], [300, 277, 2, "enum_LAST_READ"], [300, 2, 3, "enum_LAST_WRITE"], [306, 275, 2, "enum_LAST_READ"], [306, 4, 3, "enum_LAST_WRITE"], [308, 300, 2, "enum_LAST_READ"], [308, 2, 3, "enum_LAST_WRITE"], [319, 317, 2, "enum_LAST_READ"], [321, 194, 2, "enum_LAST_READ"], [325, 190, 2, "enum_LAST_READ"], [325, 120, 3, "enum_LAST_WRITE"], [330, 317, 2, "enum_LAST_READ"], [330, 319, 3, "enum_LAST_WRITE"], [332, 286, 2, "enum_LAST_READ"], [332, 134, 3, "enum_LAST_WRITE"], [339, 332, 2, "enum_LAST_READ"], [339, 134, 3, "enum_LAST_WRITE"], [341, 323, 2, "enum_LAST_READ"], [343, 298, 3, "enum_LAST_WRITE"], [349, 343, 2, "enum_LAST_READ"], [349, 298, 3, "enum_LAST_WRITE"], [353, 267, 3, "enum_LAST_WRITE"], [361, 343, 2, "enum_LAST_READ"], [361, 298, 3, "enum_LAST_WRITE"], [365, 339, 2, "enum_LAST_READ"], [365, 134, 3, "enum_LAST_WRITE"], [367, 267, 3, "enum_LAST_WRITE"], [373, 208, 2, "enum_LAST_READ"], [377, 206, 3, "enum_LAST_WRITE"], [379, 349, 2, "enum_LAST_READ"], [379, 361, 2, "enum_LAST_READ"], [379, 298, 3, "enum_LAST_WRITE"], [381, 325, 2, "enum_LAST_READ"], [381, 120, 3, "enum_LAST_WRITE"], [385, 365, 2, "enum_LAST_READ"], [385, 339, 2, "enum_LAST_READ"], [385, 134, 3, "enum_LAST_WRITE"], [389, 75, 2, "enum_LAST_READ"], [389, 72, 3, "enum_LAST_WRITE"], [399, 196, 2, "enum_LAST_READ"], [399, 145, 2, "enum_LAST_READ"], [399, 180, 2, "enum_LAST_READ"], [399, 90, 3, "enum_LAST_WRITE"], [408, 234, 3, "enum_LAST_WRITE"], [408, 371, 3, "enum_LAST_WRITE"], [406, 416, 2, "enum_LAST_READ"], [406, 406, 3, "enum_LAST_WRITE"], [412, 412, 2, "enum_LAST_READ"], [412, 393, 3, "enum_LAST_WRITE"], [416, 416, 2, "enum_LAST_READ"], [416, 406, 3, "enum_LAST_WRITE"], [424, 244, 2, "enum_LAST_READ"], [424, 381, 2, "enum_LAST_READ"], [424, 120, 3, "enum_LAST_WRITE"], [420, 412, 2, "enum_LAST_READ"], [420, 393, 3, "enum_LAST_WRITE"], [431, 420, 2, "enum_LAST_READ"], [431, 393, 3, "enum_LAST_WRITE"], [426, 399, 2, "enum_LAST_READ"], [426, 90, 3, "enum_LAST_WRITE"], [433, 373, 2, "enum_LAST_READ"], [433, 236, 2, "enum_LAST_READ"], [440, 259, 2, "enum_LAST_READ"], [440, 389, 2, "enum_LAST_READ"], [440, 72, 3, "enum_LAST_WRITE"], [444, 426, 2, "enum_LAST_READ"], [444, 90, 3, "enum_LAST_WRITE"], [64, 66, 4, "enum_COMPUTED_FROM"], [72, 75, 4, "enum_COMPUTED_FROM"], [72, 85, 4, "enum_COMPUTED_FROM"], [72, 78, 4, "enum_COMPUTED_FROM"], [90, 96, 4, "enum_COMPUTED_FROM"], [90, 92, 4, "enum_COMPUTED_FROM"], [100, 108, 4, "enum_COMPUTED_FROM"], [100, 104, 4, "enum_COMPUTED_FROM"], [111, 117, 4, "enum_COMPUTED_FROM"], [111, 113, 4, "enum_COMPUTED_FROM"], [120, 122, 4, "enum_COMPUTED_FROM"], [134, 136, 4, "enum_COMPUTED_FROM"], [206, 212, 4, "enum_COMPUTED_FROM"], [206, 208, 4, "enum_COMPUTED_FROM"], [393, 395, 4, "enum_COMPUTED_FROM"], [393, 399, 4, "enum_COMPUTED_FROM"], [421, 424, 4, "enum_COMPUTED_FROM"], [427, 431, 4, "enum_COMPUTED_FROM"], [56, 59, 4, "enum_COMPUTED_FROM"], [223, 229, 4, "enum_COMPUTED_FROM"], [223, 231, 4, "enum_COMPUTED_FROM"], [223, 225, 4, "enum_COMPUTED_FROM"], [234, 240, 4, "enum_COMPUTED_FROM"], [234, 242, 4, "enum_COMPUTED_FROM"], [234, 244, 4, "enum_COMPUTED_FROM"], [234, 236, 4, "enum_COMPUTED_FROM"], [234, 248, 4, "enum_COMPUTED_FROM"], [234, 259, 4, "enum_COMPUTED_FROM"], [234, 254, 4, "enum_COMPUTED_FROM"], [267, 275, 4, "enum_COMPUTED_FROM"], [267, 269, 4, "enum_COMPUTED_FROM"], [267, 277, 4, "enum_COMPUTED_FROM"], [267, 286, 4, "enum_COMPUTED_FROM"], [298, 306, 4, "enum_COMPUTED_FROM"], [298, 300, 4, "enum_COMPUTED_FROM"], [298, 308, 4, "enum_COMPUTED_FROM"], [298, 317, 4, "enum_COMPUTED_FROM"], [298, 319, 4, "enum_COMPUTED_FROM"], [298, 321, 4, "enum_COMPUTED_FROM"], [298, 330, 4, "enum_COMPUTED_FROM"], [298, 332, 4, "enum_COMPUTED_FROM"], [298, 323, 4, "enum_COMPUTED_FROM"], [298, 325, 4, "enum_COMPUTED_FROM"], [371, 377, 4, "enum_COMPUTED_FROM"], [371, 379, 4, "enum_COMPUTED_FROM"], [371, 381, 4, "enum_COMPUTED_FROM"], [371, 373, 4, "enum_COMPUTED_FROM"], [371, 385, 4, "enum_COMPUTED_FROM"], [371, 389, 4, "enum_COMPUTED_FROM"]], "error_location": 51, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/SilMon/NucDetect.git", "old_path": "core/Detector.py", "hash": "422787856116a7ba2236825d558f51e59988945c", "code": "def analyse_image(self, path: str, logging: bool = True,\n                  ml_analysis: bool = True, multi_analysis: bool = True) -> Dict[str, Union[ROIHandler, np.ndarray, Dict[str, str]]]:\n    \"\"\"\n    Method to extract rois from the image given by path\n\n    :param path: The URL of the image\n    :param logging: Enables logging\n    :param ml_analysis: Enable image analysis via U-Net\n    :param multi_analysis: Needed for multiprocess-analysis\n    :return: The analysis results as dict\n    \"\"\"\n    if multi_analysis:\n        self.analyser = FCN()\n    start: float = time.time()\n    logging = logging if self.logging is None else self.logging\n    imgdat: Dict = Detector.get_image_data(path)\n    imgdat[\"id\"] = Detector.calculate_image_id(path)\n    image: Any = Detector.load_image(path)\n    names: List = self.settings[\"names\"].split(\";\")\n    main_channel: Any = self.settings[\"main_channel\"]\n    if imgdat[\"channels\"] != 3:\n        if imgdat[\"channels\"] == 1:\n            raise ValueError(\"Detector class can only analyse multichannel images, not grayscale!\")\n        elif imgdat[\"channels\"] > 3:\n            names.extend(range(imgdat[\"channels\"]))\n    # Channel extraction\n    channels = Detector.get_channels(image)\n    if not ml_analysis:\n        # Channel thresholding\n        thresh_chan: Any = Detector.threshold_channels(channels, main_channel)\n        rois: List = Detector.classic_roi_extraction(channels, thresh_chan, names,\n                                               main_map=main_channel, quality_check=not ml_analysis,\n                                               logging=logging)\n    else:\n        nuclei: Any = self.analyser.predict_image(path,\n                                             self.analyser.NUCLEI,\n                                             channels=(main_channel, ), threshold=0.95)[0]\n        foci: List = self.analyser.predict_image(path,\n                                           self.analyser.FOCI,\n                                           channels=[x for x in range(len(names)) if x is not main_channel])\n        if main_channel > len(foci):\n            foci.append(nuclei)\n        else:\n            foci.insert(main_channel, nuclei)\n        rois: List = Detector.ml_roi_extraction(channels, foci, names,\n                                          main_map=main_channel,\n                                          logging=logging)\n    handler = ROIHandler(ident=imgdat[\"id\"])\n    for roi in rois:\n        handler.add_roi(roi)\n    handler.idents = names\n    imgdat[\"handler\"] = handler\n    Detector.log(f\"Total analysis time: {time.time()-start}\", logging)\n    return imgdat\n", "rewrite": "ReplaceText(target='ml_analysis' @(68,11)->(68,25))", "error_line": 11, "has_bug": true, "code_full": "import time\nfrom typing import Any, Dict, List, Union\n\nimport numpy as np\n\nFCN: Any = None\nDetector: Any = None\nROIHandler: Any = None\n\ndef analyse_image(self, path: str, logging: bool = True,\n                  ml_analysis: bool = True, multi_analysis: bool = True) -> Dict[str, Union[ROIHandler, np.ndarray, Dict[str, str]]]:\n    \"\"\"\n    Method to extract rois from the image given by path\n\n    :param path: The URL of the image\n    :param logging: Enables logging\n    :param ml_analysis: Enable image analysis via U-Net\n    :param multi_analysis: Needed for multiprocess-analysis\n    :return: The analysis results as dict\n    \"\"\"\n    if multi_analysis:\n        self.analyser = FCN()\n    start: float = time.time()\n    logging = logging if self.logging is None else self.logging\n    imgdat: Dict = Detector.get_image_data(path)\n    imgdat[\"id\"] = Detector.calculate_image_id(path)\n    image: Any = Detector.load_image(path)\n    names: List = self.settings[\"names\"].split(\";\")\n    main_channel: Any = self.settings[\"main_channel\"]\n    if imgdat[\"channels\"] != 3:\n        if imgdat[\"channels\"] == 1:\n            raise ValueError(\"Detector class can only analyse multichannel images, not grayscale!\")\n        elif imgdat[\"channels\"] > 3:\n            names.extend(range(imgdat[\"channels\"]))\n    # Channel extraction\n    channels = Detector.get_channels(image)\n    if not ml_analysis:\n        # Channel thresholding\n        thresh_chan: Any = Detector.threshold_channels(channels, main_channel)\n        rois: List = Detector.classic_roi_extraction(channels, thresh_chan, names,\n                                               main_map=main_channel, quality_check=not ml_analysis,\n                                               logging=logging)\n    else:\n        nuclei: Any = self.analyser.predict_image(path,\n                                             self.analyser.NUCLEI,\n                                             channels=(main_channel, ), threshold=0.95)[0]\n        foci: List = self.analyser.predict_image(path,\n                                           self.analyser.FOCI,\n                                           channels=[x for x in range(len(names)) if x is not main_channel])\n        if main_channel > len(foci):\n            foci.append(nuclei)\n        else:\n            foci.insert(main_channel, nuclei)\n        rois: List = Detector.ml_roi_extraction(channels, foci, names,\n                                          main_map=main_channel,\n                                          logging=logging)\n    handler = ROIHandler(ident=imgdat[\"id\"])\n    for roi in rois:\n        handler.add_roi(roi)\n    handler.idents = names\n    imgdat[\"handler\"] = handler\n    Detector.log(f\"Total analysis time: {time.time()-start}\", logging)\n    return imgdat\n", "error_location_char": [503, 517], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def multi_scale_cross_entropy2d(", "input", ",", "target", ",", "weight", "=", "None", ",", "size_average", "=", "True", ",", "scale_weight", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "not", "isinstance", "(", "input", ",", "tuple", ")", ")", ":", "#NEWLINE#", "#INDENT#", "return", "cross_entropy2d", "(", "input", "=", "input", ",", "target", "=", "target", ",", "weight", "=", "weight", ",", "size_average", "=", "size_average", ")", "#NEWLINE#", "#UNINDENT#", "if", "(", "scale_weight", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "n_inp", "=", "len", "(", "input", ")", "#NEWLINE#", "scale", "=", "0.4", "#NEWLINE#", "scale_weight", "=", "torch", ".", "pow", "(", "(", "scale", "*", "torch", ".", "ones", "(", "n_inp", ")", ")", ",", "torch", ".", "arange", "(", "n_inp", ")", ".", "float", "(", ")", ")", ".", "to", "(", "input", ".", "device", ")", "#NEWLINE#", "#UNINDENT#", "loss", "=", "0.0", "#NEWLINE#", "for", "(", "i", ",", "inp", ")", "in", "enumerate", "(", "input", ")", ":", "#NEWLINE#", "#INDENT#", "loss", "=", "(", "loss", "+", "(", "scale_weight", "[", "i", "]", "*", "cross_entropy2d", "(", "input", "=", "inp", ",", "target", "=", "target", ",", "weight", "=", "weight", ",", "size_average", "=", "size_average", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "loss"], "edges": [[1, 9, 7, "enum_FIELD"], [21, 23, 7, "enum_FIELD"], [55, 58, 7, "enum_FIELD"], [111, 114, 7, "enum_FIELD"], [122, 119, 7, "enum_FIELD"], [122, 124, 7, "enum_FIELD"], [163, 164, 7, "enum_FIELD"], [23, 27, 7, "enum_FIELD"], [34, 44, 7, "enum_FIELD"], [58, 57, 7, "enum_FIELD"], [63, 67, 7, "enum_FIELD"], [70, 73, 7, "enum_FIELD"], [74, 105, 7, "enum_FIELD"], [124, 123, 7, "enum_FIELD"], [129, 134, 7, "enum_FIELD"], [27, 24, 7, "enum_FIELD"], [44, 35, 7, "enum_FIELD"], [67, 66, 7, "enum_FIELD"], [105, 103, 7, "enum_FIELD"], [134, 133, 7, "enum_FIELD"], [134, 140, 7, "enum_FIELD"], [37, 39, 7, "enum_FIELD"], [41, 43, 7, "enum_FIELD"], [45, 47, 7, "enum_FIELD"], [49, 51, 7, "enum_FIELD"], [103, 91, 7, "enum_FIELD"], [107, 106, 7, "enum_FIELD"], [140, 137, 7, "enum_FIELD"], [140, 150, 7, "enum_FIELD"], [91, 78, 7, "enum_FIELD"], [137, 136, 7, "enum_FIELD"], [137, 138, 7, "enum_FIELD"], [150, 141, 7, "enum_FIELD"], [78, 77, 7, "enum_FIELD"], [83, 82, 7, "enum_FIELD"], [83, 87, 7, "enum_FIELD"], [100, 98, 7, "enum_FIELD"], [143, 145, 7, "enum_FIELD"], [147, 149, 7, "enum_FIELD"], [151, 153, 7, "enum_FIELD"], [155, 157, 7, "enum_FIELD"], [87, 85, 7, "enum_FIELD"], [98, 95, 7, "enum_FIELD"], [85, 84, 7, "enum_FIELD"], [95, 93, 7, "enum_FIELD"], [93, 92, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [26, 2, 10, "enum_LAST_LEXICAL_USE"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [39, 26, 10, "enum_LAST_LEXICAL_USE"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [43, 4, 10, "enum_LAST_LEXICAL_USE"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [47, 6, 10, "enum_LAST_LEXICAL_USE"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [51, 10, 10, "enum_LAST_LEXICAL_USE"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [57, 14, 10, "enum_LAST_LEXICAL_USE"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [68, 39, 10, "enum_LAST_LEXICAL_USE"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [75, 57, 10, "enum_LAST_LEXICAL_USE"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [82, 71, 10, "enum_LAST_LEXICAL_USE"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [84, 77, 10, "enum_LAST_LEXICAL_USE"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [88, 64, 10, "enum_LAST_LEXICAL_USE"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [92, 84, 10, "enum_LAST_LEXICAL_USE"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [96, 88, 10, "enum_LAST_LEXICAL_USE"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [106, 68, 10, "enum_LAST_LEXICAL_USE"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [125, 106, 10, "enum_LAST_LEXICAL_USE"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 129, 9, "enum_NEXT_SYNTAX"], [130, 112, 10, "enum_LAST_LEXICAL_USE"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [133, 130, 10, "enum_LAST_LEXICAL_USE"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [136, 75, 10, "enum_LAST_LEXICAL_USE"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [138, 118, 10, "enum_LAST_LEXICAL_USE"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [141, 35, 10, "enum_LAST_LEXICAL_USE"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [145, 120, 10, "enum_LAST_LEXICAL_USE"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [149, 43, 10, "enum_LAST_LEXICAL_USE"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [153, 47, 10, "enum_LAST_LEXICAL_USE"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [157, 51, 10, "enum_LAST_LEXICAL_USE"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 163, 9, "enum_NEXT_SYNTAX"], [164, 133, 10, "enum_LAST_LEXICAL_USE"], [163, 164, 9, "enum_NEXT_SYNTAX"], [8, 12, 1, "enum_CFG_NEXT"], [12, 16, 1, "enum_CFG_NEXT"], [16, 1, 1, "enum_CFG_NEXT"], [9, 23, 1, "enum_CFG_NEXT"], [23, 34, 1, "enum_CFG_NEXT"], [23, 58, 1, "enum_CFG_NEXT"], [58, 111, 1, "enum_CFG_NEXT"], [58, 63, 1, "enum_CFG_NEXT"], [63, 70, 1, "enum_CFG_NEXT"], [70, 74, 1, "enum_CFG_NEXT"], [74, 111, 1, "enum_CFG_NEXT"], [111, 124, 1, "enum_CFG_NEXT"], [124, 119, 1, "enum_CFG_NEXT"], [119, 163, 1, "enum_CFG_NEXT"], [119, 129, 1, "enum_CFG_NEXT"], [129, 119, 1, "enum_CFG_NEXT"], [26, 2, 3, "enum_LAST_WRITE"], [39, 26, 2, "enum_LAST_READ"], [39, 2, 3, "enum_LAST_WRITE"], [43, 4, 3, "enum_LAST_WRITE"], [47, 6, 3, "enum_LAST_WRITE"], [51, 10, 3, "enum_LAST_WRITE"], [57, 14, 3, "enum_LAST_WRITE"], [68, 26, 2, "enum_LAST_READ"], [68, 2, 3, "enum_LAST_WRITE"], [82, 71, 3, "enum_LAST_WRITE"], [84, 77, 2, "enum_LAST_READ"], [88, 64, 3, "enum_LAST_WRITE"], [92, 84, 2, "enum_LAST_READ"], [96, 88, 2, "enum_LAST_READ"], [96, 64, 3, "enum_LAST_WRITE"], [106, 68, 2, "enum_LAST_READ"], [106, 2, 3, "enum_LAST_WRITE"], [75, 57, 2, "enum_LAST_READ"], [75, 14, 3, "enum_LAST_WRITE"], [125, 106, 2, "enum_LAST_READ"], [125, 26, 2, "enum_LAST_READ"], [125, 2, 3, "enum_LAST_WRITE"], [118, 138, 2, "enum_LAST_READ"], [118, 118, 3, "enum_LAST_WRITE"], [120, 145, 2, "enum_LAST_READ"], [120, 120, 3, "enum_LAST_WRITE"], [133, 133, 2, "enum_LAST_READ"], [133, 112, 3, "enum_LAST_WRITE"], [133, 130, 3, "enum_LAST_WRITE"], [136, 57, 2, "enum_LAST_READ"], [136, 136, 2, "enum_LAST_READ"], [136, 14, 3, "enum_LAST_WRITE"], [136, 75, 3, "enum_LAST_WRITE"], [138, 138, 2, "enum_LAST_READ"], [138, 118, 3, "enum_LAST_WRITE"], [141, 141, 2, "enum_LAST_READ"], [145, 145, 2, "enum_LAST_READ"], [145, 120, 3, "enum_LAST_WRITE"], [149, 149, 2, "enum_LAST_READ"], [149, 4, 3, "enum_LAST_WRITE"], [153, 153, 2, "enum_LAST_READ"], [153, 6, 3, "enum_LAST_WRITE"], [157, 157, 2, "enum_LAST_READ"], [157, 10, 3, "enum_LAST_WRITE"], [130, 133, 2, "enum_LAST_READ"], [130, 112, 3, "enum_LAST_WRITE"], [130, 130, 3, "enum_LAST_WRITE"], [164, 133, 2, "enum_LAST_READ"], [164, 112, 3, "enum_LAST_WRITE"], [164, 130, 3, "enum_LAST_WRITE"], [64, 66, 4, "enum_COMPUTED_FROM"], [64, 68, 4, "enum_COMPUTED_FROM"], [75, 106, 4, "enum_COMPUTED_FROM"], [75, 77, 4, "enum_COMPUTED_FROM"], [75, 82, 4, "enum_COMPUTED_FROM"], [75, 88, 4, "enum_COMPUTED_FROM"], [75, 84, 4, "enum_COMPUTED_FROM"], [75, 96, 4, "enum_COMPUTED_FROM"], [75, 92, 4, "enum_COMPUTED_FROM"], [130, 133, 4, "enum_COMPUTED_FROM"], [130, 136, 4, "enum_COMPUTED_FROM"], [130, 138, 4, "enum_COMPUTED_FROM"], [130, 141, 4, "enum_COMPUTED_FROM"], [130, 145, 4, "enum_COMPUTED_FROM"], [130, 149, 4, "enum_COMPUTED_FROM"], [130, 153, 4, "enum_COMPUTED_FROM"], [130, 157, 4, "enum_COMPUTED_FROM"]], "error_location": 106, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/meetshah1995/pytorch-semseg.git", "old_path": "ptsemseg/loss/loss.py", "hash": "801fb200547caa5b0d91b8dde56b837da029f746", "code": "def multi_scale_cross_entropy2d(input: Union[torch.Tensor, Tuple[torch.Tensor]], target: torch.Tensor, weight: Any=None, size_average: bool=True, scale_weight: Optional[torch.Tensor]=None) -> float:\n    if not isinstance(input, tuple):\n        return cross_entropy2d(input=input, target=target, weight=weight, size_average=size_average)\n\n    # Auxiliary training for PSPNet [1.0, 0.4] and ICNet [1.0, 0.4, 0.16]\n    if scale_weight is None:  # scale_weight: torch tensor type\n        n_inp: int = len(input)\n        scale: float = 0.4\n        scale_weight: torch.Tensor = torch.pow(scale * torch.ones(n_inp), torch.arange(n_inp).float()).to(\n            input.device\n        )\n\n    loss: float = 0.0\n    for i, inp in enumerate(input):\n        loss = loss + scale_weight[i] * cross_entropy2d(\n            input=inp, target=target, weight=weight, size_average=size_average\n        )\n\n    return loss\n", "rewrite": "ReplaceText(target='target' @(30,12)->(30,17))", "error_line": 9, "has_bug": true, "code_full": "from typing import Any, Optional, Tuple, Union\n\nimport torch\nimport torch.nn.functional as F\n\n\ndef cross_entropy2d(input: torch.Tensor, target: torch.Tensor, weight: Any = None, size_average: bool = True) -> torch.Tensor:\n    return torch.zeros(1)\n\ndef multi_scale_cross_entropy2d(input: Union[torch.Tensor, Tuple[torch.Tensor]], target: torch.Tensor, weight: Any=None, size_average: bool=True, scale_weight: Optional[torch.Tensor]=None) -> float:\n    if not isinstance(input, tuple):\n        return cross_entropy2d(input=input, target=target, weight=weight, size_average=size_average)\n\n    # Auxiliary training for PSPNet [1.0, 0.4] and ICNet [1.0, 0.4, 0.16]\n    if scale_weight is None:  # scale_weight: torch tensor type\n        n_inp: int = len(input)\n        scale: float = 0.4\n        scale_weight: torch.Tensor = torch.pow(scale * torch.ones(n_inp), torch.arange(n_inp).float()).to(\n            input.device\n        )\n\n    loss: float = 0.0\n    for i, inp in enumerate(input):\n        loss = loss + scale_weight[i] * cross_entropy2d(\n            input=inp, target=target, weight=weight, size_average=size_average\n        )\n\n    return loss\n", "error_location_char": [654, 659], "type_checked_pytype": false, "type_error_label": "attribute-error", "type_checked_mypy": false}
{"source_tokens": ["#NEWLINE#", "def downloadFile(", "self", ",", "filename", ",", "ispickle", "=", "False", ")", ":", "#NEWLINE#", "#INDENT#", "print", "(", "(", "(", "'Downloading file '", "+", "filename", ")", "+", "' from Redunda.'", ")", ")", "#NEWLINE#", "url", "=", "(", "(", "(", "'https://redunda.sobotics.org/bots/data/'", "+", "filename", ")", "+", "'?key='", ")", "+", "self", ".", "key", ")", "#NEWLINE#", "requestToMake", "=", "request", ".", "Request", "(", "url", ")", "#NEWLINE#", "response", "=", "request", ".", "urlopen", "(", "requestToMake", ")", "#NEWLINE#", "if", "(", "response", ".", "code", "!=", "200", ")", ":", "#NEWLINE#", "#INDENT#", "print", "(", "(", "(", "(", "(", "\"Error occured while downloading file '\"", "+", "filename", ")", "+", "\"' with error code '\"", ")", "+", "str", "(", "response", ".", "code", ")", ")", "+", "'.'", ")", ")", "#NEWLINE#", "#UNINDENT#", "filedata", "=", "str", "(", "response", ".", "read", "(", ")", ".", "decode", "(", "'utf-8'", ")", ")", "#NEWLINE#", "try", ":", "#NEWLINE#", "#INDENT#", "if", "(", "filename", ".", "endswith", "(", "'.pickle'", ")", "or", "(", "ispickle", "==", "True", ")", ")", ":", "#NEWLINE#", "#INDENT#", "dict", "=", "eval", "(", "filename", ")", "#NEWLINE#", "try", ":", "#NEWLINE#", "#INDENT#", "pickle", ".", "dump", "(", "dict", ",", "filename", ")", "#NEWLINE#", "#UNINDENT#", "except", "pickle", ".", "PickleError", "as", "perr", ":", "#NEWLINE#", "#INDENT#", "print", "(", "(", "'Pickling error occurred: '", "+", "str", "(", "perr", ")", ")", ")", "#NEWLINE#", "return", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "with", "open", "(", "filename", ",", "'w'", ")", "as", "fileToWrite", ":", "#NEWLINE#", "#INDENT#", "print", "(", "filedata", ",", "file", "=", "fileToWrite", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "except", "IOError", "as", "ioerr", ":", "#NEWLINE#", "#INDENT#", "print", "(", "(", "'IOError occurred: '", "+", "str", "(", "ioerr", ")", ")", ")", "#NEWLINE#", "return"], "edges": [[1, 5, 7, "enum_FIELD"], [12, 14, 7, "enum_FIELD"], [25, 38, 7, "enum_FIELD"], [43, 49, 7, "enum_FIELD"], [52, 58, 7, "enum_FIELD"], [62, 67, 7, "enum_FIELD"], [99, 103, 7, "enum_FIELD"], [14, 13, 7, "enum_FIELD"], [38, 35, 7, "enum_FIELD"], [38, 40, 7, "enum_FIELD"], [49, 47, 7, "enum_FIELD"], [58, 56, 7, "enum_FIELD"], [67, 65, 7, "enum_FIELD"], [72, 74, 7, "enum_FIELD"], [103, 102, 7, "enum_FIELD"], [135, 128, 7, "enum_FIELD"], [214, 213, 7, "enum_FIELD"], [214, 215, 7, "enum_FIELD"], [21, 18, 7, "enum_FIELD"], [21, 22, 7, "enum_FIELD"], [35, 32, 7, "enum_FIELD"], [35, 36, 7, "enum_FIELD"], [40, 39, 7, "enum_FIELD"], [47, 46, 7, "enum_FIELD"], [56, 55, 7, "enum_FIELD"], [65, 64, 7, "enum_FIELD"], [74, 73, 7, "enum_FIELD"], [111, 109, 7, "enum_FIELD"], [137, 141, 7, "enum_FIELD"], [218, 220, 7, "enum_FIELD"], [18, 17, 7, "enum_FIELD"], [18, 19, 7, "enum_FIELD"], [32, 31, 7, "enum_FIELD"], [32, 33, 7, "enum_FIELD"], [94, 86, 7, "enum_FIELD"], [94, 95, 7, "enum_FIELD"], [109, 107, 7, "enum_FIELD"], [125, 123, 7, "enum_FIELD"], [131, 130, 7, "enum_FIELD"], [141, 140, 7, "enum_FIELD"], [148, 154, 7, "enum_FIELD"], [163, 161, 7, "enum_FIELD"], [163, 164, 7, "enum_FIELD"], [195, 192, 7, "enum_FIELD"], [195, 196, 7, "enum_FIELD"], [199, 203, 7, "enum_FIELD"], [220, 219, 7, "enum_FIELD"], [86, 83, 7, "enum_FIELD"], [86, 88, 7, "enum_FIELD"], [107, 105, 7, "enum_FIELD"], [123, 122, 7, "enum_FIELD"], [154, 150, 7, "enum_FIELD"], [161, 160, 7, "enum_FIELD"], [167, 169, 7, "enum_FIELD"], [192, 189, 7, "enum_FIELD"], [203, 200, 7, "enum_FIELD"], [223, 222, 7, "enum_FIELD"], [223, 225, 7, "enum_FIELD"], [83, 80, 7, "enum_FIELD"], [83, 84, 7, "enum_FIELD"], [88, 87, 7, "enum_FIELD"], [105, 104, 7, "enum_FIELD"], [150, 149, 7, "enum_FIELD"], [169, 168, 7, "enum_FIELD"], [204, 206, 7, "enum_FIELD"], [225, 224, 7, "enum_FIELD"], [80, 79, 7, "enum_FIELD"], [80, 81, 7, "enum_FIELD"], [90, 89, 7, "enum_FIELD"], [172, 171, 7, "enum_FIELD"], [172, 174, 7, "enum_FIELD"], [174, 173, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [19, 4, 10, "enum_LAST_LEXICAL_USE"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [33, 19, 10, "enum_LAST_LEXICAL_USE"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [39, 2, 10, "enum_LAST_LEXICAL_USE"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [50, 26, 10, "enum_LAST_LEXICAL_USE"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [55, 46, 10, "enum_LAST_LEXICAL_USE"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [59, 44, 10, "enum_LAST_LEXICAL_USE"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [64, 53, 10, "enum_LAST_LEXICAL_USE"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 72, 9, "enum_NEXT_SYNTAX"], [73, 13, 10, "enum_LAST_LEXICAL_USE"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [81, 33, 10, "enum_LAST_LEXICAL_USE"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [89, 64, 10, "enum_LAST_LEXICAL_USE"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [102, 87, 10, "enum_LAST_LEXICAL_USE"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [104, 89, 10, "enum_LAST_LEXICAL_USE"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [122, 81, 10, "enum_LAST_LEXICAL_USE"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [130, 6, 10, "enum_LAST_LEXICAL_USE"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [142, 122, 10, "enum_LAST_LEXICAL_USE"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [153, 138, 10, "enum_LAST_LEXICAL_USE"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [155, 142, 10, "enum_LAST_LEXICAL_USE"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 159, 9, "enum_NEXT_SYNTAX"], [160, 149, 10, "enum_LAST_LEXICAL_USE"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 167, 9, "enum_NEXT_SYNTAX"], [168, 73, 10, "enum_LAST_LEXICAL_USE"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [173, 102, 10, "enum_LAST_LEXICAL_USE"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [175, 164, 10, "enum_LAST_LEXICAL_USE"], [174, 175, 9, "enum_NEXT_SYNTAX"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 180, 9, "enum_NEXT_SYNTAX"], [180, 184, 9, "enum_NEXT_SYNTAX"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 188, 9, "enum_NEXT_SYNTAX"], [188, 189, 9, "enum_NEXT_SYNTAX"], [189, 190, 9, "enum_NEXT_SYNTAX"], [191, 155, 10, "enum_LAST_LEXICAL_USE"], [190, 191, 9, "enum_NEXT_SYNTAX"], [191, 192, 9, "enum_NEXT_SYNTAX"], [192, 193, 9, "enum_NEXT_SYNTAX"], [193, 194, 9, "enum_NEXT_SYNTAX"], [194, 195, 9, "enum_NEXT_SYNTAX"], [195, 196, 9, "enum_NEXT_SYNTAX"], [196, 197, 9, "enum_NEXT_SYNTAX"], [197, 199, 9, "enum_NEXT_SYNTAX"], [200, 168, 10, "enum_LAST_LEXICAL_USE"], [199, 200, 9, "enum_NEXT_SYNTAX"], [200, 201, 9, "enum_NEXT_SYNTAX"], [202, 100, 10, "enum_LAST_LEXICAL_USE"], [201, 202, 9, "enum_NEXT_SYNTAX"], [202, 203, 9, "enum_NEXT_SYNTAX"], [203, 204, 9, "enum_NEXT_SYNTAX"], [204, 205, 9, "enum_NEXT_SYNTAX"], [206, 196, 10, "enum_LAST_LEXICAL_USE"], [205, 206, 9, "enum_NEXT_SYNTAX"], [206, 207, 9, "enum_NEXT_SYNTAX"], [207, 212, 9, "enum_NEXT_SYNTAX"], [212, 213, 9, "enum_NEXT_SYNTAX"], [213, 214, 9, "enum_NEXT_SYNTAX"], [214, 215, 9, "enum_NEXT_SYNTAX"], [215, 216, 9, "enum_NEXT_SYNTAX"], [216, 218, 9, "enum_NEXT_SYNTAX"], [219, 200, 10, "enum_LAST_LEXICAL_USE"], [218, 219, 9, "enum_NEXT_SYNTAX"], [219, 220, 9, "enum_NEXT_SYNTAX"], [220, 221, 9, "enum_NEXT_SYNTAX"], [221, 222, 9, "enum_NEXT_SYNTAX"], [222, 223, 9, "enum_NEXT_SYNTAX"], [224, 173, 10, "enum_LAST_LEXICAL_USE"], [223, 224, 9, "enum_NEXT_SYNTAX"], [224, 225, 9, "enum_NEXT_SYNTAX"], [226, 215, 10, "enum_LAST_LEXICAL_USE"], [225, 226, 9, "enum_NEXT_SYNTAX"], [226, 227, 9, "enum_NEXT_SYNTAX"], [227, 228, 9, "enum_NEXT_SYNTAX"], [228, 229, 9, "enum_NEXT_SYNTAX"], [229, 231, 9, "enum_NEXT_SYNTAX"], [8, 1, 1, "enum_CFG_NEXT"], [5, 12, 1, "enum_CFG_NEXT"], [12, 25, 1, "enum_CFG_NEXT"], [25, 43, 1, "enum_CFG_NEXT"], [43, 52, 1, "enum_CFG_NEXT"], [52, 67, 1, "enum_CFG_NEXT"], [67, 99, 1, "enum_CFG_NEXT"], [67, 72, 1, "enum_CFG_NEXT"], [72, 99, 1, "enum_CFG_NEXT"], [99, 128, 1, "enum_CFG_NEXT"], [128, 213, 1, "enum_CFG_NEXT"], [128, 137, 1, "enum_CFG_NEXT"], [137, 213, 1, "enum_CFG_NEXT"], [137, 148, 1, "enum_CFG_NEXT"], [148, 161, 1, "enum_CFG_NEXT"], [161, 213, 1, "enum_CFG_NEXT"], [161, 164, 1, "enum_CFG_NEXT"], [164, 167, 1, "enum_CFG_NEXT"], [167, 180, 1, "enum_CFG_NEXT"], [180, 213, 1, "enum_CFG_NEXT"], [213, 215, 1, "enum_CFG_NEXT"], [215, 218, 1, "enum_CFG_NEXT"], [218, 231, 1, "enum_CFG_NEXT"], [19, 4, 3, "enum_LAST_WRITE"], [33, 19, 2, "enum_LAST_READ"], [33, 4, 3, "enum_LAST_WRITE"], [39, 2, 3, "enum_LAST_WRITE"], [50, 26, 3, "enum_LAST_WRITE"], [55, 46, 2, "enum_LAST_READ"], [59, 44, 3, "enum_LAST_WRITE"], [64, 53, 3, "enum_LAST_WRITE"], [73, 13, 2, "enum_LAST_READ"], [81, 33, 2, "enum_LAST_READ"], [81, 4, 3, "enum_LAST_WRITE"], [89, 64, 2, "enum_LAST_READ"], [89, 53, 3, "enum_LAST_WRITE"], [102, 87, 2, "enum_LAST_READ"], [104, 64, 2, "enum_LAST_READ"], [104, 89, 2, "enum_LAST_READ"], [104, 53, 3, "enum_LAST_WRITE"], [122, 81, 2, "enum_LAST_READ"], [122, 33, 2, "enum_LAST_READ"], [122, 4, 3, "enum_LAST_WRITE"], [130, 6, 3, "enum_LAST_WRITE"], [142, 122, 2, "enum_LAST_READ"], [142, 4, 3, "enum_LAST_WRITE"], [153, 138, 3, "enum_LAST_WRITE"], [155, 142, 2, "enum_LAST_READ"], [155, 4, 3, "enum_LAST_WRITE"], [160, 149, 2, "enum_LAST_READ"], [168, 13, 2, "enum_LAST_READ"], [168, 73, 2, "enum_LAST_READ"], [173, 102, 2, "enum_LAST_READ"], [175, 164, 3, "enum_LAST_WRITE"], [219, 73, 2, "enum_LAST_READ"], [219, 13, 2, "enum_LAST_READ"], [219, 168, 2, "enum_LAST_READ"], [224, 102, 2, "enum_LAST_READ"], [224, 173, 2, "enum_LAST_READ"], [226, 215, 3, "enum_LAST_WRITE"], [26, 39, 4, "enum_COMPUTED_FROM"], [26, 33, 4, "enum_COMPUTED_FROM"], [44, 50, 4, "enum_COMPUTED_FROM"], [44, 46, 4, "enum_COMPUTED_FROM"], [53, 59, 4, "enum_COMPUTED_FROM"], [53, 55, 4, "enum_COMPUTED_FROM"], [100, 102, 4, "enum_COMPUTED_FROM"], [100, 104, 4, "enum_COMPUTED_FROM"], [138, 140, 4, "enum_COMPUTED_FROM"], [138, 142, 4, "enum_COMPUTED_FROM"]], "error_location": 142, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/SOBotics/Redunda-lib-Python.git", "old_path": "Redunda.py", "hash": "6187143b32f4f3c4ca9809c347349be1b537cf30", "code": "def downloadFile (self, filename: str, ispickle: bool=False):\n    print (\"Downloading file \" + filename + \" from Redunda.\")\n\n    url = \"https://redunda.sobotics.org/bots/data/\" + filename + \"?key=\" + self.key\n\n    requestToMake: request.Request = request.Request (url)\n\n    #Make the request.\n    response: request._UrlopenRet = request.urlopen (requestToMake)\n\n    if response.code != 200:\n        print (\"Error occured while downloading file '\" + filename + \"' with error code '\" + str (response.code) + \".\")\n\n\n    filedata: str = str(response.read().decode (\"utf-8\"))\n\n    try:\n        if filename.endswith (\".pickle\") or ispickle == True:\n            dict: Any = eval (filename)\n            try:\n                pickle.dump (dict, filename)\n            except pickle.PickleError as perr:\n                print (\"Pickling error occurred: \" + str (perr))\n                return\n        else:\n            with open (filename, \"w\") as fileToWrite:\n                print (filedata, file=fileToWrite)\n    except IOError as ioerr:\n        print (\"IOError occurred: \" + str (ioerr))\n        return\n", "rewrite": "ReplaceText(target='filedata' @(86,29)->(86,37))", "error_line": 18, "has_bug": true, "code_full": "import pickle\nimport urllib.request as request\nfrom typing import Any\n\n\nclass Class:\n    key: str\n\n    def downloadFile (self, filename: str, ispickle: bool=False):\n        print (\"Downloading file \" + filename + \" from Redunda.\")\n\n        url = \"https://redunda.sobotics.org/bots/data/\" + filename + \"?key=\" + self.key\n\n        requestToMake: request.Request = request.Request (url)\n\n        #Make the request.\n        response: request._UrlopenRet = request.urlopen (requestToMake)\n\n        if response.code != 200:\n            print (\"Error occured while downloading file '\" + filename + \"' with error code '\" + str (response.code) + \".\")\n\n\n        filedata: str = str(response.read().decode (\"utf-8\"))\n\n        try:\n            if filename.endswith (\".pickle\") or ispickle == True:\n                dict: Any = eval (filename)\n                try:\n                    pickle.dump (dict, filename)\n                except pickle.PickleError as perr:\n                    print (\"Pickling error occurred: \" + str (perr))\n                    return\n            else:\n                with open (filename, \"w\") as fileToWrite:\n                    print (filedata, file=fileToWrite)\n        except IOError as ioerr:\n            print (\"IOError occurred: \" + str (ioerr))\n            return\n", "error_location_char": [673, 681], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def CTSget(", "source", ",", "targets", ",", "identifiers", ",", "top_only", "=", "True", ",", "timeout", "=", "60", ",", "server", "=", "'http://cts.fiehnlab.ucdavis.edu/service/convert'", ")", ":", "#NEWLINE#", "#INDENT#", "result", "=", "{", "}", "#NEWLINE#", "if", "(", "type", "(", "targets", ")", "is", "str", ")", ":", "#NEWLINE#", "#INDENT#", "result", "[", "targets", "]", "=", "CTS_translate_multi", "(", "source", ",", "targets", ",", "identifiers", ",", "top_only", ",", "timeout", ",", "server", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "type", "(", "identifiers", ")", "is", "list", ")", ":", "#NEWLINE#", "#INDENT#", "for", "i", "in", "range", "(", "len", "(", "targets", ")", ")", ":", "#NEWLINE#", "#INDENT#", "target", "=", "targets", "[", "i", "]", "#NEWLINE#", "print", "(", "(", "(", "(", "'translating from '", "+", "source", ")", "+", "' to '", ")", "+", "target", ")", ")", "#NEWLINE#", "result", "[", "target", "]", "=", "CTS_translate_multi", "(", "source", ",", "target", ",", "identifiers", ",", "top_only", ",", "timeout", ",", "server", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "raise", "IOError", "(", "'Input targets should be string or a list of strings'", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "return", "result"], "edges": [[1, 9, 7, "enum_FIELD"], [22, 25, 7, "enum_FIELD"], [37, 34, 7, "enum_FIELD"], [148, 149, 7, "enum_FIELD"], [34, 31, 7, "enum_FIELD"], [39, 52, 7, "enum_FIELD"], [74, 71, 7, "enum_FIELD"], [31, 30, 7, "enum_FIELD"], [41, 40, 7, "enum_FIELD"], [41, 42, 7, "enum_FIELD"], [52, 45, 7, "enum_FIELD"], [71, 68, 7, "enum_FIELD"], [79, 78, 7, "enum_FIELD"], [79, 81, 7, "enum_FIELD"], [140, 142, 7, "enum_FIELD"], [68, 67, 7, "enum_FIELD"], [81, 80, 7, "enum_FIELD"], [89, 93, 7, "enum_FIELD"], [96, 98, 7, "enum_FIELD"], [113, 126, 7, "enum_FIELD"], [142, 141, 7, "enum_FIELD"], [83, 82, 7, "enum_FIELD"], [93, 92, 7, "enum_FIELD"], [93, 94, 7, "enum_FIELD"], [98, 97, 7, "enum_FIELD"], [115, 114, 7, "enum_FIELD"], [115, 116, 7, "enum_FIELD"], [126, 119, 7, "enum_FIELD"], [109, 106, 7, "enum_FIELD"], [109, 110, 7, "enum_FIELD"], [106, 103, 7, "enum_FIELD"], [106, 107, 7, "enum_FIELD"], [103, 102, 7, "enum_FIELD"], [103, 104, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [32, 4, 10, "enum_LAST_LEXICAL_USE"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 39, 9, "enum_NEXT_SYNTAX"], [40, 23, 10, "enum_LAST_LEXICAL_USE"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [42, 32, 10, "enum_LAST_LEXICAL_USE"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [47, 2, 10, "enum_LAST_LEXICAL_USE"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [49, 42, 10, "enum_LAST_LEXICAL_USE"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [51, 6, 10, "enum_LAST_LEXICAL_USE"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [53, 8, 10, "enum_LAST_LEXICAL_USE"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [55, 12, 10, "enum_LAST_LEXICAL_USE"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [57, 16, 10, "enum_LAST_LEXICAL_USE"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [67, 30, 10, "enum_LAST_LEXICAL_USE"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [69, 51, 10, "enum_LAST_LEXICAL_USE"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [84, 49, 10, "enum_LAST_LEXICAL_USE"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [92, 84, 10, "enum_LAST_LEXICAL_USE"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [94, 78, 10, "enum_LAST_LEXICAL_USE"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [104, 47, 10, "enum_LAST_LEXICAL_USE"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [110, 90, 10, "enum_LAST_LEXICAL_USE"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [114, 40, 10, "enum_LAST_LEXICAL_USE"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [116, 110, 10, "enum_LAST_LEXICAL_USE"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [119, 45, 10, "enum_LAST_LEXICAL_USE"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [121, 104, 10, "enum_LAST_LEXICAL_USE"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [123, 116, 10, "enum_LAST_LEXICAL_USE"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [125, 69, 10, "enum_LAST_LEXICAL_USE"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [127, 53, 10, "enum_LAST_LEXICAL_USE"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [129, 55, 10, "enum_LAST_LEXICAL_USE"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [131, 57, 10, "enum_LAST_LEXICAL_USE"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 148, 9, "enum_NEXT_SYNTAX"], [149, 114, 10, "enum_LAST_LEXICAL_USE"], [148, 149, 9, "enum_NEXT_SYNTAX"], [10, 14, 1, "enum_CFG_NEXT"], [14, 18, 1, "enum_CFG_NEXT"], [18, 1, 1, "enum_CFG_NEXT"], [9, 22, 1, "enum_CFG_NEXT"], [22, 34, 1, "enum_CFG_NEXT"], [34, 71, 1, "enum_CFG_NEXT"], [34, 39, 1, "enum_CFG_NEXT"], [39, 148, 1, "enum_CFG_NEXT"], [71, 140, 1, "enum_CFG_NEXT"], [71, 81, 1, "enum_CFG_NEXT"], [81, 78, 1, "enum_CFG_NEXT"], [78, 148, 1, "enum_CFG_NEXT"], [78, 89, 1, "enum_CFG_NEXT"], [89, 96, 1, "enum_CFG_NEXT"], [96, 113, 1, "enum_CFG_NEXT"], [113, 78, 1, "enum_CFG_NEXT"], [32, 4, 3, "enum_LAST_WRITE"], [47, 2, 3, "enum_LAST_WRITE"], [49, 32, 2, "enum_LAST_READ"], [49, 4, 3, "enum_LAST_WRITE"], [51, 6, 3, "enum_LAST_WRITE"], [53, 8, 3, "enum_LAST_WRITE"], [55, 12, 3, "enum_LAST_WRITE"], [57, 16, 3, "enum_LAST_WRITE"], [40, 23, 3, "enum_LAST_WRITE"], [42, 49, 2, "enum_LAST_READ"], [42, 4, 3, "enum_LAST_WRITE"], [67, 30, 2, "enum_LAST_READ"], [69, 6, 3, "enum_LAST_WRITE"], [84, 32, 2, "enum_LAST_READ"], [84, 4, 3, "enum_LAST_WRITE"], [78, 94, 2, "enum_LAST_READ"], [78, 78, 3, "enum_LAST_WRITE"], [92, 84, 2, "enum_LAST_READ"], [92, 92, 2, "enum_LAST_READ"], [92, 4, 3, "enum_LAST_WRITE"], [94, 94, 2, "enum_LAST_READ"], [94, 78, 3, "enum_LAST_WRITE"], [90, 116, 2, "enum_LAST_READ"], [90, 90, 3, "enum_LAST_WRITE"], [97, 97, 2, "enum_LAST_READ"], [104, 121, 2, "enum_LAST_READ"], [104, 2, 3, "enum_LAST_WRITE"], [110, 116, 2, "enum_LAST_READ"], [110, 90, 3, "enum_LAST_WRITE"], [119, 119, 2, "enum_LAST_READ"], [121, 104, 2, "enum_LAST_READ"], [121, 2, 3, "enum_LAST_WRITE"], [123, 110, 2, "enum_LAST_READ"], [123, 90, 3, "enum_LAST_WRITE"], [125, 69, 2, "enum_LAST_READ"], [125, 125, 2, "enum_LAST_READ"], [125, 6, 3, "enum_LAST_WRITE"], [127, 127, 2, "enum_LAST_READ"], [127, 8, 3, "enum_LAST_WRITE"], [129, 129, 2, "enum_LAST_READ"], [129, 12, 3, "enum_LAST_WRITE"], [131, 131, 2, "enum_LAST_READ"], [131, 16, 3, "enum_LAST_WRITE"], [114, 114, 2, "enum_LAST_READ"], [114, 23, 3, "enum_LAST_WRITE"], [116, 123, 2, "enum_LAST_READ"], [116, 90, 3, "enum_LAST_WRITE"], [149, 40, 2, "enum_LAST_READ"], [149, 114, 2, "enum_LAST_READ"], [149, 23, 3, "enum_LAST_WRITE"], [41, 45, 4, "enum_COMPUTED_FROM"], [41, 47, 4, "enum_COMPUTED_FROM"], [41, 49, 4, "enum_COMPUTED_FROM"], [41, 51, 4, "enum_COMPUTED_FROM"], [41, 53, 4, "enum_COMPUTED_FROM"], [41, 55, 4, "enum_COMPUTED_FROM"], [41, 57, 4, "enum_COMPUTED_FROM"], [90, 92, 4, "enum_COMPUTED_FROM"], [90, 94, 4, "enum_COMPUTED_FROM"], [115, 119, 4, "enum_COMPUTED_FROM"], [115, 121, 4, "enum_COMPUTED_FROM"], [115, 123, 4, "enum_COMPUTED_FROM"], [115, 125, 4, "enum_COMPUTED_FROM"], [115, 127, 4, "enum_COMPUTED_FROM"], [115, 129, 4, "enum_COMPUTED_FROM"], [115, 131, 4, "enum_COMPUTED_FROM"]], "error_location": 69, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/hcji/CTSgetPy.git", "old_path": "CTSgetPy/CTSgetPy.py", "hash": "93ac966118febd2bd7120f1149eb1f8572939afa", "code": "def CTSget(source: str, targets: Union[str, List[str]], identifiers: List[str], top_only: bool=True, timeout: int=60, server: str=\"http://cts.fiehnlab.ucdavis.edu/service/convert\") -> Dict:\n    result: Dict = {}\n    if type(targets) is str:\n        result[targets] = CTS_translate_multi(source, targets, identifiers, top_only, timeout, server)\n    elif type(identifiers) is list:\n        for i in range(len(targets)):\n            target: str = targets[i]\n            print ('translating from ' + source + ' to ' + target)\n            result[target] = CTS_translate_multi(source, target, identifiers, top_only, timeout, server)\n    else:\n        raise IOError('Input targets should be string or a list of strings')   \n    return result\n", "rewrite": "ReplaceText(target='targets' @(55,14)->(55,25))", "error_line": 4, "has_bug": true, "code_full": "from typing import Dict, List, Union\n\n\ndef CTS_translate_multi(source: str, target: str, identifiers: List[str], top_only: bool, timeout: int, server: str) -> Dict[str, List[str]]:\n    return {}\n\ndef CTSget(source: str, targets: Union[str, List[str]], identifiers: List[str], top_only: bool=True, timeout: int=60, server: str=\"http://cts.fiehnlab.ucdavis.edu/service/convert\") -> Dict:\n    result: Dict = {}\n    if type(targets) is str:\n        result[targets] = CTS_translate_multi(source, targets, identifiers, top_only, timeout, server)\n    elif type(identifiers) is list:\n        for i in range(len(targets)):\n            target: str = targets[i]\n            print ('translating from ' + source + ' to ' + target)\n            result[target] = CTS_translate_multi(source, target, identifiers, top_only, timeout, server)\n    else:\n        raise IOError('Input targets should be string or a list of strings')   \n    return result\n", "error_location_char": [358, 369], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def decode_params(", "params", ",", "prefix", "=", "'!'", ",", "remove_prefixes", "=", "True", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Check each parameter and if the parameter starts with a given sign, we will assume its value is a list of tuples\\n    (source, params) that need to be source decoded and initialized with given parameters.\\n    \\n    Parameters\\n    ----------\\n    params: dict\\n        A dictionary of parameters\\n    prefix: str\\n        A prefix that indicates the parameter is special and requires decoding\\n    remove_prefixes: bool\\n        Indicates if prefixes should be removed from keys\\n    Returns\\n    -------\\n    Returns the new parameters where the key prefixes are removed and its values are decoded  \\n    '", "#NEWLINE#", "params_copy", "=", "copy", "(", "params", ")", "#NEWLINE#", "for", "key", "in", "params_copy", ":", "#NEWLINE#", "#INDENT#", "if", "(", "key", "[", "0", ":", "len", "(", "prefix", ")", "]", "==", "prefix", ")", ":", "#NEWLINE#", "#INDENT#", "decoded", "=", "decode_sources", "(", "params_copy", "[", "key", "]", ")", "#NEWLINE#", "if", "remove_prefixes", ":", "#NEWLINE#", "#INDENT#", "params_copy", "[", "key", "[", "len", "(", "prefix", ")", ":", "]", "]", "=", "decoded", "#NEWLINE#", "del", "params_copy", "[", "key", "]", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "params_copy", "[", "key", "]", "=", "decoded", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "return", "params_copy"], "edges": [[1, 5, 7, "enum_FIELD"], [14, 15, 7, "enum_FIELD"], [16, 20, 7, "enum_FIELD"], [26, 25, 7, "enum_FIELD"], [26, 27, 7, "enum_FIELD"], [98, 99, 7, "enum_FIELD"], [20, 19, 7, "enum_FIELD"], [31, 42, 7, "enum_FIELD"], [42, 34, 7, "enum_FIELD"], [47, 51, 7, "enum_FIELD"], [60, 59, 7, "enum_FIELD"], [34, 33, 7, "enum_FIELD"], [34, 36, 7, "enum_FIELD"], [51, 50, 7, "enum_FIELD"], [62, 75, 7, "enum_FIELD"], [87, 93, 7, "enum_FIELD"], [36, 35, 7, "enum_FIELD"], [36, 38, 7, "enum_FIELD"], [53, 52, 7, "enum_FIELD"], [53, 54, 7, "enum_FIELD"], [64, 63, 7, "enum_FIELD"], [64, 66, 7, "enum_FIELD"], [79, 78, 7, "enum_FIELD"], [79, 80, 7, "enum_FIELD"], [89, 88, 7, "enum_FIELD"], [89, 90, 7, "enum_FIELD"], [38, 37, 7, "enum_FIELD"], [66, 65, 7, "enum_FIELD"], [66, 71, 7, "enum_FIELD"], [71, 68, 7, "enum_FIELD"], [68, 67, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [21, 2, 10, "enum_LAST_LEXICAL_USE"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [27, 17, 10, "enum_LAST_LEXICAL_USE"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [33, 25, 10, "enum_LAST_LEXICAL_USE"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [39, 4, 10, "enum_LAST_LEXICAL_USE"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [43, 39, 10, "enum_LAST_LEXICAL_USE"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [52, 27, 10, "enum_LAST_LEXICAL_USE"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [54, 33, 10, "enum_LAST_LEXICAL_USE"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 58, 9, "enum_NEXT_SYNTAX"], [59, 8, 10, "enum_LAST_LEXICAL_USE"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 62, 9, "enum_NEXT_SYNTAX"], [63, 52, 10, "enum_LAST_LEXICAL_USE"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [65, 54, 10, "enum_LAST_LEXICAL_USE"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [67, 37, 10, "enum_LAST_LEXICAL_USE"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [69, 43, 10, "enum_LAST_LEXICAL_USE"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [75, 48, 10, "enum_LAST_LEXICAL_USE"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 77, 9, "enum_NEXT_SYNTAX"], [78, 63, 10, "enum_LAST_LEXICAL_USE"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [80, 65, 10, "enum_LAST_LEXICAL_USE"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 87, 9, "enum_NEXT_SYNTAX"], [88, 78, 10, "enum_LAST_LEXICAL_USE"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [90, 80, 10, "enum_LAST_LEXICAL_USE"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [93, 75, 10, "enum_LAST_LEXICAL_USE"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 98, 9, "enum_NEXT_SYNTAX"], [99, 88, 10, "enum_LAST_LEXICAL_USE"], [98, 99, 9, "enum_NEXT_SYNTAX"], [6, 10, 1, "enum_CFG_NEXT"], [10, 1, 1, "enum_CFG_NEXT"], [5, 14, 1, "enum_CFG_NEXT"], [14, 16, 1, "enum_CFG_NEXT"], [16, 27, 1, "enum_CFG_NEXT"], [27, 25, 1, "enum_CFG_NEXT"], [25, 42, 1, "enum_CFG_NEXT"], [25, 98, 1, "enum_CFG_NEXT"], [42, 47, 1, "enum_CFG_NEXT"], [42, 25, 1, "enum_CFG_NEXT"], [47, 59, 1, "enum_CFG_NEXT"], [59, 87, 1, "enum_CFG_NEXT"], [59, 62, 1, "enum_CFG_NEXT"], [62, 77, 1, "enum_CFG_NEXT"], [77, 25, 1, "enum_CFG_NEXT"], [87, 25, 1, "enum_CFG_NEXT"], [21, 2, 3, "enum_LAST_WRITE"], [27, 17, 3, "enum_LAST_WRITE"], [25, 33, 2, "enum_LAST_READ"], [25, 80, 2, "enum_LAST_READ"], [25, 90, 2, "enum_LAST_READ"], [25, 25, 3, "enum_LAST_WRITE"], [33, 33, 2, "enum_LAST_READ"], [33, 80, 2, "enum_LAST_READ"], [33, 90, 2, "enum_LAST_READ"], [33, 25, 3, "enum_LAST_WRITE"], [37, 37, 2, "enum_LAST_READ"], [37, 67, 2, "enum_LAST_READ"], [39, 43, 2, "enum_LAST_READ"], [39, 69, 2, "enum_LAST_READ"], [39, 4, 3, "enum_LAST_WRITE"], [43, 39, 2, "enum_LAST_READ"], [43, 4, 3, "enum_LAST_WRITE"], [50, 50, 2, "enum_LAST_READ"], [52, 88, 2, "enum_LAST_READ"], [52, 78, 2, "enum_LAST_READ"], [52, 27, 2, "enum_LAST_READ"], [52, 17, 3, "enum_LAST_WRITE"], [54, 33, 2, "enum_LAST_READ"], [54, 25, 3, "enum_LAST_WRITE"], [48, 75, 2, "enum_LAST_READ"], [48, 93, 2, "enum_LAST_READ"], [48, 48, 3, "enum_LAST_WRITE"], [59, 59, 2, "enum_LAST_READ"], [59, 8, 3, "enum_LAST_WRITE"], [75, 75, 2, "enum_LAST_READ"], [75, 93, 2, "enum_LAST_READ"], [75, 48, 3, "enum_LAST_WRITE"], [63, 52, 2, "enum_LAST_READ"], [63, 17, 3, "enum_LAST_WRITE"], [65, 54, 2, "enum_LAST_READ"], [65, 25, 3, "enum_LAST_WRITE"], [67, 37, 2, "enum_LAST_READ"], [69, 43, 2, "enum_LAST_READ"], [69, 4, 3, "enum_LAST_WRITE"], [78, 63, 2, "enum_LAST_READ"], [78, 17, 3, "enum_LAST_WRITE"], [80, 65, 2, "enum_LAST_READ"], [80, 25, 3, "enum_LAST_WRITE"], [93, 75, 2, "enum_LAST_READ"], [93, 93, 2, "enum_LAST_READ"], [93, 48, 3, "enum_LAST_WRITE"], [88, 52, 2, "enum_LAST_READ"], [88, 17, 3, "enum_LAST_WRITE"], [90, 54, 2, "enum_LAST_READ"], [90, 25, 3, "enum_LAST_WRITE"], [99, 88, 2, "enum_LAST_READ"], [99, 78, 2, "enum_LAST_READ"], [99, 27, 2, "enum_LAST_READ"], [99, 17, 3, "enum_LAST_WRITE"], [17, 19, 4, "enum_COMPUTED_FROM"], [17, 21, 4, "enum_COMPUTED_FROM"], [48, 50, 4, "enum_COMPUTED_FROM"], [48, 52, 4, "enum_COMPUTED_FROM"], [48, 54, 4, "enum_COMPUTED_FROM"], [64, 75, 4, "enum_COMPUTED_FROM"], [89, 93, 4, "enum_COMPUTED_FROM"]], "error_location": 27, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/Yatoom/Optimus.git", "old_path": "vault/decoder.py", "hash": "f33e600b5e873e08cedb864d1c4fb3ecf07e9d93", "code": "def decode_params(params: Dict[str, Any], prefix: str=\"!\", remove_prefixes: bool=True)-> Dict[str, Any]:\n    \"\"\"\n    Check each parameter and if the parameter starts with a given sign, we will assume its value is a list of tuples\n    (source, params) that need to be source decoded and initialized with given parameters.\n    \n    Parameters\n    ----------\n    params: dict\n        A dictionary of parameters\n    prefix: str\n        A prefix that indicates the parameter is special and requires decoding\n    remove_prefixes: bool\n        Indicates if prefixes should be removed from keys\n    Returns\n    -------\n    Returns the new parameters where the key prefixes are removed and its values are decoded  \n    \"\"\"\n\n    # Make a copy\n    params_copy: Dict[str, Any] = copy(params)\n\n    for key in params_copy:\n\n        # Check if key starts with prefix\n        if key[0:len(prefix)] == prefix:\n\n            # Decode value\n            decoded: Any = decode_sources(params_copy[key])\n\n            # Store decoded value\n            if remove_prefixes:\n                params_copy[key[len(prefix):]] = decoded\n                del params_copy[key]\n            else:\n                params_copy[key] = decoded\n\n    return params_copy\n", "rewrite": "ReplaceText(target='params' @(101,15)->(101,26))", "error_line": 21, "has_bug": true, "code_full": "from copy import copy\nfrom typing import Any, Dict\n\n\ndef decode_sources(sources: Any) -> Any:\n    pass\n\ndef decode_params(params: Dict[str, Any], prefix: str=\"!\", remove_prefixes: bool=True)-> Dict[str, Any]:\n    \"\"\"\n    Check each parameter and if the parameter starts with a given sign, we will assume its value is a list of tuples\n    (source, params) that need to be source decoded and initialized with given parameters.\n    \n    Parameters\n    ----------\n    params: dict\n        A dictionary of parameters\n    prefix: str\n        A prefix that indicates the parameter is special and requires decoding\n    remove_prefixes: bool\n        Indicates if prefixes should be removed from keys\n    Returns\n    -------\n    Returns the new parameters where the key prefixes are removed and its values are decoded  \n    \"\"\"\n\n    # Make a copy\n    params_copy: Dict[str, Any] = copy(params)\n\n    for key in params_copy:\n\n        # Check if key starts with prefix\n        if key[0:len(prefix)] == prefix:\n\n            # Decode value\n            decoded: Any = decode_sources(params_copy[key])\n\n            # Store decoded value\n            if remove_prefixes:\n                params_copy[key[len(prefix):]] = decoded\n                del params_copy[key]\n            else:\n                params_copy[key] = decoded\n\n    return params_copy\n", "error_location_char": [796, 807], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def test_output_does_not_contain(", "state", ",", "text", ",", "fixed", "=", "True", ",", "msg", "=", "'Submission output contains \"{}\"'", ")", ":", "#NEWLINE#", "#INDENT#", "\"Test that the output doesn't match.\"", "#NEWLINE#", "if", "fixed", ":", "#NEWLINE#", "#INDENT#", "if", "(", "text", "in", "state", ".", "student_result", ")", ":", "#NEWLINE#", "#INDENT#", "state", ".", "do_test", "(", "msg", ".", "format", "(", "text", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "pat", "=", "re", ".", "compile", "(", "text", ")", "#NEWLINE#", "if", "text", ".", "search", "(", "state", ".", "student_result", ")", ":", "#NEWLINE#", "#INDENT#", "state", ".", "do_test", "(", "msg", ".", "format", "(", "text", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "return", "state"], "edges": [[1, 7, 7, "enum_FIELD"], [16, 17, 7, "enum_FIELD"], [21, 20, 7, "enum_FIELD"], [88, 89, 7, "enum_FIELD"], [24, 27, 7, "enum_FIELD"], [52, 58, 7, "enum_FIELD"], [62, 66, 7, "enum_FIELD"], [27, 26, 7, "enum_FIELD"], [34, 38, 7, "enum_FIELD"], [58, 56, 7, "enum_FIELD"], [66, 64, 7, "enum_FIELD"], [73, 77, 7, "enum_FIELD"], [29, 28, 7, "enum_FIELD"], [38, 36, 7, "enum_FIELD"], [56, 55, 7, "enum_FIELD"], [64, 63, 7, "enum_FIELD"], [68, 67, 7, "enum_FIELD"], [77, 75, 7, "enum_FIELD"], [36, 35, 7, "enum_FIELD"], [42, 40, 7, "enum_FIELD"], [75, 74, 7, "enum_FIELD"], [81, 79, 7, "enum_FIELD"], [40, 39, 7, "enum_FIELD"], [79, 78, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 19, 9, "enum_NEXT_SYNTAX"], [20, 6, 10, "enum_LAST_LEXICAL_USE"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [26, 4, 10, "enum_LAST_LEXICAL_USE"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [28, 2, 10, "enum_LAST_LEXICAL_USE"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 34, 9, "enum_NEXT_SYNTAX"], [35, 28, 10, "enum_LAST_LEXICAL_USE"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [39, 10, 10, "enum_LAST_LEXICAL_USE"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [43, 26, 10, "enum_LAST_LEXICAL_USE"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [59, 43, 10, "enum_LAST_LEXICAL_USE"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 62, 9, "enum_NEXT_SYNTAX"], [63, 59, 10, "enum_LAST_LEXICAL_USE"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [67, 35, 10, "enum_LAST_LEXICAL_USE"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 73, 9, "enum_NEXT_SYNTAX"], [74, 67, 10, "enum_LAST_LEXICAL_USE"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [78, 39, 10, "enum_LAST_LEXICAL_USE"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [82, 63, 10, "enum_LAST_LEXICAL_USE"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 88, 9, "enum_NEXT_SYNTAX"], [89, 74, 10, "enum_LAST_LEXICAL_USE"], [88, 89, 9, "enum_NEXT_SYNTAX"], [8, 12, 1, "enum_CFG_NEXT"], [12, 1, 1, "enum_CFG_NEXT"], [7, 16, 1, "enum_CFG_NEXT"], [16, 20, 1, "enum_CFG_NEXT"], [20, 27, 1, "enum_CFG_NEXT"], [20, 52, 1, "enum_CFG_NEXT"], [27, 34, 1, "enum_CFG_NEXT"], [27, 88, 1, "enum_CFG_NEXT"], [34, 88, 1, "enum_CFG_NEXT"], [52, 66, 1, "enum_CFG_NEXT"], [66, 73, 1, "enum_CFG_NEXT"], [66, 88, 1, "enum_CFG_NEXT"], [73, 88, 1, "enum_CFG_NEXT"], [20, 6, 3, "enum_LAST_WRITE"], [26, 4, 3, "enum_LAST_WRITE"], [28, 2, 3, "enum_LAST_WRITE"], [35, 28, 2, "enum_LAST_READ"], [35, 2, 3, "enum_LAST_WRITE"], [39, 10, 3, "enum_LAST_WRITE"], [43, 26, 2, "enum_LAST_READ"], [43, 4, 3, "enum_LAST_WRITE"], [59, 4, 3, "enum_LAST_WRITE"], [63, 59, 2, "enum_LAST_READ"], [63, 4, 3, "enum_LAST_WRITE"], [67, 2, 3, "enum_LAST_WRITE"], [74, 67, 2, "enum_LAST_READ"], [74, 2, 3, "enum_LAST_WRITE"], [78, 10, 3, "enum_LAST_WRITE"], [82, 63, 2, "enum_LAST_READ"], [82, 4, 3, "enum_LAST_WRITE"], [89, 28, 2, "enum_LAST_READ"], [89, 35, 2, "enum_LAST_READ"], [89, 74, 2, "enum_LAST_READ"], [89, 67, 2, "enum_LAST_READ"], [89, 2, 3, "enum_LAST_WRITE"], [53, 59, 4, "enum_COMPUTED_FROM"], [53, 55, 4, "enum_COMPUTED_FROM"]], "error_location": 63, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/datacamp/shellwhat_ext.git", "old_path": "shellwhat_ext/__init__.py", "hash": "a8cf5633b36c6f11da7cb32b604b2cb1dbf246ad", "code": "def test_output_does_not_contain(state: Any, text: str, fixed: bool=True, msg: str='Submission output contains \"{}\"'):\n    '''Test that the output doesn't match.'''\n\n    if fixed:\n        if text in state.student_result:\n            state.do_test(msg.format(text))\n\n    else:\n        pat: re.Pattern = re.compile(text)\n        if text.search(state.student_result):\n            state.do_test(msg.format(text))\n\n    return state\n", "rewrite": "ReplaceText(target='pat' @(86,11)->(86,15))", "error_line": 9, "has_bug": true, "code_full": "import re\nfrom typing import Any\n\n\ndef test_output_does_not_contain(state: Any, text: str, fixed: bool=True, msg: str='Submission output contains \"{}\"'):\n    '''Test that the output doesn't match.'''\n\n    if fixed:\n        if text in state.student_result:\n            state.do_test(msg.format(text))\n\n    else:\n        pat: re.Pattern = re.compile(text)\n        if text.search(state.student_result):\n            state.do_test(msg.format(text))\n\n    return state\n", "error_location_char": [330, 334], "type_checked_pytype": false, "type_error_label": "attribute-error", "type_checked_mypy": false}
{"source_tokens": ["#NEWLINE#", "def __init__(", "self", ",", "queue_name", ",", "sub_name", "=", "None", ",", "verbose", "=", "10", ")", ":", "#NEWLINE#", "#INDENT#", "assert", "(", "'GOOGLE_APPLICATION_CREDENTIALS'", "in", "os", ".", "environ", ".", "keys", "(", ")", ")", "#NEWLINE#", "self", ".", "client", "=", "pubsub", ".", "Client", "(", ")", "#NEWLINE#", "self", ".", "topic", "=", "self", ".", "client", ".", "topic", "(", "queue_name", ")", "#NEWLINE#", "self", ".", "logger", "=", "logging", ".", "getLogger", "(", "self", ".", "__class__", ".", "__name__", ")", "#NEWLINE#", "self", ".", "logger", ".", "setLevel", "(", "verbose", ")", "#NEWLINE#", "sub_name", "=", "(", "sub_name", "if", "sub_name", "else", "(", "queue_name", "+", "'_sub'", ")", ")", "#NEWLINE#", "self", ".", "logger", ".", "info", "(", "'Topic name = {}'", ".", "format", "(", "queue_name", ")", ")", "#NEWLINE#", "self", ".", "logger", ".", "info", "(", "'Subscription name = {}'", ".", "format", "(", "queue_name", ")", ")", "#NEWLINE#", "if", "(", "queue_name", "not in", "[", "t", ".", "name", "for", "t", "in", "self", ".", "client", ".", "list_topics", "(", ")", "]", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "topic", ".", "create", "(", ")", "#NEWLINE#", "self", ".", "logger", ".", "info", "(", "'topic {} created'", ".", "format", "(", "queue_name", ")", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "subscription", "=", "self", ".", "topic", ".", "subscription", "(", "sub_name", ")", "#NEWLINE#", "if", "(", "sub_name", "not in", "[", "s", ".", "name", "for", "s", "in", "self", ".", "topic", ".", "list_subscriptions", "(", ")", "]", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "subscription", ".", "create", "(", ")", "#NEWLINE#", "self", ".", "logger", ".", "info", "(", "'subscription {} created'", ".", "format", "(", "sub_name", ")", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "messages", "=", "[", "]"], "edges": [[1, 7, 7, "enum_FIELD"], [17, 20, 7, "enum_FIELD"], [29, 37, 7, "enum_FIELD"], [39, 49, 7, "enum_FIELD"], [52, 60, 7, "enum_FIELD"], [67, 73, 7, "enum_FIELD"], [76, 81, 7, "enum_FIELD"], [90, 96, 7, "enum_FIELD"], [104, 110, 7, "enum_FIELD"], [119, 122, 7, "enum_FIELD"], [164, 174, 7, "enum_FIELD"], [178, 181, 7, "enum_FIELD"], [223, 228, 7, "enum_FIELD"], [20, 19, 7, "enum_FIELD"], [31, 30, 7, "enum_FIELD"], [37, 35, 7, "enum_FIELD"], [41, 40, 7, "enum_FIELD"], [49, 47, 7, "enum_FIELD"], [54, 53, 7, "enum_FIELD"], [60, 58, 7, "enum_FIELD"], [73, 71, 7, "enum_FIELD"], [81, 82, 7, "enum_FIELD"], [81, 80, 7, "enum_FIELD"], [81, 86, 7, "enum_FIELD"], [96, 94, 7, "enum_FIELD"], [110, 108, 7, "enum_FIELD"], [122, 121, 7, "enum_FIELD"], [141, 147, 7, "enum_FIELD"], [149, 155, 7, "enum_FIELD"], [166, 165, 7, "enum_FIELD"], [174, 172, 7, "enum_FIELD"], [181, 180, 7, "enum_FIELD"], [200, 206, 7, "enum_FIELD"], [208, 214, 7, "enum_FIELD"], [225, 224, 7, "enum_FIELD"], [26, 24, 7, "enum_FIELD"], [35, 34, 7, "enum_FIELD"], [47, 45, 7, "enum_FIELD"], [58, 57, 7, "enum_FIELD"], [64, 62, 7, "enum_FIELD"], [71, 69, 7, "enum_FIELD"], [86, 85, 7, "enum_FIELD"], [86, 87, 7, "enum_FIELD"], [94, 92, 7, "enum_FIELD"], [100, 98, 7, "enum_FIELD"], [108, 106, 7, "enum_FIELD"], [114, 112, 7, "enum_FIELD"], [123, 125, 7, "enum_FIELD"], [147, 145, 7, "enum_FIELD"], [155, 153, 7, "enum_FIELD"], [172, 170, 7, "enum_FIELD"], [182, 184, 7, "enum_FIELD"], [206, 204, 7, "enum_FIELD"], [214, 212, 7, "enum_FIELD"], [24, 22, 7, "enum_FIELD"], [45, 44, 7, "enum_FIELD"], [62, 61, 7, "enum_FIELD"], [69, 68, 7, "enum_FIELD"], [92, 91, 7, "enum_FIELD"], [98, 97, 7, "enum_FIELD"], [106, 105, 7, "enum_FIELD"], [112, 111, 7, "enum_FIELD"], [125, 124, 7, "enum_FIELD"], [127, 128, 7, "enum_FIELD"], [127, 135, 7, "enum_FIELD"], [145, 143, 7, "enum_FIELD"], [153, 151, 7, "enum_FIELD"], [159, 157, 7, "enum_FIELD"], [170, 169, 7, "enum_FIELD"], [184, 183, 7, "enum_FIELD"], [186, 187, 7, "enum_FIELD"], [186, 194, 7, "enum_FIELD"], [204, 202, 7, "enum_FIELD"], [212, 210, 7, "enum_FIELD"], [218, 216, 7, "enum_FIELD"], [22, 21, 7, "enum_FIELD"], [135, 133, 7, "enum_FIELD"], [143, 142, 7, "enum_FIELD"], [151, 150, 7, "enum_FIELD"], [157, 156, 7, "enum_FIELD"], [194, 192, 7, "enum_FIELD"], [202, 201, 7, "enum_FIELD"], [210, 209, 7, "enum_FIELD"], [216, 215, 7, "enum_FIELD"], [133, 131, 7, "enum_FIELD"], [192, 190, 7, "enum_FIELD"], [131, 130, 7, "enum_FIELD"], [190, 189, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [30, 2, 10, "enum_LAST_LEXICAL_USE"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [40, 30, 10, "enum_LAST_LEXICAL_USE"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [44, 40, 10, "enum_LAST_LEXICAL_USE"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [50, 4, 10, "enum_LAST_LEXICAL_USE"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [53, 44, 10, "enum_LAST_LEXICAL_USE"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [61, 53, 10, "enum_LAST_LEXICAL_USE"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [68, 61, 10, "enum_LAST_LEXICAL_USE"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [74, 10, 10, "enum_LAST_LEXICAL_USE"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [77, 6, 10, "enum_LAST_LEXICAL_USE"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [80, 77, 10, "enum_LAST_LEXICAL_USE"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [82, 80, 10, "enum_LAST_LEXICAL_USE"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [85, 50, 10, "enum_LAST_LEXICAL_USE"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [91, 68, 10, "enum_LAST_LEXICAL_USE"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [101, 85, 10, "enum_LAST_LEXICAL_USE"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [105, 91, 10, "enum_LAST_LEXICAL_USE"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [115, 101, 10, "enum_LAST_LEXICAL_USE"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [121, 115, 10, "enum_LAST_LEXICAL_USE"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [128, 124, 10, "enum_LAST_LEXICAL_USE"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [130, 105, 10, "enum_LAST_LEXICAL_USE"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 141, 9, "enum_NEXT_SYNTAX"], [142, 130, 10, "enum_LAST_LEXICAL_USE"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [150, 142, 10, "enum_LAST_LEXICAL_USE"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [160, 121, 10, "enum_LAST_LEXICAL_USE"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 164, 9, "enum_NEXT_SYNTAX"], [165, 150, 10, "enum_LAST_LEXICAL_USE"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [169, 165, 10, "enum_LAST_LEXICAL_USE"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [175, 82, 10, "enum_LAST_LEXICAL_USE"], [174, 175, 9, "enum_NEXT_SYNTAX"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [180, 175, 10, "enum_LAST_LEXICAL_USE"], [179, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 184, 9, "enum_NEXT_SYNTAX"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [187, 183, 10, "enum_LAST_LEXICAL_USE"], [186, 187, 9, "enum_NEXT_SYNTAX"], [187, 188, 9, "enum_NEXT_SYNTAX"], [189, 169, 10, "enum_LAST_LEXICAL_USE"], [188, 189, 9, "enum_NEXT_SYNTAX"], [189, 190, 9, "enum_NEXT_SYNTAX"], [190, 191, 9, "enum_NEXT_SYNTAX"], [191, 192, 9, "enum_NEXT_SYNTAX"], [192, 193, 9, "enum_NEXT_SYNTAX"], [193, 194, 9, "enum_NEXT_SYNTAX"], [194, 195, 9, "enum_NEXT_SYNTAX"], [195, 196, 9, "enum_NEXT_SYNTAX"], [196, 197, 9, "enum_NEXT_SYNTAX"], [197, 198, 9, "enum_NEXT_SYNTAX"], [198, 200, 9, "enum_NEXT_SYNTAX"], [201, 189, 10, "enum_LAST_LEXICAL_USE"], [200, 201, 9, "enum_NEXT_SYNTAX"], [201, 202, 9, "enum_NEXT_SYNTAX"], [202, 203, 9, "enum_NEXT_SYNTAX"], [203, 204, 9, "enum_NEXT_SYNTAX"], [204, 205, 9, "enum_NEXT_SYNTAX"], [205, 206, 9, "enum_NEXT_SYNTAX"], [206, 207, 9, "enum_NEXT_SYNTAX"], [207, 208, 9, "enum_NEXT_SYNTAX"], [209, 201, 10, "enum_LAST_LEXICAL_USE"], [208, 209, 9, "enum_NEXT_SYNTAX"], [209, 210, 9, "enum_NEXT_SYNTAX"], [210, 211, 9, "enum_NEXT_SYNTAX"], [211, 212, 9, "enum_NEXT_SYNTAX"], [212, 213, 9, "enum_NEXT_SYNTAX"], [213, 214, 9, "enum_NEXT_SYNTAX"], [214, 215, 9, "enum_NEXT_SYNTAX"], [215, 216, 9, "enum_NEXT_SYNTAX"], [216, 217, 9, "enum_NEXT_SYNTAX"], [217, 218, 9, "enum_NEXT_SYNTAX"], [219, 180, 10, "enum_LAST_LEXICAL_USE"], [218, 219, 9, "enum_NEXT_SYNTAX"], [219, 220, 9, "enum_NEXT_SYNTAX"], [220, 221, 9, "enum_NEXT_SYNTAX"], [221, 223, 9, "enum_NEXT_SYNTAX"], [224, 209, 10, "enum_LAST_LEXICAL_USE"], [223, 224, 9, "enum_NEXT_SYNTAX"], [224, 225, 9, "enum_NEXT_SYNTAX"], [225, 226, 9, "enum_NEXT_SYNTAX"], [226, 227, 9, "enum_NEXT_SYNTAX"], [227, 228, 9, "enum_NEXT_SYNTAX"], [228, 229, 9, "enum_NEXT_SYNTAX"], [8, 12, 1, "enum_CFG_NEXT"], [12, 1, 1, "enum_CFG_NEXT"], [7, 17, 1, "enum_CFG_NEXT"], [17, 29, 1, "enum_CFG_NEXT"], [29, 39, 1, "enum_CFG_NEXT"], [39, 52, 1, "enum_CFG_NEXT"], [52, 67, 1, "enum_CFG_NEXT"], [67, 76, 1, "enum_CFG_NEXT"], [76, 90, 1, "enum_CFG_NEXT"], [90, 104, 1, "enum_CFG_NEXT"], [104, 122, 1, "enum_CFG_NEXT"], [122, 164, 1, "enum_CFG_NEXT"], [122, 141, 1, "enum_CFG_NEXT"], [141, 149, 1, "enum_CFG_NEXT"], [149, 164, 1, "enum_CFG_NEXT"], [164, 181, 1, "enum_CFG_NEXT"], [181, 200, 1, "enum_CFG_NEXT"], [181, 223, 1, "enum_CFG_NEXT"], [200, 208, 1, "enum_CFG_NEXT"], [208, 223, 1, "enum_CFG_NEXT"], [30, 2, 3, "enum_LAST_WRITE"], [44, 30, 2, "enum_LAST_READ"], [44, 2, 3, "enum_LAST_WRITE"], [50, 4, 3, "enum_LAST_WRITE"], [40, 44, 2, "enum_LAST_READ"], [40, 2, 3, "enum_LAST_WRITE"], [61, 40, 2, "enum_LAST_READ"], [61, 2, 3, "enum_LAST_WRITE"], [53, 61, 2, "enum_LAST_READ"], [53, 2, 3, "enum_LAST_WRITE"], [68, 53, 2, "enum_LAST_READ"], [68, 2, 3, "enum_LAST_WRITE"], [74, 10, 3, "enum_LAST_WRITE"], [82, 6, 3, "enum_LAST_WRITE"], [80, 82, 2, "enum_LAST_READ"], [80, 6, 3, "enum_LAST_WRITE"], [85, 50, 2, "enum_LAST_READ"], [85, 4, 3, "enum_LAST_WRITE"], [77, 80, 2, "enum_LAST_READ"], [77, 6, 3, "enum_LAST_WRITE"], [91, 68, 2, "enum_LAST_READ"], [91, 2, 3, "enum_LAST_WRITE"], [101, 85, 2, "enum_LAST_READ"], [101, 4, 3, "enum_LAST_WRITE"], [105, 91, 2, "enum_LAST_READ"], [105, 2, 3, "enum_LAST_WRITE"], [115, 101, 2, "enum_LAST_READ"], [115, 4, 3, "enum_LAST_WRITE"], [121, 115, 2, "enum_LAST_READ"], [121, 4, 3, "enum_LAST_WRITE"], [128, 124, 2, "enum_LAST_READ"], [130, 105, 2, "enum_LAST_READ"], [130, 2, 3, "enum_LAST_WRITE"], [142, 130, 2, "enum_LAST_READ"], [142, 2, 3, "enum_LAST_WRITE"], [150, 142, 2, "enum_LAST_READ"], [150, 2, 3, "enum_LAST_WRITE"], [160, 121, 2, "enum_LAST_READ"], [160, 4, 3, "enum_LAST_WRITE"], [169, 130, 2, "enum_LAST_READ"], [169, 150, 2, "enum_LAST_READ"], [169, 2, 3, "enum_LAST_WRITE"], [175, 80, 2, "enum_LAST_READ"], [175, 77, 3, "enum_LAST_WRITE"], [165, 169, 2, "enum_LAST_READ"], [165, 2, 3, "enum_LAST_WRITE"], [180, 175, 2, "enum_LAST_READ"], [180, 77, 3, "enum_LAST_WRITE"], [187, 183, 2, "enum_LAST_READ"], [189, 165, 2, "enum_LAST_READ"], [189, 2, 3, "enum_LAST_WRITE"], [201, 189, 2, "enum_LAST_READ"], [201, 2, 3, "enum_LAST_WRITE"], [209, 201, 2, "enum_LAST_READ"], [209, 2, 3, "enum_LAST_WRITE"], [219, 180, 2, "enum_LAST_READ"], [219, 77, 3, "enum_LAST_WRITE"], [224, 209, 2, "enum_LAST_READ"], [224, 189, 2, "enum_LAST_READ"], [224, 2, 3, "enum_LAST_WRITE"], [31, 34, 4, "enum_COMPUTED_FROM"], [41, 50, 4, "enum_COMPUTED_FROM"], [41, 44, 4, "enum_COMPUTED_FROM"], [54, 57, 4, "enum_COMPUTED_FROM"], [54, 61, 4, "enum_COMPUTED_FROM"], [77, 82, 4, "enum_COMPUTED_FROM"], [77, 80, 4, "enum_COMPUTED_FROM"], [77, 85, 4, "enum_COMPUTED_FROM"], [166, 175, 4, "enum_COMPUTED_FROM"], [166, 169, 4, "enum_COMPUTED_FROM"]], "error_location": 115, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/ilblackdragon/studio.git", "old_path": "studio/pubsub_queue.py", "hash": "c6a526f0966c0bd609904d5edc3d530bee4b21b7", "code": "def __init__(self, queue_name: str, sub_name: Optional[str]=None, verbose: int=10):\n    assert 'GOOGLE_APPLICATION_CREDENTIALS' in os.environ.keys()\n    self.client: pubsub.Client = pubsub.Client()\n    self.topic = self.client.topic(queue_name)\n    self.logger = logging.getLogger(self.__class__.__name__)\n    self.logger.setLevel(verbose)\n    sub_name: str = sub_name if sub_name else queue_name + \"_sub\"\n    self.logger.info(\"Topic name = {}\".format(queue_name))\n    self.logger.info(\"Subscription name = {}\".format(queue_name))\n    if queue_name not in [t.name for t in self.client.list_topics()]:\n        self.topic.create()\n        self.logger.info('topic {} created'.format(queue_name))\n\n    self.subscription = self.topic.subscription(sub_name)\n    if sub_name not in [s.name for s in self.topic.list_subscriptions()]:\n        self.subscription.create()\n        self.logger.info('subscription {} created'.format(sub_name))\n\n    self.messages: list = []\n", "rewrite": "ReplaceText(target='sub_name' @(17,57)->(17,67))", "error_line": 8, "has_bug": true, "code_full": "import logging\nimport os\nfrom typing import Any, Optional\n\nfrom google.cloud import pubsub\n\n\nclass Class:\n    topic: Any\n    subscription: Any\n\n    def __init__(self, queue_name: str, sub_name: Optional[str]=None, verbose: int=10):\n        assert 'GOOGLE_APPLICATION_CREDENTIALS' in os.environ.keys()\n        self.client: pubsub.Client = pubsub.Client()\n        self.topic = self.client.topic(queue_name)\n        self.logger = logging.getLogger(self.__class__.__name__)\n        self.logger.setLevel(verbose)\n        sub_name: str = sub_name if sub_name else queue_name + \"_sub\"\n        self.logger.info(\"Topic name = {}\".format(queue_name))\n        self.logger.info(\"Subscription name = {}\".format(queue_name))\n        if queue_name not in [t.name for t in self.client.list_topics()]:\n            self.topic.create()\n            self.logger.info('topic {} created'.format(queue_name))\n\n        self.subscription = self.topic.subscription(sub_name)\n        if sub_name not in [s.name for s in self.topic.list_subscriptions()]:\n            self.subscription.create()\n            self.logger.info('subscription {} created'.format(sub_name))\n\n        self.messages: list = []\n", "error_location_char": [919, 927], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def _parse_text(", "self", ",", "term", ",", "pos", ")", ":", "#NEWLINE#", "#INDENT#", "end", "=", "(", "pos", "+", "len", "(", "term", ")", ")", "#NEWLINE#", "part", "=", "self", ".", "source", "[", "pos", ":", "end", "]", "#NEWLINE#", "(", "yield", "(", "ParseResult", "(", "part", ",", "end", ")", "if", "(", "part", "==", "term", ")", "else", "ParseFailure", ")", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [10, 15, 7, "enum_FIELD"], [21, 27, 7, "enum_FIELD"], [32, 34, 7, "enum_FIELD"], [15, 14, 7, "enum_FIELD"], [15, 17, 7, "enum_FIELD"], [27, 25, 7, "enum_FIELD"], [27, 29, 7, "enum_FIELD"], [34, 42, 7, "enum_FIELD"], [17, 16, 7, "enum_FIELD"], [25, 24, 7, "enum_FIELD"], [29, 28, 7, "enum_FIELD"], [29, 30, 7, "enum_FIELD"], [42, 45, 7, "enum_FIELD"], [42, 39, 7, "enum_FIELD"], [42, 49, 7, "enum_FIELD"], [45, 44, 7, "enum_FIELD"], [39, 36, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [14, 6, 10, "enum_LAST_LEXICAL_USE"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [18, 4, 10, "enum_LAST_LEXICAL_USE"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [24, 2, 10, "enum_LAST_LEXICAL_USE"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [28, 14, 10, "enum_LAST_LEXICAL_USE"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [30, 11, 10, "enum_LAST_LEXICAL_USE"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [38, 22, 10, "enum_LAST_LEXICAL_USE"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [40, 30, 10, "enum_LAST_LEXICAL_USE"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [44, 38, 10, "enum_LAST_LEXICAL_USE"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [46, 18, 10, "enum_LAST_LEXICAL_USE"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [3, 10, 1, "enum_CFG_NEXT"], [10, 21, 1, "enum_CFG_NEXT"], [21, 32, 1, "enum_CFG_NEXT"], [14, 6, 3, "enum_LAST_WRITE"], [18, 4, 3, "enum_LAST_WRITE"], [24, 2, 3, "enum_LAST_WRITE"], [28, 14, 2, "enum_LAST_READ"], [28, 6, 3, "enum_LAST_WRITE"], [30, 11, 3, "enum_LAST_WRITE"], [44, 22, 3, "enum_LAST_WRITE"], [46, 18, 2, "enum_LAST_READ"], [46, 4, 3, "enum_LAST_WRITE"], [38, 44, 2, "enum_LAST_READ"], [38, 22, 3, "enum_LAST_WRITE"], [40, 30, 2, "enum_LAST_READ"], [40, 11, 3, "enum_LAST_WRITE"], [11, 14, 4, "enum_COMPUTED_FROM"], [11, 16, 4, "enum_COMPUTED_FROM"], [11, 18, 4, "enum_COMPUTED_FROM"], [22, 24, 4, "enum_COMPUTED_FROM"], [22, 28, 4, "enum_COMPUTED_FROM"], [22, 30, 4, "enum_COMPUTED_FROM"]], "error_location": 38, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/jvs/sourcer.git", "old_path": "peg.py", "hash": "f8175948d0ed0721ceb555837439b77246cdd0f9", "code": "def _parse_text(self, term: str, pos: int) -> Generator[Union[ParseResult, type[ParseFailure]], None, None]:\n    end = pos + len(term)\n    part = self.source[pos : end]\n    yield ParseResult(part, end) if part == term else ParseFailure\n", "rewrite": "ReplaceText(target='term' @(344,26)->(344,30))", "error_line": 3, "has_bug": true, "code_full": "from collections import namedtuple\nfrom typing import Generator, Union\n\nParseResult = namedtuple('ParseResult', 'value, pos')\n\nclass ParseFailure:\n    pass\n\nclass Class:\n    source: str\n\n    def _parse_text(self, term: str, pos: int) -> Generator[Union[ParseResult, type[ParseFailure]], None, None]:\n        end = pos + len(term)\n        part = self.source[pos : end]\n        yield ParseResult(part, end) if part == term else ParseFailure\n", "error_location_char": [191, 195], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def test_primary_key_index(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "entry_indexes", "=", "self", ".", "get_sorted_indexes", "(", "Entry", ")", "#NEWLINE#", "if", "(", "BACKEND", "==", "'mysql'", ")", ":", "#NEWLINE#", "#INDENT#", "entry_indexes", ".", "pop", "(", "0", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "assertEqual", "(", "entry_indexes", ",", "[", "(", "'entry_blog_id'", ",", "False", ")", ",", "(", "'entry_pk'", ",", "True", ")", "]", ")", "#NEWLINE#", "user_indexes", "=", "self", ".", "get_sorted_indexes", "(", "User", ")", "#NEWLINE#", "if", "(", "BACKEND", "==", "'mysql'", ")", ":", "#NEWLINE#", "#INDENT#", "entry_indexes", ".", "pop", "(", "0", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "assertEqual", "(", "user_indexes", ",", "[", "(", "'users_active'", ",", "False", ")", ",", "(", "'users_blog_id'", ",", "False", ")", ",", "(", "'users_id'", ",", "True", ")", "]", ")"], "edges": [[6, 12, 7, "enum_FIELD"], [16, 19, 7, "enum_FIELD"], [32, 38, 7, "enum_FIELD"], [53, 59, 7, "enum_FIELD"], [63, 66, 7, "enum_FIELD"], [79, 85, 7, "enum_FIELD"], [12, 10, 7, "enum_FIELD"], [19, 18, 7, "enum_FIELD"], [24, 28, 7, "enum_FIELD"], [38, 34, 7, "enum_FIELD"], [59, 57, 7, "enum_FIELD"], [66, 65, 7, "enum_FIELD"], [71, 75, 7, "enum_FIELD"], [85, 81, 7, "enum_FIELD"], [10, 9, 7, "enum_FIELD"], [28, 26, 7, "enum_FIELD"], [34, 33, 7, "enum_FIELD"], [57, 56, 7, "enum_FIELD"], [75, 73, 7, "enum_FIELD"], [81, 80, 7, "enum_FIELD"], [26, 25, 7, "enum_FIELD"], [73, 72, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [9, 2, 10, "enum_LAST_LEXICAL_USE"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 24, 9, "enum_NEXT_SYNTAX"], [25, 7, 10, "enum_LAST_LEXICAL_USE"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 32, 9, "enum_NEXT_SYNTAX"], [33, 9, 10, "enum_LAST_LEXICAL_USE"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [37, 25, 10, "enum_LAST_LEXICAL_USE"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [56, 33, 10, "enum_LAST_LEXICAL_USE"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [65, 18, 10, "enum_LAST_LEXICAL_USE"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 71, 9, "enum_NEXT_SYNTAX"], [72, 37, 10, "enum_LAST_LEXICAL_USE"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 79, 9, "enum_NEXT_SYNTAX"], [80, 56, 10, "enum_LAST_LEXICAL_USE"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [84, 54, 10, "enum_LAST_LEXICAL_USE"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [6, 19, 1, "enum_CFG_NEXT"], [19, 24, 1, "enum_CFG_NEXT"], [19, 32, 1, "enum_CFG_NEXT"], [24, 32, 1, "enum_CFG_NEXT"], [32, 53, 1, "enum_CFG_NEXT"], [53, 66, 1, "enum_CFG_NEXT"], [66, 71, 1, "enum_CFG_NEXT"], [66, 79, 1, "enum_CFG_NEXT"], [71, 79, 1, "enum_CFG_NEXT"], [9, 2, 3, "enum_LAST_WRITE"], [25, 7, 3, "enum_LAST_WRITE"], [33, 9, 2, "enum_LAST_READ"], [33, 2, 3, "enum_LAST_WRITE"], [37, 25, 2, "enum_LAST_READ"], [37, 7, 3, "enum_LAST_WRITE"], [56, 33, 2, "enum_LAST_READ"], [56, 2, 3, "enum_LAST_WRITE"], [65, 18, 2, "enum_LAST_READ"], [72, 37, 2, "enum_LAST_READ"], [72, 7, 3, "enum_LAST_WRITE"], [80, 56, 2, "enum_LAST_READ"], [80, 2, 3, "enum_LAST_WRITE"], [84, 54, 3, "enum_LAST_WRITE"], [7, 13, 4, "enum_COMPUTED_FROM"], [7, 9, 4, "enum_COMPUTED_FROM"], [54, 60, 4, "enum_COMPUTED_FROM"], [54, 56, 4, "enum_COMPUTED_FROM"]], "error_location": 72, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/311devs/peewee.git", "old_path": "tests.py", "hash": "33b06ced6d60abac3e0342f86a1cb16fc981ab0a", "code": "def test_primary_key_index(self):\n    entry_indexes: List = self.get_sorted_indexes(Entry)\n    if BACKEND == 'mysql':\n        entry_indexes.pop(0)\n    \n    self.assertEqual(entry_indexes, [\n        ('entry_blog_id', False),\n        ('entry_pk', True),\n    ])\n    \n    user_indexes: List = self.get_sorted_indexes(User)\n    if BACKEND == 'mysql':\n        entry_indexes.pop(0)\n    \n    self.assertEqual(user_indexes, [\n        ('users_active', False),\n        ('users_blog_id', False),\n        ('users_id', True),\n    ])\n", "rewrite": "ReplaceText(target='user_indexes' @(1284,12)->(1284,25))", "error_line": 12, "has_bug": true, "code_full": "from typing import Any, List\n\nBACKEND: str = \"\"\nclass Entry:\n    pass\n\nclass User:\n    pass\n\nclass Class:\n    def get_sorted_indexes(self, model: Any) -> List:\n        return []\n    \n    def assertEqual(self, a: Any, b: Any):\n        pass\n    \n    def test_primary_key_index(self):\n        entry_indexes: List = self.get_sorted_indexes(Entry)\n        if BACKEND == 'mysql':\n            entry_indexes.pop(0)\n        \n        self.assertEqual(entry_indexes, [\n            ('entry_blog_id', False),\n            ('entry_pk', True),\n        ])\n        \n        user_indexes: List = self.get_sorted_indexes(User)\n        if BACKEND == 'mysql':\n            entry_indexes.pop(0)\n        \n        self.assertEqual(user_indexes, [\n            ('users_active', False),\n            ('users_blog_id', False),\n            ('users_id', True),\n        ])\n", "error_location_char": [354, 367], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def execute(", "self", ",", "args", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "not", "self", ".", "cfg", ".", "globals", ".", "enable_experimental", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "exception", ".", "ExperimentalFeature", "(", "\"The 'get' command\"", ")", "#NEWLINE#", "#UNINDENT#", "if", "(", "len", "(", "args", ")", "<", "3", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "parser", ".", "error", "(", "(", "'please specify a cluster, remote file or '", "+", "'directory, and a local destination path'", ")", ")", "#NEWLINE#", "#UNINDENT#", "ctag", "=", "args", "[", "0", "]", "#NEWLINE#", "lpath", "=", "args", "[", "(", "-", "1", ")", "]", "#NEWLINE#", "rpaths", "=", "args", "[", "1", ":", "(", "-", "1", ")", "]", "#NEWLINE#", "cl", "=", "self", ".", "cm", ".", "get_cluster", "(", "ctag", ")", "#NEWLINE#", "node", "=", "cl", ".", "get_node_by_alias", "(", "self", ".", "opts", ".", "node", ")", "#NEWLINE#", "if", "self", ".", "opts", ".", "user", ":", "#NEWLINE#", "#INDENT#", "node", ".", "ssh", ".", "switch_user", "(", "self", ".", "opts", ".", "user", ")", "#NEWLINE#", "#UNINDENT#", "for", "rpath", "in", "rpaths", ":", "#NEWLINE#", "#INDENT#", "if", "(", "(", "not", "glob", ".", "has_magic", "(", "rpath", ")", ")", "and", "(", "not", "node", ".", "ssh", ".", "path_exists", "(", "rpath", ")", ")", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "exception", ".", "BaseException", "(", "(", "'Remote file or directory does not exist: %s'", "%", "lpath", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "node", ".", "ssh", ".", "get", "(", "rpaths", ",", "lpath", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [9, 11, 7, "enum_FIELD"], [32, 38, 7, "enum_FIELD"], [57, 61, 7, "enum_FIELD"], [64, 68, 7, "enum_FIELD"], [74, 78, 7, "enum_FIELD"], [86, 94, 7, "enum_FIELD"], [97, 103, 7, "enum_FIELD"], [111, 115, 7, "enum_FIELD"], [136, 135, 7, "enum_FIELD"], [136, 137, 7, "enum_FIELD"], [181, 189, 7, "enum_FIELD"], [11, 17, 7, "enum_FIELD"], [23, 27, 7, "enum_FIELD"], [38, 35, 7, "enum_FIELD"], [43, 49, 7, "enum_FIELD"], [61, 60, 7, "enum_FIELD"], [61, 62, 7, "enum_FIELD"], [68, 67, 7, "enum_FIELD"], [68, 70, 7, "enum_FIELD"], [78, 77, 7, "enum_FIELD"], [78, 80, 7, "enum_FIELD"], [94, 92, 7, "enum_FIELD"], [103, 101, 7, "enum_FIELD"], [115, 113, 7, "enum_FIELD"], [119, 125, 7, "enum_FIELD"], [141, 152, 7, "enum_FIELD"], [189, 185, 7, "enum_FIELD"], [17, 15, 7, "enum_FIELD"], [27, 25, 7, "enum_FIELD"], [35, 34, 7, "enum_FIELD"], [49, 47, 7, "enum_FIELD"], [70, 71, 7, "enum_FIELD"], [80, 79, 7, "enum_FIELD"], [80, 82, 7, "enum_FIELD"], [92, 90, 7, "enum_FIELD"], [101, 100, 7, "enum_FIELD"], [107, 105, 7, "enum_FIELD"], [113, 112, 7, "enum_FIELD"], [125, 123, 7, "enum_FIELD"], [168, 172, 7, "enum_FIELD"], [185, 183, 7, "enum_FIELD"], [15, 13, 7, "enum_FIELD"], [25, 24, 7, "enum_FIELD"], [47, 45, 7, "enum_FIELD"], [52, 51, 7, "enum_FIELD"], [52, 53, 7, "enum_FIELD"], [82, 83, 7, "enum_FIELD"], [90, 89, 7, "enum_FIELD"], [105, 104, 7, "enum_FIELD"], [123, 121, 7, "enum_FIELD"], [129, 127, 7, "enum_FIELD"], [144, 148, 7, "enum_FIELD"], [154, 160, 7, "enum_FIELD"], [172, 170, 7, "enum_FIELD"], [183, 182, 7, "enum_FIELD"], [13, 12, 7, "enum_FIELD"], [45, 44, 7, "enum_FIELD"], [121, 120, 7, "enum_FIELD"], [127, 126, 7, "enum_FIELD"], [148, 146, 7, "enum_FIELD"], [160, 158, 7, "enum_FIELD"], [170, 169, 7, "enum_FIELD"], [175, 174, 7, "enum_FIELD"], [175, 176, 7, "enum_FIELD"], [146, 145, 7, "enum_FIELD"], [158, 156, 7, "enum_FIELD"], [156, 155, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [12, 2, 10, "enum_LAST_LEXICAL_USE"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [36, 4, 10, "enum_LAST_LEXICAL_USE"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 43, 9, "enum_NEXT_SYNTAX"], [44, 12, 10, "enum_LAST_LEXICAL_USE"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [60, 36, 10, "enum_LAST_LEXICAL_USE"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [67, 60, 10, "enum_LAST_LEXICAL_USE"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [77, 67, 10, "enum_LAST_LEXICAL_USE"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [89, 44, 10, "enum_LAST_LEXICAL_USE"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [95, 58, 10, "enum_LAST_LEXICAL_USE"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [100, 87, 10, "enum_LAST_LEXICAL_USE"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [104, 89, 10, "enum_LAST_LEXICAL_USE"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 111, 9, "enum_NEXT_SYNTAX"], [112, 104, 10, "enum_LAST_LEXICAL_USE"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 119, 9, "enum_NEXT_SYNTAX"], [120, 98, 10, "enum_LAST_LEXICAL_USE"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [126, 112, 10, "enum_LAST_LEXICAL_USE"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [137, 75, 10, "enum_LAST_LEXICAL_USE"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [149, 135, 10, "enum_LAST_LEXICAL_USE"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [155, 120, 10, "enum_LAST_LEXICAL_USE"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [161, 149, 10, "enum_LAST_LEXICAL_USE"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 168, 9, "enum_NEXT_SYNTAX"], [169, 24, 10, "enum_LAST_LEXICAL_USE"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [176, 65, 10, "enum_LAST_LEXICAL_USE"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 181, 9, "enum_NEXT_SYNTAX"], [182, 155, 10, "enum_LAST_LEXICAL_USE"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 184, 9, "enum_NEXT_SYNTAX"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [188, 137, 10, "enum_LAST_LEXICAL_USE"], [187, 188, 9, "enum_NEXT_SYNTAX"], [188, 189, 9, "enum_NEXT_SYNTAX"], [190, 176, 10, "enum_LAST_LEXICAL_USE"], [189, 190, 9, "enum_NEXT_SYNTAX"], [190, 191, 9, "enum_NEXT_SYNTAX"], [3, 11, 1, "enum_CFG_NEXT"], [11, 23, 1, "enum_CFG_NEXT"], [11, 38, 1, "enum_CFG_NEXT"], [38, 43, 1, "enum_CFG_NEXT"], [38, 57, 1, "enum_CFG_NEXT"], [43, 57, 1, "enum_CFG_NEXT"], [57, 64, 1, "enum_CFG_NEXT"], [64, 74, 1, "enum_CFG_NEXT"], [74, 86, 1, "enum_CFG_NEXT"], [86, 97, 1, "enum_CFG_NEXT"], [97, 115, 1, "enum_CFG_NEXT"], [115, 137, 1, "enum_CFG_NEXT"], [115, 119, 1, "enum_CFG_NEXT"], [119, 137, 1, "enum_CFG_NEXT"], [137, 135, 1, "enum_CFG_NEXT"], [135, 152, 1, "enum_CFG_NEXT"], [135, 181, 1, "enum_CFG_NEXT"], [152, 168, 1, "enum_CFG_NEXT"], [152, 135, 1, "enum_CFG_NEXT"], [12, 2, 3, "enum_LAST_WRITE"], [36, 4, 3, "enum_LAST_WRITE"], [44, 12, 2, "enum_LAST_READ"], [44, 2, 3, "enum_LAST_WRITE"], [60, 36, 2, "enum_LAST_READ"], [60, 4, 3, "enum_LAST_WRITE"], [67, 60, 2, "enum_LAST_READ"], [67, 4, 3, "enum_LAST_WRITE"], [77, 67, 2, "enum_LAST_READ"], [77, 4, 3, "enum_LAST_WRITE"], [89, 44, 2, "enum_LAST_READ"], [89, 12, 2, "enum_LAST_READ"], [89, 2, 3, "enum_LAST_WRITE"], [95, 58, 3, "enum_LAST_WRITE"], [100, 87, 3, "enum_LAST_WRITE"], [104, 89, 2, "enum_LAST_READ"], [104, 2, 3, "enum_LAST_WRITE"], [112, 104, 2, "enum_LAST_READ"], [112, 2, 3, "enum_LAST_WRITE"], [120, 98, 3, "enum_LAST_WRITE"], [126, 112, 2, "enum_LAST_READ"], [126, 2, 3, "enum_LAST_WRITE"], [137, 75, 3, "enum_LAST_WRITE"], [135, 161, 2, "enum_LAST_READ"], [135, 135, 3, "enum_LAST_WRITE"], [145, 145, 2, "enum_LAST_READ"], [149, 161, 2, "enum_LAST_READ"], [149, 135, 3, "enum_LAST_WRITE"], [155, 155, 2, "enum_LAST_READ"], [155, 120, 2, "enum_LAST_READ"], [155, 98, 3, "enum_LAST_WRITE"], [161, 149, 2, "enum_LAST_READ"], [161, 135, 3, "enum_LAST_WRITE"], [176, 65, 3, "enum_LAST_WRITE"], [182, 155, 2, "enum_LAST_READ"], [182, 120, 2, "enum_LAST_READ"], [182, 98, 3, "enum_LAST_WRITE"], [188, 137, 2, "enum_LAST_READ"], [188, 75, 3, "enum_LAST_WRITE"], [190, 65, 3, "enum_LAST_WRITE"], [58, 60, 4, "enum_COMPUTED_FROM"], [65, 67, 4, "enum_COMPUTED_FROM"], [75, 77, 4, "enum_COMPUTED_FROM"], [87, 95, 4, "enum_COMPUTED_FROM"], [87, 89, 4, "enum_COMPUTED_FROM"], [98, 100, 4, "enum_COMPUTED_FROM"], [98, 104, 4, "enum_COMPUTED_FROM"]], "error_location": 176, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/CI-WATER/TethysCluster.git", "old_path": "starcluster/commands/get.py", "hash": "d21d18ef5e52db0bb7695137520f03469d55afea", "code": "def execute(self, args: List[str]):\n    if not self.cfg.globals.enable_experimental:\n        raise exception.ExperimentalFeature(\"The 'get' command\")\n    if len(args) < 3:\n        self.parser.error(\"please specify a cluster, remote file or \" +\n                        \"directory, and a local destination path\")\n    ctag: str = args[0]\n    lpath: str = args[-1]\n    rpaths: List[str] = args[1:-1]\n    cl: Any = self.cm.get_cluster(ctag)\n    node: Any = cl.get_node_by_alias(self.opts.node)\n    if self.opts.user:\n        node.ssh.switch_user(self.opts.user)\n    for rpath in rpaths:\n        if not glob.has_magic(rpath) and not node.ssh.path_exists(rpath):\n            raise exception.BaseException(\n                \"Remote file or directory does not exist: %s\" % lpath)\n    node.ssh.get(rpaths, lpath)\n", "rewrite": "ReplaceText(target='rpath' @(52,68)->(52,73))", "error_line": 16, "has_bug": true, "code_full": "import glob\nfrom typing import Any, List\n\nfrom starcluster import exception\n\n\nclass Class:\n    cfg: Any\n    parser: Any\n    cm: Any\n    opts: Any\n\n    def execute(self, args: List[str]):\n        if not self.cfg.globals.enable_experimental:\n            raise exception.ExperimentalFeature(\"The 'get' command\")\n        if len(args) < 3:\n            self.parser.error(\"please specify a cluster, remote file or \" +\n                            \"directory, and a local destination path\")\n        ctag: str = args[0]\n        lpath: str = args[-1]\n        rpaths: List[str] = args[1:-1]\n        cl: Any = self.cm.get_cluster(ctag)\n        node: Any = cl.get_node_by_alias(self.opts.node)\n        if self.opts.user:\n            node.ssh.switch_user(self.opts.user)\n        for rpath in rpaths:\n            if not glob.has_magic(rpath) and not node.ssh.path_exists(rpath):\n                raise exception.BaseException(\n                    \"Remote file or directory does not exist: %s\" % lpath)\n        node.ssh.get(rpaths, lpath)\n", "error_location_char": [763, 768], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def _config_parse(", "config_file", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "config_file", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "configs", "=", "ConfigParse", "(", ")", "#NEWLINE#", "configs", ".", "read", "(", "config_file", ")", "#NEWLINE#", "dwh_schema", "=", "dict", "(", "configs", ".", "items", "(", "'dwh_schema'", ")", ")", "#NEWLINE#", "#UNINDENT#", "except", "FileNotFoundError", ":", "#NEWLINE#", "#INDENT#", "logger", ".", "error", "(", "f", "'{config_file} does not exist.'", ")", "#NEWLINE#", "sys", ".", "exit", "(", "1", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "dwh_config", "=", "{", "'username'", ":", "os", ".", "getenv", "(", "'DB_USERNAME'", ")", ",", "'password'", ":", "os", ".", "getenv", "(", "'DB_PASSWORD'", ")", ",", "'hostname'", ":", "os", ".", "getenv", "(", "'DB_HOSTNAME'", ")", ",", "'port'", ":", "os", ".", "getenv", "(", "'DB_PORT'", ")", ",", "'database'", ":", "os", ".", "getenv", "(", "'DATABASE'", ")", "}", "#NEWLINE#", "#UNINDENT#", "return", "config_file"], "edges": [[13, 10, 7, "enum_FIELD"], [122, 123, 7, "enum_FIELD"], [10, 9, 7, "enum_FIELD"], [71, 94, 7, "enum_FIELD"], [19, 23, 7, "enum_FIELD"], [25, 29, 7, "enum_FIELD"], [32, 36, 7, "enum_FIELD"], [46, 47, 7, "enum_FIELD"], [23, 22, 7, "enum_FIELD"], [29, 27, 7, "enum_FIELD"], [36, 35, 7, "enum_FIELD"], [50, 54, 7, "enum_FIELD"], [58, 62, 7, "enum_FIELD"], [80, 78, 7, "enum_FIELD"], [89, 87, 7, "enum_FIELD"], [98, 96, 7, "enum_FIELD"], [107, 105, 7, "enum_FIELD"], [116, 114, 7, "enum_FIELD"], [27, 26, 7, "enum_FIELD"], [40, 38, 7, "enum_FIELD"], [54, 52, 7, "enum_FIELD"], [62, 60, 7, "enum_FIELD"], [78, 77, 7, "enum_FIELD"], [87, 86, 7, "enum_FIELD"], [96, 95, 7, "enum_FIELD"], [105, 104, 7, "enum_FIELD"], [114, 113, 7, "enum_FIELD"], [38, 37, 7, "enum_FIELD"], [52, 51, 7, "enum_FIELD"], [60, 59, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [9, 2, 10, "enum_LAST_LEXICAL_USE"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [26, 20, 10, "enum_LAST_LEXICAL_USE"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [30, 9, 10, "enum_LAST_LEXICAL_USE"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [37, 26, 10, "enum_LAST_LEXICAL_USE"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [86, 77, 10, "enum_LAST_LEXICAL_USE"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [95, 86, 10, "enum_LAST_LEXICAL_USE"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [104, 95, 10, "enum_LAST_LEXICAL_USE"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [113, 104, 10, "enum_LAST_LEXICAL_USE"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 122, 9, "enum_NEXT_SYNTAX"], [123, 30, 10, "enum_LAST_LEXICAL_USE"], [122, 123, 9, "enum_NEXT_SYNTAX"], [10, 71, 1, "enum_CFG_NEXT"], [10, 19, 1, "enum_CFG_NEXT"], [19, 25, 1, "enum_CFG_NEXT"], [25, 32, 1, "enum_CFG_NEXT"], [32, 122, 1, "enum_CFG_NEXT"], [32, 47, 1, "enum_CFG_NEXT"], [47, 50, 1, "enum_CFG_NEXT"], [50, 58, 1, "enum_CFG_NEXT"], [58, 122, 1, "enum_CFG_NEXT"], [71, 122, 1, "enum_CFG_NEXT"], [9, 2, 3, "enum_LAST_WRITE"], [26, 20, 3, "enum_LAST_WRITE"], [30, 9, 2, "enum_LAST_READ"], [30, 2, 3, "enum_LAST_WRITE"], [37, 26, 2, "enum_LAST_READ"], [37, 20, 3, "enum_LAST_WRITE"], [86, 77, 2, "enum_LAST_READ"], [95, 86, 2, "enum_LAST_READ"], [104, 95, 2, "enum_LAST_READ"], [113, 104, 2, "enum_LAST_READ"], [123, 9, 2, "enum_LAST_READ"], [123, 30, 2, "enum_LAST_READ"], [123, 2, 3, "enum_LAST_WRITE"], [72, 77, 4, "enum_COMPUTED_FROM"], [72, 86, 4, "enum_COMPUTED_FROM"], [72, 95, 4, "enum_COMPUTED_FROM"], [72, 104, 4, "enum_COMPUTED_FROM"], [72, 113, 4, "enum_COMPUTED_FROM"], [20, 22, 4, "enum_COMPUTED_FROM"], [33, 35, 4, "enum_COMPUTED_FROM"], [33, 37, 4, "enum_COMPUTED_FROM"]], "error_location": 123, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/chie8842/mldatautils.git", "old_path": "mldatautils/db_utils.py", "hash": "ccc35e5d07c30e7ec685bfe305ad5e2623015147", "code": "def _config_parse(config_file: Optional[str]) -> Dict:\n    if config_file is not None:\n        try:\n            configs = ConfigParse()\n            configs.read(config_file)\n            dwh_schema: Dict = dict(configs.items('dwh_schema'))\n        except FileNotFoundError:\n            logger.error(f'{config_file} does not exist.')\n            sys.exit(1)\n    else:\n        dwh_config = {\n            'username': os.getenv('DB_USERNAME'),\n            'password': os.getenv('DB_PASSWORD'),\n            'hostname': os.getenv('DB_HOSTNAME'),\n            'port': os.getenv('DB_PORT'),\n            'database': os.getenv('DATABASE'),\n        }\n    return config_file\n", "rewrite": "ReplaceText(target='dwh_config' @(23,11)->(23,22))", "error_line": 17, "has_bug": true, "code_full": "import logging\nimport os\nimport sys\nfrom configparser import ConfigParser as ConfigParse\nfrom typing import Dict, Optional\n\nlogger = logging.getLogger(__name__)\n\ndef _config_parse(config_file: Optional[str]) -> Dict:\n    if config_file is not None:\n        try:\n            configs = ConfigParse()\n            configs.read(config_file)\n            dwh_schema: Dict = dict(configs.items('dwh_schema'))\n        except FileNotFoundError:\n            logger.error(f'{config_file} does not exist.')\n            sys.exit(1)\n    else:\n        dwh_config = {\n            'username': os.getenv('DB_USERNAME'),\n            'password': os.getenv('DB_PASSWORD'),\n            'hostname': os.getenv('DB_HOSTNAME'),\n            'port': os.getenv('DB_PORT'),\n            'database': os.getenv('DATABASE'),\n        }\n    return config_file\n", "error_location_char": [649, 660], "type_checked_pytype": false, "type_error_label": "bad-return-type", "type_checked_mypy": false}
{"source_tokens": ["#NEWLINE#", "def get_output(", "self", ",", "train", ")", ":", "#NEWLINE#", "#INDENT#", "X", "=", "self", ".", "get_input", "(", "train", ")", "#NEWLINE#", "X", "=", "X", ".", "dimshuffle", "(", "(", "1", ",", "0", ",", "2", ")", ")", "#NEWLINE#", "x", "=", "(", "T", ".", "dot", "(", "X", ",", "self", ".", "W", ")", "+", "self", ".", "b", ")", "#NEWLINE#", "mask", "=", "(", "T", ".", "neq", "(", "x", ",", "self", ".", "mask_val", ")", ".", "sum", "(", "axis", "=", "2", ")", ">", "0", ")", "#NEWLINE#", "mask", "=", "T", ".", "addbroadcast", "(", "mask", "[", "(", ":", ",", ":", ",", "np", ".", "newaxis", ")", "]", ",", "2", ")", "#NEWLINE#", "mask_tm1", "=", "alloc_zeros_matrix", "(", "*", "mask", ".", "shape", ")", "#NEWLINE#", "mask_tm1", "=", "T", ".", "addbroadcast", "(", "T", ".", "set_subtensor", "(", "mask", "[", "(", "1", ":", ",", ":", ",", ":", ")", "]", ",", "mask", "[", "(", ":", "(", "-", "1", ")", ",", ":", ",", ":", ")", "]", ")", ",", "2", ")", "#NEWLINE#", "(", "outputs", ",", "updates", ")", "=", "theano", ".", "scan", "(", "self", ".", "_step", ",", "sequences", "=", "[", "x", ",", "mask", ",", "mask_tm1", "]", ",", "outputs_info", "=", "T", ".", "unbroadcast", "(", "alloc_zeros_matrix", "(", "X", ".", "shape", "[", "1", "]", ",", "self", ".", "output_dim", ")", ",", "1", ")", ",", "non_sequences", "=", "self", ".", "U", ",", "truncate_gradient", "=", "self", ".", "truncate_gradient", ")", "#NEWLINE#", "if", "self", ".", "return_sequences", ":", "#NEWLINE#", "#INDENT#", "return", "outputs", ".", "dimshuffle", "(", "(", "1", ",", "0", ",", "2", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "outputs", "[", "(", "-", "1", ")", "]"], "edges": [[1, 3, 7, "enum_FIELD"], [8, 14, 7, "enum_FIELD"], [17, 23, 7, "enum_FIELD"], [32, 46, 7, "enum_FIELD"], [51, 72, 7, "enum_FIELD"], [75, 94, 7, "enum_FIELD"], [97, 101, 7, "enum_FIELD"], [107, 145, 7, "enum_FIELD"], [148, 172, 7, "enum_FIELD"], [209, 211, 7, "enum_FIELD"], [231, 233, 7, "enum_FIELD"], [14, 12, 7, "enum_FIELD"], [23, 21, 7, "enum_FIELD"], [46, 41, 7, "enum_FIELD"], [46, 48, 7, "enum_FIELD"], [72, 67, 7, "enum_FIELD"], [94, 79, 7, "enum_FIELD"], [101, 100, 7, "enum_FIELD"], [145, 111, 7, "enum_FIELD"], [172, 156, 7, "enum_FIELD"], [211, 210, 7, "enum_FIELD"], [216, 220, 7, "enum_FIELD"], [233, 232, 7, "enum_FIELD"], [233, 235, 7, "enum_FIELD"], [12, 11, 7, "enum_FIELD"], [21, 20, 7, "enum_FIELD"], [41, 37, 7, "enum_FIELD"], [48, 47, 7, "enum_FIELD"], [67, 65, 7, "enum_FIELD"], [79, 78, 7, "enum_FIELD"], [83, 82, 7, "enum_FIELD"], [83, 86, 7, "enum_FIELD"], [102, 104, 7, "enum_FIELD"], [111, 110, 7, "enum_FIELD"], [129, 115, 7, "enum_FIELD"], [156, 155, 7, "enum_FIELD"], [160, 159, 7, "enum_FIELD"], [163, 167, 7, "enum_FIELD"], [173, 192, 7, "enum_FIELD"], [196, 199, 7, "enum_FIELD"], [202, 205, 7, "enum_FIELD"], [220, 218, 7, "enum_FIELD"], [235, 236, 7, "enum_FIELD"], [37, 36, 7, "enum_FIELD"], [43, 42, 7, "enum_FIELD"], [65, 60, 7, "enum_FIELD"], [68, 70, 7, "enum_FIELD"], [104, 103, 7, "enum_FIELD"], [115, 114, 7, "enum_FIELD"], [119, 118, 7, "enum_FIELD"], [119, 123, 7, "enum_FIELD"], [131, 130, 7, "enum_FIELD"], [131, 138, 7, "enum_FIELD"], [192, 176, 7, "enum_FIELD"], [199, 198, 7, "enum_FIELD"], [205, 204, 7, "enum_FIELD"], [218, 217, 7, "enum_FIELD"], [60, 56, 7, "enum_FIELD"], [90, 89, 7, "enum_FIELD"], [176, 175, 7, "enum_FIELD"], [187, 179, 7, "enum_FIELD"], [56, 55, 7, "enum_FIELD"], [62, 61, 7, "enum_FIELD"], [122, 121, 7, "enum_FIELD"], [133, 135, 7, "enum_FIELD"], [184, 182, 7, "enum_FIELD"], [184, 185, 7, "enum_FIELD"], [189, 188, 7, "enum_FIELD"], [135, 136, 7, "enum_FIELD"], [182, 181, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [11, 2, 10, "enum_LAST_LEXICAL_USE"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [15, 4, 10, "enum_LAST_LEXICAL_USE"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [18, 9, 10, "enum_LAST_LEXICAL_USE"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [20, 18, 10, "enum_LAST_LEXICAL_USE"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [40, 20, 10, "enum_LAST_LEXICAL_USE"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [42, 11, 10, "enum_LAST_LEXICAL_USE"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [47, 42, 10, "enum_LAST_LEXICAL_USE"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [55, 36, 10, "enum_LAST_LEXICAL_USE"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [59, 33, 10, "enum_LAST_LEXICAL_USE"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [61, 47, 10, "enum_LAST_LEXICAL_USE"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [76, 52, 10, "enum_LAST_LEXICAL_USE"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [78, 55, 10, "enum_LAST_LEXICAL_USE"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [82, 76, 10, "enum_LAST_LEXICAL_USE"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [103, 82, 10, "enum_LAST_LEXICAL_USE"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [108, 98, 10, "enum_LAST_LEXICAL_USE"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [110, 78, 10, "enum_LAST_LEXICAL_USE"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [114, 110, 10, "enum_LAST_LEXICAL_USE"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [118, 103, 10, "enum_LAST_LEXICAL_USE"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [130, 118, 10, "enum_LAST_LEXICAL_USE"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [159, 61, 10, "enum_LAST_LEXICAL_USE"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [166, 59, 10, "enum_LAST_LEXICAL_USE"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [168, 130, 10, "enum_LAST_LEXICAL_USE"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [170, 108, 10, "enum_LAST_LEXICAL_USE"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [175, 114, 10, "enum_LAST_LEXICAL_USE"], [174, 175, 9, "enum_NEXT_SYNTAX"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 178, 9, "enum_NEXT_SYNTAX"], [179, 100, 10, "enum_LAST_LEXICAL_USE"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 180, 9, "enum_NEXT_SYNTAX"], [181, 40, 10, "enum_LAST_LEXICAL_USE"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 184, 9, "enum_NEXT_SYNTAX"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [188, 159, 10, "enum_LAST_LEXICAL_USE"], [187, 188, 9, "enum_NEXT_SYNTAX"], [188, 189, 9, "enum_NEXT_SYNTAX"], [189, 190, 9, "enum_NEXT_SYNTAX"], [190, 191, 9, "enum_NEXT_SYNTAX"], [191, 192, 9, "enum_NEXT_SYNTAX"], [192, 193, 9, "enum_NEXT_SYNTAX"], [193, 194, 9, "enum_NEXT_SYNTAX"], [194, 195, 9, "enum_NEXT_SYNTAX"], [195, 196, 9, "enum_NEXT_SYNTAX"], [196, 197, 9, "enum_NEXT_SYNTAX"], [198, 188, 10, "enum_LAST_LEXICAL_USE"], [197, 198, 9, "enum_NEXT_SYNTAX"], [198, 199, 9, "enum_NEXT_SYNTAX"], [199, 200, 9, "enum_NEXT_SYNTAX"], [200, 201, 9, "enum_NEXT_SYNTAX"], [201, 202, 9, "enum_NEXT_SYNTAX"], [202, 203, 9, "enum_NEXT_SYNTAX"], [204, 198, 10, "enum_LAST_LEXICAL_USE"], [203, 204, 9, "enum_NEXT_SYNTAX"], [204, 205, 9, "enum_NEXT_SYNTAX"], [205, 206, 9, "enum_NEXT_SYNTAX"], [206, 207, 9, "enum_NEXT_SYNTAX"], [207, 209, 9, "enum_NEXT_SYNTAX"], [210, 204, 10, "enum_LAST_LEXICAL_USE"], [209, 210, 9, "enum_NEXT_SYNTAX"], [210, 211, 9, "enum_NEXT_SYNTAX"], [211, 212, 9, "enum_NEXT_SYNTAX"], [212, 213, 9, "enum_NEXT_SYNTAX"], [213, 216, 9, "enum_NEXT_SYNTAX"], [217, 150, 10, "enum_LAST_LEXICAL_USE"], [216, 217, 9, "enum_NEXT_SYNTAX"], [217, 218, 9, "enum_NEXT_SYNTAX"], [218, 219, 9, "enum_NEXT_SYNTAX"], [219, 220, 9, "enum_NEXT_SYNTAX"], [220, 221, 9, "enum_NEXT_SYNTAX"], [221, 222, 9, "enum_NEXT_SYNTAX"], [222, 223, 9, "enum_NEXT_SYNTAX"], [223, 224, 9, "enum_NEXT_SYNTAX"], [224, 225, 9, "enum_NEXT_SYNTAX"], [225, 226, 9, "enum_NEXT_SYNTAX"], [226, 227, 9, "enum_NEXT_SYNTAX"], [227, 228, 9, "enum_NEXT_SYNTAX"], [228, 231, 9, "enum_NEXT_SYNTAX"], [232, 217, 10, "enum_LAST_LEXICAL_USE"], [231, 232, 9, "enum_NEXT_SYNTAX"], [232, 233, 9, "enum_NEXT_SYNTAX"], [233, 234, 9, "enum_NEXT_SYNTAX"], [234, 235, 9, "enum_NEXT_SYNTAX"], [235, 236, 9, "enum_NEXT_SYNTAX"], [236, 237, 9, "enum_NEXT_SYNTAX"], [237, 238, 9, "enum_NEXT_SYNTAX"], [3, 8, 1, "enum_CFG_NEXT"], [8, 17, 1, "enum_CFG_NEXT"], [17, 32, 1, "enum_CFG_NEXT"], [32, 51, 1, "enum_CFG_NEXT"], [51, 75, 1, "enum_CFG_NEXT"], [75, 97, 1, "enum_CFG_NEXT"], [97, 107, 1, "enum_CFG_NEXT"], [107, 148, 1, "enum_CFG_NEXT"], [148, 211, 1, "enum_CFG_NEXT"], [211, 216, 1, "enum_CFG_NEXT"], [211, 231, 1, "enum_CFG_NEXT"], [11, 2, 3, "enum_LAST_WRITE"], [15, 4, 3, "enum_LAST_WRITE"], [20, 9, 3, "enum_LAST_WRITE"], [18, 20, 2, "enum_LAST_READ"], [18, 9, 3, "enum_LAST_WRITE"], [40, 20, 2, "enum_LAST_READ"], [40, 18, 3, "enum_LAST_WRITE"], [42, 11, 2, "enum_LAST_READ"], [42, 2, 3, "enum_LAST_WRITE"], [47, 42, 2, "enum_LAST_READ"], [47, 2, 3, "enum_LAST_WRITE"], [55, 36, 2, "enum_LAST_READ"], [59, 33, 3, "enum_LAST_WRITE"], [61, 47, 2, "enum_LAST_READ"], [61, 2, 3, "enum_LAST_WRITE"], [78, 55, 2, "enum_LAST_READ"], [82, 52, 3, "enum_LAST_WRITE"], [76, 82, 2, "enum_LAST_READ"], [76, 52, 3, "enum_LAST_WRITE"], [103, 82, 2, "enum_LAST_READ"], [103, 76, 3, "enum_LAST_WRITE"], [110, 78, 2, "enum_LAST_READ"], [114, 110, 2, "enum_LAST_READ"], [118, 103, 2, "enum_LAST_READ"], [118, 76, 3, "enum_LAST_WRITE"], [130, 118, 2, "enum_LAST_READ"], [130, 76, 3, "enum_LAST_WRITE"], [108, 98, 3, "enum_LAST_WRITE"], [159, 61, 2, "enum_LAST_READ"], [159, 2, 3, "enum_LAST_WRITE"], [166, 59, 2, "enum_LAST_READ"], [166, 33, 3, "enum_LAST_WRITE"], [168, 130, 2, "enum_LAST_READ"], [168, 76, 3, "enum_LAST_WRITE"], [170, 108, 3, "enum_LAST_WRITE"], [175, 114, 2, "enum_LAST_READ"], [179, 100, 2, "enum_LAST_READ"], [181, 40, 2, "enum_LAST_READ"], [181, 18, 3, "enum_LAST_WRITE"], [188, 159, 2, "enum_LAST_READ"], [188, 2, 3, "enum_LAST_WRITE"], [198, 188, 2, "enum_LAST_READ"], [198, 2, 3, "enum_LAST_WRITE"], [204, 198, 2, "enum_LAST_READ"], [204, 2, 3, "enum_LAST_WRITE"], [210, 204, 2, "enum_LAST_READ"], [210, 2, 3, "enum_LAST_WRITE"], [217, 150, 3, "enum_LAST_WRITE"], [232, 150, 3, "enum_LAST_WRITE"], [9, 15, 4, "enum_COMPUTED_FROM"], [9, 11, 4, "enum_COMPUTED_FROM"], [18, 20, 4, "enum_COMPUTED_FROM"], [33, 40, 4, "enum_COMPUTED_FROM"], [33, 47, 4, "enum_COMPUTED_FROM"], [33, 36, 4, "enum_COMPUTED_FROM"], [33, 42, 4, "enum_COMPUTED_FROM"], [52, 59, 4, "enum_COMPUTED_FROM"], [52, 55, 4, "enum_COMPUTED_FROM"], [52, 61, 4, "enum_COMPUTED_FROM"], [76, 78, 4, "enum_COMPUTED_FROM"], [76, 82, 4, "enum_COMPUTED_FROM"], [76, 89, 4, "enum_COMPUTED_FROM"], [98, 100, 4, "enum_COMPUTED_FROM"], [98, 103, 4, "enum_COMPUTED_FROM"], [108, 110, 4, "enum_COMPUTED_FROM"], [108, 114, 4, "enum_COMPUTED_FROM"], [108, 118, 4, "enum_COMPUTED_FROM"], [108, 130, 4, "enum_COMPUTED_FROM"], [151, 155, 4, "enum_COMPUTED_FROM"], [151, 159, 4, "enum_COMPUTED_FROM"], [151, 166, 4, "enum_COMPUTED_FROM"], [151, 168, 4, "enum_COMPUTED_FROM"], [151, 170, 4, "enum_COMPUTED_FROM"], [151, 198, 4, "enum_COMPUTED_FROM"], [151, 204, 4, "enum_COMPUTED_FROM"], [151, 175, 4, "enum_COMPUTED_FROM"], [151, 179, 4, "enum_COMPUTED_FROM"], [151, 188, 4, "enum_COMPUTED_FROM"], [151, 181, 4, "enum_COMPUTED_FROM"]], "error_location": 118, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/dmlc/keras.git", "old_path": "keras/layers/recurrent.py", "hash": "e3695591704a21c6d0d6236c11c1bad7de4e314c", "code": "def get_output(self, train: Any) -> theano.tensor.TensorType:\n    X: theano.tensor.TensorType = self.get_input(train) # shape: (nb_samples, time (padded with zeros at the end), input_dim)\n    # new shape: (time, nb_samples, input_dim) -> because theano.scan iterates over main dimension\n    X = X.dimshuffle((1,0,2)) \n\n    x: theano.tensor.TensorType = T.dot(X, self.W) + self.b\n\n    mask: theano.tensor.TensorType = T.neq(x, self.mask_val).sum(axis=2) > 0 # (time, nb_samples) matrix with a 1 for every unmasked entry\n    mask = T.addbroadcast(mask[:, :, np.newaxis], 2)\n\n    mask_tm1: theano.tensor.TensorType = alloc_zeros_matrix(*mask.shape)\n    mask_tm1 = T.addbroadcast(T.set_subtensor(mask[1:, :, :], mask[:-1, :, :]), 2)\n    \n    # scan = theano symbolic loop.\n    # See: http://deeplearning.net/software/theano/library/scan.html\n    # Iterate over the first dimension of the x array (=time).\n    outputs, updates = theano.scan(\n        self._step, # this will be called with arguments (sequences[i], outputs[i-1], non_sequences[i])\n        sequences=[x, mask, mask_tm1], # tensors to iterate over, inputs to _step\n        # initialization of the output. Input to _step with default tap=-1.\n        outputs_info=T.unbroadcast(alloc_zeros_matrix(X.shape[1], self.output_dim), 1),\n        non_sequences=self.U, # static inputs to _step\n        truncate_gradient=self.truncate_gradient\n    )\n    if self.return_sequences:\n        return outputs.dimshuffle((1,0,2))\n    return outputs[-1]\n", "rewrite": "ReplaceText(target='mask_tm1' @(61,50)->(61,54))", "error_line": 11, "has_bug": true, "code_full": "from typing import Any, Tuple\n\nimport numpy as np\nimport theano\nimport theano.tensor as T\n\n\ndef alloc_zeros_matrix(*shape: Any) -> theano.tensor.TensorType:\n    pass\n\nclass Class:\n    W: theano.tensor.TensorType\n    b: theano.tensor.TensorType\n    mask_val: float\n    output_dim: int\n    U: theano.tensor.TensorType\n    truncate_gradient: int\n    return_sequences: bool\n    \n    def get_input(self, train: Any) -> theano.tensor.TensorType:\n        return T.tensor3()\n\n    def _step(self, x_t: theano.tensor.TensorType, mask_t: theano.tensor.TensorType, mask_tm1_t: theano.tensor.TensorType,\n              *non_sequences) -> theano.tensor.TensorType:\n        return T.tensor3()\n\n    def get_output(self, train: Any) -> theano.tensor.TensorType:\n        X: theano.tensor.TensorType = self.get_input(train) # shape: (nb_samples, time (padded with zeros at the end), input_dim)\n        # new shape: (time, nb_samples, input_dim) -> because theano.scan iterates over main dimension\n        X = X.dimshuffle((1,0,2)) \n\n        x: theano.tensor.TensorType = T.dot(X, self.W) + self.b\n\n        mask: theano.tensor.TensorType = T.neq(x, self.mask_val).sum(axis=2) > 0 # (time, nb_samples) matrix with a 1 for every unmasked entry\n        mask = T.addbroadcast(mask[:, :, np.newaxis], 2)\n\n        mask_tm1: theano.tensor.TensorType = alloc_zeros_matrix(*mask.shape)\n        mask_tm1 = T.addbroadcast(T.set_subtensor(mask[1:, :, :], mask[:-1, :, :]), 2)\n        \n        # scan = theano symbolic loop.\n        # See: http://deeplearning.net/software/theano/library/scan.html\n        # Iterate over the first dimension of the x array (=time).\n        outputs, updates = theano.scan(\n            self._step, # this will be called with arguments (sequences[i], outputs[i-1], non_sequences[i])\n            sequences=[x, mask, mask_tm1], # tensors to iterate over, inputs to _step\n            # initialization of the output. Input to _step with default tap=-1.\n            outputs_info=T.unbroadcast(alloc_zeros_matrix(X.shape[1], self.output_dim), 1),\n            non_sequences=self.U, # static inputs to _step\n            truncate_gradient=self.truncate_gradient\n        )\n        if self.return_sequences:\n            return outputs.dimshuffle((1,0,2))\n        return outputs[-1]\n", "error_location_char": [692, 696], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def test_multiple_subparsers(", ")", ":", "#NEWLINE#", "#INDENT#", "bp", "=", "blargparse", ".", "BlargParser", "(", ")", "#NEWLINE#", "sps", "=", "bp", ".", "add_subparsers", "(", "dest", "=", "'command'", ")", "#NEWLINE#", "a", "=", "sps", ".", "add_parser", "(", "'a'", ")", "#NEWLINE#", "a", ".", "add_argument", "(", "'--aaa'", ",", "'-a'", ")", "#NEWLINE#", "a", ".", "add_aggregate", "(", "'AAA'", ",", "(", "lambda", "args", ":", "args", ".", "aaa", ".", "upper", "(", ")", ")", ")", "#NEWLINE#", "b", "=", "sps", ".", "add_parser", "(", "'b'", ")", "#NEWLINE#", "b", ".", "add_argument", "(", "'--bbb'", ",", "'-b'", ")", "#NEWLINE#", "a", ".", "add_aggregate", "(", "'BBB'", ",", "(", "lambda", "args", ":", "args", ".", "bbb", ".", "upper", "(", ")", ")", ")", "#NEWLINE#", "assert", "(", "bp", ".", "parse_args", "(", "[", "]", ")", "==", "argparse", ".", "Namespace", "(", "command", "=", "None", ")", ")", "#NEWLINE#", "assert", "(", "bp", ".", "parse_args", "(", "[", "'a'", ",", "'--aaa'", ",", "'tom'", "]", ")", "==", "argparse", ".", "Namespace", "(", "command", "=", "None", ",", "aaa", "=", "'tom'", ",", "AAA", "=", "'TOM'", ")", ")"], "edges": [[5, 11, 7, "enum_FIELD"], [13, 19, 7, "enum_FIELD"], [24, 30, 7, "enum_FIELD"], [33, 39, 7, "enum_FIELD"], [42, 48, 7, "enum_FIELD"], [62, 68, 7, "enum_FIELD"], [71, 77, 7, "enum_FIELD"], [80, 86, 7, "enum_FIELD"], [101, 110, 7, "enum_FIELD"], [121, 135, 7, "enum_FIELD"], [11, 9, 7, "enum_FIELD"], [19, 17, 7, "enum_FIELD"], [30, 28, 7, "enum_FIELD"], [39, 35, 7, "enum_FIELD"], [48, 44, 7, "enum_FIELD"], [68, 66, 7, "enum_FIELD"], [77, 73, 7, "enum_FIELD"], [86, 82, 7, "enum_FIELD"], [110, 106, 7, "enum_FIELD"], [135, 126, 7, "enum_FIELD"], [9, 8, 7, "enum_FIELD"], [17, 16, 7, "enum_FIELD"], [20, 22, 7, "enum_FIELD"], [28, 27, 7, "enum_FIELD"], [35, 34, 7, "enum_FIELD"], [44, 43, 7, "enum_FIELD"], [50, 58, 7, "enum_FIELD"], [66, 65, 7, "enum_FIELD"], [73, 72, 7, "enum_FIELD"], [82, 81, 7, "enum_FIELD"], [88, 96, 7, "enum_FIELD"], [106, 104, 7, "enum_FIELD"], [114, 112, 7, "enum_FIELD"], [126, 124, 7, "enum_FIELD"], [143, 137, 7, "enum_FIELD"], [58, 56, 7, "enum_FIELD"], [96, 94, 7, "enum_FIELD"], [104, 103, 7, "enum_FIELD"], [112, 111, 7, "enum_FIELD"], [115, 117, 7, "enum_FIELD"], [124, 123, 7, "enum_FIELD"], [137, 136, 7, "enum_FIELD"], [140, 142, 7, "enum_FIELD"], [144, 146, 7, "enum_FIELD"], [148, 150, 7, "enum_FIELD"], [56, 54, 7, "enum_FIELD"], [94, 92, 7, "enum_FIELD"], [54, 53, 7, "enum_FIELD"], [92, 91, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [16, 6, 10, "enum_LAST_LEXICAL_USE"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [27, 14, 10, "enum_LAST_LEXICAL_USE"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [34, 25, 10, "enum_LAST_LEXICAL_USE"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [43, 34, 10, "enum_LAST_LEXICAL_USE"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [53, 51, 10, "enum_LAST_LEXICAL_USE"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [65, 27, 10, "enum_LAST_LEXICAL_USE"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [72, 63, 10, "enum_LAST_LEXICAL_USE"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [81, 43, 10, "enum_LAST_LEXICAL_USE"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [89, 53, 10, "enum_LAST_LEXICAL_USE"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [91, 89, 10, "enum_LAST_LEXICAL_USE"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [103, 16, 10, "enum_LAST_LEXICAL_USE"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [123, 103, 10, "enum_LAST_LEXICAL_USE"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [136, 111, 10, "enum_LAST_LEXICAL_USE"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [5, 13, 1, "enum_CFG_NEXT"], [13, 24, 1, "enum_CFG_NEXT"], [24, 33, 1, "enum_CFG_NEXT"], [33, 42, 1, "enum_CFG_NEXT"], [42, 62, 1, "enum_CFG_NEXT"], [62, 71, 1, "enum_CFG_NEXT"], [71, 80, 1, "enum_CFG_NEXT"], [80, 101, 1, "enum_CFG_NEXT"], [101, 121, 1, "enum_CFG_NEXT"], [16, 6, 3, "enum_LAST_WRITE"], [27, 14, 3, "enum_LAST_WRITE"], [34, 25, 3, "enum_LAST_WRITE"], [43, 34, 2, "enum_LAST_READ"], [43, 25, 3, "enum_LAST_WRITE"], [53, 51, 3, "enum_LAST_WRITE"], [65, 27, 2, "enum_LAST_READ"], [65, 14, 3, "enum_LAST_WRITE"], [72, 63, 3, "enum_LAST_WRITE"], [81, 43, 2, "enum_LAST_READ"], [81, 25, 3, "enum_LAST_WRITE"], [89, 53, 2, "enum_LAST_READ"], [89, 51, 3, "enum_LAST_WRITE"], [91, 53, 2, "enum_LAST_READ"], [91, 89, 3, "enum_LAST_WRITE"], [103, 16, 2, "enum_LAST_READ"], [103, 6, 3, "enum_LAST_WRITE"], [123, 103, 2, "enum_LAST_READ"], [123, 6, 3, "enum_LAST_WRITE"], [136, 111, 2, "enum_LAST_READ"], [6, 8, 4, "enum_COMPUTED_FROM"], [14, 16, 4, "enum_COMPUTED_FROM"], [25, 27, 4, "enum_COMPUTED_FROM"], [63, 65, 4, "enum_COMPUTED_FROM"]], "error_location": 81, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/tlevine/blargparse.git", "old_path": "test_blargparse.py", "hash": "05ce9594f89b154fee2f25a0ece74867756a51ea", "code": "def test_multiple_subparsers():\n    bp: BlargParser = blargparse.BlargParser()\n    sps: BlargParser = bp.add_subparsers(dest = 'command')\n\n    a: BlargParser = sps.add_parser('a')\n    a.add_argument('--aaa', '-a')\n    a.add_aggregate('AAA', lambda args:args.aaa.upper())\n\n    b: BlargParser = sps.add_parser('b')\n    b.add_argument('--bbb', '-b')\n    a.add_aggregate('BBB', lambda args:args.bbb.upper())\n\n    assert bp.parse_args([]) == argparse.Namespace(command = None)\n    assert bp.parse_args(['a', '--aaa', 'tom']) == argparse.Namespace(command = None, aaa = 'tom', AAA = 'TOM')\n", "rewrite": "ReplaceText(target='b' @(112,4)->(112,5))", "error_line": 10, "has_bug": true, "code_full": "\nimport argparse\nfrom typing import Callable\n\nimport blargparse\n\n\nclass BlargParser():\n    def add_subparsers(self, dest: str) -> 'BlargParser':\n        return self.__class__()\n    \n    def add_parser(self, name: str) -> 'BlargParser':\n        return self.__class__()\n    \n    def add_argument(self, *args, **kwargs):\n        pass\n\n    def add_aggregate(self, name: str, func: Callable):\n        pass\n\n    def parse_args(self, args):\n        return argparse.Namespace()\n\n\ndef test_multiple_subparsers():\n    bp: BlargParser = blargparse.BlargParser()\n    sps: BlargParser = bp.add_subparsers(dest = 'command')\n\n    a: BlargParser = sps.add_parser('a')\n    a.add_argument('--aaa', '-a')\n    a.add_aggregate('AAA', lambda args:args.aaa.upper())\n\n    b: BlargParser = sps.add_parser('b')\n    b.add_argument('--bbb', '-b')\n    a.add_aggregate('BBB', lambda args:args.bbb.upper())\n\n    assert bp.parse_args([]) == argparse.Namespace(command = None)\n    assert bp.parse_args(['a', '--aaa', 'tom']) == argparse.Namespace(command = None, aaa = 'tom', AAA = 'TOM')\n", "error_location_char": [351, 352], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def render(", "self", ",", "output_dir", ",", "mode", ",", "stokes", ",", "channel", ",", "rel_channel", ")", ":", "#NEWLINE#", "#INDENT#", "filename", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "self", ".", "fits_filename", "(", "mode", ",", "stokes", ",", "channel", ",", "rel_channel", ")", ")", "#NEWLINE#", "with", "closing", "(", "fits", ".", "open", "(", "filename", ")", ")", "as", "hdulist", ":", "#NEWLINE#", "#INDENT#", "naxis", "=", "int", "(", "hdulist", "[", "0", "]", ".", "header", "[", "'NAXIS'", "]", ")", "#NEWLINE#", "slices", "=", "(", "[", "0", "]", "*", "(", "naxis", "-", "2", ")", ")", "#NEWLINE#", "for", "i", "in", "range", "(", "3", ",", "(", "naxis", "+", "1", ")", ")", ":", "#NEWLINE#", "#INDENT#", "axis_type", "=", "hdulist", "[", "0", "]", ".", "header", "[", "'CTYPE{}'", ".", "format", "(", "i", ")", "]", "#NEWLINE#", "if", "(", "axis_type", "==", "'STOKES'", ")", ":", "#NEWLINE#", "#INDENT#", "slices", "[", "(", "i", "-", "3", ")", "]", "=", "'IQUV'", ".", "find", "(", "stokes", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "axis_type", "==", "'VOPT'", ")", ":", "#NEWLINE#", "#INDENT#", "slices", "[", "(", "i", "-", "3", ")", "]", "=", "channel", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "self", ".", "_render_thumb", "(", "output_dir", ",", "filename", ",", "slices", ",", "mode", ",", "stokes", ",", "channel", ")", "#NEWLINE#", "self", ".", "_render_full", "(", "output_dir", ",", "filename", ",", "slices", ",", "mode", ",", "stokes", ",", "channel", ")"], "edges": [[1, 7, 7, "enum_FIELD"], [16, 26, 7, "enum_FIELD"], [171, 181, 7, "enum_FIELD"], [188, 198, 7, "enum_FIELD"], [26, 22, 7, "enum_FIELD"], [51, 43, 7, "enum_FIELD"], [51, 52, 7, "enum_FIELD"], [55, 59, 7, "enum_FIELD"], [70, 77, 7, "enum_FIELD"], [87, 86, 7, "enum_FIELD"], [87, 91, 7, "enum_FIELD"], [181, 173, 7, "enum_FIELD"], [198, 190, 7, "enum_FIELD"], [22, 20, 7, "enum_FIELD"], [34, 28, 7, "enum_FIELD"], [43, 42, 7, "enum_FIELD"], [59, 58, 7, "enum_FIELD"], [77, 74, 7, "enum_FIELD"], [77, 80, 7, "enum_FIELD"], [91, 88, 7, "enum_FIELD"], [100, 109, 7, "enum_FIELD"], [124, 121, 7, "enum_FIELD"], [173, 172, 7, "enum_FIELD"], [190, 189, 7, "enum_FIELD"], [20, 19, 7, "enum_FIELD"], [28, 27, 7, "enum_FIELD"], [47, 45, 7, "enum_FIELD"], [66, 64, 7, "enum_FIELD"], [66, 67, 7, "enum_FIELD"], [80, 79, 7, "enum_FIELD"], [80, 81, 7, "enum_FIELD"], [94, 93, 7, "enum_FIELD"], [94, 95, 7, "enum_FIELD"], [109, 107, 7, "enum_FIELD"], [109, 113, 7, "enum_FIELD"], [121, 120, 7, "enum_FIELD"], [126, 139, 7, "enum_FIELD"], [148, 151, 7, "enum_FIELD"], [45, 44, 7, "enum_FIELD"], [64, 61, 7, "enum_FIELD"], [107, 104, 7, "enum_FIELD"], [113, 111, 7, "enum_FIELD"], [128, 127, 7, "enum_FIELD"], [128, 131, 7, "enum_FIELD"], [139, 137, 7, "enum_FIELD"], [151, 150, 7, "enum_FIELD"], [156, 166, 7, "enum_FIELD"], [61, 60, 7, "enum_FIELD"], [61, 62, 7, "enum_FIELD"], [104, 103, 7, "enum_FIELD"], [104, 105, 7, "enum_FIELD"], [111, 110, 7, "enum_FIELD"], [131, 130, 7, "enum_FIELD"], [131, 132, 7, "enum_FIELD"], [137, 136, 7, "enum_FIELD"], [158, 157, 7, "enum_FIELD"], [158, 161, 7, "enum_FIELD"], [161, 160, 7, "enum_FIELD"], [161, 162, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [25, 4, 10, "enum_LAST_LEXICAL_USE"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [27, 2, 10, "enum_LAST_LEXICAL_USE"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [31, 6, 10, "enum_LAST_LEXICAL_USE"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [33, 8, 10, "enum_LAST_LEXICAL_USE"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [35, 10, 10, "enum_LAST_LEXICAL_USE"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [37, 12, 10, "enum_LAST_LEXICAL_USE"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [48, 17, 10, "enum_LAST_LEXICAL_USE"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [60, 52, 10, "enum_LAST_LEXICAL_USE"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [79, 56, 10, "enum_LAST_LEXICAL_USE"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [93, 79, 10, "enum_LAST_LEXICAL_USE"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [103, 60, 10, "enum_LAST_LEXICAL_USE"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [114, 86, 10, "enum_LAST_LEXICAL_USE"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [120, 101, 10, "enum_LAST_LEXICAL_USE"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 126, 9, "enum_NEXT_SYNTAX"], [127, 71, 10, "enum_LAST_LEXICAL_USE"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [130, 114, 10, "enum_LAST_LEXICAL_USE"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [140, 33, 10, "enum_LAST_LEXICAL_USE"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [150, 120, 10, "enum_LAST_LEXICAL_USE"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 156, 9, "enum_NEXT_SYNTAX"], [157, 127, 10, "enum_LAST_LEXICAL_USE"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [160, 130, 10, "enum_LAST_LEXICAL_USE"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [166, 35, 10, "enum_LAST_LEXICAL_USE"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 171, 9, "enum_NEXT_SYNTAX"], [172, 27, 10, "enum_LAST_LEXICAL_USE"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [176, 25, 10, "enum_LAST_LEXICAL_USE"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [178, 48, 10, "enum_LAST_LEXICAL_USE"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [180, 157, 10, "enum_LAST_LEXICAL_USE"], [179, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [182, 31, 10, "enum_LAST_LEXICAL_USE"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [184, 140, 10, "enum_LAST_LEXICAL_USE"], [183, 184, 9, "enum_NEXT_SYNTAX"], [184, 185, 9, "enum_NEXT_SYNTAX"], [186, 166, 10, "enum_LAST_LEXICAL_USE"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [187, 188, 9, "enum_NEXT_SYNTAX"], [189, 172, 10, "enum_LAST_LEXICAL_USE"], [188, 189, 9, "enum_NEXT_SYNTAX"], [189, 190, 9, "enum_NEXT_SYNTAX"], [190, 191, 9, "enum_NEXT_SYNTAX"], [191, 192, 9, "enum_NEXT_SYNTAX"], [193, 176, 10, "enum_LAST_LEXICAL_USE"], [192, 193, 9, "enum_NEXT_SYNTAX"], [193, 194, 9, "enum_NEXT_SYNTAX"], [195, 178, 10, "enum_LAST_LEXICAL_USE"], [194, 195, 9, "enum_NEXT_SYNTAX"], [195, 196, 9, "enum_NEXT_SYNTAX"], [197, 180, 10, "enum_LAST_LEXICAL_USE"], [196, 197, 9, "enum_NEXT_SYNTAX"], [197, 198, 9, "enum_NEXT_SYNTAX"], [199, 182, 10, "enum_LAST_LEXICAL_USE"], [198, 199, 9, "enum_NEXT_SYNTAX"], [199, 200, 9, "enum_NEXT_SYNTAX"], [201, 184, 10, "enum_LAST_LEXICAL_USE"], [200, 201, 9, "enum_NEXT_SYNTAX"], [201, 202, 9, "enum_NEXT_SYNTAX"], [203, 186, 10, "enum_LAST_LEXICAL_USE"], [202, 203, 9, "enum_NEXT_SYNTAX"], [203, 204, 9, "enum_NEXT_SYNTAX"], [7, 16, 1, "enum_CFG_NEXT"], [16, 171, 1, "enum_CFG_NEXT"], [171, 188, 1, "enum_CFG_NEXT"], [25, 4, 3, "enum_LAST_WRITE"], [27, 2, 3, "enum_LAST_WRITE"], [31, 6, 3, "enum_LAST_WRITE"], [33, 8, 3, "enum_LAST_WRITE"], [35, 10, 3, "enum_LAST_WRITE"], [37, 12, 3, "enum_LAST_WRITE"], [172, 27, 2, "enum_LAST_READ"], [172, 2, 3, "enum_LAST_WRITE"], [176, 25, 2, "enum_LAST_READ"], [176, 4, 3, "enum_LAST_WRITE"], [178, 17, 3, "enum_LAST_WRITE"], [182, 31, 2, "enum_LAST_READ"], [182, 6, 3, "enum_LAST_WRITE"], [184, 33, 2, "enum_LAST_READ"], [184, 8, 3, "enum_LAST_WRITE"], [186, 35, 2, "enum_LAST_READ"], [186, 10, 3, "enum_LAST_WRITE"], [189, 172, 2, "enum_LAST_READ"], [189, 2, 3, "enum_LAST_WRITE"], [193, 176, 2, "enum_LAST_READ"], [193, 4, 3, "enum_LAST_WRITE"], [195, 178, 2, "enum_LAST_READ"], [195, 17, 3, "enum_LAST_WRITE"], [197, 180, 2, "enum_LAST_READ"], [199, 182, 2, "enum_LAST_READ"], [199, 6, 3, "enum_LAST_WRITE"], [201, 184, 2, "enum_LAST_READ"], [201, 8, 3, "enum_LAST_WRITE"], [203, 186, 2, "enum_LAST_READ"], [203, 10, 3, "enum_LAST_WRITE"], [17, 25, 4, "enum_COMPUTED_FROM"], [17, 31, 4, "enum_COMPUTED_FROM"], [17, 33, 4, "enum_COMPUTED_FROM"], [17, 35, 4, "enum_COMPUTED_FROM"], [17, 37, 4, "enum_COMPUTED_FROM"], [17, 19, 4, "enum_COMPUTED_FROM"], [17, 27, 4, "enum_COMPUTED_FROM"], [56, 58, 4, "enum_COMPUTED_FROM"], [56, 60, 4, "enum_COMPUTED_FROM"], [71, 79, 4, "enum_COMPUTED_FROM"], [101, 114, 4, "enum_COMPUTED_FROM"], [101, 103, 4, "enum_COMPUTED_FROM"], [128, 140, 4, "enum_COMPUTED_FROM"], [158, 166, 4, "enum_COMPUTED_FROM"]], "error_location": 166, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/ska-sa/katsdpimager.git", "old_path": "tests/images_report.py", "hash": "c1790fa1bf597a5fb592ee05ff7205b17fbcc85e", "code": "def render(self, output_dir: str, mode: str, stokes: str, channel: float, rel_channel: float):\n    # Check whether the Stokes parameters and/or channel are all bundled\n    # into one image, and if so, slice it.\n    filename: str = os.path.join(output_dir, self.fits_filename(mode, stokes, channel, rel_channel))\n    with closing(fits.open(filename)) as hdulist:\n        naxis: int = int(hdulist[0].header['NAXIS'])\n        slices: List[Union[float, int]] = [0] * (naxis - 2)\n        for i in range(3, naxis + 1):\n            axis_type: str = hdulist[0].header['CTYPE{}'.format(i)]\n            if axis_type == 'STOKES':\n                # TODO: should use the WCS transformation\n                slices[i - 3] = 'IQUV'.find(stokes)\n            elif axis_type == 'VOPT':\n                slices[i - 3] = channel\n    self._render_thumb(output_dir, filename, slices, mode, stokes, channel)\n    self._render_full(output_dir, filename, slices, mode, stokes, channel)\n", "rewrite": "ReplaceText(target='rel_channel' @(137,36)->(137,43))", "error_line": 13, "has_bug": true, "code_full": "import os\nfrom contextlib import closing\nfrom typing import List, Union\n\nfrom astropy.io import fits\n\n\nclass Class:\n    def fits_filename(self, mode: str, stokes: str, channel: float, rel_channel: float) -> str:\n        return \"\"\n    \n    def _render_thumb(self, output_dir: str, filename: str, slices: list, mode: str, stokes: str, channel: float) -> None:\n        pass\n\n    def _render_full(self, output_dir: str, filename: str, slices: list, mode: str, stokes: str, channel: float) -> None:\n        pass\n\n\n    def render(self, output_dir: str, mode: str, stokes: str, channel: float, rel_channel: float):\n        # Check whether the Stokes parameters and/or channel are all bundled\n        # into one image, and if so, slice it.\n        filename: str = os.path.join(output_dir, self.fits_filename(mode, stokes, channel, rel_channel))\n        with closing(fits.open(filename)) as hdulist:\n            naxis: int = int(hdulist[0].header['NAXIS'])\n            slices: List[Union[float, int]] = [0] * (naxis - 2)\n            for i in range(3, naxis + 1):\n                axis_type: str = hdulist[0].header['CTYPE{}'.format(i)]\n                if axis_type == 'STOKES':\n                    # TODO: should use the WCS transformation\n                    slices[i - 3] = 'IQUV'.find(stokes)\n                elif axis_type == 'VOPT':\n                    slices[i - 3] = channel\n        self._render_thumb(output_dir, filename, slices, mode, stokes, channel)\n        self._render_full(output_dir, filename, slices, mode, stokes, channel)\n", "error_location_char": [799, 806], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def send(", "self", ",", "request", ",", "**kwargs", ")", ":", "#NEWLINE#", "#INDENT#", "func", "=", "super", "(", "FuturesSession", ",", "self", ")", ".", "send", "#NEWLINE#", "if", "isinstance", "(", "self", ".", "executor", ",", "ProcessPoolExecutor", ")", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "dumps", "(", "request", ")", "#NEWLINE#", "#UNINDENT#", "except", "(", "TypeError", ",", "PickleError", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "RuntimeError", "(", "PICKLE_ERROR", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "return", "self", ".", "executor", ".", "submit", "(", "func", ",", "request", ",", "**", "kwargs", ")"], "edges": [[1, 5, 7, "enum_FIELD"], [10, 19, 7, "enum_FIELD"], [22, 28, 7, "enum_FIELD"], [61, 69, 7, "enum_FIELD"], [19, 16, 7, "enum_FIELD"], [28, 23, 7, "enum_FIELD"], [69, 65, 7, "enum_FIELD"], [16, 13, 7, "enum_FIELD"], [26, 25, 7, "enum_FIELD"], [37, 39, 7, "enum_FIELD"], [44, 47, 7, "enum_FIELD"], [65, 63, 7, "enum_FIELD"], [72, 73, 7, "enum_FIELD"], [39, 38, 7, "enum_FIELD"], [53, 55, 7, "enum_FIELD"], [63, 62, 7, "enum_FIELD"], [55, 54, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [17, 2, 10, "enum_LAST_LEXICAL_USE"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [25, 17, 10, "enum_LAST_LEXICAL_USE"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [40, 4, 10, "enum_LAST_LEXICAL_USE"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 61, 9, "enum_NEXT_SYNTAX"], [62, 25, 10, "enum_LAST_LEXICAL_USE"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [68, 11, 10, "enum_LAST_LEXICAL_USE"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [70, 40, 10, "enum_LAST_LEXICAL_USE"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [5, 10, 1, "enum_CFG_NEXT"], [10, 28, 1, "enum_CFG_NEXT"], [28, 37, 1, "enum_CFG_NEXT"], [28, 61, 1, "enum_CFG_NEXT"], [37, 47, 1, "enum_CFG_NEXT"], [37, 61, 1, "enum_CFG_NEXT"], [47, 53, 1, "enum_CFG_NEXT"], [17, 2, 3, "enum_LAST_WRITE"], [25, 17, 2, "enum_LAST_READ"], [25, 2, 3, "enum_LAST_WRITE"], [40, 4, 3, "enum_LAST_WRITE"], [62, 25, 2, "enum_LAST_READ"], [62, 2, 3, "enum_LAST_WRITE"], [68, 11, 3, "enum_LAST_WRITE"], [70, 40, 2, "enum_LAST_READ"], [70, 4, 3, "enum_LAST_WRITE"], [11, 13, 4, "enum_COMPUTED_FROM"], [11, 15, 4, "enum_COMPUTED_FROM"], [11, 17, 4, "enum_COMPUTED_FROM"]], "error_location": 40, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/GainCompliance/gain-requests-futures.git", "old_path": "requests_futures/sessions.py", "hash": "2779819b9b7554d787280d5889878237ba1937b5", "code": "def send(self, request: Any, **kwargs) -> Any:\n    func: Callable = super(FuturesSession, self).send\n    if isinstance(self.executor, ProcessPoolExecutor):\n        try:\n            dumps(request)\n        except (TypeError, PickleError):\n            raise RuntimeError(PICKLE_ERROR)\n    return self.executor.submit(func, request, **kwargs)\n", "rewrite": "ReplaceText(target='func' @(72,22)->(72,29))", "error_line": 4, "has_bug": true, "code_full": "from concurrent.futures import ProcessPoolExecutor\nfrom pickle import PickleError, dumps\nfrom typing import Any, Callable\n\nPICKLE_ERROR: str = \"\"\n\nclass Session:\n    def send(self, request: Any, **kwargs) -> Any:\n        pass\n\nclass FutureSession(Session):\n    executor: ProcessPoolExecutor\n\n    def send(self, request: Any, **kwargs) -> Any:\n        func: Callable = super(FuturesSession, self).send\n        if isinstance(self.executor, ProcessPoolExecutor):\n            try:\n                dumps(request)\n            except (TypeError, PickleError):\n                raise RuntimeError(PICKLE_ERROR)\n        return self.executor.submit(func, request, **kwargs)\n", "error_location_char": [187, 194], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def find_lead_transition(", "data", ",", "center", ",", "scan_range", ",", "npoints", ",", "width", "=", "0.0002", ")", "->", "float", ":", "#NEWLINE#", "#INDENT#", "if", "(", "len", "(", "data", ".", "shape", ")", "==", "2", ")", ":", "#NEWLINE#", "#INDENT#", "y", "=", "np", ".", "mean", "(", "data", ",", "0", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "len", "(", "data", ".", "shape", ")", "==", "1", ")", ":", "#NEWLINE#", "#INDENT#", "y", "=", "data", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "print", "(", "'data must be a one or two dimensional array!'", ")", "#NEWLINE#", "return", "np", ".", "nan", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "x", "=", "np", ".", "linspace", "(", "(", "center", "-", "scan_range", ")", ",", "(", "center", "+", "scan_range", ")", ",", "npoints", ")", "#NEWLINE#", "n", "=", "int", "(", "(", "(", "width", "/", "scan_range", ")", "*", "npoints", ")", ")", "#NEWLINE#", "for", "i", "in", "range", "(", "0", ",", "(", "(", "len", "(", "y", ")", "-", "n", ")", "-", "1", ")", ")", ":", "#NEWLINE#", "#INDENT#", "y", "[", "i", "]", "-=", "y", "[", "(", "i", "+", "n", ")", "]", "#NEWLINE#", "#UNINDENT#", "y_red", "=", "y", "[", "0", ":", "(", "(", "len", "(", "y", ")", "-", "n", ")", "-", "1", ")", "]", "#NEWLINE#", "x_red", "=", "x", "[", "0", ":", "(", "(", "len", "(", "y", ")", "-", "n", ")", "-", "1", ")", "]", "#NEWLINE#", "y_red", "=", "np", ".", "absolute", "(", "y_red", ")", "#NEWLINE#", "max_index", "=", "int", "(", "(", "np", ".", "argmax", "(", "y_red", ")", "+", "int", "(", "round", "(", "(", "n", "/", "2", ")", ")", ")", ")", ")", "#NEWLINE#", "return", "x_red", "[", "max_index", "]"], "edges": [[1, 7, 7, "enum_FIELD"], [1, 15, 7, "enum_FIELD"], [30, 27, 7, "enum_FIELD"], [83, 95, 7, "enum_FIELD"], [104, 108, 7, "enum_FIELD"], [122, 121, 7, "enum_FIELD"], [122, 126, 7, "enum_FIELD"], [157, 161, 7, "enum_FIELD"], [177, 181, 7, "enum_FIELD"], [197, 203, 7, "enum_FIELD"], [206, 210, 7, "enum_FIELD"], [233, 235, 7, "enum_FIELD"], [27, 22, 7, "enum_FIELD"], [32, 40, 7, "enum_FIELD"], [60, 57, 7, "enum_FIELD"], [95, 87, 7, "enum_FIELD"], [108, 107, 7, "enum_FIELD"], [126, 123, 7, "enum_FIELD"], [142, 144, 7, "enum_FIELD"], [142, 149, 7, "enum_FIELD"], [161, 160, 7, "enum_FIELD"], [161, 163, 7, "enum_FIELD"], [181, 180, 7, "enum_FIELD"], [181, 183, 7, "enum_FIELD"], [203, 201, 7, "enum_FIELD"], [210, 209, 7, "enum_FIELD"], [235, 234, 7, "enum_FIELD"], [235, 236, 7, "enum_FIELD"], [22, 21, 7, "enum_FIELD"], [40, 36, 7, "enum_FIELD"], [57, 52, 7, "enum_FIELD"], [62, 65, 7, "enum_FIELD"], [71, 73, 7, "enum_FIELD"], [77, 79, 7, "enum_FIELD"], [87, 86, 7, "enum_FIELD"], [92, 91, 7, "enum_FIELD"], [92, 93, 7, "enum_FIELD"], [98, 97, 7, "enum_FIELD"], [98, 99, 7, "enum_FIELD"], [115, 112, 7, "enum_FIELD"], [115, 116, 7, "enum_FIELD"], [136, 133, 7, "enum_FIELD"], [136, 137, 7, "enum_FIELD"], [144, 143, 7, "enum_FIELD"], [144, 145, 7, "enum_FIELD"], [149, 148, 7, "enum_FIELD"], [149, 152, 7, "enum_FIELD"], [163, 162, 7, "enum_FIELD"], [163, 173, 7, "enum_FIELD"], [183, 182, 7, "enum_FIELD"], [183, 193, 7, "enum_FIELD"], [201, 200, 7, "enum_FIELD"], [218, 215, 7, "enum_FIELD"], [218, 220, 7, "enum_FIELD"], [24, 23, 7, "enum_FIELD"], [36, 35, 7, "enum_FIELD"], [52, 51, 7, "enum_FIELD"], [73, 72, 7, "enum_FIELD"], [79, 78, 7, "enum_FIELD"], [112, 111, 7, "enum_FIELD"], [112, 113, 7, "enum_FIELD"], [133, 130, 7, "enum_FIELD"], [133, 134, 7, "enum_FIELD"], [152, 151, 7, "enum_FIELD"], [152, 153, 7, "enum_FIELD"], [173, 170, 7, "enum_FIELD"], [173, 174, 7, "enum_FIELD"], [193, 190, 7, "enum_FIELD"], [193, 194, 7, "enum_FIELD"], [215, 213, 7, "enum_FIELD"], [220, 219, 7, "enum_FIELD"], [54, 53, 7, "enum_FIELD"], [130, 129, 7, "enum_FIELD"], [170, 167, 7, "enum_FIELD"], [170, 171, 7, "enum_FIELD"], [190, 187, 7, "enum_FIELD"], [190, 191, 7, "enum_FIELD"], [213, 212, 7, "enum_FIELD"], [222, 221, 7, "enum_FIELD"], [167, 166, 7, "enum_FIELD"], [187, 186, 7, "enum_FIELD"], [225, 224, 7, "enum_FIELD"], [225, 226, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [23, 2, 10, "enum_LAST_LEXICAL_USE"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [39, 23, 10, "enum_LAST_LEXICAL_USE"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [51, 21, 10, "enum_LAST_LEXICAL_USE"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [53, 39, 10, "enum_LAST_LEXICAL_USE"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 62, 9, "enum_NEXT_SYNTAX"], [63, 33, 10, "enum_LAST_LEXICAL_USE"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [65, 53, 10, "enum_LAST_LEXICAL_USE"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 77, 9, "enum_NEXT_SYNTAX"], [78, 35, 10, "enum_LAST_LEXICAL_USE"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [86, 78, 10, "enum_LAST_LEXICAL_USE"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [91, 4, 10, "enum_LAST_LEXICAL_USE"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [93, 6, 10, "enum_LAST_LEXICAL_USE"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [97, 91, 10, "enum_LAST_LEXICAL_USE"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [99, 93, 10, "enum_LAST_LEXICAL_USE"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [102, 8, 10, "enum_LAST_LEXICAL_USE"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [111, 10, 10, "enum_LAST_LEXICAL_USE"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [113, 99, 10, "enum_LAST_LEXICAL_USE"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [116, 102, 10, "enum_LAST_LEXICAL_USE"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [129, 51, 10, "enum_LAST_LEXICAL_USE"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [131, 63, 10, "enum_LAST_LEXICAL_USE"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [134, 105, 10, "enum_LAST_LEXICAL_USE"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 142, 9, "enum_NEXT_SYNTAX"], [143, 131, 10, "enum_LAST_LEXICAL_USE"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [145, 121, 10, "enum_LAST_LEXICAL_USE"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [148, 143, 10, "enum_LAST_LEXICAL_USE"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [151, 145, 10, "enum_LAST_LEXICAL_USE"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [153, 134, 10, "enum_LAST_LEXICAL_USE"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [160, 148, 10, "enum_LAST_LEXICAL_USE"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [166, 129, 10, "enum_LAST_LEXICAL_USE"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [168, 160, 10, "enum_LAST_LEXICAL_USE"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [171, 153, 10, "enum_LAST_LEXICAL_USE"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [180, 84, 10, "enum_LAST_LEXICAL_USE"], [179, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 184, 9, "enum_NEXT_SYNTAX"], [184, 185, 9, "enum_NEXT_SYNTAX"], [186, 166, 10, "enum_LAST_LEXICAL_USE"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [188, 168, 10, "enum_LAST_LEXICAL_USE"], [187, 188, 9, "enum_NEXT_SYNTAX"], [188, 189, 9, "enum_NEXT_SYNTAX"], [189, 190, 9, "enum_NEXT_SYNTAX"], [191, 171, 10, "enum_LAST_LEXICAL_USE"], [190, 191, 9, "enum_NEXT_SYNTAX"], [191, 192, 9, "enum_NEXT_SYNTAX"], [192, 193, 9, "enum_NEXT_SYNTAX"], [193, 194, 9, "enum_NEXT_SYNTAX"], [194, 195, 9, "enum_NEXT_SYNTAX"], [195, 196, 9, "enum_NEXT_SYNTAX"], [196, 197, 9, "enum_NEXT_SYNTAX"], [198, 158, 10, "enum_LAST_LEXICAL_USE"], [197, 198, 9, "enum_NEXT_SYNTAX"], [198, 199, 9, "enum_NEXT_SYNTAX"], [200, 86, 10, "enum_LAST_LEXICAL_USE"], [199, 200, 9, "enum_NEXT_SYNTAX"], [200, 201, 9, "enum_NEXT_SYNTAX"], [201, 202, 9, "enum_NEXT_SYNTAX"], [202, 203, 9, "enum_NEXT_SYNTAX"], [204, 198, 10, "enum_LAST_LEXICAL_USE"], [203, 204, 9, "enum_NEXT_SYNTAX"], [204, 205, 9, "enum_NEXT_SYNTAX"], [205, 206, 9, "enum_NEXT_SYNTAX"], [206, 207, 9, "enum_NEXT_SYNTAX"], [207, 208, 9, "enum_NEXT_SYNTAX"], [209, 107, 10, "enum_LAST_LEXICAL_USE"], [208, 209, 9, "enum_NEXT_SYNTAX"], [209, 210, 9, "enum_NEXT_SYNTAX"], [210, 211, 9, "enum_NEXT_SYNTAX"], [212, 200, 10, "enum_LAST_LEXICAL_USE"], [211, 212, 9, "enum_NEXT_SYNTAX"], [212, 213, 9, "enum_NEXT_SYNTAX"], [213, 214, 9, "enum_NEXT_SYNTAX"], [214, 215, 9, "enum_NEXT_SYNTAX"], [216, 204, 10, "enum_LAST_LEXICAL_USE"], [215, 216, 9, "enum_NEXT_SYNTAX"], [216, 217, 9, "enum_NEXT_SYNTAX"], [217, 218, 9, "enum_NEXT_SYNTAX"], [219, 209, 10, "enum_LAST_LEXICAL_USE"], [218, 219, 9, "enum_NEXT_SYNTAX"], [219, 220, 9, "enum_NEXT_SYNTAX"], [220, 221, 9, "enum_NEXT_SYNTAX"], [221, 222, 9, "enum_NEXT_SYNTAX"], [222, 223, 9, "enum_NEXT_SYNTAX"], [224, 191, 10, "enum_LAST_LEXICAL_USE"], [223, 224, 9, "enum_NEXT_SYNTAX"], [224, 225, 9, "enum_NEXT_SYNTAX"], [225, 226, 9, "enum_NEXT_SYNTAX"], [226, 227, 9, "enum_NEXT_SYNTAX"], [227, 228, 9, "enum_NEXT_SYNTAX"], [228, 229, 9, "enum_NEXT_SYNTAX"], [229, 230, 9, "enum_NEXT_SYNTAX"], [230, 231, 9, "enum_NEXT_SYNTAX"], [231, 233, 9, "enum_NEXT_SYNTAX"], [234, 178, 10, "enum_LAST_LEXICAL_USE"], [233, 234, 9, "enum_NEXT_SYNTAX"], [234, 235, 9, "enum_NEXT_SYNTAX"], [236, 207, 10, "enum_LAST_LEXICAL_USE"], [235, 236, 9, "enum_NEXT_SYNTAX"], [236, 237, 9, "enum_NEXT_SYNTAX"], [12, 1, 1, "enum_CFG_NEXT"], [7, 27, 1, "enum_CFG_NEXT"], [27, 32, 1, "enum_CFG_NEXT"], [27, 57, 1, "enum_CFG_NEXT"], [32, 83, 1, "enum_CFG_NEXT"], [57, 62, 1, "enum_CFG_NEXT"], [57, 71, 1, "enum_CFG_NEXT"], [62, 83, 1, "enum_CFG_NEXT"], [71, 77, 1, "enum_CFG_NEXT"], [83, 104, 1, "enum_CFG_NEXT"], [104, 126, 1, "enum_CFG_NEXT"], [126, 121, 1, "enum_CFG_NEXT"], [121, 142, 1, "enum_CFG_NEXT"], [121, 157, 1, "enum_CFG_NEXT"], [142, 121, 1, "enum_CFG_NEXT"], [157, 177, 1, "enum_CFG_NEXT"], [177, 197, 1, "enum_CFG_NEXT"], [197, 206, 1, "enum_CFG_NEXT"], [206, 233, 1, "enum_CFG_NEXT"], [23, 2, 3, "enum_LAST_WRITE"], [39, 23, 2, "enum_LAST_READ"], [39, 2, 3, "enum_LAST_WRITE"], [51, 21, 2, "enum_LAST_READ"], [53, 23, 2, "enum_LAST_READ"], [53, 2, 3, "enum_LAST_WRITE"], [65, 53, 2, "enum_LAST_READ"], [65, 2, 3, "enum_LAST_WRITE"], [86, 35, 2, "enum_LAST_READ"], [91, 4, 3, "enum_LAST_WRITE"], [93, 6, 3, "enum_LAST_WRITE"], [97, 91, 2, "enum_LAST_READ"], [97, 4, 3, "enum_LAST_WRITE"], [99, 93, 2, "enum_LAST_READ"], [99, 6, 3, "enum_LAST_WRITE"], [102, 8, 3, "enum_LAST_WRITE"], [111, 10, 3, "enum_LAST_WRITE"], [113, 99, 2, "enum_LAST_READ"], [113, 6, 3, "enum_LAST_WRITE"], [116, 102, 2, "enum_LAST_READ"], [116, 8, 3, "enum_LAST_WRITE"], [129, 51, 2, "enum_LAST_READ"], [129, 21, 2, "enum_LAST_READ"], [131, 63, 3, "enum_LAST_WRITE"], [131, 33, 3, "enum_LAST_WRITE"], [134, 105, 3, "enum_LAST_WRITE"], [121, 145, 2, "enum_LAST_READ"], [121, 121, 3, "enum_LAST_WRITE"], [148, 131, 2, "enum_LAST_READ"], [148, 143, 2, "enum_LAST_READ"], [148, 63, 3, "enum_LAST_WRITE"], [148, 33, 3, "enum_LAST_WRITE"], [151, 145, 2, "enum_LAST_READ"], [151, 121, 3, "enum_LAST_WRITE"], [153, 134, 2, "enum_LAST_READ"], [153, 153, 2, "enum_LAST_READ"], [153, 105, 3, "enum_LAST_WRITE"], [143, 148, 2, "enum_LAST_READ"], [143, 63, 3, "enum_LAST_WRITE"], [143, 33, 3, "enum_LAST_WRITE"], [145, 151, 2, "enum_LAST_READ"], [145, 121, 3, "enum_LAST_WRITE"], [160, 131, 2, "enum_LAST_READ"], [160, 143, 2, "enum_LAST_READ"], [160, 63, 3, "enum_LAST_WRITE"], [160, 33, 3, "enum_LAST_WRITE"], [166, 129, 2, "enum_LAST_READ"], [168, 160, 2, "enum_LAST_READ"], [168, 63, 3, "enum_LAST_WRITE"], [168, 33, 3, "enum_LAST_WRITE"], [171, 134, 2, "enum_LAST_READ"], [171, 153, 2, "enum_LAST_READ"], [171, 105, 3, "enum_LAST_WRITE"], [180, 84, 3, "enum_LAST_WRITE"], [186, 166, 2, "enum_LAST_READ"], [188, 168, 2, "enum_LAST_READ"], [188, 63, 3, "enum_LAST_WRITE"], [188, 33, 3, "enum_LAST_WRITE"], [191, 171, 2, "enum_LAST_READ"], [191, 105, 3, "enum_LAST_WRITE"], [200, 86, 2, "enum_LAST_READ"], [204, 158, 3, "enum_LAST_WRITE"], [198, 204, 2, "enum_LAST_READ"], [198, 158, 3, "enum_LAST_WRITE"], [209, 107, 2, "enum_LAST_READ"], [212, 200, 2, "enum_LAST_READ"], [216, 204, 2, "enum_LAST_READ"], [216, 198, 3, "enum_LAST_WRITE"], [219, 209, 2, "enum_LAST_READ"], [224, 191, 2, "enum_LAST_READ"], [224, 105, 3, "enum_LAST_WRITE"], [234, 178, 3, "enum_LAST_WRITE"], [236, 207, 3, "enum_LAST_WRITE"], [84, 102, 4, "enum_COMPUTED_FROM"], [84, 86, 4, "enum_COMPUTED_FROM"], [84, 91, 4, "enum_COMPUTED_FROM"], [84, 93, 4, "enum_COMPUTED_FROM"], [84, 97, 4, "enum_COMPUTED_FROM"], [84, 99, 4, "enum_COMPUTED_FROM"], [105, 107, 4, "enum_COMPUTED_FROM"], [105, 116, 4, "enum_COMPUTED_FROM"], [105, 111, 4, "enum_COMPUTED_FROM"], [105, 113, 4, "enum_COMPUTED_FROM"], [158, 160, 4, "enum_COMPUTED_FROM"], [158, 171, 4, "enum_COMPUTED_FROM"], [158, 166, 4, "enum_COMPUTED_FROM"], [158, 168, 4, "enum_COMPUTED_FROM"], [178, 180, 4, "enum_COMPUTED_FROM"], [178, 191, 4, "enum_COMPUTED_FROM"], [178, 186, 4, "enum_COMPUTED_FROM"], [178, 188, 4, "enum_COMPUTED_FROM"], [198, 204, 4, "enum_COMPUTED_FROM"], [198, 200, 4, "enum_COMPUTED_FROM"], [207, 209, 4, "enum_COMPUTED_FROM"], [207, 216, 4, "enum_COMPUTED_FROM"], [207, 219, 4, "enum_COMPUTED_FROM"], [207, 212, 4, "enum_COMPUTED_FROM"], [207, 221, 4, "enum_COMPUTED_FROM"], [207, 224, 4, "enum_COMPUTED_FROM"], [33, 39, 4, "enum_COMPUTED_FROM"], [33, 35, 4, "enum_COMPUTED_FROM"], [63, 65, 4, "enum_COMPUTED_FROM"]], "error_location": 234, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/qutech/qtune.git", "old_path": "qtune/util.py", "hash": "a6ca5b76c17a8092c67f2d495c7f422d038008f5", "code": "def find_lead_transition(data: np.ndarray, center: float, scan_range: float, npoints: int, width: float = .2e-3) -> float:\n    if len(data.shape) == 2:\n        y: np.ndarray = np.mean(data, 0)\n    elif len(data.shape) == 1:\n        y: np.ndarray = data\n    else:\n        print('data must be a one or two dimensional array!')\n        return np.nan\n\n    x: np.ndarray = np.linspace(center - scan_range, center + scan_range, npoints)\n\n    n: int = int(width/scan_range*npoints)\n    for i in range(0, len(y)-n-1):\n        y[i] -= y[i+n]\n\n    y_red: np.ndarray = y[0:len(y) - n - 1]\n    x_red: np.ndarray = x[0:len(y) - n - 1]\n\n    y_red: np.ndarray = np.absolute(y_red)\n    max_index: int = int(np.argmax(y_red) + int(round(n / 2)))\n\n    return x_red[max_index]\n", "rewrite": "ReplaceText(target='x' @(48,11)->(48,16))", "error_line": 21, "has_bug": true, "code_full": "import numpy as np\n\n\ndef find_lead_transition(data: np.ndarray, center: float, scan_range: float, npoints: int, width: float = .2e-3) -> float:\n    if len(data.shape) == 2:\n        y: np.ndarray = np.mean(data, 0)\n    elif len(data.shape) == 1:\n        y: np.ndarray = data\n    else:\n        print('data must be a one or two dimensional array!')\n        return np.nan\n\n    x: np.ndarray = np.linspace(center - scan_range, center + scan_range, npoints)\n\n    n: int = int(width/scan_range*npoints)\n    for i in range(0, len(y)-n-1):\n        y[i] -= y[i+n]\n\n    y_red: np.ndarray = y[0:len(y) - n - 1]\n    x_red: np.ndarray = x[0:len(y) - n - 1]\n\n    y_red: np.ndarray = np.absolute(y_red)\n    max_index: int = int(np.argmax(y_red) + int(round(n / 2)))\n\n    return x_red[max_index]\n", "error_location_char": [741, 746], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def _train_models(", "self", ",", "display", ")", ":", "#NEWLINE#", "#INDENT#", "dataset_dir", "=", "self", ".", "_vars", "[", "'io_control'", "]", "[", "'dataset_dir'", "]", ".", "get", "(", ")", "#NEWLINE#", "output_dir", "=", "self", ".", "_vars", "[", "'io_control'", "]", "[", "'output_dir'", "]", ".", "get", "(", ")", "#NEWLINE#", "model_config_path", "=", "os", ".", "path", ".", "join", "(", "dataset_dir", ",", "'model_config.yml'", ")", "#NEWLINE#", "self", ".", "_print_to_listbox", "(", "display", ",", "'LOADING DATASET FROM: {}'", ".", "format", "(", "dataset_dir", ")", ")", "#NEWLINE#", "(", "df", ",", "idx_df", ")", "=", "read_local_dataset", "(", "dataset_dir", ",", "downsampling_distance", "=", "1.0", ",", "message_callback", "=", "partial", "(", "self", ".", "_print_to_listbox", ",", "display", ")", ")", "#NEWLINE#", "self", ".", "_print_to_listbox", "(", "display", ",", "'---- FINISHED LOADING DATASET ----'", ")", "#NEWLINE#", "self", ".", "_print_to_listbox", "(", "display", ",", "'BEGINNING TO TRAIN MODELS'", ")", "#NEWLINE#", "self", ".", "_print_to_listbox", "(", "display", ",", "'MODEL CONFIG FILE PATH: {}'", ".", "format", "(", "model_config_path", ")", ")", "#NEWLINE#", "(", "reg_mods", ",", "cls_mods", ")", "=", "train_from_dataframe", "(", "df", ",", "train_hyperparameters", "=", "False", ",", "select_features", "=", "False", ",", "output_dir", "=", "output_dir", ",", "model_config_path", "=", "model_config_path", ",", "message_callback", "=", "partial", "(", "self", ".", "_print_to_listbox", ",", "display", ")", ")", "#NEWLINE#", "self", ".", "_print_to_listbox", "(", "display", ",", "'---- FINISHED TRAINING ----'", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [8, 22, 7, "enum_FIELD"], [24, 38, 7, "enum_FIELD"], [40, 50, 7, "enum_FIELD"], [53, 59, 7, "enum_FIELD"], [67, 77, 7, "enum_FIELD"], [93, 99, 7, "enum_FIELD"], [102, 108, 7, "enum_FIELD"], [111, 117, 7, "enum_FIELD"], [125, 143, 7, "enum_FIELD"], [163, 169, 7, "enum_FIELD"], [22, 20, 7, "enum_FIELD"], [38, 36, 7, "enum_FIELD"], [50, 46, 7, "enum_FIELD"], [59, 55, 7, "enum_FIELD"], [77, 74, 7, "enum_FIELD"], [99, 95, 7, "enum_FIELD"], [108, 104, 7, "enum_FIELD"], [117, 113, 7, "enum_FIELD"], [143, 132, 7, "enum_FIELD"], [169, 165, 7, "enum_FIELD"], [20, 17, 7, "enum_FIELD"], [36, 33, 7, "enum_FIELD"], [46, 44, 7, "enum_FIELD"], [55, 54, 7, "enum_FIELD"], [63, 61, 7, "enum_FIELD"], [78, 80, 7, "enum_FIELD"], [82, 89, 7, "enum_FIELD"], [95, 94, 7, "enum_FIELD"], [104, 103, 7, "enum_FIELD"], [113, 112, 7, "enum_FIELD"], [121, 119, 7, "enum_FIELD"], [136, 138, 7, "enum_FIELD"], [140, 142, 7, "enum_FIELD"], [144, 146, 7, "enum_FIELD"], [148, 150, 7, "enum_FIELD"], [152, 159, 7, "enum_FIELD"], [165, 164, 7, "enum_FIELD"], [17, 14, 7, "enum_FIELD"], [17, 18, 7, "enum_FIELD"], [33, 30, 7, "enum_FIELD"], [33, 34, 7, "enum_FIELD"], [44, 43, 7, "enum_FIELD"], [61, 60, 7, "enum_FIELD"], [89, 84, 7, "enum_FIELD"], [119, 118, 7, "enum_FIELD"], [159, 154, 7, "enum_FIELD"], [14, 12, 7, "enum_FIELD"], [14, 15, 7, "enum_FIELD"], [30, 28, 7, "enum_FIELD"], [30, 31, 7, "enum_FIELD"], [87, 86, 7, "enum_FIELD"], [157, 156, 7, "enum_FIELD"], [12, 11, 7, "enum_FIELD"], [28, 27, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [11, 2, 10, "enum_LAST_LEXICAL_USE"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [27, 11, 10, "enum_LAST_LEXICAL_USE"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [49, 9, 10, "enum_LAST_LEXICAL_USE"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [54, 27, 10, "enum_LAST_LEXICAL_USE"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [58, 4, 10, "enum_LAST_LEXICAL_USE"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [64, 49, 10, "enum_LAST_LEXICAL_USE"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [76, 64, 10, "enum_LAST_LEXICAL_USE"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [86, 54, 10, "enum_LAST_LEXICAL_USE"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [90, 58, 10, "enum_LAST_LEXICAL_USE"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [94, 86, 10, "enum_LAST_LEXICAL_USE"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [98, 90, 10, "enum_LAST_LEXICAL_USE"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [103, 94, 10, "enum_LAST_LEXICAL_USE"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [107, 98, 10, "enum_LAST_LEXICAL_USE"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [112, 103, 10, "enum_LAST_LEXICAL_USE"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [116, 107, 10, "enum_LAST_LEXICAL_USE"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [122, 41, 10, "enum_LAST_LEXICAL_USE"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [134, 69, 10, "enum_LAST_LEXICAL_USE"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [146, 25, 10, "enum_LAST_LEXICAL_USE"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [150, 122, 10, "enum_LAST_LEXICAL_USE"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [154, 84, 10, "enum_LAST_LEXICAL_USE"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [156, 112, 10, "enum_LAST_LEXICAL_USE"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [160, 116, 10, "enum_LAST_LEXICAL_USE"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [164, 156, 10, "enum_LAST_LEXICAL_USE"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [168, 160, 10, "enum_LAST_LEXICAL_USE"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [3, 8, 1, "enum_CFG_NEXT"], [8, 24, 1, "enum_CFG_NEXT"], [24, 40, 1, "enum_CFG_NEXT"], [40, 53, 1, "enum_CFG_NEXT"], [53, 67, 1, "enum_CFG_NEXT"], [67, 93, 1, "enum_CFG_NEXT"], [93, 102, 1, "enum_CFG_NEXT"], [102, 111, 1, "enum_CFG_NEXT"], [111, 125, 1, "enum_CFG_NEXT"], [125, 163, 1, "enum_CFG_NEXT"], [11, 2, 3, "enum_LAST_WRITE"], [27, 11, 2, "enum_LAST_READ"], [27, 2, 3, "enum_LAST_WRITE"], [49, 9, 3, "enum_LAST_WRITE"], [54, 27, 2, "enum_LAST_READ"], [54, 2, 3, "enum_LAST_WRITE"], [58, 4, 3, "enum_LAST_WRITE"], [64, 49, 2, "enum_LAST_READ"], [64, 9, 3, "enum_LAST_WRITE"], [76, 64, 2, "enum_LAST_READ"], [76, 9, 3, "enum_LAST_WRITE"], [86, 54, 2, "enum_LAST_READ"], [86, 2, 3, "enum_LAST_WRITE"], [90, 58, 2, "enum_LAST_READ"], [90, 4, 3, "enum_LAST_WRITE"], [94, 86, 2, "enum_LAST_READ"], [94, 2, 3, "enum_LAST_WRITE"], [98, 90, 2, "enum_LAST_READ"], [98, 4, 3, "enum_LAST_WRITE"], [103, 94, 2, "enum_LAST_READ"], [103, 2, 3, "enum_LAST_WRITE"], [107, 98, 2, "enum_LAST_READ"], [107, 4, 3, "enum_LAST_WRITE"], [112, 103, 2, "enum_LAST_READ"], [112, 2, 3, "enum_LAST_WRITE"], [116, 107, 2, "enum_LAST_READ"], [116, 4, 3, "enum_LAST_WRITE"], [122, 41, 3, "enum_LAST_WRITE"], [134, 69, 3, "enum_LAST_WRITE"], [146, 25, 3, "enum_LAST_WRITE"], [150, 122, 2, "enum_LAST_READ"], [150, 41, 3, "enum_LAST_WRITE"], [154, 84, 2, "enum_LAST_READ"], [156, 112, 2, "enum_LAST_READ"], [156, 2, 3, "enum_LAST_WRITE"], [160, 116, 2, "enum_LAST_READ"], [160, 4, 3, "enum_LAST_WRITE"], [164, 156, 2, "enum_LAST_READ"], [164, 2, 3, "enum_LAST_WRITE"], [168, 160, 2, "enum_LAST_READ"], [168, 4, 3, "enum_LAST_WRITE"], [9, 11, 4, "enum_COMPUTED_FROM"], [25, 27, 4, "enum_COMPUTED_FROM"], [41, 49, 4, "enum_COMPUTED_FROM"], [41, 43, 4, "enum_COMPUTED_FROM"], [70, 74, 4, "enum_COMPUTED_FROM"], [70, 76, 4, "enum_COMPUTED_FROM"], [70, 84, 4, "enum_COMPUTED_FROM"], [70, 90, 4, "enum_COMPUTED_FROM"], [70, 86, 4, "enum_COMPUTED_FROM"], [128, 132, 4, "enum_COMPUTED_FROM"], [128, 134, 4, "enum_COMPUTED_FROM"], [128, 146, 4, "enum_COMPUTED_FROM"], [128, 150, 4, "enum_COMPUTED_FROM"], [128, 154, 4, "enum_COMPUTED_FROM"], [128, 160, 4, "enum_COMPUTED_FROM"], [128, 156, 4, "enum_COMPUTED_FROM"]], "error_location": 49, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/scattering-central/saxskit.git", "old_path": "xrsdkit/visualization/gui.py", "hash": "4e384359736c5191648f3a5971ccc7d34fb98b27", "code": "def _train_models(self,display: Any):\n    # TODO: input widget for downsampling distance?\n    # TODO: toggles for hyperparam selection? feature selection?\n    dataset_dir: str = self._vars['io_control']['dataset_dir'].get()\n    output_dir: str = self._vars['io_control']['output_dir'].get() \n    model_config_path: str = os.path.join(dataset_dir,'model_config.yml')\n    self._print_to_listbox(display,'LOADING DATASET FROM: {}'.format(dataset_dir))\n    df, idx_df = read_local_dataset(dataset_dir,downsampling_distance=1.,\n            message_callback=partial(self._print_to_listbox,display))\n    self._print_to_listbox(display,'---- FINISHED LOADING DATASET ----')\n    self._print_to_listbox(display,'BEGINNING TO TRAIN MODELS')\n    self._print_to_listbox(display,'MODEL CONFIG FILE PATH: {}'.format(model_config_path))\n    reg_mods, cls_mods = train_from_dataframe(df, \n            train_hyperparameters=False, select_features=False,\n            output_dir=output_dir, model_config_path=model_config_path,\n            message_callback=partial(self._print_to_listbox,display)\n            )\n    self._print_to_listbox(display,'---- FINISHED TRAINING ----')\n", "rewrite": "ReplaceText(target='output_dir' @(416,41)->(416,52))", "error_line": 5, "has_bug": true, "code_full": "import os\nfrom functools import partial\nfrom typing import Any, Callable, Tuple\n\n\ndef read_local_dataset(dataset_dir: str, downsampling_distance: float, message_callback: Callable) -> Tuple[Any, Any]:\n    return None, None\n\ndef train_from_dataframe(df: Any, train_hyperparameters: bool, select_features: bool, output_dir: str, model_config_path: str, message_callback: Callable) -> Tuple[Any, Any]:\n    return None, None\n\nclass Class:\n    _vars: Any\n\n\n    def _print_to_listbox(self, display: Any, message: str):\n        pass\n\n    def _train_models(self,display: Any):\n        # TODO: input widget for downsampling distance?\n        # TODO: toggles for hyperparam selection? feature selection?\n        dataset_dir: str = self._vars['io_control']['dataset_dir'].get()\n        output_dir: str = self._vars['io_control']['output_dir'].get() \n        model_config_path: str = os.path.join(dataset_dir,'model_config.yml')\n        self._print_to_listbox(display,'LOADING DATASET FROM: {}'.format(dataset_dir))\n        df, idx_df = read_local_dataset(dataset_dir,downsampling_distance=1.,\n                message_callback=partial(self._print_to_listbox,display))\n        self._print_to_listbox(display,'---- FINISHED LOADING DATASET ----')\n        self._print_to_listbox(display,'BEGINNING TO TRAIN MODELS')\n        self._print_to_listbox(display,'MODEL CONFIG FILE PATH: {}'.format(model_config_path))\n        reg_mods, cls_mods = train_from_dataframe(df, \n                train_hyperparameters=False, select_features=False,\n                output_dir=output_dir, model_config_path=model_config_path,\n                message_callback=partial(self._print_to_listbox,display)\n                )\n        self._print_to_listbox(display,'---- FINISHED TRAINING ----')\n", "error_location_char": [334, 345], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def run(", "model", ",", "endpoints", ",", "connector", "=", "None", ",", "credentials", "=", "None", ",", "**kwargs", ":", "Dict", ")", ":", "#NEWLINE#", "#INDENT#", "'Runs a Rasa model.\\n\\n    Args:\\n        model: Path to model archive.\\n        endpoints: Path to endpoints file.\\n        connector: Connector which should be use (overwrites `credentials`\\n        field).\\n        credentials: Path to channel credentials file.\\n        **kwargs: Additional arguments which are passed to\\n        `rasa_core.run.serve_application`.\\n\\n    '", "#NEWLINE#", "import", "rasa_core.run", "#NEWLINE#", "from", "rasa_core.utils", "import", "AvailableEndpoints", "#NEWLINE#", "model_path", "=", "get_model", "(", "model", ")", "#NEWLINE#", "(", "core_path", ",", "nlu_path", ")", "=", "get_model_subdirectories", "(", "model", ")", "#NEWLINE#", "_endpoints", "=", "AvailableEndpoints", ".", "read_endpoints", "(", "endpoints", ")", "#NEWLINE#", "if", "(", "(", "not", "connector", ")", "and", "(", "not", "credentials", ")", ")", ":", "#NEWLINE#", "#INDENT#", "channel", "=", "'cmdline'", "#NEWLINE#", "logger", ".", "info", "(", "'No chat connector configured, falling back to the command line. Use `rasa configure channel` to connectthe bot to e.g. facebook messenger.'", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "channel", "=", "connector", "#NEWLINE#", "#UNINDENT#", "kwargs", "=", "minimal_kwargs", "(", "kwargs", ",", "rasa_core", ".", "run", ".", "serve_application", ")", "#NEWLINE#", "rasa_core", ".", "run", ".", "serve_application", "(", "core_path", ",", "nlu_path", ",", "channel", "=", "channel", ",", "credentials_file", "=", "credentials", ",", "endpoints", "=", "_endpoints", ",", "**", "kwargs", ")", "#NEWLINE#", "shutil", ".", "rmtree", "(", "model_path", ")"], "edges": [[1, 9, 7, "enum_FIELD"], [20, 21, 7, "enum_FIELD"], [30, 34, 7, "enum_FIELD"], [37, 45, 7, "enum_FIELD"], [48, 54, 7, "enum_FIELD"], [70, 64, 7, "enum_FIELD"], [93, 99, 7, "enum_FIELD"], [106, 120, 7, "enum_FIELD"], [132, 136, 7, "enum_FIELD"], [34, 33, 7, "enum_FIELD"], [45, 44, 7, "enum_FIELD"], [54, 52, 7, "enum_FIELD"], [72, 75, 7, "enum_FIELD"], [76, 80, 7, "enum_FIELD"], [88, 91, 7, "enum_FIELD"], [99, 96, 7, "enum_FIELD"], [120, 110, 7, "enum_FIELD"], [136, 134, 7, "enum_FIELD"], [52, 51, 7, "enum_FIELD"], [61, 62, 7, "enum_FIELD"], [66, 67, 7, "enum_FIELD"], [80, 78, 7, "enum_FIELD"], [103, 101, 7, "enum_FIELD"], [110, 108, 7, "enum_FIELD"], [117, 119, 7, "enum_FIELD"], [121, 123, 7, "enum_FIELD"], [125, 127, 7, "enum_FIELD"], [129, 130, 7, "enum_FIELD"], [134, 133, 7, "enum_FIELD"], [78, 77, 7, "enum_FIELD"], [101, 100, 7, "enum_FIELD"], [108, 107, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [35, 2, 10, "enum_LAST_LEXICAL_USE"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [46, 35, 10, "enum_LAST_LEXICAL_USE"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [55, 4, 10, "enum_LAST_LEXICAL_USE"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [62, 6, 10, "enum_LAST_LEXICAL_USE"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [67, 10, 10, "enum_LAST_LEXICAL_USE"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 88, 9, "enum_NEXT_SYNTAX"], [89, 73, 10, "enum_LAST_LEXICAL_USE"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [91, 62, 10, "enum_LAST_LEXICAL_USE"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [98, 94, 10, "enum_LAST_LEXICAL_USE"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [107, 100, 10, "enum_LAST_LEXICAL_USE"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [113, 39, 10, "enum_LAST_LEXICAL_USE"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [115, 41, 10, "enum_LAST_LEXICAL_USE"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [119, 89, 10, "enum_LAST_LEXICAL_USE"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [123, 67, 10, "enum_LAST_LEXICAL_USE"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [127, 49, 10, "enum_LAST_LEXICAL_USE"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [130, 98, 10, "enum_LAST_LEXICAL_USE"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [137, 31, 10, "enum_LAST_LEXICAL_USE"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [8, 12, 1, "enum_CFG_NEXT"], [12, 1, 1, "enum_CFG_NEXT"], [9, 20, 1, "enum_CFG_NEXT"], [20, 23, 1, "enum_CFG_NEXT"], [23, 27, 1, "enum_CFG_NEXT"], [27, 30, 1, "enum_CFG_NEXT"], [30, 37, 1, "enum_CFG_NEXT"], [37, 48, 1, "enum_CFG_NEXT"], [48, 64, 1, "enum_CFG_NEXT"], [64, 88, 1, "enum_CFG_NEXT"], [64, 72, 1, "enum_CFG_NEXT"], [72, 76, 1, "enum_CFG_NEXT"], [76, 93, 1, "enum_CFG_NEXT"], [88, 93, 1, "enum_CFG_NEXT"], [93, 106, 1, "enum_CFG_NEXT"], [106, 132, 1, "enum_CFG_NEXT"], [35, 2, 3, "enum_LAST_WRITE"], [46, 35, 2, "enum_LAST_READ"], [46, 2, 3, "enum_LAST_WRITE"], [55, 4, 3, "enum_LAST_WRITE"], [62, 6, 3, "enum_LAST_WRITE"], [67, 10, 3, "enum_LAST_WRITE"], [91, 62, 2, "enum_LAST_READ"], [91, 6, 3, "enum_LAST_WRITE"], [94, 98, 2, "enum_LAST_READ"], [107, 100, 2, "enum_LAST_READ"], [113, 39, 3, "enum_LAST_WRITE"], [115, 41, 3, "enum_LAST_WRITE"], [119, 89, 3, "enum_LAST_WRITE"], [119, 73, 3, "enum_LAST_WRITE"], [123, 67, 2, "enum_LAST_READ"], [123, 10, 3, "enum_LAST_WRITE"], [127, 49, 3, "enum_LAST_WRITE"], [130, 98, 2, "enum_LAST_READ"], [130, 94, 3, "enum_LAST_WRITE"], [137, 31, 3, "enum_LAST_WRITE"], [31, 33, 4, "enum_COMPUTED_FROM"], [31, 35, 4, "enum_COMPUTED_FROM"], [40, 44, 4, "enum_COMPUTED_FROM"], [40, 46, 4, "enum_COMPUTED_FROM"], [49, 55, 4, "enum_COMPUTED_FROM"], [49, 51, 4, "enum_COMPUTED_FROM"], [94, 96, 4, "enum_COMPUTED_FROM"], [94, 98, 4, "enum_COMPUTED_FROM"], [94, 100, 4, "enum_COMPUTED_FROM"], [89, 91, 4, "enum_COMPUTED_FROM"]], "error_location": 46, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/RasaHQ/rasa.git", "old_path": "rasa/run.py", "hash": "90a98e954b209a05a168e86e78d4ad90e12d8869", "code": "def run(model: Text, endpoints: Text, connector: Optional[Text] = None,\n        credentials: Optional[Text] = None, **kwargs: Dict):\n    \"\"\"Runs a Rasa model.\n\n    Args:\n        model: Path to model archive.\n        endpoints: Path to endpoints file.\n        connector: Connector which should be use (overwrites `credentials`\n        field).\n        credentials: Path to channel credentials file.\n        **kwargs: Additional arguments which are passed to\n        `rasa_core.run.serve_application`.\n\n    \"\"\"\n    import rasa_core.run\n    from rasa_core.utils import AvailableEndpoints\n\n    model_path: Optional[Text] = get_model(model)\n    core_path, nlu_path = get_model_subdirectories(model)\n    _endpoints: Any = AvailableEndpoints.read_endpoints(endpoints)\n\n    if not connector and not credentials:\n        channel: Optional[Text] = \"cmdline\"\n        logger.info(\"No chat connector configured, falling back to the \"\n                    \"command line. Use `rasa configure channel` to connect\"\n                    \"the bot to e.g. facebook messenger.\")\n    else:\n        channel: Optional[Text] = connector\n\n    kwargs = minimal_kwargs(kwargs, rasa_core.run.serve_application)\n    rasa_core.run.serve_application(core_path,\n                                    nlu_path,\n                                    channel=channel,\n                                    credentials_file=credentials,\n                                    endpoints=_endpoints,\n                                    **kwargs)\n    shutil.rmtree(model_path)\n", "rewrite": "ReplaceText(target='model_path' @(34,51)->(34,56))", "error_line": 18, "has_bug": true, "code_full": "import logging\nimport shutil\nfrom typing import Any, Callable, Dict, Optional, Text, Tuple\n\nlogger = logging.getLogger(__name__)\n\ndef get_model(model: Text) -> Optional[Text]:\n    return None\n\ndef get_model_subdirectories(unpacked_model_path: Text) -> Tuple[Text, Text]:\n    return \"\", \"\"\n\ndef minimal_kwargs(kwargs: Dict[Text, Any], func: Callable) -> Dict[Text, Any]:\n    return {}\n\ndef run(model: Text, endpoints: Text, connector: Optional[Text] = None,\n        credentials: Optional[Text] = None, **kwargs: Dict):\n    \"\"\"Runs a Rasa model.\n\n    Args:\n        model: Path to model archive.\n        endpoints: Path to endpoints file.\n        connector: Connector which should be use (overwrites `credentials`\n        field).\n        credentials: Path to channel credentials file.\n        **kwargs: Additional arguments which are passed to\n        `rasa_core.run.serve_application`.\n\n    \"\"\"\n    import rasa_core.run\n    from rasa_core.utils import AvailableEndpoints\n\n    model_path: Optional[Text] = get_model(model)\n    core_path, nlu_path = get_model_subdirectories(model)\n    _endpoints: Any = AvailableEndpoints.read_endpoints(endpoints)\n\n    if not connector and not credentials:\n        channel: Optional[Text] = \"cmdline\"\n        logger.info(\"No chat connector configured, falling back to the \"\n                    \"command line. Use `rasa configure channel` to connect\"\n                    \"the bot to e.g. facebook messenger.\")\n    else:\n        channel: Optional[Text] = connector\n\n    kwargs = minimal_kwargs(kwargs, rasa_core.run.serve_application)\n    rasa_core.run.serve_application(core_path,\n                                    nlu_path,\n                                    channel=channel,\n                                    credentials_file=credentials,\n                                    endpoints=_endpoints,\n                                    **kwargs)\n    shutil.rmtree(model_path)\n", "error_location_char": [628, 633], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def do_lc(", "tpf", ",", "ts", ",", "splits", ",", "sub", ",", "order", ",", "maxiter", "=", "101", ",", "split_times", "=", "None", ",", "w_init", "=", "None", ",", "random_init", "=", "False", ",", "thresh", "=", "(", "-", "1.0", ")", ",", "minflux", "=", "(", "-", "100.0", ")", ",", "consensus", "=", "False", ",", "analytic", "=", "False", ",", "sigclip", "=", "False", ",", "verbose", "=", "True", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "split_times", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "assert", "(", "np", ".", "min", "(", "split_times", ")", ">", "np", ".", "min", "(", "ts", "[", "'time'", "]", ")", ")", ",", "'Minimum time split must be during campaign'", "#NEWLINE#", "splits", "=", "[", "np", ".", "min", "(", "np", ".", "where", "(", "(", "ts", "[", "'time'", "]", ">", "split", ")", ")", ")", "for", "split", "in", "split_times", "]", "#NEWLINE#", "all_splits", "=", "[", "None", ",", "*", "splits", ",", "None", "]", "#NEWLINE#", "tss", "=", "[", "]", "#NEWLINE#", "cad1", "=", "[", "]", "#NEWLINE#", "cad2", "=", "[", "]", "#NEWLINE#", "sat", "=", "[", "]", "#NEWLINE#", "weightmap", "=", "[", "]", "#NEWLINE#", "for", "(", "j", ",", "low", ")", "in", "enumerate", "(", "all_splits", "[", ":", "(", "-", "1", ")", "]", ")", ":", "#NEWLINE#", "#INDENT#", "high", "=", "all_splits", "[", "(", "j", "+", "1", ")", "]", "#NEWLINE#", "(", "pff", ",", "tsj", ",", "weights", ",", "pmap", ",", "pixels_sub", ")", "=", "do_lc", "(", "tpf", ",", "ts", ",", "(", "low", ",", "high", ")", ",", "sub", ",", "order", ",", "maxiter", "=", "101", ",", "split_times", "=", "None", ",", "w_init", "=", "w_init", ",", "random_init", "=", "random_init", ",", "thresh", "=", "thresh", ",", "minflux", "=", "minflux", ",", "consensus", "=", "consensus", ",", "analytic", "=", "analytic", ",", "sigclip", "=", "sigclip", ",", "verbose", "=", "verbose", ")", "#NEWLINE#", "tss", ".", "append", "(", "tsj", ")", "#NEWLINE#", "if", "(", "low", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "cad1", ".", "append", "(", "ts", "[", "'cadence'", "]", "[", "0", "]", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "cad1", ".", "append", "(", "ts", "[", "'cadence'", "]", "[", "low", "]", ")", "#NEWLINE#", "#UNINDENT#", "if", "(", "high", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "cad1", ".", "append", "(", "ts", "[", "'cadence'", "]", "[", "(", "-", "1", ")", "]", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "cad2", ".", "append", "(", "ts", "[", "'cadence'", "]", "[", "high", "]", ")", "#NEWLINE#", "#UNINDENT#", "sat", ".", "append", "(", "pmap", "[", "'sat_pixels'", "]", ")", "#NEWLINE#", "weightmap", ".", "append", "(", "pmap", "[", "'weightmap'", "]", ")", "#NEWLINE#", "#UNINDENT#", "wmap", "=", "{", "'initial_cadence'", ":", "cad1", ",", "'final_cadence'", ":", "cad2", ",", "'sat_pixels'", ":", "sat", ",", "'weightmap'", ":", "weightmap", "}", "#NEWLINE#", "ts", "=", "stitch", "(", "tss", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "(", "splits", "[", "0", "]", "is", "None", ")", "and", "(", "splits", "[", "1", "]", "is not", "None", ")", ")", ":", "#NEWLINE#", "#INDENT#", "c1", "=", "ts", "[", "'cadence'", "]", "[", "0", "]", "#NEWLINE#", "c2", "=", "ts", "[", "'cadence'", "]", "[", "splits", "[", "1", "]", "]", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "(", "splits", "[", "0", "]", "is not", "None", ")", "and", "(", "splits", "[", "1", "]", "is", "None", ")", ")", ":", "#NEWLINE#", "#INDENT#", "c1", "=", "ts", "[", "'cadence'", "]", "[", "splits", "[", "0", "]", "]", "#NEWLINE#", "c2", "=", "ts", "[", "'cadence'", "]", "[", "(", "-", "1", ")", "]", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "(", "splits", "[", "0", "]", "is", "None", ")", "and", "(", "splits", "[", "1", "]", "is", "None", ")", ")", ":", "#NEWLINE#", "#INDENT#", "c1", "=", "ts", "[", "'cadence'", "]", "[", "0", "]", "#NEWLINE#", "c2", "=", "ts", "[", "'cadence'", "]", "[", "(", "-", "1", ")", "]", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "c1", "=", "ts", "[", "'cadence'", "]", "[", "splits", "[", "0", "]", "]", "#NEWLINE#", "c2", "=", "ts", "[", "'cadence'", "]", "[", "splits", "[", "1", "]", "]", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "if", "verbose", ":", "#NEWLINE#", "#INDENT#", "if", "(", "(", "splits", "[", "0", "]", "is", "None", ")", "and", "(", "splits", "[", "1", "]", "is not", "None", ")", ")", ":", "#NEWLINE#", "#INDENT#", "print", "(", "'Taking cadences from beginning to'", ",", "splits", "[", "1", "]", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "(", "splits", "[", "0", "]", "is not", "None", ")", "and", "(", "splits", "[", "1", "]", "is", "None", ")", ")", ":", "#NEWLINE#", "#INDENT#", "print", "(", "'Taking cadences from'", ",", "splits", "[", "0", "]", ",", "'to end'", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "(", "splits", "[", "0", "]", "is", "None", ")", "and", "(", "splits", "[", "1", "]", "is", "None", ")", ")", ":", "#NEWLINE#", "#INDENT#", "print", "(", "'Taking cadences from beginning to end'", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "print", "(", "'Taking cadences from'", ",", "splits", "[", "0", "]", ",", "'to'", ",", "splits", "[", "1", "]", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "(", "tpf", ",", "ts", ")", "=", "get_slice", "(", "tpf", ",", "ts", ",", "splits", "[", "0", "]", ",", "splits", "[", "1", "]", ")", "#NEWLINE#", "(", "pixels", ",", "tsd", ",", "goodcad", ",", "mapping", ",", "sat", ")", "=", "censor_tpf", "(", "tpf", ",", "ts", ",", "thresh", "=", "thresh", ",", "minflux", "=", "minflux", ",", "verbose", "=", "verbose", ",", "order", "=", "order", ",", "sub", "=", "sub", ")", "#NEWLINE#", "pixelmap", "=", "np", ".", "zeros", "(", "(", "tpf", ".", "shape", "[", "2", "]", ",", "tpf", ".", "shape", "[", "1", "]", ")", ")", "#NEWLINE#", "if", "verbose", ":", "#NEWLINE#", "#INDENT#", "print", "(", "'Censored TPF'", ")", "#NEWLINE#", "#UNINDENT#", "if", "consensus", ":", "#NEWLINE#", "#INDENT#", "assert", "(", "sub", ">", "1", ")", ",", "'Must be subsampled to use consensus'", "#NEWLINE#", "if", "verbose", ":", "#NEWLINE#", "#INDENT#", "print", "(", "(", "'Subsampling by a factor of %d'", "%", "sub", ")", ")", "#NEWLINE#", "#UNINDENT#", "weights", "=", "np", ".", "zeros", "(", "pixels", ".", "shape", "[", "0", "]", ")", "#NEWLINE#", "opt_lcs", "=", "np", ".", "zeros", "(", "(", "pixels", "[", "(", ":", ":", "sub", ",", ":", ")", "]", ".", "shape", "[", "1", "]", ",", "sub", ")", ")", "#NEWLINE#", "if", "random_init", ":", "#NEWLINE#", "#INDENT#", "w_init", "=", "np", ".", "random", ".", "rand", "(", "pixels", "[", "(", ":", ":", "sub", ",", ":", ")", "]", ".", "shape", "[", "0", "]", ")", "#NEWLINE#", "w_init", "/=", "np", ".", "sum", "(", "w_init", ")", "#NEWLINE#", "#UNINDENT#", "for", "j", "in", "range", "(", "sub", ")", ":", "#NEWLINE#", "#INDENT#", "pixels_sub", "=", "pixels", "[", "(", "j", ":", ":", "sub", ",", ":", ")", "]", "#NEWLINE#", "if", "verbose", ":", "#NEWLINE#", "#INDENT#", "print", "(", "'Calculating weights'", ")", "#NEWLINE#", "#UNINDENT#", "(", "weights", "[", "j", ":", ":", "sub", "]", ",", "opt_lcs", "[", "(", ":", ",", "j", ")", "]", ")", "=", "tv_tpf", "(", "pixels_sub", ",", "order", "=", "order", ",", "maxiter", "=", "maxiter", ",", "w_init", "=", "w_init", ",", "analytic", "=", "analytic", ",", "sigclip", "=", "sigclip", ",", "verbose", "=", "verbose", ")", "#NEWLINE#", "if", "verbose", ":", "#NEWLINE#", "#INDENT#", "print", "(", "'Calculated weights!'", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "norm_lcs", "=", "(", "opt_lcs", "/", "np", ".", "nanmedian", "(", "opt_lcs", ",", "axis", "=", "0", ")", ")", "#NEWLINE#", "opt_lc", "=", "np", ".", "nanmean", "(", "norm_lcs", ",", "axis", "=", "1", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "pixels_sub", "=", "pixels", "[", "(", ":", ":", "sub", ",", ":", ")", "]", "#NEWLINE#", "if", "verbose", ":", "#NEWLINE#", "#INDENT#", "print", "(", "(", "'Subsampling by a factor of %d'", "%", "sub", ")", ")", "#NEWLINE#", "#UNINDENT#", "if", "verbose", ":", "#NEWLINE#", "#INDENT#", "print", "(", "'Calculating weights'", ")", "#NEWLINE#", "#UNINDENT#", "if", "random_init", ":", "#NEWLINE#", "#INDENT#", "w_init", "=", "np", ".", "random", ".", "rand", "(", "pixels_sub", ".", "shape", "[", "0", "]", ")", "#NEWLINE#", "w_init", "/=", "np", ".", "sum", "(", "w_init", ")", "#NEWLINE#", "#UNINDENT#", "(", "weights", ",", "opt_lc", ")", "=", "tv_tpf", "(", "pixels_sub", ",", "order", "=", "order", ",", "maxiter", "=", "maxiter", ",", "w_init", "=", "w_init", ",", "analytic", "=", "analytic", ",", "verbose", "=", "verbose", ")", "#NEWLINE#", "if", "verbose", ":", "#NEWLINE#", "#INDENT#", "print", "(", "'Calculated weights!'", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "ts", "[", "'corr_flux'", "]", "=", "(", "np", ".", "nan", "*", "np", ".", "ones_like", "(", "ts", "[", "'x'", "]", ")", ")", "#NEWLINE#", "ts", "[", "'corr_flux'", "]", "[", "goodcad", "]", "=", "opt_lc", "#NEWLINE#", "if", "(", "sub", "==", "1", ")", ":", "#NEWLINE#", "#INDENT#", "pixelmap", ".", "ravel", "(", ")", "[", "mapping", "]", "=", "weights", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "consensus", ":", "#NEWLINE#", "#INDENT#", "pixelmap", ".", "ravel", "(", ")", "[", "mapping", "]", "=", "(", "weights", "/", "float", "(", "sub", ")", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "pixelmap", ".", "ravel", "(", ")", "[", "mapping", "[", "0", "]", "[", ":", ":", "sub", "]", "]", "=", "weights", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "wmap", "=", "{", "'initial_cadence'", ":", "c1", ",", "'final_cadence'", ":", "c2", ",", "'sat_pixels'", ":", "sat", ",", "'weightmap'", ":", "pixelmap", "}", "#NEWLINE#", "#UNINDENT#", "return", "(", "tpf", ",", "ts", ",", "weights", ",", "wmap", ",", "pixels_sub", ")"], "edges": [[1, 25, 7, "enum_FIELD"], [67, 64, 7, "enum_FIELD"], [1298, 1303, 7, "enum_FIELD"], [31, 32, 7, "enum_FIELD"], [38, 39, 7, "enum_FIELD"], [64, 63, 7, "enum_FIELD"], [70, 78, 7, "enum_FIELD"], [70, 90, 7, "enum_FIELD"], [91, 94, 7, "enum_FIELD"], [118, 123, 7, "enum_FIELD"], [129, 132, 7, "enum_FIELD"], [134, 137, 7, "enum_FIELD"], [139, 142, 7, "enum_FIELD"], [144, 147, 7, "enum_FIELD"], [149, 152, 7, "enum_FIELD"], [161, 158, 7, "enum_FIELD"], [161, 163, 7, "enum_FIELD"], [368, 379, 7, "enum_FIELD"], [388, 392, 7, "enum_FIELD"], [421, 411, 7, "enum_FIELD"], [586, 587, 7, "enum_FIELD"], [722, 734, 7, "enum_FIELD"], [745, 767, 7, "enum_FIELD"], [784, 790, 7, "enum_FIELD"], [808, 809, 7, "enum_FIELD"], [821, 820, 7, "enum_FIELD"], [1171, 1181, 7, "enum_FIELD"], [1192, 1201, 7, "enum_FIELD"], [1209, 1206, 7, "enum_FIELD"], [1276, 1287, 7, "enum_FIELD"], [78, 75, 7, "enum_FIELD"], [94, 98, 7, "enum_FIELD"], [163, 162, 7, "enum_FIELD"], [175, 179, 7, "enum_FIELD"], [186, 222, 7, "enum_FIELD"], [255, 259, 7, "enum_FIELD"], [269, 266, 7, "enum_FIELD"], [310, 307, 7, "enum_FIELD"], [347, 351, 7, "enum_FIELD"], [357, 361, 7, "enum_FIELD"], [392, 391, 7, "enum_FIELD"], [423, 430, 7, "enum_FIELD"], [433, 440, 7, "enum_FIELD"], [472, 462, 7, "enum_FIELD"], [611, 601, 7, "enum_FIELD"], [734, 729, 7, "enum_FIELD"], [767, 758, 7, "enum_FIELD"], [790, 788, 7, "enum_FIELD"], [812, 814, 7, "enum_FIELD"], [824, 827, 7, "enum_FIELD"], [824, 831, 7, "enum_FIELD"], [833, 834, 7, "enum_FIELD"], [847, 853, 7, "enum_FIELD"], [861, 867, 7, "enum_FIELD"], [889, 890, 7, "enum_FIELD"], [931, 930, 7, "enum_FIELD"], [931, 933, 7, "enum_FIELD"], [1023, 1028, 7, "enum_FIELD"], [1040, 1048, 7, "enum_FIELD"], [1058, 1062, 7, "enum_FIELD"], [1072, 1073, 7, "enum_FIELD"], [1087, 1088, 7, "enum_FIELD"], [1098, 1099, 7, "enum_FIELD"], [1128, 1146, 7, "enum_FIELD"], [1160, 1161, 7, "enum_FIELD"], [1173, 1172, 7, "enum_FIELD"], [1173, 1174, 7, "enum_FIELD"], [1181, 1179, 7, "enum_FIELD"], [1181, 1185, 7, "enum_FIELD"], [1197, 1194, 7, "enum_FIELD"], [1197, 1198, 7, "enum_FIELD"], [1206, 1205, 7, "enum_FIELD"], [1211, 1221, 7, "enum_FIELD"], [1230, 1229, 7, "enum_FIELD"], [75, 73, 7, "enum_FIELD"], [82, 80, 7, "enum_FIELD"], [98, 96, 7, "enum_FIELD"], [113, 114, 7, "enum_FIELD"], [113, 116, 7, "enum_FIELD"], [124, 125, 7, "enum_FIELD"], [165, 164, 7, "enum_FIELD"], [165, 166, 7, "enum_FIELD"], [179, 178, 7, "enum_FIELD"], [179, 182, 7, "enum_FIELD"], [222, 199, 7, "enum_FIELD"], [259, 257, 7, "enum_FIELD"], [266, 265, 7, "enum_FIELD"], [271, 275, 7, "enum_FIELD"], [289, 293, 7, "enum_FIELD"], [307, 306, 7, "enum_FIELD"], [312, 316, 7, "enum_FIELD"], [333, 337, 7, "enum_FIELD"], [351, 349, 7, "enum_FIELD"], [361, 359, 7, "enum_FIELD"], [408, 405, 7, "enum_FIELD"], [417, 414, 7, "enum_FIELD"], [430, 427, 7, "enum_FIELD"], [430, 431, 7, "enum_FIELD"], [440, 437, 7, "enum_FIELD"], [440, 442, 7, "enum_FIELD"], [474, 481, 7, "enum_FIELD"], [487, 494, 7, "enum_FIELD"], [526, 516, 7, "enum_FIELD"], [613, 617, 7, "enum_FIELD"], [649, 639, 7, "enum_FIELD"], [736, 735, 7, "enum_FIELD"], [736, 737, 7, "enum_FIELD"], [741, 740, 7, "enum_FIELD"], [741, 742, 7, "enum_FIELD"], [764, 766, 7, "enum_FIELD"], [768, 770, 7, "enum_FIELD"], [772, 774, 7, "enum_FIELD"], [776, 778, 7, "enum_FIELD"], [780, 782, 7, "enum_FIELD"], [788, 787, 7, "enum_FIELD"], [814, 813, 7, "enum_FIELD"], [827, 826, 7, "enum_FIELD"], [837, 839, 7, "enum_FIELD"], [853, 851, 7, "enum_FIELD"], [867, 865, 7, "enum_FIELD"], [893, 901, 7, "enum_FIELD"], [918, 919, 7, "enum_FIELD"], [918, 924, 7, "enum_FIELD"], [933, 932, 7, "enum_FIELD"], [938, 942, 7, "enum_FIELD"], [953, 954, 7, "enum_FIELD"], [963, 994, 7, "enum_FIELD"], [1012, 1013, 7, "enum_FIELD"], [1028, 1027, 7, "enum_FIELD"], [1028, 1034, 7, "enum_FIELD"], [1048, 1044, 7, "enum_FIELD"], [1062, 1061, 7, "enum_FIELD"], [1062, 1067, 7, "enum_FIELD"], [1076, 1078, 7, "enum_FIELD"], [1091, 1093, 7, "enum_FIELD"], [1102, 1110, 7, "enum_FIELD"], [1118, 1119, 7, "enum_FIELD"], [1118, 1124, 7, "enum_FIELD"], [1146, 1135, 7, "enum_FIELD"], [1164, 1166, 7, "enum_FIELD"], [1179, 1178, 7, "enum_FIELD"], [1185, 1183, 7, "enum_FIELD"], [1194, 1193, 7, "enum_FIELD"], [1194, 1195, 7, "enum_FIELD"], [1217, 1215, 7, "enum_FIELD"], [1217, 1218, 7, "enum_FIELD"], [1232, 1244, 7, "enum_FIELD"], [1255, 1273, 7, "enum_FIELD"], [73, 72, 7, "enum_FIELD"], [80, 79, 7, "enum_FIELD"], [84, 83, 7, "enum_FIELD"], [84, 85, 7, "enum_FIELD"], [96, 95, 7, "enum_FIELD"], [102, 100, 7, "enum_FIELD"], [166, 168, 7, "enum_FIELD"], [182, 181, 7, "enum_FIELD"], [182, 183, 7, "enum_FIELD"], [215, 217, 7, "enum_FIELD"], [219, 221, 7, "enum_FIELD"], [223, 225, 7, "enum_FIELD"], [227, 229, 7, "enum_FIELD"], [231, 233, 7, "enum_FIELD"], [235, 237, 7, "enum_FIELD"], [239, 241, 7, "enum_FIELD"], [243, 245, 7, "enum_FIELD"], [247, 249, 7, "enum_FIELD"], [251, 253, 7, "enum_FIELD"], [257, 256, 7, "enum_FIELD"], [275, 273, 7, "enum_FIELD"], [293, 291, 7, "enum_FIELD"], [316, 314, 7, "enum_FIELD"], [337, 335, 7, "enum_FIELD"], [349, 348, 7, "enum_FIELD"], [353, 352, 7, "enum_FIELD"], [353, 354, 7, "enum_FIELD"], [359, 358, 7, "enum_FIELD"], [363, 362, 7, "enum_FIELD"], [363, 364, 7, "enum_FIELD"], [405, 404, 7, "enum_FIELD"], [405, 406, 7, "enum_FIELD"], [414, 413, 7, "enum_FIELD"], [414, 415, 7, "enum_FIELD"], [427, 426, 7, "enum_FIELD"], [427, 428, 7, "enum_FIELD"], [437, 436, 7, "enum_FIELD"], [437, 438, 7, "enum_FIELD"], [442, 441, 7, "enum_FIELD"], [442, 443, 7, "enum_FIELD"], [459, 456, 7, "enum_FIELD"], [468, 465, 7, "enum_FIELD"], [481, 478, 7, "enum_FIELD"], [481, 483, 7, "enum_FIELD"], [494, 491, 7, "enum_FIELD"], [494, 496, 7, "enum_FIELD"], [528, 535, 7, "enum_FIELD"], [538, 545, 7, "enum_FIELD"], [556, 563, 7, "enum_FIELD"], [569, 576, 7, "enum_FIELD"], [598, 595, 7, "enum_FIELD"], [607, 604, 7, "enum_FIELD"], [617, 614, 7, "enum_FIELD"], [651, 655, 7, "enum_FIELD"], [689, 679, 7, "enum_FIELD"], [795, 793, 7, "enum_FIELD"], [795, 796, 7, "enum_FIELD"], [802, 800, 7, "enum_FIELD"], [802, 803, 7, "enum_FIELD"], [839, 838, 7, "enum_FIELD"], [851, 850, 7, "enum_FIELD"], [857, 855, 7, "enum_FIELD"], [857, 858, 7, "enum_FIELD"], [865, 864, 7, "enum_FIELD"], [901, 899, 7, "enum_FIELD"], [924, 922, 7, "enum_FIELD"], [942, 941, 7, "enum_FIELD"], [942, 948, 7, "enum_FIELD"], [957, 959, 7, "enum_FIELD"], [994, 983, 7, "enum_FIELD"], [1016, 1018, 7, "enum_FIELD"], [1034, 1030, 7, "enum_FIELD"], [1044, 1043, 7, "enum_FIELD"], [1049, 1051, 7, "enum_FIELD"], [1078, 1077, 7, "enum_FIELD"], [1093, 1092, 7, "enum_FIELD"], [1110, 1108, 7, "enum_FIELD"], [1124, 1122, 7, "enum_FIELD"], [1139, 1141, 7, "enum_FIELD"], [1143, 1145, 7, "enum_FIELD"], [1147, 1149, 7, "enum_FIELD"], [1151, 1153, 7, "enum_FIELD"], [1155, 1157, 7, "enum_FIELD"], [1166, 1165, 7, "enum_FIELD"], [1183, 1182, 7, "enum_FIELD"], [1187, 1186, 7, "enum_FIELD"], [1187, 1188, 7, "enum_FIELD"], [1215, 1213, 7, "enum_FIELD"], [1238, 1236, 7, "enum_FIELD"], [1238, 1239, 7, "enum_FIELD"], [1244, 1243, 7, "enum_FIELD"], [1244, 1246, 7, "enum_FIELD"], [1261, 1259, 7, "enum_FIELD"], [1261, 1266, 7, "enum_FIELD"], [100, 99, 7, "enum_FIELD"], [108, 105, 7, "enum_FIELD"], [168, 169, 7, "enum_FIELD"], [273, 272, 7, "enum_FIELD"], [280, 277, 7, "enum_FIELD"], [280, 281, 7, "enum_FIELD"], [291, 290, 7, "enum_FIELD"], [298, 295, 7, "enum_FIELD"], [298, 299, 7, "enum_FIELD"], [314, 313, 7, "enum_FIELD"], [321, 318, 7, "enum_FIELD"], [321, 323, 7, "enum_FIELD"], [335, 334, 7, "enum_FIELD"], [342, 339, 7, "enum_FIELD"], [342, 343, 7, "enum_FIELD"], [456, 455, 7, "enum_FIELD"], [456, 457, 7, "enum_FIELD"], [465, 464, 7, "enum_FIELD"], [465, 466, 7, "enum_FIELD"], [478, 477, 7, "enum_FIELD"], [478, 479, 7, "enum_FIELD"], [483, 482, 7, "enum_FIELD"], [483, 484, 7, "enum_FIELD"], [491, 490, 7, "enum_FIELD"], [491, 492, 7, "enum_FIELD"], [496, 497, 7, "enum_FIELD"], [513, 510, 7, "enum_FIELD"], [522, 519, 7, "enum_FIELD"], [535, 532, 7, "enum_FIELD"], [535, 536, 7, "enum_FIELD"], [545, 542, 7, "enum_FIELD"], [545, 547, 7, "enum_FIELD"], [563, 560, 7, "enum_FIELD"], [563, 565, 7, "enum_FIELD"], [576, 573, 7, "enum_FIELD"], [576, 578, 7, "enum_FIELD"], [595, 594, 7, "enum_FIELD"], [595, 596, 7, "enum_FIELD"], [604, 603, 7, "enum_FIELD"], [604, 605, 7, "enum_FIELD"], [619, 618, 7, "enum_FIELD"], [619, 620, 7, "enum_FIELD"], [636, 633, 7, "enum_FIELD"], [645, 642, 7, "enum_FIELD"], [655, 652, 7, "enum_FIELD"], [691, 693, 7, "enum_FIELD"], [701, 710, 7, "enum_FIELD"], [793, 792, 7, "enum_FIELD"], [800, 799, 7, "enum_FIELD"], [842, 841, 7, "enum_FIELD"], [842, 843, 7, "enum_FIELD"], [855, 854, 7, "enum_FIELD"], [881, 879, 7, "enum_FIELD"], [881, 882, 7, "enum_FIELD"], [899, 897, 7, "enum_FIELD"], [914, 912, 7, "enum_FIELD"], [914, 915, 7, "enum_FIELD"], [922, 921, 7, "enum_FIELD"], [959, 958, 7, "enum_FIELD"], [966, 965, 7, "enum_FIELD"], [966, 968, 7, "enum_FIELD"], [974, 973, 7, "enum_FIELD"], [974, 977, 7, "enum_FIELD"], [987, 989, 7, "enum_FIELD"], [991, 993, 7, "enum_FIELD"], [995, 997, 7, "enum_FIELD"], [999, 1001, 7, "enum_FIELD"], [1003, 1005, 7, "enum_FIELD"], [1007, 1009, 7, "enum_FIELD"], [1018, 1017, 7, "enum_FIELD"], [1030, 1029, 7, "enum_FIELD"], [1035, 1037, 7, "enum_FIELD"], [1064, 1066, 7, "enum_FIELD"], [1081, 1080, 7, "enum_FIELD"], [1081, 1082, 7, "enum_FIELD"], [1108, 1106, 7, "enum_FIELD"], [1114, 1112, 7, "enum_FIELD"], [1114, 1115, 7, "enum_FIELD"], [1122, 1121, 7, "enum_FIELD"], [1213, 1212, 7, "enum_FIELD"], [1236, 1234, 7, "enum_FIELD"], [1246, 1245, 7, "enum_FIELD"], [1259, 1257, 7, "enum_FIELD"], [1266, 1263, 7, "enum_FIELD"], [1266, 1267, 7, "enum_FIELD"], [105, 104, 7, "enum_FIELD"], [105, 106, 7, "enum_FIELD"], [277, 276, 7, "enum_FIELD"], [277, 278, 7, "enum_FIELD"], [295, 294, 7, "enum_FIELD"], [295, 296, 7, "enum_FIELD"], [318, 317, 7, "enum_FIELD"], [318, 319, 7, "enum_FIELD"], [323, 324, 7, "enum_FIELD"], [339, 338, 7, "enum_FIELD"], [339, 340, 7, "enum_FIELD"], [510, 509, 7, "enum_FIELD"], [510, 511, 7, "enum_FIELD"], [519, 518, 7, "enum_FIELD"], [519, 520, 7, "enum_FIELD"], [532, 531, 7, "enum_FIELD"], [532, 533, 7, "enum_FIELD"], [542, 541, 7, "enum_FIELD"], [542, 543, 7, "enum_FIELD"], [547, 548, 7, "enum_FIELD"], [560, 559, 7, "enum_FIELD"], [560, 561, 7, "enum_FIELD"], [565, 564, 7, "enum_FIELD"], [565, 566, 7, "enum_FIELD"], [573, 572, 7, "enum_FIELD"], [573, 574, 7, "enum_FIELD"], [578, 577, 7, "enum_FIELD"], [578, 579, 7, "enum_FIELD"], [633, 632, 7, "enum_FIELD"], [633, 634, 7, "enum_FIELD"], [642, 641, 7, "enum_FIELD"], [642, 643, 7, "enum_FIELD"], [657, 656, 7, "enum_FIELD"], [657, 658, 7, "enum_FIELD"], [676, 673, 7, "enum_FIELD"], [685, 682, 7, "enum_FIELD"], [693, 692, 7, "enum_FIELD"], [710, 702, 7, "enum_FIELD"], [879, 870, 7, "enum_FIELD"], [897, 896, 7, "enum_FIELD"], [912, 903, 7, "enum_FIELD"], [945, 944, 7, "enum_FIELD"], [945, 947, 7, "enum_FIELD"], [968, 967, 7, "enum_FIELD"], [968, 970, 7, "enum_FIELD"], [1106, 1105, 7, "enum_FIELD"], [1112, 1111, 7, "enum_FIELD"], [1234, 1233, 7, "enum_FIELD"], [1257, 1256, 7, "enum_FIELD"], [1263, 1262, 7, "enum_FIELD"], [1263, 1264, 7, "enum_FIELD"], [1267, 1269, 7, "enum_FIELD"], [673, 672, 7, "enum_FIELD"], [673, 674, 7, "enum_FIELD"], [682, 681, 7, "enum_FIELD"], [682, 683, 7, "enum_FIELD"], [707, 706, 7, "enum_FIELD"], [707, 708, 7, "enum_FIELD"], [714, 713, 7, "enum_FIELD"], [714, 715, 7, "enum_FIELD"], [870, 869, 7, "enum_FIELD"], [870, 875, 7, "enum_FIELD"], [903, 902, 7, "enum_FIELD"], [903, 908, 7, "enum_FIELD"], [872, 874, 7, "enum_FIELD"], [905, 907, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [63, 16, 10, "enum_LAST_LEXICAL_USE"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [76, 63, 10, "enum_LAST_LEXICAL_USE"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [79, 72, 10, "enum_LAST_LEXICAL_USE"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [83, 4, 10, "enum_LAST_LEXICAL_USE"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [92, 6, 10, "enum_LAST_LEXICAL_USE"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [95, 79, 10, "enum_LAST_LEXICAL_USE"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [99, 95, 10, "enum_LAST_LEXICAL_USE"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [104, 83, 10, "enum_LAST_LEXICAL_USE"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [114, 109, 10, "enum_LAST_LEXICAL_USE"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [116, 76, 10, "enum_LAST_LEXICAL_USE"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [125, 92, 10, "enum_LAST_LEXICAL_USE"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [164, 119, 10, "enum_LAST_LEXICAL_USE"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 175, 9, "enum_NEXT_SYNTAX"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [178, 164, 10, "enum_LAST_LEXICAL_USE"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 180, 9, "enum_NEXT_SYNTAX"], [181, 157, 10, "enum_LAST_LEXICAL_USE"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 184, 9, "enum_NEXT_SYNTAX"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [187, 188, 9, "enum_NEXT_SYNTAX"], [188, 189, 9, "enum_NEXT_SYNTAX"], [189, 190, 9, "enum_NEXT_SYNTAX"], [190, 191, 9, "enum_NEXT_SYNTAX"], [191, 192, 9, "enum_NEXT_SYNTAX"], [192, 193, 9, "enum_NEXT_SYNTAX"], [193, 194, 9, "enum_NEXT_SYNTAX"], [194, 195, 9, "enum_NEXT_SYNTAX"], [195, 196, 9, "enum_NEXT_SYNTAX"], [196, 197, 9, "enum_NEXT_SYNTAX"], [197, 198, 9, "enum_NEXT_SYNTAX"], [198, 199, 9, "enum_NEXT_SYNTAX"], [199, 200, 9, "enum_NEXT_SYNTAX"], [201, 2, 10, "enum_LAST_LEXICAL_USE"], [200, 201, 9, "enum_NEXT_SYNTAX"], [201, 202, 9, "enum_NEXT_SYNTAX"], [203, 104, 10, "enum_LAST_LEXICAL_USE"], [202, 203, 9, "enum_NEXT_SYNTAX"], [203, 204, 9, "enum_NEXT_SYNTAX"], [204, 205, 9, "enum_NEXT_SYNTAX"], [206, 159, 10, "enum_LAST_LEXICAL_USE"], [205, 206, 9, "enum_NEXT_SYNTAX"], [206, 207, 9, "enum_NEXT_SYNTAX"], [208, 176, 10, "enum_LAST_LEXICAL_USE"], [207, 208, 9, "enum_NEXT_SYNTAX"], [208, 209, 9, "enum_NEXT_SYNTAX"], [209, 210, 9, "enum_NEXT_SYNTAX"], [211, 8, 10, "enum_LAST_LEXICAL_USE"], [210, 211, 9, "enum_NEXT_SYNTAX"], [211, 212, 9, "enum_NEXT_SYNTAX"], [213, 10, 10, "enum_LAST_LEXICAL_USE"], [212, 213, 9, "enum_NEXT_SYNTAX"], [213, 214, 9, "enum_NEXT_SYNTAX"], [214, 215, 9, "enum_NEXT_SYNTAX"], [215, 216, 9, "enum_NEXT_SYNTAX"], [216, 217, 9, "enum_NEXT_SYNTAX"], [217, 218, 9, "enum_NEXT_SYNTAX"], [218, 219, 9, "enum_NEXT_SYNTAX"], [219, 220, 9, "enum_NEXT_SYNTAX"], [220, 221, 9, "enum_NEXT_SYNTAX"], [221, 222, 9, "enum_NEXT_SYNTAX"], [222, 223, 9, "enum_NEXT_SYNTAX"], [223, 224, 9, "enum_NEXT_SYNTAX"], [225, 20, 10, "enum_LAST_LEXICAL_USE"], [224, 225, 9, "enum_NEXT_SYNTAX"], [225, 226, 9, "enum_NEXT_SYNTAX"], [226, 227, 9, "enum_NEXT_SYNTAX"], [227, 228, 9, "enum_NEXT_SYNTAX"], [229, 24, 10, "enum_LAST_LEXICAL_USE"], [228, 229, 9, "enum_NEXT_SYNTAX"], [229, 230, 9, "enum_NEXT_SYNTAX"], [230, 231, 9, "enum_NEXT_SYNTAX"], [231, 232, 9, "enum_NEXT_SYNTAX"], [233, 28, 10, "enum_LAST_LEXICAL_USE"], [232, 233, 9, "enum_NEXT_SYNTAX"], [233, 234, 9, "enum_NEXT_SYNTAX"], [234, 235, 9, "enum_NEXT_SYNTAX"], [235, 236, 9, "enum_NEXT_SYNTAX"], [237, 35, 10, "enum_LAST_LEXICAL_USE"], [236, 237, 9, "enum_NEXT_SYNTAX"], [237, 238, 9, "enum_NEXT_SYNTAX"], [238, 239, 9, "enum_NEXT_SYNTAX"], [239, 240, 9, "enum_NEXT_SYNTAX"], [241, 42, 10, "enum_LAST_LEXICAL_USE"], [240, 241, 9, "enum_NEXT_SYNTAX"], [241, 242, 9, "enum_NEXT_SYNTAX"], [242, 243, 9, "enum_NEXT_SYNTAX"], [243, 244, 9, "enum_NEXT_SYNTAX"], [245, 46, 10, "enum_LAST_LEXICAL_USE"], [244, 245, 9, "enum_NEXT_SYNTAX"], [245, 246, 9, "enum_NEXT_SYNTAX"], [246, 247, 9, "enum_NEXT_SYNTAX"], [247, 248, 9, "enum_NEXT_SYNTAX"], [249, 50, 10, "enum_LAST_LEXICAL_USE"], [248, 249, 9, "enum_NEXT_SYNTAX"], [249, 250, 9, "enum_NEXT_SYNTAX"], [250, 251, 9, "enum_NEXT_SYNTAX"], [251, 252, 9, "enum_NEXT_SYNTAX"], [253, 54, 10, "enum_LAST_LEXICAL_USE"], [252, 253, 9, "enum_NEXT_SYNTAX"], [253, 254, 9, "enum_NEXT_SYNTAX"], [254, 255, 9, "enum_NEXT_SYNTAX"], [256, 130, 10, "enum_LAST_LEXICAL_USE"], [255, 256, 9, "enum_NEXT_SYNTAX"], [256, 257, 9, "enum_NEXT_SYNTAX"], [257, 258, 9, "enum_NEXT_SYNTAX"], [258, 259, 9, "enum_NEXT_SYNTAX"], [260, 190, 10, "enum_LAST_LEXICAL_USE"], [259, 260, 9, "enum_NEXT_SYNTAX"], [260, 261, 9, "enum_NEXT_SYNTAX"], [261, 263, 9, "enum_NEXT_SYNTAX"], [263, 264, 9, "enum_NEXT_SYNTAX"], [265, 206, 10, "enum_LAST_LEXICAL_USE"], [264, 265, 9, "enum_NEXT_SYNTAX"], [265, 266, 9, "enum_NEXT_SYNTAX"], [266, 267, 9, "enum_NEXT_SYNTAX"], [267, 268, 9, "enum_NEXT_SYNTAX"], [268, 269, 9, "enum_NEXT_SYNTAX"], [269, 271, 9, "enum_NEXT_SYNTAX"], [272, 135, 10, "enum_LAST_LEXICAL_USE"], [271, 272, 9, "enum_NEXT_SYNTAX"], [272, 273, 9, "enum_NEXT_SYNTAX"], [273, 274, 9, "enum_NEXT_SYNTAX"], [274, 275, 9, "enum_NEXT_SYNTAX"], [276, 203, 10, "enum_LAST_LEXICAL_USE"], [275, 276, 9, "enum_NEXT_SYNTAX"], [276, 277, 9, "enum_NEXT_SYNTAX"], [277, 278, 9, "enum_NEXT_SYNTAX"], [278, 279, 9, "enum_NEXT_SYNTAX"], [279, 280, 9, "enum_NEXT_SYNTAX"], [280, 281, 9, "enum_NEXT_SYNTAX"], [281, 282, 9, "enum_NEXT_SYNTAX"], [282, 283, 9, "enum_NEXT_SYNTAX"], [283, 286, 9, "enum_NEXT_SYNTAX"], [286, 287, 9, "enum_NEXT_SYNTAX"], [287, 289, 9, "enum_NEXT_SYNTAX"], [290, 272, 10, "enum_LAST_LEXICAL_USE"], [289, 290, 9, "enum_NEXT_SYNTAX"], [290, 291, 9, "enum_NEXT_SYNTAX"], [291, 292, 9, "enum_NEXT_SYNTAX"], [292, 293, 9, "enum_NEXT_SYNTAX"], [294, 276, 10, "enum_LAST_LEXICAL_USE"], [293, 294, 9, "enum_NEXT_SYNTAX"], [294, 295, 9, "enum_NEXT_SYNTAX"], [295, 296, 9, "enum_NEXT_SYNTAX"], [296, 297, 9, "enum_NEXT_SYNTAX"], [297, 298, 9, "enum_NEXT_SYNTAX"], [299, 265, 10, "enum_LAST_LEXICAL_USE"], [298, 299, 9, "enum_NEXT_SYNTAX"], [299, 300, 9, "enum_NEXT_SYNTAX"], [300, 301, 9, "enum_NEXT_SYNTAX"], [301, 304, 9, "enum_NEXT_SYNTAX"], [304, 305, 9, "enum_NEXT_SYNTAX"], [306, 208, 10, "enum_LAST_LEXICAL_USE"], [305, 306, 9, "enum_NEXT_SYNTAX"], [306, 307, 9, "enum_NEXT_SYNTAX"], [307, 308, 9, "enum_NEXT_SYNTAX"], [308, 309, 9, "enum_NEXT_SYNTAX"], [309, 310, 9, "enum_NEXT_SYNTAX"], [310, 312, 9, "enum_NEXT_SYNTAX"], [313, 290, 10, "enum_LAST_LEXICAL_USE"], [312, 313, 9, "enum_NEXT_SYNTAX"], [313, 314, 9, "enum_NEXT_SYNTAX"], [314, 315, 9, "enum_NEXT_SYNTAX"], [315, 316, 9, "enum_NEXT_SYNTAX"], [317, 294, 10, "enum_LAST_LEXICAL_USE"], [316, 317, 9, "enum_NEXT_SYNTAX"], [317, 318, 9, "enum_NEXT_SYNTAX"], [318, 319, 9, "enum_NEXT_SYNTAX"], [319, 320, 9, "enum_NEXT_SYNTAX"], [320, 321, 9, "enum_NEXT_SYNTAX"], [321, 322, 9, "enum_NEXT_SYNTAX"], [322, 323, 9, "enum_NEXT_SYNTAX"], [323, 324, 9, "enum_NEXT_SYNTAX"], [324, 325, 9, "enum_NEXT_SYNTAX"], [325, 326, 9, "enum_NEXT_SYNTAX"], [326, 327, 9, "enum_NEXT_SYNTAX"], [327, 330, 9, "enum_NEXT_SYNTAX"], [330, 331, 9, "enum_NEXT_SYNTAX"], [331, 333, 9, "enum_NEXT_SYNTAX"], [334, 140, 10, "enum_LAST_LEXICAL_USE"], [333, 334, 9, "enum_NEXT_SYNTAX"], [334, 335, 9, "enum_NEXT_SYNTAX"], [335, 336, 9, "enum_NEXT_SYNTAX"], [336, 337, 9, "enum_NEXT_SYNTAX"], [338, 317, 10, "enum_LAST_LEXICAL_USE"], [337, 338, 9, "enum_NEXT_SYNTAX"], [338, 339, 9, "enum_NEXT_SYNTAX"], [339, 340, 9, "enum_NEXT_SYNTAX"], [340, 341, 9, "enum_NEXT_SYNTAX"], [341, 342, 9, "enum_NEXT_SYNTAX"], [343, 306, 10, "enum_LAST_LEXICAL_USE"], [342, 343, 9, "enum_NEXT_SYNTAX"], [343, 344, 9, "enum_NEXT_SYNTAX"], [344, 345, 9, "enum_NEXT_SYNTAX"], [345, 347, 9, "enum_NEXT_SYNTAX"], [348, 145, 10, "enum_LAST_LEXICAL_USE"], [347, 348, 9, "enum_NEXT_SYNTAX"], [348, 349, 9, "enum_NEXT_SYNTAX"], [349, 350, 9, "enum_NEXT_SYNTAX"], [350, 351, 9, "enum_NEXT_SYNTAX"], [352, 194, 10, "enum_LAST_LEXICAL_USE"], [351, 352, 9, "enum_NEXT_SYNTAX"], [352, 353, 9, "enum_NEXT_SYNTAX"], [353, 354, 9, "enum_NEXT_SYNTAX"], [354, 355, 9, "enum_NEXT_SYNTAX"], [355, 356, 9, "enum_NEXT_SYNTAX"], [356, 357, 9, "enum_NEXT_SYNTAX"], [358, 150, 10, "enum_LAST_LEXICAL_USE"], [357, 358, 9, "enum_NEXT_SYNTAX"], [358, 359, 9, "enum_NEXT_SYNTAX"], [359, 360, 9, "enum_NEXT_SYNTAX"], [360, 361, 9, "enum_NEXT_SYNTAX"], [362, 352, 10, "enum_LAST_LEXICAL_USE"], [361, 362, 9, "enum_NEXT_SYNTAX"], [362, 363, 9, "enum_NEXT_SYNTAX"], [363, 364, 9, "enum_NEXT_SYNTAX"], [364, 365, 9, "enum_NEXT_SYNTAX"], [365, 366, 9, "enum_NEXT_SYNTAX"], [366, 368, 9, "enum_NEXT_SYNTAX"], [368, 369, 9, "enum_NEXT_SYNTAX"], [369, 370, 9, "enum_NEXT_SYNTAX"], [370, 371, 9, "enum_NEXT_SYNTAX"], [371, 372, 9, "enum_NEXT_SYNTAX"], [372, 373, 9, "enum_NEXT_SYNTAX"], [374, 313, 10, "enum_LAST_LEXICAL_USE"], [373, 374, 9, "enum_NEXT_SYNTAX"], [374, 375, 9, "enum_NEXT_SYNTAX"], [375, 376, 9, "enum_NEXT_SYNTAX"], [376, 377, 9, "enum_NEXT_SYNTAX"], [378, 334, 10, "enum_LAST_LEXICAL_USE"], [377, 378, 9, "enum_NEXT_SYNTAX"], [378, 379, 9, "enum_NEXT_SYNTAX"], [379, 380, 9, "enum_NEXT_SYNTAX"], [380, 381, 9, "enum_NEXT_SYNTAX"], [382, 348, 10, "enum_LAST_LEXICAL_USE"], [381, 382, 9, "enum_NEXT_SYNTAX"], [382, 383, 9, "enum_NEXT_SYNTAX"], [383, 384, 9, "enum_NEXT_SYNTAX"], [384, 385, 9, "enum_NEXT_SYNTAX"], [386, 358, 10, "enum_LAST_LEXICAL_USE"], [385, 386, 9, "enum_NEXT_SYNTAX"], [386, 387, 9, "enum_NEXT_SYNTAX"], [387, 388, 9, "enum_NEXT_SYNTAX"], [389, 338, 10, "enum_LAST_LEXICAL_USE"], [388, 389, 9, "enum_NEXT_SYNTAX"], [389, 390, 9, "enum_NEXT_SYNTAX"], [390, 391, 9, "enum_NEXT_SYNTAX"], [391, 392, 9, "enum_NEXT_SYNTAX"], [393, 256, 10, "enum_LAST_LEXICAL_USE"], [392, 393, 9, "enum_NEXT_SYNTAX"], [393, 394, 9, "enum_NEXT_SYNTAX"], [394, 397, 9, "enum_NEXT_SYNTAX"], [397, 398, 9, "enum_NEXT_SYNTAX"], [398, 401, 9, "enum_NEXT_SYNTAX"], [401, 402, 9, "enum_NEXT_SYNTAX"], [402, 403, 9, "enum_NEXT_SYNTAX"], [404, 125, 10, "enum_LAST_LEXICAL_USE"], [403, 404, 9, "enum_NEXT_SYNTAX"], [404, 405, 9, "enum_NEXT_SYNTAX"], [405, 406, 9, "enum_NEXT_SYNTAX"], [406, 407, 9, "enum_NEXT_SYNTAX"], [407, 408, 9, "enum_NEXT_SYNTAX"], [408, 409, 9, "enum_NEXT_SYNTAX"], [409, 410, 9, "enum_NEXT_SYNTAX"], [410, 411, 9, "enum_NEXT_SYNTAX"], [411, 412, 9, "enum_NEXT_SYNTAX"], [413, 404, 10, "enum_LAST_LEXICAL_USE"], [412, 413, 9, "enum_NEXT_SYNTAX"], [413, 414, 9, "enum_NEXT_SYNTAX"], [414, 415, 9, "enum_NEXT_SYNTAX"], [415, 416, 9, "enum_NEXT_SYNTAX"], [416, 417, 9, "enum_NEXT_SYNTAX"], [417, 418, 9, "enum_NEXT_SYNTAX"], [418, 419, 9, "enum_NEXT_SYNTAX"], [419, 420, 9, "enum_NEXT_SYNTAX"], [420, 421, 9, "enum_NEXT_SYNTAX"], [421, 423, 9, "enum_NEXT_SYNTAX"], [423, 424, 9, "enum_NEXT_SYNTAX"], [424, 425, 9, "enum_NEXT_SYNTAX"], [426, 389, 10, "enum_LAST_LEXICAL_USE"], [425, 426, 9, "enum_NEXT_SYNTAX"], [426, 427, 9, "enum_NEXT_SYNTAX"], [427, 428, 9, "enum_NEXT_SYNTAX"], [428, 429, 9, "enum_NEXT_SYNTAX"], [429, 430, 9, "enum_NEXT_SYNTAX"], [430, 431, 9, "enum_NEXT_SYNTAX"], [431, 432, 9, "enum_NEXT_SYNTAX"], [432, 433, 9, "enum_NEXT_SYNTAX"], [433, 434, 9, "enum_NEXT_SYNTAX"], [434, 435, 9, "enum_NEXT_SYNTAX"], [436, 426, 10, "enum_LAST_LEXICAL_USE"], [435, 436, 9, "enum_NEXT_SYNTAX"], [436, 437, 9, "enum_NEXT_SYNTAX"], [437, 438, 9, "enum_NEXT_SYNTAX"], [438, 439, 9, "enum_NEXT_SYNTAX"], [439, 440, 9, "enum_NEXT_SYNTAX"], [441, 413, 10, "enum_LAST_LEXICAL_USE"], [440, 441, 9, "enum_NEXT_SYNTAX"], [441, 442, 9, "enum_NEXT_SYNTAX"], [442, 443, 9, "enum_NEXT_SYNTAX"], [443, 444, 9, "enum_NEXT_SYNTAX"], [444, 445, 9, "enum_NEXT_SYNTAX"], [445, 448, 9, "enum_NEXT_SYNTAX"], [448, 449, 9, "enum_NEXT_SYNTAX"], [449, 452, 9, "enum_NEXT_SYNTAX"], [452, 453, 9, "enum_NEXT_SYNTAX"], [453, 454, 9, "enum_NEXT_SYNTAX"], [455, 441, 10, "enum_LAST_LEXICAL_USE"], [454, 455, 9, "enum_NEXT_SYNTAX"], [455, 456, 9, "enum_NEXT_SYNTAX"], [456, 457, 9, "enum_NEXT_SYNTAX"], [457, 458, 9, "enum_NEXT_SYNTAX"], [458, 459, 9, "enum_NEXT_SYNTAX"], [459, 460, 9, "enum_NEXT_SYNTAX"], [460, 461, 9, "enum_NEXT_SYNTAX"], [461, 462, 9, "enum_NEXT_SYNTAX"], [462, 463, 9, "enum_NEXT_SYNTAX"], [464, 455, 10, "enum_LAST_LEXICAL_USE"], [463, 464, 9, "enum_NEXT_SYNTAX"], [464, 465, 9, "enum_NEXT_SYNTAX"], [465, 466, 9, "enum_NEXT_SYNTAX"], [466, 467, 9, "enum_NEXT_SYNTAX"], [467, 468, 9, "enum_NEXT_SYNTAX"], [468, 469, 9, "enum_NEXT_SYNTAX"], [469, 470, 9, "enum_NEXT_SYNTAX"], [470, 471, 9, "enum_NEXT_SYNTAX"], [471, 472, 9, "enum_NEXT_SYNTAX"], [472, 474, 9, "enum_NEXT_SYNTAX"], [475, 424, 10, "enum_LAST_LEXICAL_USE"], [474, 475, 9, "enum_NEXT_SYNTAX"], [475, 476, 9, "enum_NEXT_SYNTAX"], [477, 436, 10, "enum_LAST_LEXICAL_USE"], [476, 477, 9, "enum_NEXT_SYNTAX"], [477, 478, 9, "enum_NEXT_SYNTAX"], [478, 479, 9, "enum_NEXT_SYNTAX"], [479, 480, 9, "enum_NEXT_SYNTAX"], [480, 481, 9, "enum_NEXT_SYNTAX"], [482, 464, 10, "enum_LAST_LEXICAL_USE"], [481, 482, 9, "enum_NEXT_SYNTAX"], [482, 483, 9, "enum_NEXT_SYNTAX"], [483, 484, 9, "enum_NEXT_SYNTAX"], [484, 485, 9, "enum_NEXT_SYNTAX"], [485, 486, 9, "enum_NEXT_SYNTAX"], [486, 487, 9, "enum_NEXT_SYNTAX"], [488, 434, 10, "enum_LAST_LEXICAL_USE"], [487, 488, 9, "enum_NEXT_SYNTAX"], [488, 489, 9, "enum_NEXT_SYNTAX"], [490, 477, 10, "enum_LAST_LEXICAL_USE"], [489, 490, 9, "enum_NEXT_SYNTAX"], [490, 491, 9, "enum_NEXT_SYNTAX"], [491, 492, 9, "enum_NEXT_SYNTAX"], [492, 493, 9, "enum_NEXT_SYNTAX"], [493, 494, 9, "enum_NEXT_SYNTAX"], [494, 495, 9, "enum_NEXT_SYNTAX"], [495, 496, 9, "enum_NEXT_SYNTAX"], [496, 497, 9, "enum_NEXT_SYNTAX"], [497, 498, 9, "enum_NEXT_SYNTAX"], [498, 499, 9, "enum_NEXT_SYNTAX"], [499, 502, 9, "enum_NEXT_SYNTAX"], [502, 503, 9, "enum_NEXT_SYNTAX"], [503, 506, 9, "enum_NEXT_SYNTAX"], [506, 507, 9, "enum_NEXT_SYNTAX"], [507, 508, 9, "enum_NEXT_SYNTAX"], [509, 482, 10, "enum_LAST_LEXICAL_USE"], [508, 509, 9, "enum_NEXT_SYNTAX"], [509, 510, 9, "enum_NEXT_SYNTAX"], [510, 511, 9, "enum_NEXT_SYNTAX"], [511, 512, 9, "enum_NEXT_SYNTAX"], [512, 513, 9, "enum_NEXT_SYNTAX"], [513, 514, 9, "enum_NEXT_SYNTAX"], [514, 515, 9, "enum_NEXT_SYNTAX"], [515, 516, 9, "enum_NEXT_SYNTAX"], [516, 517, 9, "enum_NEXT_SYNTAX"], [518, 509, 10, "enum_LAST_LEXICAL_USE"], [517, 518, 9, "enum_NEXT_SYNTAX"], [518, 519, 9, "enum_NEXT_SYNTAX"], [519, 520, 9, "enum_NEXT_SYNTAX"], [520, 521, 9, "enum_NEXT_SYNTAX"], [521, 522, 9, "enum_NEXT_SYNTAX"], [522, 523, 9, "enum_NEXT_SYNTAX"], [523, 524, 9, "enum_NEXT_SYNTAX"], [524, 525, 9, "enum_NEXT_SYNTAX"], [525, 526, 9, "enum_NEXT_SYNTAX"], [526, 528, 9, "enum_NEXT_SYNTAX"], [529, 475, 10, "enum_LAST_LEXICAL_USE"], [528, 529, 9, "enum_NEXT_SYNTAX"], [529, 530, 9, "enum_NEXT_SYNTAX"], [531, 490, 10, "enum_LAST_LEXICAL_USE"], [530, 531, 9, "enum_NEXT_SYNTAX"], [531, 532, 9, "enum_NEXT_SYNTAX"], [532, 533, 9, "enum_NEXT_SYNTAX"], [533, 534, 9, "enum_NEXT_SYNTAX"], [534, 535, 9, "enum_NEXT_SYNTAX"], [535, 536, 9, "enum_NEXT_SYNTAX"], [536, 537, 9, "enum_NEXT_SYNTAX"], [537, 538, 9, "enum_NEXT_SYNTAX"], [539, 488, 10, "enum_LAST_LEXICAL_USE"], [538, 539, 9, "enum_NEXT_SYNTAX"], [539, 540, 9, "enum_NEXT_SYNTAX"], [541, 531, 10, "enum_LAST_LEXICAL_USE"], [540, 541, 9, "enum_NEXT_SYNTAX"], [541, 542, 9, "enum_NEXT_SYNTAX"], [542, 543, 9, "enum_NEXT_SYNTAX"], [543, 544, 9, "enum_NEXT_SYNTAX"], [544, 545, 9, "enum_NEXT_SYNTAX"], [545, 546, 9, "enum_NEXT_SYNTAX"], [546, 547, 9, "enum_NEXT_SYNTAX"], [547, 548, 9, "enum_NEXT_SYNTAX"], [548, 549, 9, "enum_NEXT_SYNTAX"], [549, 550, 9, "enum_NEXT_SYNTAX"], [550, 553, 9, "enum_NEXT_SYNTAX"], [553, 554, 9, "enum_NEXT_SYNTAX"], [554, 556, 9, "enum_NEXT_SYNTAX"], [557, 529, 10, "enum_LAST_LEXICAL_USE"], [556, 557, 9, "enum_NEXT_SYNTAX"], [557, 558, 9, "enum_NEXT_SYNTAX"], [559, 541, 10, "enum_LAST_LEXICAL_USE"], [558, 559, 9, "enum_NEXT_SYNTAX"], [559, 560, 9, "enum_NEXT_SYNTAX"], [560, 561, 9, "enum_NEXT_SYNTAX"], [561, 562, 9, "enum_NEXT_SYNTAX"], [562, 563, 9, "enum_NEXT_SYNTAX"], [564, 518, 10, "enum_LAST_LEXICAL_USE"], [563, 564, 9, "enum_NEXT_SYNTAX"], [564, 565, 9, "enum_NEXT_SYNTAX"], [565, 566, 9, "enum_NEXT_SYNTAX"], [566, 567, 9, "enum_NEXT_SYNTAX"], [567, 568, 9, "enum_NEXT_SYNTAX"], [568, 569, 9, "enum_NEXT_SYNTAX"], [570, 539, 10, "enum_LAST_LEXICAL_USE"], [569, 570, 9, "enum_NEXT_SYNTAX"], [570, 571, 9, "enum_NEXT_SYNTAX"], [572, 559, 10, "enum_LAST_LEXICAL_USE"], [571, 572, 9, "enum_NEXT_SYNTAX"], [572, 573, 9, "enum_NEXT_SYNTAX"], [573, 574, 9, "enum_NEXT_SYNTAX"], [574, 575, 9, "enum_NEXT_SYNTAX"], [575, 576, 9, "enum_NEXT_SYNTAX"], [577, 564, 10, "enum_LAST_LEXICAL_USE"], [576, 577, 9, "enum_NEXT_SYNTAX"], [577, 578, 9, "enum_NEXT_SYNTAX"], [578, 579, 9, "enum_NEXT_SYNTAX"], [579, 580, 9, "enum_NEXT_SYNTAX"], [580, 581, 9, "enum_NEXT_SYNTAX"], [581, 586, 9, "enum_NEXT_SYNTAX"], [587, 253, 10, "enum_LAST_LEXICAL_USE"], [586, 587, 9, "enum_NEXT_SYNTAX"], [587, 588, 9, "enum_NEXT_SYNTAX"], [588, 591, 9, "enum_NEXT_SYNTAX"], [591, 592, 9, "enum_NEXT_SYNTAX"], [592, 593, 9, "enum_NEXT_SYNTAX"], [594, 577, 10, "enum_LAST_LEXICAL_USE"], [593, 594, 9, "enum_NEXT_SYNTAX"], [594, 595, 9, "enum_NEXT_SYNTAX"], [595, 596, 9, "enum_NEXT_SYNTAX"], [596, 597, 9, "enum_NEXT_SYNTAX"], [597, 598, 9, "enum_NEXT_SYNTAX"], [598, 599, 9, "enum_NEXT_SYNTAX"], [599, 600, 9, "enum_NEXT_SYNTAX"], [600, 601, 9, "enum_NEXT_SYNTAX"], [601, 602, 9, "enum_NEXT_SYNTAX"], [603, 594, 10, "enum_LAST_LEXICAL_USE"], [602, 603, 9, "enum_NEXT_SYNTAX"], [603, 604, 9, "enum_NEXT_SYNTAX"], [604, 605, 9, "enum_NEXT_SYNTAX"], [605, 606, 9, "enum_NEXT_SYNTAX"], [606, 607, 9, "enum_NEXT_SYNTAX"], [607, 608, 9, "enum_NEXT_SYNTAX"], [608, 609, 9, "enum_NEXT_SYNTAX"], [609, 610, 9, "enum_NEXT_SYNTAX"], [610, 611, 9, "enum_NEXT_SYNTAX"], [611, 613, 9, "enum_NEXT_SYNTAX"], [613, 614, 9, "enum_NEXT_SYNTAX"], [614, 615, 9, "enum_NEXT_SYNTAX"], [615, 616, 9, "enum_NEXT_SYNTAX"], [616, 617, 9, "enum_NEXT_SYNTAX"], [618, 603, 10, "enum_LAST_LEXICAL_USE"], [617, 618, 9, "enum_NEXT_SYNTAX"], [618, 619, 9, "enum_NEXT_SYNTAX"], [619, 620, 9, "enum_NEXT_SYNTAX"], [620, 621, 9, "enum_NEXT_SYNTAX"], [621, 622, 9, "enum_NEXT_SYNTAX"], [622, 625, 9, "enum_NEXT_SYNTAX"], [625, 626, 9, "enum_NEXT_SYNTAX"], [626, 629, 9, "enum_NEXT_SYNTAX"], [629, 630, 9, "enum_NEXT_SYNTAX"], [630, 631, 9, "enum_NEXT_SYNTAX"], [632, 618, 10, "enum_LAST_LEXICAL_USE"], [631, 632, 9, "enum_NEXT_SYNTAX"], [632, 633, 9, "enum_NEXT_SYNTAX"], [633, 634, 9, "enum_NEXT_SYNTAX"], [634, 635, 9, "enum_NEXT_SYNTAX"], [635, 636, 9, "enum_NEXT_SYNTAX"], [636, 637, 9, "enum_NEXT_SYNTAX"], [637, 638, 9, "enum_NEXT_SYNTAX"], [638, 639, 9, "enum_NEXT_SYNTAX"], [639, 640, 9, "enum_NEXT_SYNTAX"], [641, 632, 10, "enum_LAST_LEXICAL_USE"], [640, 641, 9, "enum_NEXT_SYNTAX"], [641, 642, 9, "enum_NEXT_SYNTAX"], [642, 643, 9, "enum_NEXT_SYNTAX"], [643, 644, 9, "enum_NEXT_SYNTAX"], [644, 645, 9, "enum_NEXT_SYNTAX"], [645, 646, 9, "enum_NEXT_SYNTAX"], [646, 647, 9, "enum_NEXT_SYNTAX"], [647, 648, 9, "enum_NEXT_SYNTAX"], [648, 649, 9, "enum_NEXT_SYNTAX"], [649, 651, 9, "enum_NEXT_SYNTAX"], [652, 614, 10, "enum_LAST_LEXICAL_USE"], [651, 652, 9, "enum_NEXT_SYNTAX"], [652, 653, 9, "enum_NEXT_SYNTAX"], [653, 654, 9, "enum_NEXT_SYNTAX"], [654, 655, 9, "enum_NEXT_SYNTAX"], [656, 641, 10, "enum_LAST_LEXICAL_USE"], [655, 656, 9, "enum_NEXT_SYNTAX"], [656, 657, 9, "enum_NEXT_SYNTAX"], [657, 658, 9, "enum_NEXT_SYNTAX"], [658, 659, 9, "enum_NEXT_SYNTAX"], [659, 660, 9, "enum_NEXT_SYNTAX"], [660, 661, 9, "enum_NEXT_SYNTAX"], [661, 662, 9, "enum_NEXT_SYNTAX"], [662, 665, 9, "enum_NEXT_SYNTAX"], [665, 666, 9, "enum_NEXT_SYNTAX"], [666, 669, 9, "enum_NEXT_SYNTAX"], [669, 670, 9, "enum_NEXT_SYNTAX"], [670, 671, 9, "enum_NEXT_SYNTAX"], [672, 656, 10, "enum_LAST_LEXICAL_USE"], [671, 672, 9, "enum_NEXT_SYNTAX"], [672, 673, 9, "enum_NEXT_SYNTAX"], [673, 674, 9, "enum_NEXT_SYNTAX"], [674, 675, 9, "enum_NEXT_SYNTAX"], [675, 676, 9, "enum_NEXT_SYNTAX"], [676, 677, 9, "enum_NEXT_SYNTAX"], [677, 678, 9, "enum_NEXT_SYNTAX"], [678, 679, 9, "enum_NEXT_SYNTAX"], [679, 680, 9, "enum_NEXT_SYNTAX"], [681, 672, 10, "enum_LAST_LEXICAL_USE"], [680, 681, 9, "enum_NEXT_SYNTAX"], [681, 682, 9, "enum_NEXT_SYNTAX"], [682, 683, 9, "enum_NEXT_SYNTAX"], [683, 684, 9, "enum_NEXT_SYNTAX"], [684, 685, 9, "enum_NEXT_SYNTAX"], [685, 686, 9, "enum_NEXT_SYNTAX"], [686, 687, 9, "enum_NEXT_SYNTAX"], [687, 688, 9, "enum_NEXT_SYNTAX"], [688, 689, 9, "enum_NEXT_SYNTAX"], [689, 691, 9, "enum_NEXT_SYNTAX"], [692, 652, 10, "enum_LAST_LEXICAL_USE"], [691, 692, 9, "enum_NEXT_SYNTAX"], [692, 693, 9, "enum_NEXT_SYNTAX"], [693, 694, 9, "enum_NEXT_SYNTAX"], [694, 695, 9, "enum_NEXT_SYNTAX"], [695, 698, 9, "enum_NEXT_SYNTAX"], [698, 699, 9, "enum_NEXT_SYNTAX"], [699, 701, 9, "enum_NEXT_SYNTAX"], [702, 692, 10, "enum_LAST_LEXICAL_USE"], [701, 702, 9, "enum_NEXT_SYNTAX"], [702, 703, 9, "enum_NEXT_SYNTAX"], [703, 704, 9, "enum_NEXT_SYNTAX"], [704, 705, 9, "enum_NEXT_SYNTAX"], [706, 681, 10, "enum_LAST_LEXICAL_USE"], [705, 706, 9, "enum_NEXT_SYNTAX"], [706, 707, 9, "enum_NEXT_SYNTAX"], [707, 708, 9, "enum_NEXT_SYNTAX"], [708, 709, 9, "enum_NEXT_SYNTAX"], [709, 710, 9, "enum_NEXT_SYNTAX"], [710, 711, 9, "enum_NEXT_SYNTAX"], [711, 712, 9, "enum_NEXT_SYNTAX"], [713, 706, 10, "enum_LAST_LEXICAL_USE"], [712, 713, 9, "enum_NEXT_SYNTAX"], [713, 714, 9, "enum_NEXT_SYNTAX"], [714, 715, 9, "enum_NEXT_SYNTAX"], [715, 716, 9, "enum_NEXT_SYNTAX"], [716, 717, 9, "enum_NEXT_SYNTAX"], [717, 722, 9, "enum_NEXT_SYNTAX"], [722, 723, 9, "enum_NEXT_SYNTAX"], [724, 201, 10, "enum_LAST_LEXICAL_USE"], [723, 724, 9, "enum_NEXT_SYNTAX"], [724, 725, 9, "enum_NEXT_SYNTAX"], [726, 572, 10, "enum_LAST_LEXICAL_USE"], [725, 726, 9, "enum_NEXT_SYNTAX"], [726, 727, 9, "enum_NEXT_SYNTAX"], [727, 728, 9, "enum_NEXT_SYNTAX"], [728, 729, 9, "enum_NEXT_SYNTAX"], [729, 730, 9, "enum_NEXT_SYNTAX"], [731, 724, 10, "enum_LAST_LEXICAL_USE"], [730, 731, 9, "enum_NEXT_SYNTAX"], [731, 732, 9, "enum_NEXT_SYNTAX"], [733, 726, 10, "enum_LAST_LEXICAL_USE"], [732, 733, 9, "enum_NEXT_SYNTAX"], [733, 734, 9, "enum_NEXT_SYNTAX"], [735, 713, 10, "enum_LAST_LEXICAL_USE"], [734, 735, 9, "enum_NEXT_SYNTAX"], [735, 736, 9, "enum_NEXT_SYNTAX"], [736, 737, 9, "enum_NEXT_SYNTAX"], [737, 738, 9, "enum_NEXT_SYNTAX"], [738, 739, 9, "enum_NEXT_SYNTAX"], [740, 735, 10, "enum_LAST_LEXICAL_USE"], [739, 740, 9, "enum_NEXT_SYNTAX"], [740, 741, 9, "enum_NEXT_SYNTAX"], [741, 742, 9, "enum_NEXT_SYNTAX"], [742, 743, 9, "enum_NEXT_SYNTAX"], [743, 744, 9, "enum_NEXT_SYNTAX"], [744, 745, 9, "enum_NEXT_SYNTAX"], [745, 746, 9, "enum_NEXT_SYNTAX"], [746, 747, 9, "enum_NEXT_SYNTAX"], [747, 748, 9, "enum_NEXT_SYNTAX"], [748, 749, 9, "enum_NEXT_SYNTAX"], [749, 750, 9, "enum_NEXT_SYNTAX"], [750, 751, 9, "enum_NEXT_SYNTAX"], [751, 752, 9, "enum_NEXT_SYNTAX"], [752, 753, 9, "enum_NEXT_SYNTAX"], [753, 754, 9, "enum_NEXT_SYNTAX"], [755, 382, 10, "enum_LAST_LEXICAL_USE"], [754, 755, 9, "enum_NEXT_SYNTAX"], [755, 756, 9, "enum_NEXT_SYNTAX"], [756, 757, 9, "enum_NEXT_SYNTAX"], [757, 758, 9, "enum_NEXT_SYNTAX"], [758, 759, 9, "enum_NEXT_SYNTAX"], [760, 731, 10, "enum_LAST_LEXICAL_USE"], [759, 760, 9, "enum_NEXT_SYNTAX"], [760, 761, 9, "enum_NEXT_SYNTAX"], [762, 733, 10, "enum_LAST_LEXICAL_USE"], [761, 762, 9, "enum_NEXT_SYNTAX"], [762, 763, 9, "enum_NEXT_SYNTAX"], [763, 764, 9, "enum_NEXT_SYNTAX"], [764, 765, 9, "enum_NEXT_SYNTAX"], [766, 233, 10, "enum_LAST_LEXICAL_USE"], [765, 766, 9, "enum_NEXT_SYNTAX"], [766, 767, 9, "enum_NEXT_SYNTAX"], [767, 768, 9, "enum_NEXT_SYNTAX"], [768, 769, 9, "enum_NEXT_SYNTAX"], [770, 237, 10, "enum_LAST_LEXICAL_USE"], [769, 770, 9, "enum_NEXT_SYNTAX"], [770, 771, 9, "enum_NEXT_SYNTAX"], [771, 772, 9, "enum_NEXT_SYNTAX"], [772, 773, 9, "enum_NEXT_SYNTAX"], [774, 587, 10, "enum_LAST_LEXICAL_USE"], [773, 774, 9, "enum_NEXT_SYNTAX"], [774, 775, 9, "enum_NEXT_SYNTAX"], [775, 776, 9, "enum_NEXT_SYNTAX"], [776, 777, 9, "enum_NEXT_SYNTAX"], [778, 213, 10, "enum_LAST_LEXICAL_USE"], [777, 778, 9, "enum_NEXT_SYNTAX"], [778, 779, 9, "enum_NEXT_SYNTAX"], [779, 780, 9, "enum_NEXT_SYNTAX"], [780, 781, 9, "enum_NEXT_SYNTAX"], [782, 211, 10, "enum_LAST_LEXICAL_USE"], [781, 782, 9, "enum_NEXT_SYNTAX"], [782, 783, 9, "enum_NEXT_SYNTAX"], [783, 784, 9, "enum_NEXT_SYNTAX"], [784, 785, 9, "enum_NEXT_SYNTAX"], [785, 786, 9, "enum_NEXT_SYNTAX"], [787, 99, 10, "enum_LAST_LEXICAL_USE"], [786, 787, 9, "enum_NEXT_SYNTAX"], [787, 788, 9, "enum_NEXT_SYNTAX"], [788, 789, 9, "enum_NEXT_SYNTAX"], [789, 790, 9, "enum_NEXT_SYNTAX"], [790, 791, 9, "enum_NEXT_SYNTAX"], [792, 760, 10, "enum_LAST_LEXICAL_USE"], [791, 792, 9, "enum_NEXT_SYNTAX"], [792, 793, 9, "enum_NEXT_SYNTAX"], [793, 794, 9, "enum_NEXT_SYNTAX"], [794, 795, 9, "enum_NEXT_SYNTAX"], [795, 796, 9, "enum_NEXT_SYNTAX"], [796, 797, 9, "enum_NEXT_SYNTAX"], [797, 798, 9, "enum_NEXT_SYNTAX"], [799, 792, 10, "enum_LAST_LEXICAL_USE"], [798, 799, 9, "enum_NEXT_SYNTAX"], [799, 800, 9, "enum_NEXT_SYNTAX"], [800, 801, 9, "enum_NEXT_SYNTAX"], [801, 802, 9, "enum_NEXT_SYNTAX"], [802, 803, 9, "enum_NEXT_SYNTAX"], [803, 804, 9, "enum_NEXT_SYNTAX"], [804, 805, 9, "enum_NEXT_SYNTAX"], [805, 806, 9, "enum_NEXT_SYNTAX"], [806, 808, 9, "enum_NEXT_SYNTAX"], [809, 774, 10, "enum_LAST_LEXICAL_USE"], [808, 809, 9, "enum_NEXT_SYNTAX"], [809, 810, 9, "enum_NEXT_SYNTAX"], [810, 812, 9, "enum_NEXT_SYNTAX"], [813, 702, 10, "enum_LAST_LEXICAL_USE"], [812, 813, 9, "enum_NEXT_SYNTAX"], [813, 814, 9, "enum_NEXT_SYNTAX"], [814, 815, 9, "enum_NEXT_SYNTAX"], [815, 816, 9, "enum_NEXT_SYNTAX"], [816, 819, 9, "enum_NEXT_SYNTAX"], [820, 241, 10, "enum_LAST_LEXICAL_USE"], [819, 820, 9, "enum_NEXT_SYNTAX"], [820, 821, 9, "enum_NEXT_SYNTAX"], [821, 824, 9, "enum_NEXT_SYNTAX"], [824, 825, 9, "enum_NEXT_SYNTAX"], [826, 782, 10, "enum_LAST_LEXICAL_USE"], [825, 826, 9, "enum_NEXT_SYNTAX"], [826, 827, 9, "enum_NEXT_SYNTAX"], [827, 828, 9, "enum_NEXT_SYNTAX"], [828, 829, 9, "enum_NEXT_SYNTAX"], [829, 830, 9, "enum_NEXT_SYNTAX"], [830, 831, 9, "enum_NEXT_SYNTAX"], [831, 833, 9, "enum_NEXT_SYNTAX"], [834, 809, 10, "enum_LAST_LEXICAL_USE"], [833, 834, 9, "enum_NEXT_SYNTAX"], [834, 835, 9, "enum_NEXT_SYNTAX"], [835, 837, 9, "enum_NEXT_SYNTAX"], [838, 813, 10, "enum_LAST_LEXICAL_USE"], [837, 838, 9, "enum_NEXT_SYNTAX"], [838, 839, 9, "enum_NEXT_SYNTAX"], [839, 840, 9, "enum_NEXT_SYNTAX"], [840, 841, 9, "enum_NEXT_SYNTAX"], [841, 842, 9, "enum_NEXT_SYNTAX"], [843, 826, 10, "enum_LAST_LEXICAL_USE"], [842, 843, 9, "enum_NEXT_SYNTAX"], [843, 844, 9, "enum_NEXT_SYNTAX"], [844, 845, 9, "enum_NEXT_SYNTAX"], [845, 847, 9, "enum_NEXT_SYNTAX"], [848, 192, 10, "enum_LAST_LEXICAL_USE"], [847, 848, 9, "enum_NEXT_SYNTAX"], [848, 849, 9, "enum_NEXT_SYNTAX"], [850, 787, 10, "enum_LAST_LEXICAL_USE"], [849, 850, 9, "enum_NEXT_SYNTAX"], [850, 851, 9, "enum_NEXT_SYNTAX"], [851, 852, 9, "enum_NEXT_SYNTAX"], [852, 853, 9, "enum_NEXT_SYNTAX"], [854, 747, 10, "enum_LAST_LEXICAL_USE"], [853, 854, 9, "enum_NEXT_SYNTAX"], [854, 855, 9, "enum_NEXT_SYNTAX"], [855, 856, 9, "enum_NEXT_SYNTAX"], [856, 857, 9, "enum_NEXT_SYNTAX"], [857, 858, 9, "enum_NEXT_SYNTAX"], [858, 859, 9, "enum_NEXT_SYNTAX"], [859, 860, 9, "enum_NEXT_SYNTAX"], [860, 861, 9, "enum_NEXT_SYNTAX"], [861, 862, 9, "enum_NEXT_SYNTAX"], [862, 863, 9, "enum_NEXT_SYNTAX"], [864, 850, 10, "enum_LAST_LEXICAL_USE"], [863, 864, 9, "enum_NEXT_SYNTAX"], [864, 865, 9, "enum_NEXT_SYNTAX"], [865, 866, 9, "enum_NEXT_SYNTAX"], [866, 867, 9, "enum_NEXT_SYNTAX"], [867, 868, 9, "enum_NEXT_SYNTAX"], [869, 854, 10, "enum_LAST_LEXICAL_USE"], [868, 869, 9, "enum_NEXT_SYNTAX"], [869, 870, 9, "enum_NEXT_SYNTAX"], [870, 871, 9, "enum_NEXT_SYNTAX"], [871, 872, 9, "enum_NEXT_SYNTAX"], [872, 873, 9, "enum_NEXT_SYNTAX"], [874, 843, 10, "enum_LAST_LEXICAL_USE"], [873, 874, 9, "enum_NEXT_SYNTAX"], [874, 875, 9, "enum_NEXT_SYNTAX"], [875, 876, 9, "enum_NEXT_SYNTAX"], [876, 877, 9, "enum_NEXT_SYNTAX"], [877, 878, 9, "enum_NEXT_SYNTAX"], [878, 879, 9, "enum_NEXT_SYNTAX"], [879, 880, 9, "enum_NEXT_SYNTAX"], [880, 881, 9, "enum_NEXT_SYNTAX"], [881, 882, 9, "enum_NEXT_SYNTAX"], [882, 883, 9, "enum_NEXT_SYNTAX"], [883, 884, 9, "enum_NEXT_SYNTAX"], [885, 874, 10, "enum_LAST_LEXICAL_USE"], [884, 885, 9, "enum_NEXT_SYNTAX"], [885, 886, 9, "enum_NEXT_SYNTAX"], [886, 887, 9, "enum_NEXT_SYNTAX"], [887, 889, 9, "enum_NEXT_SYNTAX"], [890, 229, 10, "enum_LAST_LEXICAL_USE"], [889, 890, 9, "enum_NEXT_SYNTAX"], [890, 891, 9, "enum_NEXT_SYNTAX"], [891, 893, 9, "enum_NEXT_SYNTAX"], [894, 225, 10, "enum_LAST_LEXICAL_USE"], [893, 894, 9, "enum_NEXT_SYNTAX"], [894, 895, 9, "enum_NEXT_SYNTAX"], [896, 864, 10, "enum_LAST_LEXICAL_USE"], [895, 896, 9, "enum_NEXT_SYNTAX"], [896, 897, 9, "enum_NEXT_SYNTAX"], [897, 898, 9, "enum_NEXT_SYNTAX"], [898, 899, 9, "enum_NEXT_SYNTAX"], [899, 900, 9, "enum_NEXT_SYNTAX"], [900, 901, 9, "enum_NEXT_SYNTAX"], [902, 869, 10, "enum_LAST_LEXICAL_USE"], [901, 902, 9, "enum_NEXT_SYNTAX"], [902, 903, 9, "enum_NEXT_SYNTAX"], [903, 904, 9, "enum_NEXT_SYNTAX"], [904, 905, 9, "enum_NEXT_SYNTAX"], [905, 906, 9, "enum_NEXT_SYNTAX"], [907, 885, 10, "enum_LAST_LEXICAL_USE"], [906, 907, 9, "enum_NEXT_SYNTAX"], [907, 908, 9, "enum_NEXT_SYNTAX"], [908, 909, 9, "enum_NEXT_SYNTAX"], [909, 910, 9, "enum_NEXT_SYNTAX"], [910, 911, 9, "enum_NEXT_SYNTAX"], [911, 912, 9, "enum_NEXT_SYNTAX"], [912, 913, 9, "enum_NEXT_SYNTAX"], [913, 914, 9, "enum_NEXT_SYNTAX"], [914, 915, 9, "enum_NEXT_SYNTAX"], [915, 916, 9, "enum_NEXT_SYNTAX"], [916, 917, 9, "enum_NEXT_SYNTAX"], [917, 918, 9, "enum_NEXT_SYNTAX"], [919, 894, 10, "enum_LAST_LEXICAL_USE"], [918, 919, 9, "enum_NEXT_SYNTAX"], [919, 920, 9, "enum_NEXT_SYNTAX"], [921, 896, 10, "enum_LAST_LEXICAL_USE"], [920, 921, 9, "enum_NEXT_SYNTAX"], [921, 922, 9, "enum_NEXT_SYNTAX"], [922, 923, 9, "enum_NEXT_SYNTAX"], [923, 924, 9, "enum_NEXT_SYNTAX"], [925, 919, 10, "enum_LAST_LEXICAL_USE"], [924, 925, 9, "enum_NEXT_SYNTAX"], [925, 926, 9, "enum_NEXT_SYNTAX"], [926, 929, 9, "enum_NEXT_SYNTAX"], [930, 181, 10, "enum_LAST_LEXICAL_USE"], [929, 930, 9, "enum_NEXT_SYNTAX"], [930, 931, 9, "enum_NEXT_SYNTAX"], [931, 932, 9, "enum_NEXT_SYNTAX"], [932, 933, 9, "enum_NEXT_SYNTAX"], [934, 907, 10, "enum_LAST_LEXICAL_USE"], [933, 934, 9, "enum_NEXT_SYNTAX"], [934, 935, 9, "enum_NEXT_SYNTAX"], [935, 936, 9, "enum_NEXT_SYNTAX"], [936, 938, 9, "enum_NEXT_SYNTAX"], [939, 196, 10, "enum_LAST_LEXICAL_USE"], [938, 939, 9, "enum_NEXT_SYNTAX"], [939, 940, 9, "enum_NEXT_SYNTAX"], [941, 902, 10, "enum_LAST_LEXICAL_USE"], [940, 941, 9, "enum_NEXT_SYNTAX"], [941, 942, 9, "enum_NEXT_SYNTAX"], [942, 943, 9, "enum_NEXT_SYNTAX"], [944, 930, 10, "enum_LAST_LEXICAL_USE"], [943, 944, 9, "enum_NEXT_SYNTAX"], [944, 945, 9, "enum_NEXT_SYNTAX"], [945, 946, 9, "enum_NEXT_SYNTAX"], [947, 934, 10, "enum_LAST_LEXICAL_USE"], [946, 947, 9, "enum_NEXT_SYNTAX"], [947, 948, 9, "enum_NEXT_SYNTAX"], [948, 949, 9, "enum_NEXT_SYNTAX"], [949, 950, 9, "enum_NEXT_SYNTAX"], [950, 951, 9, "enum_NEXT_SYNTAX"], [951, 953, 9, "enum_NEXT_SYNTAX"], [954, 834, 10, "enum_LAST_LEXICAL_USE"], [953, 954, 9, "enum_NEXT_SYNTAX"], [954, 955, 9, "enum_NEXT_SYNTAX"], [955, 957, 9, "enum_NEXT_SYNTAX"], [958, 838, 10, "enum_LAST_LEXICAL_USE"], [957, 958, 9, "enum_NEXT_SYNTAX"], [958, 959, 9, "enum_NEXT_SYNTAX"], [959, 960, 9, "enum_NEXT_SYNTAX"], [960, 961, 9, "enum_NEXT_SYNTAX"], [961, 963, 9, "enum_NEXT_SYNTAX"], [963, 964, 9, "enum_NEXT_SYNTAX"], [965, 848, 10, "enum_LAST_LEXICAL_USE"], [964, 965, 9, "enum_NEXT_SYNTAX"], [965, 966, 9, "enum_NEXT_SYNTAX"], [967, 944, 10, "enum_LAST_LEXICAL_USE"], [966, 967, 9, "enum_NEXT_SYNTAX"], [967, 968, 9, "enum_NEXT_SYNTAX"], [968, 969, 9, "enum_NEXT_SYNTAX"], [970, 947, 10, "enum_LAST_LEXICAL_USE"], [969, 970, 9, "enum_NEXT_SYNTAX"], [970, 971, 9, "enum_NEXT_SYNTAX"], [971, 972, 9, "enum_NEXT_SYNTAX"], [973, 862, 10, "enum_LAST_LEXICAL_USE"], [972, 973, 9, "enum_NEXT_SYNTAX"], [973, 974, 9, "enum_NEXT_SYNTAX"], [974, 975, 9, "enum_NEXT_SYNTAX"], [975, 976, 9, "enum_NEXT_SYNTAX"], [976, 977, 9, "enum_NEXT_SYNTAX"], [978, 967, 10, "enum_LAST_LEXICAL_USE"], [977, 978, 9, "enum_NEXT_SYNTAX"], [978, 979, 9, "enum_NEXT_SYNTAX"], [979, 980, 9, "enum_NEXT_SYNTAX"], [980, 981, 9, "enum_NEXT_SYNTAX"], [981, 982, 9, "enum_NEXT_SYNTAX"], [982, 983, 9, "enum_NEXT_SYNTAX"], [983, 984, 9, "enum_NEXT_SYNTAX"], [985, 939, 10, "enum_LAST_LEXICAL_USE"], [984, 985, 9, "enum_NEXT_SYNTAX"], [985, 986, 9, "enum_NEXT_SYNTAX"], [986, 987, 9, "enum_NEXT_SYNTAX"], [987, 988, 9, "enum_NEXT_SYNTAX"], [989, 778, 10, "enum_LAST_LEXICAL_USE"], [988, 989, 9, "enum_NEXT_SYNTAX"], [989, 990, 9, "enum_NEXT_SYNTAX"], [990, 991, 9, "enum_NEXT_SYNTAX"], [991, 992, 9, "enum_NEXT_SYNTAX"], [993, 12, 10, "enum_LAST_LEXICAL_USE"], [992, 993, 9, "enum_NEXT_SYNTAX"], [993, 994, 9, "enum_NEXT_SYNTAX"], [994, 995, 9, "enum_NEXT_SYNTAX"], [995, 996, 9, "enum_NEXT_SYNTAX"], [997, 925, 10, "enum_LAST_LEXICAL_USE"], [996, 997, 9, "enum_NEXT_SYNTAX"], [997, 998, 9, "enum_NEXT_SYNTAX"], [998, 999, 9, "enum_NEXT_SYNTAX"], [999, 1000, 9, "enum_NEXT_SYNTAX"], [1001, 245, 10, "enum_LAST_LEXICAL_USE"], [1000, 1001, 9, "enum_NEXT_SYNTAX"], [1001, 1002, 9, "enum_NEXT_SYNTAX"], [1002, 1003, 9, "enum_NEXT_SYNTAX"], [1003, 1004, 9, "enum_NEXT_SYNTAX"], [1005, 249, 10, "enum_LAST_LEXICAL_USE"], [1004, 1005, 9, "enum_NEXT_SYNTAX"], [1005, 1006, 9, "enum_NEXT_SYNTAX"], [1006, 1007, 9, "enum_NEXT_SYNTAX"], [1007, 1008, 9, "enum_NEXT_SYNTAX"], [1009, 954, 10, "enum_LAST_LEXICAL_USE"], [1008, 1009, 9, "enum_NEXT_SYNTAX"], [1009, 1010, 9, "enum_NEXT_SYNTAX"], [1010, 1012, 9, "enum_NEXT_SYNTAX"], [1013, 1009, 10, "enum_LAST_LEXICAL_USE"], [1012, 1013, 9, "enum_NEXT_SYNTAX"], [1013, 1014, 9, "enum_NEXT_SYNTAX"], [1014, 1016, 9, "enum_NEXT_SYNTAX"], [1017, 958, 10, "enum_LAST_LEXICAL_USE"], [1016, 1017, 9, "enum_NEXT_SYNTAX"], [1017, 1018, 9, "enum_NEXT_SYNTAX"], [1018, 1019, 9, "enum_NEXT_SYNTAX"], [1019, 1020, 9, "enum_NEXT_SYNTAX"], [1020, 1023, 9, "enum_NEXT_SYNTAX"], [1023, 1024, 9, "enum_NEXT_SYNTAX"], [1024, 1025, 9, "enum_NEXT_SYNTAX"], [1025, 1026, 9, "enum_NEXT_SYNTAX"], [1027, 973, 10, "enum_LAST_LEXICAL_USE"], [1026, 1027, 9, "enum_NEXT_SYNTAX"], [1027, 1028, 9, "enum_NEXT_SYNTAX"], [1029, 921, 10, "enum_LAST_LEXICAL_USE"], [1028, 1029, 9, "enum_NEXT_SYNTAX"], [1029, 1030, 9, "enum_NEXT_SYNTAX"], [1030, 1031, 9, "enum_NEXT_SYNTAX"], [1031, 1032, 9, "enum_NEXT_SYNTAX"], [1033, 1027, 10, "enum_LAST_LEXICAL_USE"], [1032, 1033, 9, "enum_NEXT_SYNTAX"], [1033, 1034, 9, "enum_NEXT_SYNTAX"], [1034, 1035, 9, "enum_NEXT_SYNTAX"], [1035, 1036, 9, "enum_NEXT_SYNTAX"], [1036, 1037, 9, "enum_NEXT_SYNTAX"], [1037, 1038, 9, "enum_NEXT_SYNTAX"], [1038, 1039, 9, "enum_NEXT_SYNTAX"], [1039, 1040, 9, "enum_NEXT_SYNTAX"], [1040, 1041, 9, "enum_NEXT_SYNTAX"], [1041, 1042, 9, "enum_NEXT_SYNTAX"], [1043, 1029, 10, "enum_LAST_LEXICAL_USE"], [1042, 1043, 9, "enum_NEXT_SYNTAX"], [1043, 1044, 9, "enum_NEXT_SYNTAX"], [1044, 1045, 9, "enum_NEXT_SYNTAX"], [1045, 1046, 9, "enum_NEXT_SYNTAX"], [1047, 1024, 10, "enum_LAST_LEXICAL_USE"], [1046, 1047, 9, "enum_NEXT_SYNTAX"], [1047, 1048, 9, "enum_NEXT_SYNTAX"], [1048, 1049, 9, "enum_NEXT_SYNTAX"], [1049, 1050, 9, "enum_NEXT_SYNTAX"], [1050, 1051, 9, "enum_NEXT_SYNTAX"], [1051, 1052, 9, "enum_NEXT_SYNTAX"], [1052, 1055, 9, "enum_NEXT_SYNTAX"], [1055, 1056, 9, "enum_NEXT_SYNTAX"], [1056, 1058, 9, "enum_NEXT_SYNTAX"], [1059, 985, 10, "enum_LAST_LEXICAL_USE"], [1058, 1059, 9, "enum_NEXT_SYNTAX"], [1059, 1060, 9, "enum_NEXT_SYNTAX"], [1061, 941, 10, "enum_LAST_LEXICAL_USE"], [1060, 1061, 9, "enum_NEXT_SYNTAX"], [1061, 1062, 9, "enum_NEXT_SYNTAX"], [1062, 1063, 9, "enum_NEXT_SYNTAX"], [1063, 1064, 9, "enum_NEXT_SYNTAX"], [1064, 1065, 9, "enum_NEXT_SYNTAX"], [1066, 970, 10, "enum_LAST_LEXICAL_USE"], [1065, 1066, 9, "enum_NEXT_SYNTAX"], [1066, 1067, 9, "enum_NEXT_SYNTAX"], [1067, 1068, 9, "enum_NEXT_SYNTAX"], [1068, 1069, 9, "enum_NEXT_SYNTAX"], [1069, 1070, 9, "enum_NEXT_SYNTAX"], [1070, 1072, 9, "enum_NEXT_SYNTAX"], [1073, 1013, 10, "enum_LAST_LEXICAL_USE"], [1072, 1073, 9, "enum_NEXT_SYNTAX"], [1073, 1074, 9, "enum_NEXT_SYNTAX"], [1074, 1076, 9, "enum_NEXT_SYNTAX"], [1077, 1017, 10, "enum_LAST_LEXICAL_USE"], [1076, 1077, 9, "enum_NEXT_SYNTAX"], [1077, 1078, 9, "enum_NEXT_SYNTAX"], [1078, 1079, 9, "enum_NEXT_SYNTAX"], [1079, 1080, 9, "enum_NEXT_SYNTAX"], [1080, 1081, 9, "enum_NEXT_SYNTAX"], [1082, 1066, 10, "enum_LAST_LEXICAL_USE"], [1081, 1082, 9, "enum_NEXT_SYNTAX"], [1082, 1083, 9, "enum_NEXT_SYNTAX"], [1083, 1084, 9, "enum_NEXT_SYNTAX"], [1084, 1087, 9, "enum_NEXT_SYNTAX"], [1088, 1073, 10, "enum_LAST_LEXICAL_USE"], [1087, 1088, 9, "enum_NEXT_SYNTAX"], [1088, 1089, 9, "enum_NEXT_SYNTAX"], [1089, 1091, 9, "enum_NEXT_SYNTAX"], [1092, 1077, 10, "enum_LAST_LEXICAL_USE"], [1091, 1092, 9, "enum_NEXT_SYNTAX"], [1092, 1093, 9, "enum_NEXT_SYNTAX"], [1093, 1094, 9, "enum_NEXT_SYNTAX"], [1094, 1095, 9, "enum_NEXT_SYNTAX"], [1095, 1098, 9, "enum_NEXT_SYNTAX"], [1099, 890, 10, "enum_LAST_LEXICAL_USE"], [1098, 1099, 9, "enum_NEXT_SYNTAX"], [1099, 1100, 9, "enum_NEXT_SYNTAX"], [1100, 1102, 9, "enum_NEXT_SYNTAX"], [1103, 997, 10, "enum_LAST_LEXICAL_USE"], [1102, 1103, 9, "enum_NEXT_SYNTAX"], [1103, 1104, 9, "enum_NEXT_SYNTAX"], [1105, 1043, 10, "enum_LAST_LEXICAL_USE"], [1104, 1105, 9, "enum_NEXT_SYNTAX"], [1105, 1106, 9, "enum_NEXT_SYNTAX"], [1106, 1107, 9, "enum_NEXT_SYNTAX"], [1107, 1108, 9, "enum_NEXT_SYNTAX"], [1108, 1109, 9, "enum_NEXT_SYNTAX"], [1109, 1110, 9, "enum_NEXT_SYNTAX"], [1111, 1059, 10, "enum_LAST_LEXICAL_USE"], [1110, 1111, 9, "enum_NEXT_SYNTAX"], [1111, 1112, 9, "enum_NEXT_SYNTAX"], [1112, 1113, 9, "enum_NEXT_SYNTAX"], [1113, 1114, 9, "enum_NEXT_SYNTAX"], [1114, 1115, 9, "enum_NEXT_SYNTAX"], [1115, 1116, 9, "enum_NEXT_SYNTAX"], [1116, 1117, 9, "enum_NEXT_SYNTAX"], [1117, 1118, 9, "enum_NEXT_SYNTAX"], [1119, 1103, 10, "enum_LAST_LEXICAL_USE"], [1118, 1119, 9, "enum_NEXT_SYNTAX"], [1119, 1120, 9, "enum_NEXT_SYNTAX"], [1121, 1105, 10, "enum_LAST_LEXICAL_USE"], [1120, 1121, 9, "enum_NEXT_SYNTAX"], [1121, 1122, 9, "enum_NEXT_SYNTAX"], [1122, 1123, 9, "enum_NEXT_SYNTAX"], [1123, 1124, 9, "enum_NEXT_SYNTAX"], [1125, 1119, 10, "enum_LAST_LEXICAL_USE"], [1124, 1125, 9, "enum_NEXT_SYNTAX"], [1125, 1126, 9, "enum_NEXT_SYNTAX"], [1126, 1128, 9, "enum_NEXT_SYNTAX"], [1128, 1129, 9, "enum_NEXT_SYNTAX"], [1130, 965, 10, "enum_LAST_LEXICAL_USE"], [1129, 1130, 9, "enum_NEXT_SYNTAX"], [1130, 1131, 9, "enum_NEXT_SYNTAX"], [1132, 1041, 10, "enum_LAST_LEXICAL_USE"], [1131, 1132, 9, "enum_NEXT_SYNTAX"], [1132, 1133, 9, "enum_NEXT_SYNTAX"], [1133, 1134, 9, "enum_NEXT_SYNTAX"], [1135, 983, 10, "enum_LAST_LEXICAL_USE"], [1134, 1135, 9, "enum_NEXT_SYNTAX"], [1135, 1136, 9, "enum_NEXT_SYNTAX"], [1137, 1111, 10, "enum_LAST_LEXICAL_USE"], [1136, 1137, 9, "enum_NEXT_SYNTAX"], [1137, 1138, 9, "enum_NEXT_SYNTAX"], [1138, 1139, 9, "enum_NEXT_SYNTAX"], [1139, 1140, 9, "enum_NEXT_SYNTAX"], [1141, 989, 10, "enum_LAST_LEXICAL_USE"], [1140, 1141, 9, "enum_NEXT_SYNTAX"], [1141, 1142, 9, "enum_NEXT_SYNTAX"], [1142, 1143, 9, "enum_NEXT_SYNTAX"], [1143, 1144, 9, "enum_NEXT_SYNTAX"], [1145, 993, 10, "enum_LAST_LEXICAL_USE"], [1144, 1145, 9, "enum_NEXT_SYNTAX"], [1145, 1146, 9, "enum_NEXT_SYNTAX"], [1146, 1147, 9, "enum_NEXT_SYNTAX"], [1147, 1148, 9, "enum_NEXT_SYNTAX"], [1149, 1125, 10, "enum_LAST_LEXICAL_USE"], [1148, 1149, 9, "enum_NEXT_SYNTAX"], [1149, 1150, 9, "enum_NEXT_SYNTAX"], [1150, 1151, 9, "enum_NEXT_SYNTAX"], [1151, 1152, 9, "enum_NEXT_SYNTAX"], [1153, 1001, 10, "enum_LAST_LEXICAL_USE"], [1152, 1153, 9, "enum_NEXT_SYNTAX"], [1153, 1154, 9, "enum_NEXT_SYNTAX"], [1154, 1155, 9, "enum_NEXT_SYNTAX"], [1155, 1156, 9, "enum_NEXT_SYNTAX"], [1157, 1088, 10, "enum_LAST_LEXICAL_USE"], [1156, 1157, 9, "enum_NEXT_SYNTAX"], [1157, 1158, 9, "enum_NEXT_SYNTAX"], [1158, 1160, 9, "enum_NEXT_SYNTAX"], [1161, 1157, 10, "enum_LAST_LEXICAL_USE"], [1160, 1161, 9, "enum_NEXT_SYNTAX"], [1161, 1162, 9, "enum_NEXT_SYNTAX"], [1162, 1164, 9, "enum_NEXT_SYNTAX"], [1165, 1092, 10, "enum_LAST_LEXICAL_USE"], [1164, 1165, 9, "enum_NEXT_SYNTAX"], [1165, 1166, 9, "enum_NEXT_SYNTAX"], [1166, 1167, 9, "enum_NEXT_SYNTAX"], [1167, 1168, 9, "enum_NEXT_SYNTAX"], [1168, 1171, 9, "enum_NEXT_SYNTAX"], [1172, 762, 10, "enum_LAST_LEXICAL_USE"], [1171, 1172, 9, "enum_NEXT_SYNTAX"], [1172, 1173, 9, "enum_NEXT_SYNTAX"], [1173, 1174, 9, "enum_NEXT_SYNTAX"], [1174, 1175, 9, "enum_NEXT_SYNTAX"], [1175, 1176, 9, "enum_NEXT_SYNTAX"], [1176, 1177, 9, "enum_NEXT_SYNTAX"], [1178, 1121, 10, "enum_LAST_LEXICAL_USE"], [1177, 1178, 9, "enum_NEXT_SYNTAX"], [1178, 1179, 9, "enum_NEXT_SYNTAX"], [1179, 1180, 9, "enum_NEXT_SYNTAX"], [1180, 1181, 9, "enum_NEXT_SYNTAX"], [1182, 1178, 10, "enum_LAST_LEXICAL_USE"], [1181, 1182, 9, "enum_NEXT_SYNTAX"], [1182, 1183, 9, "enum_NEXT_SYNTAX"], [1183, 1184, 9, "enum_NEXT_SYNTAX"], [1184, 1185, 9, "enum_NEXT_SYNTAX"], [1186, 1172, 10, "enum_LAST_LEXICAL_USE"], [1185, 1186, 9, "enum_NEXT_SYNTAX"], [1186, 1187, 9, "enum_NEXT_SYNTAX"], [1187, 1188, 9, "enum_NEXT_SYNTAX"], [1188, 1189, 9, "enum_NEXT_SYNTAX"], [1189, 1190, 9, "enum_NEXT_SYNTAX"], [1190, 1191, 9, "enum_NEXT_SYNTAX"], [1191, 1192, 9, "enum_NEXT_SYNTAX"], [1193, 1186, 10, "enum_LAST_LEXICAL_USE"], [1192, 1193, 9, "enum_NEXT_SYNTAX"], [1193, 1194, 9, "enum_NEXT_SYNTAX"], [1194, 1195, 9, "enum_NEXT_SYNTAX"], [1195, 1196, 9, "enum_NEXT_SYNTAX"], [1196, 1197, 9, "enum_NEXT_SYNTAX"], [1198, 751, 10, "enum_LAST_LEXICAL_USE"], [1197, 1198, 9, "enum_NEXT_SYNTAX"], [1198, 1199, 9, "enum_NEXT_SYNTAX"], [1199, 1200, 9, "enum_NEXT_SYNTAX"], [1201, 1132, 10, "enum_LAST_LEXICAL_USE"], [1200, 1201, 9, "enum_NEXT_SYNTAX"], [1201, 1203, 9, "enum_NEXT_SYNTAX"], [1203, 1204, 9, "enum_NEXT_SYNTAX"], [1205, 1082, 10, "enum_LAST_LEXICAL_USE"], [1204, 1205, 9, "enum_NEXT_SYNTAX"], [1205, 1206, 9, "enum_NEXT_SYNTAX"], [1206, 1207, 9, "enum_NEXT_SYNTAX"], [1207, 1208, 9, "enum_NEXT_SYNTAX"], [1208, 1209, 9, "enum_NEXT_SYNTAX"], [1209, 1211, 9, "enum_NEXT_SYNTAX"], [1212, 785, 10, "enum_LAST_LEXICAL_USE"], [1211, 1212, 9, "enum_NEXT_SYNTAX"], [1212, 1213, 9, "enum_NEXT_SYNTAX"], [1213, 1214, 9, "enum_NEXT_SYNTAX"], [1214, 1215, 9, "enum_NEXT_SYNTAX"], [1215, 1216, 9, "enum_NEXT_SYNTAX"], [1216, 1217, 9, "enum_NEXT_SYNTAX"], [1218, 753, 10, "enum_LAST_LEXICAL_USE"], [1217, 1218, 9, "enum_NEXT_SYNTAX"], [1218, 1219, 9, "enum_NEXT_SYNTAX"], [1219, 1220, 9, "enum_NEXT_SYNTAX"], [1221, 1130, 10, "enum_LAST_LEXICAL_USE"], [1220, 1221, 9, "enum_NEXT_SYNTAX"], [1221, 1224, 9, "enum_NEXT_SYNTAX"], [1224, 1225, 9, "enum_NEXT_SYNTAX"], [1225, 1228, 9, "enum_NEXT_SYNTAX"], [1229, 820, 10, "enum_LAST_LEXICAL_USE"], [1228, 1229, 9, "enum_NEXT_SYNTAX"], [1229, 1230, 9, "enum_NEXT_SYNTAX"], [1230, 1232, 9, "enum_NEXT_SYNTAX"], [1233, 1212, 10, "enum_LAST_LEXICAL_USE"], [1232, 1233, 9, "enum_NEXT_SYNTAX"], [1233, 1234, 9, "enum_NEXT_SYNTAX"], [1234, 1235, 9, "enum_NEXT_SYNTAX"], [1235, 1236, 9, "enum_NEXT_SYNTAX"], [1236, 1237, 9, "enum_NEXT_SYNTAX"], [1237, 1238, 9, "enum_NEXT_SYNTAX"], [1239, 1218, 10, "enum_LAST_LEXICAL_USE"], [1238, 1239, 9, "enum_NEXT_SYNTAX"], [1239, 1240, 9, "enum_NEXT_SYNTAX"], [1240, 1241, 9, "enum_NEXT_SYNTAX"], [1241, 1242, 9, "enum_NEXT_SYNTAX"], [1243, 1221, 10, "enum_LAST_LEXICAL_USE"], [1242, 1243, 9, "enum_NEXT_SYNTAX"], [1243, 1244, 9, "enum_NEXT_SYNTAX"], [1244, 1245, 9, "enum_NEXT_SYNTAX"], [1245, 1246, 9, "enum_NEXT_SYNTAX"], [1247, 1205, 10, "enum_LAST_LEXICAL_USE"], [1246, 1247, 9, "enum_NEXT_SYNTAX"], [1247, 1248, 9, "enum_NEXT_SYNTAX"], [1248, 1249, 9, "enum_NEXT_SYNTAX"], [1249, 1252, 9, "enum_NEXT_SYNTAX"], [1252, 1253, 9, "enum_NEXT_SYNTAX"], [1253, 1255, 9, "enum_NEXT_SYNTAX"], [1256, 1233, 10, "enum_LAST_LEXICAL_USE"], [1255, 1256, 9, "enum_NEXT_SYNTAX"], [1256, 1257, 9, "enum_NEXT_SYNTAX"], [1257, 1258, 9, "enum_NEXT_SYNTAX"], [1258, 1259, 9, "enum_NEXT_SYNTAX"], [1259, 1260, 9, "enum_NEXT_SYNTAX"], [1260, 1261, 9, "enum_NEXT_SYNTAX"], [1262, 1239, 10, "enum_LAST_LEXICAL_USE"], [1261, 1262, 9, "enum_NEXT_SYNTAX"], [1262, 1263, 9, "enum_NEXT_SYNTAX"], [1263, 1264, 9, "enum_NEXT_SYNTAX"], [1264, 1265, 9, "enum_NEXT_SYNTAX"], [1265, 1266, 9, "enum_NEXT_SYNTAX"], [1266, 1267, 9, "enum_NEXT_SYNTAX"], [1267, 1268, 9, "enum_NEXT_SYNTAX"], [1269, 1247, 10, "enum_LAST_LEXICAL_USE"], [1268, 1269, 9, "enum_NEXT_SYNTAX"], [1269, 1270, 9, "enum_NEXT_SYNTAX"], [1270, 1271, 9, "enum_NEXT_SYNTAX"], [1271, 1272, 9, "enum_NEXT_SYNTAX"], [1273, 1243, 10, "enum_LAST_LEXICAL_USE"], [1272, 1273, 9, "enum_NEXT_SYNTAX"], [1273, 1276, 9, "enum_NEXT_SYNTAX"], [1277, 369, 10, "enum_LAST_LEXICAL_USE"], [1276, 1277, 9, "enum_NEXT_SYNTAX"], [1277, 1278, 9, "enum_NEXT_SYNTAX"], [1278, 1279, 9, "enum_NEXT_SYNTAX"], [1279, 1280, 9, "enum_NEXT_SYNTAX"], [1280, 1281, 9, "enum_NEXT_SYNTAX"], [1282, 557, 10, "enum_LAST_LEXICAL_USE"], [1281, 1282, 9, "enum_NEXT_SYNTAX"], [1282, 1283, 9, "enum_NEXT_SYNTAX"], [1283, 1284, 9, "enum_NEXT_SYNTAX"], [1284, 1285, 9, "enum_NEXT_SYNTAX"], [1286, 570, 10, "enum_LAST_LEXICAL_USE"], [1285, 1286, 9, "enum_NEXT_SYNTAX"], [1286, 1287, 9, "enum_NEXT_SYNTAX"], [1287, 1288, 9, "enum_NEXT_SYNTAX"], [1288, 1289, 9, "enum_NEXT_SYNTAX"], [1290, 755, 10, "enum_LAST_LEXICAL_USE"], [1289, 1290, 9, "enum_NEXT_SYNTAX"], [1290, 1291, 9, "enum_NEXT_SYNTAX"], [1291, 1292, 9, "enum_NEXT_SYNTAX"], [1292, 1293, 9, "enum_NEXT_SYNTAX"], [1294, 1256, 10, "enum_LAST_LEXICAL_USE"], [1293, 1294, 9, "enum_NEXT_SYNTAX"], [1294, 1295, 9, "enum_NEXT_SYNTAX"], [1295, 1298, 9, "enum_NEXT_SYNTAX"], [1298, 1299, 9, "enum_NEXT_SYNTAX"], [1300, 799, 10, "enum_LAST_LEXICAL_USE"], [1299, 1300, 9, "enum_NEXT_SYNTAX"], [1300, 1301, 9, "enum_NEXT_SYNTAX"], [1302, 1193, 10, "enum_LAST_LEXICAL_USE"], [1301, 1302, 9, "enum_NEXT_SYNTAX"], [1302, 1303, 9, "enum_NEXT_SYNTAX"], [1304, 1273, 10, "enum_LAST_LEXICAL_USE"], [1303, 1304, 9, "enum_NEXT_SYNTAX"], [1304, 1305, 9, "enum_NEXT_SYNTAX"], [1306, 1277, 10, "enum_LAST_LEXICAL_USE"], [1305, 1306, 9, "enum_NEXT_SYNTAX"], [1306, 1307, 9, "enum_NEXT_SYNTAX"], [1308, 1137, 10, "enum_LAST_LEXICAL_USE"], [1307, 1308, 9, "enum_NEXT_SYNTAX"], [1308, 1309, 9, "enum_NEXT_SYNTAX"], [14, 18, 1, "enum_CFG_NEXT"], [18, 22, 1, "enum_CFG_NEXT"], [22, 26, 1, "enum_CFG_NEXT"], [26, 31, 1, "enum_CFG_NEXT"], [31, 38, 1, "enum_CFG_NEXT"], [38, 44, 1, "enum_CFG_NEXT"], [44, 48, 1, "enum_CFG_NEXT"], [48, 52, 1, "enum_CFG_NEXT"], [52, 56, 1, "enum_CFG_NEXT"], [56, 1, 1, "enum_CFG_NEXT"], [25, 64, 1, "enum_CFG_NEXT"], [64, 70, 1, "enum_CFG_NEXT"], [64, 411, 1, "enum_CFG_NEXT"], [70, 91, 1, "enum_CFG_NEXT"], [91, 118, 1, "enum_CFG_NEXT"], [118, 129, 1, "enum_CFG_NEXT"], [129, 134, 1, "enum_CFG_NEXT"], [134, 139, 1, "enum_CFG_NEXT"], [139, 144, 1, "enum_CFG_NEXT"], [144, 149, 1, "enum_CFG_NEXT"], [149, 163, 1, "enum_CFG_NEXT"], [163, 158, 1, "enum_CFG_NEXT"], [158, 368, 1, "enum_CFG_NEXT"], [158, 175, 1, "enum_CFG_NEXT"], [175, 186, 1, "enum_CFG_NEXT"], [186, 255, 1, "enum_CFG_NEXT"], [255, 266, 1, "enum_CFG_NEXT"], [266, 271, 1, "enum_CFG_NEXT"], [266, 289, 1, "enum_CFG_NEXT"], [271, 307, 1, "enum_CFG_NEXT"], [289, 307, 1, "enum_CFG_NEXT"], [307, 333, 1, "enum_CFG_NEXT"], [307, 312, 1, "enum_CFG_NEXT"], [312, 347, 1, "enum_CFG_NEXT"], [333, 347, 1, "enum_CFG_NEXT"], [347, 357, 1, "enum_CFG_NEXT"], [357, 158, 1, "enum_CFG_NEXT"], [368, 388, 1, "enum_CFG_NEXT"], [388, 1298, 1, "enum_CFG_NEXT"], [411, 462, 1, "enum_CFG_NEXT"], [411, 423, 1, "enum_CFG_NEXT"], [423, 433, 1, "enum_CFG_NEXT"], [433, 587, 1, "enum_CFG_NEXT"], [462, 516, 1, "enum_CFG_NEXT"], [462, 474, 1, "enum_CFG_NEXT"], [474, 487, 1, "enum_CFG_NEXT"], [487, 587, 1, "enum_CFG_NEXT"], [516, 556, 1, "enum_CFG_NEXT"], [516, 528, 1, "enum_CFG_NEXT"], [528, 538, 1, "enum_CFG_NEXT"], [538, 587, 1, "enum_CFG_NEXT"], [556, 569, 1, "enum_CFG_NEXT"], [569, 587, 1, "enum_CFG_NEXT"], [587, 601, 1, "enum_CFG_NEXT"], [587, 722, 1, "enum_CFG_NEXT"], [601, 613, 1, "enum_CFG_NEXT"], [601, 639, 1, "enum_CFG_NEXT"], [613, 722, 1, "enum_CFG_NEXT"], [639, 679, 1, "enum_CFG_NEXT"], [639, 651, 1, "enum_CFG_NEXT"], [651, 722, 1, "enum_CFG_NEXT"], [679, 701, 1, "enum_CFG_NEXT"], [679, 691, 1, "enum_CFG_NEXT"], [691, 722, 1, "enum_CFG_NEXT"], [701, 722, 1, "enum_CFG_NEXT"], [722, 745, 1, "enum_CFG_NEXT"], [745, 784, 1, "enum_CFG_NEXT"], [784, 809, 1, "enum_CFG_NEXT"], [809, 812, 1, "enum_CFG_NEXT"], [809, 820, 1, "enum_CFG_NEXT"], [812, 820, 1, "enum_CFG_NEXT"], [820, 1058, 1, "enum_CFG_NEXT"], [820, 824, 1, "enum_CFG_NEXT"], [824, 834, 1, "enum_CFG_NEXT"], [834, 837, 1, "enum_CFG_NEXT"], [834, 847, 1, "enum_CFG_NEXT"], [837, 847, 1, "enum_CFG_NEXT"], [847, 861, 1, "enum_CFG_NEXT"], [861, 890, 1, "enum_CFG_NEXT"], [890, 933, 1, "enum_CFG_NEXT"], [890, 893, 1, "enum_CFG_NEXT"], [893, 918, 1, "enum_CFG_NEXT"], [918, 933, 1, "enum_CFG_NEXT"], [933, 930, 1, "enum_CFG_NEXT"], [930, 1023, 1, "enum_CFG_NEXT"], [930, 938, 1, "enum_CFG_NEXT"], [938, 954, 1, "enum_CFG_NEXT"], [954, 957, 1, "enum_CFG_NEXT"], [954, 963, 1, "enum_CFG_NEXT"], [957, 963, 1, "enum_CFG_NEXT"], [963, 1013, 1, "enum_CFG_NEXT"], [1013, 1016, 1, "enum_CFG_NEXT"], [1013, 930, 1, "enum_CFG_NEXT"], [1016, 930, 1, "enum_CFG_NEXT"], [1023, 1040, 1, "enum_CFG_NEXT"], [1040, 1171, 1, "enum_CFG_NEXT"], [1058, 1073, 1, "enum_CFG_NEXT"], [1073, 1076, 1, "enum_CFG_NEXT"], [1073, 1088, 1, "enum_CFG_NEXT"], [1076, 1088, 1, "enum_CFG_NEXT"], [1088, 1091, 1, "enum_CFG_NEXT"], [1088, 1099, 1, "enum_CFG_NEXT"], [1091, 1099, 1, "enum_CFG_NEXT"], [1099, 1102, 1, "enum_CFG_NEXT"], [1099, 1128, 1, "enum_CFG_NEXT"], [1102, 1118, 1, "enum_CFG_NEXT"], [1118, 1128, 1, "enum_CFG_NEXT"], [1128, 1161, 1, "enum_CFG_NEXT"], [1161, 1164, 1, "enum_CFG_NEXT"], [1161, 1171, 1, "enum_CFG_NEXT"], [1164, 1171, 1, "enum_CFG_NEXT"], [1171, 1192, 1, "enum_CFG_NEXT"], [1192, 1206, 1, "enum_CFG_NEXT"], [1206, 1229, 1, "enum_CFG_NEXT"], [1206, 1211, 1, "enum_CFG_NEXT"], [1211, 1276, 1, "enum_CFG_NEXT"], [1229, 1255, 1, "enum_CFG_NEXT"], [1229, 1232, 1, "enum_CFG_NEXT"], [1232, 1276, 1, "enum_CFG_NEXT"], [1255, 1276, 1, "enum_CFG_NEXT"], [1276, 1298, 1, "enum_CFG_NEXT"], [63, 16, 3, "enum_LAST_WRITE"], [76, 63, 2, "enum_LAST_READ"], [76, 16, 3, "enum_LAST_WRITE"], [79, 72, 2, "enum_LAST_READ"], [83, 4, 3, "enum_LAST_WRITE"], [95, 79, 2, "enum_LAST_READ"], [99, 95, 2, "enum_LAST_READ"], [104, 83, 2, "enum_LAST_READ"], [104, 4, 3, "enum_LAST_WRITE"], [114, 109, 2, "enum_LAST_READ"], [116, 76, 2, "enum_LAST_READ"], [116, 16, 3, "enum_LAST_WRITE"], [92, 6, 3, "enum_LAST_WRITE"], [125, 92, 3, "enum_LAST_WRITE"], [164, 119, 3, "enum_LAST_WRITE"], [157, 181, 2, "enum_LAST_READ"], [157, 157, 3, "enum_LAST_WRITE"], [159, 265, 2, "enum_LAST_READ"], [159, 299, 2, "enum_LAST_READ"], [159, 159, 3, "enum_LAST_WRITE"], [178, 178, 2, "enum_LAST_READ"], [178, 164, 2, "enum_LAST_READ"], [178, 119, 3, "enum_LAST_WRITE"], [181, 181, 2, "enum_LAST_READ"], [181, 157, 3, "enum_LAST_WRITE"], [176, 306, 2, "enum_LAST_READ"], [176, 343, 2, "enum_LAST_READ"], [176, 176, 3, "enum_LAST_WRITE"], [199, 199, 2, "enum_LAST_READ"], [201, 201, 2, "enum_LAST_READ"], [201, 2, 3, "enum_LAST_WRITE"], [203, 317, 2, "enum_LAST_READ"], [203, 104, 2, "enum_LAST_READ"], [203, 338, 2, "enum_LAST_READ"], [203, 4, 3, "enum_LAST_WRITE"], [206, 265, 2, "enum_LAST_READ"], [206, 299, 2, "enum_LAST_READ"], [206, 159, 3, "enum_LAST_WRITE"], [208, 306, 2, "enum_LAST_READ"], [208, 343, 2, "enum_LAST_READ"], [208, 176, 3, "enum_LAST_WRITE"], [211, 211, 2, "enum_LAST_READ"], [211, 8, 3, "enum_LAST_WRITE"], [213, 213, 2, "enum_LAST_READ"], [213, 10, 3, "enum_LAST_WRITE"], [225, 225, 2, "enum_LAST_READ"], [225, 20, 3, "enum_LAST_WRITE"], [229, 229, 2, "enum_LAST_READ"], [229, 24, 3, "enum_LAST_WRITE"], [233, 233, 2, "enum_LAST_READ"], [233, 28, 3, "enum_LAST_WRITE"], [237, 237, 2, "enum_LAST_READ"], [237, 35, 3, "enum_LAST_WRITE"], [241, 241, 2, "enum_LAST_READ"], [241, 42, 3, "enum_LAST_WRITE"], [245, 245, 2, "enum_LAST_READ"], [245, 46, 3, "enum_LAST_WRITE"], [249, 249, 2, "enum_LAST_READ"], [249, 50, 3, "enum_LAST_WRITE"], [253, 253, 2, "enum_LAST_READ"], [253, 54, 3, "enum_LAST_WRITE"], [188, 188, 3, "enum_LAST_WRITE"], [190, 260, 2, "enum_LAST_READ"], [190, 190, 3, "enum_LAST_WRITE"], [192, 192, 3, "enum_LAST_WRITE"], [194, 362, 2, "enum_LAST_READ"], [194, 194, 3, "enum_LAST_WRITE"], [196, 196, 3, "enum_LAST_WRITE"], [256, 256, 2, "enum_LAST_READ"], [256, 130, 3, "enum_LAST_WRITE"], [260, 260, 2, "enum_LAST_READ"], [260, 190, 3, "enum_LAST_WRITE"], [265, 206, 2, "enum_LAST_READ"], [265, 159, 3, "enum_LAST_WRITE"], [272, 272, 2, "enum_LAST_READ"], [272, 290, 2, "enum_LAST_READ"], [272, 313, 2, "enum_LAST_READ"], [272, 135, 3, "enum_LAST_WRITE"], [276, 203, 2, "enum_LAST_READ"], [276, 4, 3, "enum_LAST_WRITE"], [290, 272, 2, "enum_LAST_READ"], [290, 290, 2, "enum_LAST_READ"], [290, 313, 2, "enum_LAST_READ"], [290, 135, 3, "enum_LAST_WRITE"], [294, 203, 2, "enum_LAST_READ"], [294, 4, 3, "enum_LAST_WRITE"], [299, 265, 2, "enum_LAST_READ"], [299, 159, 3, "enum_LAST_WRITE"], [306, 208, 2, "enum_LAST_READ"], [306, 176, 3, "enum_LAST_WRITE"], [313, 272, 2, "enum_LAST_READ"], [313, 290, 2, "enum_LAST_READ"], [313, 135, 3, "enum_LAST_WRITE"], [317, 276, 2, "enum_LAST_READ"], [317, 294, 2, "enum_LAST_READ"], [317, 4, 3, "enum_LAST_WRITE"], [334, 334, 2, "enum_LAST_READ"], [334, 140, 3, "enum_LAST_WRITE"], [338, 276, 2, "enum_LAST_READ"], [338, 294, 2, "enum_LAST_READ"], [338, 4, 3, "enum_LAST_WRITE"], [343, 306, 2, "enum_LAST_READ"], [343, 176, 3, "enum_LAST_WRITE"], [348, 348, 2, "enum_LAST_READ"], [348, 145, 3, "enum_LAST_WRITE"], [352, 362, 2, "enum_LAST_READ"], [352, 194, 3, "enum_LAST_WRITE"], [358, 358, 2, "enum_LAST_READ"], [358, 150, 3, "enum_LAST_WRITE"], [362, 352, 2, "enum_LAST_READ"], [362, 194, 3, "enum_LAST_WRITE"], [374, 272, 2, "enum_LAST_READ"], [374, 290, 2, "enum_LAST_READ"], [374, 313, 2, "enum_LAST_READ"], [374, 135, 3, "enum_LAST_WRITE"], [378, 334, 2, "enum_LAST_READ"], [378, 140, 3, "enum_LAST_WRITE"], [382, 348, 2, "enum_LAST_READ"], [382, 145, 3, "enum_LAST_WRITE"], [386, 358, 2, "enum_LAST_READ"], [386, 150, 3, "enum_LAST_WRITE"], [393, 256, 2, "enum_LAST_READ"], [393, 130, 3, "enum_LAST_WRITE"], [389, 317, 2, "enum_LAST_READ"], [389, 104, 2, "enum_LAST_READ"], [389, 338, 2, "enum_LAST_READ"], [389, 4, 3, "enum_LAST_WRITE"], [404, 6, 3, "enum_LAST_WRITE"], [413, 404, 2, "enum_LAST_READ"], [413, 6, 3, "enum_LAST_WRITE"], [426, 4, 3, "enum_LAST_WRITE"], [436, 426, 2, "enum_LAST_READ"], [436, 4, 3, "enum_LAST_WRITE"], [441, 413, 2, "enum_LAST_READ"], [441, 6, 3, "enum_LAST_WRITE"], [455, 413, 2, "enum_LAST_READ"], [455, 6, 3, "enum_LAST_WRITE"], [464, 455, 2, "enum_LAST_READ"], [464, 6, 3, "enum_LAST_WRITE"], [477, 4, 3, "enum_LAST_WRITE"], [482, 464, 2, "enum_LAST_READ"], [482, 6, 3, "enum_LAST_WRITE"], [490, 477, 2, "enum_LAST_READ"], [490, 4, 3, "enum_LAST_WRITE"], [509, 464, 2, "enum_LAST_READ"], [509, 6, 3, "enum_LAST_WRITE"], [518, 509, 2, "enum_LAST_READ"], [518, 6, 3, "enum_LAST_WRITE"], [531, 4, 3, "enum_LAST_WRITE"], [541, 531, 2, "enum_LAST_READ"], [541, 4, 3, "enum_LAST_WRITE"], [559, 4, 3, "enum_LAST_WRITE"], [564, 518, 2, "enum_LAST_READ"], [564, 6, 3, "enum_LAST_WRITE"], [572, 559, 2, "enum_LAST_READ"], [572, 4, 3, "enum_LAST_WRITE"], [577, 564, 2, "enum_LAST_READ"], [577, 6, 3, "enum_LAST_WRITE"], [587, 54, 3, "enum_LAST_WRITE"], [594, 482, 2, "enum_LAST_READ"], [594, 577, 2, "enum_LAST_READ"], [594, 518, 2, "enum_LAST_READ"], [594, 441, 2, "enum_LAST_READ"], [594, 6, 3, "enum_LAST_WRITE"], [603, 594, 2, "enum_LAST_READ"], [603, 6, 3, "enum_LAST_WRITE"], [618, 603, 2, "enum_LAST_READ"], [618, 6, 3, "enum_LAST_WRITE"], [632, 603, 2, "enum_LAST_READ"], [632, 6, 3, "enum_LAST_WRITE"], [641, 632, 2, "enum_LAST_READ"], [641, 6, 3, "enum_LAST_WRITE"], [656, 641, 2, "enum_LAST_READ"], [656, 6, 3, "enum_LAST_WRITE"], [672, 641, 2, "enum_LAST_READ"], [672, 6, 3, "enum_LAST_WRITE"], [681, 672, 2, "enum_LAST_READ"], [681, 6, 3, "enum_LAST_WRITE"], [706, 681, 2, "enum_LAST_READ"], [706, 6, 3, "enum_LAST_WRITE"], [713, 706, 2, "enum_LAST_READ"], [713, 6, 3, "enum_LAST_WRITE"], [731, 2, 3, "enum_LAST_WRITE"], [733, 490, 2, "enum_LAST_READ"], [733, 436, 2, "enum_LAST_READ"], [733, 572, 2, "enum_LAST_READ"], [733, 541, 2, "enum_LAST_READ"], [733, 4, 3, "enum_LAST_WRITE"], [735, 713, 2, "enum_LAST_READ"], [735, 482, 2, "enum_LAST_READ"], [735, 681, 2, "enum_LAST_READ"], [735, 618, 2, "enum_LAST_READ"], [735, 656, 2, "enum_LAST_READ"], [735, 577, 2, "enum_LAST_READ"], [735, 518, 2, "enum_LAST_READ"], [735, 441, 2, "enum_LAST_READ"], [735, 6, 3, "enum_LAST_WRITE"], [740, 735, 2, "enum_LAST_READ"], [740, 6, 3, "enum_LAST_WRITE"], [724, 731, 2, "enum_LAST_READ"], [724, 2, 3, "enum_LAST_WRITE"], [726, 733, 2, "enum_LAST_READ"], [726, 4, 3, "enum_LAST_WRITE"], [760, 731, 2, "enum_LAST_READ"], [760, 724, 3, "enum_LAST_WRITE"], [762, 733, 2, "enum_LAST_READ"], [762, 726, 3, "enum_LAST_WRITE"], [766, 28, 3, "enum_LAST_WRITE"], [770, 35, 3, "enum_LAST_WRITE"], [774, 587, 2, "enum_LAST_READ"], [774, 54, 3, "enum_LAST_WRITE"], [778, 10, 3, "enum_LAST_WRITE"], [782, 8, 3, "enum_LAST_WRITE"], [792, 760, 2, "enum_LAST_READ"], [792, 724, 3, "enum_LAST_WRITE"], [799, 792, 2, "enum_LAST_READ"], [799, 724, 3, "enum_LAST_WRITE"], [809, 774, 2, "enum_LAST_READ"], [809, 54, 3, "enum_LAST_WRITE"], [813, 702, 2, "enum_LAST_READ"], [813, 614, 2, "enum_LAST_READ"], [813, 692, 2, "enum_LAST_READ"], [813, 652, 2, "enum_LAST_READ"], [820, 42, 3, "enum_LAST_WRITE"], [826, 782, 2, "enum_LAST_READ"], [826, 8, 3, "enum_LAST_WRITE"], [834, 809, 2, "enum_LAST_READ"], [834, 54, 3, "enum_LAST_WRITE"], [838, 692, 2, "enum_LAST_READ"], [838, 813, 2, "enum_LAST_READ"], [838, 702, 2, "enum_LAST_READ"], [838, 614, 2, "enum_LAST_READ"], [838, 652, 2, "enum_LAST_READ"], [843, 826, 2, "enum_LAST_READ"], [843, 8, 3, "enum_LAST_WRITE"], [850, 787, 2, "enum_LAST_READ"], [854, 747, 3, "enum_LAST_WRITE"], [864, 850, 2, "enum_LAST_READ"], [869, 854, 2, "enum_LAST_READ"], [869, 747, 3, "enum_LAST_WRITE"], [874, 826, 2, "enum_LAST_READ"], [874, 843, 2, "enum_LAST_READ"], [874, 8, 3, "enum_LAST_WRITE"], [885, 874, 2, "enum_LAST_READ"], [885, 8, 3, "enum_LAST_WRITE"], [890, 24, 3, "enum_LAST_WRITE"], [896, 864, 2, "enum_LAST_READ"], [902, 869, 2, "enum_LAST_READ"], [902, 747, 3, "enum_LAST_WRITE"], [907, 885, 2, "enum_LAST_READ"], [907, 8, 3, "enum_LAST_WRITE"], [894, 20, 3, "enum_LAST_WRITE"], [921, 896, 2, "enum_LAST_READ"], [925, 894, 3, "enum_LAST_WRITE"], [919, 925, 2, "enum_LAST_READ"], [919, 894, 3, "enum_LAST_WRITE"], [919, 919, 2, "enum_LAST_READ"], [919, 894, 3, "enum_LAST_WRITE"], [934, 885, 2, "enum_LAST_READ"], [934, 907, 2, "enum_LAST_READ"], [934, 8, 3, "enum_LAST_WRITE"], [930, 978, 2, "enum_LAST_READ"], [930, 930, 3, "enum_LAST_WRITE"], [941, 941, 2, "enum_LAST_READ"], [941, 869, 2, "enum_LAST_READ"], [941, 902, 2, "enum_LAST_READ"], [941, 747, 3, "enum_LAST_WRITE"], [944, 978, 2, "enum_LAST_READ"], [944, 930, 3, "enum_LAST_WRITE"], [947, 934, 2, "enum_LAST_READ"], [947, 970, 2, "enum_LAST_READ"], [947, 8, 3, "enum_LAST_WRITE"], [939, 985, 2, "enum_LAST_READ"], [939, 939, 3, "enum_LAST_WRITE"], [954, 1013, 2, "enum_LAST_READ"], [954, 834, 2, "enum_LAST_READ"], [954, 54, 3, "enum_LAST_WRITE"], [958, 958, 2, "enum_LAST_READ"], [958, 692, 2, "enum_LAST_READ"], [958, 1017, 2, "enum_LAST_READ"], [958, 838, 2, "enum_LAST_READ"], [958, 813, 2, "enum_LAST_READ"], [958, 702, 2, "enum_LAST_READ"], [958, 614, 2, "enum_LAST_READ"], [958, 652, 2, "enum_LAST_READ"], [983, 983, 2, "enum_LAST_READ"], [985, 985, 2, "enum_LAST_READ"], [985, 939, 3, "enum_LAST_WRITE"], [989, 989, 2, "enum_LAST_READ"], [989, 778, 2, "enum_LAST_READ"], [989, 10, 3, "enum_LAST_WRITE"], [993, 993, 2, "enum_LAST_READ"], [993, 12, 3, "enum_LAST_WRITE"], [997, 997, 2, "enum_LAST_READ"], [997, 919, 2, "enum_LAST_READ"], [997, 919, 3, "enum_LAST_WRITE"], [997, 20, 3, "enum_LAST_WRITE"], [1001, 1001, 2, "enum_LAST_READ"], [1001, 46, 3, "enum_LAST_WRITE"], [1005, 1005, 2, "enum_LAST_READ"], [1005, 50, 3, "enum_LAST_WRITE"], [1009, 954, 2, "enum_LAST_READ"], [1009, 54, 3, "enum_LAST_WRITE"], [965, 965, 2, "enum_LAST_READ"], [965, 848, 3, "enum_LAST_WRITE"], [967, 944, 2, "enum_LAST_READ"], [967, 930, 3, "enum_LAST_WRITE"], [970, 947, 2, "enum_LAST_READ"], [970, 8, 3, "enum_LAST_WRITE"], [973, 973, 2, "enum_LAST_READ"], [973, 862, 3, "enum_LAST_WRITE"], [978, 967, 2, "enum_LAST_READ"], [978, 930, 3, "enum_LAST_WRITE"], [1013, 1009, 2, "enum_LAST_READ"], [1013, 54, 3, "enum_LAST_WRITE"], [1017, 958, 2, "enum_LAST_READ"], [1017, 692, 2, "enum_LAST_READ"], [1017, 1017, 2, "enum_LAST_READ"], [1017, 838, 2, "enum_LAST_READ"], [1017, 813, 2, "enum_LAST_READ"], [1017, 702, 2, "enum_LAST_READ"], [1017, 614, 2, "enum_LAST_READ"], [1017, 652, 2, "enum_LAST_READ"], [1027, 973, 2, "enum_LAST_READ"], [1027, 862, 3, "enum_LAST_WRITE"], [1029, 864, 2, "enum_LAST_READ"], [1029, 921, 2, "enum_LAST_READ"], [1033, 1027, 2, "enum_LAST_READ"], [1033, 862, 3, "enum_LAST_WRITE"], [1043, 1029, 2, "enum_LAST_READ"], [1047, 1024, 3, "enum_LAST_WRITE"], [1061, 747, 3, "enum_LAST_WRITE"], [1066, 782, 2, "enum_LAST_READ"], [1066, 8, 3, "enum_LAST_WRITE"], [1073, 809, 2, "enum_LAST_READ"], [1073, 54, 3, "enum_LAST_WRITE"], [1077, 692, 2, "enum_LAST_READ"], [1077, 813, 2, "enum_LAST_READ"], [1077, 702, 2, "enum_LAST_READ"], [1077, 614, 2, "enum_LAST_READ"], [1077, 652, 2, "enum_LAST_READ"], [1082, 1066, 2, "enum_LAST_READ"], [1082, 8, 3, "enum_LAST_WRITE"], [1088, 1073, 2, "enum_LAST_READ"], [1088, 54, 3, "enum_LAST_WRITE"], [1092, 1077, 2, "enum_LAST_READ"], [1092, 692, 2, "enum_LAST_READ"], [1092, 813, 2, "enum_LAST_READ"], [1092, 702, 2, "enum_LAST_READ"], [1092, 614, 2, "enum_LAST_READ"], [1092, 652, 2, "enum_LAST_READ"], [1099, 24, 3, "enum_LAST_WRITE"], [1105, 787, 2, "enum_LAST_READ"], [1111, 1059, 3, "enum_LAST_WRITE"], [1103, 20, 3, "enum_LAST_WRITE"], [1121, 1105, 2, "enum_LAST_READ"], [1125, 1103, 3, "enum_LAST_WRITE"], [1119, 1125, 2, "enum_LAST_READ"], [1119, 1103, 3, "enum_LAST_WRITE"], [1119, 1119, 2, "enum_LAST_READ"], [1119, 1103, 3, "enum_LAST_WRITE"], [1137, 1111, 2, "enum_LAST_READ"], [1137, 1059, 3, "enum_LAST_WRITE"], [1141, 778, 2, "enum_LAST_READ"], [1141, 10, 3, "enum_LAST_WRITE"], [1145, 12, 3, "enum_LAST_WRITE"], [1149, 1119, 2, "enum_LAST_READ"], [1149, 20, 3, "enum_LAST_WRITE"], [1149, 1119, 3, "enum_LAST_WRITE"], [1153, 46, 3, "enum_LAST_WRITE"], [1157, 1088, 2, "enum_LAST_READ"], [1157, 54, 3, "enum_LAST_WRITE"], [1161, 1157, 2, "enum_LAST_READ"], [1161, 54, 3, "enum_LAST_WRITE"], [1165, 1077, 2, "enum_LAST_READ"], [1165, 692, 2, "enum_LAST_READ"], [1165, 702, 2, "enum_LAST_READ"], [1165, 813, 2, "enum_LAST_READ"], [1165, 1092, 2, "enum_LAST_READ"], [1165, 614, 2, "enum_LAST_READ"], [1165, 652, 2, "enum_LAST_READ"], [1178, 1121, 2, "enum_LAST_READ"], [1178, 787, 2, "enum_LAST_READ"], [1178, 1043, 2, "enum_LAST_READ"], [1182, 1178, 2, "enum_LAST_READ"], [1186, 762, 2, "enum_LAST_READ"], [1186, 726, 3, "enum_LAST_WRITE"], [1172, 1186, 2, "enum_LAST_READ"], [1172, 726, 3, "enum_LAST_WRITE"], [1201, 1132, 3, "enum_LAST_WRITE"], [1201, 1041, 3, "enum_LAST_WRITE"], [1193, 1172, 2, "enum_LAST_READ"], [1193, 726, 3, "enum_LAST_WRITE"], [1198, 751, 3, "enum_LAST_WRITE"], [1205, 934, 2, "enum_LAST_READ"], [1205, 970, 2, "enum_LAST_READ"], [1205, 1082, 2, "enum_LAST_READ"], [1205, 1066, 2, "enum_LAST_READ"], [1205, 8, 3, "enum_LAST_WRITE"], [1221, 965, 2, "enum_LAST_READ"], [1221, 848, 3, "enum_LAST_WRITE"], [1221, 1130, 3, "enum_LAST_WRITE"], [1212, 785, 3, "enum_LAST_WRITE"], [1218, 753, 3, "enum_LAST_WRITE"], [1229, 820, 2, "enum_LAST_READ"], [1229, 42, 3, "enum_LAST_WRITE"], [1243, 965, 2, "enum_LAST_READ"], [1243, 848, 3, "enum_LAST_WRITE"], [1243, 1130, 3, "enum_LAST_WRITE"], [1247, 1205, 2, "enum_LAST_READ"], [1247, 8, 3, "enum_LAST_WRITE"], [1233, 785, 3, "enum_LAST_WRITE"], [1239, 753, 3, "enum_LAST_WRITE"], [1273, 965, 2, "enum_LAST_READ"], [1273, 848, 3, "enum_LAST_WRITE"], [1273, 1130, 3, "enum_LAST_WRITE"], [1256, 785, 3, "enum_LAST_WRITE"], [1262, 753, 3, "enum_LAST_WRITE"], [1269, 1205, 2, "enum_LAST_READ"], [1269, 8, 3, "enum_LAST_WRITE"], [1282, 475, 3, "enum_LAST_WRITE"], [1282, 424, 3, "enum_LAST_WRITE"], [1282, 529, 3, "enum_LAST_WRITE"], [1282, 557, 3, "enum_LAST_WRITE"], [1286, 434, 3, "enum_LAST_WRITE"], [1286, 539, 3, "enum_LAST_WRITE"], [1286, 570, 3, "enum_LAST_WRITE"], [1286, 488, 3, "enum_LAST_WRITE"], [1290, 755, 3, "enum_LAST_WRITE"], [1294, 1256, 2, "enum_LAST_READ"], [1294, 1233, 2, "enum_LAST_READ"], [1294, 1212, 2, "enum_LAST_READ"], [1294, 785, 3, "enum_LAST_WRITE"], [1300, 201, 2, "enum_LAST_READ"], [1300, 799, 2, "enum_LAST_READ"], [1300, 724, 3, "enum_LAST_WRITE"], [1300, 2, 3, "enum_LAST_WRITE"], [1302, 317, 2, "enum_LAST_READ"], [1302, 104, 2, "enum_LAST_READ"], [1302, 1193, 2, "enum_LAST_READ"], [1302, 338, 2, "enum_LAST_READ"], [1302, 389, 3, "enum_LAST_WRITE"], [1302, 726, 3, "enum_LAST_WRITE"], [1304, 1243, 2, "enum_LAST_READ"], [1304, 1273, 2, "enum_LAST_READ"], [1304, 1221, 2, "enum_LAST_READ"], [1304, 192, 3, "enum_LAST_WRITE"], [1304, 848, 3, "enum_LAST_WRITE"], [1304, 1130, 3, "enum_LAST_WRITE"], [1306, 1277, 3, "enum_LAST_WRITE"], [1306, 369, 3, "enum_LAST_WRITE"], [1308, 1137, 2, "enum_LAST_READ"], [1308, 985, 2, "enum_LAST_READ"], [1308, 1059, 3, "enum_LAST_WRITE"], [1308, 939, 3, "enum_LAST_WRITE"], [1308, 196, 3, "enum_LAST_WRITE"], [92, 114, 4, "enum_COMPUTED_FROM"], [92, 116, 4, "enum_COMPUTED_FROM"], [92, 95, 4, "enum_COMPUTED_FROM"], [92, 99, 4, "enum_COMPUTED_FROM"], [92, 109, 4, "enum_COMPUTED_FROM"], [92, 104, 4, "enum_COMPUTED_FROM"], [119, 125, 4, "enum_COMPUTED_FROM"], [369, 374, 4, "enum_COMPUTED_FROM"], [369, 378, 4, "enum_COMPUTED_FROM"], [369, 382, 4, "enum_COMPUTED_FROM"], [369, 386, 4, "enum_COMPUTED_FROM"], [389, 391, 4, "enum_COMPUTED_FROM"], [389, 393, 4, "enum_COMPUTED_FROM"], [725, 729, 4, "enum_COMPUTED_FROM"], [725, 731, 4, "enum_COMPUTED_FROM"], [725, 733, 4, "enum_COMPUTED_FROM"], [725, 735, 4, "enum_COMPUTED_FROM"], [725, 740, 4, "enum_COMPUTED_FROM"], [750, 758, 4, "enum_COMPUTED_FROM"], [750, 760, 4, "enum_COMPUTED_FROM"], [750, 762, 4, "enum_COMPUTED_FROM"], [750, 766, 4, "enum_COMPUTED_FROM"], [750, 770, 4, "enum_COMPUTED_FROM"], [750, 774, 4, "enum_COMPUTED_FROM"], [750, 778, 4, "enum_COMPUTED_FROM"], [750, 782, 4, "enum_COMPUTED_FROM"], [785, 787, 4, "enum_COMPUTED_FROM"], [785, 792, 4, "enum_COMPUTED_FROM"], [785, 799, 4, "enum_COMPUTED_FROM"], [1173, 1178, 4, "enum_COMPUTED_FROM"], [1173, 1182, 4, "enum_COMPUTED_FROM"], [1173, 1186, 4, "enum_COMPUTED_FROM"], [1197, 1201, 4, "enum_COMPUTED_FROM"], [1277, 1282, 4, "enum_COMPUTED_FROM"], [1277, 1286, 4, "enum_COMPUTED_FROM"], [1277, 1290, 4, "enum_COMPUTED_FROM"], [1277, 1294, 4, "enum_COMPUTED_FROM"], [176, 178, 4, "enum_COMPUTED_FROM"], [176, 181, 4, "enum_COMPUTED_FROM"], [191, 199, 4, "enum_COMPUTED_FROM"], [191, 201, 4, "enum_COMPUTED_FROM"], [191, 203, 4, "enum_COMPUTED_FROM"], [191, 211, 4, "enum_COMPUTED_FROM"], [191, 213, 4, "enum_COMPUTED_FROM"], [191, 206, 4, "enum_COMPUTED_FROM"], [191, 208, 4, "enum_COMPUTED_FROM"], [191, 225, 4, "enum_COMPUTED_FROM"], [191, 229, 4, "enum_COMPUTED_FROM"], [191, 233, 4, "enum_COMPUTED_FROM"], [191, 237, 4, "enum_COMPUTED_FROM"], [191, 241, 4, "enum_COMPUTED_FROM"], [191, 245, 4, "enum_COMPUTED_FROM"], [191, 249, 4, "enum_COMPUTED_FROM"], [191, 253, 4, "enum_COMPUTED_FROM"], [424, 426, 4, "enum_COMPUTED_FROM"], [434, 436, 4, "enum_COMPUTED_FROM"], [434, 441, 4, "enum_COMPUTED_FROM"], [848, 850, 4, "enum_COMPUTED_FROM"], [848, 854, 4, "enum_COMPUTED_FROM"], [862, 864, 4, "enum_COMPUTED_FROM"], [862, 885, 4, "enum_COMPUTED_FROM"], [862, 869, 4, "enum_COMPUTED_FROM"], [862, 874, 4, "enum_COMPUTED_FROM"], [1024, 1027, 4, "enum_COMPUTED_FROM"], [1024, 1033, 4, "enum_COMPUTED_FROM"], [1024, 1029, 4, "enum_COMPUTED_FROM"], [1041, 1047, 4, "enum_COMPUTED_FROM"], [1041, 1043, 4, "enum_COMPUTED_FROM"], [1059, 1061, 4, "enum_COMPUTED_FROM"], [1059, 1066, 4, "enum_COMPUTED_FROM"], [1131, 1135, 4, "enum_COMPUTED_FROM"], [1131, 1137, 4, "enum_COMPUTED_FROM"], [1131, 1141, 4, "enum_COMPUTED_FROM"], [1131, 1145, 4, "enum_COMPUTED_FROM"], [1131, 1149, 4, "enum_COMPUTED_FROM"], [1131, 1153, 4, "enum_COMPUTED_FROM"], [1131, 1157, 4, "enum_COMPUTED_FROM"], [1217, 1221, 4, "enum_COMPUTED_FROM"], [475, 477, 4, "enum_COMPUTED_FROM"], [475, 482, 4, "enum_COMPUTED_FROM"], [488, 490, 4, "enum_COMPUTED_FROM"], [894, 896, 4, "enum_COMPUTED_FROM"], [894, 902, 4, "enum_COMPUTED_FROM"], [894, 907, 4, "enum_COMPUTED_FROM"], [939, 941, 4, "enum_COMPUTED_FROM"], [939, 944, 4, "enum_COMPUTED_FROM"], [939, 947, 4, "enum_COMPUTED_FROM"], [972, 983, 4, "enum_COMPUTED_FROM"], [972, 985, 4, "enum_COMPUTED_FROM"], [972, 989, 4, "enum_COMPUTED_FROM"], [972, 993, 4, "enum_COMPUTED_FROM"], [972, 997, 4, "enum_COMPUTED_FROM"], [972, 1001, 4, "enum_COMPUTED_FROM"], [972, 1005, 4, "enum_COMPUTED_FROM"], [972, 1009, 4, "enum_COMPUTED_FROM"], [1103, 1105, 4, "enum_COMPUTED_FROM"], [1103, 1111, 4, "enum_COMPUTED_FROM"], [1238, 1243, 4, "enum_COMPUTED_FROM"], [1238, 1245, 4, "enum_COMPUTED_FROM"], [1238, 1247, 4, "enum_COMPUTED_FROM"], [1261, 1273, 4, "enum_COMPUTED_FROM"], [529, 531, 4, "enum_COMPUTED_FROM"], [539, 541, 4, "enum_COMPUTED_FROM"], [557, 559, 4, "enum_COMPUTED_FROM"], [557, 564, 4, "enum_COMPUTED_FROM"], [570, 572, 4, "enum_COMPUTED_FROM"], [570, 577, 4, "enum_COMPUTED_FROM"], [222, 1, 11, "enum_CALLS"], [1298, 222, 5, "enum_RETURNS_TO"], [201, 2, 6, "enum_FORMAL_ARG_NAME"], [203, 4, 6, "enum_FORMAL_ARG_NAME"], [207, 6, 6, "enum_FORMAL_ARG_NAME"], [211, 8, 6, "enum_FORMAL_ARG_NAME"], [213, 10, 6, "enum_FORMAL_ARG_NAME"], [217, 12, 6, "enum_FORMAL_ARG_NAME"], [221, 16, 6, "enum_FORMAL_ARG_NAME"], [225, 20, 6, "enum_FORMAL_ARG_NAME"], [229, 24, 6, "enum_FORMAL_ARG_NAME"], [233, 28, 6, "enum_FORMAL_ARG_NAME"], [237, 35, 6, "enum_FORMAL_ARG_NAME"], [241, 42, 6, "enum_FORMAL_ARG_NAME"], [245, 46, 6, "enum_FORMAL_ARG_NAME"], [249, 50, 6, "enum_FORMAL_ARG_NAME"], [253, 54, 6, "enum_FORMAL_ARG_NAME"]], "error_location": 313, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/hvidy/halophot.git", "old_path": "src/halo_tools.py", "hash": "c6ad80221bded8b417be0c52a62229ebf7b9fea9", "code": "def do_lc(tpf: Any,ts: Dict,splits: Tuple,sub: int,order: Any,maxiter: int=101,split_times: Optional[List]=None,w_init: Optional[np.ndarray]=None,random_init: bool=False,\n    thresh: float=-1.,minflux: float=-100.,consensus: bool=False,analytic: bool=False,sigclip: bool=False,verbose: bool=True) -> Any:\n    ### get a slice corresponding to the splits you want\n\n    if split_times is not None:\n        assert(np.min(split_times)>np.min(ts['time'])), \"Minimum time split must be during campaign\"\n        splits: List[float] = [np.min(np.where(ts['time']>split)) for split in split_times]\n        all_splits: List = [None,*splits,None]\n        tss: List = []\n        cad1: List = []\n        cad2: List = []\n        sat: List = []\n        weightmap: List = []\n        \n        for j, low in enumerate(all_splits[:-1]):\n            high: Any = all_splits[j+1]\n            pff, tsj, weights, pmap, pixels_sub = do_lc(tpf,\n                        ts,(low,high),sub,order,maxiter=101,split_times=None,w_init=w_init,random_init=random_init,\n                thresh=thresh,minflux=minflux,consensus=consensus,analytic=analytic,sigclip=sigclip,verbose=verbose)\n            tss.append(tsj)\n            if low is None:\n                cad1.append(ts['cadence'][0])\n            else:\n                cad1.append(ts['cadence'][low])\n            if high is None:\n                cad1.append(ts['cadence'][-1])\n            else:\n                cad2.append(ts['cadence'][high])\n            sat.append(pmap[\"sat_pixels\"])\n            weightmap.append(pmap[\"weightmap\"])\n        wmap: Dict = {\n        \"initial_cadence\": cad1,\n        \"final_cadence\": cad2,\n        \"sat_pixels\": sat,\n        \"weightmap\": weightmap\n        }\n        ts = stitch(tss)\n        \n    else:\n        # pf, ts, weights, weightmap, pixels_sub = do_lc(flux,\n        #             ts,(None,None),sub,order,maxiter=101,split_times=None,w_init=w_init,random_init=random_init,\n        #     thresh=thresh,minflux=minflux,consensus=consensus,analytic=analytic,sigclip=sigclip,verbose=verbose)\n\n        if splits[0] is None and splits[1] is not None:\n            c1: Any = ts['cadence'][0]\n            c2: Any = ts['cadence'][splits[1]]\n        elif splits[0] is not None and splits[1] is None:\n            c1: Any= ts['cadence'][splits[0]]\n            c2: Any = ts['cadence'][-1]\n        elif splits[0] is None and splits[1] is None:\n            c1: Any = ts['cadence'][0]\n            c2: Any = ts['cadence'][-1]\n        else:\n            c1: Any = ts['cadence'][splits[0]]\n            c2: Any = ts['cadence'][splits[1]]\n\n        if verbose:\n            if splits[0] is None and splits[1] is not None:\n                print('Taking cadences from beginning to',splits[1])\n            elif splits[0] is not None and splits[1] is None:\n                print('Taking cadences from', splits[0],'to end')\n            elif splits[0] is None and splits[1] is None:\n                print('Taking cadences from beginning to end')\n            else:\n                print('Taking cadences from', splits[0],'to',splits[1])\n\n        tpf, ts = get_slice(tpf,ts,splits[0],splits[1])\n\n        ### now throw away saturated columns, nan pixels and nan cadences\n\n        pixels, tsd, goodcad, mapping, sat = censor_tpf(tpf,ts,thresh=thresh,minflux=minflux,verbose=verbose,order=order,sub=sub)\n        pixelmap: np.ndarray = np.zeros((tpf.shape[2],tpf.shape[1]))\n        if verbose:\n            print('Censored TPF')\n\n        ### subsample\n        if consensus:           \n            assert sub>1, \"Must be subsampled to use consensus\"\n            if verbose:\n                print('Subsampling by a factor of %d' % sub)\n\n            weights: np.ndarray = np.zeros(pixels.shape[0])\n            opt_lcs: np.ndarray = np.zeros((pixels[::sub,:].shape[1],sub))\n\n            if random_init:\n                w_init: np.ndarray = np.random.rand(pixels[::sub,:].shape[0])\n                w_init /= np.sum(w_init)\n\n            for j in range(sub):\n                pixels_sub: np.ndarray = pixels[j::sub,:]\n                ### now calculate the halo \n                if verbose:\n                    print('Calculating weights')\n\n                weights[j::sub], opt_lcs[:,j] = tv_tpf(pixels_sub,order=order,\n                    maxiter=maxiter,w_init=w_init,analytic=analytic,sigclip=sigclip,verbose=verbose)\n                if verbose:\n                    print('Calculated weights!')\n\n            norm_lcs: np.ndarray = opt_lcs/np.nanmedian(opt_lcs,axis=0)\n            opt_lc: np.ndarray = np.nanmean(norm_lcs,axis=1)\n\n        else:\n            pixels_sub: np.ndarray = pixels[::sub,:]\n            if verbose:\n                print('Subsampling by a factor of %d' % sub)\n\n            ### now calculate the halo \n\n            if verbose:\n                print('Calculating weights')\n            if random_init:\n                w_init: np.ndarray = np.random.rand(pixels_sub.shape[0])\n                w_init /= np.sum(w_init)\n\n            weights, opt_lc = tv_tpf(pixels_sub,order=order,maxiter=maxiter,\n                w_init=w_init,analytic=analytic,verbose=verbose)\n            if verbose:\n                print('Calculated weights!')\n\n        # opt_lc = np.dot(weights.T,pixels_sub)\n        ts['corr_flux'] = np.nan*np.ones_like(ts['x'])\n        ts['corr_flux'][goodcad] = opt_lc\n\n        if sub == 1:\n            pixelmap.ravel()[mapping] = weights\n\n        elif consensus:\n            pixelmap.ravel()[mapping] = weights/float(sub)\n        else:\n            pixelmap.ravel()[mapping[0][::sub]] = weights\n        wmap = {\n        \"initial_cadence\": c1,\n        \"final_cadence\": c2,\n        \"sat_pixels\": sat,\n        \"weightmap\": pixelmap\n        }\n    return tpf, ts, weights, wmap, pixels_sub\n", "rewrite": "ReplaceText(target='cad2' @(443,16)->(443,20))", "error_line": 25, "has_bug": true, "code_full": "from typing import Any, Dict, List, Optional, Tuple\n\nimport numpy as np\n\n\ndef stitch(tss: List) -> Any:\n    return None\n\ndef censor_tpf(tpf: Any,ts: Dict,thresh: float, minflux: float,verbose: bool,order: Any,sub: int) -> Any:\n    return None\n\ndef tv_tpf(pixels_sub: np.ndarray,order: Any,maxiter: int,w_init: Optional[np.ndarray],analytic: bool,sigclip: bool=False,verbose: bool=False) -> Any:\n    return None\n\ndef get_slice(tpf: Any,ts: Dict,low: Any,high: Any) -> Any:\n    return None\n\ndef do_lc(tpf: Any,ts: Dict,splits: Tuple,sub: int,order: Any,maxiter: int=101,split_times: Optional[List]=None,w_init: Optional[np.ndarray]=None,random_init: bool=False,\n    thresh: float=-1.,minflux: float=-100.,consensus: bool=False,analytic: bool=False,sigclip: bool=False,verbose: bool=True) -> Any:\n    ### get a slice corresponding to the splits you want\n\n    if split_times is not None:\n        assert(np.min(split_times)>np.min(ts['time'])), \"Minimum time split must be during campaign\"\n        splits: List[float] = [np.min(np.where(ts['time']>split)) for split in split_times]\n        all_splits: List = [None,*splits,None]\n        tss: List = []\n        cad1: List = []\n        cad2: List = []\n        sat: List = []\n        weightmap: List = []\n        \n        for j, low in enumerate(all_splits[:-1]):\n            high: Any = all_splits[j+1]\n            pff, tsj, weights, pmap, pixels_sub = do_lc(tpf,\n                        ts,(low,high),sub,order,maxiter=101,split_times=None,w_init=w_init,random_init=random_init,\n                thresh=thresh,minflux=minflux,consensus=consensus,analytic=analytic,sigclip=sigclip,verbose=verbose)\n            tss.append(tsj)\n            if low is None:\n                cad1.append(ts['cadence'][0])\n            else:\n                cad1.append(ts['cadence'][low])\n            if high is None:\n                cad1.append(ts['cadence'][-1])\n            else:\n                cad2.append(ts['cadence'][high])\n            sat.append(pmap[\"sat_pixels\"])\n            weightmap.append(pmap[\"weightmap\"])\n        wmap: Dict = {\n        \"initial_cadence\": cad1,\n        \"final_cadence\": cad2,\n        \"sat_pixels\": sat,\n        \"weightmap\": weightmap\n        }\n        ts = stitch(tss)\n        \n    else:\n        # pf, ts, weights, weightmap, pixels_sub = do_lc(flux,\n        #             ts,(None,None),sub,order,maxiter=101,split_times=None,w_init=w_init,random_init=random_init,\n        #     thresh=thresh,minflux=minflux,consensus=consensus,analytic=analytic,sigclip=sigclip,verbose=verbose)\n\n        if splits[0] is None and splits[1] is not None:\n            c1: Any = ts['cadence'][0]\n            c2: Any = ts['cadence'][splits[1]]\n        elif splits[0] is not None and splits[1] is None:\n            c1: Any= ts['cadence'][splits[0]]\n            c2: Any = ts['cadence'][-1]\n        elif splits[0] is None and splits[1] is None:\n            c1: Any = ts['cadence'][0]\n            c2: Any = ts['cadence'][-1]\n        else:\n            c1: Any = ts['cadence'][splits[0]]\n            c2: Any = ts['cadence'][splits[1]]\n\n        if verbose:\n            if splits[0] is None and splits[1] is not None:\n                print('Taking cadences from beginning to',splits[1])\n            elif splits[0] is not None and splits[1] is None:\n                print('Taking cadences from', splits[0],'to end')\n            elif splits[0] is None and splits[1] is None:\n                print('Taking cadences from beginning to end')\n            else:\n                print('Taking cadences from', splits[0],'to',splits[1])\n\n        tpf, ts = get_slice(tpf,ts,splits[0],splits[1])\n\n        ### now throw away saturated columns, nan pixels and nan cadences\n\n        pixels, tsd, goodcad, mapping, sat = censor_tpf(tpf,ts,thresh=thresh,minflux=minflux,verbose=verbose,order=order,sub=sub)\n        pixelmap: np.ndarray = np.zeros((tpf.shape[2],tpf.shape[1]))\n        if verbose:\n            print('Censored TPF')\n\n        ### subsample\n        if consensus:           \n            assert sub>1, \"Must be subsampled to use consensus\"\n            if verbose:\n                print('Subsampling by a factor of %d' % sub)\n\n            weights: np.ndarray = np.zeros(pixels.shape[0])\n            opt_lcs: np.ndarray = np.zeros((pixels[::sub,:].shape[1],sub))\n\n            if random_init:\n                w_init: np.ndarray = np.random.rand(pixels[::sub,:].shape[0])\n                w_init /= np.sum(w_init)\n\n            for j in range(sub):\n                pixels_sub: np.ndarray = pixels[j::sub,:]\n                ### now calculate the halo \n                if verbose:\n                    print('Calculating weights')\n\n                weights[j::sub], opt_lcs[:,j] = tv_tpf(pixels_sub,order=order,\n                    maxiter=maxiter,w_init=w_init,analytic=analytic,sigclip=sigclip,verbose=verbose)\n                if verbose:\n                    print('Calculated weights!')\n\n            norm_lcs: np.ndarray = opt_lcs/np.nanmedian(opt_lcs,axis=0)\n            opt_lc: np.ndarray = np.nanmean(norm_lcs,axis=1)\n\n        else:\n            pixels_sub: np.ndarray = pixels[::sub,:]\n            if verbose:\n                print('Subsampling by a factor of %d' % sub)\n\n            ### now calculate the halo \n\n            if verbose:\n                print('Calculating weights')\n            if random_init:\n                w_init: np.ndarray = np.random.rand(pixels_sub.shape[0])\n                w_init /= np.sum(w_init)\n\n            weights, opt_lc = tv_tpf(pixels_sub,order=order,maxiter=maxiter,\n                w_init=w_init,analytic=analytic,verbose=verbose)\n            if verbose:\n                print('Calculated weights!')\n\n        # opt_lc = np.dot(weights.T,pixels_sub)\n        ts['corr_flux'] = np.nan*np.ones_like(ts['x'])\n        ts['corr_flux'][goodcad] = opt_lc\n\n        if sub == 1:\n            pixelmap.ravel()[mapping] = weights\n\n        elif consensus:\n            pixelmap.ravel()[mapping] = weights/float(sub)\n        else:\n            pixelmap.ravel()[mapping[0][::sub]] = weights\n        wmap = {\n        \"initial_cadence\": c1,\n        \"final_cadence\": c2,\n        \"sat_pixels\": sat,\n        \"weightmap\": pixelmap\n        }\n    return tpf, ts, weights, wmap, pixels_sub\n", "error_location_char": [1364, 1368], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def auto(", "cls", ",", "syslog", "=", "None", ",", "stderr", "=", "None", ",", "level", "=", "None", ",", "extended", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "'Tries to guess a sound logging configuration.\\n    '", "#NEWLINE#", "level", "=", "norm_level", "(", "level", ")", "#NEWLINE#", "if", "(", "(", "syslog", "is", "None", ")", "and", "(", "stderr", "is", "None", ")", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "sys", ".", "stderr", ".", "isatty", "(", ")", "or", "(", "syslog_path", "(", ")", "is", "None", ")", ")", ":", "#NEWLINE#", "#INDENT#", "log", ".", "info", "(", "'Defaulting to STDERR logging.'", ")", "#NEWLINE#", "(", "syslog", ",", "stderr", ")", "=", "(", "None", ",", "(", "level", "or", "logging", ".", "INFO", ")", ")", "#NEWLINE#", "if", "(", "extended", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "extended", "=", "(", "(", "level", "or", "0", ")", "<=", "logging", ".", "DEBUG", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "log", ".", "info", "(", "'Defaulting to logging with Syslog.'", ")", "#NEWLINE#", "(", "syslog", ",", "stderr", ")", "=", "(", "(", "level", "or", "logging", ".", "WARNING", ")", ",", "None", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "return", "cls", "(", "syslog", "=", "syslog", ",", "stderr", "=", "stderr", ",", "extended", "=", "extended", ")"], "edges": [[1, 9, 7, "enum_FIELD"], [22, 23, 7, "enum_FIELD"], [24, 28, 7, "enum_FIELD"], [32, 39, 7, "enum_FIELD"], [151, 157, 7, "enum_FIELD"], [28, 27, 7, "enum_FIELD"], [67, 58, 7, "enum_FIELD"], [157, 152, 7, "enum_FIELD"], [36, 35, 7, "enum_FIELD"], [42, 41, 7, "enum_FIELD"], [69, 73, 7, "enum_FIELD"], [76, 85, 7, "enum_FIELD"], [95, 98, 7, "enum_FIELD"], [123, 127, 7, "enum_FIELD"], [130, 145, 7, "enum_FIELD"], [154, 156, 7, "enum_FIELD"], [158, 160, 7, "enum_FIELD"], [162, 164, 7, "enum_FIELD"], [56, 54, 7, "enum_FIELD"], [63, 61, 7, "enum_FIELD"], [73, 71, 7, "enum_FIELD"], [98, 97, 7, "enum_FIELD"], [103, 112, 7, "enum_FIELD"], [127, 125, 7, "enum_FIELD"], [54, 52, 7, "enum_FIELD"], [61, 60, 7, "enum_FIELD"], [71, 70, 7, "enum_FIELD"], [112, 109, 7, "enum_FIELD"], [125, 124, 7, "enum_FIELD"], [52, 51, 7, "enum_FIELD"], [90, 89, 7, "enum_FIELD"], [114, 113, 7, "enum_FIELD"], [142, 141, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [25, 12, 10, "enum_LAST_LEXICAL_USE"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [29, 25, 10, "enum_LAST_LEXICAL_USE"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [35, 4, 10, "enum_LAST_LEXICAL_USE"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [41, 8, 10, "enum_LAST_LEXICAL_USE"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [78, 35, 10, "enum_LAST_LEXICAL_USE"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [80, 41, 10, "enum_LAST_LEXICAL_USE"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [87, 29, 10, "enum_LAST_LEXICAL_USE"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [97, 16, 10, "enum_LAST_LEXICAL_USE"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 103, 9, "enum_NEXT_SYNTAX"], [104, 97, 10, "enum_LAST_LEXICAL_USE"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [108, 87, 10, "enum_LAST_LEXICAL_USE"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [113, 89, 10, "enum_LAST_LEXICAL_USE"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 123, 9, "enum_NEXT_SYNTAX"], [124, 70, 10, "enum_LAST_LEXICAL_USE"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [132, 78, 10, "enum_LAST_LEXICAL_USE"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [134, 80, 10, "enum_LAST_LEXICAL_USE"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [139, 108, 10, "enum_LAST_LEXICAL_USE"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [141, 113, 10, "enum_LAST_LEXICAL_USE"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 151, 9, "enum_NEXT_SYNTAX"], [152, 2, 10, "enum_LAST_LEXICAL_USE"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [156, 132, 10, "enum_LAST_LEXICAL_USE"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [160, 134, 10, "enum_LAST_LEXICAL_USE"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [164, 104, 10, "enum_LAST_LEXICAL_USE"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [6, 10, 1, "enum_CFG_NEXT"], [10, 14, 1, "enum_CFG_NEXT"], [14, 18, 1, "enum_CFG_NEXT"], [18, 1, 1, "enum_CFG_NEXT"], [9, 22, 1, "enum_CFG_NEXT"], [22, 24, 1, "enum_CFG_NEXT"], [24, 39, 1, "enum_CFG_NEXT"], [39, 151, 1, "enum_CFG_NEXT"], [39, 58, 1, "enum_CFG_NEXT"], [58, 123, 1, "enum_CFG_NEXT"], [58, 69, 1, "enum_CFG_NEXT"], [69, 76, 1, "enum_CFG_NEXT"], [76, 98, 1, "enum_CFG_NEXT"], [98, 103, 1, "enum_CFG_NEXT"], [98, 151, 1, "enum_CFG_NEXT"], [103, 151, 1, "enum_CFG_NEXT"], [123, 130, 1, "enum_CFG_NEXT"], [130, 151, 1, "enum_CFG_NEXT"], [29, 12, 3, "enum_LAST_WRITE"], [25, 29, 2, "enum_LAST_READ"], [25, 12, 3, "enum_LAST_WRITE"], [35, 4, 3, "enum_LAST_WRITE"], [41, 8, 3, "enum_LAST_WRITE"], [87, 29, 2, "enum_LAST_READ"], [87, 25, 3, "enum_LAST_WRITE"], [78, 35, 2, "enum_LAST_READ"], [78, 4, 3, "enum_LAST_WRITE"], [80, 41, 2, "enum_LAST_READ"], [80, 8, 3, "enum_LAST_WRITE"], [97, 16, 3, "enum_LAST_WRITE"], [108, 87, 2, "enum_LAST_READ"], [108, 25, 3, "enum_LAST_WRITE"], [113, 89, 2, "enum_LAST_READ"], [104, 97, 2, "enum_LAST_READ"], [104, 16, 3, "enum_LAST_WRITE"], [139, 29, 2, "enum_LAST_READ"], [139, 25, 3, "enum_LAST_WRITE"], [132, 35, 2, "enum_LAST_READ"], [132, 4, 3, "enum_LAST_WRITE"], [134, 41, 2, "enum_LAST_READ"], [134, 8, 3, "enum_LAST_WRITE"], [152, 2, 3, "enum_LAST_WRITE"], [156, 35, 2, "enum_LAST_READ"], [156, 78, 3, "enum_LAST_WRITE"], [156, 4, 3, "enum_LAST_WRITE"], [156, 132, 3, "enum_LAST_WRITE"], [160, 41, 2, "enum_LAST_READ"], [160, 134, 3, "enum_LAST_WRITE"], [160, 80, 3, "enum_LAST_WRITE"], [160, 8, 3, "enum_LAST_WRITE"], [164, 97, 2, "enum_LAST_READ"], [164, 104, 3, "enum_LAST_WRITE"], [164, 16, 3, "enum_LAST_WRITE"], [25, 27, 4, "enum_COMPUTED_FROM"], [25, 29, 4, "enum_COMPUTED_FROM"], [79, 87, 4, "enum_COMPUTED_FROM"], [79, 89, 4, "enum_COMPUTED_FROM"], [133, 139, 4, "enum_COMPUTED_FROM"], [133, 141, 4, "enum_COMPUTED_FROM"], [104, 108, 4, "enum_COMPUTED_FROM"], [104, 113, 4, "enum_COMPUTED_FROM"]], "error_location": 108, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/drcloud/magiclog.git", "old_path": "magiclog.py", "hash": "bffad2101ea9055025ebffc5be9af47492dfef03", "code": "def auto(cls: Any, syslog: Optional[int]=None, stderr: Optional[int]=None, level: Optional[int]=None, extended: Optional[bool]=None):\n    \"\"\"Tries to guess a sound logging configuration.\n    \"\"\"\n    level: Optional[int] = norm_level(level)\n    if syslog is None and stderr is None:\n        if sys.stderr.isatty() or syslog_path() is None:\n            log.info('Defaulting to STDERR logging.')\n            syslog, stderr = None, (level or logging.INFO)\n            if extended is None:\n                extended = (level or 0) <= logging.DEBUG\n        else:\n            log.info('Defaulting to logging with Syslog.')\n            syslog, stderr = (level or logging.WARNING), None\n    return cls(syslog=syslog, stderr=stderr, extended=extended)\n", "rewrite": "ReplaceText(target='stderr' @(73,32)->(73,37))", "error_line": 9, "has_bug": true, "code_full": "import logging\nimport sys\nfrom typing import Any, Optional\n\nlog = logging.getLogger(__name__)\n\ndef norm_level(level: Optional[int]) -> Optional[int]:\n    pass\n\ndef syslog_path() -> Optional[str]:\n    pass\n\ndef auto(cls: Any, syslog: Optional[int]=None, stderr: Optional[int]=None, level: Optional[int]=None, extended: Optional[bool]=None):\n    \"\"\"Tries to guess a sound logging configuration.\n    \"\"\"\n    level: Optional[int] = norm_level(level)\n    if syslog is None and stderr is None:\n        if sys.stderr.isatty() or syslog_path() is None:\n            log.info('Defaulting to STDERR logging.')\n            syslog, stderr = None, (level or logging.INFO)\n            if extended is None:\n                extended = (level or 0) <= logging.DEBUG\n        else:\n            log.info('Defaulting to logging with Syslog.')\n            syslog, stderr = (level or logging.WARNING), None\n    return cls(syslog=syslog, stderr=stderr, extended=extended)\n", "error_location_char": [513, 518], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def next_minifat(", "self", ",", "current", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n    Helpers provides access to next mini-FAT sector and returns it's\\n    seekable position. Should not be called from external code.\\n    \"", "#NEWLINE#", "position", "=", "0", "#NEWLINE#", "sector_size", "=", "(", "self", ".", "header", ".", "sector_size", "//", "4", ")", "#NEWLINE#", "sector", "=", "self", ".", "header", ".", "minifat_sector_start", "#NEWLINE#", "while", "(", "(", "sector", "!=", "ENDOFCHAIN", ")", "and", "(", "(", "(", "current", "+", "1", ")", "*", "sector_size", ")", "<=", "current", ")", ")", ":", "#NEWLINE#", "#INDENT#", "sector", "=", "self", ".", "next_fat", "(", "sector", ")", "#NEWLINE#", "position", "+=", "1", "#NEWLINE#", "#UNINDENT#", "if", "(", "sector", "==", "ENDOFCHAIN", ")", ":", "#NEWLINE#", "#INDENT#", "return", "ENDOFCHAIN", "#NEWLINE#", "#UNINDENT#", "minifat_position", "=", "(", "(", "sector", "+", "1", ")", "<<", "self", ".", "header", ".", "sector_shift", ")", "#NEWLINE#", "minifat_position", "+=", "(", "(", "current", "-", "(", "position", "*", "sector_size", ")", ")", "*", "4", ")", "#NEWLINE#", "return", "self", ".", "get_long", "(", "minifat_position", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [8, 9, 7, "enum_FIELD"], [10, 13, 7, "enum_FIELD"], [14, 23, 7, "enum_FIELD"], [26, 32, 7, "enum_FIELD"], [35, 42, 7, "enum_FIELD"], [74, 77, 7, "enum_FIELD"], [86, 95, 7, "enum_FIELD"], [102, 103, 7, "enum_FIELD"], [102, 115, 7, "enum_FIELD"], [119, 123, 7, "enum_FIELD"], [23, 21, 7, "enum_FIELD"], [23, 24, 7, "enum_FIELD"], [32, 30, 7, "enum_FIELD"], [59, 65, 7, "enum_FIELD"], [68, 69, 7, "enum_FIELD"], [68, 71, 7, "enum_FIELD"], [77, 76, 7, "enum_FIELD"], [83, 84, 7, "enum_FIELD"], [95, 92, 7, "enum_FIELD"], [95, 99, 7, "enum_FIELD"], [115, 108, 7, "enum_FIELD"], [115, 116, 7, "enum_FIELD"], [123, 121, 7, "enum_FIELD"], [21, 19, 7, "enum_FIELD"], [30, 29, 7, "enum_FIELD"], [39, 38, 7, "enum_FIELD"], [53, 50, 7, "enum_FIELD"], [65, 63, 7, "enum_FIELD"], [92, 91, 7, "enum_FIELD"], [92, 93, 7, "enum_FIELD"], [99, 97, 7, "enum_FIELD"], [108, 107, 7, "enum_FIELD"], [108, 111, 7, "enum_FIELD"], [121, 120, 7, "enum_FIELD"], [19, 18, 7, "enum_FIELD"], [50, 47, 7, "enum_FIELD"], [50, 51, 7, "enum_FIELD"], [63, 62, 7, "enum_FIELD"], [97, 96, 7, "enum_FIELD"], [111, 110, 7, "enum_FIELD"], [111, 112, 7, "enum_FIELD"], [47, 46, 7, "enum_FIELD"], [47, 48, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [18, 2, 10, "enum_LAST_LEXICAL_USE"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [29, 18, 10, "enum_LAST_LEXICAL_USE"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [38, 27, 10, "enum_LAST_LEXICAL_USE"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [46, 4, 10, "enum_LAST_LEXICAL_USE"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [51, 15, 10, "enum_LAST_LEXICAL_USE"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [54, 46, 10, "enum_LAST_LEXICAL_USE"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 59, 9, "enum_NEXT_SYNTAX"], [60, 38, 10, "enum_LAST_LEXICAL_USE"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [62, 29, 10, "enum_LAST_LEXICAL_USE"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [66, 60, 10, "enum_LAST_LEXICAL_USE"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [69, 11, 10, "enum_LAST_LEXICAL_USE"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [76, 66, 10, "enum_LAST_LEXICAL_USE"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [78, 40, 10, "enum_LAST_LEXICAL_USE"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 83, 9, "enum_NEXT_SYNTAX"], [84, 78, 10, "enum_LAST_LEXICAL_USE"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [91, 76, 10, "enum_LAST_LEXICAL_USE"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [96, 62, 10, "enum_LAST_LEXICAL_USE"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [103, 87, 10, "enum_LAST_LEXICAL_USE"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [107, 54, 10, "enum_LAST_LEXICAL_USE"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [110, 69, 10, "enum_LAST_LEXICAL_USE"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [112, 51, 10, "enum_LAST_LEXICAL_USE"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 119, 9, "enum_NEXT_SYNTAX"], [120, 96, 10, "enum_LAST_LEXICAL_USE"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [124, 103, 10, "enum_LAST_LEXICAL_USE"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [3, 8, 1, "enum_CFG_NEXT"], [8, 10, 1, "enum_CFG_NEXT"], [10, 14, 1, "enum_CFG_NEXT"], [14, 26, 1, "enum_CFG_NEXT"], [26, 42, 1, "enum_CFG_NEXT"], [42, 59, 1, "enum_CFG_NEXT"], [42, 77, 1, "enum_CFG_NEXT"], [59, 68, 1, "enum_CFG_NEXT"], [68, 42, 1, "enum_CFG_NEXT"], [77, 83, 1, "enum_CFG_NEXT"], [77, 86, 1, "enum_CFG_NEXT"], [86, 102, 1, "enum_CFG_NEXT"], [102, 119, 1, "enum_CFG_NEXT"], [18, 2, 3, "enum_LAST_WRITE"], [29, 18, 2, "enum_LAST_READ"], [29, 2, 3, "enum_LAST_WRITE"], [38, 66, 2, "enum_LAST_READ"], [38, 27, 3, "enum_LAST_WRITE"], [38, 60, 3, "enum_LAST_WRITE"], [40, 40, 2, "enum_LAST_READ"], [46, 54, 2, "enum_LAST_READ"], [46, 4, 3, "enum_LAST_WRITE"], [51, 51, 2, "enum_LAST_READ"], [51, 15, 3, "enum_LAST_WRITE"], [54, 46, 2, "enum_LAST_READ"], [54, 4, 3, "enum_LAST_WRITE"], [62, 62, 2, "enum_LAST_READ"], [62, 29, 2, "enum_LAST_READ"], [62, 2, 3, "enum_LAST_WRITE"], [66, 38, 2, "enum_LAST_READ"], [66, 27, 3, "enum_LAST_WRITE"], [66, 60, 3, "enum_LAST_WRITE"], [60, 66, 2, "enum_LAST_READ"], [60, 27, 3, "enum_LAST_WRITE"], [60, 60, 3, "enum_LAST_WRITE"], [69, 69, 2, "enum_LAST_READ"], [69, 69, 3, "enum_LAST_WRITE"], [69, 11, 3, "enum_LAST_WRITE"], [69, 69, 2, "enum_LAST_READ"], [69, 69, 3, "enum_LAST_WRITE"], [69, 11, 3, "enum_LAST_WRITE"], [76, 38, 2, "enum_LAST_READ"], [76, 27, 3, "enum_LAST_WRITE"], [76, 60, 3, "enum_LAST_WRITE"], [78, 40, 2, "enum_LAST_READ"], [84, 78, 2, "enum_LAST_READ"], [91, 76, 2, "enum_LAST_READ"], [91, 27, 3, "enum_LAST_WRITE"], [91, 60, 3, "enum_LAST_WRITE"], [96, 62, 2, "enum_LAST_READ"], [96, 29, 2, "enum_LAST_READ"], [96, 2, 3, "enum_LAST_WRITE"], [107, 54, 2, "enum_LAST_READ"], [107, 4, 3, "enum_LAST_WRITE"], [110, 69, 2, "enum_LAST_READ"], [110, 69, 3, "enum_LAST_WRITE"], [110, 11, 3, "enum_LAST_WRITE"], [112, 51, 2, "enum_LAST_READ"], [112, 15, 3, "enum_LAST_WRITE"], [103, 87, 3, "enum_LAST_WRITE"], [103, 103, 2, "enum_LAST_READ"], [103, 87, 3, "enum_LAST_WRITE"], [120, 96, 2, "enum_LAST_READ"], [120, 2, 3, "enum_LAST_WRITE"], [124, 103, 2, "enum_LAST_READ"], [124, 103, 3, "enum_LAST_WRITE"], [15, 18, 4, "enum_COMPUTED_FROM"], [27, 29, 4, "enum_COMPUTED_FROM"], [87, 91, 4, "enum_COMPUTED_FROM"], [87, 96, 4, "enum_COMPUTED_FROM"], [60, 66, 4, "enum_COMPUTED_FROM"], [60, 62, 4, "enum_COMPUTED_FROM"]], "error_location": 46, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/rembish/cfb.git", "old_path": "cfb/__init__.py", "hash": "220ec866dbbae13cebbff3e5ba2da95cf433ef32", "code": "def next_minifat(self, current: int) -> int:\n    \"\"\"\n    Helpers provides access to next mini-FAT sector and returns it's\n    seekable position. Should not be called from external code.\n    \"\"\"\n    position: int = 0\n    sector_size: int = self.header.sector_size // 4\n    sector = self.header.minifat_sector_start\n\n    while sector != ENDOFCHAIN and (current + 1) * sector_size <= current:\n        sector = self.next_fat(sector)\n        position += 1\n\n    if sector == ENDOFCHAIN:\n        return ENDOFCHAIN\n\n    minifat_position: int = (sector + 1) << self.header.sector_shift\n    minifat_position += (current - position * sector_size) * 4\n\n    return self.get_long(minifat_position)\n", "rewrite": "ReplaceText(target='position' @(79,40)->(79,47))", "error_line": 9, "has_bug": true, "code_full": "from typing import Any\n\nENDOFCHAIN: int = 0\n\nclass Class:\n    header: Any\n\n    def next_minifat(self, current: int) -> int:\n        \"\"\"\n        Helpers provides access to next mini-FAT sector and returns it's\n        seekable position. Should not be called from external code.\n        \"\"\"\n        position: int = 0\n        sector_size: int = self.header.sector_size // 4\n        sector = self.header.minifat_sector_start\n\n        while sector != ENDOFCHAIN and (current + 1) * sector_size <= current:\n            sector = self.next_fat(sector)\n            position += 1\n\n        if sector == ENDOFCHAIN:\n            return ENDOFCHAIN\n\n        minifat_position: int = (sector + 1) << self.header.sector_shift\n        minifat_position += (current - position * sector_size) * 4\n\n        return self.get_long(minifat_position)\n    \n    def next_fat(self, current: int) -> int:\n        return 0\n    \n    def get_long(self, position: int) -> int:\n        return 0\n", "error_location_char": [351, 358], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def create_argument_parser(", ")", ":", "#NEWLINE#", "#INDENT#", "'Create argument parser for the evaluate script.'", "#NEWLINE#", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'evaluates a dialogue model'", ")", "#NEWLINE#", "parent_parser", "=", "argparse", ".", "ArgumentParser", "(", "add_help", "=", "False", ")", "#NEWLINE#", "add_args_to_parser", "(", "parent_parser", ")", "#NEWLINE#", "cli", ".", "arguments", ".", "add_model_and_story_group", "(", "parser", ",", "allow_pretrained_model", "=", "False", ")", "#NEWLINE#", "utils", ".", "add_logging_option_arguments", "(", "parent_parser", ")", "#NEWLINE#", "subparsers", "=", "parser", ".", "add_subparsers", "(", "help", "=", "'mode'", ",", "dest", "=", "'mode'", ")", "#NEWLINE#", "subparsers", ".", "add_parser", "(", "'default'", ",", "help", "=", "'default mode: evaluate a dialogue model'", ",", "parents", "=", "[", "parent_parser", "]", ")", "#NEWLINE#", "subparsers", ".", "add_parser", "(", "'compare'", ",", "help", "=", "'compare mode: evaluate multiple dialogue models to compare policies'", ",", "parents", "=", "[", "parent_parser", "]", ")", "#NEWLINE#", "return", "parser"], "edges": [[5, 6, 7, "enum_FIELD"], [7, 13, 7, "enum_FIELD"], [18, 24, 7, "enum_FIELD"], [29, 31, 7, "enum_FIELD"], [34, 42, 7, "enum_FIELD"], [47, 51, 7, "enum_FIELD"], [54, 64, 7, "enum_FIELD"], [69, 75, 7, "enum_FIELD"], [86, 92, 7, "enum_FIELD"], [104, 105, 7, "enum_FIELD"], [13, 11, 7, "enum_FIELD"], [24, 22, 7, "enum_FIELD"], [31, 30, 7, "enum_FIELD"], [42, 38, 7, "enum_FIELD"], [51, 49, 7, "enum_FIELD"], [64, 58, 7, "enum_FIELD"], [75, 71, 7, "enum_FIELD"], [92, 88, 7, "enum_FIELD"], [11, 10, 7, "enum_FIELD"], [14, 16, 7, "enum_FIELD"], [22, 21, 7, "enum_FIELD"], [25, 27, 7, "enum_FIELD"], [38, 36, 7, "enum_FIELD"], [43, 45, 7, "enum_FIELD"], [49, 48, 7, "enum_FIELD"], [58, 57, 7, "enum_FIELD"], [61, 63, 7, "enum_FIELD"], [65, 67, 7, "enum_FIELD"], [71, 70, 7, "enum_FIELD"], [76, 78, 7, "enum_FIELD"], [80, 82, 7, "enum_FIELD"], [88, 87, 7, "enum_FIELD"], [93, 95, 7, "enum_FIELD"], [97, 99, 7, "enum_FIELD"], [36, 35, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [21, 10, 10, "enum_LAST_LEXICAL_USE"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [32, 19, 10, "enum_LAST_LEXICAL_USE"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [41, 8, 10, "enum_LAST_LEXICAL_USE"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [52, 32, 10, "enum_LAST_LEXICAL_USE"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [57, 41, 10, "enum_LAST_LEXICAL_USE"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [70, 55, 10, "enum_LAST_LEXICAL_USE"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [83, 52, 10, "enum_LAST_LEXICAL_USE"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [87, 70, 10, "enum_LAST_LEXICAL_USE"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [100, 83, 10, "enum_LAST_LEXICAL_USE"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 104, 9, "enum_NEXT_SYNTAX"], [105, 57, 10, "enum_LAST_LEXICAL_USE"], [104, 105, 9, "enum_NEXT_SYNTAX"], [5, 7, 1, "enum_CFG_NEXT"], [7, 18, 1, "enum_CFG_NEXT"], [18, 29, 1, "enum_CFG_NEXT"], [29, 34, 1, "enum_CFG_NEXT"], [34, 47, 1, "enum_CFG_NEXT"], [47, 54, 1, "enum_CFG_NEXT"], [54, 69, 1, "enum_CFG_NEXT"], [69, 86, 1, "enum_CFG_NEXT"], [86, 104, 1, "enum_CFG_NEXT"], [21, 10, 2, "enum_LAST_READ"], [32, 19, 3, "enum_LAST_WRITE"], [41, 8, 3, "enum_LAST_WRITE"], [52, 32, 2, "enum_LAST_READ"], [52, 19, 3, "enum_LAST_WRITE"], [57, 41, 2, "enum_LAST_READ"], [57, 8, 3, "enum_LAST_WRITE"], [70, 55, 3, "enum_LAST_WRITE"], [83, 52, 2, "enum_LAST_READ"], [83, 19, 3, "enum_LAST_WRITE"], [87, 70, 2, "enum_LAST_READ"], [87, 55, 3, "enum_LAST_WRITE"], [100, 83, 2, "enum_LAST_READ"], [100, 19, 3, "enum_LAST_WRITE"], [105, 57, 2, "enum_LAST_READ"], [105, 8, 3, "enum_LAST_WRITE"], [8, 10, 4, "enum_COMPUTED_FROM"], [19, 21, 4, "enum_COMPUTED_FROM"], [55, 57, 4, "enum_COMPUTED_FROM"]], "error_location": 41, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/RasaHQ/rasa.git", "old_path": "rasa_core/evaluate.py", "hash": "665cf94ee30f44aac85e8ac3c5ed8b2b0694354a", "code": "def create_argument_parser():\n    \"\"\"Create argument parser for the evaluate script.\"\"\"\n\n    parser: argparse.ArgumentParser = argparse.ArgumentParser(\n            description='evaluates a dialogue model')\n    parent_parser: argparse.ArgumentParser = argparse.ArgumentParser(add_help=False)\n    add_args_to_parser(parent_parser)\n    cli.arguments.add_model_and_story_group(parser,\n                                            allow_pretrained_model=False)\n    utils.add_logging_option_arguments(parent_parser)\n    subparsers = parser.add_subparsers(help='mode', dest='mode')\n    subparsers.add_parser('default',\n                          help='default mode: evaluate a dialogue'\n                               ' model',\n                               parents=[parent_parser])\n    subparsers.add_parser('compare',\n                          help='compare mode: evaluate multiple'\n                               ' dialogue models to compare '\n                               'policies',\n                               parents=[parent_parser])\n", "rewrite": "ReplaceText(target='parent_parser' @(52,44)->(52,50))", "error_line": 7, "has_bug": true, "code_full": "import argparse\n\n\ndef add_args_to_parser(parser: argparse.ArgumentParser):\n    pass\n\nclass cli:\n    class arguments:\n        @staticmethod\n        def add_model_and_story_group(parser: argparse.ArgumentParser, allow_pretrained_model: bool):\n            pass\n\nclass utils:\n    @staticmethod\n    def add_logging_option_arguments(parser: argparse.ArgumentParser):\n        pass\n\ndef create_argument_parser():\n    \"\"\"Create argument parser for the evaluate script.\"\"\"\n\n    parser: argparse.ArgumentParser = argparse.ArgumentParser(\n            description='evaluates a dialogue model')\n    parent_parser: argparse.ArgumentParser = argparse.ArgumentParser(add_help=False)\n    add_args_to_parser(parent_parser)\n    cli.arguments.add_model_and_story_group(parser,\n                                            allow_pretrained_model=False)\n    utils.add_logging_option_arguments(parent_parser)\n    subparsers = parser.add_subparsers(help='mode', dest='mode')\n    subparsers.add_parser('default',\n                          help='default mode: evaluate a dialogue'\n                               ' model',\n                               parents=[parent_parser])\n    subparsers.add_parser('compare',\n                          help='compare mode: evaluate multiple'\n                               ' dialogue models to compare '\n                               'policies',\n                               parents=[parent_parser])\n", "error_location_char": [373, 379], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def test_scheduler_only_creates_required_workers(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "config", "=", "[", "dict", "(", "host", "=", "'host1'", ",", "python", "=", "sys", ".", "executable", ",", "testing", "=", "True", ")", ",", "dict", "(", "host", "=", "'host2'", ",", "python", "=", "sys", ".", "executable", ",", "testing", "=", "True", ")", "]", "#NEWLINE#", "s", "=", "jobs", ".", "Scheduler", "(", "worker_config", "=", "config", ")", "#NEWLINE#", "j", "=", "self", ".", "_make_dummy_job", "(", ")", "#NEWLINE#", "proxy", "=", "s", ".", "submit", "(", "j", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "len", "(", "s", ".", "workers", ")", ",", "1", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "proxy", ".", "worker", ".", "host", ",", "'host1'", ")", "#NEWLINE#", "count", "=", "0", "#NEWLINE#", "while", "(", "(", "proxy", ".", "status", "(", ")", "!=", "'done'", ")", "and", "(", "count", "<", "10", ")", ")", ":", "#NEWLINE#", "#INDENT#", "time", ".", "sleep", "(", "0.1", ")", "#NEWLINE#", "count", "+=", "1", "#NEWLINE#", "#UNINDENT#", "j", "=", "self", ".", "_make_dummy_job", "(", ")", "#NEWLINE#", "s", ".", "submit", "(", "j", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "len", "(", "s", ".", "workers", ")", ",", "1", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "proxy", ".", "worker", ".", "host", ",", "'host1'", ")", "#NEWLINE#", "j", "=", "self", ".", "_make_dummy_job", "(", ")", "#NEWLINE#", "proxy", "=", "s", ".", "submit", "(", "j", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "len", "(", "s", ".", "workers", ")", ",", "2", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "proxy", ".", "worker", ".", "host", ",", "'host2'", ")", "#NEWLINE#", "j", "=", "self", ".", "_make_dummy_job", "(", ")", "#NEWLINE#", "proxy", "=", "s", ".", "submit", "(", "j", ")", "#NEWLINE#", "j", "=", "self", ".", "_make_dummy_job", "(", ")", "#NEWLINE#", "proxy1", "=", "s", ".", "submit", "(", "j", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "len", "(", "s", ".", "workers", ")", ",", "2", ")", "#NEWLINE#", "count", "=", "0", "#NEWLINE#", "while", "(", "(", "proxy", ".", "status", "(", ")", "!=", "'done'", ")", "and", "(", "count", "<", "10", ")", ")", ":", "#NEWLINE#", "#INDENT#", "time", ".", "sleep", "(", "0.1", ")", "#NEWLINE#", "count", "+=", "1", "#NEWLINE#", "#UNINDENT#", "self", ".", "assertEqual", "(", "proxy", ".", "status", "(", ")", ",", "'done'", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "proxy", ".", "worker", ".", "host", ",", "'host1'", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "proxy1", ".", "worker", ".", "host", ",", "'host2'", ")"], "edges": [[6, 26, 7, "enum_FIELD"], [44, 50, 7, "enum_FIELD"], [55, 61, 7, "enum_FIELD"], [63, 69, 7, "enum_FIELD"], [72, 83, 7, "enum_FIELD"], [86, 96, 7, "enum_FIELD"], [99, 102, 7, "enum_FIELD"], [104, 115, 7, "enum_FIELD"], [136, 142, 7, "enum_FIELD"], [144, 148, 7, "enum_FIELD"], [151, 162, 7, "enum_FIELD"], [165, 175, 7, "enum_FIELD"], [178, 184, 7, "enum_FIELD"], [186, 192, 7, "enum_FIELD"], [195, 206, 7, "enum_FIELD"], [209, 219, 7, "enum_FIELD"], [222, 228, 7, "enum_FIELD"], [230, 236, 7, "enum_FIELD"], [239, 245, 7, "enum_FIELD"], [247, 253, 7, "enum_FIELD"], [256, 267, 7, "enum_FIELD"], [270, 273, 7, "enum_FIELD"], [275, 286, 7, "enum_FIELD"], [307, 317, 7, "enum_FIELD"], [320, 330, 7, "enum_FIELD"], [333, 343, 7, "enum_FIELD"], [50, 48, 7, "enum_FIELD"], [61, 59, 7, "enum_FIELD"], [69, 67, 7, "enum_FIELD"], [83, 74, 7, "enum_FIELD"], [96, 88, 7, "enum_FIELD"], [124, 128, 7, "enum_FIELD"], [131, 132, 7, "enum_FIELD"], [131, 134, 7, "enum_FIELD"], [142, 140, 7, "enum_FIELD"], [148, 146, 7, "enum_FIELD"], [162, 153, 7, "enum_FIELD"], [175, 167, 7, "enum_FIELD"], [184, 182, 7, "enum_FIELD"], [192, 190, 7, "enum_FIELD"], [206, 197, 7, "enum_FIELD"], [219, 211, 7, "enum_FIELD"], [228, 226, 7, "enum_FIELD"], [236, 234, 7, "enum_FIELD"], [245, 243, 7, "enum_FIELD"], [253, 251, 7, "enum_FIELD"], [267, 258, 7, "enum_FIELD"], [295, 299, 7, "enum_FIELD"], [302, 303, 7, "enum_FIELD"], [302, 305, 7, "enum_FIELD"], [317, 309, 7, "enum_FIELD"], [330, 322, 7, "enum_FIELD"], [343, 335, 7, "enum_FIELD"], [15, 10, 7, "enum_FIELD"], [32, 27, 7, "enum_FIELD"], [48, 47, 7, "enum_FIELD"], [51, 53, 7, "enum_FIELD"], [59, 58, 7, "enum_FIELD"], [67, 66, 7, "enum_FIELD"], [74, 73, 7, "enum_FIELD"], [78, 77, 7, "enum_FIELD"], [88, 87, 7, "enum_FIELD"], [94, 92, 7, "enum_FIELD"], [112, 110, 7, "enum_FIELD"], [118, 117, 7, "enum_FIELD"], [128, 126, 7, "enum_FIELD"], [140, 139, 7, "enum_FIELD"], [146, 145, 7, "enum_FIELD"], [153, 152, 7, "enum_FIELD"], [157, 156, 7, "enum_FIELD"], [167, 166, 7, "enum_FIELD"], [173, 171, 7, "enum_FIELD"], [182, 181, 7, "enum_FIELD"], [190, 189, 7, "enum_FIELD"], [197, 196, 7, "enum_FIELD"], [201, 200, 7, "enum_FIELD"], [211, 210, 7, "enum_FIELD"], [217, 215, 7, "enum_FIELD"], [226, 225, 7, "enum_FIELD"], [234, 233, 7, "enum_FIELD"], [243, 242, 7, "enum_FIELD"], [251, 250, 7, "enum_FIELD"], [258, 257, 7, "enum_FIELD"], [262, 261, 7, "enum_FIELD"], [283, 281, 7, "enum_FIELD"], [289, 288, 7, "enum_FIELD"], [299, 297, 7, "enum_FIELD"], [309, 308, 7, "enum_FIELD"], [315, 313, 7, "enum_FIELD"], [322, 321, 7, "enum_FIELD"], [328, 326, 7, "enum_FIELD"], [335, 334, 7, "enum_FIELD"], [341, 339, 7, "enum_FIELD"], [12, 14, 7, "enum_FIELD"], [16, 19, 7, "enum_FIELD"], [22, 24, 7, "enum_FIELD"], [29, 31, 7, "enum_FIELD"], [33, 36, 7, "enum_FIELD"], [39, 41, 7, "enum_FIELD"], [80, 79, 7, "enum_FIELD"], [92, 91, 7, "enum_FIELD"], [110, 108, 7, "enum_FIELD"], [126, 125, 7, "enum_FIELD"], [159, 158, 7, "enum_FIELD"], [171, 170, 7, "enum_FIELD"], [203, 202, 7, "enum_FIELD"], [215, 214, 7, "enum_FIELD"], [264, 263, 7, "enum_FIELD"], [281, 279, 7, "enum_FIELD"], [297, 296, 7, "enum_FIELD"], [313, 312, 7, "enum_FIELD"], [326, 325, 7, "enum_FIELD"], [339, 338, 7, "enum_FIELD"], [19, 18, 7, "enum_FIELD"], [36, 35, 7, "enum_FIELD"], [108, 107, 7, "enum_FIELD"], [279, 278, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [27, 10, 10, "enum_LAST_LEXICAL_USE"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [35, 18, 10, "enum_LAST_LEXICAL_USE"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [53, 7, 10, "enum_LAST_LEXICAL_USE"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [58, 2, 10, "enum_LAST_LEXICAL_USE"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [66, 45, 10, "enum_LAST_LEXICAL_USE"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [70, 56, 10, "enum_LAST_LEXICAL_USE"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [73, 58, 10, "enum_LAST_LEXICAL_USE"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [79, 66, 10, "enum_LAST_LEXICAL_USE"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [87, 73, 10, "enum_LAST_LEXICAL_USE"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [91, 64, 10, "enum_LAST_LEXICAL_USE"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [107, 91, 10, "enum_LAST_LEXICAL_USE"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [117, 100, 10, "enum_LAST_LEXICAL_USE"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [132, 117, 10, "enum_LAST_LEXICAL_USE"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 136, 9, "enum_NEXT_SYNTAX"], [137, 70, 10, "enum_LAST_LEXICAL_USE"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [139, 87, 10, "enum_LAST_LEXICAL_USE"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [145, 79, 10, "enum_LAST_LEXICAL_USE"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [149, 137, 10, "enum_LAST_LEXICAL_USE"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [152, 139, 10, "enum_LAST_LEXICAL_USE"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [156, 77, 10, "enum_LAST_LEXICAL_USE"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [158, 145, 10, "enum_LAST_LEXICAL_USE"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [166, 152, 10, "enum_LAST_LEXICAL_USE"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [170, 107, 10, "enum_LAST_LEXICAL_USE"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 178, 9, "enum_NEXT_SYNTAX"], [179, 149, 10, "enum_LAST_LEXICAL_USE"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 180, 9, "enum_NEXT_SYNTAX"], [181, 166, 10, "enum_LAST_LEXICAL_USE"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 184, 9, "enum_NEXT_SYNTAX"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [187, 170, 10, "enum_LAST_LEXICAL_USE"], [186, 187, 9, "enum_NEXT_SYNTAX"], [187, 188, 9, "enum_NEXT_SYNTAX"], [189, 158, 10, "enum_LAST_LEXICAL_USE"], [188, 189, 9, "enum_NEXT_SYNTAX"], [189, 190, 9, "enum_NEXT_SYNTAX"], [190, 191, 9, "enum_NEXT_SYNTAX"], [191, 192, 9, "enum_NEXT_SYNTAX"], [193, 179, 10, "enum_LAST_LEXICAL_USE"], [192, 193, 9, "enum_NEXT_SYNTAX"], [193, 194, 9, "enum_NEXT_SYNTAX"], [194, 195, 9, "enum_NEXT_SYNTAX"], [196, 181, 10, "enum_LAST_LEXICAL_USE"], [195, 196, 9, "enum_NEXT_SYNTAX"], [196, 197, 9, "enum_NEXT_SYNTAX"], [197, 198, 9, "enum_NEXT_SYNTAX"], [198, 199, 9, "enum_NEXT_SYNTAX"], [200, 156, 10, "enum_LAST_LEXICAL_USE"], [199, 200, 9, "enum_NEXT_SYNTAX"], [200, 201, 9, "enum_NEXT_SYNTAX"], [202, 189, 10, "enum_LAST_LEXICAL_USE"], [201, 202, 9, "enum_NEXT_SYNTAX"], [202, 203, 9, "enum_NEXT_SYNTAX"], [203, 204, 9, "enum_NEXT_SYNTAX"], [204, 205, 9, "enum_NEXT_SYNTAX"], [205, 206, 9, "enum_NEXT_SYNTAX"], [206, 207, 9, "enum_NEXT_SYNTAX"], [207, 208, 9, "enum_NEXT_SYNTAX"], [208, 209, 9, "enum_NEXT_SYNTAX"], [210, 196, 10, "enum_LAST_LEXICAL_USE"], [209, 210, 9, "enum_NEXT_SYNTAX"], [210, 211, 9, "enum_NEXT_SYNTAX"], [211, 212, 9, "enum_NEXT_SYNTAX"], [212, 213, 9, "enum_NEXT_SYNTAX"], [214, 187, 10, "enum_LAST_LEXICAL_USE"], [213, 214, 9, "enum_NEXT_SYNTAX"], [214, 215, 9, "enum_NEXT_SYNTAX"], [215, 216, 9, "enum_NEXT_SYNTAX"], [216, 217, 9, "enum_NEXT_SYNTAX"], [217, 218, 9, "enum_NEXT_SYNTAX"], [218, 219, 9, "enum_NEXT_SYNTAX"], [219, 220, 9, "enum_NEXT_SYNTAX"], [220, 221, 9, "enum_NEXT_SYNTAX"], [221, 222, 9, "enum_NEXT_SYNTAX"], [223, 193, 10, "enum_LAST_LEXICAL_USE"], [222, 223, 9, "enum_NEXT_SYNTAX"], [223, 224, 9, "enum_NEXT_SYNTAX"], [225, 210, 10, "enum_LAST_LEXICAL_USE"], [224, 225, 9, "enum_NEXT_SYNTAX"], [225, 226, 9, "enum_NEXT_SYNTAX"], [226, 227, 9, "enum_NEXT_SYNTAX"], [227, 228, 9, "enum_NEXT_SYNTAX"], [228, 229, 9, "enum_NEXT_SYNTAX"], [229, 230, 9, "enum_NEXT_SYNTAX"], [231, 214, 10, "enum_LAST_LEXICAL_USE"], [230, 231, 9, "enum_NEXT_SYNTAX"], [231, 232, 9, "enum_NEXT_SYNTAX"], [233, 202, 10, "enum_LAST_LEXICAL_USE"], [232, 233, 9, "enum_NEXT_SYNTAX"], [233, 234, 9, "enum_NEXT_SYNTAX"], [234, 235, 9, "enum_NEXT_SYNTAX"], [235, 236, 9, "enum_NEXT_SYNTAX"], [237, 223, 10, "enum_LAST_LEXICAL_USE"], [236, 237, 9, "enum_NEXT_SYNTAX"], [237, 238, 9, "enum_NEXT_SYNTAX"], [238, 239, 9, "enum_NEXT_SYNTAX"], [240, 237, 10, "enum_LAST_LEXICAL_USE"], [239, 240, 9, "enum_NEXT_SYNTAX"], [240, 241, 9, "enum_NEXT_SYNTAX"], [242, 225, 10, "enum_LAST_LEXICAL_USE"], [241, 242, 9, "enum_NEXT_SYNTAX"], [242, 243, 9, "enum_NEXT_SYNTAX"], [243, 244, 9, "enum_NEXT_SYNTAX"], [244, 245, 9, "enum_NEXT_SYNTAX"], [245, 246, 9, "enum_NEXT_SYNTAX"], [246, 247, 9, "enum_NEXT_SYNTAX"], [247, 248, 9, "enum_NEXT_SYNTAX"], [248, 249, 9, "enum_NEXT_SYNTAX"], [250, 233, 10, "enum_LAST_LEXICAL_USE"], [249, 250, 9, "enum_NEXT_SYNTAX"], [250, 251, 9, "enum_NEXT_SYNTAX"], [251, 252, 9, "enum_NEXT_SYNTAX"], [252, 253, 9, "enum_NEXT_SYNTAX"], [254, 240, 10, "enum_LAST_LEXICAL_USE"], [253, 254, 9, "enum_NEXT_SYNTAX"], [254, 255, 9, "enum_NEXT_SYNTAX"], [255, 256, 9, "enum_NEXT_SYNTAX"], [257, 242, 10, "enum_LAST_LEXICAL_USE"], [256, 257, 9, "enum_NEXT_SYNTAX"], [257, 258, 9, "enum_NEXT_SYNTAX"], [258, 259, 9, "enum_NEXT_SYNTAX"], [259, 260, 9, "enum_NEXT_SYNTAX"], [261, 200, 10, "enum_LAST_LEXICAL_USE"], [260, 261, 9, "enum_NEXT_SYNTAX"], [261, 262, 9, "enum_NEXT_SYNTAX"], [263, 250, 10, "enum_LAST_LEXICAL_USE"], [262, 263, 9, "enum_NEXT_SYNTAX"], [263, 264, 9, "enum_NEXT_SYNTAX"], [264, 265, 9, "enum_NEXT_SYNTAX"], [265, 266, 9, "enum_NEXT_SYNTAX"], [266, 267, 9, "enum_NEXT_SYNTAX"], [267, 268, 9, "enum_NEXT_SYNTAX"], [268, 269, 9, "enum_NEXT_SYNTAX"], [269, 270, 9, "enum_NEXT_SYNTAX"], [271, 132, 10, "enum_LAST_LEXICAL_USE"], [270, 271, 9, "enum_NEXT_SYNTAX"], [271, 272, 9, "enum_NEXT_SYNTAX"], [272, 273, 9, "enum_NEXT_SYNTAX"], [273, 275, 9, "enum_NEXT_SYNTAX"], [275, 276, 9, "enum_NEXT_SYNTAX"], [276, 277, 9, "enum_NEXT_SYNTAX"], [278, 231, 10, "enum_LAST_LEXICAL_USE"], [277, 278, 9, "enum_NEXT_SYNTAX"], [278, 279, 9, "enum_NEXT_SYNTAX"], [279, 280, 9, "enum_NEXT_SYNTAX"], [280, 281, 9, "enum_NEXT_SYNTAX"], [281, 282, 9, "enum_NEXT_SYNTAX"], [282, 283, 9, "enum_NEXT_SYNTAX"], [283, 284, 9, "enum_NEXT_SYNTAX"], [284, 285, 9, "enum_NEXT_SYNTAX"], [285, 286, 9, "enum_NEXT_SYNTAX"], [286, 287, 9, "enum_NEXT_SYNTAX"], [288, 271, 10, "enum_LAST_LEXICAL_USE"], [287, 288, 9, "enum_NEXT_SYNTAX"], [288, 289, 9, "enum_NEXT_SYNTAX"], [289, 290, 9, "enum_NEXT_SYNTAX"], [290, 291, 9, "enum_NEXT_SYNTAX"], [291, 292, 9, "enum_NEXT_SYNTAX"], [292, 293, 9, "enum_NEXT_SYNTAX"], [293, 295, 9, "enum_NEXT_SYNTAX"], [296, 125, 10, "enum_LAST_LEXICAL_USE"], [295, 296, 9, "enum_NEXT_SYNTAX"], [296, 297, 9, "enum_NEXT_SYNTAX"], [297, 298, 9, "enum_NEXT_SYNTAX"], [298, 299, 9, "enum_NEXT_SYNTAX"], [299, 300, 9, "enum_NEXT_SYNTAX"], [300, 301, 9, "enum_NEXT_SYNTAX"], [301, 302, 9, "enum_NEXT_SYNTAX"], [303, 288, 10, "enum_LAST_LEXICAL_USE"], [302, 303, 9, "enum_NEXT_SYNTAX"], [303, 304, 9, "enum_NEXT_SYNTAX"], [304, 305, 9, "enum_NEXT_SYNTAX"], [305, 307, 9, "enum_NEXT_SYNTAX"], [308, 257, 10, "enum_LAST_LEXICAL_USE"], [307, 308, 9, "enum_NEXT_SYNTAX"], [308, 309, 9, "enum_NEXT_SYNTAX"], [309, 310, 9, "enum_NEXT_SYNTAX"], [310, 311, 9, "enum_NEXT_SYNTAX"], [312, 278, 10, "enum_LAST_LEXICAL_USE"], [311, 312, 9, "enum_NEXT_SYNTAX"], [312, 313, 9, "enum_NEXT_SYNTAX"], [313, 314, 9, "enum_NEXT_SYNTAX"], [314, 315, 9, "enum_NEXT_SYNTAX"], [315, 316, 9, "enum_NEXT_SYNTAX"], [316, 317, 9, "enum_NEXT_SYNTAX"], [317, 318, 9, "enum_NEXT_SYNTAX"], [318, 319, 9, "enum_NEXT_SYNTAX"], [319, 320, 9, "enum_NEXT_SYNTAX"], [321, 308, 10, "enum_LAST_LEXICAL_USE"], [320, 321, 9, "enum_NEXT_SYNTAX"], [321, 322, 9, "enum_NEXT_SYNTAX"], [322, 323, 9, "enum_NEXT_SYNTAX"], [323, 324, 9, "enum_NEXT_SYNTAX"], [325, 312, 10, "enum_LAST_LEXICAL_USE"], [324, 325, 9, "enum_NEXT_SYNTAX"], [325, 326, 9, "enum_NEXT_SYNTAX"], [326, 327, 9, "enum_NEXT_SYNTAX"], [327, 328, 9, "enum_NEXT_SYNTAX"], [328, 329, 9, "enum_NEXT_SYNTAX"], [329, 330, 9, "enum_NEXT_SYNTAX"], [330, 331, 9, "enum_NEXT_SYNTAX"], [331, 332, 9, "enum_NEXT_SYNTAX"], [332, 333, 9, "enum_NEXT_SYNTAX"], [334, 321, 10, "enum_LAST_LEXICAL_USE"], [333, 334, 9, "enum_NEXT_SYNTAX"], [334, 335, 9, "enum_NEXT_SYNTAX"], [335, 336, 9, "enum_NEXT_SYNTAX"], [336, 337, 9, "enum_NEXT_SYNTAX"], [338, 248, 10, "enum_LAST_LEXICAL_USE"], [337, 338, 9, "enum_NEXT_SYNTAX"], [338, 339, 9, "enum_NEXT_SYNTAX"], [339, 340, 9, "enum_NEXT_SYNTAX"], [340, 341, 9, "enum_NEXT_SYNTAX"], [341, 342, 9, "enum_NEXT_SYNTAX"], [342, 343, 9, "enum_NEXT_SYNTAX"], [343, 344, 9, "enum_NEXT_SYNTAX"], [344, 345, 9, "enum_NEXT_SYNTAX"], [6, 44, 1, "enum_CFG_NEXT"], [44, 55, 1, "enum_CFG_NEXT"], [55, 63, 1, "enum_CFG_NEXT"], [63, 72, 1, "enum_CFG_NEXT"], [72, 86, 1, "enum_CFG_NEXT"], [86, 99, 1, "enum_CFG_NEXT"], [99, 115, 1, "enum_CFG_NEXT"], [115, 124, 1, "enum_CFG_NEXT"], [115, 136, 1, "enum_CFG_NEXT"], [124, 131, 1, "enum_CFG_NEXT"], [131, 115, 1, "enum_CFG_NEXT"], [136, 144, 1, "enum_CFG_NEXT"], [144, 151, 1, "enum_CFG_NEXT"], [151, 165, 1, "enum_CFG_NEXT"], [165, 178, 1, "enum_CFG_NEXT"], [178, 186, 1, "enum_CFG_NEXT"], [186, 195, 1, "enum_CFG_NEXT"], [195, 209, 1, "enum_CFG_NEXT"], [209, 222, 1, "enum_CFG_NEXT"], [222, 230, 1, "enum_CFG_NEXT"], [230, 239, 1, "enum_CFG_NEXT"], [239, 247, 1, "enum_CFG_NEXT"], [247, 256, 1, "enum_CFG_NEXT"], [256, 270, 1, "enum_CFG_NEXT"], [270, 286, 1, "enum_CFG_NEXT"], [286, 307, 1, "enum_CFG_NEXT"], [286, 295, 1, "enum_CFG_NEXT"], [295, 302, 1, "enum_CFG_NEXT"], [302, 286, 1, "enum_CFG_NEXT"], [307, 320, 1, "enum_CFG_NEXT"], [320, 333, 1, "enum_CFG_NEXT"], [27, 10, 2, "enum_LAST_READ"], [35, 18, 2, "enum_LAST_READ"], [53, 7, 3, "enum_LAST_WRITE"], [58, 2, 3, "enum_LAST_WRITE"], [66, 45, 3, "enum_LAST_WRITE"], [70, 56, 3, "enum_LAST_WRITE"], [73, 58, 2, "enum_LAST_READ"], [73, 2, 3, "enum_LAST_WRITE"], [79, 66, 2, "enum_LAST_READ"], [79, 45, 3, "enum_LAST_WRITE"], [87, 73, 2, "enum_LAST_READ"], [87, 2, 3, "enum_LAST_WRITE"], [91, 64, 3, "enum_LAST_WRITE"], [107, 91, 2, "enum_LAST_READ"], [107, 107, 2, "enum_LAST_READ"], [107, 64, 3, "enum_LAST_WRITE"], [117, 132, 2, "enum_LAST_READ"], [117, 100, 3, "enum_LAST_WRITE"], [117, 132, 3, "enum_LAST_WRITE"], [125, 125, 2, "enum_LAST_READ"], [132, 117, 2, "enum_LAST_READ"], [132, 100, 3, "enum_LAST_WRITE"], [132, 132, 3, "enum_LAST_WRITE"], [132, 132, 2, "enum_LAST_READ"], [132, 100, 3, "enum_LAST_WRITE"], [132, 132, 3, "enum_LAST_WRITE"], [139, 87, 2, "enum_LAST_READ"], [139, 2, 3, "enum_LAST_WRITE"], [137, 70, 2, "enum_LAST_READ"], [137, 56, 3, "enum_LAST_WRITE"], [145, 79, 2, "enum_LAST_READ"], [145, 45, 3, "enum_LAST_WRITE"], [149, 70, 2, "enum_LAST_READ"], [149, 137, 3, "enum_LAST_WRITE"], [152, 139, 2, "enum_LAST_READ"], [152, 2, 3, "enum_LAST_WRITE"], [156, 77, 2, "enum_LAST_READ"], [158, 145, 2, "enum_LAST_READ"], [158, 45, 3, "enum_LAST_WRITE"], [166, 152, 2, "enum_LAST_READ"], [166, 2, 3, "enum_LAST_WRITE"], [170, 107, 2, "enum_LAST_READ"], [170, 64, 3, "enum_LAST_WRITE"], [181, 166, 2, "enum_LAST_READ"], [181, 2, 3, "enum_LAST_WRITE"], [179, 149, 2, "enum_LAST_READ"], [179, 137, 3, "enum_LAST_WRITE"], [189, 158, 2, "enum_LAST_READ"], [189, 45, 3, "enum_LAST_WRITE"], [193, 149, 2, "enum_LAST_READ"], [193, 179, 3, "enum_LAST_WRITE"], [187, 170, 2, "enum_LAST_READ"], [187, 64, 3, "enum_LAST_WRITE"], [196, 181, 2, "enum_LAST_READ"], [196, 2, 3, "enum_LAST_WRITE"], [200, 156, 2, "enum_LAST_READ"], [202, 189, 2, "enum_LAST_READ"], [202, 45, 3, "enum_LAST_WRITE"], [210, 196, 2, "enum_LAST_READ"], [210, 2, 3, "enum_LAST_WRITE"], [214, 170, 2, "enum_LAST_READ"], [214, 187, 3, "enum_LAST_WRITE"], [225, 210, 2, "enum_LAST_READ"], [225, 2, 3, "enum_LAST_WRITE"], [223, 193, 2, "enum_LAST_READ"], [223, 179, 3, "enum_LAST_WRITE"], [233, 202, 2, "enum_LAST_READ"], [233, 45, 3, "enum_LAST_WRITE"], [237, 193, 2, "enum_LAST_READ"], [237, 223, 3, "enum_LAST_WRITE"], [231, 214, 2, "enum_LAST_READ"], [231, 187, 3, "enum_LAST_WRITE"], [242, 225, 2, "enum_LAST_READ"], [242, 2, 3, "enum_LAST_WRITE"], [240, 237, 2, "enum_LAST_READ"], [240, 223, 3, "enum_LAST_WRITE"], [250, 233, 2, "enum_LAST_READ"], [250, 45, 3, "enum_LAST_WRITE"], [254, 237, 2, "enum_LAST_READ"], [254, 240, 3, "enum_LAST_WRITE"], [257, 242, 2, "enum_LAST_READ"], [257, 2, 3, "enum_LAST_WRITE"], [261, 200, 2, "enum_LAST_READ"], [263, 250, 2, "enum_LAST_READ"], [263, 45, 3, "enum_LAST_WRITE"], [271, 117, 2, "enum_LAST_READ"], [271, 100, 3, "enum_LAST_WRITE"], [271, 132, 3, "enum_LAST_WRITE"], [278, 278, 2, "enum_LAST_READ"], [278, 214, 2, "enum_LAST_READ"], [278, 231, 3, "enum_LAST_WRITE"], [288, 117, 2, "enum_LAST_READ"], [288, 303, 2, "enum_LAST_READ"], [288, 271, 3, "enum_LAST_WRITE"], [288, 303, 3, "enum_LAST_WRITE"], [296, 296, 2, "enum_LAST_READ"], [296, 125, 2, "enum_LAST_READ"], [303, 288, 2, "enum_LAST_READ"], [303, 271, 3, "enum_LAST_WRITE"], [303, 303, 3, "enum_LAST_WRITE"], [303, 303, 2, "enum_LAST_READ"], [303, 271, 3, "enum_LAST_WRITE"], [303, 303, 3, "enum_LAST_WRITE"], [308, 257, 2, "enum_LAST_READ"], [308, 2, 3, "enum_LAST_WRITE"], [312, 278, 2, "enum_LAST_READ"], [312, 231, 3, "enum_LAST_WRITE"], [321, 308, 2, "enum_LAST_READ"], [321, 2, 3, "enum_LAST_WRITE"], [325, 312, 2, "enum_LAST_READ"], [325, 231, 3, "enum_LAST_WRITE"], [334, 321, 2, "enum_LAST_READ"], [334, 2, 3, "enum_LAST_WRITE"], [338, 248, 3, "enum_LAST_WRITE"], [7, 10, 4, "enum_COMPUTED_FROM"], [7, 27, 4, "enum_COMPUTED_FROM"], [7, 18, 4, "enum_COMPUTED_FROM"], [7, 35, 4, "enum_COMPUTED_FROM"], [45, 47, 4, "enum_COMPUTED_FROM"], [45, 53, 4, "enum_COMPUTED_FROM"], [56, 58, 4, "enum_COMPUTED_FROM"], [64, 70, 4, "enum_COMPUTED_FROM"], [64, 66, 4, "enum_COMPUTED_FROM"], [137, 139, 4, "enum_COMPUTED_FROM"], [179, 181, 4, "enum_COMPUTED_FROM"], [187, 193, 4, "enum_COMPUTED_FROM"], [187, 189, 4, "enum_COMPUTED_FROM"], [223, 225, 4, "enum_COMPUTED_FROM"], [231, 237, 4, "enum_COMPUTED_FROM"], [231, 233, 4, "enum_COMPUTED_FROM"], [240, 242, 4, "enum_COMPUTED_FROM"], [248, 254, 4, "enum_COMPUTED_FROM"], [248, 250, 4, "enum_COMPUTED_FROM"]], "error_location": 278, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/pypr/automan.git", "old_path": "automan/tests/test_jobs.py", "hash": "55ada630a37e2dfcecebd69fef20d62eddb8d402", "code": "def test_scheduler_only_creates_required_workers(self):\n    # Given\n    config: List[Dict[str, Any]] = [\n        dict(host='host1', python=sys.executable, testing=True),\n        dict(host='host2', python=sys.executable, testing=True),\n    ]\n    s: jobs.Scheduler = jobs.Scheduler(worker_config=config)\n    j: Any = self._make_dummy_job()\n\n    # When\n    proxy = s.submit(j)\n\n    # Then\n    self.assertEqual(len(s.workers), 1)\n    self.assertEqual(proxy.worker.host, 'host1')\n\n    # Wait for this job to end and then see what happens\n    # When a new job is submitted.\n    count: int = 0\n    while proxy.status() != 'done' and count < 10:\n        time.sleep(0.1)\n        count += 1\n\n    # When\n    j: Any = self._make_dummy_job()\n    s.submit(j)\n\n    # Then\n    self.assertEqual(len(s.workers), 1)\n    self.assertEqual(proxy.worker.host, 'host1')\n\n    # Running two jobs in a row should produce two workers.\n    # When\n    j: Any = self._make_dummy_job()\n    proxy: Any = s.submit(j)\n\n    # Then\n    self.assertEqual(len(s.workers), 2)\n    self.assertEqual(proxy.worker.host, 'host2')\n\n    # Adding more should work.\n\n    # When\n    j: Any = self._make_dummy_job()\n    proxy: Any = s.submit(j)\n    j: Any = self._make_dummy_job()\n    proxy1: Any = s.submit(j)\n\n    # Then\n    self.assertEqual(len(s.workers), 2)\n    count: int = 0\n    while proxy.status() != 'done' and count < 10:\n        time.sleep(0.1)\n        count += 1\n\n    self.assertEqual(proxy.status(), 'done')\n    self.assertEqual(proxy.worker.host, 'host1')\n    self.assertEqual(proxy1.worker.host, 'host2')\n", "rewrite": "ReplaceText(target='proxy1' @(313,14)->(313,19))", "error_line": 51, "has_bug": true, "code_full": "import sys\nimport time\nfrom typing import Any, Dict, List\n\nfrom pysph.tools import jobs\n\n\nclass Class:\n\n    def _make_dummy_job(self) -> Any:\n        return None\n    \n    def assertEqual(self, a: Any, b: Any):\n        pass\n\n    def test_scheduler_only_creates_required_workers(self):\n        # Given\n        config: List[Dict[str, Any]] = [\n            dict(host='host1', python=sys.executable, testing=True),\n            dict(host='host2', python=sys.executable, testing=True),\n        ]\n        s: jobs.Scheduler = jobs.Scheduler(worker_config=config)\n        j: Any = self._make_dummy_job()\n\n        # When\n        proxy = s.submit(j)\n\n        # Then\n        self.assertEqual(len(s.workers), 1)\n        self.assertEqual(proxy.worker.host, 'host1')\n\n        # Wait for this job to end and then see what happens\n        # When a new job is submitted.\n        count: int = 0\n        while proxy.status() != 'done' and count < 10:\n            time.sleep(0.1)\n            count += 1\n\n        # When\n        j: Any = self._make_dummy_job()\n        s.submit(j)\n\n        # Then\n        self.assertEqual(len(s.workers), 1)\n        self.assertEqual(proxy.worker.host, 'host1')\n\n        # Running two jobs in a row should produce two workers.\n        # When\n        j: Any = self._make_dummy_job()\n        proxy: Any = s.submit(j)\n\n        # Then\n        self.assertEqual(len(s.workers), 2)\n        self.assertEqual(proxy.worker.host, 'host2')\n\n        # Adding more should work.\n\n        # When\n        j: Any = self._make_dummy_job()\n        proxy: Any = s.submit(j)\n        j: Any = self._make_dummy_job()\n        proxy1: Any = s.submit(j)\n\n        # Then\n        self.assertEqual(len(s.workers), 2)\n        count: int = 0\n        while proxy.status() != 'done' and count < 10:\n            time.sleep(0.1)\n            count += 1\n\n        self.assertEqual(proxy.status(), 'done')\n        self.assertEqual(proxy.worker.host, 'host1')\n        self.assertEqual(proxy1.worker.host, 'host2')\n", "error_location_char": [1340, 1345], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def setAutoscaledNodeTypes(", "self", ",", "nodeTypes", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Set node types, shapes and spot bids. Preemptable nodes will have the form \"type:spotBid\".\\n    :param nodeTypes: A list of node types\\n    '", "#NEWLINE#", "self", ".", "_spotBidsMap", "=", "{", "}", "#NEWLINE#", "self", ".", "nodeShapes", "=", "[", "]", "#NEWLINE#", "self", ".", "nodeTypes", "=", "[", "]", "#NEWLINE#", "for", "nodeTypeStr", "in", "nodeTypes", ":", "#NEWLINE#", "#INDENT#", "nodeBidTuple", "=", "nodeTypeStr", ".", "split", "(", "':'", ")", "#NEWLINE#", "if", "(", "len", "(", "nodeBidTuple", ")", "==", "2", ")", ":", "#NEWLINE#", "#INDENT#", "(", "nodeType", ",", "bid", ")", "=", "nodeBidTuple", "#NEWLINE#", "self", ".", "nodeTypes", ".", "append", "(", "nodeType", ")", "#NEWLINE#", "self", ".", "nodeShapes", ".", "append", "(", "self", ".", "getNodeShape", "(", "nodeType", ",", "preemptable", "=", "True", ")", ")", "#NEWLINE#", "self", ".", "_spotBidsMap", "[", "nodeType", "]", "=", "bid", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "self", ".", "nodeTypes", ".", "append", "(", "nodeTypeStr", ")", "#NEWLINE#", "self", ".", "nodeShapes", ".", "append", "(", "self", ".", "getNodeShape", "(", "nodeType", ",", "preemptable", "=", "False", ")", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [8, 9, 7, "enum_FIELD"], [10, 15, 7, "enum_FIELD"], [17, 22, 7, "enum_FIELD"], [24, 29, 7, "enum_FIELD"], [34, 33, 7, "enum_FIELD"], [34, 35, 7, "enum_FIELD"], [12, 11, 7, "enum_FIELD"], [19, 18, 7, "enum_FIELD"], [26, 25, 7, "enum_FIELD"], [38, 44, 7, "enum_FIELD"], [57, 54, 7, "enum_FIELD"], [44, 42, 7, "enum_FIELD"], [54, 51, 7, "enum_FIELD"], [59, 66, 7, "enum_FIELD"], [67, 73, 7, "enum_FIELD"], [76, 82, 7, "enum_FIELD"], [94, 102, 7, "enum_FIELD"], [108, 114, 7, "enum_FIELD"], [117, 123, 7, "enum_FIELD"], [42, 41, 7, "enum_FIELD"], [51, 50, 7, "enum_FIELD"], [73, 71, 7, "enum_FIELD"], [82, 80, 7, "enum_FIELD"], [98, 96, 7, "enum_FIELD"], [98, 99, 7, "enum_FIELD"], [114, 112, 7, "enum_FIELD"], [123, 121, 7, "enum_FIELD"], [71, 69, 7, "enum_FIELD"], [80, 78, 7, "enum_FIELD"], [88, 84, 7, "enum_FIELD"], [96, 95, 7, "enum_FIELD"], [112, 110, 7, "enum_FIELD"], [121, 119, 7, "enum_FIELD"], [129, 125, 7, "enum_FIELD"], [69, 68, 7, "enum_FIELD"], [78, 77, 7, "enum_FIELD"], [84, 83, 7, "enum_FIELD"], [89, 91, 7, "enum_FIELD"], [110, 109, 7, "enum_FIELD"], [119, 118, 7, "enum_FIELD"], [125, 124, 7, "enum_FIELD"], [130, 132, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [11, 2, 10, "enum_LAST_LEXICAL_USE"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [18, 11, 10, "enum_LAST_LEXICAL_USE"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [25, 18, 10, "enum_LAST_LEXICAL_USE"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [35, 4, 10, "enum_LAST_LEXICAL_USE"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [41, 33, 10, "enum_LAST_LEXICAL_USE"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [52, 39, 10, "enum_LAST_LEXICAL_USE"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [66, 52, 10, "enum_LAST_LEXICAL_USE"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [68, 25, 10, "enum_LAST_LEXICAL_USE"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [74, 61, 10, "enum_LAST_LEXICAL_USE"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [77, 68, 10, "enum_LAST_LEXICAL_USE"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [83, 77, 10, "enum_LAST_LEXICAL_USE"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [87, 74, 10, "enum_LAST_LEXICAL_USE"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [95, 83, 10, "enum_LAST_LEXICAL_USE"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [99, 87, 10, "enum_LAST_LEXICAL_USE"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [102, 63, 10, "enum_LAST_LEXICAL_USE"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 108, 9, "enum_NEXT_SYNTAX"], [109, 95, 10, "enum_LAST_LEXICAL_USE"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [115, 41, 10, "enum_LAST_LEXICAL_USE"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [118, 109, 10, "enum_LAST_LEXICAL_USE"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [124, 118, 10, "enum_LAST_LEXICAL_USE"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [128, 99, 10, "enum_LAST_LEXICAL_USE"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [3, 8, 1, "enum_CFG_NEXT"], [8, 10, 1, "enum_CFG_NEXT"], [10, 17, 1, "enum_CFG_NEXT"], [17, 24, 1, "enum_CFG_NEXT"], [24, 35, 1, "enum_CFG_NEXT"], [35, 33, 1, "enum_CFG_NEXT"], [33, 38, 1, "enum_CFG_NEXT"], [38, 54, 1, "enum_CFG_NEXT"], [54, 108, 1, "enum_CFG_NEXT"], [54, 59, 1, "enum_CFG_NEXT"], [59, 67, 1, "enum_CFG_NEXT"], [67, 76, 1, "enum_CFG_NEXT"], [76, 94, 1, "enum_CFG_NEXT"], [94, 33, 1, "enum_CFG_NEXT"], [108, 117, 1, "enum_CFG_NEXT"], [117, 33, 1, "enum_CFG_NEXT"], [11, 2, 3, "enum_LAST_WRITE"], [18, 11, 2, "enum_LAST_READ"], [18, 2, 3, "enum_LAST_WRITE"], [25, 18, 2, "enum_LAST_READ"], [25, 2, 3, "enum_LAST_WRITE"], [35, 4, 3, "enum_LAST_WRITE"], [33, 115, 2, "enum_LAST_READ"], [33, 41, 2, "enum_LAST_READ"], [33, 33, 3, "enum_LAST_WRITE"], [41, 115, 2, "enum_LAST_READ"], [41, 41, 2, "enum_LAST_READ"], [41, 33, 3, "enum_LAST_WRITE"], [39, 66, 2, "enum_LAST_READ"], [39, 52, 2, "enum_LAST_READ"], [39, 39, 3, "enum_LAST_WRITE"], [50, 50, 2, "enum_LAST_READ"], [52, 66, 2, "enum_LAST_READ"], [52, 52, 2, "enum_LAST_READ"], [52, 39, 3, "enum_LAST_WRITE"], [66, 52, 2, "enum_LAST_READ"], [66, 39, 3, "enum_LAST_WRITE"], [61, 99, 2, "enum_LAST_READ"], [61, 128, 2, "enum_LAST_READ"], [61, 61, 3, "enum_LAST_WRITE"], [63, 102, 2, "enum_LAST_READ"], [63, 63, 3, "enum_LAST_WRITE"], [68, 124, 2, "enum_LAST_READ"], [68, 25, 2, "enum_LAST_READ"], [68, 95, 2, "enum_LAST_READ"], [68, 2, 3, "enum_LAST_WRITE"], [74, 99, 2, "enum_LAST_READ"], [74, 128, 2, "enum_LAST_READ"], [74, 61, 3, "enum_LAST_WRITE"], [77, 68, 2, "enum_LAST_READ"], [77, 2, 3, "enum_LAST_WRITE"], [83, 77, 2, "enum_LAST_READ"], [83, 2, 3, "enum_LAST_WRITE"], [87, 74, 2, "enum_LAST_READ"], [87, 61, 3, "enum_LAST_WRITE"], [102, 102, 2, "enum_LAST_READ"], [102, 63, 3, "enum_LAST_WRITE"], [95, 83, 2, "enum_LAST_READ"], [95, 2, 3, "enum_LAST_WRITE"], [99, 87, 2, "enum_LAST_READ"], [99, 61, 3, "enum_LAST_WRITE"], [109, 124, 2, "enum_LAST_READ"], [109, 25, 2, "enum_LAST_READ"], [109, 95, 2, "enum_LAST_READ"], [109, 2, 3, "enum_LAST_WRITE"], [115, 41, 2, "enum_LAST_READ"], [115, 33, 3, "enum_LAST_WRITE"], [118, 109, 2, "enum_LAST_READ"], [118, 2, 3, "enum_LAST_WRITE"], [124, 118, 2, "enum_LAST_READ"], [124, 2, 3, "enum_LAST_WRITE"], [128, 99, 2, "enum_LAST_READ"], [128, 128, 2, "enum_LAST_READ"], [128, 61, 3, "enum_LAST_WRITE"], [39, 41, 4, "enum_COMPUTED_FROM"], [62, 66, 4, "enum_COMPUTED_FROM"], [98, 102, 4, "enum_COMPUTED_FROM"]], "error_location": 128, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/ionox0/toil.git", "old_path": "src/toil/provisioners/abstractProvisioner.py", "hash": "f5054aca67788f976c72b1e3f42334afe3a1dfaa", "code": "def object_actions(plugins: Dict[Type, Type[ParameterPlugin]], type_def: Union[Type, Service],\n                   source: str) -> ObjectActions:\n\n    ret: ObjectActions = []\n    tree: Any = horast.parse(source)\n\n    # ...inspect.ismethod does not work on un-initialized classes\n    for method_name, method_def in inspect.getmembers(type_def, predicate=inspect.isfunction):\n\n        # TODO check also if the method has 'action' decorator (ast needed)\n        if not hasattr(method_def, \"__action__\"):\n            continue\n\n        # action from ancestor, will be copied later (only if the action was not overridden)\n        base_cls_def: Any = type_def.__bases__[0]\n        if hasattr(base_cls_def, method_name) and getattr(base_cls_def, method_name) == method_def:\n            continue\n\n        meta: ActionMetadata = method_def.__action__\n\n        data: ObjectAction = ObjectAction(name=method_name, meta=meta)\n\n        if method_def in type_def.CANCEL_MAPPING:\n            meta.cancellable = True\n\n        doc: Dict = parse_docstring(method_def.__doc__)\n        doc_short: Optional[str] = doc[\"short_description\"]\n        if doc_short:\n            data.description = doc_short\n\n        signature: Any = inspect.signature(method_def)\n\n        method_tree: Any = find_function(method_name, tree)\n\n        try:\n            for name, ttype in get_type_hints(method_def).items():\n\n                try:\n                    param_type: Any = plugins[ttype]\n                except KeyError:\n                    for k, v in plugins.items():\n                        if not v.EXACT_TYPE and inspect.isclass(ttype) and issubclass(ttype, k):\n                            param_type = v\n                            break\n                    else:\n                        if name == \"return\" and ttype == type(None):  # noqa: E721\n                            # ...just ignore NoneType for returns\n                            continue\n\n                        # ignore action with unknown parameter type\n                        raise IgnoreActionException(f\"Parameter {name} of action {method_name}\"\n                                                    f\" has unknown type {ttype}.\")\n\n                if name == \"return\":\n                    data.returns = param_type.type_name()\n                    continue\n\n                args = ActionParameterMeta(name=name, type=param_type.type_name())\n                try:\n                    param_type.meta(args, method_def, method_tree)\n                except ParameterPluginException as e:\n                    # TODO log exception\n                    raise IgnoreActionException(e)\n\n                if name in type_def.DYNAMIC_PARAMS:\n                    args.dynamic_value = True\n                    dvp = type_def.DYNAMIC_PARAMS[name][1]\n                    if dvp:\n                        args.dynamic_value_parents = dvp\n\n                def_val: Any = signature.parameters[name].default\n                if def_val is not inspect.Parameter.empty:\n                    args.default_value = def_val\n\n                try:\n                    args.description = doc[\"params\"][name].strip()\n                except KeyError:\n                    pass\n\n                data.parameters.append(args)\n\n        except IgnoreActionException as e:\n            data.disabled = True\n            data.problem = str(e)\n            # TODO log exception\n\n        ret.append(data)\n\n    return ret\n", "rewrite": "ReplaceText(target='nodeTypeStr' @(141,57)->(141,65))", "error_line": 18, "has_bug": true, "code_full": "import inspect\nfrom dataclasses import dataclass, field\nfrom typing import (Any, Dict, Generic, List, Optional, Type, Union,\n                    get_type_hints)\n\nimport horast\n\n\nclass IgnoreActionException(Exception):\n    pass\n\nclass ParameterPluginException(Exception):\n    pass\n\n@dataclass\nclass ActionMetadata:\n\n    free: bool = False\n    blocking: bool = False\n    composite: bool = False\n    blackbox: bool = False\n    cancellable: bool = field(init=False, default=False)\n\n@dataclass\nclass ObjectAction:\n\n    name: str\n    description: Optional[str] = None\n    parameters: List[Any] = []\n    meta: ActionMetadata = field(default_factory=ActionMetadata)\n    origins: Optional[str] = None\n    returns: Optional[str] = None\n    disabled: bool = False\n    problem: Optional[str] = None\n    \nclass Service():\n    CANCEL_MAPPING: Dict = {}\n    DYNAMIC_PARAMS: Dict = {}\n    __bases__: List = []\n\n\nParameterPlugin = Any\nObjectActions = List[ObjectAction]\nActionParameterMeta: Any\n\ndef find_function(name: str, tree: Any) -> Any:\n    return None\n\ndef parse_docstring(docstring: Optional[str]) -> Dict[str, str]:\n    return {}\n\ndef object_actions(plugins: Dict[Type, Type[ParameterPlugin]], type_def: Union[Type, Service],\n                   source: str) -> ObjectActions:\n\n    ret: ObjectActions = []\n    tree: Any = horast.parse(source)\n\n    # ...inspect.ismethod does not work on un-initialized classes\n    for method_name, method_def in inspect.getmembers(type_def, predicate=inspect.isfunction):\n\n        # TODO check also if the method has 'action' decorator (ast needed)\n        if not hasattr(method_def, \"__action__\"):\n            continue\n\n        # action from ancestor, will be copied later (only if the action was not overridden)\n        base_cls_def: Any = type_def.__bases__[0]\n        if hasattr(base_cls_def, method_name) and getattr(base_cls_def, method_name) == method_def:\n            continue\n\n        meta: ActionMetadata = method_def.__action__\n\n        data: ObjectAction = ObjectAction(name=method_name, meta=meta)\n\n        if method_def in type_def.CANCEL_MAPPING:\n            meta.cancellable = True\n\n        doc: Dict = parse_docstring(method_def.__doc__)\n        doc_short: Optional[str] = doc[\"short_description\"]\n        if doc_short:\n            data.description = doc_short\n\n        signature: Any = inspect.signature(method_def)\n\n        method_tree: Any = find_function(method_name, tree)\n\n        try:\n            for name, ttype in get_type_hints(method_def).items():\n\n                try:\n                    param_type: Any = plugins[ttype]\n                except KeyError:\n                    for k, v in plugins.items():\n                        if not v.EXACT_TYPE and inspect.isclass(ttype) and issubclass(ttype, k):\n                            param_type = v\n                            break\n                    else:\n                        if name == \"return\" and ttype == type(None):  # noqa: E721\n                            # ...just ignore NoneType for returns\n                            continue\n\n                        # ignore action with unknown parameter type\n                        raise IgnoreActionException(f\"Parameter {name} of action {method_name}\"\n                                                    f\" has unknown type {ttype}.\")\n\n                if name == \"return\":\n                    data.returns = param_type.type_name()\n                    continue\n\n                args = ActionParameterMeta(name=name, type=param_type.type_name())\n                try:\n                    param_type.meta(args, method_def, method_tree)\n                except ParameterPluginException as e:\n                    # TODO log exception\n                    raise IgnoreActionException(e)\n\n                if name in type_def.DYNAMIC_PARAMS:\n                    args.dynamic_value = True\n                    dvp = type_def.DYNAMIC_PARAMS[name][1]\n                    if dvp:\n                        args.dynamic_value_parents = dvp\n\n                def_val: Any = signature.parameters[name].default\n                if def_val is not inspect.Parameter.empty:\n                    args.default_value = def_val\n\n                try:\n                    args.description = doc[\"params\"][name].strip()\n                except KeyError:\n                    pass\n\n                data.parameters.append(args)\n\n        except IgnoreActionException as e:\n            data.disabled = True\n            data.problem = str(e)\n            # TODO log exception\n\n        ret.append(data)\n\n    return ret\n", "error_location_char": [924, 934], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def setAutoscaledNodeTypes(", "self", ",", "nodeTypes", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Set node types, shapes and spot bids. Preemptable nodes will have the form \"type:spotBid\".\\n    :param nodeTypes: A list of node types\\n    '", "#NEWLINE#", "self", ".", "_spotBidsMap", "=", "{", "}", "#NEWLINE#", "self", ".", "nodeShapes", "=", "[", "]", "#NEWLINE#", "self", ".", "nodeTypes", "=", "[", "]", "#NEWLINE#", "for", "nodeTypeStr", "in", "nodeTypes", ":", "#NEWLINE#", "#INDENT#", "nodeBidTuple", "=", "nodeTypeStr", ".", "split", "(", "':'", ")", "#NEWLINE#", "if", "(", "len", "(", "nodeBidTuple", ")", "==", "2", ")", ":", "#NEWLINE#", "#INDENT#", "(", "nodeType", ",", "bid", ")", "=", "nodeBidTuple", "#NEWLINE#", "self", ".", "nodeTypes", ".", "append", "(", "nodeType", ")", "#NEWLINE#", "self", ".", "nodeShapes", ".", "append", "(", "self", ".", "getNodeShape", "(", "nodeType", ",", "preemptable", "=", "True", ")", ")", "#NEWLINE#", "self", ".", "_spotBidsMap", "[", "nodeType", "]", "=", "bid", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "self", ".", "nodeTypes", ".", "append", "(", "nodeTypeStr", ")", "#NEWLINE#", "self", ".", "nodeShapes", ".", "append", "(", "self", ".", "getNodeShape", "(", "nodeType", ",", "preemptable", "=", "False", ")", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [8, 9, 7, "enum_FIELD"], [10, 15, 7, "enum_FIELD"], [17, 22, 7, "enum_FIELD"], [24, 29, 7, "enum_FIELD"], [34, 33, 7, "enum_FIELD"], [34, 35, 7, "enum_FIELD"], [12, 11, 7, "enum_FIELD"], [19, 18, 7, "enum_FIELD"], [26, 25, 7, "enum_FIELD"], [38, 44, 7, "enum_FIELD"], [57, 54, 7, "enum_FIELD"], [44, 42, 7, "enum_FIELD"], [54, 51, 7, "enum_FIELD"], [59, 66, 7, "enum_FIELD"], [67, 73, 7, "enum_FIELD"], [76, 82, 7, "enum_FIELD"], [94, 102, 7, "enum_FIELD"], [108, 114, 7, "enum_FIELD"], [117, 123, 7, "enum_FIELD"], [42, 41, 7, "enum_FIELD"], [51, 50, 7, "enum_FIELD"], [73, 71, 7, "enum_FIELD"], [82, 80, 7, "enum_FIELD"], [98, 96, 7, "enum_FIELD"], [98, 99, 7, "enum_FIELD"], [114, 112, 7, "enum_FIELD"], [123, 121, 7, "enum_FIELD"], [71, 69, 7, "enum_FIELD"], [80, 78, 7, "enum_FIELD"], [88, 84, 7, "enum_FIELD"], [96, 95, 7, "enum_FIELD"], [112, 110, 7, "enum_FIELD"], [121, 119, 7, "enum_FIELD"], [129, 125, 7, "enum_FIELD"], [69, 68, 7, "enum_FIELD"], [78, 77, 7, "enum_FIELD"], [84, 83, 7, "enum_FIELD"], [89, 91, 7, "enum_FIELD"], [110, 109, 7, "enum_FIELD"], [119, 118, 7, "enum_FIELD"], [125, 124, 7, "enum_FIELD"], [130, 132, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [11, 2, 10, "enum_LAST_LEXICAL_USE"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [18, 11, 10, "enum_LAST_LEXICAL_USE"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [25, 18, 10, "enum_LAST_LEXICAL_USE"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [35, 4, 10, "enum_LAST_LEXICAL_USE"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [41, 33, 10, "enum_LAST_LEXICAL_USE"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [52, 39, 10, "enum_LAST_LEXICAL_USE"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [66, 52, 10, "enum_LAST_LEXICAL_USE"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [68, 25, 10, "enum_LAST_LEXICAL_USE"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [74, 61, 10, "enum_LAST_LEXICAL_USE"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [77, 68, 10, "enum_LAST_LEXICAL_USE"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [83, 77, 10, "enum_LAST_LEXICAL_USE"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [87, 74, 10, "enum_LAST_LEXICAL_USE"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [95, 83, 10, "enum_LAST_LEXICAL_USE"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [99, 87, 10, "enum_LAST_LEXICAL_USE"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [102, 63, 10, "enum_LAST_LEXICAL_USE"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 108, 9, "enum_NEXT_SYNTAX"], [109, 95, 10, "enum_LAST_LEXICAL_USE"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [115, 41, 10, "enum_LAST_LEXICAL_USE"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [118, 109, 10, "enum_LAST_LEXICAL_USE"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [124, 118, 10, "enum_LAST_LEXICAL_USE"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [128, 99, 10, "enum_LAST_LEXICAL_USE"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [3, 8, 1, "enum_CFG_NEXT"], [8, 10, 1, "enum_CFG_NEXT"], [10, 17, 1, "enum_CFG_NEXT"], [17, 24, 1, "enum_CFG_NEXT"], [24, 35, 1, "enum_CFG_NEXT"], [35, 33, 1, "enum_CFG_NEXT"], [33, 38, 1, "enum_CFG_NEXT"], [38, 54, 1, "enum_CFG_NEXT"], [54, 108, 1, "enum_CFG_NEXT"], [54, 59, 1, "enum_CFG_NEXT"], [59, 67, 1, "enum_CFG_NEXT"], [67, 76, 1, "enum_CFG_NEXT"], [76, 94, 1, "enum_CFG_NEXT"], [94, 33, 1, "enum_CFG_NEXT"], [108, 117, 1, "enum_CFG_NEXT"], [117, 33, 1, "enum_CFG_NEXT"], [11, 2, 3, "enum_LAST_WRITE"], [18, 11, 2, "enum_LAST_READ"], [18, 2, 3, "enum_LAST_WRITE"], [25, 18, 2, "enum_LAST_READ"], [25, 2, 3, "enum_LAST_WRITE"], [35, 4, 3, "enum_LAST_WRITE"], [33, 115, 2, "enum_LAST_READ"], [33, 41, 2, "enum_LAST_READ"], [33, 33, 3, "enum_LAST_WRITE"], [41, 115, 2, "enum_LAST_READ"], [41, 41, 2, "enum_LAST_READ"], [41, 33, 3, "enum_LAST_WRITE"], [39, 66, 2, "enum_LAST_READ"], [39, 52, 2, "enum_LAST_READ"], [39, 39, 3, "enum_LAST_WRITE"], [50, 50, 2, "enum_LAST_READ"], [52, 66, 2, "enum_LAST_READ"], [52, 52, 2, "enum_LAST_READ"], [52, 39, 3, "enum_LAST_WRITE"], [66, 52, 2, "enum_LAST_READ"], [66, 39, 3, "enum_LAST_WRITE"], [61, 99, 2, "enum_LAST_READ"], [61, 128, 2, "enum_LAST_READ"], [61, 61, 3, "enum_LAST_WRITE"], [63, 102, 2, "enum_LAST_READ"], [63, 63, 3, "enum_LAST_WRITE"], [68, 124, 2, "enum_LAST_READ"], [68, 25, 2, "enum_LAST_READ"], [68, 95, 2, "enum_LAST_READ"], [68, 2, 3, "enum_LAST_WRITE"], [74, 99, 2, "enum_LAST_READ"], [74, 128, 2, "enum_LAST_READ"], [74, 61, 3, "enum_LAST_WRITE"], [77, 68, 2, "enum_LAST_READ"], [77, 2, 3, "enum_LAST_WRITE"], [83, 77, 2, "enum_LAST_READ"], [83, 2, 3, "enum_LAST_WRITE"], [87, 74, 2, "enum_LAST_READ"], [87, 61, 3, "enum_LAST_WRITE"], [102, 102, 2, "enum_LAST_READ"], [102, 63, 3, "enum_LAST_WRITE"], [95, 83, 2, "enum_LAST_READ"], [95, 2, 3, "enum_LAST_WRITE"], [99, 87, 2, "enum_LAST_READ"], [99, 61, 3, "enum_LAST_WRITE"], [109, 124, 2, "enum_LAST_READ"], [109, 25, 2, "enum_LAST_READ"], [109, 95, 2, "enum_LAST_READ"], [109, 2, 3, "enum_LAST_WRITE"], [115, 41, 2, "enum_LAST_READ"], [115, 33, 3, "enum_LAST_WRITE"], [118, 109, 2, "enum_LAST_READ"], [118, 2, 3, "enum_LAST_WRITE"], [124, 118, 2, "enum_LAST_READ"], [124, 2, 3, "enum_LAST_WRITE"], [128, 99, 2, "enum_LAST_READ"], [128, 128, 2, "enum_LAST_READ"], [128, 61, 3, "enum_LAST_WRITE"], [39, 41, 4, "enum_COMPUTED_FROM"], [62, 66, 4, "enum_COMPUTED_FROM"], [98, 102, 4, "enum_COMPUTED_FROM"]], "error_location": 128, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/ionox0/toil.git", "old_path": "src/toil/provisioners/abstractProvisioner.py", "hash": "f5054aca67788f976c72b1e3f42334afe3a1dfaa", "code": "def setAutoscaledNodeTypes(self, nodeTypes: List[str]):\n        \"\"\"\n        Set node types, shapes and spot bids. Preemptable nodes will have the form \"type:spotBid\".\n        :param nodeTypes: A list of node types\n        \"\"\"\n        self._spotBidsMap: Dict[str, str] = {}\n        self.nodeShapes: List = []\n        self.nodeTypes: List[str] = []\n        for nodeTypeStr in nodeTypes:\n            nodeBidTuple: List[str] = nodeTypeStr.split(\":\")\n            if len(nodeBidTuple) == 2:\n                #This is a preemptable node type, with a spot bid\n                nodeType, bid = nodeBidTuple\n                self.nodeTypes.append(nodeType)\n                self.nodeShapes.append(self.getNodeShape(nodeType, preemptable=True))\n                self._spotBidsMap[nodeType] = bid\n            else:\n                self.nodeTypes.append(nodeTypeStr)\n                self.nodeShapes.append(self.getNodeShape(nodeTypeStr, preemptable=False))\n", "rewrite": "ReplaceText(target='nodeTypeStr' @(141,57)->(141,65))", "error_line": 18, "has_bug": true, "code_full": "from typing import Any, Dict, List\n\n\nclass Class:\n    def getNodeShape(self, nodeType: str, preemptable: bool) -> Any:\n         pass\n    \n    def setAutoscaledNodeTypes(self, nodeTypes: List[str]):\n            \"\"\"\n            Set node types, shapes and spot bids. Preemptable nodes will have the form \"type:spotBid\".\n            :param nodeTypes: A list of node types\n            \"\"\"\n            self._spotBidsMap: Dict[str, str] = {}\n            self.nodeShapes: List = []\n            self.nodeTypes: List[str] = []\n            for nodeTypeStr in nodeTypes:\n                nodeBidTuple: List[str] = nodeTypeStr.split(\":\")\n                if len(nodeBidTuple) == 2:\n                    #This is a preemptable node type, with a spot bid\n                    nodeType, bid = nodeBidTuple\n                    self.nodeTypes.append(nodeType)\n                    self.nodeShapes.append(self.getNodeShape(nodeType, preemptable=True))\n                    self._spotBidsMap[nodeType] = bid\n                else:\n                    self.nodeTypes.append(nodeTypeStr)\n                    self.nodeShapes.append(self.getNodeShape(nodeTypeStr, preemptable=False))\n", "error_location_char": [906, 914], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def _prepare_conductor_manifest(", "self", ",", "base_path", ",", "base_image", ",", "temp_dir", ",", "tarball", ")", ":", "#NEWLINE#", "#INDENT#", "source_dir", "=", "os", ".", "path", ".", "normpath", "(", "base_path", ")", "#NEWLINE#", "for", "filename", "in", "[", "'ansible.cfg'", ",", "'ansible-requirements.txt'", ",", "'requirements.yml'", "]", ":", "#NEWLINE#", "#INDENT#", "file_path", "=", "os", ".", "path", ".", "join", "(", "source_dir", ",", "filename", ")", "#NEWLINE#", "if", "os", ".", "path", ".", "exists", "(", "filename", ")", ":", "#NEWLINE#", "#INDENT#", "tarball", ".", "add", "(", "file_path", ",", "arcname", "=", "os", ".", "path", ".", "join", "(", "'build-src'", ",", "filename", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "open", "(", "os", ".", "path", ".", "join", "(", "temp_dir", ",", "'.touch'", ")", ",", "'w'", ")", "#NEWLINE#", "tarball", ".", "add", "(", "os", ".", "path", ".", "join", "(", "temp_dir", ",", "'.touch'", ")", ",", "arcname", "=", "'build-src/.touch'", ")", "#NEWLINE#", "prebaked", "=", "(", "base_image", "in", "reduce", "(", "(", "lambda", "x", ",", "y", ":", "(", "(", "x", "+", "[", "y", "[", "0", "]", "]", ")", "+", "y", "[", "1", "]", ")", ")", ",", "PREBAKED_DISTROS", ".", "items", "(", ")", ",", "[", "]", ")", ")", "#NEWLINE#", "if", "prebaked", ":", "#NEWLINE#", "#INDENT#", "base_image", "=", "[", "k", "for", "(", "k", ",", "v", ")", "in", "PREBAKED_DISTROS", ".", "items", "(", ")", "if", "(", "base_image", "in", "(", "[", "k", "]", "+", "v", ")", ")", "]", "[", "0", "]", "#NEWLINE#", "conductor_base", "=", "(", "'container-conductor-%s:%s'", "%", "(", "base_image", ".", "replace", "(", "':'", ",", "'-'", ")", ",", "container", ".", "__version__", ")", ")", "#NEWLINE#", "if", "(", "not", "self", ".", "get_image_id_by_tag", "(", "conductor_base", ")", ")", ":", "#NEWLINE#", "#INDENT#", "conductor_base", "=", "(", "'ansible/%s'", "%", "base_image", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "conductor_base", "=", "(", "'container-conductor-%s:%s'", "%", "(", "base_image", ".", "replace", "(", "':'", ",", "'-'", ")", ",", "container", ".", "__version__", ")", ")", "#NEWLINE#", "#UNINDENT#", "utils", ".", "jinja_render_to_temp", "(", "TEMPLATES_PATH", ",", "'conductor-local-dockerfile.j2'", ",", "temp_dir", ",", "'Dockerfile'", ",", "conductor_base", "=", "conductor_base", ",", "docker_version", "=", "DOCKER_VERSION", ")", "#NEWLINE#", "tarball", ".", "add", "(", "os", ".", "path", ".", "join", "(", "temp_dir", ",", "'Dockerfile'", ")", ",", "arcname", "=", "'Dockerfile'", ")"], "edges": [[1, 5, 7, "enum_FIELD"], [14, 22, 7, "enum_FIELD"], [28, 27, 7, "enum_FIELD"], [28, 31, 7, "enum_FIELD"], [85, 98, 7, "enum_FIELD"], [101, 116, 7, "enum_FIELD"], [121, 126, 7, "enum_FIELD"], [167, 166, 7, "enum_FIELD"], [272, 282, 7, "enum_FIELD"], [293, 308, 7, "enum_FIELD"], [22, 20, 7, "enum_FIELD"], [38, 48, 7, "enum_FIELD"], [52, 58, 7, "enum_FIELD"], [98, 86, 7, "enum_FIELD"], [116, 103, 7, "enum_FIELD"], [126, 125, 7, "enum_FIELD"], [169, 199, 7, "enum_FIELD"], [202, 207, 7, "enum_FIELD"], [224, 226, 7, "enum_FIELD"], [250, 255, 7, "enum_FIELD"], [282, 274, 7, "enum_FIELD"], [308, 295, 7, "enum_FIELD"], [20, 18, 7, "enum_FIELD"], [48, 44, 7, "enum_FIELD"], [58, 56, 7, "enum_FIELD"], [63, 69, 7, "enum_FIELD"], [95, 91, 7, "enum_FIELD"], [103, 102, 7, "enum_FIELD"], [113, 109, 7, "enum_FIELD"], [117, 119, 7, "enum_FIELD"], [153, 127, 7, "enum_FIELD"], [199, 172, 7, "enum_FIELD"], [199, 200, 7, "enum_FIELD"], [207, 206, 7, "enum_FIELD"], [207, 217, 7, "enum_FIELD"], [226, 230, 7, "enum_FIELD"], [236, 241, 7, "enum_FIELD"], [255, 254, 7, "enum_FIELD"], [255, 265, 7, "enum_FIELD"], [274, 273, 7, "enum_FIELD"], [285, 287, 7, "enum_FIELD"], [289, 291, 7, "enum_FIELD"], [295, 294, 7, "enum_FIELD"], [305, 301, 7, "enum_FIELD"], [309, 311, 7, "enum_FIELD"], [18, 17, 7, "enum_FIELD"], [44, 42, 7, "enum_FIELD"], [56, 54, 7, "enum_FIELD"], [69, 65, 7, "enum_FIELD"], [91, 89, 7, "enum_FIELD"], [109, 107, 7, "enum_FIELD"], [130, 132, 7, "enum_FIELD"], [130, 146, 7, "enum_FIELD"], [157, 155, 7, "enum_FIELD"], [172, 173, 7, "enum_FIELD"], [230, 228, 7, "enum_FIELD"], [241, 240, 7, "enum_FIELD"], [241, 242, 7, "enum_FIELD"], [301, 299, 7, "enum_FIELD"], [42, 41, 7, "enum_FIELD"], [54, 53, 7, "enum_FIELD"], [65, 64, 7, "enum_FIELD"], [70, 79, 7, "enum_FIELD"], [89, 88, 7, "enum_FIELD"], [107, 106, 7, "enum_FIELD"], [146, 138, 7, "enum_FIELD"], [146, 148, 7, "enum_FIELD"], [155, 154, 7, "enum_FIELD"], [180, 177, 7, "enum_FIELD"], [180, 184, 7, "enum_FIELD"], [214, 210, 7, "enum_FIELD"], [219, 218, 7, "enum_FIELD"], [228, 227, 7, "enum_FIELD"], [262, 258, 7, "enum_FIELD"], [267, 266, 7, "enum_FIELD"], [299, 298, 7, "enum_FIELD"], [79, 75, 7, "enum_FIELD"], [138, 137, 7, "enum_FIELD"], [138, 139, 7, "enum_FIELD"], [148, 147, 7, "enum_FIELD"], [148, 149, 7, "enum_FIELD"], [184, 182, 7, "enum_FIELD"], [189, 188, 7, "enum_FIELD"], [210, 209, 7, "enum_FIELD"], [258, 257, 7, "enum_FIELD"], [75, 73, 7, "enum_FIELD"], [182, 181, 7, "enum_FIELD"], [194, 191, 7, "enum_FIELD"], [194, 195, 7, "enum_FIELD"], [73, 72, 7, "enum_FIELD"], [141, 140, 7, "enum_FIELD"], [141, 142, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [23, 4, 10, "enum_LAST_LEXICAL_USE"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [41, 17, 10, "enum_LAST_LEXICAL_USE"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [47, 15, 10, "enum_LAST_LEXICAL_USE"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [49, 27, 10, "enum_LAST_LEXICAL_USE"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 52, 9, "enum_NEXT_SYNTAX"], [53, 41, 10, "enum_LAST_LEXICAL_USE"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [59, 49, 10, "enum_LAST_LEXICAL_USE"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 63, 9, "enum_NEXT_SYNTAX"], [64, 10, 10, "enum_LAST_LEXICAL_USE"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [68, 39, 10, "enum_LAST_LEXICAL_USE"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [72, 53, 10, "enum_LAST_LEXICAL_USE"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [80, 59, 10, "enum_LAST_LEXICAL_USE"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [88, 72, 10, "enum_LAST_LEXICAL_USE"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [94, 8, 10, "enum_LAST_LEXICAL_USE"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [102, 64, 10, "enum_LAST_LEXICAL_USE"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [106, 88, 10, "enum_LAST_LEXICAL_USE"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [112, 94, 10, "enum_LAST_LEXICAL_USE"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [125, 6, 10, "enum_LAST_LEXICAL_USE"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [137, 131, 10, "enum_LAST_LEXICAL_USE"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [140, 133, 10, "enum_LAST_LEXICAL_USE"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [147, 140, 10, "enum_LAST_LEXICAL_USE"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 165, 9, "enum_NEXT_SYNTAX"], [166, 122, 10, "enum_LAST_LEXICAL_USE"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 169, 9, "enum_NEXT_SYNTAX"], [170, 125, 10, "enum_LAST_LEXICAL_USE"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [176, 173, 10, "enum_LAST_LEXICAL_USE"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 180, 9, "enum_NEXT_SYNTAX"], [181, 154, 10, "enum_LAST_LEXICAL_USE"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 184, 9, "enum_NEXT_SYNTAX"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [188, 170, 10, "enum_LAST_LEXICAL_USE"], [187, 188, 9, "enum_NEXT_SYNTAX"], [188, 189, 9, "enum_NEXT_SYNTAX"], [189, 190, 9, "enum_NEXT_SYNTAX"], [190, 191, 9, "enum_NEXT_SYNTAX"], [192, 176, 10, "enum_LAST_LEXICAL_USE"], [191, 192, 9, "enum_NEXT_SYNTAX"], [192, 193, 9, "enum_NEXT_SYNTAX"], [193, 194, 9, "enum_NEXT_SYNTAX"], [195, 178, 10, "enum_LAST_LEXICAL_USE"], [194, 195, 9, "enum_NEXT_SYNTAX"], [195, 196, 9, "enum_NEXT_SYNTAX"], [196, 197, 9, "enum_NEXT_SYNTAX"], [197, 198, 9, "enum_NEXT_SYNTAX"], [198, 199, 9, "enum_NEXT_SYNTAX"], [199, 200, 9, "enum_NEXT_SYNTAX"], [200, 201, 9, "enum_NEXT_SYNTAX"], [201, 202, 9, "enum_NEXT_SYNTAX"], [202, 203, 9, "enum_NEXT_SYNTAX"], [203, 204, 9, "enum_NEXT_SYNTAX"], [204, 205, 9, "enum_NEXT_SYNTAX"], [205, 206, 9, "enum_NEXT_SYNTAX"], [206, 207, 9, "enum_NEXT_SYNTAX"], [207, 208, 9, "enum_NEXT_SYNTAX"], [209, 188, 10, "enum_LAST_LEXICAL_USE"], [208, 209, 9, "enum_NEXT_SYNTAX"], [209, 210, 9, "enum_NEXT_SYNTAX"], [210, 211, 9, "enum_NEXT_SYNTAX"], [211, 212, 9, "enum_NEXT_SYNTAX"], [212, 213, 9, "enum_NEXT_SYNTAX"], [213, 214, 9, "enum_NEXT_SYNTAX"], [214, 215, 9, "enum_NEXT_SYNTAX"], [215, 216, 9, "enum_NEXT_SYNTAX"], [216, 217, 9, "enum_NEXT_SYNTAX"], [217, 218, 9, "enum_NEXT_SYNTAX"], [218, 219, 9, "enum_NEXT_SYNTAX"], [219, 220, 9, "enum_NEXT_SYNTAX"], [220, 221, 9, "enum_NEXT_SYNTAX"], [221, 222, 9, "enum_NEXT_SYNTAX"], [222, 224, 9, "enum_NEXT_SYNTAX"], [224, 225, 9, "enum_NEXT_SYNTAX"], [225, 226, 9, "enum_NEXT_SYNTAX"], [227, 2, 10, "enum_LAST_LEXICAL_USE"], [226, 227, 9, "enum_NEXT_SYNTAX"], [227, 228, 9, "enum_NEXT_SYNTAX"], [228, 229, 9, "enum_NEXT_SYNTAX"], [229, 230, 9, "enum_NEXT_SYNTAX"], [231, 203, 10, "enum_LAST_LEXICAL_USE"], [230, 231, 9, "enum_NEXT_SYNTAX"], [231, 232, 9, "enum_NEXT_SYNTAX"], [232, 233, 9, "enum_NEXT_SYNTAX"], [233, 234, 9, "enum_NEXT_SYNTAX"], [234, 236, 9, "enum_NEXT_SYNTAX"], [237, 231, 10, "enum_LAST_LEXICAL_USE"], [236, 237, 9, "enum_NEXT_SYNTAX"], [237, 238, 9, "enum_NEXT_SYNTAX"], [238, 239, 9, "enum_NEXT_SYNTAX"], [239, 240, 9, "enum_NEXT_SYNTAX"], [240, 241, 9, "enum_NEXT_SYNTAX"], [242, 209, 10, "enum_LAST_LEXICAL_USE"], [241, 242, 9, "enum_NEXT_SYNTAX"], [242, 243, 9, "enum_NEXT_SYNTAX"], [243, 247, 9, "enum_NEXT_SYNTAX"], [247, 248, 9, "enum_NEXT_SYNTAX"], [248, 250, 9, "enum_NEXT_SYNTAX"], [251, 237, 10, "enum_LAST_LEXICAL_USE"], [250, 251, 9, "enum_NEXT_SYNTAX"], [251, 252, 9, "enum_NEXT_SYNTAX"], [252, 253, 9, "enum_NEXT_SYNTAX"], [253, 254, 9, "enum_NEXT_SYNTAX"], [254, 255, 9, "enum_NEXT_SYNTAX"], [255, 256, 9, "enum_NEXT_SYNTAX"], [257, 242, 10, "enum_LAST_LEXICAL_USE"], [256, 257, 9, "enum_NEXT_SYNTAX"], [257, 258, 9, "enum_NEXT_SYNTAX"], [258, 259, 9, "enum_NEXT_SYNTAX"], [259, 260, 9, "enum_NEXT_SYNTAX"], [260, 261, 9, "enum_NEXT_SYNTAX"], [261, 262, 9, "enum_NEXT_SYNTAX"], [262, 263, 9, "enum_NEXT_SYNTAX"], [263, 264, 9, "enum_NEXT_SYNTAX"], [264, 265, 9, "enum_NEXT_SYNTAX"], [266, 218, 10, "enum_LAST_LEXICAL_USE"], [265, 266, 9, "enum_NEXT_SYNTAX"], [266, 267, 9, "enum_NEXT_SYNTAX"], [267, 268, 9, "enum_NEXT_SYNTAX"], [268, 269, 9, "enum_NEXT_SYNTAX"], [269, 270, 9, "enum_NEXT_SYNTAX"], [270, 272, 9, "enum_NEXT_SYNTAX"], [272, 273, 9, "enum_NEXT_SYNTAX"], [273, 274, 9, "enum_NEXT_SYNTAX"], [274, 275, 9, "enum_NEXT_SYNTAX"], [275, 276, 9, "enum_NEXT_SYNTAX"], [276, 277, 9, "enum_NEXT_SYNTAX"], [277, 278, 9, "enum_NEXT_SYNTAX"], [278, 279, 9, "enum_NEXT_SYNTAX"], [279, 280, 9, "enum_NEXT_SYNTAX"], [281, 112, 10, "enum_LAST_LEXICAL_USE"], [280, 281, 9, "enum_NEXT_SYNTAX"], [281, 282, 9, "enum_NEXT_SYNTAX"], [282, 283, 9, "enum_NEXT_SYNTAX"], [283, 284, 9, "enum_NEXT_SYNTAX"], [284, 285, 9, "enum_NEXT_SYNTAX"], [285, 286, 9, "enum_NEXT_SYNTAX"], [287, 251, 10, "enum_LAST_LEXICAL_USE"], [286, 287, 9, "enum_NEXT_SYNTAX"], [287, 288, 9, "enum_NEXT_SYNTAX"], [288, 289, 9, "enum_NEXT_SYNTAX"], [289, 290, 9, "enum_NEXT_SYNTAX"], [290, 291, 9, "enum_NEXT_SYNTAX"], [291, 292, 9, "enum_NEXT_SYNTAX"], [292, 293, 9, "enum_NEXT_SYNTAX"], [294, 102, 10, "enum_LAST_LEXICAL_USE"], [293, 294, 9, "enum_NEXT_SYNTAX"], [294, 295, 9, "enum_NEXT_SYNTAX"], [295, 296, 9, "enum_NEXT_SYNTAX"], [296, 297, 9, "enum_NEXT_SYNTAX"], [298, 106, 10, "enum_LAST_LEXICAL_USE"], [297, 298, 9, "enum_NEXT_SYNTAX"], [298, 299, 9, "enum_NEXT_SYNTAX"], [299, 300, 9, "enum_NEXT_SYNTAX"], [300, 301, 9, "enum_NEXT_SYNTAX"], [301, 302, 9, "enum_NEXT_SYNTAX"], [302, 303, 9, "enum_NEXT_SYNTAX"], [304, 281, 10, "enum_LAST_LEXICAL_USE"], [303, 304, 9, "enum_NEXT_SYNTAX"], [304, 305, 9, "enum_NEXT_SYNTAX"], [305, 306, 9, "enum_NEXT_SYNTAX"], [306, 307, 9, "enum_NEXT_SYNTAX"], [307, 308, 9, "enum_NEXT_SYNTAX"], [308, 309, 9, "enum_NEXT_SYNTAX"], [309, 310, 9, "enum_NEXT_SYNTAX"], [310, 311, 9, "enum_NEXT_SYNTAX"], [311, 312, 9, "enum_NEXT_SYNTAX"], [5, 14, 1, "enum_CFG_NEXT"], [14, 31, 1, "enum_CFG_NEXT"], [31, 27, 1, "enum_CFG_NEXT"], [27, 85, 1, "enum_CFG_NEXT"], [27, 38, 1, "enum_CFG_NEXT"], [38, 58, 1, "enum_CFG_NEXT"], [58, 27, 1, "enum_CFG_NEXT"], [58, 63, 1, "enum_CFG_NEXT"], [63, 27, 1, "enum_CFG_NEXT"], [85, 101, 1, "enum_CFG_NEXT"], [101, 121, 1, "enum_CFG_NEXT"], [121, 166, 1, "enum_CFG_NEXT"], [166, 250, 1, "enum_CFG_NEXT"], [166, 169, 1, "enum_CFG_NEXT"], [169, 202, 1, "enum_CFG_NEXT"], [202, 226, 1, "enum_CFG_NEXT"], [226, 272, 1, "enum_CFG_NEXT"], [226, 236, 1, "enum_CFG_NEXT"], [236, 272, 1, "enum_CFG_NEXT"], [250, 272, 1, "enum_CFG_NEXT"], [272, 293, 1, "enum_CFG_NEXT"], [23, 4, 3, "enum_LAST_WRITE"], [27, 59, 2, "enum_LAST_READ"], [27, 80, 2, "enum_LAST_READ"], [27, 27, 3, "enum_LAST_WRITE"], [41, 17, 2, "enum_LAST_READ"], [41, 53, 2, "enum_LAST_READ"], [41, 72, 2, "enum_LAST_READ"], [47, 47, 2, "enum_LAST_READ"], [47, 15, 3, "enum_LAST_WRITE"], [49, 59, 2, "enum_LAST_READ"], [49, 80, 2, "enum_LAST_READ"], [49, 27, 3, "enum_LAST_WRITE"], [39, 68, 2, "enum_LAST_READ"], [39, 39, 3, "enum_LAST_WRITE"], [53, 41, 2, "enum_LAST_READ"], [59, 49, 2, "enum_LAST_READ"], [59, 27, 3, "enum_LAST_WRITE"], [64, 64, 2, "enum_LAST_READ"], [64, 10, 3, "enum_LAST_WRITE"], [68, 68, 2, "enum_LAST_READ"], [68, 39, 3, "enum_LAST_WRITE"], [72, 53, 2, "enum_LAST_READ"], [80, 59, 2, "enum_LAST_READ"], [80, 27, 3, "enum_LAST_WRITE"], [88, 17, 2, "enum_LAST_READ"], [88, 53, 2, "enum_LAST_READ"], [88, 72, 2, "enum_LAST_READ"], [94, 8, 3, "enum_LAST_WRITE"], [102, 64, 2, "enum_LAST_READ"], [102, 10, 3, "enum_LAST_WRITE"], [106, 88, 2, "enum_LAST_READ"], [112, 94, 2, "enum_LAST_READ"], [112, 8, 3, "enum_LAST_WRITE"], [125, 6, 3, "enum_LAST_WRITE"], [137, 131, 3, "enum_LAST_WRITE"], [140, 133, 3, "enum_LAST_WRITE"], [147, 140, 2, "enum_LAST_READ"], [147, 133, 3, "enum_LAST_WRITE"], [166, 122, 3, "enum_LAST_WRITE"], [176, 173, 2, "enum_LAST_READ"], [181, 154, 2, "enum_LAST_READ"], [188, 125, 2, "enum_LAST_READ"], [188, 6, 3, "enum_LAST_WRITE"], [192, 173, 2, "enum_LAST_READ"], [192, 176, 3, "enum_LAST_WRITE"], [195, 178, 3, "enum_LAST_WRITE"], [170, 188, 2, "enum_LAST_READ"], [170, 6, 3, "enum_LAST_WRITE"], [209, 188, 2, "enum_LAST_READ"], [209, 170, 3, "enum_LAST_WRITE"], [227, 2, 3, "enum_LAST_WRITE"], [231, 203, 3, "enum_LAST_WRITE"], [242, 209, 2, "enum_LAST_READ"], [242, 170, 3, "enum_LAST_WRITE"], [237, 231, 2, "enum_LAST_READ"], [237, 203, 3, "enum_LAST_WRITE"], [257, 125, 2, "enum_LAST_READ"], [257, 6, 3, "enum_LAST_WRITE"], [281, 112, 2, "enum_LAST_READ"], [281, 8, 3, "enum_LAST_WRITE"], [287, 231, 2, "enum_LAST_READ"], [287, 251, 3, "enum_LAST_WRITE"], [287, 237, 3, "enum_LAST_WRITE"], [287, 203, 3, "enum_LAST_WRITE"], [294, 102, 2, "enum_LAST_READ"], [294, 10, 3, "enum_LAST_WRITE"], [298, 106, 2, "enum_LAST_READ"], [304, 281, 2, "enum_LAST_READ"], [304, 8, 3, "enum_LAST_WRITE"], [15, 23, 4, "enum_COMPUTED_FROM"], [15, 17, 4, "enum_COMPUTED_FROM"], [122, 125, 4, "enum_COMPUTED_FROM"], [122, 127, 4, "enum_COMPUTED_FROM"], [122, 131, 4, "enum_COMPUTED_FROM"], [122, 133, 4, "enum_COMPUTED_FROM"], [122, 154, 4, "enum_COMPUTED_FROM"], [122, 137, 4, "enum_COMPUTED_FROM"], [122, 147, 4, "enum_COMPUTED_FROM"], [122, 140, 4, "enum_COMPUTED_FROM"], [39, 47, 4, "enum_COMPUTED_FROM"], [39, 49, 4, "enum_COMPUTED_FROM"], [39, 41, 4, "enum_COMPUTED_FROM"], [170, 173, 4, "enum_COMPUTED_FROM"], [170, 176, 4, "enum_COMPUTED_FROM"], [170, 178, 4, "enum_COMPUTED_FROM"], [170, 188, 4, "enum_COMPUTED_FROM"], [170, 181, 4, "enum_COMPUTED_FROM"], [170, 195, 4, "enum_COMPUTED_FROM"], [170, 192, 4, "enum_COMPUTED_FROM"], [203, 218, 4, "enum_COMPUTED_FROM"], [203, 209, 4, "enum_COMPUTED_FROM"], [251, 266, 4, "enum_COMPUTED_FROM"], [251, 257, 4, "enum_COMPUTED_FROM"], [237, 242, 4, "enum_COMPUTED_FROM"]], "error_location": 242, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/softasap/ansible-container.git", "old_path": "container/docker/engine.py", "hash": "3f46ae33bc3a1d2d529b2a4b29e4bc144cbccd77", "code": "def _prepare_conductor_manifest(self, base_path: str, base_image: str, temp_dir: str, tarball: Any):\n    source_dir: str = os.path.normpath(base_path)\n\n    for filename in ['ansible.cfg', 'ansible-requirements.txt',\n                    'requirements.yml']:\n        file_path: str = os.path.join(source_dir, filename)\n        if os.path.exists(filename):\n            tarball.add(file_path,\n                        arcname=os.path.join('build-src', filename))\n    # Make an empty file just to make sure the build-src dir has something\n    open(os.path.join(temp_dir, '.touch'), 'w')\n    tarball.add(os.path.join(temp_dir, '.touch'),\n                arcname='build-src/.touch')\n\n    prebaked: bool = base_image in reduce(lambda x, y: x + [y[0]] + y[1],\n                                    PREBAKED_DISTROS.items(), [])\n    if prebaked:\n        base_image: str = [k for k, v in PREBAKED_DISTROS.items()\n                        if base_image in [k] + v][0]\n        conductor_base: str = 'container-conductor-%s:%s' % (\n            base_image.replace(':', '-'),\n            container.__version__\n        )\n        if not self.get_image_id_by_tag(conductor_base):\n            conductor_base: str = 'ansible/%s' % base_image\n    else:\n        conductor_base: str = 'container-conductor-%s:%s' % (\n            base_image.replace(':', '-'),\n            container.__version__\n        )\n\n    utils.jinja_render_to_temp(TEMPLATES_PATH,\n                            'conductor-local-dockerfile.j2', temp_dir,\n                            'Dockerfile',\n                            conductor_base=conductor_base,\n                            docker_version=DOCKER_VERSION)\n    tarball.add(os.path.join(temp_dir, 'Dockerfile'),\n                arcname='Dockerfile')\n", "rewrite": "ReplaceText(target='conductor_base' @(940,48)->(940,58))", "error_line": 24, "has_bug": true, "code_full": "import os\nfrom functools import reduce\nfrom typing import Any, Dict, List\n\nimport container\nfrom container import utils\n\nPREBAKED_DISTROS: Dict[str, List[str]] = {}\nTEMPLATES_PATH: str = \"\"\nDOCKER_VERSION: str = \"\"\n\nclass Class:\n    def get_image_id_by_tag(self, conductor_base: str) -> bool:\n        return False\n\n    def _prepare_conductor_manifest(self, base_path: str, base_image: str, temp_dir: str, tarball: Any):\n        source_dir: str = os.path.normpath(base_path)\n\n        for filename in ['ansible.cfg', 'ansible-requirements.txt',\n                        'requirements.yml']:\n            file_path: str = os.path.join(source_dir, filename)\n            if os.path.exists(filename):\n                tarball.add(file_path,\n                            arcname=os.path.join('build-src', filename))\n        # Make an empty file just to make sure the build-src dir has something\n        open(os.path.join(temp_dir, '.touch'), 'w')\n        tarball.add(os.path.join(temp_dir, '.touch'),\n                    arcname='build-src/.touch')\n\n        prebaked: bool = base_image in reduce(lambda x, y: x + [y[0]] + y[1],\n                                        PREBAKED_DISTROS.items(), [])\n        if prebaked:\n            base_image: str = [k for k, v in PREBAKED_DISTROS.items()\n                            if base_image in [k] + v][0]\n            conductor_base: str = 'container-conductor-%s:%s' % (\n                base_image.replace(':', '-'),\n                container.__version__\n            )\n            if not self.get_image_id_by_tag(conductor_base):\n                conductor_base: str = 'ansible/%s' % base_image\n        else:\n            conductor_base: str = 'container-conductor-%s:%s' % (\n                base_image.replace(':', '-'),\n                container.__version__\n            )\n\n        utils.jinja_render_to_temp(TEMPLATES_PATH,\n                                'conductor-local-dockerfile.j2', temp_dir,\n                                'Dockerfile',\n                                conductor_base=conductor_base,\n                                docker_version=DOCKER_VERSION)\n        tarball.add(os.path.join(temp_dir, 'Dockerfile'),\n                    arcname='Dockerfile')\n", "error_location_char": [1206, 1216], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def draw_legend(", "shadow_tree", ",", "target_name", ",", "filename", ",", "colors", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "colors", "=", "adjust_colors", "(", "colors", ")", "#NEWLINE#", "n_classes", "=", "shadow_tree", ".", "nclasses", "(", ")", "#NEWLINE#", "class_values", "=", "shadow_tree", ".", "unique_target_values", "#NEWLINE#", "class_names", "=", "shadow_tree", ".", "class_names", "#NEWLINE#", "color_values", "=", "colors", "[", "'classes'", "]", "[", "n_classes", "]", "#NEWLINE#", "color_map", "=", "{", "v", ":", "color_values", "[", "i", "]", "for", "(", "i", ",", "v", ")", "in", "enumerate", "(", "class_values", ")", "}", "#NEWLINE#", "boxes", "=", "[", "]", "#NEWLINE#", "for", "(", "i", ",", "c", ")", "in", "enumerate", "(", "class_values", ")", ":", "#NEWLINE#", "#INDENT#", "box", "=", "patches", ".", "Rectangle", "(", "(", "0", ",", "0", ")", ",", "20", ",", "10", ",", "linewidth", "=", "0.4", ",", "edgecolor", "=", "colors", "[", "'rect_edge'", "]", ",", "facecolor", "=", "color_map", "[", "c", "]", ",", "label", "=", "class_names", "[", "c", "]", ")", "#NEWLINE#", "boxes", ".", "append", "(", "box", ")", "#NEWLINE#", "#UNINDENT#", "(", "fig", ",", "ax", ")", "=", "plt", ".", "subplots", "(", "1", ",", "1", ",", "figsize", "=", "(", "1", ",", "1", ")", ")", "#NEWLINE#", "leg", "=", "ax", ".", "legend", "(", "handles", "=", "boxes", ",", "frameon", "=", "True", ",", "shadow", "=", "False", ",", "fancybox", "=", "True", ",", "loc", "=", "'center'", ",", "title", "=", "target_name", ",", "handletextpad", "=", "0.35", ",", "borderpad", "=", "0.8", ",", "edgecolor", "=", "colors", "[", "'legend_edge'", "]", ")", "#NEWLINE#", "leg", ".", "get_frame", "(", ")", ".", "set_linewidth", "(", "0.5", ")", "#NEWLINE#", "leg", ".", "get_title", "(", ")", ".", "set_color", "(", "colors", "[", "'legend_title'", "]", ")", "#NEWLINE#", "leg", ".", "get_title", "(", ")", ".", "set_fontsize", "(", "10", ")", "#NEWLINE#", "leg", ".", "get_title", "(", ")", ".", "set_fontweight", "(", "'bold'", ")", "#NEWLINE#", "for", "text", "in", "leg", ".", "get_texts", "(", ")", ":", "#NEWLINE#", "#INDENT#", "text", ".", "set_color", "(", "colors", "[", "'text'", "]", ")", "#NEWLINE#", "text", ".", "set_fontsize", "(", "10", ")", "#NEWLINE#", "#UNINDENT#", "ax", ".", "set_xlim", "(", "0", ",", "20", ")", "#NEWLINE#", "ax", ".", "set_ylim", "(", "0", ",", "10", ")", "#NEWLINE#", "ax", ".", "axis", "(", "'off'", ")", "#NEWLINE#", "ax", ".", "xaxis", ".", "set_visible", "(", "False", ")", "#NEWLINE#", "ax", ".", "yaxis", ".", "set_visible", "(", "False", ")", "#NEWLINE#", "if", "(", "filename", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "plt", ".", "savefig", "(", "filename", ",", "bbox_inches", "=", "'tight'", ",", "pad_inches", "=", "0", ")", "#NEWLINE#", "plt", ".", "close", "(", ")"], "edges": [[1, 5, 7, "enum_FIELD"], [14, 18, 7, "enum_FIELD"], [21, 27, 7, "enum_FIELD"], [29, 33, 7, "enum_FIELD"], [35, 39, 7, "enum_FIELD"], [41, 48, 7, "enum_FIELD"], [51, 56, 7, "enum_FIELD"], [73, 76, 7, "enum_FIELD"], [85, 82, 7, "enum_FIELD"], [85, 87, 7, "enum_FIELD"], [142, 154, 7, "enum_FIELD"], [165, 187, 7, "enum_FIELD"], [211, 219, 7, "enum_FIELD"], [222, 230, 7, "enum_FIELD"], [236, 244, 7, "enum_FIELD"], [247, 255, 7, "enum_FIELD"], [261, 260, 7, "enum_FIELD"], [261, 265, 7, "enum_FIELD"], [287, 293, 7, "enum_FIELD"], [296, 302, 7, "enum_FIELD"], [305, 309, 7, "enum_FIELD"], [312, 318, 7, "enum_FIELD"], [321, 327, 7, "enum_FIELD"], [331, 334, 7, "enum_FIELD"], [18, 17, 7, "enum_FIELD"], [27, 25, 7, "enum_FIELD"], [33, 32, 7, "enum_FIELD"], [39, 38, 7, "enum_FIELD"], [48, 45, 7, "enum_FIELD"], [48, 49, 7, "enum_FIELD"], [56, 55, 7, "enum_FIELD"], [56, 58, 7, "enum_FIELD"], [87, 86, 7, "enum_FIELD"], [92, 108, 7, "enum_FIELD"], [134, 138, 7, "enum_FIELD"], [154, 150, 7, "enum_FIELD"], [187, 169, 7, "enum_FIELD"], [219, 217, 7, "enum_FIELD"], [230, 228, 7, "enum_FIELD"], [244, 242, 7, "enum_FIELD"], [255, 253, 7, "enum_FIELD"], [265, 263, 7, "enum_FIELD"], [269, 273, 7, "enum_FIELD"], [279, 283, 7, "enum_FIELD"], [293, 289, 7, "enum_FIELD"], [302, 298, 7, "enum_FIELD"], [309, 307, 7, "enum_FIELD"], [318, 316, 7, "enum_FIELD"], [327, 325, 7, "enum_FIELD"], [334, 333, 7, "enum_FIELD"], [339, 345, 7, "enum_FIELD"], [354, 358, 7, "enum_FIELD"], [25, 24, 7, "enum_FIELD"], [45, 44, 7, "enum_FIELD"], [45, 46, 7, "enum_FIELD"], [58, 57, 7, "enum_FIELD"], [58, 59, 7, "enum_FIELD"], [61, 64, 7, "enum_FIELD"], [61, 69, 7, "enum_FIELD"], [108, 96, 7, "enum_FIELD"], [138, 136, 7, "enum_FIELD"], [150, 149, 7, "enum_FIELD"], [157, 161, 7, "enum_FIELD"], [169, 168, 7, "enum_FIELD"], [172, 174, 7, "enum_FIELD"], [176, 178, 7, "enum_FIELD"], [180, 182, 7, "enum_FIELD"], [184, 186, 7, "enum_FIELD"], [188, 190, 7, "enum_FIELD"], [192, 194, 7, "enum_FIELD"], [196, 198, 7, "enum_FIELD"], [200, 202, 7, "enum_FIELD"], [204, 207, 7, "enum_FIELD"], [217, 215, 7, "enum_FIELD"], [228, 226, 7, "enum_FIELD"], [232, 231, 7, "enum_FIELD"], [232, 233, 7, "enum_FIELD"], [242, 240, 7, "enum_FIELD"], [253, 251, 7, "enum_FIELD"], [263, 262, 7, "enum_FIELD"], [273, 271, 7, "enum_FIELD"], [283, 281, 7, "enum_FIELD"], [289, 288, 7, "enum_FIELD"], [298, 297, 7, "enum_FIELD"], [307, 306, 7, "enum_FIELD"], [316, 314, 7, "enum_FIELD"], [325, 323, 7, "enum_FIELD"], [345, 341, 7, "enum_FIELD"], [358, 356, 7, "enum_FIELD"], [69, 68, 7, "enum_FIELD"], [96, 95, 7, "enum_FIELD"], [109, 111, 7, "enum_FIELD"], [113, 116, 7, "enum_FIELD"], [120, 123, 7, "enum_FIELD"], [127, 130, 7, "enum_FIELD"], [136, 135, 7, "enum_FIELD"], [207, 206, 7, "enum_FIELD"], [207, 208, 7, "enum_FIELD"], [215, 213, 7, "enum_FIELD"], [226, 224, 7, "enum_FIELD"], [240, 238, 7, "enum_FIELD"], [251, 249, 7, "enum_FIELD"], [271, 270, 7, "enum_FIELD"], [275, 274, 7, "enum_FIELD"], [275, 276, 7, "enum_FIELD"], [281, 280, 7, "enum_FIELD"], [314, 313, 7, "enum_FIELD"], [323, 322, 7, "enum_FIELD"], [341, 340, 7, "enum_FIELD"], [346, 348, 7, "enum_FIELD"], [350, 352, 7, "enum_FIELD"], [356, 355, 7, "enum_FIELD"], [116, 115, 7, "enum_FIELD"], [116, 117, 7, "enum_FIELD"], [123, 122, 7, "enum_FIELD"], [123, 124, 7, "enum_FIELD"], [130, 129, 7, "enum_FIELD"], [130, 131, 7, "enum_FIELD"], [213, 212, 7, "enum_FIELD"], [224, 223, 7, "enum_FIELD"], [238, 237, 7, "enum_FIELD"], [249, 248, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 14, 9, "enum_NEXT_SYNTAX"], [15, 8, 10, "enum_LAST_LEXICAL_USE"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [19, 15, 10, "enum_LAST_LEXICAL_USE"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [24, 2, 10, "enum_LAST_LEXICAL_USE"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [32, 24, 10, "enum_LAST_LEXICAL_USE"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [38, 32, 10, "enum_LAST_LEXICAL_USE"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [44, 19, 10, "enum_LAST_LEXICAL_USE"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [49, 22, 10, "enum_LAST_LEXICAL_USE"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [57, 42, 10, "enum_LAST_LEXICAL_USE"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [63, 59, 10, "enum_LAST_LEXICAL_USE"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [65, 55, 10, "enum_LAST_LEXICAL_USE"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [70, 30, 10, "enum_LAST_LEXICAL_USE"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [81, 63, 10, "enum_LAST_LEXICAL_USE"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [86, 68, 10, "enum_LAST_LEXICAL_USE"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [88, 70, 10, "enum_LAST_LEXICAL_USE"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [115, 44, 10, "enum_LAST_LEXICAL_USE"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [122, 52, 10, "enum_LAST_LEXICAL_USE"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [124, 83, 10, "enum_LAST_LEXICAL_USE"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [129, 36, 10, "enum_LAST_LEXICAL_USE"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [131, 124, 10, "enum_LAST_LEXICAL_USE"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [135, 74, 10, "enum_LAST_LEXICAL_USE"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [139, 93, 10, "enum_LAST_LEXICAL_USE"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [168, 146, 10, "enum_LAST_LEXICAL_USE"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [174, 135, 10, "enum_LAST_LEXICAL_USE"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 184, 9, "enum_NEXT_SYNTAX"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [187, 188, 9, "enum_NEXT_SYNTAX"], [188, 189, 9, "enum_NEXT_SYNTAX"], [189, 190, 9, "enum_NEXT_SYNTAX"], [190, 191, 9, "enum_NEXT_SYNTAX"], [191, 192, 9, "enum_NEXT_SYNTAX"], [192, 193, 9, "enum_NEXT_SYNTAX"], [194, 4, 10, "enum_LAST_LEXICAL_USE"], [193, 194, 9, "enum_NEXT_SYNTAX"], [194, 195, 9, "enum_NEXT_SYNTAX"], [195, 196, 9, "enum_NEXT_SYNTAX"], [196, 197, 9, "enum_NEXT_SYNTAX"], [197, 198, 9, "enum_NEXT_SYNTAX"], [198, 199, 9, "enum_NEXT_SYNTAX"], [199, 200, 9, "enum_NEXT_SYNTAX"], [200, 201, 9, "enum_NEXT_SYNTAX"], [201, 202, 9, "enum_NEXT_SYNTAX"], [202, 203, 9, "enum_NEXT_SYNTAX"], [203, 204, 9, "enum_NEXT_SYNTAX"], [204, 205, 9, "enum_NEXT_SYNTAX"], [206, 115, 10, "enum_LAST_LEXICAL_USE"], [205, 206, 9, "enum_NEXT_SYNTAX"], [206, 207, 9, "enum_NEXT_SYNTAX"], [207, 208, 9, "enum_NEXT_SYNTAX"], [208, 209, 9, "enum_NEXT_SYNTAX"], [209, 210, 9, "enum_NEXT_SYNTAX"], [210, 211, 9, "enum_NEXT_SYNTAX"], [212, 166, 10, "enum_LAST_LEXICAL_USE"], [211, 212, 9, "enum_NEXT_SYNTAX"], [212, 213, 9, "enum_NEXT_SYNTAX"], [213, 214, 9, "enum_NEXT_SYNTAX"], [214, 215, 9, "enum_NEXT_SYNTAX"], [215, 216, 9, "enum_NEXT_SYNTAX"], [216, 217, 9, "enum_NEXT_SYNTAX"], [217, 218, 9, "enum_NEXT_SYNTAX"], [218, 219, 9, "enum_NEXT_SYNTAX"], [219, 220, 9, "enum_NEXT_SYNTAX"], [220, 221, 9, "enum_NEXT_SYNTAX"], [221, 222, 9, "enum_NEXT_SYNTAX"], [223, 212, 10, "enum_LAST_LEXICAL_USE"], [222, 223, 9, "enum_NEXT_SYNTAX"], [223, 224, 9, "enum_NEXT_SYNTAX"], [224, 225, 9, "enum_NEXT_SYNTAX"], [225, 226, 9, "enum_NEXT_SYNTAX"], [226, 227, 9, "enum_NEXT_SYNTAX"], [227, 228, 9, "enum_NEXT_SYNTAX"], [228, 229, 9, "enum_NEXT_SYNTAX"], [229, 230, 9, "enum_NEXT_SYNTAX"], [231, 206, 10, "enum_LAST_LEXICAL_USE"], [230, 231, 9, "enum_NEXT_SYNTAX"], [231, 232, 9, "enum_NEXT_SYNTAX"], [232, 233, 9, "enum_NEXT_SYNTAX"], [233, 234, 9, "enum_NEXT_SYNTAX"], [234, 235, 9, "enum_NEXT_SYNTAX"], [235, 236, 9, "enum_NEXT_SYNTAX"], [237, 223, 10, "enum_LAST_LEXICAL_USE"], [236, 237, 9, "enum_NEXT_SYNTAX"], [237, 238, 9, "enum_NEXT_SYNTAX"], [238, 239, 9, "enum_NEXT_SYNTAX"], [239, 240, 9, "enum_NEXT_SYNTAX"], [240, 241, 9, "enum_NEXT_SYNTAX"], [241, 242, 9, "enum_NEXT_SYNTAX"], [242, 243, 9, "enum_NEXT_SYNTAX"], [243, 244, 9, "enum_NEXT_SYNTAX"], [244, 245, 9, "enum_NEXT_SYNTAX"], [245, 246, 9, "enum_NEXT_SYNTAX"], [246, 247, 9, "enum_NEXT_SYNTAX"], [248, 237, 10, "enum_LAST_LEXICAL_USE"], [247, 248, 9, "enum_NEXT_SYNTAX"], [248, 249, 9, "enum_NEXT_SYNTAX"], [249, 250, 9, "enum_NEXT_SYNTAX"], [250, 251, 9, "enum_NEXT_SYNTAX"], [251, 252, 9, "enum_NEXT_SYNTAX"], [252, 253, 9, "enum_NEXT_SYNTAX"], [253, 254, 9, "enum_NEXT_SYNTAX"], [254, 255, 9, "enum_NEXT_SYNTAX"], [255, 256, 9, "enum_NEXT_SYNTAX"], [256, 257, 9, "enum_NEXT_SYNTAX"], [257, 259, 9, "enum_NEXT_SYNTAX"], [259, 260, 9, "enum_NEXT_SYNTAX"], [260, 261, 9, "enum_NEXT_SYNTAX"], [262, 248, 10, "enum_LAST_LEXICAL_USE"], [261, 262, 9, "enum_NEXT_SYNTAX"], [262, 263, 9, "enum_NEXT_SYNTAX"], [263, 264, 9, "enum_NEXT_SYNTAX"], [264, 265, 9, "enum_NEXT_SYNTAX"], [265, 266, 9, "enum_NEXT_SYNTAX"], [266, 267, 9, "enum_NEXT_SYNTAX"], [267, 269, 9, "enum_NEXT_SYNTAX"], [270, 260, 10, "enum_LAST_LEXICAL_USE"], [269, 270, 9, "enum_NEXT_SYNTAX"], [270, 271, 9, "enum_NEXT_SYNTAX"], [271, 272, 9, "enum_NEXT_SYNTAX"], [272, 273, 9, "enum_NEXT_SYNTAX"], [274, 231, 10, "enum_LAST_LEXICAL_USE"], [273, 274, 9, "enum_NEXT_SYNTAX"], [274, 275, 9, "enum_NEXT_SYNTAX"], [275, 276, 9, "enum_NEXT_SYNTAX"], [276, 277, 9, "enum_NEXT_SYNTAX"], [277, 278, 9, "enum_NEXT_SYNTAX"], [278, 279, 9, "enum_NEXT_SYNTAX"], [280, 270, 10, "enum_LAST_LEXICAL_USE"], [279, 280, 9, "enum_NEXT_SYNTAX"], [280, 281, 9, "enum_NEXT_SYNTAX"], [281, 282, 9, "enum_NEXT_SYNTAX"], [282, 283, 9, "enum_NEXT_SYNTAX"], [283, 284, 9, "enum_NEXT_SYNTAX"], [284, 285, 9, "enum_NEXT_SYNTAX"], [285, 287, 9, "enum_NEXT_SYNTAX"], [288, 168, 10, "enum_LAST_LEXICAL_USE"], [287, 288, 9, "enum_NEXT_SYNTAX"], [288, 289, 9, "enum_NEXT_SYNTAX"], [289, 290, 9, "enum_NEXT_SYNTAX"], [290, 291, 9, "enum_NEXT_SYNTAX"], [291, 292, 9, "enum_NEXT_SYNTAX"], [292, 293, 9, "enum_NEXT_SYNTAX"], [293, 294, 9, "enum_NEXT_SYNTAX"], [294, 295, 9, "enum_NEXT_SYNTAX"], [295, 296, 9, "enum_NEXT_SYNTAX"], [297, 288, 10, "enum_LAST_LEXICAL_USE"], [296, 297, 9, "enum_NEXT_SYNTAX"], [297, 298, 9, "enum_NEXT_SYNTAX"], [298, 299, 9, "enum_NEXT_SYNTAX"], [299, 300, 9, "enum_NEXT_SYNTAX"], [300, 301, 9, "enum_NEXT_SYNTAX"], [301, 302, 9, "enum_NEXT_SYNTAX"], [302, 303, 9, "enum_NEXT_SYNTAX"], [303, 304, 9, "enum_NEXT_SYNTAX"], [304, 305, 9, "enum_NEXT_SYNTAX"], [306, 297, 10, "enum_LAST_LEXICAL_USE"], [305, 306, 9, "enum_NEXT_SYNTAX"], [306, 307, 9, "enum_NEXT_SYNTAX"], [307, 308, 9, "enum_NEXT_SYNTAX"], [308, 309, 9, "enum_NEXT_SYNTAX"], [309, 310, 9, "enum_NEXT_SYNTAX"], [310, 311, 9, "enum_NEXT_SYNTAX"], [311, 312, 9, "enum_NEXT_SYNTAX"], [313, 306, 10, "enum_LAST_LEXICAL_USE"], [312, 313, 9, "enum_NEXT_SYNTAX"], [313, 314, 9, "enum_NEXT_SYNTAX"], [314, 315, 9, "enum_NEXT_SYNTAX"], [315, 316, 9, "enum_NEXT_SYNTAX"], [316, 317, 9, "enum_NEXT_SYNTAX"], [317, 318, 9, "enum_NEXT_SYNTAX"], [318, 319, 9, "enum_NEXT_SYNTAX"], [319, 320, 9, "enum_NEXT_SYNTAX"], [320, 321, 9, "enum_NEXT_SYNTAX"], [322, 313, 10, "enum_LAST_LEXICAL_USE"], [321, 322, 9, "enum_NEXT_SYNTAX"], [322, 323, 9, "enum_NEXT_SYNTAX"], [323, 324, 9, "enum_NEXT_SYNTAX"], [324, 325, 9, "enum_NEXT_SYNTAX"], [325, 326, 9, "enum_NEXT_SYNTAX"], [326, 327, 9, "enum_NEXT_SYNTAX"], [327, 328, 9, "enum_NEXT_SYNTAX"], [328, 329, 9, "enum_NEXT_SYNTAX"], [329, 331, 9, "enum_NEXT_SYNTAX"], [331, 332, 9, "enum_NEXT_SYNTAX"], [333, 6, 10, "enum_LAST_LEXICAL_USE"], [332, 333, 9, "enum_NEXT_SYNTAX"], [333, 334, 9, "enum_NEXT_SYNTAX"], [334, 335, 9, "enum_NEXT_SYNTAX"], [335, 336, 9, "enum_NEXT_SYNTAX"], [336, 337, 9, "enum_NEXT_SYNTAX"], [337, 339, 9, "enum_NEXT_SYNTAX"], [340, 149, 10, "enum_LAST_LEXICAL_USE"], [339, 340, 9, "enum_NEXT_SYNTAX"], [340, 341, 9, "enum_NEXT_SYNTAX"], [341, 342, 9, "enum_NEXT_SYNTAX"], [342, 343, 9, "enum_NEXT_SYNTAX"], [344, 333, 10, "enum_LAST_LEXICAL_USE"], [343, 344, 9, "enum_NEXT_SYNTAX"], [344, 345, 9, "enum_NEXT_SYNTAX"], [345, 346, 9, "enum_NEXT_SYNTAX"], [346, 347, 9, "enum_NEXT_SYNTAX"], [347, 348, 9, "enum_NEXT_SYNTAX"], [348, 349, 9, "enum_NEXT_SYNTAX"], [349, 350, 9, "enum_NEXT_SYNTAX"], [350, 351, 9, "enum_NEXT_SYNTAX"], [351, 352, 9, "enum_NEXT_SYNTAX"], [352, 353, 9, "enum_NEXT_SYNTAX"], [353, 354, 9, "enum_NEXT_SYNTAX"], [355, 340, 10, "enum_LAST_LEXICAL_USE"], [354, 355, 9, "enum_NEXT_SYNTAX"], [355, 356, 9, "enum_NEXT_SYNTAX"], [356, 357, 9, "enum_NEXT_SYNTAX"], [357, 358, 9, "enum_NEXT_SYNTAX"], [358, 359, 9, "enum_NEXT_SYNTAX"], [10, 1, 1, "enum_CFG_NEXT"], [5, 14, 1, "enum_CFG_NEXT"], [14, 21, 1, "enum_CFG_NEXT"], [21, 29, 1, "enum_CFG_NEXT"], [29, 35, 1, "enum_CFG_NEXT"], [35, 41, 1, "enum_CFG_NEXT"], [41, 51, 1, "enum_CFG_NEXT"], [51, 73, 1, "enum_CFG_NEXT"], [73, 87, 1, "enum_CFG_NEXT"], [87, 82, 1, "enum_CFG_NEXT"], [82, 92, 1, "enum_CFG_NEXT"], [82, 142, 1, "enum_CFG_NEXT"], [92, 134, 1, "enum_CFG_NEXT"], [134, 82, 1, "enum_CFG_NEXT"], [142, 165, 1, "enum_CFG_NEXT"], [165, 211, 1, "enum_CFG_NEXT"], [211, 222, 1, "enum_CFG_NEXT"], [222, 236, 1, "enum_CFG_NEXT"], [236, 247, 1, "enum_CFG_NEXT"], [247, 265, 1, "enum_CFG_NEXT"], [265, 260, 1, "enum_CFG_NEXT"], [260, 269, 1, "enum_CFG_NEXT"], [260, 287, 1, "enum_CFG_NEXT"], [269, 279, 1, "enum_CFG_NEXT"], [279, 260, 1, "enum_CFG_NEXT"], [287, 296, 1, "enum_CFG_NEXT"], [296, 305, 1, "enum_CFG_NEXT"], [305, 312, 1, "enum_CFG_NEXT"], [312, 321, 1, "enum_CFG_NEXT"], [321, 334, 1, "enum_CFG_NEXT"], [334, 339, 1, "enum_CFG_NEXT"], [339, 354, 1, "enum_CFG_NEXT"], [19, 8, 3, "enum_LAST_WRITE"], [15, 19, 2, "enum_LAST_READ"], [15, 8, 3, "enum_LAST_WRITE"], [24, 2, 3, "enum_LAST_WRITE"], [32, 24, 2, "enum_LAST_READ"], [32, 2, 3, "enum_LAST_WRITE"], [38, 32, 2, "enum_LAST_READ"], [38, 2, 3, "enum_LAST_WRITE"], [44, 19, 2, "enum_LAST_READ"], [44, 15, 3, "enum_LAST_WRITE"], [49, 22, 3, "enum_LAST_WRITE"], [57, 42, 3, "enum_LAST_WRITE"], [63, 59, 2, "enum_LAST_READ"], [65, 55, 2, "enum_LAST_READ"], [70, 30, 3, "enum_LAST_WRITE"], [86, 68, 2, "enum_LAST_READ"], [88, 70, 2, "enum_LAST_READ"], [88, 30, 3, "enum_LAST_WRITE"], [81, 59, 2, "enum_LAST_READ"], [81, 63, 3, "enum_LAST_WRITE"], [81, 81, 3, "enum_LAST_WRITE"], [83, 131, 2, "enum_LAST_READ"], [83, 83, 3, "enum_LAST_WRITE"], [95, 95, 2, "enum_LAST_READ"], [115, 44, 2, "enum_LAST_READ"], [115, 115, 2, "enum_LAST_READ"], [115, 15, 3, "enum_LAST_WRITE"], [122, 122, 2, "enum_LAST_READ"], [122, 52, 3, "enum_LAST_WRITE"], [124, 131, 2, "enum_LAST_READ"], [124, 83, 3, "enum_LAST_WRITE"], [129, 129, 2, "enum_LAST_READ"], [129, 36, 3, "enum_LAST_WRITE"], [131, 124, 2, "enum_LAST_READ"], [131, 83, 3, "enum_LAST_WRITE"], [93, 139, 2, "enum_LAST_READ"], [93, 93, 3, "enum_LAST_WRITE"], [135, 135, 2, "enum_LAST_READ"], [135, 74, 3, "enum_LAST_WRITE"], [139, 139, 2, "enum_LAST_READ"], [139, 93, 3, "enum_LAST_WRITE"], [168, 146, 3, "enum_LAST_WRITE"], [174, 135, 2, "enum_LAST_READ"], [174, 74, 3, "enum_LAST_WRITE"], [194, 4, 3, "enum_LAST_WRITE"], [206, 44, 2, "enum_LAST_READ"], [206, 115, 2, "enum_LAST_READ"], [206, 15, 3, "enum_LAST_WRITE"], [212, 166, 3, "enum_LAST_WRITE"], [223, 212, 2, "enum_LAST_READ"], [223, 166, 3, "enum_LAST_WRITE"], [231, 206, 2, "enum_LAST_READ"], [231, 15, 3, "enum_LAST_WRITE"], [237, 223, 2, "enum_LAST_READ"], [237, 166, 3, "enum_LAST_WRITE"], [248, 237, 2, "enum_LAST_READ"], [248, 166, 3, "enum_LAST_WRITE"], [262, 248, 2, "enum_LAST_READ"], [262, 166, 3, "enum_LAST_WRITE"], [260, 280, 2, "enum_LAST_READ"], [260, 260, 3, "enum_LAST_WRITE"], [270, 280, 2, "enum_LAST_READ"], [270, 260, 3, "enum_LAST_WRITE"], [274, 274, 2, "enum_LAST_READ"], [274, 231, 2, "enum_LAST_READ"], [274, 15, 3, "enum_LAST_WRITE"], [280, 270, 2, "enum_LAST_READ"], [280, 260, 3, "enum_LAST_WRITE"], [288, 168, 2, "enum_LAST_READ"], [288, 146, 3, "enum_LAST_WRITE"], [297, 288, 2, "enum_LAST_READ"], [297, 146, 3, "enum_LAST_WRITE"], [306, 297, 2, "enum_LAST_READ"], [306, 146, 3, "enum_LAST_WRITE"], [313, 306, 2, "enum_LAST_READ"], [313, 146, 3, "enum_LAST_WRITE"], [322, 313, 2, "enum_LAST_READ"], [322, 146, 3, "enum_LAST_WRITE"], [333, 6, 3, "enum_LAST_WRITE"], [340, 149, 2, "enum_LAST_READ"], [344, 333, 2, "enum_LAST_READ"], [344, 6, 3, "enum_LAST_WRITE"], [355, 340, 2, "enum_LAST_READ"], [15, 17, 4, "enum_COMPUTED_FROM"], [15, 19, 4, "enum_COMPUTED_FROM"], [22, 24, 4, "enum_COMPUTED_FROM"], [30, 32, 4, "enum_COMPUTED_FROM"], [36, 38, 4, "enum_COMPUTED_FROM"], [42, 49, 4, "enum_COMPUTED_FROM"], [42, 44, 4, "enum_COMPUTED_FROM"], [52, 55, 4, "enum_COMPUTED_FROM"], [52, 57, 4, "enum_COMPUTED_FROM"], [52, 59, 4, "enum_COMPUTED_FROM"], [52, 63, 4, "enum_COMPUTED_FROM"], [52, 65, 4, "enum_COMPUTED_FROM"], [52, 68, 4, "enum_COMPUTED_FROM"], [52, 70, 4, "enum_COMPUTED_FROM"], [145, 149, 4, "enum_COMPUTED_FROM"], [166, 168, 4, "enum_COMPUTED_FROM"], [166, 174, 4, "enum_COMPUTED_FROM"], [166, 194, 4, "enum_COMPUTED_FROM"], [166, 206, 4, "enum_COMPUTED_FROM"], [93, 95, 4, "enum_COMPUTED_FROM"], [93, 115, 4, "enum_COMPUTED_FROM"], [93, 122, 4, "enum_COMPUTED_FROM"], [93, 124, 4, "enum_COMPUTED_FROM"], [93, 129, 4, "enum_COMPUTED_FROM"], [93, 131, 4, "enum_COMPUTED_FROM"]], "error_location": 131, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/parrt/dtreeviz.git", "old_path": "dtreeviz/trees.py", "hash": "aa5b4811af5c5a5c9620705fc44ffd9e48377664", "code": "def draw_legend(shadow_tree: Any, target_name: str, filename: Optional[str], colors: Optional[Dict[str, Any]] = None):\n    colors = adjust_colors(colors)\n    n_classes: int = shadow_tree.nclasses()\n    class_values: List[Union[int, float]] = shadow_tree.unique_target_values\n    class_names: List[str] = shadow_tree.class_names\n    color_values: List[str] = colors['classes'][n_classes]\n    color_map: Dict[Any, str] = {v:color_values[i] for i,v in enumerate(class_values)}\n\n    boxes: List[patches.Rectangle] = []\n    for i, c in enumerate(class_values):\n        box: patches.Rectangle = patches.Rectangle((0, 0), 20, 10, linewidth=.4, edgecolor=colors['rect_edge'],\n                                facecolor=color_map[c], label=class_names[c])\n        boxes.append(box)\n\n    fig, ax = plt.subplots(1, 1, figsize=(1,1))\n    leg: Any = ax.legend(handles=boxes,\n                    frameon=True,\n                    shadow=False,\n                    fancybox=True,\n                    loc='center',\n                    title=target_name,\n                    handletextpad=.35,\n                    borderpad=.8,\n                    edgecolor=colors['legend_edge'])\n\n    leg.get_frame().set_linewidth(.5)\n    leg.get_title().set_color(colors['legend_title'])\n    leg.get_title().set_fontsize(10)\n    leg.get_title().set_fontweight('bold')\n    for text in leg.get_texts():\n        text.set_color(colors['text'])\n        text.set_fontsize(10)\n\n    ax.set_xlim(0, 20)\n    ax.set_ylim(0, 10)\n    ax.axis('off')\n    ax.xaxis.set_visible(False)\n    ax.yaxis.set_visible(False)\n\n    if filename is not None:\n        plt.savefig(filename, bbox_inches='tight', pad_inches=0)\n        plt.close()\n", "rewrite": "ReplaceText(target='i' @(1124,74)->(1124,75))", "error_line": 11, "has_bug": true, "code_full": "from typing import Any, Dict, List, Optional, Union\n\nimport matplotlib.patches as patches\nimport matplotlib.pyplot as plt\n\n\ndef adjust_colors(colors: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:\n    return {}\n\ndef draw_legend(shadow_tree: Any, target_name: str, filename: Optional[str], colors: Optional[Dict[str, Any]] = None):\n    colors = adjust_colors(colors)\n    n_classes: int = shadow_tree.nclasses()\n    class_values: List[Union[int, float]] = shadow_tree.unique_target_values\n    class_names: List[str] = shadow_tree.class_names\n    color_values: List[str] = colors['classes'][n_classes]\n    color_map: Dict[Any, str] = {v:color_values[i] for i,v in enumerate(class_values)}\n\n    boxes: List[patches.Rectangle] = []\n    for i, c in enumerate(class_values):\n        box: patches.Rectangle = patches.Rectangle((0, 0), 20, 10, linewidth=.4, edgecolor=colors['rect_edge'],\n                                facecolor=color_map[c], label=class_names[c])\n        boxes.append(box)\n\n    fig, ax = plt.subplots(1, 1, figsize=(1,1))\n    leg: Any = ax.legend(handles=boxes,\n                    frameon=True,\n                    shadow=False,\n                    fancybox=True,\n                    loc='center',\n                    title=target_name,\n                    handletextpad=.35,\n                    borderpad=.8,\n                    edgecolor=colors['legend_edge'])\n\n    leg.get_frame().set_linewidth(.5)\n    leg.get_title().set_color(colors['legend_title'])\n    leg.get_title().set_fontsize(10)\n    leg.get_title().set_fontweight('bold')\n    for text in leg.get_texts():\n        text.set_color(colors['text'])\n        text.set_fontsize(10)\n\n    ax.set_xlim(0, 20)\n    ax.set_ylim(0, 10)\n    ax.axis('off')\n    ax.xaxis.set_visible(False)\n    ax.yaxis.set_visible(False)\n\n    if filename is not None:\n        plt.savefig(filename, bbox_inches='tight', pad_inches=0)\n        plt.close()\n", "error_location_char": [742, 743], "type_checked_pytype": true, "type_error_label": "index", "type_checked_mypy": false}
{"source_tokens": ["#NEWLINE#", "def get_image(", "filename", ",", "**kwargs", ")", ":", "#NEWLINE#", "#INDENT#", "absolute_path", "=", "os", ".", "path", ".", "join", "(", "MEDIA_ROOT", ",", "filename", ")", "#NEWLINE#", "if", "(", "not", "os", ".", "path", ".", "isfile", "(", "absolute_path", ")", ")", ":", "#NEWLINE#", "#INDENT#", "abort", "(", "404", ")", "#NEWLINE#", "#UNINDENT#", "resized_filename", "=", "get_new_filename", "(", "request", ")", "#NEWLINE#", "resized_absolute_path", "=", "os", ".", "path", ".", "join", "(", "MEDIA_ROOT", ",", "resized_filename", ")", "#NEWLINE#", "if", "os", ".", "path", ".", "isfile", "(", "resized_absolute_path", ")", ":", "#NEWLINE#", "#INDENT#", "return", "send_from_directory", "(", "MEDIA_ROOT", ",", "resized_filename", ")", "#NEWLINE#", "#UNINDENT#", "if", "create_image", "(", "absolute_path", ",", "resized_absolute_path", ",", "**", "kwargs", ")", ":", "#NEWLINE#", "#INDENT#", "return", "send_from_directory", "(", "MEDIA_ROOT", ",", "resized_absolute_path", ")", "#NEWLINE#", "#UNINDENT#", "abort", "(", "500", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [8, 18, 7, "enum_FIELD"], [22, 24, 7, "enum_FIELD"], [42, 46, 7, "enum_FIELD"], [49, 59, 7, "enum_FIELD"], [63, 69, 7, "enum_FIELD"], [84, 88, 7, "enum_FIELD"], [105, 107, 7, "enum_FIELD"], [18, 14, 7, "enum_FIELD"], [24, 30, 7, "enum_FIELD"], [36, 38, 7, "enum_FIELD"], [46, 45, 7, "enum_FIELD"], [59, 55, 7, "enum_FIELD"], [69, 67, 7, "enum_FIELD"], [75, 79, 7, "enum_FIELD"], [88, 85, 7, "enum_FIELD"], [97, 101, 7, "enum_FIELD"], [107, 106, 7, "enum_FIELD"], [14, 12, 7, "enum_FIELD"], [30, 28, 7, "enum_FIELD"], [38, 37, 7, "enum_FIELD"], [55, 53, 7, "enum_FIELD"], [67, 65, 7, "enum_FIELD"], [79, 76, 7, "enum_FIELD"], [91, 92, 7, "enum_FIELD"], [101, 98, 7, "enum_FIELD"], [12, 11, 7, "enum_FIELD"], [28, 26, 7, "enum_FIELD"], [53, 52, 7, "enum_FIELD"], [65, 64, 7, "enum_FIELD"], [26, 25, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [19, 2, 10, "enum_LAST_LEXICAL_USE"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [25, 11, 10, "enum_LAST_LEXICAL_USE"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [31, 9, 10, "enum_LAST_LEXICAL_USE"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [52, 25, 10, "enum_LAST_LEXICAL_USE"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [58, 17, 10, "enum_LAST_LEXICAL_USE"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [60, 43, 10, "enum_LAST_LEXICAL_USE"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 63, 9, "enum_NEXT_SYNTAX"], [64, 52, 10, "enum_LAST_LEXICAL_USE"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [70, 50, 10, "enum_LAST_LEXICAL_USE"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [78, 58, 10, "enum_LAST_LEXICAL_USE"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [80, 60, 10, "enum_LAST_LEXICAL_USE"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [87, 31, 10, "enum_LAST_LEXICAL_USE"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [89, 70, 10, "enum_LAST_LEXICAL_USE"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 97, 9, "enum_NEXT_SYNTAX"], [98, 76, 10, "enum_LAST_LEXICAL_USE"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [100, 78, 10, "enum_LAST_LEXICAL_USE"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [102, 89, 10, "enum_LAST_LEXICAL_USE"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 105, 9, "enum_NEXT_SYNTAX"], [106, 37, 10, "enum_LAST_LEXICAL_USE"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [3, 8, 1, "enum_CFG_NEXT"], [8, 24, 1, "enum_CFG_NEXT"], [24, 42, 1, "enum_CFG_NEXT"], [24, 36, 1, "enum_CFG_NEXT"], [36, 42, 1, "enum_CFG_NEXT"], [42, 49, 1, "enum_CFG_NEXT"], [49, 69, 1, "enum_CFG_NEXT"], [69, 88, 1, "enum_CFG_NEXT"], [69, 75, 1, "enum_CFG_NEXT"], [88, 97, 1, "enum_CFG_NEXT"], [88, 105, 1, "enum_CFG_NEXT"], [19, 2, 3, "enum_LAST_WRITE"], [25, 11, 2, "enum_LAST_READ"], [31, 9, 3, "enum_LAST_WRITE"], [52, 25, 2, "enum_LAST_READ"], [58, 17, 2, "enum_LAST_READ"], [60, 43, 3, "enum_LAST_WRITE"], [64, 52, 2, "enum_LAST_READ"], [70, 50, 3, "enum_LAST_WRITE"], [78, 58, 2, "enum_LAST_READ"], [80, 60, 2, "enum_LAST_READ"], [80, 43, 3, "enum_LAST_WRITE"], [87, 31, 2, "enum_LAST_READ"], [87, 9, 3, "enum_LAST_WRITE"], [89, 70, 2, "enum_LAST_READ"], [89, 50, 3, "enum_LAST_WRITE"], [100, 58, 2, "enum_LAST_READ"], [102, 89, 2, "enum_LAST_READ"], [102, 50, 3, "enum_LAST_WRITE"], [106, 37, 2, "enum_LAST_READ"], [9, 17, 4, "enum_COMPUTED_FROM"], [9, 19, 4, "enum_COMPUTED_FROM"], [9, 11, 4, "enum_COMPUTED_FROM"], [43, 45, 4, "enum_COMPUTED_FROM"], [43, 47, 4, "enum_COMPUTED_FROM"], [50, 58, 4, "enum_COMPUTED_FROM"], [50, 60, 4, "enum_COMPUTED_FROM"], [50, 52, 4, "enum_COMPUTED_FROM"]], "error_location": 102, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/dictget/ecce-homo.git", "old_path": "eccehomo/app.py", "hash": "ffc928d90cb7d938558df8fef15555ec5594ee6d", "code": "def get_image(filename: str, **kwargs) -> Any:\n    absolute_path: str = os.path.join(MEDIA_ROOT, filename)\n    if not os.path.isfile(absolute_path):\n        abort(404)\n\n    resized_filename: str = get_new_filename(request)\n    resized_absolute_path: str = os.path.join(MEDIA_ROOT, resized_filename)\n\n    if os.path.isfile(resized_absolute_path):\n        return send_from_directory(MEDIA_ROOT, resized_filename)\n\n    if create_image(absolute_path, resized_absolute_path, **kwargs):\n        return send_from_directory(MEDIA_ROOT, resized_absolute_path)\n    abort(500)\n", "rewrite": "ReplaceText(target='resized_filename' @(27,47)->(27,68))", "error_line": 12, "has_bug": true, "code_full": "import os\nfrom typing import Any\n\nfrom flask import abort, request, send_from_directory\n\nMEDIA_ROOT: str = \"\"\n\n\ndef get_new_filename(request: Any) -> str:\n    return \"\"\n\ndef create_image(absolute_path: str, resized_absolute_path: str, **kwargs) -> bool:\n    return False\n\ndef get_image(filename: str, **kwargs) -> Any:\n    absolute_path: str = os.path.join(MEDIA_ROOT, filename)\n    if not os.path.isfile(absolute_path):\n        abort(404)\n\n    resized_filename: str = get_new_filename(request)\n    resized_absolute_path: str = os.path.join(MEDIA_ROOT, resized_filename)\n\n    if os.path.isfile(resized_absolute_path):\n        return send_from_directory(MEDIA_ROOT, resized_filename)\n\n    if create_image(absolute_path, resized_absolute_path, **kwargs):\n        return send_from_directory(MEDIA_ROOT, resized_absolute_path)\n    abort(500)\n", "error_location_char": [528, 549], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def _http_post(", "self", ",", "url", ",", "data", ",", "headers", ")", "->", "requests", ".", "models", ".", "Response", ":", "#NEWLINE#", "#INDENT#", "'Performs a HTTP POST request.\\n\\n    Parameters\\n    ----------\\n    url: str\\n        unique resource locator\\n    data: bytes\\n        HTTP request message payload\\n    headers: Dict[str, str]\\n        HTTP request message headers\\n\\n    Returns\\n    -------\\n    requests.models.Response\\n        HTTP response message\\n\\n    '", "#NEWLINE#", "logger", ".", "debug", "(", "'POST: {} {}'", ".", "format", "(", "url", ",", "headers", ")", ")", "#NEWLINE#", "def serve_data_chunks(", "data", ")", ":", "#NEWLINE#", "#INDENT#", "for", "(", "i", ",", "offset", ")", "in", "enumerate", "(", "range", "(", "0", ",", "len", "(", "data", ")", ",", "self", ".", "_chunk_size", ")", ")", ":", "#NEWLINE#", "#INDENT#", "end", "=", "(", "offset", "+", "self", ".", "_chunk_size", ")", "#NEWLINE#", "(", "yield", "data", "[", "offset", ":", "end", "]", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "if", "(", "(", "self", ".", "_chunk_size", "is not", "None", ")", "and", "(", "len", "(", "data", ")", ">", "self", ".", "_chunk_size", ")", ")", ":", "#NEWLINE#", "#INDENT#", "logger", ".", "info", "(", "'store data in chunks using chunked transfer encoding'", ")", "#NEWLINE#", "chunked_headers", "=", "dict", "(", "headers", ")", "#NEWLINE#", "chunked_headers", "[", "'Transfer-Encoding'", "]", "=", "'chunked'", "#NEWLINE#", "chunked_headers", "[", "'Cache-Control'", "]", "=", "'no-cache'", "#NEWLINE#", "chunked_headers", "[", "'Connection'", "]", "=", "'Keep-Alive'", "#NEWLINE#", "data_chunks", "=", "serve_data_chunks", "(", "data", ")", "#NEWLINE#", "response", "=", "self", ".", "_session", ".", "post", "(", "url", "=", "url", ",", "data", "=", "data_chunks", ",", "headers", "=", "headers", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "response", "=", "self", ".", "_session", ".", "post", "(", "url", "=", "url", ",", "data", "=", "data", ",", "headers", "=", "headers", ")", "#NEWLINE#", "#UNINDENT#", "logger", ".", "debug", "(", "'request status code: {}'", ".", "format", "(", "response", ".", "status_code", ")", ")", "#NEWLINE#", "try", ":", "#NEWLINE#", "#INDENT#", "response", ".", "raise_for_status", "(", ")", "#NEWLINE#", "#UNINDENT#", "except", "requests", ".", "exceptions", ".", "HTTPError", "as", "error", ":", "#NEWLINE#", "#INDENT#", "raise", "HTTPError", "(", "error", ")", "#NEWLINE#", "#UNINDENT#", "except", "requests", ".", "exceptions", ".", "ConnectionError", "as", "error", ":", "#NEWLINE#", "#INDENT#", "raise", "HTTPError", "(", "error", "[", "0", "]", ")", "#NEWLINE#", "#UNINDENT#", "if", "(", "not", "response", ".", "ok", ")", ":", "#NEWLINE#", "#INDENT#", "logger", ".", "warning", "(", "'storage was not successful for all instances'", ")", "#NEWLINE#", "payload", "=", "response", ".", "content", "#NEWLINE#", "tree", "=", "ET", ".", "fromstring", "(", "payload", ")", "#NEWLINE#", "dataset", "=", "_load_xml_dataset", "(", "tree", ")", "#NEWLINE#", "failed_sop_sequence", "=", "getattr", "(", "dataset", ",", "'FailedSOPSequence'", ",", "[", "]", ")", "#NEWLINE#", "for", "failed_sop_item", "in", "failed_sop_sequence", ":", "#NEWLINE#", "#INDENT#", "logger", ".", "error", "(", "'storage of instance {} failed: \"{}\"'", ".", "format", "(", "failed_sop_item", ".", "ReferencedSOPInstanceUID", ",", "failed_sop_item", ".", "FailureReason", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "return", "response"], "edges": [[1, 5, 7, "enum_FIELD"], [1, 14, 7, "enum_FIELD"], [18, 19, 7, "enum_FIELD"], [20, 24, 7, "enum_FIELD"], [110, 98, 7, "enum_FIELD"], [202, 206, 7, "enum_FIELD"], [267, 269, 7, "enum_FIELD"], [345, 346, 7, "enum_FIELD"], [14, 12, 7, "enum_FIELD"], [24, 22, 7, "enum_FIELD"], [47, 44, 7, "enum_FIELD"], [47, 49, 7, "enum_FIELD"], [112, 116, 7, "enum_FIELD"], [119, 123, 7, "enum_FIELD"], [126, 132, 7, "enum_FIELD"], [133, 139, 7, "enum_FIELD"], [140, 146, 7, "enum_FIELD"], [147, 151, 7, "enum_FIELD"], [154, 166, 7, "enum_FIELD"], [180, 192, 7, "enum_FIELD"], [206, 204, 7, "enum_FIELD"], [220, 224, 7, "enum_FIELD"], [234, 232, 7, "enum_FIELD"], [234, 235, 7, "enum_FIELD"], [252, 250, 7, "enum_FIELD"], [252, 253, 7, "enum_FIELD"], [269, 271, 7, "enum_FIELD"], [276, 280, 7, "enum_FIELD"], [283, 287, 7, "enum_FIELD"], [289, 295, 7, "enum_FIELD"], [298, 302, 7, "enum_FIELD"], [305, 311, 7, "enum_FIELD"], [320, 319, 7, "enum_FIELD"], [320, 321, 7, "enum_FIELD"], [12, 11, 7, "enum_FIELD"], [22, 21, 7, "enum_FIELD"], [30, 26, 7, "enum_FIELD"], [49, 48, 7, "enum_FIELD"], [66, 71, 7, "enum_FIELD"], [76, 78, 7, "enum_FIELD"], [95, 93, 7, "enum_FIELD"], [104, 101, 7, "enum_FIELD"], [116, 114, 7, "enum_FIELD"], [123, 122, 7, "enum_FIELD"], [128, 127, 7, "enum_FIELD"], [128, 129, 7, "enum_FIELD"], [135, 134, 7, "enum_FIELD"], [135, 136, 7, "enum_FIELD"], [142, 141, 7, "enum_FIELD"], [142, 143, 7, "enum_FIELD"], [151, 150, 7, "enum_FIELD"], [166, 160, 7, "enum_FIELD"], [192, 186, 7, "enum_FIELD"], [204, 203, 7, "enum_FIELD"], [210, 208, 7, "enum_FIELD"], [224, 222, 7, "enum_FIELD"], [232, 230, 7, "enum_FIELD"], [239, 241, 7, "enum_FIELD"], [250, 248, 7, "enum_FIELD"], [257, 259, 7, "enum_FIELD"], [271, 270, 7, "enum_FIELD"], [280, 278, 7, "enum_FIELD"], [287, 286, 7, "enum_FIELD"], [295, 293, 7, "enum_FIELD"], [302, 301, 7, "enum_FIELD"], [311, 308, 7, "enum_FIELD"], [324, 328, 7, "enum_FIELD"], [26, 25, 7, "enum_FIELD"], [53, 50, 7, "enum_FIELD"], [71, 70, 7, "enum_FIELD"], [71, 73, 7, "enum_FIELD"], [78, 80, 7, "enum_FIELD"], [93, 92, 7, "enum_FIELD"], [101, 100, 7, "enum_FIELD"], [106, 105, 7, "enum_FIELD"], [114, 113, 7, "enum_FIELD"], [160, 158, 7, "enum_FIELD"], [163, 165, 7, "enum_FIELD"], [167, 169, 7, "enum_FIELD"], [171, 173, 7, "enum_FIELD"], [186, 184, 7, "enum_FIELD"], [189, 191, 7, "enum_FIELD"], [193, 195, 7, "enum_FIELD"], [197, 199, 7, "enum_FIELD"], [208, 207, 7, "enum_FIELD"], [212, 211, 7, "enum_FIELD"], [222, 221, 7, "enum_FIELD"], [230, 229, 7, "enum_FIELD"], [241, 240, 7, "enum_FIELD"], [248, 247, 7, "enum_FIELD"], [259, 258, 7, "enum_FIELD"], [278, 277, 7, "enum_FIELD"], [293, 292, 7, "enum_FIELD"], [328, 326, 7, "enum_FIELD"], [55, 54, 7, "enum_FIELD"], [60, 59, 7, "enum_FIELD"], [73, 72, 7, "enum_FIELD"], [80, 79, 7, "enum_FIELD"], [80, 82, 7, "enum_FIELD"], [158, 157, 7, "enum_FIELD"], [184, 183, 7, "enum_FIELD"], [261, 260, 7, "enum_FIELD"], [261, 262, 7, "enum_FIELD"], [326, 325, 7, "enum_FIELD"], [336, 330, 7, "enum_FIELD"], [82, 81, 7, "enum_FIELD"], [82, 83, 7, "enum_FIELD"], [330, 329, 7, "enum_FIELD"], [334, 333, 7, "enum_FIELD"], [338, 337, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [29, 4, 10, "enum_LAST_LEXICAL_USE"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [31, 8, 10, "enum_LAST_LEXICAL_USE"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 35, 9, "enum_NEXT_SYNTAX"], [36, 6, 10, "enum_LAST_LEXICAL_USE"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [56, 36, 10, "enum_LAST_LEXICAL_USE"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [59, 2, 10, "enum_LAST_LEXICAL_USE"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [70, 45, 10, "enum_LAST_LEXICAL_USE"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [72, 59, 10, "enum_LAST_LEXICAL_USE"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [79, 56, 10, "enum_LAST_LEXICAL_USE"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [81, 70, 10, "enum_LAST_LEXICAL_USE"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [83, 67, 10, "enum_LAST_LEXICAL_USE"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [92, 72, 10, "enum_LAST_LEXICAL_USE"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [100, 54, 10, "enum_LAST_LEXICAL_USE"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [102, 79, 10, "enum_LAST_LEXICAL_USE"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [105, 92, 10, "enum_LAST_LEXICAL_USE"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 112, 9, "enum_NEXT_SYNTAX"], [113, 21, 10, "enum_LAST_LEXICAL_USE"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [124, 31, 10, "enum_LAST_LEXICAL_USE"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [127, 120, 10, "enum_LAST_LEXICAL_USE"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [134, 127, 10, "enum_LAST_LEXICAL_USE"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [141, 134, 10, "enum_LAST_LEXICAL_USE"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [152, 102, 10, "enum_LAST_LEXICAL_USE"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [157, 105, 10, "enum_LAST_LEXICAL_USE"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [165, 29, 10, "enum_LAST_LEXICAL_USE"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [169, 148, 10, "enum_LAST_LEXICAL_USE"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [173, 124, 10, "enum_LAST_LEXICAL_USE"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 177, 9, "enum_NEXT_SYNTAX"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 180, 9, "enum_NEXT_SYNTAX"], [181, 155, 10, "enum_LAST_LEXICAL_USE"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [183, 157, 10, "enum_LAST_LEXICAL_USE"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 184, 9, "enum_NEXT_SYNTAX"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [187, 188, 9, "enum_NEXT_SYNTAX"], [188, 189, 9, "enum_NEXT_SYNTAX"], [189, 190, 9, "enum_NEXT_SYNTAX"], [191, 165, 10, "enum_LAST_LEXICAL_USE"], [190, 191, 9, "enum_NEXT_SYNTAX"], [191, 192, 9, "enum_NEXT_SYNTAX"], [192, 193, 9, "enum_NEXT_SYNTAX"], [193, 194, 9, "enum_NEXT_SYNTAX"], [195, 152, 10, "enum_LAST_LEXICAL_USE"], [194, 195, 9, "enum_NEXT_SYNTAX"], [195, 196, 9, "enum_NEXT_SYNTAX"], [196, 197, 9, "enum_NEXT_SYNTAX"], [197, 198, 9, "enum_NEXT_SYNTAX"], [199, 173, 10, "enum_LAST_LEXICAL_USE"], [198, 199, 9, "enum_NEXT_SYNTAX"], [199, 200, 9, "enum_NEXT_SYNTAX"], [200, 202, 9, "enum_NEXT_SYNTAX"], [203, 113, 10, "enum_LAST_LEXICAL_USE"], [202, 203, 9, "enum_NEXT_SYNTAX"], [203, 204, 9, "enum_NEXT_SYNTAX"], [204, 205, 9, "enum_NEXT_SYNTAX"], [205, 206, 9, "enum_NEXT_SYNTAX"], [206, 207, 9, "enum_NEXT_SYNTAX"], [207, 208, 9, "enum_NEXT_SYNTAX"], [208, 209, 9, "enum_NEXT_SYNTAX"], [209, 210, 9, "enum_NEXT_SYNTAX"], [211, 181, 10, "enum_LAST_LEXICAL_USE"], [210, 211, 9, "enum_NEXT_SYNTAX"], [211, 212, 9, "enum_NEXT_SYNTAX"], [212, 213, 9, "enum_NEXT_SYNTAX"], [213, 214, 9, "enum_NEXT_SYNTAX"], [214, 215, 9, "enum_NEXT_SYNTAX"], [215, 217, 9, "enum_NEXT_SYNTAX"], [217, 218, 9, "enum_NEXT_SYNTAX"], [218, 220, 9, "enum_NEXT_SYNTAX"], [221, 211, 10, "enum_LAST_LEXICAL_USE"], [220, 221, 9, "enum_NEXT_SYNTAX"], [221, 222, 9, "enum_NEXT_SYNTAX"], [222, 223, 9, "enum_NEXT_SYNTAX"], [223, 224, 9, "enum_NEXT_SYNTAX"], [224, 225, 9, "enum_NEXT_SYNTAX"], [225, 228, 9, "enum_NEXT_SYNTAX"], [229, 11, 10, "enum_LAST_LEXICAL_USE"], [228, 229, 9, "enum_NEXT_SYNTAX"], [229, 230, 9, "enum_NEXT_SYNTAX"], [230, 231, 9, "enum_NEXT_SYNTAX"], [231, 232, 9, "enum_NEXT_SYNTAX"], [232, 233, 9, "enum_NEXT_SYNTAX"], [233, 234, 9, "enum_NEXT_SYNTAX"], [234, 235, 9, "enum_NEXT_SYNTAX"], [235, 236, 9, "enum_NEXT_SYNTAX"], [236, 239, 9, "enum_NEXT_SYNTAX"], [239, 240, 9, "enum_NEXT_SYNTAX"], [240, 241, 9, "enum_NEXT_SYNTAX"], [242, 235, 10, "enum_LAST_LEXICAL_USE"], [241, 242, 9, "enum_NEXT_SYNTAX"], [242, 243, 9, "enum_NEXT_SYNTAX"], [243, 246, 9, "enum_NEXT_SYNTAX"], [247, 229, 10, "enum_LAST_LEXICAL_USE"], [246, 247, 9, "enum_NEXT_SYNTAX"], [247, 248, 9, "enum_NEXT_SYNTAX"], [248, 249, 9, "enum_NEXT_SYNTAX"], [249, 250, 9, "enum_NEXT_SYNTAX"], [250, 251, 9, "enum_NEXT_SYNTAX"], [251, 252, 9, "enum_NEXT_SYNTAX"], [253, 242, 10, "enum_LAST_LEXICAL_USE"], [252, 253, 9, "enum_NEXT_SYNTAX"], [253, 254, 9, "enum_NEXT_SYNTAX"], [254, 257, 9, "enum_NEXT_SYNTAX"], [258, 240, 10, "enum_LAST_LEXICAL_USE"], [257, 258, 9, "enum_NEXT_SYNTAX"], [258, 259, 9, "enum_NEXT_SYNTAX"], [260, 253, 10, "enum_LAST_LEXICAL_USE"], [259, 260, 9, "enum_NEXT_SYNTAX"], [260, 261, 9, "enum_NEXT_SYNTAX"], [261, 262, 9, "enum_NEXT_SYNTAX"], [262, 263, 9, "enum_NEXT_SYNTAX"], [263, 264, 9, "enum_NEXT_SYNTAX"], [264, 267, 9, "enum_NEXT_SYNTAX"], [267, 268, 9, "enum_NEXT_SYNTAX"], [268, 269, 9, "enum_NEXT_SYNTAX"], [270, 221, 10, "enum_LAST_LEXICAL_USE"], [269, 270, 9, "enum_NEXT_SYNTAX"], [270, 271, 9, "enum_NEXT_SYNTAX"], [271, 272, 9, "enum_NEXT_SYNTAX"], [272, 273, 9, "enum_NEXT_SYNTAX"], [273, 274, 9, "enum_NEXT_SYNTAX"], [274, 276, 9, "enum_NEXT_SYNTAX"], [277, 203, 10, "enum_LAST_LEXICAL_USE"], [276, 277, 9, "enum_NEXT_SYNTAX"], [277, 278, 9, "enum_NEXT_SYNTAX"], [278, 279, 9, "enum_NEXT_SYNTAX"], [279, 280, 9, "enum_NEXT_SYNTAX"], [280, 281, 9, "enum_NEXT_SYNTAX"], [281, 282, 9, "enum_NEXT_SYNTAX"], [282, 283, 9, "enum_NEXT_SYNTAX"], [283, 284, 9, "enum_NEXT_SYNTAX"], [284, 285, 9, "enum_NEXT_SYNTAX"], [286, 270, 10, "enum_LAST_LEXICAL_USE"], [285, 286, 9, "enum_NEXT_SYNTAX"], [286, 287, 9, "enum_NEXT_SYNTAX"], [287, 288, 9, "enum_NEXT_SYNTAX"], [288, 289, 9, "enum_NEXT_SYNTAX"], [289, 290, 9, "enum_NEXT_SYNTAX"], [290, 291, 9, "enum_NEXT_SYNTAX"], [291, 292, 9, "enum_NEXT_SYNTAX"], [292, 293, 9, "enum_NEXT_SYNTAX"], [293, 294, 9, "enum_NEXT_SYNTAX"], [294, 295, 9, "enum_NEXT_SYNTAX"], [296, 284, 10, "enum_LAST_LEXICAL_USE"], [295, 296, 9, "enum_NEXT_SYNTAX"], [296, 297, 9, "enum_NEXT_SYNTAX"], [297, 298, 9, "enum_NEXT_SYNTAX"], [298, 299, 9, "enum_NEXT_SYNTAX"], [299, 300, 9, "enum_NEXT_SYNTAX"], [300, 301, 9, "enum_NEXT_SYNTAX"], [301, 302, 9, "enum_NEXT_SYNTAX"], [303, 290, 10, "enum_LAST_LEXICAL_USE"], [302, 303, 9, "enum_NEXT_SYNTAX"], [303, 304, 9, "enum_NEXT_SYNTAX"], [304, 305, 9, "enum_NEXT_SYNTAX"], [305, 306, 9, "enum_NEXT_SYNTAX"], [306, 307, 9, "enum_NEXT_SYNTAX"], [307, 308, 9, "enum_NEXT_SYNTAX"], [308, 309, 9, "enum_NEXT_SYNTAX"], [310, 299, 10, "enum_LAST_LEXICAL_USE"], [309, 310, 9, "enum_NEXT_SYNTAX"], [310, 311, 9, "enum_NEXT_SYNTAX"], [311, 312, 9, "enum_NEXT_SYNTAX"], [312, 313, 9, "enum_NEXT_SYNTAX"], [313, 314, 9, "enum_NEXT_SYNTAX"], [314, 315, 9, "enum_NEXT_SYNTAX"], [315, 316, 9, "enum_NEXT_SYNTAX"], [316, 318, 9, "enum_NEXT_SYNTAX"], [318, 319, 9, "enum_NEXT_SYNTAX"], [319, 320, 9, "enum_NEXT_SYNTAX"], [321, 306, 10, "enum_LAST_LEXICAL_USE"], [320, 321, 9, "enum_NEXT_SYNTAX"], [321, 322, 9, "enum_NEXT_SYNTAX"], [322, 324, 9, "enum_NEXT_SYNTAX"], [325, 277, 10, "enum_LAST_LEXICAL_USE"], [324, 325, 9, "enum_NEXT_SYNTAX"], [325, 326, 9, "enum_NEXT_SYNTAX"], [326, 327, 9, "enum_NEXT_SYNTAX"], [327, 328, 9, "enum_NEXT_SYNTAX"], [328, 329, 9, "enum_NEXT_SYNTAX"], [329, 330, 9, "enum_NEXT_SYNTAX"], [330, 331, 9, "enum_NEXT_SYNTAX"], [331, 332, 9, "enum_NEXT_SYNTAX"], [333, 319, 10, "enum_LAST_LEXICAL_USE"], [332, 333, 9, "enum_NEXT_SYNTAX"], [333, 334, 9, "enum_NEXT_SYNTAX"], [334, 335, 9, "enum_NEXT_SYNTAX"], [335, 336, 9, "enum_NEXT_SYNTAX"], [337, 333, 10, "enum_LAST_LEXICAL_USE"], [336, 337, 9, "enum_NEXT_SYNTAX"], [337, 338, 9, "enum_NEXT_SYNTAX"], [338, 339, 9, "enum_NEXT_SYNTAX"], [339, 340, 9, "enum_NEXT_SYNTAX"], [340, 341, 9, "enum_NEXT_SYNTAX"], [341, 345, 9, "enum_NEXT_SYNTAX"], [346, 286, 10, "enum_LAST_LEXICAL_USE"], [345, 346, 9, "enum_NEXT_SYNTAX"], [5, 18, 1, "enum_CFG_NEXT"], [18, 20, 1, "enum_CFG_NEXT"], [20, 37, 1, "enum_CFG_NEXT"], [37, 98, 1, "enum_CFG_NEXT"], [49, 44, 1, "enum_CFG_NEXT"], [44, 66, 1, "enum_CFG_NEXT"], [66, 76, 1, "enum_CFG_NEXT"], [76, 44, 1, "enum_CFG_NEXT"], [98, 112, 1, "enum_CFG_NEXT"], [98, 180, 1, "enum_CFG_NEXT"], [112, 119, 1, "enum_CFG_NEXT"], [119, 126, 1, "enum_CFG_NEXT"], [126, 133, 1, "enum_CFG_NEXT"], [133, 140, 1, "enum_CFG_NEXT"], [140, 147, 1, "enum_CFG_NEXT"], [147, 154, 1, "enum_CFG_NEXT"], [154, 202, 1, "enum_CFG_NEXT"], [180, 202, 1, "enum_CFG_NEXT"], [202, 220, 1, "enum_CFG_NEXT"], [220, 232, 1, "enum_CFG_NEXT"], [220, 269, 1, "enum_CFG_NEXT"], [232, 235, 1, "enum_CFG_NEXT"], [232, 250, 1, "enum_CFG_NEXT"], [235, 239, 1, "enum_CFG_NEXT"], [250, 253, 1, "enum_CFG_NEXT"], [253, 257, 1, "enum_CFG_NEXT"], [269, 276, 1, "enum_CFG_NEXT"], [269, 345, 1, "enum_CFG_NEXT"], [276, 283, 1, "enum_CFG_NEXT"], [283, 289, 1, "enum_CFG_NEXT"], [289, 298, 1, "enum_CFG_NEXT"], [298, 305, 1, "enum_CFG_NEXT"], [305, 321, 1, "enum_CFG_NEXT"], [321, 319, 1, "enum_CFG_NEXT"], [319, 324, 1, "enum_CFG_NEXT"], [319, 345, 1, "enum_CFG_NEXT"], [324, 319, 1, "enum_CFG_NEXT"], [29, 4, 3, "enum_LAST_WRITE"], [31, 8, 3, "enum_LAST_WRITE"], [56, 36, 3, "enum_LAST_WRITE"], [43, 43, 3, "enum_LAST_WRITE"], [45, 81, 2, "enum_LAST_READ"], [45, 45, 3, "enum_LAST_WRITE"], [70, 81, 2, "enum_LAST_READ"], [70, 45, 3, "enum_LAST_WRITE"], [72, 59, 2, "enum_LAST_READ"], [72, 72, 2, "enum_LAST_READ"], [67, 83, 2, "enum_LAST_READ"], [67, 67, 3, "enum_LAST_WRITE"], [79, 56, 2, "enum_LAST_READ"], [79, 79, 2, "enum_LAST_READ"], [79, 36, 3, "enum_LAST_WRITE"], [81, 70, 2, "enum_LAST_READ"], [81, 45, 3, "enum_LAST_WRITE"], [83, 83, 2, "enum_LAST_READ"], [83, 67, 3, "enum_LAST_WRITE"], [92, 2, 3, "enum_LAST_WRITE"], [102, 6, 3, "enum_LAST_WRITE"], [105, 92, 2, "enum_LAST_READ"], [105, 2, 3, "enum_LAST_WRITE"], [113, 21, 2, "enum_LAST_READ"], [124, 31, 2, "enum_LAST_READ"], [124, 8, 3, "enum_LAST_WRITE"], [127, 120, 3, "enum_LAST_WRITE"], [134, 127, 2, "enum_LAST_READ"], [134, 120, 3, "enum_LAST_WRITE"], [141, 134, 2, "enum_LAST_READ"], [141, 120, 3, "enum_LAST_WRITE"], [150, 37, 3, "enum_LAST_WRITE"], [152, 102, 2, "enum_LAST_READ"], [152, 6, 3, "enum_LAST_WRITE"], [157, 105, 2, "enum_LAST_READ"], [157, 2, 3, "enum_LAST_WRITE"], [165, 29, 2, "enum_LAST_READ"], [165, 4, 3, "enum_LAST_WRITE"], [169, 148, 3, "enum_LAST_WRITE"], [173, 124, 2, "enum_LAST_READ"], [173, 8, 3, "enum_LAST_WRITE"], [183, 105, 2, "enum_LAST_READ"], [183, 2, 3, "enum_LAST_WRITE"], [191, 29, 2, "enum_LAST_READ"], [191, 4, 3, "enum_LAST_WRITE"], [195, 102, 2, "enum_LAST_READ"], [195, 6, 3, "enum_LAST_WRITE"], [199, 31, 2, "enum_LAST_READ"], [199, 8, 3, "enum_LAST_WRITE"], [203, 113, 2, "enum_LAST_READ"], [203, 21, 2, "enum_LAST_READ"], [211, 181, 3, "enum_LAST_WRITE"], [211, 155, 3, "enum_LAST_WRITE"], [221, 211, 2, "enum_LAST_READ"], [221, 181, 3, "enum_LAST_WRITE"], [221, 155, 3, "enum_LAST_WRITE"], [242, 235, 3, "enum_LAST_WRITE"], [247, 229, 2, "enum_LAST_READ"], [260, 253, 3, "enum_LAST_WRITE"], [270, 221, 2, "enum_LAST_READ"], [270, 181, 3, "enum_LAST_WRITE"], [270, 155, 3, "enum_LAST_WRITE"], [277, 203, 2, "enum_LAST_READ"], [286, 270, 2, "enum_LAST_READ"], [286, 181, 3, "enum_LAST_WRITE"], [286, 155, 3, "enum_LAST_WRITE"], [296, 284, 3, "enum_LAST_WRITE"], [303, 290, 3, "enum_LAST_WRITE"], [310, 299, 3, "enum_LAST_WRITE"], [321, 306, 3, "enum_LAST_WRITE"], [319, 337, 2, "enum_LAST_READ"], [319, 319, 3, "enum_LAST_WRITE"], [325, 325, 2, "enum_LAST_READ"], [325, 277, 2, "enum_LAST_READ"], [333, 337, 2, "enum_LAST_READ"], [333, 319, 3, "enum_LAST_WRITE"], [337, 333, 2, "enum_LAST_READ"], [337, 319, 3, "enum_LAST_WRITE"], [346, 270, 2, "enum_LAST_READ"], [346, 286, 2, "enum_LAST_READ"], [346, 181, 3, "enum_LAST_WRITE"], [346, 155, 3, "enum_LAST_WRITE"], [120, 122, 4, "enum_COMPUTED_FROM"], [120, 124, 4, "enum_COMPUTED_FROM"], [148, 150, 4, "enum_COMPUTED_FROM"], [148, 152, 4, "enum_COMPUTED_FROM"], [155, 165, 4, "enum_COMPUTED_FROM"], [155, 169, 4, "enum_COMPUTED_FROM"], [155, 173, 4, "enum_COMPUTED_FROM"], [155, 157, 4, "enum_COMPUTED_FROM"], [181, 191, 4, "enum_COMPUTED_FROM"], [181, 195, 4, "enum_COMPUTED_FROM"], [181, 199, 4, "enum_COMPUTED_FROM"], [181, 183, 4, "enum_COMPUTED_FROM"], [284, 286, 4, "enum_COMPUTED_FROM"], [290, 296, 4, "enum_COMPUTED_FROM"], [290, 292, 4, "enum_COMPUTED_FROM"], [299, 301, 4, "enum_COMPUTED_FROM"], [299, 303, 4, "enum_COMPUTED_FROM"], [306, 308, 4, "enum_COMPUTED_FROM"], [306, 310, 4, "enum_COMPUTED_FROM"], [67, 70, 4, "enum_COMPUTED_FROM"], [67, 72, 4, "enum_COMPUTED_FROM"], [151, 37, 11, "enum_CALLS"], [152, 36, 6, "enum_FORMAL_ARG_NAME"]], "error_location": 173, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/clindatsci/dicomweb-client.git", "old_path": "src/dicomweb_client/api.py", "hash": "a8426098bf10c893366be9043bc3366a47c22b48", "code": "def _http_post(\n        self,\n        url: str,\n        data: bytes,\n        headers: Dict[str, str]\n    ) -> requests.models.Response:\n    '''Performs a HTTP POST request.\n\n    Parameters\n    ----------\n    url: str\n        unique resource locator\n    data: bytes\n        HTTP request message payload\n    headers: Dict[str, str]\n        HTTP request message headers\n\n    Returns\n    -------\n    requests.models.Response\n        HTTP response message\n\n    '''\n    logger.debug('POST: {} {}'.format(url, headers))\n\n    def serve_data_chunks(data: bytes) -> Any:\n        for i, offset in enumerate(range(0, len(data), self._chunk_size)):\n            end: int = offset + self._chunk_size\n            yield data[offset:end]\n\n    if self._chunk_size is not None and len(data) > self._chunk_size:\n        logger.info('store data in chunks using chunked transfer encoding')\n        chunked_headers: Dict = dict(headers)\n        chunked_headers['Transfer-Encoding'] = 'chunked'\n        chunked_headers['Cache-Control'] = 'no-cache'\n        chunked_headers['Connection'] = 'Keep-Alive'\n        data_chunks: Any = serve_data_chunks(data)\n        response = self._session.post(\n            url=url,\n            data=data_chunks,\n            headers=headers\n        )\n    else:\n        response: requests.Response = self._session.post(url=url, data=data, headers=headers)\n    logger.debug('request status code: {}'.format(response.status_code))\n    try:\n        response.raise_for_status()\n    except requests.exceptions.HTTPError as error:\n\n        raise HTTPError(error)\n    except requests.exceptions.ConnectionError as error:\n        raise HTTPError(error[0])\n    if not response.ok:\n        logger.warning('storage was not successful for all instances')\n        payload: bytes = response.content\n        tree: ET.Element = ET.fromstring(payload)\n        dataset: Dataset = _load_xml_dataset(tree)\n        failed_sop_sequence: List = getattr(dataset, 'FailedSOPSequence', [])\n        for failed_sop_item in failed_sop_sequence:\n            logger.error(\n                'storage of instance {} failed: \"{}\"'.format(\n                    failed_sop_item.ReferencedSOPInstanceUID,\n                    failed_sop_item.FailureReason\n                )\n            )\n    return response\n", "rewrite": "ReplaceText(target='chunked_headers' @(1430,24)->(1430,31))", "error_line": 40, "has_bug": true, "code_full": "import logging\nimport xml.etree.ElementTree as ET\nfrom typing import Any, Dict, List\n\nimport pydicom\nimport requests\nfrom pydicom.dataset import Dataset\n\nlogger = logging.getLogger(__name__)\n\nclass HTTPError(Exception):\n    pass\n\ndef _load_xml_dataset(dataset: ET.Element) -> Dataset:\n    return Dataset()\n\nclass Class:\n    _chunk_size: int\n    _session: requests.Session\n\n    def _http_post(\n            self,\n            url: str,\n            data: bytes,\n            headers: Dict[str, str]\n        ) -> requests.models.Response:\n        '''Performs a HTTP POST request.\n\n        Parameters\n        ----------\n        url: str\n            unique resource locator\n        data: bytes\n            HTTP request message payload\n        headers: Dict[str, str]\n            HTTP request message headers\n\n        Returns\n        -------\n        requests.models.Response\n            HTTP response message\n\n        '''\n        logger.debug('POST: {} {}'.format(url, headers))\n\n        def serve_data_chunks(data: bytes) -> Any:\n            for i, offset in enumerate(range(0, len(data), self._chunk_size)):\n                end: int = offset + self._chunk_size\n                yield data[offset:end]\n\n        if self._chunk_size is not None and len(data) > self._chunk_size:\n            logger.info('store data in chunks using chunked transfer encoding')\n            chunked_headers: Dict = dict(headers)\n            chunked_headers['Transfer-Encoding'] = 'chunked'\n            chunked_headers['Cache-Control'] = 'no-cache'\n            chunked_headers['Connection'] = 'Keep-Alive'\n            data_chunks: Any = serve_data_chunks(data)\n            response = self._session.post(\n                url=url,\n                data=data_chunks,\n                headers=headers\n            )\n        else:\n            response: requests.Response = self._session.post(url=url, data=data, headers=headers)\n        logger.debug('request status code: {}'.format(response.status_code))\n        try:\n            response.raise_for_status()\n        except requests.exceptions.HTTPError as error:\n\n            raise HTTPError(error)\n        except requests.exceptions.ConnectionError as error:\n            raise HTTPError(error[0])\n        if not response.ok:\n            logger.warning('storage was not successful for all instances')\n            payload: bytes = response.content\n            tree: ET.Element = ET.fromstring(payload)\n            dataset: Dataset = _load_xml_dataset(tree)\n            failed_sop_sequence: List = getattr(dataset, 'FailedSOPSequence', [])\n            for failed_sop_item in failed_sop_sequence:\n                logger.error(\n                    'storage of instance {} failed: \"{}\"'.format(\n                        failed_sop_item.ReferencedSOPInstanceUID,\n                        failed_sop_item.FailureReason\n                    )\n                )\n        return response\n", "error_location_char": [1238, 1245], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def _itemproc_finished(", "self", ",", "output", ",", "item", ",", "spider", ")", ":", "#NEWLINE#", "#INDENT#", "'ItemProcessor finished for the given ``item`` and returned ``output``\\n    '", "#NEWLINE#", "self", ".", "sites", "[", "spider", "]", ".", "itemproc_size", "-=", "1", "#NEWLINE#", "if", "isinstance", "(", "output", ",", "Failure", ")", ":", "#NEWLINE#", "#INDENT#", "ex", "=", "output", ".", "value", "#NEWLINE#", "if", "isinstance", "(", "ex", ",", "DropItem", ")", ":", "#NEWLINE#", "#INDENT#", "log", ".", "msg", "(", "log", ".", "formatter", ".", "dropped", "(", "item", ",", "ex", ",", "spider", ")", ",", "level", "=", "log", ".", "WARNING", ",", "spider", "=", "spider", ")", "#NEWLINE#", "return", "send_catch_log_deferred", "(", "signal", "=", "signals", ".", "item_dropped", ",", "item", "=", "item", ",", "spider", "=", "spider", ",", "exception", "=", "output", ".", "value", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "log", ".", "err", "(", "output", ",", "(", "'Error processing %s'", "%", "item", ")", ",", "spider", "=", "spider", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "log", ".", "msg", "(", "log", ".", "formatter", ".", "passed", "(", "item", ",", "spider", ")", ",", "log", ".", "INFO", ",", "spider", "=", "spider", ")", "#NEWLINE#", "return", "send_catch_log_deferred", "(", "signal", "=", "signals", ".", "item_passed", ",", "item", "=", "item", ",", "spider", "=", "spider", ",", "output", "=", "output", ")"], "edges": [[1, 5, 7, "enum_FIELD"], [12, 13, 7, "enum_FIELD"], [14, 21, 7, "enum_FIELD"], [14, 24, 7, "enum_FIELD"], [33, 30, 7, "enum_FIELD"], [21, 18, 7, "enum_FIELD"], [30, 27, 7, "enum_FIELD"], [35, 39, 7, "enum_FIELD"], [49, 46, 7, "enum_FIELD"], [131, 146, 7, "enum_FIELD"], [156, 168, 7, "enum_FIELD"], [18, 16, 7, "enum_FIELD"], [18, 19, 7, "enum_FIELD"], [39, 38, 7, "enum_FIELD"], [46, 43, 7, "enum_FIELD"], [51, 68, 7, "enum_FIELD"], [80, 92, 7, "enum_FIELD"], [108, 114, 7, "enum_FIELD"], [146, 133, 7, "enum_FIELD"], [168, 157, 7, "enum_FIELD"], [16, 15, 7, "enum_FIELD"], [68, 53, 7, "enum_FIELD"], [92, 81, 7, "enum_FIELD"], [114, 110, 7, "enum_FIELD"], [133, 132, 7, "enum_FIELD"], [143, 139, 7, "enum_FIELD"], [148, 147, 7, "enum_FIELD"], [151, 153, 7, "enum_FIELD"], [159, 162, 7, "enum_FIELD"], [165, 167, 7, "enum_FIELD"], [169, 171, 7, "enum_FIELD"], [173, 175, 7, "enum_FIELD"], [53, 52, 7, "enum_FIELD"], [63, 59, 7, "enum_FIELD"], [69, 72, 7, "enum_FIELD"], [75, 77, 7, "enum_FIELD"], [83, 86, 7, "enum_FIELD"], [89, 91, 7, "enum_FIELD"], [93, 95, 7, "enum_FIELD"], [97, 100, 7, "enum_FIELD"], [110, 109, 7, "enum_FIELD"], [117, 116, 7, "enum_FIELD"], [117, 118, 7, "enum_FIELD"], [121, 123, 7, "enum_FIELD"], [139, 137, 7, "enum_FIELD"], [162, 161, 7, "enum_FIELD"], [59, 57, 7, "enum_FIELD"], [72, 71, 7, "enum_FIELD"], [86, 85, 7, "enum_FIELD"], [100, 99, 7, "enum_FIELD"], [137, 136, 7, "enum_FIELD"], [57, 56, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [15, 2, 10, "enum_LAST_LEXICAL_USE"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [19, 8, 10, "enum_LAST_LEXICAL_USE"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [29, 4, 10, "enum_LAST_LEXICAL_USE"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [38, 29, 10, "enum_LAST_LEXICAL_USE"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 42, 9, "enum_NEXT_SYNTAX"], [43, 27, 10, "enum_LAST_LEXICAL_USE"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [45, 36, 10, "enum_LAST_LEXICAL_USE"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [56, 52, 10, "enum_LAST_LEXICAL_USE"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [62, 6, 10, "enum_LAST_LEXICAL_USE"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [64, 45, 10, "enum_LAST_LEXICAL_USE"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [66, 19, 10, "enum_LAST_LEXICAL_USE"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [71, 56, 10, "enum_LAST_LEXICAL_USE"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [77, 66, 10, "enum_LAST_LEXICAL_USE"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [91, 62, 10, "enum_LAST_LEXICAL_USE"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [95, 77, 10, "enum_LAST_LEXICAL_USE"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [99, 38, 10, "enum_LAST_LEXICAL_USE"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 108, 9, "enum_NEXT_SYNTAX"], [109, 71, 10, "enum_LAST_LEXICAL_USE"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [113, 99, 10, "enum_LAST_LEXICAL_USE"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [118, 91, 10, "enum_LAST_LEXICAL_USE"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [123, 95, 10, "enum_LAST_LEXICAL_USE"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 131, 9, "enum_NEXT_SYNTAX"], [132, 109, 10, "enum_LAST_LEXICAL_USE"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [136, 132, 10, "enum_LAST_LEXICAL_USE"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [142, 118, 10, "enum_LAST_LEXICAL_USE"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [144, 123, 10, "enum_LAST_LEXICAL_USE"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [147, 136, 10, "enum_LAST_LEXICAL_USE"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [153, 144, 10, "enum_LAST_LEXICAL_USE"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 156, 9, "enum_NEXT_SYNTAX"], [157, 81, 10, "enum_LAST_LEXICAL_USE"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [161, 85, 10, "enum_LAST_LEXICAL_USE"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [167, 142, 10, "enum_LAST_LEXICAL_USE"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [171, 153, 10, "enum_LAST_LEXICAL_USE"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [175, 113, 10, "enum_LAST_LEXICAL_USE"], [174, 175, 9, "enum_NEXT_SYNTAX"], [175, 176, 9, "enum_NEXT_SYNTAX"], [5, 12, 1, "enum_CFG_NEXT"], [12, 14, 1, "enum_CFG_NEXT"], [14, 30, 1, "enum_CFG_NEXT"], [30, 131, 1, "enum_CFG_NEXT"], [30, 35, 1, "enum_CFG_NEXT"], [35, 46, 1, "enum_CFG_NEXT"], [46, 108, 1, "enum_CFG_NEXT"], [46, 51, 1, "enum_CFG_NEXT"], [51, 80, 1, "enum_CFG_NEXT"], [131, 156, 1, "enum_CFG_NEXT"], [15, 2, 3, "enum_LAST_WRITE"], [19, 8, 3, "enum_LAST_WRITE"], [29, 4, 3, "enum_LAST_WRITE"], [38, 29, 2, "enum_LAST_READ"], [38, 4, 3, "enum_LAST_WRITE"], [43, 27, 2, "enum_LAST_READ"], [45, 36, 3, "enum_LAST_WRITE"], [56, 52, 2, "enum_LAST_READ"], [62, 6, 3, "enum_LAST_WRITE"], [64, 45, 2, "enum_LAST_READ"], [64, 36, 3, "enum_LAST_WRITE"], [66, 19, 2, "enum_LAST_READ"], [66, 8, 3, "enum_LAST_WRITE"], [71, 56, 2, "enum_LAST_READ"], [77, 66, 2, "enum_LAST_READ"], [77, 8, 3, "enum_LAST_WRITE"], [91, 62, 2, "enum_LAST_READ"], [91, 6, 3, "enum_LAST_WRITE"], [95, 77, 2, "enum_LAST_READ"], [95, 8, 3, "enum_LAST_WRITE"], [99, 38, 2, "enum_LAST_READ"], [99, 4, 3, "enum_LAST_WRITE"], [113, 38, 2, "enum_LAST_READ"], [113, 4, 3, "enum_LAST_WRITE"], [118, 6, 3, "enum_LAST_WRITE"], [123, 19, 2, "enum_LAST_READ"], [123, 8, 3, "enum_LAST_WRITE"], [136, 132, 2, "enum_LAST_READ"], [142, 6, 3, "enum_LAST_WRITE"], [144, 19, 2, "enum_LAST_READ"], [144, 8, 3, "enum_LAST_WRITE"], [147, 136, 2, "enum_LAST_READ"], [153, 144, 2, "enum_LAST_READ"], [153, 8, 3, "enum_LAST_WRITE"], [167, 142, 2, "enum_LAST_READ"], [167, 6, 3, "enum_LAST_WRITE"], [171, 153, 2, "enum_LAST_READ"], [171, 8, 3, "enum_LAST_WRITE"], [175, 29, 2, "enum_LAST_READ"], [175, 4, 3, "enum_LAST_WRITE"], [36, 38, 4, "enum_COMPUTED_FROM"]], "error_location": 142, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/Bob-Du/scrapy3.git", "old_path": "scrapy/core/scraper.py", "hash": "1cc5cba69b3d8a5ac1fc26168e047a17604c55bc", "code": "def _itemproc_finished(self, output: Any, item: Any, spider: Any) -> Any:\n    \"\"\"ItemProcessor finished for the given ``item`` and returned ``output``\n    \"\"\"\n    self.sites[spider].itemproc_size -= 1\n    if isinstance(output, Failure):\n        ex: Any = output.value\n        if isinstance(ex, DropItem):\n            log.msg(log.formatter.dropped(item, ex, spider),                 level=log.WARNING, spider=spider)\n            return send_catch_log_deferred(signal=signals.item_dropped,                 item=item, spider=spider, exception=output.value)\n        else:\n            log.err(output, 'Error processing %s' % item, spider=spider)\n    else:\n        log.msg(log.formatter.passed(item, spider), log.INFO, spider=spider)\n        return send_catch_log_deferred(signal=signals.item_passed,             item=item, spider=spider, output=output)\n", "rewrite": "ReplaceText(target='output' @(211,41)->(211,45))", "error_line": 14, "has_bug": true, "code_full": "from typing import Any, Dict\n\nfrom scrapy import log, signals\nfrom scrapy.exceptions import DropItem\nfrom twisted.python.failure import Failure\n\n\ndef send_catch_log_deferred(signal: Any, item: Any, spider: Any, exception: Any=None, output: Any=None) -> Any:\n    pass\n\nclass Class:\n    sites: Dict[Any, Any]\n\n    def _itemproc_finished(self, output: Any, item: Any, spider: Any) -> Any:\n        \"\"\"ItemProcessor finished for the given ``item`` and returned ``output``\n        \"\"\"\n        self.sites[spider].itemproc_size -= 1\n        if isinstance(output, Failure):\n            ex: Any = output.value\n            if isinstance(ex, DropItem):\n                log.msg(log.formatter.dropped(item, ex, spider),                     level=log.WARNING, spider=spider)\n                return send_catch_log_deferred(signal=signals.item_dropped,                     item=item, spider=spider, exception=output.value)\n            else:\n                log.err(output, 'Error processing %s' % item, spider=spider)\n        else:\n            log.msg(log.formatter.passed(item, spider), log.INFO, spider=spider)\n            return send_catch_log_deferred(signal=signals.item_passed,                 item=item, spider=spider, output=output)\n", "error_location_char": [688, 692], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def update(", "self", ",", "*", "args", ",", "**kwargs", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        update task properties\\n        can be passed dict as argv\\n        or kwargs\\n    '", "#NEWLINE#", "cfg", "=", "{", "}", "#NEWLINE#", "for", "arg", "in", "args", ":", "#NEWLINE#", "#INDENT#", "if", "(", "not", "isinstance", "(", "arg", ",", "dict", ")", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "ValueError", "(", "'arg must be dict isinstance'", ")", "#NEWLINE#", "#UNINDENT#", "cfg", ".", "update", "(", "arg", ")", "#NEWLINE#", "#UNINDENT#", "cfg", ".", "update", "(", "kwargs", ")", "#NEWLINE#", "if", "(", "'shedule'", "in", "cfg", ")", ":", "#NEWLINE#", "#INDENT#", "cfg", "[", "'shedule'", "]", "=", "self", ".", "_convert_shedule", "(", "cfg", "[", "'shedule'", "]", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "cfg", ".", "update", "(", "kwargs", ")"], "edges": [[1, 4, 7, "enum_FIELD"], [4, 5, 7, "enum_FIELD"], [11, 12, 7, "enum_FIELD"], [13, 16, 7, "enum_FIELD"], [21, 20, 7, "enum_FIELD"], [21, 22, 7, "enum_FIELD"], [53, 57, 7, "enum_FIELD"], [61, 64, 7, "enum_FIELD"], [85, 91, 7, "enum_FIELD"], [26, 28, 7, "enum_FIELD"], [45, 49, 7, "enum_FIELD"], [57, 55, 7, "enum_FIELD"], [64, 63, 7, "enum_FIELD"], [69, 78, 7, "enum_FIELD"], [91, 89, 7, "enum_FIELD"], [28, 32, 7, "enum_FIELD"], [39, 41, 7, "enum_FIELD"], [49, 47, 7, "enum_FIELD"], [55, 54, 7, "enum_FIELD"], [71, 70, 7, "enum_FIELD"], [71, 72, 7, "enum_FIELD"], [78, 76, 7, "enum_FIELD"], [89, 87, 7, "enum_FIELD"], [32, 29, 7, "enum_FIELD"], [41, 40, 7, "enum_FIELD"], [47, 46, 7, "enum_FIELD"], [76, 75, 7, "enum_FIELD"], [80, 79, 7, "enum_FIELD"], [80, 81, 7, "enum_FIELD"], [87, 86, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [22, 5, 10, "enum_LAST_LEXICAL_USE"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [31, 20, 10, "enum_LAST_LEXICAL_USE"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 45, 9, "enum_NEXT_SYNTAX"], [46, 14, 10, "enum_LAST_LEXICAL_USE"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [50, 31, 10, "enum_LAST_LEXICAL_USE"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 53, 9, "enum_NEXT_SYNTAX"], [54, 46, 10, "enum_LAST_LEXICAL_USE"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [65, 54, 10, "enum_LAST_LEXICAL_USE"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 69, 9, "enum_NEXT_SYNTAX"], [70, 65, 10, "enum_LAST_LEXICAL_USE"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [75, 2, 10, "enum_LAST_LEXICAL_USE"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [79, 70, 10, "enum_LAST_LEXICAL_USE"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 85, 9, "enum_NEXT_SYNTAX"], [86, 75, 10, "enum_LAST_LEXICAL_USE"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [92, 58, 10, "enum_LAST_LEXICAL_USE"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [4, 11, 1, "enum_CFG_NEXT"], [11, 13, 1, "enum_CFG_NEXT"], [13, 22, 1, "enum_CFG_NEXT"], [22, 20, 1, "enum_CFG_NEXT"], [20, 53, 1, "enum_CFG_NEXT"], [20, 28, 1, "enum_CFG_NEXT"], [28, 39, 1, "enum_CFG_NEXT"], [28, 45, 1, "enum_CFG_NEXT"], [45, 20, 1, "enum_CFG_NEXT"], [53, 64, 1, "enum_CFG_NEXT"], [64, 85, 1, "enum_CFG_NEXT"], [64, 69, 1, "enum_CFG_NEXT"], [69, 85, 1, "enum_CFG_NEXT"], [22, 5, 3, "enum_LAST_WRITE"], [20, 50, 2, "enum_LAST_READ"], [20, 20, 3, "enum_LAST_WRITE"], [29, 29, 2, "enum_LAST_READ"], [31, 50, 2, "enum_LAST_READ"], [31, 20, 3, "enum_LAST_WRITE"], [33, 33, 2, "enum_LAST_READ"], [46, 46, 2, "enum_LAST_READ"], [46, 14, 3, "enum_LAST_WRITE"], [50, 31, 2, "enum_LAST_READ"], [50, 20, 3, "enum_LAST_WRITE"], [54, 46, 2, "enum_LAST_READ"], [54, 14, 3, "enum_LAST_WRITE"], [65, 54, 2, "enum_LAST_READ"], [65, 14, 3, "enum_LAST_WRITE"], [75, 2, 3, "enum_LAST_WRITE"], [79, 65, 2, "enum_LAST_READ"], [79, 14, 3, "enum_LAST_WRITE"], [70, 79, 2, "enum_LAST_READ"], [70, 14, 3, "enum_LAST_WRITE"], [86, 75, 2, "enum_LAST_READ"], [86, 2, 3, "enum_LAST_WRITE"], [92, 58, 2, "enum_LAST_READ"], [71, 75, 4, "enum_COMPUTED_FROM"], [71, 79, 4, "enum_COMPUTED_FROM"]], "error_location": 92, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/moff4/kframe.git", "old_path": "kframe/plugins/planner/task.py", "hash": "85c41d1f13cb2c7d79787bbe35de661aa6c6b824", "code": "def update(self, *args: Tuple[Any], **kwargs: Dict[str, Any]):\n    \"\"\"\n        update task properties\n        can be passed dict as argv\n        or kwargs\n    \"\"\"\n    cfg: Dict[str, Any] = {}\n    for arg in args:\n        if not isinstance(arg, dict):\n            raise ValueError('arg must be dict isinstance')\n        cfg.update(arg)\n    cfg.update(kwargs)\n    if 'shedule' in cfg:\n        cfg['shedule'] = self._convert_shedule(cfg['shedule'])\n    self.cfg.update(kwargs)\n", "rewrite": "ReplaceText(target='cfg' @(332,24)->(332,30))", "error_line": 14, "has_bug": true, "code_full": "from typing import Any, Dict, Tuple\n\n\nclass Class:\n    cfg: Dict[str, Any] = {}\n\n    def _convert_shedule(self, shedule: Any) -> Any:\n        return None\n\n    def update(self, *args: Tuple[Any], **kwargs: Dict[str, Any]):\n        \"\"\"\n            update task properties\n            can be passed dict as argv\n            or kwargs\n        \"\"\"\n        cfg: Dict[str, Any] = {}\n        for arg in args:\n            if not isinstance(arg, dict):\n                raise ValueError('arg must be dict isinstance')\n            cfg.update(arg)\n        cfg.update(kwargs)\n        if 'shedule' in cfg:\n            cfg['shedule'] = self._convert_shedule(cfg['shedule'])\n        self.cfg.update(kwargs)\n", "error_location_char": [466, 472], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def setup_decoder(", "self", ",", "**kwargs", ")", ":", "#NEWLINE#", "#INDENT#", "'Set up the \"decoding\" computations from layer activations to output.\\n    '", "#NEWLINE#", "parameter_count", "=", "0", "#NEWLINE#", "if", "self", ".", "tied_weights", ":", "#NEWLINE#", "#INDENT#", "for", "i", "in", "range", "(", "(", "len", "(", "self", ".", "weights", ")", "-", "1", ")", ",", "(", "-", "1", ")", ",", "(", "-", "1", ")", ")", ":", "#NEWLINE#", "#INDENT#", "h", "=", "self", ".", "hiddens", "[", "(", "-", "1", ")", "]", "#NEWLINE#", "(", "a", ",", "b", ")", "=", "self", ".", "weights", "[", "i", "]", ".", "get_value", "(", "borrow", "=", "True", ")", ".", "shape", "#NEWLINE#", "logging", ".", "info", "(", "'tied weights from layer %d: %s x %s'", ",", "i", ",", "b", ",", "a", ")", "#NEWLINE#", "o", "=", "theano", ".", "shared", "(", "np", ".", "zeros", "(", "(", "b", ",", ")", ",", "FLOAT", ")", ",", "name", "=", "'b_out{}'", ".", "format", "(", "i", ")", ")", "#NEWLINE#", "self", ".", "preacts", ".", "append", "(", "(", "TT", ".", "dot", "(", "h", ",", "self", ".", "weights", "[", "i", "]", ".", "T", ")", "+", "o", ")", ")", "#NEWLINE#", "func", "=", "(", "self", ".", "_output_func", "if", "(", "i", "==", "0", ")", "else", "self", ".", "_hidden_func", ")", "#NEWLINE#", "self", ".", "hiddens", ".", "append", "(", "func", "(", "self", ".", "preacts", "[", "(", "-", "1", ")", "]", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "B", "=", "(", "len", "(", "self", ".", "biases", ")", "-", "1", ")", "#NEWLINE#", "n", "=", "self", ".", "layers", "[", "(", "-", "1", ")", "]", "#NEWLINE#", "decoders", "=", "[", "]", "#NEWLINE#", "for", "i", "in", "range", "(", "B", ",", "(", "B", "-", "self", ".", "decode_from", ")", ",", "(", "-", "1", ")", ")", ":", "#NEWLINE#", "#INDENT#", "b", "=", "self", ".", "biases", "[", "i", "]", ".", "get_value", "(", "borrow", "=", "True", ")", ".", "shape", "[", "0", "]", "#NEWLINE#", "(", "Di", ",", "_", ",", "count", ")", "=", "self", ".", "create_layer", "(", "b", ",", "n", ",", "(", "'out_%d'", "%", "i", ")", ")", "#NEWLINE#", "parameter_count", "+=", "(", "count", "-", "n", ")", "#NEWLINE#", "decoders", ".", "append", "(", "TT", ".", "dot", "(", "self", ".", "hiddens", "[", "i", "]", ",", "Di", ")", ")", "#NEWLINE#", "self", ".", "weights", ".", "append", "(", "Di", ")", "#NEWLINE#", "#UNINDENT#", "parameter_count", "+=", "n", "#NEWLINE#", "bias", "=", "theano", ".", "shared", "(", "np", ".", "zeros", "(", "(", "n", ",", ")", ",", "FLOAT", ")", ",", "name", "=", "'bias_out'", ")", "#NEWLINE#", "self", ".", "biases", ".", "append", "(", "bias", ")", "#NEWLINE#", "self", ".", "preacts", ".", "append", "(", "(", "sum", "(", "decoders", ")", "+", "bias", ")", ")", "#NEWLINE#", "self", ".", "hiddens", ".", "append", "(", "self", ".", "_output_func", "(", "self", ".", "preacts", "[", "(", "-", "1", ")", "]", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "(", "self", ".", "hiddens", ".", "pop", "(", ")", ",", "parameter_count", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [8, 9, 7, "enum_FIELD"], [10, 13, 7, "enum_FIELD"], [19, 17, 7, "enum_FIELD"], [406, 415, 7, "enum_FIELD"], [17, 16, 7, "enum_FIELD"], [24, 23, 7, "enum_FIELD"], [24, 37, 7, "enum_FIELD"], [196, 206, 7, "enum_FIELD"], [209, 215, 7, "enum_FIELD"], [221, 224, 7, "enum_FIELD"], [229, 228, 7, "enum_FIELD"], [229, 233, 7, "enum_FIELD"], [330, 331, 7, "enum_FIELD"], [330, 333, 7, "enum_FIELD"], [334, 352, 7, "enum_FIELD"], [357, 363, 7, "enum_FIELD"], [366, 372, 7, "enum_FIELD"], [382, 388, 7, "enum_FIELD"], [37, 25, 7, "enum_FIELD"], [50, 56, 7, "enum_FIELD"], [62, 82, 7, "enum_FIELD"], [84, 92, 7, "enum_FIELD"], [97, 115, 7, "enum_FIELD"], [125, 131, 7, "enum_FIELD"], [152, 159, 7, "enum_FIELD"], [170, 176, 7, "enum_FIELD"], [206, 201, 7, "enum_FIELD"], [206, 207, 7, "enum_FIELD"], [215, 213, 7, "enum_FIELD"], [215, 217, 7, "enum_FIELD"], [233, 230, 7, "enum_FIELD"], [249, 267, 7, "enum_FIELD"], [270, 284, 7, "enum_FIELD"], [293, 294, 7, "enum_FIELD"], [293, 298, 7, "enum_FIELD"], [301, 305, 7, "enum_FIELD"], [320, 326, 7, "enum_FIELD"], [352, 338, 7, "enum_FIELD"], [363, 361, 7, "enum_FIELD"], [372, 370, 7, "enum_FIELD"], [388, 386, 7, "enum_FIELD"], [413, 411, 7, "enum_FIELD"], [34, 29, 7, "enum_FIELD"], [34, 35, 7, "enum_FIELD"], [39, 40, 7, "enum_FIELD"], [44, 45, 7, "enum_FIELD"], [56, 54, 7, "enum_FIELD"], [56, 58, 7, "enum_FIELD"], [82, 77, 7, "enum_FIELD"], [92, 86, 7, "enum_FIELD"], [115, 101, 7, "enum_FIELD"], [131, 129, 7, "enum_FIELD"], [159, 162, 7, "enum_FIELD"], [159, 157, 7, "enum_FIELD"], [159, 167, 7, "enum_FIELD"], [176, 174, 7, "enum_FIELD"], [201, 200, 7, "enum_FIELD"], [213, 212, 7, "enum_FIELD"], [217, 218, 7, "enum_FIELD"], [236, 235, 7, "enum_FIELD"], [236, 238, 7, "enum_FIELD"], [243, 244, 7, "enum_FIELD"], [267, 265, 7, "enum_FIELD"], [267, 268, 7, "enum_FIELD"], [284, 280, 7, "enum_FIELD"], [298, 297, 7, "enum_FIELD"], [298, 299, 7, "enum_FIELD"], [305, 303, 7, "enum_FIELD"], [326, 324, 7, "enum_FIELD"], [338, 337, 7, "enum_FIELD"], [349, 342, 7, "enum_FIELD"], [353, 355, 7, "enum_FIELD"], [361, 359, 7, "enum_FIELD"], [370, 368, 7, "enum_FIELD"], [378, 375, 7, "enum_FIELD"], [378, 379, 7, "enum_FIELD"], [386, 384, 7, "enum_FIELD"], [392, 390, 7, "enum_FIELD"], [411, 409, 7, "enum_FIELD"], [29, 28, 7, "enum_FIELD"], [54, 53, 7, "enum_FIELD"], [58, 59, 7, "enum_FIELD"], [77, 75, 7, "enum_FIELD"], [86, 85, 7, "enum_FIELD"], [101, 100, 7, "enum_FIELD"], [112, 105, 7, "enum_FIELD"], [116, 121, 7, "enum_FIELD"], [129, 127, 7, "enum_FIELD"], [148, 138, 7, "enum_FIELD"], [148, 149, 7, "enum_FIELD"], [162, 161, 7, "enum_FIELD"], [157, 156, 7, "enum_FIELD"], [167, 166, 7, "enum_FIELD"], [174, 172, 7, "enum_FIELD"], [178, 177, 7, "enum_FIELD"], [203, 202, 7, "enum_FIELD"], [238, 237, 7, "enum_FIELD"], [265, 260, 7, "enum_FIELD"], [280, 279, 7, "enum_FIELD"], [289, 288, 7, "enum_FIELD"], [289, 290, 7, "enum_FIELD"], [303, 302, 7, "enum_FIELD"], [316, 307, 7, "enum_FIELD"], [324, 322, 7, "enum_FIELD"], [342, 341, 7, "enum_FIELD"], [359, 358, 7, "enum_FIELD"], [368, 367, 7, "enum_FIELD"], [375, 374, 7, "enum_FIELD"], [384, 383, 7, "enum_FIELD"], [390, 389, 7, "enum_FIELD"], [396, 394, 7, "enum_FIELD"], [396, 398, 7, "enum_FIELD"], [409, 408, 7, "enum_FIELD"], [31, 30, 7, "enum_FIELD"], [75, 72, 7, "enum_FIELD"], [78, 80, 7, "enum_FIELD"], [105, 104, 7, "enum_FIELD"], [121, 119, 7, "enum_FIELD"], [127, 126, 7, "enum_FIELD"], [138, 134, 7, "enum_FIELD"], [172, 171, 7, "enum_FIELD"], [182, 180, 7, "enum_FIELD"], [182, 184, 7, "enum_FIELD"], [260, 258, 7, "enum_FIELD"], [307, 306, 7, "enum_FIELD"], [313, 311, 7, "enum_FIELD"], [313, 314, 7, "enum_FIELD"], [322, 321, 7, "enum_FIELD"], [394, 393, 7, "enum_FIELD"], [398, 399, 7, "enum_FIELD"], [72, 70, 7, "enum_FIELD"], [72, 73, 7, "enum_FIELD"], [119, 118, 7, "enum_FIELD"], [134, 133, 7, "enum_FIELD"], [145, 142, 7, "enum_FIELD"], [180, 179, 7, "enum_FIELD"], [184, 185, 7, "enum_FIELD"], [258, 255, 7, "enum_FIELD"], [261, 263, 7, "enum_FIELD"], [311, 310, 7, "enum_FIELD"], [70, 69, 7, "enum_FIELD"], [142, 140, 7, "enum_FIELD"], [142, 143, 7, "enum_FIELD"], [255, 253, 7, "enum_FIELD"], [255, 256, 7, "enum_FIELD"], [140, 139, 7, "enum_FIELD"], [253, 252, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 15, 9, "enum_NEXT_SYNTAX"], [16, 2, 10, "enum_LAST_LEXICAL_USE"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [30, 16, 10, "enum_LAST_LEXICAL_USE"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [53, 30, 10, "enum_LAST_LEXICAL_USE"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [69, 53, 10, "enum_LAST_LEXICAL_USE"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [73, 23, 10, "enum_LAST_LEXICAL_USE"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [91, 73, 10, "enum_LAST_LEXICAL_USE"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [93, 66, 10, "enum_LAST_LEXICAL_USE"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [95, 64, 10, "enum_LAST_LEXICAL_USE"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [109, 93, 10, "enum_LAST_LEXICAL_USE"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [122, 91, 10, "enum_LAST_LEXICAL_USE"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [126, 69, 10, "enum_LAST_LEXICAL_USE"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [137, 51, 10, "enum_LAST_LEXICAL_USE"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [139, 126, 10, "enum_LAST_LEXICAL_USE"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [143, 122, 10, "enum_LAST_LEXICAL_USE"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [149, 98, 10, "enum_LAST_LEXICAL_USE"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [156, 139, 10, "enum_LAST_LEXICAL_USE"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [161, 143, 10, "enum_LAST_LEXICAL_USE"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [166, 156, 10, "enum_LAST_LEXICAL_USE"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [171, 166, 10, "enum_LAST_LEXICAL_USE"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [175, 176, 9, "enum_NEXT_SYNTAX"], [177, 153, 10, "enum_LAST_LEXICAL_USE"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 178, 9, "enum_NEXT_SYNTAX"], [179, 171, 10, "enum_LAST_LEXICAL_USE"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 184, 9, "enum_NEXT_SYNTAX"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [187, 188, 9, "enum_NEXT_SYNTAX"], [188, 189, 9, "enum_NEXT_SYNTAX"], [189, 193, 9, "enum_NEXT_SYNTAX"], [193, 194, 9, "enum_NEXT_SYNTAX"], [194, 196, 9, "enum_NEXT_SYNTAX"], [196, 197, 9, "enum_NEXT_SYNTAX"], [197, 198, 9, "enum_NEXT_SYNTAX"], [198, 199, 9, "enum_NEXT_SYNTAX"], [200, 28, 10, "enum_LAST_LEXICAL_USE"], [199, 200, 9, "enum_NEXT_SYNTAX"], [200, 201, 9, "enum_NEXT_SYNTAX"], [202, 179, 10, "enum_LAST_LEXICAL_USE"], [201, 202, 9, "enum_NEXT_SYNTAX"], [202, 203, 9, "enum_NEXT_SYNTAX"], [203, 204, 9, "enum_NEXT_SYNTAX"], [204, 205, 9, "enum_NEXT_SYNTAX"], [205, 206, 9, "enum_NEXT_SYNTAX"], [206, 207, 9, "enum_NEXT_SYNTAX"], [207, 208, 9, "enum_NEXT_SYNTAX"], [208, 209, 9, "enum_NEXT_SYNTAX"], [209, 210, 9, "enum_NEXT_SYNTAX"], [210, 211, 9, "enum_NEXT_SYNTAX"], [212, 202, 10, "enum_LAST_LEXICAL_USE"], [211, 212, 9, "enum_NEXT_SYNTAX"], [212, 213, 9, "enum_NEXT_SYNTAX"], [213, 214, 9, "enum_NEXT_SYNTAX"], [214, 215, 9, "enum_NEXT_SYNTAX"], [215, 216, 9, "enum_NEXT_SYNTAX"], [216, 217, 9, "enum_NEXT_SYNTAX"], [217, 218, 9, "enum_NEXT_SYNTAX"], [218, 219, 9, "enum_NEXT_SYNTAX"], [219, 220, 9, "enum_NEXT_SYNTAX"], [220, 221, 9, "enum_NEXT_SYNTAX"], [221, 222, 9, "enum_NEXT_SYNTAX"], [222, 223, 9, "enum_NEXT_SYNTAX"], [223, 224, 9, "enum_NEXT_SYNTAX"], [224, 225, 9, "enum_NEXT_SYNTAX"], [225, 227, 9, "enum_NEXT_SYNTAX"], [228, 161, 10, "enum_LAST_LEXICAL_USE"], [227, 228, 9, "enum_NEXT_SYNTAX"], [228, 229, 9, "enum_NEXT_SYNTAX"], [230, 25, 10, "enum_LAST_LEXICAL_USE"], [229, 230, 9, "enum_NEXT_SYNTAX"], [230, 231, 9, "enum_NEXT_SYNTAX"], [232, 197, 10, "enum_LAST_LEXICAL_USE"], [231, 232, 9, "enum_NEXT_SYNTAX"], [232, 233, 9, "enum_NEXT_SYNTAX"], [233, 234, 9, "enum_NEXT_SYNTAX"], [235, 232, 10, "enum_LAST_LEXICAL_USE"], [234, 235, 9, "enum_NEXT_SYNTAX"], [235, 236, 9, "enum_NEXT_SYNTAX"], [237, 212, 10, "enum_LAST_LEXICAL_USE"], [236, 237, 9, "enum_NEXT_SYNTAX"], [237, 238, 9, "enum_NEXT_SYNTAX"], [238, 239, 9, "enum_NEXT_SYNTAX"], [239, 240, 9, "enum_NEXT_SYNTAX"], [240, 241, 9, "enum_NEXT_SYNTAX"], [241, 242, 9, "enum_NEXT_SYNTAX"], [242, 243, 9, "enum_NEXT_SYNTAX"], [243, 244, 9, "enum_NEXT_SYNTAX"], [244, 245, 9, "enum_NEXT_SYNTAX"], [245, 246, 9, "enum_NEXT_SYNTAX"], [246, 247, 9, "enum_NEXT_SYNTAX"], [247, 249, 9, "enum_NEXT_SYNTAX"], [250, 109, 10, "enum_LAST_LEXICAL_USE"], [249, 250, 9, "enum_NEXT_SYNTAX"], [250, 251, 9, "enum_NEXT_SYNTAX"], [252, 237, 10, "enum_LAST_LEXICAL_USE"], [251, 252, 9, "enum_NEXT_SYNTAX"], [252, 253, 9, "enum_NEXT_SYNTAX"], [253, 254, 9, "enum_NEXT_SYNTAX"], [254, 255, 9, "enum_NEXT_SYNTAX"], [256, 228, 10, "enum_LAST_LEXICAL_USE"], [255, 256, 9, "enum_NEXT_SYNTAX"], [256, 257, 9, "enum_NEXT_SYNTAX"], [257, 258, 9, "enum_NEXT_SYNTAX"], [258, 259, 9, "enum_NEXT_SYNTAX"], [259, 260, 9, "enum_NEXT_SYNTAX"], [260, 261, 9, "enum_NEXT_SYNTAX"], [261, 262, 9, "enum_NEXT_SYNTAX"], [262, 263, 9, "enum_NEXT_SYNTAX"], [263, 264, 9, "enum_NEXT_SYNTAX"], [264, 265, 9, "enum_NEXT_SYNTAX"], [265, 266, 9, "enum_NEXT_SYNTAX"], [266, 267, 9, "enum_NEXT_SYNTAX"], [267, 268, 9, "enum_NEXT_SYNTAX"], [268, 269, 9, "enum_NEXT_SYNTAX"], [269, 270, 9, "enum_NEXT_SYNTAX"], [270, 271, 9, "enum_NEXT_SYNTAX"], [271, 272, 9, "enum_NEXT_SYNTAX"], [272, 273, 9, "enum_NEXT_SYNTAX"], [273, 274, 9, "enum_NEXT_SYNTAX"], [274, 275, 9, "enum_NEXT_SYNTAX"], [275, 276, 9, "enum_NEXT_SYNTAX"], [276, 277, 9, "enum_NEXT_SYNTAX"], [277, 278, 9, "enum_NEXT_SYNTAX"], [279, 252, 10, "enum_LAST_LEXICAL_USE"], [278, 279, 9, "enum_NEXT_SYNTAX"], [279, 280, 9, "enum_NEXT_SYNTAX"], [280, 281, 9, "enum_NEXT_SYNTAX"], [281, 282, 9, "enum_NEXT_SYNTAX"], [283, 250, 10, "enum_LAST_LEXICAL_USE"], [282, 283, 9, "enum_NEXT_SYNTAX"], [283, 284, 9, "enum_NEXT_SYNTAX"], [285, 210, 10, "enum_LAST_LEXICAL_USE"], [284, 285, 9, "enum_NEXT_SYNTAX"], [285, 286, 9, "enum_NEXT_SYNTAX"], [286, 287, 9, "enum_NEXT_SYNTAX"], [287, 288, 9, "enum_NEXT_SYNTAX"], [288, 289, 9, "enum_NEXT_SYNTAX"], [290, 256, 10, "enum_LAST_LEXICAL_USE"], [289, 290, 9, "enum_NEXT_SYNTAX"], [290, 291, 9, "enum_NEXT_SYNTAX"], [291, 292, 9, "enum_NEXT_SYNTAX"], [292, 293, 9, "enum_NEXT_SYNTAX"], [294, 11, 10, "enum_LAST_LEXICAL_USE"], [293, 294, 9, "enum_NEXT_SYNTAX"], [294, 295, 9, "enum_NEXT_SYNTAX"], [295, 296, 9, "enum_NEXT_SYNTAX"], [297, 276, 10, "enum_LAST_LEXICAL_USE"], [296, 297, 9, "enum_NEXT_SYNTAX"], [297, 298, 9, "enum_NEXT_SYNTAX"], [299, 285, 10, "enum_LAST_LEXICAL_USE"], [298, 299, 9, "enum_NEXT_SYNTAX"], [299, 300, 9, "enum_NEXT_SYNTAX"], [300, 301, 9, "enum_NEXT_SYNTAX"], [302, 222, 10, "enum_LAST_LEXICAL_USE"], [301, 302, 9, "enum_NEXT_SYNTAX"], [302, 303, 9, "enum_NEXT_SYNTAX"], [303, 304, 9, "enum_NEXT_SYNTAX"], [304, 305, 9, "enum_NEXT_SYNTAX"], [306, 133, 10, "enum_LAST_LEXICAL_USE"], [305, 306, 9, "enum_NEXT_SYNTAX"], [306, 307, 9, "enum_NEXT_SYNTAX"], [307, 308, 9, "enum_NEXT_SYNTAX"], [308, 309, 9, "enum_NEXT_SYNTAX"], [310, 279, 10, "enum_LAST_LEXICAL_USE"], [309, 310, 9, "enum_NEXT_SYNTAX"], [310, 311, 9, "enum_NEXT_SYNTAX"], [311, 312, 9, "enum_NEXT_SYNTAX"], [312, 313, 9, "enum_NEXT_SYNTAX"], [314, 290, 10, "enum_LAST_LEXICAL_USE"], [313, 314, 9, "enum_NEXT_SYNTAX"], [314, 315, 9, "enum_NEXT_SYNTAX"], [315, 316, 9, "enum_NEXT_SYNTAX"], [317, 272, 10, "enum_LAST_LEXICAL_USE"], [316, 317, 9, "enum_NEXT_SYNTAX"], [317, 318, 9, "enum_NEXT_SYNTAX"], [318, 319, 9, "enum_NEXT_SYNTAX"], [319, 320, 9, "enum_NEXT_SYNTAX"], [321, 310, 10, "enum_LAST_LEXICAL_USE"], [320, 321, 9, "enum_NEXT_SYNTAX"], [321, 322, 9, "enum_NEXT_SYNTAX"], [322, 323, 9, "enum_NEXT_SYNTAX"], [323, 324, 9, "enum_NEXT_SYNTAX"], [324, 325, 9, "enum_NEXT_SYNTAX"], [325, 326, 9, "enum_NEXT_SYNTAX"], [327, 317, 10, "enum_LAST_LEXICAL_USE"], [326, 327, 9, "enum_NEXT_SYNTAX"], [327, 328, 9, "enum_NEXT_SYNTAX"], [328, 330, 9, "enum_NEXT_SYNTAX"], [331, 294, 10, "enum_LAST_LEXICAL_USE"], [330, 331, 9, "enum_NEXT_SYNTAX"], [331, 332, 9, "enum_NEXT_SYNTAX"], [333, 299, 10, "enum_LAST_LEXICAL_USE"], [332, 333, 9, "enum_NEXT_SYNTAX"], [333, 334, 9, "enum_NEXT_SYNTAX"], [334, 335, 9, "enum_NEXT_SYNTAX"], [335, 336, 9, "enum_NEXT_SYNTAX"], [337, 100, 10, "enum_LAST_LEXICAL_USE"], [336, 337, 9, "enum_NEXT_SYNTAX"], [337, 338, 9, "enum_NEXT_SYNTAX"], [338, 339, 9, "enum_NEXT_SYNTAX"], [339, 340, 9, "enum_NEXT_SYNTAX"], [341, 104, 10, "enum_LAST_LEXICAL_USE"], [340, 341, 9, "enum_NEXT_SYNTAX"], [341, 342, 9, "enum_NEXT_SYNTAX"], [342, 343, 9, "enum_NEXT_SYNTAX"], [343, 344, 9, "enum_NEXT_SYNTAX"], [344, 345, 9, "enum_NEXT_SYNTAX"], [346, 333, 10, "enum_LAST_LEXICAL_USE"], [345, 346, 9, "enum_NEXT_SYNTAX"], [346, 347, 9, "enum_NEXT_SYNTAX"], [347, 348, 9, "enum_NEXT_SYNTAX"], [348, 349, 9, "enum_NEXT_SYNTAX"], [350, 113, 10, "enum_LAST_LEXICAL_USE"], [349, 350, 9, "enum_NEXT_SYNTAX"], [350, 351, 9, "enum_NEXT_SYNTAX"], [351, 352, 9, "enum_NEXT_SYNTAX"], [352, 353, 9, "enum_NEXT_SYNTAX"], [353, 354, 9, "enum_NEXT_SYNTAX"], [354, 355, 9, "enum_NEXT_SYNTAX"], [355, 356, 9, "enum_NEXT_SYNTAX"], [356, 357, 9, "enum_NEXT_SYNTAX"], [358, 321, 10, "enum_LAST_LEXICAL_USE"], [357, 358, 9, "enum_NEXT_SYNTAX"], [358, 359, 9, "enum_NEXT_SYNTAX"], [359, 360, 9, "enum_NEXT_SYNTAX"], [360, 361, 9, "enum_NEXT_SYNTAX"], [361, 362, 9, "enum_NEXT_SYNTAX"], [362, 363, 9, "enum_NEXT_SYNTAX"], [364, 335, 10, "enum_LAST_LEXICAL_USE"], [363, 364, 9, "enum_NEXT_SYNTAX"], [364, 365, 9, "enum_NEXT_SYNTAX"], [365, 366, 9, "enum_NEXT_SYNTAX"], [367, 358, 10, "enum_LAST_LEXICAL_USE"], [366, 367, 9, "enum_NEXT_SYNTAX"], [367, 368, 9, "enum_NEXT_SYNTAX"], [368, 369, 9, "enum_NEXT_SYNTAX"], [369, 370, 9, "enum_NEXT_SYNTAX"], [370, 371, 9, "enum_NEXT_SYNTAX"], [371, 372, 9, "enum_NEXT_SYNTAX"], [372, 373, 9, "enum_NEXT_SYNTAX"], [373, 374, 9, "enum_NEXT_SYNTAX"], [374, 375, 9, "enum_NEXT_SYNTAX"], [376, 302, 10, "enum_LAST_LEXICAL_USE"], [375, 376, 9, "enum_NEXT_SYNTAX"], [376, 377, 9, "enum_NEXT_SYNTAX"], [377, 378, 9, "enum_NEXT_SYNTAX"], [379, 364, 10, "enum_LAST_LEXICAL_USE"], [378, 379, 9, "enum_NEXT_SYNTAX"], [379, 380, 9, "enum_NEXT_SYNTAX"], [380, 381, 9, "enum_NEXT_SYNTAX"], [381, 382, 9, "enum_NEXT_SYNTAX"], [383, 367, 10, "enum_LAST_LEXICAL_USE"], [382, 383, 9, "enum_NEXT_SYNTAX"], [383, 384, 9, "enum_NEXT_SYNTAX"], [384, 385, 9, "enum_NEXT_SYNTAX"], [385, 386, 9, "enum_NEXT_SYNTAX"], [386, 387, 9, "enum_NEXT_SYNTAX"], [387, 388, 9, "enum_NEXT_SYNTAX"], [389, 383, 10, "enum_LAST_LEXICAL_USE"], [388, 389, 9, "enum_NEXT_SYNTAX"], [389, 390, 9, "enum_NEXT_SYNTAX"], [390, 391, 9, "enum_NEXT_SYNTAX"], [391, 392, 9, "enum_NEXT_SYNTAX"], [393, 389, 10, "enum_LAST_LEXICAL_USE"], [392, 393, 9, "enum_NEXT_SYNTAX"], [393, 394, 9, "enum_NEXT_SYNTAX"], [394, 395, 9, "enum_NEXT_SYNTAX"], [395, 396, 9, "enum_NEXT_SYNTAX"], [396, 397, 9, "enum_NEXT_SYNTAX"], [397, 398, 9, "enum_NEXT_SYNTAX"], [398, 399, 9, "enum_NEXT_SYNTAX"], [399, 400, 9, "enum_NEXT_SYNTAX"], [400, 401, 9, "enum_NEXT_SYNTAX"], [401, 402, 9, "enum_NEXT_SYNTAX"], [402, 403, 9, "enum_NEXT_SYNTAX"], [403, 406, 9, "enum_NEXT_SYNTAX"], [406, 407, 9, "enum_NEXT_SYNTAX"], [408, 393, 10, "enum_LAST_LEXICAL_USE"], [407, 408, 9, "enum_NEXT_SYNTAX"], [408, 409, 9, "enum_NEXT_SYNTAX"], [409, 410, 9, "enum_NEXT_SYNTAX"], [410, 411, 9, "enum_NEXT_SYNTAX"], [411, 412, 9, "enum_NEXT_SYNTAX"], [412, 413, 9, "enum_NEXT_SYNTAX"], [413, 414, 9, "enum_NEXT_SYNTAX"], [414, 415, 9, "enum_NEXT_SYNTAX"], [416, 331, 10, "enum_LAST_LEXICAL_USE"], [415, 416, 9, "enum_NEXT_SYNTAX"], [416, 417, 9, "enum_NEXT_SYNTAX"], [3, 8, 1, "enum_CFG_NEXT"], [8, 10, 1, "enum_CFG_NEXT"], [10, 17, 1, "enum_CFG_NEXT"], [17, 37, 1, "enum_CFG_NEXT"], [17, 196, 1, "enum_CFG_NEXT"], [37, 23, 1, "enum_CFG_NEXT"], [23, 406, 1, "enum_CFG_NEXT"], [23, 50, 1, "enum_CFG_NEXT"], [50, 62, 1, "enum_CFG_NEXT"], [62, 84, 1, "enum_CFG_NEXT"], [84, 97, 1, "enum_CFG_NEXT"], [97, 125, 1, "enum_CFG_NEXT"], [125, 152, 1, "enum_CFG_NEXT"], [152, 170, 1, "enum_CFG_NEXT"], [170, 23, 1, "enum_CFG_NEXT"], [196, 209, 1, "enum_CFG_NEXT"], [209, 221, 1, "enum_CFG_NEXT"], [221, 233, 1, "enum_CFG_NEXT"], [233, 228, 1, "enum_CFG_NEXT"], [228, 330, 1, "enum_CFG_NEXT"], [228, 249, 1, "enum_CFG_NEXT"], [249, 270, 1, "enum_CFG_NEXT"], [270, 293, 1, "enum_CFG_NEXT"], [293, 301, 1, "enum_CFG_NEXT"], [301, 320, 1, "enum_CFG_NEXT"], [320, 228, 1, "enum_CFG_NEXT"], [330, 334, 1, "enum_CFG_NEXT"], [334, 357, 1, "enum_CFG_NEXT"], [357, 366, 1, "enum_CFG_NEXT"], [366, 382, 1, "enum_CFG_NEXT"], [382, 406, 1, "enum_CFG_NEXT"], [16, 2, 3, "enum_LAST_WRITE"], [30, 16, 2, "enum_LAST_READ"], [30, 2, 3, "enum_LAST_WRITE"], [23, 161, 2, "enum_LAST_READ"], [23, 23, 3, "enum_LAST_WRITE"], [53, 30, 2, "enum_LAST_READ"], [53, 179, 2, "enum_LAST_READ"], [53, 2, 3, "enum_LAST_WRITE"], [51, 137, 2, "enum_LAST_READ"], [51, 51, 3, "enum_LAST_WRITE"], [69, 53, 2, "enum_LAST_READ"], [69, 2, 3, "enum_LAST_WRITE"], [73, 161, 2, "enum_LAST_READ"], [73, 23, 3, "enum_LAST_WRITE"], [64, 95, 2, "enum_LAST_READ"], [64, 64, 3, "enum_LAST_WRITE"], [66, 109, 2, "enum_LAST_READ"], [66, 66, 3, "enum_LAST_WRITE"], [85, 85, 2, "enum_LAST_READ"], [91, 73, 2, "enum_LAST_READ"], [91, 23, 3, "enum_LAST_WRITE"], [93, 109, 2, "enum_LAST_READ"], [93, 66, 3, "enum_LAST_WRITE"], [95, 95, 2, "enum_LAST_READ"], [95, 64, 3, "enum_LAST_WRITE"], [100, 100, 2, "enum_LAST_READ"], [104, 104, 2, "enum_LAST_READ"], [109, 93, 2, "enum_LAST_READ"], [109, 66, 3, "enum_LAST_WRITE"], [113, 113, 2, "enum_LAST_READ"], [122, 91, 2, "enum_LAST_READ"], [122, 23, 3, "enum_LAST_WRITE"], [98, 149, 2, "enum_LAST_READ"], [98, 98, 3, "enum_LAST_WRITE"], [126, 69, 2, "enum_LAST_READ"], [126, 2, 3, "enum_LAST_WRITE"], [133, 133, 2, "enum_LAST_READ"], [137, 137, 2, "enum_LAST_READ"], [137, 51, 3, "enum_LAST_WRITE"], [139, 126, 2, "enum_LAST_READ"], [139, 2, 3, "enum_LAST_WRITE"], [143, 122, 2, "enum_LAST_READ"], [143, 23, 3, "enum_LAST_WRITE"], [149, 149, 2, "enum_LAST_READ"], [149, 98, 3, "enum_LAST_WRITE"], [161, 143, 2, "enum_LAST_READ"], [161, 23, 3, "enum_LAST_WRITE"], [156, 139, 2, "enum_LAST_READ"], [156, 2, 3, "enum_LAST_WRITE"], [166, 156, 2, "enum_LAST_READ"], [166, 2, 3, "enum_LAST_WRITE"], [153, 177, 2, "enum_LAST_READ"], [153, 153, 3, "enum_LAST_WRITE"], [171, 166, 2, "enum_LAST_READ"], [171, 2, 3, "enum_LAST_WRITE"], [177, 177, 2, "enum_LAST_READ"], [177, 153, 3, "enum_LAST_WRITE"], [179, 171, 2, "enum_LAST_READ"], [179, 2, 3, "enum_LAST_WRITE"], [202, 16, 2, "enum_LAST_READ"], [202, 2, 3, "enum_LAST_WRITE"], [212, 202, 2, "enum_LAST_READ"], [212, 2, 3, "enum_LAST_WRITE"], [232, 197, 3, "enum_LAST_WRITE"], [235, 232, 2, "enum_LAST_READ"], [235, 197, 3, "enum_LAST_WRITE"], [237, 212, 2, "enum_LAST_READ"], [237, 2, 3, "enum_LAST_WRITE"], [228, 314, 2, "enum_LAST_READ"], [228, 228, 3, "enum_LAST_WRITE"], [252, 237, 2, "enum_LAST_READ"], [252, 321, 2, "enum_LAST_READ"], [252, 2, 3, "enum_LAST_WRITE"], [256, 314, 2, "enum_LAST_READ"], [256, 228, 3, "enum_LAST_WRITE"], [250, 283, 2, "enum_LAST_READ"], [250, 250, 3, "enum_LAST_WRITE"], [279, 252, 2, "enum_LAST_READ"], [279, 2, 3, "enum_LAST_WRITE"], [283, 283, 2, "enum_LAST_READ"], [283, 250, 3, "enum_LAST_WRITE"], [285, 299, 2, "enum_LAST_READ"], [285, 210, 3, "enum_LAST_WRITE"], [290, 256, 2, "enum_LAST_READ"], [290, 228, 3, "enum_LAST_WRITE"], [272, 327, 2, "enum_LAST_READ"], [272, 272, 3, "enum_LAST_WRITE"], [274, 274, 3, "enum_LAST_WRITE"], [276, 297, 2, "enum_LAST_READ"], [276, 276, 3, "enum_LAST_WRITE"], [297, 297, 2, "enum_LAST_READ"], [297, 276, 3, "enum_LAST_WRITE"], [299, 285, 2, "enum_LAST_READ"], [299, 210, 3, "enum_LAST_WRITE"], [294, 294, 2, "enum_LAST_READ"], [294, 11, 3, "enum_LAST_WRITE"], [294, 294, 3, "enum_LAST_WRITE"], [294, 294, 2, "enum_LAST_READ"], [294, 11, 3, "enum_LAST_WRITE"], [294, 294, 3, "enum_LAST_WRITE"], [302, 302, 2, "enum_LAST_READ"], [302, 222, 3, "enum_LAST_WRITE"], [306, 306, 2, "enum_LAST_READ"], [310, 279, 2, "enum_LAST_READ"], [310, 2, 3, "enum_LAST_WRITE"], [314, 290, 2, "enum_LAST_READ"], [314, 228, 3, "enum_LAST_WRITE"], [317, 327, 2, "enum_LAST_READ"], [317, 272, 3, "enum_LAST_WRITE"], [321, 310, 2, "enum_LAST_READ"], [321, 2, 3, "enum_LAST_WRITE"], [327, 317, 2, "enum_LAST_READ"], [327, 272, 3, "enum_LAST_WRITE"], [333, 299, 2, "enum_LAST_READ"], [333, 210, 3, "enum_LAST_WRITE"], [331, 294, 2, "enum_LAST_READ"], [331, 11, 3, "enum_LAST_WRITE"], [331, 294, 3, "enum_LAST_WRITE"], [331, 331, 2, "enum_LAST_READ"], [331, 11, 3, "enum_LAST_WRITE"], [331, 294, 3, "enum_LAST_WRITE"], [346, 333, 2, "enum_LAST_READ"], [346, 210, 3, "enum_LAST_WRITE"], [358, 237, 2, "enum_LAST_READ"], [358, 321, 2, "enum_LAST_READ"], [358, 2, 3, "enum_LAST_WRITE"], [364, 335, 3, "enum_LAST_WRITE"], [367, 358, 2, "enum_LAST_READ"], [367, 2, 3, "enum_LAST_WRITE"], [376, 302, 2, "enum_LAST_READ"], [376, 222, 3, "enum_LAST_WRITE"], [379, 364, 2, "enum_LAST_READ"], [379, 335, 3, "enum_LAST_WRITE"], [383, 367, 2, "enum_LAST_READ"], [383, 2, 3, "enum_LAST_WRITE"], [389, 383, 2, "enum_LAST_READ"], [389, 2, 3, "enum_LAST_WRITE"], [393, 389, 2, "enum_LAST_READ"], [393, 2, 3, "enum_LAST_WRITE"], [408, 30, 2, "enum_LAST_READ"], [408, 393, 2, "enum_LAST_READ"], [408, 179, 2, "enum_LAST_READ"], [408, 2, 3, "enum_LAST_WRITE"], [416, 331, 2, "enum_LAST_READ"], [416, 11, 3, "enum_LAST_WRITE"], [416, 331, 3, "enum_LAST_WRITE"], [197, 200, 4, "enum_COMPUTED_FROM"], [197, 202, 4, "enum_COMPUTED_FROM"], [210, 212, 4, "enum_COMPUTED_FROM"], [335, 337, 4, "enum_COMPUTED_FROM"], [335, 350, 4, "enum_COMPUTED_FROM"], [335, 341, 4, "enum_COMPUTED_FROM"], [335, 346, 4, "enum_COMPUTED_FROM"], [51, 53, 4, "enum_COMPUTED_FROM"], [65, 73, 4, "enum_COMPUTED_FROM"], [65, 69, 4, "enum_COMPUTED_FROM"], [98, 100, 4, "enum_COMPUTED_FROM"], [98, 113, 4, "enum_COMPUTED_FROM"], [98, 104, 4, "enum_COMPUTED_FROM"], [98, 109, 4, "enum_COMPUTED_FROM"], [98, 122, 4, "enum_COMPUTED_FROM"], [153, 161, 4, "enum_COMPUTED_FROM"], [153, 156, 4, "enum_COMPUTED_FROM"], [153, 166, 4, "enum_COMPUTED_FROM"], [250, 256, 4, "enum_COMPUTED_FROM"], [250, 252, 4, "enum_COMPUTED_FROM"], [273, 283, 4, "enum_COMPUTED_FROM"], [273, 285, 4, "enum_COMPUTED_FROM"], [273, 279, 4, "enum_COMPUTED_FROM"], [273, 290, 4, "enum_COMPUTED_FROM"]], "error_location": 109, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/lmjohns3/theanets.git", "old_path": "theanets/feedforward.py", "hash": "507eac0d7fe007cdc93d89ca6cb0db9521908eac", "code": "def setup_decoder(self, **kwargs: Dict[str, Any]) -> Tuple[TT.TensorVariable, int]:\n    '''Set up the \"decoding\" computations from layer activations to output.\n    '''\n    parameter_count = 0\n\n    if self.tied_weights:\n        for i in range(len(self.weights) - 1, -1, -1):\n            h: int = self.hiddens[-1]\n            a, b = self.weights[i].get_value(borrow=True).shape\n            a: int = a\n            b: int = b\n            logging.info('tied weights from layer %d: %s x %s', i, b, a)\n            o: float = theano.shared(np.zeros((b, ), FLOAT), name='b_out{}'.format(i))\n            self.preacts.append(TT.dot(h, self.weights[i].T) + o)\n            func: Callable = self._output_func if i == 0 else self._hidden_func\n            self.hiddens.append(func(self.preacts[-1]))\n\n    else:\n        B: int = len(self.biases) - 1\n        n: int = self.layers[-1]\n        decoders: List = []\n        for i in range(B, B - self.decode_from, -1):\n            b: int = self.biases[i].get_value(borrow=True).shape[0]\n            Di, _, count = self.create_layer(b, n, 'out_%d' % i)\n            parameter_count += count - n\n            decoders.append(TT.dot(self.hiddens[i], Di))\n            self.weights.append(Di)\n        parameter_count += n\n        bias = theano.shared(np.zeros((n, ), FLOAT), name='bias_out')\n        self.biases.append(bias)\n        self.preacts.append(sum(decoders) + bias)\n        self.hiddens.append(self._output_func(self.preacts[-1]))\n\n    return self.hiddens.pop(), parameter_count\n", "rewrite": "ReplaceText(target='a' @(256,44)->(256,45))", "error_line": 10, "has_bug": true, "code_full": "import logging\nfrom typing import Any, Callable, Dict, List, Tuple\n\nimport numpy as np\nimport theano\nimport theano.tensor as TT\n\nFLOAT = np.float32\n\nclass Class:\n    parameter_count: int\n    hiddens: List\n    weights: List\n    biases: List\n    preacts: List\n    decode_from: int\n    tied_weights: bool\n    layers: List\n    _output_func: Callable\n    _hidden_func: Callable\n\n    def create_layer(self, a: int, b: int, name: str) -> Tuple[TT.TensorVariable, TT.TensorVariable, int]:\n        return (None, None, 0)\n\n    def setup_decoder(self, **kwargs: Dict[str, Any]) -> Tuple[TT.TensorVariable, int]:\n        '''Set up the \"decoding\" computations from layer activations to output.\n        '''\n        parameter_count = 0\n\n        if self.tied_weights:\n            for i in range(len(self.weights) - 1, -1, -1):\n                h: int = self.hiddens[-1]\n                a, b = self.weights[i].get_value(borrow=True).shape\n                a: int = a\n                b: int = b\n                logging.info('tied weights from layer %d: %s x %s', i, b, a)\n                o: float = theano.shared(np.zeros((b, ), FLOAT), name='b_out{}'.format(i))\n                self.preacts.append(TT.dot(h, self.weights[i].T) + o)\n                func: Callable = self._output_func if i == 0 else self._hidden_func\n                self.hiddens.append(func(self.preacts[-1]))\n\n        else:\n            B: int = len(self.biases) - 1\n            n: int = self.layers[-1]\n            decoders: List = []\n            for i in range(B, B - self.decode_from, -1):\n                b: int = self.biases[i].get_value(borrow=True).shape[0]\n                Di, _, count = self.create_layer(b, n, 'out_%d' % i)\n                parameter_count += count - n\n                decoders.append(TT.dot(self.hiddens[i], Di))\n                self.weights.append(Di)\n            parameter_count += n\n            bias = theano.shared(np.zeros((n, ), FLOAT), name='bias_out')\n            self.biases.append(bias)\n            self.preacts.append(sum(decoders) + bias)\n            self.hiddens.append(self._output_func(self.preacts[-1]))\n\n        return self.hiddens.pop(), parameter_count\n", "error_location_char": [542, 543], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def edit_rwhois(", "self", ",", "abuse_email", "=", "None", ",", "address1", "=", "None", ",", "address2", "=", "None", ",", "city", "=", "None", ",", "company_name", "=", "None", ",", "country", "=", "None", ",", "first_name", "=", "None", ",", "last_name", "=", "None", ",", "postal_code", "=", "None", ",", "private_residence", "=", "None", ",", "state", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "' Edit rwhois record '", "#NEWLINE#", "update", "=", "{", "}", "#NEWLINE#", "for", "(", "key", ",", "value", ")", "in", "[", "(", "'abuseEmail'", ",", "abuse_email", ")", ",", "(", "'address1'", ",", "address1", ")", ",", "(", "'address2'", ",", "address2", ")", ",", "(", "'city'", ",", "city", ")", ",", "(", "'companyName'", ",", "company_name", ")", ",", "(", "'country'", ",", "country", ")", ",", "(", "'firstName'", ",", "first_name", ")", ",", "(", "'lastName'", ",", "last_name", ")", ",", "(", "'privateResidenceFlag'", ",", "private_residence", ")", ",", "(", "'state'", ",", "state", ")", ",", "(", "'postalCode'", ",", "postal_code", ")", "]", ":", "#NEWLINE#", "#INDENT#", "if", "(", "key", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "update", "[", "key", "]", "=", "value", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "if", "update", ":", "#NEWLINE#", "#INDENT#", "rwhois", "=", "self", ".", "get_rwhois", "(", ")", "#NEWLINE#", "self", ".", "client", "[", "'Network_Subnet_Rwhois_Data'", "]", ".", "editObject", "(", "update", ",", "id", "=", "rwhois", "[", "'id'", "]", ")"], "edges": [[1, 23, 7, "enum_FIELD"], [50, 51, 7, "enum_FIELD"], [52, 55, 7, "enum_FIELD"], [64, 61, 7, "enum_FIELD"], [64, 95, 7, "enum_FIELD"], [153, 154, 7, "enum_FIELD"], [135, 138, 7, "enum_FIELD"], [157, 163, 7, "enum_FIELD"], [165, 176, 7, "enum_FIELD"], [138, 137, 7, "enum_FIELD"], [143, 149, 7, "enum_FIELD"], [163, 161, 7, "enum_FIELD"], [176, 172, 7, "enum_FIELD"], [145, 144, 7, "enum_FIELD"], [145, 146, 7, "enum_FIELD"], [161, 160, 7, "enum_FIELD"], [172, 169, 7, "enum_FIELD"], [177, 180, 7, "enum_FIELD"], [169, 167, 7, "enum_FIELD"], [169, 170, 7, "enum_FIELD"], [180, 179, 7, "enum_FIELD"], [180, 181, 7, "enum_FIELD"], [167, 166, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [69, 4, 10, "enum_LAST_LEXICAL_USE"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [75, 8, 10, "enum_LAST_LEXICAL_USE"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [81, 12, 10, "enum_LAST_LEXICAL_USE"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [87, 16, 10, "enum_LAST_LEXICAL_USE"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [93, 20, 10, "enum_LAST_LEXICAL_USE"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [99, 24, 10, "enum_LAST_LEXICAL_USE"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [105, 28, 10, "enum_LAST_LEXICAL_USE"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [111, 32, 10, "enum_LAST_LEXICAL_USE"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [117, 40, 10, "enum_LAST_LEXICAL_USE"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [123, 44, 10, "enum_LAST_LEXICAL_USE"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [129, 36, 10, "enum_LAST_LEXICAL_USE"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [137, 60, 10, "enum_LAST_LEXICAL_USE"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 143, 9, "enum_NEXT_SYNTAX"], [144, 53, 10, "enum_LAST_LEXICAL_USE"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [146, 137, 10, "enum_LAST_LEXICAL_USE"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [149, 62, 10, "enum_LAST_LEXICAL_USE"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 153, 9, "enum_NEXT_SYNTAX"], [154, 144, 10, "enum_LAST_LEXICAL_USE"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [160, 2, 10, "enum_LAST_LEXICAL_USE"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [166, 160, 10, "enum_LAST_LEXICAL_USE"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [175, 154, 10, "enum_LAST_LEXICAL_USE"], [174, 175, 9, "enum_NEXT_SYNTAX"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 178, 9, "enum_NEXT_SYNTAX"], [179, 158, 10, "enum_LAST_LEXICAL_USE"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [6, 10, 1, "enum_CFG_NEXT"], [10, 14, 1, "enum_CFG_NEXT"], [14, 18, 1, "enum_CFG_NEXT"], [18, 22, 1, "enum_CFG_NEXT"], [22, 26, 1, "enum_CFG_NEXT"], [26, 30, 1, "enum_CFG_NEXT"], [30, 34, 1, "enum_CFG_NEXT"], [34, 38, 1, "enum_CFG_NEXT"], [38, 42, 1, "enum_CFG_NEXT"], [42, 46, 1, "enum_CFG_NEXT"], [46, 1, 1, "enum_CFG_NEXT"], [23, 50, 1, "enum_CFG_NEXT"], [50, 52, 1, "enum_CFG_NEXT"], [52, 95, 1, "enum_CFG_NEXT"], [95, 61, 1, "enum_CFG_NEXT"], [61, 154, 1, "enum_CFG_NEXT"], [61, 138, 1, "enum_CFG_NEXT"], [138, 61, 1, "enum_CFG_NEXT"], [138, 143, 1, "enum_CFG_NEXT"], [143, 61, 1, "enum_CFG_NEXT"], [154, 157, 1, "enum_CFG_NEXT"], [157, 165, 1, "enum_CFG_NEXT"], [69, 4, 3, "enum_LAST_WRITE"], [75, 8, 3, "enum_LAST_WRITE"], [81, 12, 3, "enum_LAST_WRITE"], [87, 16, 3, "enum_LAST_WRITE"], [93, 20, 3, "enum_LAST_WRITE"], [99, 24, 3, "enum_LAST_WRITE"], [105, 28, 3, "enum_LAST_WRITE"], [111, 32, 3, "enum_LAST_WRITE"], [117, 40, 3, "enum_LAST_WRITE"], [123, 44, 3, "enum_LAST_WRITE"], [129, 36, 3, "enum_LAST_WRITE"], [60, 146, 2, "enum_LAST_READ"], [60, 137, 2, "enum_LAST_READ"], [60, 60, 3, "enum_LAST_WRITE"], [62, 149, 2, "enum_LAST_READ"], [62, 62, 3, "enum_LAST_WRITE"], [137, 146, 2, "enum_LAST_READ"], [137, 137, 2, "enum_LAST_READ"], [137, 60, 3, "enum_LAST_WRITE"], [149, 149, 2, "enum_LAST_READ"], [149, 62, 3, "enum_LAST_WRITE"], [144, 144, 2, "enum_LAST_READ"], [144, 53, 3, "enum_LAST_WRITE"], [146, 137, 2, "enum_LAST_READ"], [146, 60, 3, "enum_LAST_WRITE"], [154, 144, 2, "enum_LAST_READ"], [154, 53, 3, "enum_LAST_WRITE"], [160, 2, 3, "enum_LAST_WRITE"], [166, 160, 2, "enum_LAST_READ"], [166, 2, 3, "enum_LAST_WRITE"], [175, 154, 2, "enum_LAST_READ"], [175, 53, 3, "enum_LAST_WRITE"], [179, 158, 3, "enum_LAST_WRITE"], [158, 160, 4, "enum_COMPUTED_FROM"], [145, 149, 4, "enum_COMPUTED_FROM"]], "error_location": 137, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/softlayer/softlayer-python.git", "old_path": "SoftLayer/managers/network.py", "hash": "53731de7e51d31475cc224aceb0f3ff7217cdafd", "code": "def edit_rwhois(self, abuse_email: Optional[str]=None, address1: Optional[str]=None, address2: Optional[str]=None,\n                city: Optional[str]=None, company_name: Optional[str]=None, country: Optional[str]=None,\n                first_name: Optional[str]=None, last_name: Optional[str]=None, postal_code: Optional[str]=None,\n                private_residence: Optional[str]=None, state: Optional[str]=None):\n    \"\"\" Edit rwhois record \"\"\"\n    update: Dict[str, str] = {}\n    for key, value in [('abuseEmail', abuse_email),\n                    ('address1', address1),\n                    ('address2', address2),\n                    ('city', city),\n                    ('companyName', company_name),\n                    ('country', country),\n                    ('firstName', first_name),\n                    ('lastName', last_name),\n                    ('privateResidenceFlag', private_residence),\n                    ('state', state),\n                    ('postalCode', postal_code)]:\n        if key is not None:\n            update[key] = value\n\n    # If there's anything to update, update it\n    if update:\n        rwhois = self.get_rwhois()\n        self.client['Network_Subnet_Rwhois_Data'].editObject(\n            update, id=rwhois['id'])\n", "rewrite": "ReplaceText(target='value' @(156,15)->(156,18))", "error_line": 17, "has_bug": true, "code_full": "from typing import Any, Dict, Optional\n\n\nclass Class:\n    client: Dict[str, Any]\n\n    def get_rwhois(self) -> Dict[str, Any]:\n        return {}\n\n    def edit_rwhois(self, abuse_email: Optional[str]=None, address1: Optional[str]=None, address2: Optional[str]=None,\n                    city: Optional[str]=None, company_name: Optional[str]=None, country: Optional[str]=None,\n                    first_name: Optional[str]=None, last_name: Optional[str]=None, postal_code: Optional[str]=None,\n                    private_residence: Optional[str]=None, state: Optional[str]=None):\n        \"\"\" Edit rwhois record \"\"\"\n        update: Dict[str, str] = {}\n        for key, value in [('abuseEmail', abuse_email),\n                        ('address1', address1),\n                        ('address2', address2),\n                        ('city', city),\n                        ('companyName', company_name),\n                        ('country', country),\n                        ('firstName', first_name),\n                        ('lastName', last_name),\n                        ('privateResidenceFlag', private_residence),\n                        ('state', state),\n                        ('postalCode', postal_code)]:\n            if key is not None:\n                update[key] = value\n\n        # If there's anything to update, update it\n        if update:\n            rwhois = self.get_rwhois()\n            self.client['Network_Subnet_Rwhois_Data'].editObject(\n                update, id=rwhois['id'])\n", "error_location_char": [1003, 1006], "type_checked_pytype": true, "type_error_label": "assignment, indirect", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def read_network(", "proc_dir_path", ")", ":", "#NEWLINE#", "#INDENT#", "model_fname", "=", "os", ".", "path", ".", "join", "(", "proc_dir_path", ",", "NETWORK_DIRNAME", ",", "NETWORK_FNAME", ")", "#NEWLINE#", "chkpt_fname", "=", "os", ".", "path", ".", "join", "(", "proc_dir_path", ",", "NETWORK_DIRNAME", ",", "CHKPT_FNAME", ")", "#NEWLINE#", "local_model", "=", "io", ".", "pull_file", "(", "model_fname", ")", "#NEWLINE#", "local_chkpt", "=", "io", ".", "pull_file", "(", "chkpt_fname", ")", "#NEWLINE#", "model", "=", "imp", ".", "load_source", "(", "'Model'", ",", "model_fname", ")", ".", "InstantiatedModel", "#NEWLINE#", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "local_chkpt", ")", ")", "#NEWLINE#", "return", "model"], "edges": [[6, 16, 7, "enum_FIELD"], [21, 31, 7, "enum_FIELD"], [36, 42, 7, "enum_FIELD"], [45, 51, 7, "enum_FIELD"], [54, 65, 7, "enum_FIELD"], [67, 71, 7, "enum_FIELD"], [80, 81, 7, "enum_FIELD"], [16, 12, 7, "enum_FIELD"], [31, 27, 7, "enum_FIELD"], [42, 40, 7, "enum_FIELD"], [51, 49, 7, "enum_FIELD"], [65, 62, 7, "enum_FIELD"], [71, 69, 7, "enum_FIELD"], [12, 10, 7, "enum_FIELD"], [27, 25, 7, "enum_FIELD"], [40, 39, 7, "enum_FIELD"], [49, 48, 7, "enum_FIELD"], [62, 58, 7, "enum_FIELD"], [69, 68, 7, "enum_FIELD"], [75, 73, 7, "enum_FIELD"], [10, 9, 7, "enum_FIELD"], [25, 24, 7, "enum_FIELD"], [58, 57, 7, "enum_FIELD"], [73, 72, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [15, 2, 10, "enum_LAST_LEXICAL_USE"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [24, 9, 10, "enum_LAST_LEXICAL_USE"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [30, 15, 10, "enum_LAST_LEXICAL_USE"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [32, 17, 10, "enum_LAST_LEXICAL_USE"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [43, 7, 10, "enum_LAST_LEXICAL_USE"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [48, 39, 10, "enum_LAST_LEXICAL_USE"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [52, 22, 10, "enum_LAST_LEXICAL_USE"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [63, 43, 10, "enum_LAST_LEXICAL_USE"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [68, 55, 10, "enum_LAST_LEXICAL_USE"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [76, 46, 10, "enum_LAST_LEXICAL_USE"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 80, 9, "enum_NEXT_SYNTAX"], [81, 68, 10, "enum_LAST_LEXICAL_USE"], [80, 81, 9, "enum_NEXT_SYNTAX"], [6, 21, 1, "enum_CFG_NEXT"], [21, 36, 1, "enum_CFG_NEXT"], [36, 45, 1, "enum_CFG_NEXT"], [45, 54, 1, "enum_CFG_NEXT"], [54, 67, 1, "enum_CFG_NEXT"], [67, 80, 1, "enum_CFG_NEXT"], [15, 2, 3, "enum_LAST_WRITE"], [24, 9, 2, "enum_LAST_READ"], [30, 15, 2, "enum_LAST_READ"], [30, 2, 3, "enum_LAST_WRITE"], [32, 17, 2, "enum_LAST_READ"], [43, 7, 3, "enum_LAST_WRITE"], [48, 39, 2, "enum_LAST_READ"], [52, 22, 3, "enum_LAST_WRITE"], [63, 43, 2, "enum_LAST_READ"], [63, 7, 3, "enum_LAST_WRITE"], [68, 55, 3, "enum_LAST_WRITE"], [76, 46, 3, "enum_LAST_WRITE"], [81, 68, 2, "enum_LAST_READ"], [81, 55, 3, "enum_LAST_WRITE"], [7, 15, 4, "enum_COMPUTED_FROM"], [7, 17, 4, "enum_COMPUTED_FROM"], [7, 19, 4, "enum_COMPUTED_FROM"], [7, 9, 4, "enum_COMPUTED_FROM"], [22, 30, 4, "enum_COMPUTED_FROM"], [22, 32, 4, "enum_COMPUTED_FROM"], [22, 34, 4, "enum_COMPUTED_FROM"], [22, 24, 4, "enum_COMPUTED_FROM"], [37, 43, 4, "enum_COMPUTED_FROM"], [37, 39, 4, "enum_COMPUTED_FROM"], [46, 52, 4, "enum_COMPUTED_FROM"], [46, 48, 4, "enum_COMPUTED_FROM"], [55, 63, 4, "enum_COMPUTED_FROM"], [55, 57, 4, "enum_COMPUTED_FROM"]], "error_location": 63, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/nicholasturner1/Synaptor.git", "old_path": "synaptor/edges/io.py", "hash": "8f529876b19ee670791f5860b9808f7ce12f2528", "code": "def read_network(proc_dir_path: str) -> Any:\n\n    model_fname: str = os.path.join(proc_dir_path, NETWORK_DIRNAME, NETWORK_FNAME)\n    chkpt_fname: str = os.path.join(proc_dir_path, NETWORK_DIRNAME, CHKPT_FNAME)\n\n    local_model = io.pull_file(model_fname)\n    local_chkpt = io.pull_file(chkpt_fname)\n\n    model = imp.load_source(\"Model\",model_fname).InstantiatedModel\n    model.load_state_dict(torch.load(local_chkpt))\n\n    return model\n", "rewrite": "ReplaceText(target='local_model' @(34,36)->(34,47))", "error_line": 8, "has_bug": true, "code_full": "import os\nfrom typing import IO, Any\n\nimport torch\n\nNETWORK_DIRNAME: str = \"\"\nNETWORK_FNAME: str = \"\"\nCHKPT_FNAME: str = \"\"\n\n\nclass io:\n    @staticmethod\n    def pull_file(fname: str) -> IO:\n        return open(fname, \"r\")\n    \nclass imp:\n    @staticmethod\n    def load_source(name: str, file: IO) -> Any:\n        return None\n\n\ndef read_network(proc_dir_path: str) -> Any:\n\n    model_fname: str = os.path.join(proc_dir_path, NETWORK_DIRNAME, NETWORK_FNAME)\n    chkpt_fname: str = os.path.join(proc_dir_path, NETWORK_DIRNAME, CHKPT_FNAME)\n\n    local_model = io.pull_file(model_fname)\n    local_chkpt = io.pull_file(chkpt_fname)\n\n    model = imp.load_source(\"Model\",model_fname).InstantiatedModel\n    model.load_state_dict(torch.load(local_chkpt))\n\n    return model\n", "error_location_char": [336, 347], "type_checked_pytype": false, "type_error_label": "wrong-arg-types", "type_checked_mypy": false}
{"source_tokens": ["#NEWLINE#", "def test_handling_bad_package(", "tmpdir", ",", "repodata", ")", ":", "#NEWLINE#", "#INDENT#", "local_repo_root", "=", "tmpdir", ".", "mkdir", "(", "'repo'", ")", ".", "strpath", "#NEWLINE#", "bad_pkg_root", "=", "os", ".", "path", ".", "join", "(", "local_repo_root", ",", "'linux-64'", ")", "#NEWLINE#", "os", ".", "makedirs", "(", "bad_pkg_root", ")", "#NEWLINE#", "bad_pkg_name", "=", "'bad-1-0.tar.bz2'", "#NEWLINE#", "bad_pkg_path", "=", "os", ".", "path", ".", "join", "(", "bad_pkg_root", ",", "bad_pkg_name", ")", "#NEWLINE#", "if", "os", ".", "path", ".", "exists", "(", "bad_pkg_path", ")", ":", "#NEWLINE#", "#INDENT#", "os", ".", "remove", "(", "bad_pkg_path", ")", "#NEWLINE#", "#UNINDENT#", "with", "bz2", ".", "BZ2File", "(", "bad_pkg_path", ",", "'wb'", ")", "as", "f", ":", "#NEWLINE#", "#INDENT#", "f", ".", "write", "(", "'This is a fake package'", ".", "encode", "(", ")", ")", "#NEWLINE#", "#UNINDENT#", "assert", "(", "bad_pkg_name", "in", "os", ".", "listdir", "(", "bad_pkg_root", ")", ")", "#NEWLINE#", "conda_mirror", ".", "_validate_packages", "(", "repodata", ",", "local_repo_root", ")", "#NEWLINE#", "assert", "(", "bad_pkg_name", "not in", "os", ".", "listdir", "(", "bad_pkg_root", ")", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [8, 17, 7, "enum_FIELD"], [19, 29, 7, "enum_FIELD"], [32, 36, 7, "enum_FIELD"], [39, 42, 7, "enum_FIELD"], [43, 53, 7, "enum_FIELD"], [57, 63, 7, "enum_FIELD"], [103, 106, 7, "enum_FIELD"], [114, 120, 7, "enum_FIELD"], [124, 127, 7, "enum_FIELD"], [17, 14, 7, "enum_FIELD"], [29, 25, 7, "enum_FIELD"], [36, 34, 7, "enum_FIELD"], [53, 49, 7, "enum_FIELD"], [63, 61, 7, "enum_FIELD"], [68, 72, 7, "enum_FIELD"], [86, 83, 7, "enum_FIELD"], [86, 87, 7, "enum_FIELD"], [90, 94, 7, "enum_FIELD"], [106, 105, 7, "enum_FIELD"], [120, 116, 7, "enum_FIELD"], [127, 126, 7, "enum_FIELD"], [14, 12, 7, "enum_FIELD"], [25, 23, 7, "enum_FIELD"], [34, 33, 7, "enum_FIELD"], [49, 47, 7, "enum_FIELD"], [61, 59, 7, "enum_FIELD"], [72, 70, 7, "enum_FIELD"], [83, 79, 7, "enum_FIELD"], [94, 92, 7, "enum_FIELD"], [110, 108, 7, "enum_FIELD"], [116, 115, 7, "enum_FIELD"], [131, 129, 7, "enum_FIELD"], [12, 11, 7, "enum_FIELD"], [23, 22, 7, "enum_FIELD"], [47, 46, 7, "enum_FIELD"], [59, 58, 7, "enum_FIELD"], [70, 69, 7, "enum_FIELD"], [79, 78, 7, "enum_FIELD"], [92, 91, 7, "enum_FIELD"], [98, 96, 7, "enum_FIELD"], [108, 107, 7, "enum_FIELD"], [129, 128, 7, "enum_FIELD"], [96, 95, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [11, 2, 10, "enum_LAST_LEXICAL_USE"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [28, 9, 10, "enum_LAST_LEXICAL_USE"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [33, 22, 10, "enum_LAST_LEXICAL_USE"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [37, 20, 10, "enum_LAST_LEXICAL_USE"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [46, 33, 10, "enum_LAST_LEXICAL_USE"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [52, 37, 10, "enum_LAST_LEXICAL_USE"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [54, 40, 10, "enum_LAST_LEXICAL_USE"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 57, 9, "enum_NEXT_SYNTAX"], [58, 46, 10, "enum_LAST_LEXICAL_USE"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [64, 44, 10, "enum_LAST_LEXICAL_USE"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 68, 9, "enum_NEXT_SYNTAX"], [69, 58, 10, "enum_LAST_LEXICAL_USE"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [73, 64, 10, "enum_LAST_LEXICAL_USE"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [82, 73, 10, "enum_LAST_LEXICAL_USE"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 90, 9, "enum_NEXT_SYNTAX"], [91, 87, 10, "enum_LAST_LEXICAL_USE"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [105, 54, 10, "enum_LAST_LEXICAL_USE"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [107, 69, 10, "enum_LAST_LEXICAL_USE"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [111, 52, 10, "enum_LAST_LEXICAL_USE"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [119, 4, 10, "enum_LAST_LEXICAL_USE"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [121, 28, 10, "enum_LAST_LEXICAL_USE"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [126, 105, 10, "enum_LAST_LEXICAL_USE"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [128, 107, 10, "enum_LAST_LEXICAL_USE"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [132, 111, 10, "enum_LAST_LEXICAL_USE"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [3, 8, 1, "enum_CFG_NEXT"], [8, 19, 1, "enum_CFG_NEXT"], [19, 32, 1, "enum_CFG_NEXT"], [32, 39, 1, "enum_CFG_NEXT"], [39, 43, 1, "enum_CFG_NEXT"], [43, 63, 1, "enum_CFG_NEXT"], [63, 103, 1, "enum_CFG_NEXT"], [63, 68, 1, "enum_CFG_NEXT"], [68, 103, 1, "enum_CFG_NEXT"], [103, 114, 1, "enum_CFG_NEXT"], [114, 124, 1, "enum_CFG_NEXT"], [11, 2, 3, "enum_LAST_WRITE"], [28, 9, 3, "enum_LAST_WRITE"], [33, 22, 2, "enum_LAST_READ"], [37, 20, 3, "enum_LAST_WRITE"], [46, 33, 2, "enum_LAST_READ"], [52, 37, 2, "enum_LAST_READ"], [52, 20, 3, "enum_LAST_WRITE"], [54, 40, 3, "enum_LAST_WRITE"], [58, 46, 2, "enum_LAST_READ"], [64, 44, 3, "enum_LAST_WRITE"], [69, 58, 2, "enum_LAST_READ"], [73, 64, 2, "enum_LAST_READ"], [73, 44, 3, "enum_LAST_WRITE"], [105, 54, 2, "enum_LAST_READ"], [105, 40, 3, "enum_LAST_WRITE"], [107, 69, 2, "enum_LAST_READ"], [107, 58, 2, "enum_LAST_READ"], [111, 52, 2, "enum_LAST_READ"], [111, 20, 3, "enum_LAST_WRITE"], [119, 4, 3, "enum_LAST_WRITE"], [121, 28, 2, "enum_LAST_READ"], [121, 9, 3, "enum_LAST_WRITE"], [126, 105, 2, "enum_LAST_READ"], [126, 40, 3, "enum_LAST_WRITE"], [128, 107, 2, "enum_LAST_READ"], [132, 111, 2, "enum_LAST_READ"], [132, 20, 3, "enum_LAST_WRITE"], [9, 11, 4, "enum_COMPUTED_FROM"], [20, 28, 4, "enum_COMPUTED_FROM"], [20, 22, 4, "enum_COMPUTED_FROM"], [44, 52, 4, "enum_COMPUTED_FROM"], [44, 54, 4, "enum_COMPUTED_FROM"], [44, 46, 4, "enum_COMPUTED_FROM"]], "error_location": 121, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/xhochy/conda-mirror-ng.git", "old_path": "test/test_conda_mirror.py", "hash": "e0b34555d779f9b440512f850da39aa5a0e29ece", "code": "def test_handling_bad_package(tmpdir: Any, repodata: Any):\n    # ensure that bad conda packages are actually removed by run_conda_index\n    local_repo_root: str = tmpdir.mkdir('repo').strpath\n    bad_pkg_root: str = os.path.join(local_repo_root, 'linux-64')\n    os.makedirs(bad_pkg_root)\n    bad_pkg_name: str = 'bad-1-0.tar.bz2'\n    bad_pkg_path: str = os.path.join(bad_pkg_root, bad_pkg_name)\n\n    if os.path.exists(bad_pkg_path):\n        os.remove(bad_pkg_path)\n\n    with bz2.BZ2File(bad_pkg_path, 'wb') as f:\n        f.write(\"This is a fake package\".encode())\n    assert bad_pkg_name in os.listdir(bad_pkg_root)\n    conda_mirror._validate_packages(repodata, local_repo_root)\n    assert bad_pkg_name not in os.listdir(bad_pkg_root)\n", "rewrite": "ReplaceText(target='bad_pkg_root' @(88,46)->(88,61))", "error_line": 14, "has_bug": true, "code_full": "import bz2\nimport os\nfrom typing import Any\n\n\nclass CondaMirror:\n    @staticmethod\n    def _validate_packages(repodata: Any, local_repo_root: str) -> None:\n        pass\n\nconda_mirror = CondaMirror()\n\ndef test_handling_bad_package(tmpdir: Any, repodata: Any):\n    # ensure that bad conda packages are actually removed by run_conda_index\n    local_repo_root: str = tmpdir.mkdir('repo').strpath\n    bad_pkg_root: str = os.path.join(local_repo_root, 'linux-64')\n    os.makedirs(bad_pkg_root)\n    bad_pkg_name: str = 'bad-1-0.tar.bz2'\n    bad_pkg_path: str = os.path.join(bad_pkg_root, bad_pkg_name)\n\n    if os.path.exists(bad_pkg_path):\n        os.remove(bad_pkg_path)\n\n    with bz2.BZ2File(bad_pkg_path, 'wb') as f:\n        f.write(\"This is a fake package\".encode())\n    assert bad_pkg_name in os.listdir(bad_pkg_root)\n    conda_mirror._validate_packages(repodata, local_repo_root)\n    assert bad_pkg_name not in os.listdir(bad_pkg_root)\n", "error_location_char": [662, 677], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def __init__(", "self", ",", "pt1000_conf", ",", "pt1000", ",", "sensors", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Constructor\\n    '", "#NEWLINE#", "self", ".", "__pt1000_conf", "=", "pt1000_conf", "#NEWLINE#", "self", ".", "__pt1000", "=", "pt1000", "#NEWLINE#", "self", ".", "__sensors", "=", "sensors", "#NEWLINE#", "self", ".", "__wrk_adc", "=", "ADS1115", "(", "ADS1115", ".", "ADDR_WRK", ",", "AFE", ".", "__RATE", ")", "#NEWLINE#", "self", ".", "__aux_adc", "=", "ADS1115", "(", "ADS1115", ".", "ADDR_AUX", ",", "AFE", ".", "__RATE", ")", "#NEWLINE#", "self", ".", "__pt1000_adc", "=", "(", "pt1000_conf", ".", "adc", "(", "MCP342X", ".", "GAIN_4", ",", "MCP342X", ".", "RATE_15", ")", "if", "pt1000_conf", "else", "None", ")", "#NEWLINE#", "self", ".", "__tconv", "=", "self", ".", "__wrk_adc", ".", "tconv"], "edges": [[1, 5, 7, "enum_FIELD"], [12, 13, 7, "enum_FIELD"], [14, 19, 7, "enum_FIELD"], [20, 25, 7, "enum_FIELD"], [26, 31, 7, "enum_FIELD"], [32, 42, 7, "enum_FIELD"], [47, 57, 7, "enum_FIELD"], [62, 80, 7, "enum_FIELD"], [85, 93, 7, "enum_FIELD"], [16, 15, 7, "enum_FIELD"], [22, 21, 7, "enum_FIELD"], [28, 27, 7, "enum_FIELD"], [34, 33, 7, "enum_FIELD"], [42, 37, 7, "enum_FIELD"], [49, 48, 7, "enum_FIELD"], [57, 52, 7, "enum_FIELD"], [64, 63, 7, "enum_FIELD"], [80, 81, 7, "enum_FIELD"], [80, 75, 7, "enum_FIELD"], [80, 83, 7, "enum_FIELD"], [87, 86, 7, "enum_FIELD"], [93, 91, 7, "enum_FIELD"], [40, 39, 7, "enum_FIELD"], [44, 43, 7, "enum_FIELD"], [55, 54, 7, "enum_FIELD"], [59, 58, 7, "enum_FIELD"], [75, 69, 7, "enum_FIELD"], [91, 90, 7, "enum_FIELD"], [69, 68, 7, "enum_FIELD"], [73, 72, 7, "enum_FIELD"], [77, 76, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [15, 2, 10, "enum_LAST_LEXICAL_USE"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [19, 4, 10, "enum_LAST_LEXICAL_USE"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [21, 15, 10, "enum_LAST_LEXICAL_USE"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [25, 6, 10, "enum_LAST_LEXICAL_USE"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [27, 21, 10, "enum_LAST_LEXICAL_USE"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [31, 8, 10, "enum_LAST_LEXICAL_USE"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [33, 27, 10, "enum_LAST_LEXICAL_USE"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [39, 37, 10, "enum_LAST_LEXICAL_USE"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [48, 33, 10, "enum_LAST_LEXICAL_USE"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [52, 39, 10, "enum_LAST_LEXICAL_USE"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [54, 52, 10, "enum_LAST_LEXICAL_USE"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [58, 43, 10, "enum_LAST_LEXICAL_USE"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [63, 48, 10, "enum_LAST_LEXICAL_USE"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [68, 19, 10, "enum_LAST_LEXICAL_USE"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [76, 72, 10, "enum_LAST_LEXICAL_USE"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [81, 68, 10, "enum_LAST_LEXICAL_USE"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [86, 63, 10, "enum_LAST_LEXICAL_USE"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [90, 86, 10, "enum_LAST_LEXICAL_USE"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [5, 12, 1, "enum_CFG_NEXT"], [12, 14, 1, "enum_CFG_NEXT"], [14, 20, 1, "enum_CFG_NEXT"], [20, 26, 1, "enum_CFG_NEXT"], [26, 32, 1, "enum_CFG_NEXT"], [32, 47, 1, "enum_CFG_NEXT"], [47, 62, 1, "enum_CFG_NEXT"], [62, 85, 1, "enum_CFG_NEXT"], [19, 4, 3, "enum_LAST_WRITE"], [15, 2, 3, "enum_LAST_WRITE"], [25, 6, 3, "enum_LAST_WRITE"], [21, 15, 2, "enum_LAST_READ"], [21, 2, 3, "enum_LAST_WRITE"], [31, 8, 3, "enum_LAST_WRITE"], [27, 21, 2, "enum_LAST_READ"], [27, 2, 3, "enum_LAST_WRITE"], [39, 37, 2, "enum_LAST_READ"], [33, 27, 2, "enum_LAST_READ"], [33, 2, 3, "enum_LAST_WRITE"], [52, 39, 2, "enum_LAST_READ"], [54, 52, 2, "enum_LAST_READ"], [58, 43, 2, "enum_LAST_READ"], [48, 33, 2, "enum_LAST_READ"], [48, 2, 3, "enum_LAST_WRITE"], [81, 19, 2, "enum_LAST_READ"], [81, 4, 3, "enum_LAST_WRITE"], [68, 81, 2, "enum_LAST_READ"], [68, 4, 3, "enum_LAST_WRITE"], [76, 72, 2, "enum_LAST_READ"], [63, 48, 2, "enum_LAST_READ"], [63, 2, 3, "enum_LAST_WRITE"], [90, 63, 2, "enum_LAST_READ"], [90, 2, 3, "enum_LAST_WRITE"], [86, 90, 2, "enum_LAST_READ"], [86, 2, 3, "enum_LAST_WRITE"], [16, 19, 4, "enum_COMPUTED_FROM"], [22, 25, 4, "enum_COMPUTED_FROM"], [28, 31, 4, "enum_COMPUTED_FROM"], [34, 37, 4, "enum_COMPUTED_FROM"], [34, 39, 4, "enum_COMPUTED_FROM"], [34, 43, 4, "enum_COMPUTED_FROM"], [49, 52, 4, "enum_COMPUTED_FROM"], [49, 54, 4, "enum_COMPUTED_FROM"], [49, 58, 4, "enum_COMPUTED_FROM"], [64, 81, 4, "enum_COMPUTED_FROM"], [64, 68, 4, "enum_COMPUTED_FROM"], [64, 72, 4, "enum_COMPUTED_FROM"], [64, 76, 4, "enum_COMPUTED_FROM"], [87, 90, 4, "enum_COMPUTED_FROM"]], "error_location": 81, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/south-coast-science/scs_dfe_eng.git", "old_path": "scs_dfe/gas/afe.py", "hash": "060bd36c51a20f4586ed199b1e3996c70b0318a7", "code": "def __init__(self, pt1000_conf: PT1000Conf, pt1000: Any, sensors: Any):\n    \"\"\"\n    Constructor\n    \"\"\"\n    self.__pt1000_conf = pt1000_conf\n    self.__pt1000 = pt1000\n    self.__sensors = sensors\n\n    self.__wrk_adc = ADS1115(ADS1115.ADDR_WRK, AFE.__RATE)\n    self.__aux_adc = ADS1115(ADS1115.ADDR_AUX, AFE.__RATE)\n\n    self.__pt1000_adc = pt1000_conf.adc(MCP342X.GAIN_4, MCP342X.RATE_15) if pt1000_conf else None\n\n    self.__tconv = self.__wrk_adc.tconv\n", "rewrite": "ReplaceText(target='pt1000' @(52,80)->(52,91))", "error_line": 11, "has_bug": true, "code_full": "from typing import Any, Optional\n\n\nclass ADS1115:\n    ADDR_WRK: int = 0\n    ADDR_AUX: int = 0\n    tconv: Any\n\n    def __init__(self, address: int, rate: int) -> None:\n        self.address = address\n        self.rate = rate\n    \nclass AFE:\n    __RATE: int = 0\n\nclass MCP342X:\n    GAIN_4: int = 0\n    RATE_15: int = 0\n\n\nclass PT1000Conf:\n    def adc(self, gain: int, rate: int) -> Any:\n        pass\n\ndef __init__(self, pt1000_conf: PT1000Conf, pt1000: Any, sensors: Any):\n    \"\"\"\n    Constructor\n    \"\"\"\n    self.__pt1000_conf = pt1000_conf\n    self.__pt1000 = pt1000\n    self.__sensors = sensors\n\n    self.__wrk_adc = ADS1115(ADS1115.ADDR_WRK, AFE.__RATE)\n    self.__aux_adc = ADS1115(ADS1115.ADDR_AUX, AFE.__RATE)\n\n    self.__pt1000_adc = pt1000_conf.adc(MCP342X.GAIN_4, MCP342X.RATE_15) if pt1000_conf else None\n\n    self.__tconv = self.__wrk_adc.tconv\n", "error_location_char": [393, 404], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def run_command(", "input_command", ",", "env", "=", "None", ",", "cwd", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "'Run a shell command.\\n\\n    Args:\\n        input_command: Input command.\\n        env: Additional environmental variable that will be added to global environment.\\n        cwd: Current working directory. If provided command will be executed from this\\n            folder.\\n    '", "#NEWLINE#", "if", "(", "platform", ".", "system", "(", ")", "==", "'Windows'", ")", ":", "#NEWLINE#", "#INDENT#", "command", "=", "input_command", ".", "replace", "(", "\"'\"", ",", "'\"'", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "command", "=", "command", ".", "replace", "(", "'\"'", ",", "\"'\"", ")", "#NEWLINE#", "#UNINDENT#", "cur_dir", "=", "os", ".", "getcwd", "(", ")", "#NEWLINE#", "if", "cwd", ":", "#NEWLINE#", "#INDENT#", "os", ".", "chdir", "(", "cwd", ")", "#NEWLINE#", "#UNINDENT#", "g_env", "=", "os", ".", "environ", ".", "copy", "(", ")", "#NEWLINE#", "if", "env", ":", "#NEWLINE#", "#INDENT#", "for", "(", "k", ",", "v", ")", "in", "env", ".", "items", "(", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "k", ".", "strip", "(", ")", ".", "upper", "(", ")", "==", "'PATH'", ")", ":", "#NEWLINE#", "#INDENT#", "g_env", "[", "'PATH'", "]", "=", "os", ".", "pathsep", ".", "join", "(", "(", "v", ",", "g_env", "[", "'PATH'", "]", ")", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "g_env", "[", "k", "]", "=", "v", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "process", "=", "subprocess", ".", "Popen", "(", "command", ".", "replace", "(", "'\\\\'", ",", "'/'", ")", ",", "stdin", "=", "subprocess", ".", "PIPE", ",", "stdout", "=", "subprocess", ".", "PIPE", ",", "stderr", "=", "subprocess", ".", "PIPE", ",", "shell", "=", "True", ",", "env", "=", "g_env", ")", "#NEWLINE#", "if", "process", ".", "stdout", ":", "#NEWLINE#", "#INDENT#", "while", "True", ":", "#NEWLINE#", "#INDENT#", "output", "=", "process", ".", "stdout", ".", "readline", "(", ")", "#NEWLINE#", "if", "(", "(", "(", "output", "==", "b''", ")", "or", "(", "output", "==", "''", ")", ")", "and", "(", "process", ".", "poll", "(", ")", "is not", "None", ")", ")", ":", "#NEWLINE#", "#INDENT#", "break", "#NEWLINE#", "#UNINDENT#", "if", "output", ":", "#NEWLINE#", "#INDENT#", "print", "(", "output", ".", "strip", "(", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "stderr", "=", "process", ".", "stderr", "#NEWLINE#", "rc", "=", "process", ".", "poll", "(", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "(", "_", ",", "stderr", ")", "=", "process", ".", "communicate", "(", ")", "#NEWLINE#", "rc", "=", "process", ".", "returncode", "#NEWLINE#", "#UNINDENT#", "if", "cwd", ":", "#NEWLINE#", "#INDENT#", "os", ".", "chdir", "(", "cur_dir", ")", "#NEWLINE#", "#UNINDENT#", "if", "(", "rc", "!=", "0", ")", ":", "#NEWLINE#", "#INDENT#", "errors", "=", "_stream_file_content", "(", "stderr", ")", "#NEWLINE#", "raise", "RuntimeError", "(", "errors", ")", "#NEWLINE#", "#UNINDENT#", "return", "0"], "edges": [[1, 5, 7, "enum_FIELD"], [14, 15, 7, "enum_FIELD"], [27, 24, 7, "enum_FIELD"], [57, 63, 7, "enum_FIELD"], [66, 67, 7, "enum_FIELD"], [78, 86, 7, "enum_FIELD"], [89, 90, 7, "enum_FIELD"], [161, 188, 7, "enum_FIELD"], [208, 206, 7, "enum_FIELD"], [312, 313, 7, "enum_FIELD"], [325, 328, 7, "enum_FIELD"], [348, 349, 7, "enum_FIELD"], [24, 22, 7, "enum_FIELD"], [29, 37, 7, "enum_FIELD"], [45, 53, 7, "enum_FIELD"], [63, 61, 7, "enum_FIELD"], [70, 74, 7, "enum_FIELD"], [86, 84, 7, "enum_FIELD"], [100, 97, 7, "enum_FIELD"], [100, 104, 7, "enum_FIELD"], [188, 165, 7, "enum_FIELD"], [206, 205, 7, "enum_FIELD"], [211, 212, 7, "enum_FIELD"], [273, 277, 7, "enum_FIELD"], [279, 285, 7, "enum_FIELD"], [292, 302, 7, "enum_FIELD"], [304, 308, 7, "enum_FIELD"], [316, 320, 7, "enum_FIELD"], [328, 327, 7, "enum_FIELD"], [333, 337, 7, "enum_FIELD"], [341, 343, 7, "enum_FIELD"], [22, 20, 7, "enum_FIELD"], [37, 33, 7, "enum_FIELD"], [53, 49, 7, "enum_FIELD"], [61, 60, 7, "enum_FIELD"], [74, 72, 7, "enum_FIELD"], [84, 82, 7, "enum_FIELD"], [104, 102, 7, "enum_FIELD"], [123, 120, 7, "enum_FIELD"], [165, 164, 7, "enum_FIELD"], [173, 169, 7, "enum_FIELD"], [177, 180, 7, "enum_FIELD"], [183, 186, 7, "enum_FIELD"], [189, 192, 7, "enum_FIELD"], [195, 197, 7, "enum_FIELD"], [199, 201, 7, "enum_FIELD"], [215, 223, 7, "enum_FIELD"], [226, 241, 7, "enum_FIELD"], [258, 259, 7, "enum_FIELD"], [277, 276, 7, "enum_FIELD"], [285, 283, 7, "enum_FIELD"], [302, 300, 7, "enum_FIELD"], [308, 307, 7, "enum_FIELD"], [320, 318, 7, "enum_FIELD"], [337, 336, 7, "enum_FIELD"], [343, 342, 7, "enum_FIELD"], [20, 19, 7, "enum_FIELD"], [33, 32, 7, "enum_FIELD"], [49, 48, 7, "enum_FIELD"], [72, 71, 7, "enum_FIELD"], [82, 81, 7, "enum_FIELD"], [102, 101, 7, "enum_FIELD"], [120, 118, 7, "enum_FIELD"], [125, 136, 7, "enum_FIELD"], [151, 157, 7, "enum_FIELD"], [169, 168, 7, "enum_FIELD"], [180, 179, 7, "enum_FIELD"], [186, 185, 7, "enum_FIELD"], [192, 191, 7, "enum_FIELD"], [223, 221, 7, "enum_FIELD"], [262, 264, 7, "enum_FIELD"], [283, 282, 7, "enum_FIELD"], [300, 299, 7, "enum_FIELD"], [318, 317, 7, "enum_FIELD"], [118, 116, 7, "enum_FIELD"], [127, 126, 7, "enum_FIELD"], [127, 128, 7, "enum_FIELD"], [136, 134, 7, "enum_FIELD"], [153, 152, 7, "enum_FIELD"], [153, 154, 7, "enum_FIELD"], [221, 219, 7, "enum_FIELD"], [248, 246, 7, "enum_FIELD"], [264, 263, 7, "enum_FIELD"], [116, 114, 7, "enum_FIELD"], [134, 132, 7, "enum_FIELD"], [219, 218, 7, "enum_FIELD"], [231, 230, 7, "enum_FIELD"], [237, 236, 7, "enum_FIELD"], [246, 244, 7, "enum_FIELD"], [268, 266, 7, "enum_FIELD"], [114, 112, 7, "enum_FIELD"], [132, 131, 7, "enum_FIELD"], [141, 140, 7, "enum_FIELD"], [141, 142, 7, "enum_FIELD"], [244, 243, 7, "enum_FIELD"], [266, 265, 7, "enum_FIELD"], [112, 111, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [32, 2, 10, "enum_LAST_LEXICAL_USE"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 45, 9, "enum_NEXT_SYNTAX"], [46, 30, 10, "enum_LAST_LEXICAL_USE"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [48, 46, 10, "enum_LAST_LEXICAL_USE"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 66, 9, "enum_NEXT_SYNTAX"], [67, 8, 10, "enum_LAST_LEXICAL_USE"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 70, 9, "enum_NEXT_SYNTAX"], [71, 60, 10, "enum_LAST_LEXICAL_USE"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [75, 67, 10, "enum_LAST_LEXICAL_USE"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [81, 71, 10, "enum_LAST_LEXICAL_USE"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 89, 9, "enum_NEXT_SYNTAX"], [90, 4, 10, "enum_LAST_LEXICAL_USE"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [101, 90, 10, "enum_LAST_LEXICAL_USE"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [111, 96, 10, "enum_LAST_LEXICAL_USE"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 125, 9, "enum_NEXT_SYNTAX"], [126, 79, 10, "enum_LAST_LEXICAL_USE"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [131, 81, 10, "enum_LAST_LEXICAL_USE"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [138, 98, 10, "enum_LAST_LEXICAL_USE"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [140, 126, 10, "enum_LAST_LEXICAL_USE"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 151, 9, "enum_NEXT_SYNTAX"], [152, 140, 10, "enum_LAST_LEXICAL_USE"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [154, 111, 10, "enum_LAST_LEXICAL_USE"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [157, 138, 10, "enum_LAST_LEXICAL_USE"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [168, 48, 10, "enum_LAST_LEXICAL_USE"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 178, 9, "enum_NEXT_SYNTAX"], [179, 164, 10, "enum_LAST_LEXICAL_USE"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 184, 9, "enum_NEXT_SYNTAX"], [185, 179, 10, "enum_LAST_LEXICAL_USE"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [187, 188, 9, "enum_NEXT_SYNTAX"], [188, 189, 9, "enum_NEXT_SYNTAX"], [189, 190, 9, "enum_NEXT_SYNTAX"], [191, 185, 10, "enum_LAST_LEXICAL_USE"], [190, 191, 9, "enum_NEXT_SYNTAX"], [191, 192, 9, "enum_NEXT_SYNTAX"], [192, 193, 9, "enum_NEXT_SYNTAX"], [193, 194, 9, "enum_NEXT_SYNTAX"], [194, 195, 9, "enum_NEXT_SYNTAX"], [195, 196, 9, "enum_NEXT_SYNTAX"], [196, 197, 9, "enum_NEXT_SYNTAX"], [197, 198, 9, "enum_NEXT_SYNTAX"], [198, 199, 9, "enum_NEXT_SYNTAX"], [199, 200, 9, "enum_NEXT_SYNTAX"], [201, 152, 10, "enum_LAST_LEXICAL_USE"], [200, 201, 9, "enum_NEXT_SYNTAX"], [201, 202, 9, "enum_NEXT_SYNTAX"], [202, 204, 9, "enum_NEXT_SYNTAX"], [205, 162, 10, "enum_LAST_LEXICAL_USE"], [204, 205, 9, "enum_NEXT_SYNTAX"], [205, 206, 9, "enum_NEXT_SYNTAX"], [206, 207, 9, "enum_NEXT_SYNTAX"], [207, 208, 9, "enum_NEXT_SYNTAX"], [208, 211, 9, "enum_NEXT_SYNTAX"], [211, 212, 9, "enum_NEXT_SYNTAX"], [212, 213, 9, "enum_NEXT_SYNTAX"], [213, 215, 9, "enum_NEXT_SYNTAX"], [215, 216, 9, "enum_NEXT_SYNTAX"], [216, 217, 9, "enum_NEXT_SYNTAX"], [218, 205, 10, "enum_LAST_LEXICAL_USE"], [217, 218, 9, "enum_NEXT_SYNTAX"], [218, 219, 9, "enum_NEXT_SYNTAX"], [219, 220, 9, "enum_NEXT_SYNTAX"], [220, 221, 9, "enum_NEXT_SYNTAX"], [221, 222, 9, "enum_NEXT_SYNTAX"], [222, 223, 9, "enum_NEXT_SYNTAX"], [223, 224, 9, "enum_NEXT_SYNTAX"], [224, 226, 9, "enum_NEXT_SYNTAX"], [226, 227, 9, "enum_NEXT_SYNTAX"], [227, 228, 9, "enum_NEXT_SYNTAX"], [228, 229, 9, "enum_NEXT_SYNTAX"], [230, 216, 10, "enum_LAST_LEXICAL_USE"], [229, 230, 9, "enum_NEXT_SYNTAX"], [230, 231, 9, "enum_NEXT_SYNTAX"], [231, 232, 9, "enum_NEXT_SYNTAX"], [232, 233, 9, "enum_NEXT_SYNTAX"], [233, 234, 9, "enum_NEXT_SYNTAX"], [234, 235, 9, "enum_NEXT_SYNTAX"], [236, 230, 10, "enum_LAST_LEXICAL_USE"], [235, 236, 9, "enum_NEXT_SYNTAX"], [236, 237, 9, "enum_NEXT_SYNTAX"], [237, 238, 9, "enum_NEXT_SYNTAX"], [238, 239, 9, "enum_NEXT_SYNTAX"], [239, 240, 9, "enum_NEXT_SYNTAX"], [240, 241, 9, "enum_NEXT_SYNTAX"], [241, 242, 9, "enum_NEXT_SYNTAX"], [243, 218, 10, "enum_LAST_LEXICAL_USE"], [242, 243, 9, "enum_NEXT_SYNTAX"], [243, 244, 9, "enum_NEXT_SYNTAX"], [244, 245, 9, "enum_NEXT_SYNTAX"], [245, 246, 9, "enum_NEXT_SYNTAX"], [246, 247, 9, "enum_NEXT_SYNTAX"], [247, 248, 9, "enum_NEXT_SYNTAX"], [248, 249, 9, "enum_NEXT_SYNTAX"], [249, 250, 9, "enum_NEXT_SYNTAX"], [250, 251, 9, "enum_NEXT_SYNTAX"], [251, 252, 9, "enum_NEXT_SYNTAX"], [252, 255, 9, "enum_NEXT_SYNTAX"], [255, 258, 9, "enum_NEXT_SYNTAX"], [259, 236, 10, "enum_LAST_LEXICAL_USE"], [258, 259, 9, "enum_NEXT_SYNTAX"], [259, 260, 9, "enum_NEXT_SYNTAX"], [260, 262, 9, "enum_NEXT_SYNTAX"], [262, 263, 9, "enum_NEXT_SYNTAX"], [263, 264, 9, "enum_NEXT_SYNTAX"], [265, 259, 10, "enum_LAST_LEXICAL_USE"], [264, 265, 9, "enum_NEXT_SYNTAX"], [265, 266, 9, "enum_NEXT_SYNTAX"], [266, 267, 9, "enum_NEXT_SYNTAX"], [267, 268, 9, "enum_NEXT_SYNTAX"], [268, 269, 9, "enum_NEXT_SYNTAX"], [269, 270, 9, "enum_NEXT_SYNTAX"], [270, 273, 9, "enum_NEXT_SYNTAX"], [273, 274, 9, "enum_NEXT_SYNTAX"], [274, 275, 9, "enum_NEXT_SYNTAX"], [276, 243, 10, "enum_LAST_LEXICAL_USE"], [275, 276, 9, "enum_NEXT_SYNTAX"], [276, 277, 9, "enum_NEXT_SYNTAX"], [277, 278, 9, "enum_NEXT_SYNTAX"], [278, 279, 9, "enum_NEXT_SYNTAX"], [279, 280, 9, "enum_NEXT_SYNTAX"], [280, 281, 9, "enum_NEXT_SYNTAX"], [282, 276, 10, "enum_LAST_LEXICAL_USE"], [281, 282, 9, "enum_NEXT_SYNTAX"], [282, 283, 9, "enum_NEXT_SYNTAX"], [283, 284, 9, "enum_NEXT_SYNTAX"], [284, 285, 9, "enum_NEXT_SYNTAX"], [285, 286, 9, "enum_NEXT_SYNTAX"], [286, 289, 9, "enum_NEXT_SYNTAX"], [289, 290, 9, "enum_NEXT_SYNTAX"], [290, 292, 9, "enum_NEXT_SYNTAX"], [292, 293, 9, "enum_NEXT_SYNTAX"], [293, 294, 9, "enum_NEXT_SYNTAX"], [294, 295, 9, "enum_NEXT_SYNTAX"], [296, 274, 10, "enum_LAST_LEXICAL_USE"], [295, 296, 9, "enum_NEXT_SYNTAX"], [296, 297, 9, "enum_NEXT_SYNTAX"], [297, 298, 9, "enum_NEXT_SYNTAX"], [299, 282, 10, "enum_LAST_LEXICAL_USE"], [298, 299, 9, "enum_NEXT_SYNTAX"], [299, 300, 9, "enum_NEXT_SYNTAX"], [300, 301, 9, "enum_NEXT_SYNTAX"], [301, 302, 9, "enum_NEXT_SYNTAX"], [302, 303, 9, "enum_NEXT_SYNTAX"], [303, 304, 9, "enum_NEXT_SYNTAX"], [305, 280, 10, "enum_LAST_LEXICAL_USE"], [304, 305, 9, "enum_NEXT_SYNTAX"], [305, 306, 9, "enum_NEXT_SYNTAX"], [307, 299, 10, "enum_LAST_LEXICAL_USE"], [306, 307, 9, "enum_NEXT_SYNTAX"], [307, 308, 9, "enum_NEXT_SYNTAX"], [308, 309, 9, "enum_NEXT_SYNTAX"], [309, 312, 9, "enum_NEXT_SYNTAX"], [313, 75, 10, "enum_LAST_LEXICAL_USE"], [312, 313, 9, "enum_NEXT_SYNTAX"], [313, 314, 9, "enum_NEXT_SYNTAX"], [314, 316, 9, "enum_NEXT_SYNTAX"], [317, 131, 10, "enum_LAST_LEXICAL_USE"], [316, 317, 9, "enum_NEXT_SYNTAX"], [317, 318, 9, "enum_NEXT_SYNTAX"], [318, 319, 9, "enum_NEXT_SYNTAX"], [319, 320, 9, "enum_NEXT_SYNTAX"], [321, 58, 10, "enum_LAST_LEXICAL_USE"], [320, 321, 9, "enum_NEXT_SYNTAX"], [321, 322, 9, "enum_NEXT_SYNTAX"], [322, 325, 9, "enum_NEXT_SYNTAX"], [325, 326, 9, "enum_NEXT_SYNTAX"], [327, 305, 10, "enum_LAST_LEXICAL_USE"], [326, 327, 9, "enum_NEXT_SYNTAX"], [327, 328, 9, "enum_NEXT_SYNTAX"], [328, 329, 9, "enum_NEXT_SYNTAX"], [329, 330, 9, "enum_NEXT_SYNTAX"], [330, 331, 9, "enum_NEXT_SYNTAX"], [331, 333, 9, "enum_NEXT_SYNTAX"], [333, 334, 9, "enum_NEXT_SYNTAX"], [334, 335, 9, "enum_NEXT_SYNTAX"], [335, 336, 9, "enum_NEXT_SYNTAX"], [336, 337, 9, "enum_NEXT_SYNTAX"], [338, 296, 10, "enum_LAST_LEXICAL_USE"], [337, 338, 9, "enum_NEXT_SYNTAX"], [338, 339, 9, "enum_NEXT_SYNTAX"], [339, 341, 9, "enum_NEXT_SYNTAX"], [341, 342, 9, "enum_NEXT_SYNTAX"], [342, 343, 9, "enum_NEXT_SYNTAX"], [344, 334, 10, "enum_LAST_LEXICAL_USE"], [343, 344, 9, "enum_NEXT_SYNTAX"], [344, 345, 9, "enum_NEXT_SYNTAX"], [345, 348, 9, "enum_NEXT_SYNTAX"], [348, 349, 9, "enum_NEXT_SYNTAX"], [6, 10, 1, "enum_CFG_NEXT"], [10, 1, 1, "enum_CFG_NEXT"], [5, 14, 1, "enum_CFG_NEXT"], [14, 24, 1, "enum_CFG_NEXT"], [24, 45, 1, "enum_CFG_NEXT"], [24, 29, 1, "enum_CFG_NEXT"], [29, 57, 1, "enum_CFG_NEXT"], [45, 57, 1, "enum_CFG_NEXT"], [57, 67, 1, "enum_CFG_NEXT"], [67, 78, 1, "enum_CFG_NEXT"], [67, 70, 1, "enum_CFG_NEXT"], [70, 78, 1, "enum_CFG_NEXT"], [78, 90, 1, "enum_CFG_NEXT"], [90, 161, 1, "enum_CFG_NEXT"], [90, 104, 1, "enum_CFG_NEXT"], [104, 97, 1, "enum_CFG_NEXT"], [97, 161, 1, "enum_CFG_NEXT"], [97, 120, 1, "enum_CFG_NEXT"], [120, 151, 1, "enum_CFG_NEXT"], [120, 125, 1, "enum_CFG_NEXT"], [125, 97, 1, "enum_CFG_NEXT"], [151, 97, 1, "enum_CFG_NEXT"], [161, 206, 1, "enum_CFG_NEXT"], [206, 292, 1, "enum_CFG_NEXT"], [206, 212, 1, "enum_CFG_NEXT"], [212, 215, 1, "enum_CFG_NEXT"], [212, 273, 1, "enum_CFG_NEXT"], [215, 241, 1, "enum_CFG_NEXT"], [241, 273, 1, "enum_CFG_NEXT"], [241, 259, 1, "enum_CFG_NEXT"], [259, 262, 1, "enum_CFG_NEXT"], [259, 212, 1, "enum_CFG_NEXT"], [262, 212, 1, "enum_CFG_NEXT"], [273, 279, 1, "enum_CFG_NEXT"], [279, 313, 1, "enum_CFG_NEXT"], [292, 304, 1, "enum_CFG_NEXT"], [304, 313, 1, "enum_CFG_NEXT"], [313, 328, 1, "enum_CFG_NEXT"], [313, 316, 1, "enum_CFG_NEXT"], [316, 328, 1, "enum_CFG_NEXT"], [328, 333, 1, "enum_CFG_NEXT"], [328, 348, 1, "enum_CFG_NEXT"], [333, 341, 1, "enum_CFG_NEXT"], [32, 2, 3, "enum_LAST_WRITE"], [46, 48, 2, "enum_LAST_READ"], [67, 8, 3, "enum_LAST_WRITE"], [71, 60, 2, "enum_LAST_READ"], [75, 67, 2, "enum_LAST_READ"], [75, 8, 3, "enum_LAST_WRITE"], [81, 71, 2, "enum_LAST_READ"], [81, 60, 2, "enum_LAST_READ"], [90, 4, 3, "enum_LAST_WRITE"], [101, 90, 2, "enum_LAST_READ"], [101, 4, 3, "enum_LAST_WRITE"], [96, 111, 2, "enum_LAST_READ"], [96, 154, 2, "enum_LAST_READ"], [96, 96, 3, "enum_LAST_WRITE"], [98, 157, 2, "enum_LAST_READ"], [98, 138, 2, "enum_LAST_READ"], [98, 98, 3, "enum_LAST_WRITE"], [111, 111, 2, "enum_LAST_READ"], [111, 154, 2, "enum_LAST_READ"], [111, 96, 3, "enum_LAST_WRITE"], [131, 81, 2, "enum_LAST_READ"], [131, 131, 2, "enum_LAST_READ"], [138, 157, 2, "enum_LAST_READ"], [138, 138, 2, "enum_LAST_READ"], [138, 98, 3, "enum_LAST_WRITE"], [140, 126, 2, "enum_LAST_READ"], [140, 152, 2, "enum_LAST_READ"], [140, 79, 3, "enum_LAST_WRITE"], [126, 140, 2, "enum_LAST_READ"], [126, 79, 3, "enum_LAST_WRITE"], [157, 157, 2, "enum_LAST_READ"], [157, 138, 2, "enum_LAST_READ"], [157, 98, 3, "enum_LAST_WRITE"], [152, 126, 2, "enum_LAST_READ"], [152, 152, 2, "enum_LAST_READ"], [152, 79, 3, "enum_LAST_WRITE"], [154, 111, 2, "enum_LAST_READ"], [154, 96, 3, "enum_LAST_WRITE"], [168, 48, 2, "enum_LAST_READ"], [168, 46, 3, "enum_LAST_WRITE"], [168, 30, 3, "enum_LAST_WRITE"], [179, 164, 2, "enum_LAST_READ"], [185, 179, 2, "enum_LAST_READ"], [191, 185, 2, "enum_LAST_READ"], [201, 126, 2, "enum_LAST_READ"], [201, 152, 2, "enum_LAST_READ"], [201, 79, 3, "enum_LAST_WRITE"], [205, 162, 3, "enum_LAST_WRITE"], [218, 243, 2, "enum_LAST_READ"], [218, 205, 2, "enum_LAST_READ"], [218, 162, 3, "enum_LAST_WRITE"], [216, 259, 2, "enum_LAST_READ"], [216, 265, 2, "enum_LAST_READ"], [216, 216, 3, "enum_LAST_WRITE"], [230, 259, 2, "enum_LAST_READ"], [230, 265, 2, "enum_LAST_READ"], [230, 216, 3, "enum_LAST_WRITE"], [236, 230, 2, "enum_LAST_READ"], [236, 216, 3, "enum_LAST_WRITE"], [243, 218, 2, "enum_LAST_READ"], [243, 162, 3, "enum_LAST_WRITE"], [259, 236, 2, "enum_LAST_READ"], [259, 216, 3, "enum_LAST_WRITE"], [263, 263, 2, "enum_LAST_READ"], [265, 259, 2, "enum_LAST_READ"], [265, 216, 3, "enum_LAST_WRITE"], [276, 243, 2, "enum_LAST_READ"], [276, 205, 2, "enum_LAST_READ"], [276, 162, 3, "enum_LAST_WRITE"], [282, 276, 2, "enum_LAST_READ"], [282, 162, 3, "enum_LAST_WRITE"], [299, 205, 2, "enum_LAST_READ"], [299, 162, 3, "enum_LAST_WRITE"], [307, 299, 2, "enum_LAST_READ"], [307, 162, 3, "enum_LAST_WRITE"], [313, 67, 2, "enum_LAST_READ"], [313, 75, 2, "enum_LAST_READ"], [313, 8, 3, "enum_LAST_WRITE"], [317, 81, 2, "enum_LAST_READ"], [317, 131, 2, "enum_LAST_READ"], [321, 58, 3, "enum_LAST_WRITE"], [327, 305, 3, "enum_LAST_WRITE"], [327, 280, 3, "enum_LAST_WRITE"], [338, 274, 3, "enum_LAST_WRITE"], [338, 296, 3, "enum_LAST_WRITE"], [344, 334, 3, "enum_LAST_WRITE"], [58, 60, 4, "enum_COMPUTED_FROM"], [79, 81, 4, "enum_COMPUTED_FROM"], [162, 164, 4, "enum_COMPUTED_FROM"], [162, 201, 4, "enum_COMPUTED_FROM"], [162, 168, 4, "enum_COMPUTED_FROM"], [162, 179, 4, "enum_COMPUTED_FROM"], [162, 185, 4, "enum_COMPUTED_FROM"], [162, 191, 4, "enum_COMPUTED_FROM"], [30, 32, 4, "enum_COMPUTED_FROM"], [46, 48, 4, "enum_COMPUTED_FROM"], [274, 276, 4, "enum_COMPUTED_FROM"], [280, 282, 4, "enum_COMPUTED_FROM"], [295, 299, 4, "enum_COMPUTED_FROM"], [305, 307, 4, "enum_COMPUTED_FROM"], [334, 336, 4, "enum_COMPUTED_FROM"], [334, 338, 4, "enum_COMPUTED_FROM"], [216, 218, 4, "enum_COMPUTED_FROM"], [127, 138, 4, "enum_COMPUTED_FROM"], [127, 131, 4, "enum_COMPUTED_FROM"], [127, 140, 4, "enum_COMPUTED_FROM"], [153, 157, 4, "enum_COMPUTED_FROM"]], "error_location": 48, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/ladybug-tools/honeybee-radiance-command.git", "old_path": "honeybee_radiance_command/_command_util.py", "hash": "fe62562a0b228b8e46309aa88c116882247c89b9", "code": "def run_command(input_command: str, env: Optional[Dict[str, str]]=None, cwd: Optional[str]=None):\n    \"\"\"Run a shell command.\n\n    Args:\n        input_command: Input command.\n        env: Additional environmental variable that will be added to global environment.\n        cwd: Current working directory. If provided command will be executed from this\n            folder.\n    \"\"\"\n    if platform.system() == 'Windows':\n        command: str = input_command.replace(''', '\"')\n    else:\n        command: str = command.replace('\"', ''')\n\n    # change cwd - Popen cwd input simply doesn't work.\n    cur_dir: str = os.getcwd()\n    if cwd:\n        os.chdir(cwd)\n\n    # update environmental variable\n    g_env: Dict = os.environ.copy()\n    if env:\n        for k, v in env.items():\n            if k.strip().upper() == 'PATH':\n                g_env['PATH'] = os.pathsep.join((v, g_env['PATH']))\n            else:\n                g_env[k] = v\n\n    process: Any = subprocess.Popen(\n        command.replace('\\', '/'), stdin=subprocess.PIPE, stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE, shell=True, env=g_env\n    )\n\n    if process.stdout:\n        while True:\n            output: str = process.stdout.readline()\n            if (output == b'' or output == '') and process.poll() is not None:\n                break\n            if output:\n                print(output.strip())\n        stderr: Any = process.stderr\n        rc: int = process.poll()\n    else:\n        # stdout is redirected to a file\n        _, stderr = process.communicate()\n        rc: int = process.returncode\n\n    if cwd:\n        os.chdir(cur_dir)\n\n    if rc != 0:\n        errors = _stream_file_content(stderr)\n        raise RuntimeError(errors)\n\n    # only gets here is successful\n    return 0\n", "rewrite": "ReplaceText(target='input_command' @(21,18)->(21,25))", "error_line": 12, "has_bug": true, "code_full": "import os\nimport platform\nimport subprocess\nfrom typing import Any, Dict, Optional\n\n\ndef _stream_file_content(file_path: str) -> str:\n    return \"\"\n\n\ndef run_command(input_command: str, env: Optional[Dict[str, str]]=None, cwd: Optional[str]=None):\n    \"\"\"Run a shell command.\n\n    Args:\n        input_command: Input command.\n        env: Additional environmental variable that will be added to global environment.\n        cwd: Current working directory. If provided command will be executed from this\n            folder.\n    \"\"\"\n    if platform.system() == 'Windows':\n        command: str = input_command.replace(''', '\"')\n    else:\n        command: str = command.replace('\"', ''')\n\n    # change cwd - Popen cwd input simply doesn't work.\n    cur_dir: str = os.getcwd()\n    if cwd:\n        os.chdir(cwd)\n\n    # update environmental variable\n    g_env: Dict = os.environ.copy()\n    if env:\n        for k, v in env.items():\n            if k.strip().upper() == 'PATH':\n                g_env['PATH'] = os.pathsep.join((v, g_env['PATH']))\n            else:\n                g_env[k] = v\n\n    process: Any = subprocess.Popen(\n        command.replace('\\', '/'), stdin=subprocess.PIPE, stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE, shell=True, env=g_env\n    )\n\n    if process.stdout:\n        while True:\n            output: str = process.stdout.readline()\n            if (output == b'' or output == '') and process.poll() is not None:\n                break\n            if output:\n                print(output.strip())\n        stderr: Any = process.stderr\n        rc: int = process.poll()\n    else:\n        # stdout is redirected to a file\n        _, stderr = process.communicate()\n        rc: int = process.returncode\n\n    if cwd:\n        os.chdir(cur_dir)\n\n    if rc != 0:\n        errors = _stream_file_content(stderr)\n        raise RuntimeError(errors)\n\n    # only gets here is successful\n    return 0\n", "error_location_char": [506, 513], "type_checked_pytype": false, "type_error_label": "name-error", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def testFail(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "fit", "=", "Fit", "(", ")", "#NEWLINE#", "skill1", "=", "Skill", "(", "Type", "(", "56", ")", ")", "#NEWLINE#", "fit", ".", "items", ".", "append", "(", "skill1", ")", "#NEWLINE#", "skill2", "=", "Skill", "(", "Type", "(", "56", ")", ")", "#NEWLINE#", "fit", ".", "items", ".", "append", "(", "skill2", ")", "#NEWLINE#", "restrictionError1", "=", "fit", ".", "getRestrictionError", "(", "skill1", ",", "Restriction", ".", "skillUniqueness", ")", "#NEWLINE#", "self", ".", "assertIsNotNone", "(", "restrictionError1", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "restrictionError1", ".", "skill", ",", "56", ")", "#NEWLINE#", "restrictionError2", "=", "fit", ".", "getRestrictionError", "(", "skill1", ",", "Restriction", ".", "skillUniqueness", ")", "#NEWLINE#", "self", ".", "assertIsNotNone", "(", "restrictionError2", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "restrictionError2", ".", "skill", ",", "56", ")", "#NEWLINE#", "fit", ".", "items", ".", "remove", "(", "skill1", ")", "#NEWLINE#", "fit", ".", "items", ".", "remove", "(", "skill2", ")", "#NEWLINE#", "self", ".", "assertBuffersEmpty", "(", "fit", ")"], "edges": [[6, 10, 7, "enum_FIELD"], [12, 16, 7, "enum_FIELD"], [22, 28, 7, "enum_FIELD"], [31, 35, 7, "enum_FIELD"], [41, 47, 7, "enum_FIELD"], [50, 58, 7, "enum_FIELD"], [63, 67, 7, "enum_FIELD"], [70, 78, 7, "enum_FIELD"], [81, 89, 7, "enum_FIELD"], [94, 98, 7, "enum_FIELD"], [101, 109, 7, "enum_FIELD"], [112, 118, 7, "enum_FIELD"], [121, 127, 7, "enum_FIELD"], [130, 134, 7, "enum_FIELD"], [10, 9, 7, "enum_FIELD"], [16, 15, 7, "enum_FIELD"], [28, 26, 7, "enum_FIELD"], [35, 34, 7, "enum_FIELD"], [47, 45, 7, "enum_FIELD"], [58, 54, 7, "enum_FIELD"], [67, 65, 7, "enum_FIELD"], [78, 72, 7, "enum_FIELD"], [89, 85, 7, "enum_FIELD"], [98, 96, 7, "enum_FIELD"], [109, 103, 7, "enum_FIELD"], [118, 116, 7, "enum_FIELD"], [127, 125, 7, "enum_FIELD"], [134, 132, 7, "enum_FIELD"], [18, 17, 7, "enum_FIELD"], [26, 24, 7, "enum_FIELD"], [37, 36, 7, "enum_FIELD"], [45, 43, 7, "enum_FIELD"], [54, 53, 7, "enum_FIELD"], [60, 59, 7, "enum_FIELD"], [65, 64, 7, "enum_FIELD"], [72, 71, 7, "enum_FIELD"], [76, 75, 7, "enum_FIELD"], [85, 84, 7, "enum_FIELD"], [91, 90, 7, "enum_FIELD"], [96, 95, 7, "enum_FIELD"], [103, 102, 7, "enum_FIELD"], [107, 106, 7, "enum_FIELD"], [116, 114, 7, "enum_FIELD"], [125, 123, 7, "enum_FIELD"], [132, 131, 7, "enum_FIELD"], [24, 23, 7, "enum_FIELD"], [43, 42, 7, "enum_FIELD"], [114, 113, 7, "enum_FIELD"], [123, 122, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [23, 7, 10, "enum_LAST_LEXICAL_USE"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [29, 13, 10, "enum_LAST_LEXICAL_USE"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [34, 15, 10, "enum_LAST_LEXICAL_USE"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [36, 17, 10, "enum_LAST_LEXICAL_USE"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [42, 23, 10, "enum_LAST_LEXICAL_USE"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [48, 32, 10, "enum_LAST_LEXICAL_USE"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [53, 42, 10, "enum_LAST_LEXICAL_USE"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [57, 29, 10, "enum_LAST_LEXICAL_USE"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [64, 2, 10, "enum_LAST_LEXICAL_USE"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [68, 51, 10, "enum_LAST_LEXICAL_USE"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [71, 64, 10, "enum_LAST_LEXICAL_USE"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [75, 68, 10, "enum_LAST_LEXICAL_USE"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [84, 53, 10, "enum_LAST_LEXICAL_USE"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [88, 57, 10, "enum_LAST_LEXICAL_USE"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [90, 59, 10, "enum_LAST_LEXICAL_USE"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [95, 71, 10, "enum_LAST_LEXICAL_USE"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [99, 82, 10, "enum_LAST_LEXICAL_USE"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [102, 95, 10, "enum_LAST_LEXICAL_USE"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [106, 99, 10, "enum_LAST_LEXICAL_USE"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [113, 84, 10, "enum_LAST_LEXICAL_USE"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [119, 88, 10, "enum_LAST_LEXICAL_USE"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [122, 113, 10, "enum_LAST_LEXICAL_USE"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [128, 48, 10, "enum_LAST_LEXICAL_USE"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [131, 102, 10, "enum_LAST_LEXICAL_USE"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [135, 122, 10, "enum_LAST_LEXICAL_USE"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [6, 12, 1, "enum_CFG_NEXT"], [12, 22, 1, "enum_CFG_NEXT"], [22, 31, 1, "enum_CFG_NEXT"], [31, 41, 1, "enum_CFG_NEXT"], [41, 50, 1, "enum_CFG_NEXT"], [50, 63, 1, "enum_CFG_NEXT"], [63, 70, 1, "enum_CFG_NEXT"], [70, 81, 1, "enum_CFG_NEXT"], [81, 94, 1, "enum_CFG_NEXT"], [94, 101, 1, "enum_CFG_NEXT"], [101, 112, 1, "enum_CFG_NEXT"], [112, 121, 1, "enum_CFG_NEXT"], [121, 130, 1, "enum_CFG_NEXT"], [23, 7, 3, "enum_LAST_WRITE"], [29, 13, 3, "enum_LAST_WRITE"], [34, 15, 2, "enum_LAST_READ"], [36, 17, 2, "enum_LAST_READ"], [42, 23, 2, "enum_LAST_READ"], [42, 7, 3, "enum_LAST_WRITE"], [48, 32, 3, "enum_LAST_WRITE"], [53, 42, 2, "enum_LAST_READ"], [53, 7, 3, "enum_LAST_WRITE"], [57, 29, 2, "enum_LAST_READ"], [57, 13, 3, "enum_LAST_WRITE"], [64, 2, 3, "enum_LAST_WRITE"], [68, 51, 3, "enum_LAST_WRITE"], [71, 64, 2, "enum_LAST_READ"], [71, 2, 3, "enum_LAST_WRITE"], [75, 68, 2, "enum_LAST_READ"], [75, 51, 3, "enum_LAST_WRITE"], [84, 53, 2, "enum_LAST_READ"], [84, 7, 3, "enum_LAST_WRITE"], [88, 57, 2, "enum_LAST_READ"], [88, 13, 3, "enum_LAST_WRITE"], [90, 59, 2, "enum_LAST_READ"], [95, 71, 2, "enum_LAST_READ"], [95, 2, 3, "enum_LAST_WRITE"], [99, 82, 3, "enum_LAST_WRITE"], [102, 95, 2, "enum_LAST_READ"], [102, 2, 3, "enum_LAST_WRITE"], [106, 99, 2, "enum_LAST_READ"], [106, 82, 3, "enum_LAST_WRITE"], [113, 84, 2, "enum_LAST_READ"], [113, 7, 3, "enum_LAST_WRITE"], [119, 88, 2, "enum_LAST_READ"], [119, 13, 3, "enum_LAST_WRITE"], [122, 113, 2, "enum_LAST_READ"], [122, 7, 3, "enum_LAST_WRITE"], [128, 48, 2, "enum_LAST_READ"], [128, 32, 3, "enum_LAST_WRITE"], [131, 102, 2, "enum_LAST_READ"], [131, 2, 3, "enum_LAST_WRITE"], [135, 122, 2, "enum_LAST_READ"], [135, 7, 3, "enum_LAST_WRITE"], [7, 9, 4, "enum_COMPUTED_FROM"], [13, 15, 4, "enum_COMPUTED_FROM"], [13, 17, 4, "enum_COMPUTED_FROM"], [32, 34, 4, "enum_COMPUTED_FROM"], [32, 36, 4, "enum_COMPUTED_FROM"], [51, 57, 4, "enum_COMPUTED_FROM"], [51, 53, 4, "enum_COMPUTED_FROM"], [51, 59, 4, "enum_COMPUTED_FROM"], [82, 88, 4, "enum_COMPUTED_FROM"], [82, 84, 4, "enum_COMPUTED_FROM"], [82, 90, 4, "enum_COMPUTED_FROM"]], "error_location": 88, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/pyfa-org/eos.git", "old_path": "tests/restrictionTracker/restrictions/testSkillUniqueness.py", "hash": "23c14ff52c9ab1a52ca35887ca043680046dcaf7", "code": "def testFail(self):\n    # Check that multiple skills with this ID raise error\n    fit: Fit = Fit()\n    skill1: Skill = Skill(Type(56))\n    fit.items.append(skill1)\n    skill2: Skill = Skill(Type(56))\n    fit.items.append(skill2)\n    restrictionError1 = fit.getRestrictionError(skill1, Restriction.skillUniqueness)\n    self.assertIsNotNone(restrictionError1)\n    self.assertEqual(restrictionError1.skill, 56)\n    restrictionError2 = fit.getRestrictionError(skill1, Restriction.skillUniqueness)\n    self.assertIsNotNone(restrictionError2)\n    self.assertEqual(restrictionError2.skill, 56)\n    fit.items.remove(skill1)\n    fit.items.remove(skill2)\n    self.assertBuffersEmpty(fit)\n", "rewrite": "ReplaceText(target='skill2' @(41,52)->(41,58))", "error_line": 10, "has_bug": true, "code_full": "from typing import List, Optional\n\n\nclass Type:\n    def __init__(self, id: int):\n        pass\n\nclass Skill:\n    type: Type\n\n    def __init__(self, type: Type):\n        pass\n\n\nclass Restriction:\n    skillUniqueness: str = \"skillUniqueness\"\n\nclass RestrictionError:\n    skill: int\n\nclass Fit:\n    items: List[Skill]\n\n    def getRestrictionError(self, skill: Skill, restriction: str) -> Optional[RestrictionError]:\n        return None\n\n\n\nclass TestClass:\n    def assertBuffersEmpty(self, fit: Fit):\n        pass\n    \n    def assertIsNotNone(self, value):\n        pass\n\n    def assertEqual(self, value1, value2):\n        pass\n    \n    def testFail(self):\n        # Check that multiple skills with this ID raise error\n        fit: Fit = Fit()\n        skill1: Skill = Skill(Type(56))\n        fit.items.append(skill1)\n        skill2: Skill = Skill(Type(56))\n        fit.items.append(skill2)\n        restrictionError1 = fit.getRestrictionError(skill1, Restriction.skillUniqueness)\n        self.assertIsNotNone(restrictionError1)\n        self.assertEqual(restrictionError1.skill, 56)\n        restrictionError2 = fit.getRestrictionError(skill1, Restriction.skillUniqueness)\n        self.assertIsNotNone(restrictionError2)\n        self.assertEqual(restrictionError2.skill, 56)\n        fit.items.remove(skill1)\n        fit.items.remove(skill2)\n        self.assertBuffersEmpty(fit)\n", "error_location_char": [456, 462], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def _check_and_parse_output_plugin(", "string", ")", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "raw_ouputs", "=", "string", ".", "split", "(", "';'", ")", "#NEWLINE#", "outputs", "=", "[", "]", "#NEWLINE#", "for", "output", "in", "raw_ouputs", ":", "#NEWLINE#", "#INDENT#", "(", "name", ",", "arguments", ")", "=", "output", ".", "split", "(", "':'", ")", "#NEWLINE#", "outputs", ".", "append", "(", "(", "name", ",", "arguments", ")", ")", "#NEWLINE#", "#UNINDENT#", "if", "(", "len", "(", "output", ")", "==", "0", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "ValueError", "(", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "except", "ValueError", ":", "#NEWLINE#", "#INDENT#", "raise", "RuntimeError", "(", "'Incorrect output plugin string'", ")", "#NEWLINE#", "#UNINDENT#", "return", "outputs"], "edges": [[88, 89, 7, "enum_FIELD"], [10, 16, 7, "enum_FIELD"], [19, 22, 7, "enum_FIELD"], [27, 26, 7, "enum_FIELD"], [27, 28, 7, "enum_FIELD"], [57, 63, 7, "enum_FIELD"], [76, 77, 7, "enum_FIELD"], [16, 14, 7, "enum_FIELD"], [31, 41, 7, "enum_FIELD"], [44, 48, 7, "enum_FIELD"], [63, 60, 7, "enum_FIELD"], [69, 71, 7, "enum_FIELD"], [81, 83, 7, "enum_FIELD"], [14, 13, 7, "enum_FIELD"], [41, 39, 7, "enum_FIELD"], [48, 46, 7, "enum_FIELD"], [60, 59, 7, "enum_FIELD"], [71, 70, 7, "enum_FIELD"], [83, 82, 7, "enum_FIELD"], [39, 38, 7, "enum_FIELD"], [46, 45, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [13, 2, 10, "enum_LAST_LEXICAL_USE"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [28, 11, 10, "enum_LAST_LEXICAL_USE"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [38, 26, 10, "enum_LAST_LEXICAL_USE"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [45, 20, 10, "enum_LAST_LEXICAL_USE"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [50, 33, 10, "enum_LAST_LEXICAL_USE"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [52, 35, 10, "enum_LAST_LEXICAL_USE"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [61, 38, 10, "enum_LAST_LEXICAL_USE"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 76, 9, "enum_NEXT_SYNTAX"], [77, 70, 10, "enum_LAST_LEXICAL_USE"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 88, 9, "enum_NEXT_SYNTAX"], [89, 45, 10, "enum_LAST_LEXICAL_USE"], [88, 89, 9, "enum_NEXT_SYNTAX"], [10, 19, 1, "enum_CFG_NEXT"], [19, 28, 1, "enum_CFG_NEXT"], [28, 77, 1, "enum_CFG_NEXT"], [28, 26, 1, "enum_CFG_NEXT"], [26, 77, 1, "enum_CFG_NEXT"], [26, 63, 1, "enum_CFG_NEXT"], [26, 31, 1, "enum_CFG_NEXT"], [31, 44, 1, "enum_CFG_NEXT"], [44, 77, 1, "enum_CFG_NEXT"], [44, 26, 1, "enum_CFG_NEXT"], [63, 77, 1, "enum_CFG_NEXT"], [63, 69, 1, "enum_CFG_NEXT"], [63, 88, 1, "enum_CFG_NEXT"], [69, 77, 1, "enum_CFG_NEXT"], [77, 81, 1, "enum_CFG_NEXT"], [13, 2, 3, "enum_LAST_WRITE"], [28, 11, 3, "enum_LAST_WRITE"], [26, 38, 2, "enum_LAST_READ"], [26, 26, 3, "enum_LAST_WRITE"], [38, 38, 2, "enum_LAST_READ"], [38, 26, 3, "enum_LAST_WRITE"], [33, 50, 2, "enum_LAST_READ"], [33, 33, 3, "enum_LAST_WRITE"], [35, 52, 2, "enum_LAST_READ"], [35, 35, 3, "enum_LAST_WRITE"], [45, 45, 2, "enum_LAST_READ"], [45, 20, 3, "enum_LAST_WRITE"], [50, 50, 2, "enum_LAST_READ"], [50, 33, 3, "enum_LAST_WRITE"], [52, 52, 2, "enum_LAST_READ"], [52, 35, 3, "enum_LAST_WRITE"], [61, 38, 2, "enum_LAST_READ"], [61, 26, 3, "enum_LAST_WRITE"], [77, 70, 2, "enum_LAST_READ"], [89, 45, 2, "enum_LAST_READ"], [89, 20, 3, "enum_LAST_WRITE"], [11, 13, 4, "enum_COMPUTED_FROM"], [34, 38, 4, "enum_COMPUTED_FROM"]], "error_location": 61, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/machinekoder/speed-friending-matcher.git", "old_path": "application.py", "hash": "ea954a502879b22a25d54fd8f40bf35315aede13", "code": "def _check_and_parse_output_plugin(string: str) -> List[Tuple[str, str]]:\n    try:\n        raw_ouputs = string.split(';')\n        outputs: List[Tuple[str, str]] = []\n        for output in raw_ouputs:\n            name, arguments = output.split(':')\n            outputs.append((name, arguments))\n        if len(output) == 0:\n            raise ValueError()\n    except ValueError:\n        raise RuntimeError('Incorrect output plugin string')\n    return outputs\n", "rewrite": "ReplaceText(target='outputs' @(48,19)->(48,25))", "error_line": 7, "has_bug": true, "code_full": "from typing import List, Tuple\n\n\ndef _check_and_parse_output_plugin(string: str) -> List[Tuple[str, str]]:\n    try:\n        raw_ouputs = string.split(';')\n        outputs: List[Tuple[str, str]] = []\n        for output in raw_ouputs:\n            name, arguments = output.split(':')\n            outputs.append((name, arguments))\n        if len(output) == 0:\n            raise ValueError()\n    except ValueError:\n        raise RuntimeError('Incorrect output plugin string')\n    return outputs\n", "error_location_char": [309, 315], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def search_string(", "vec", ",", "s", ",", "case_sensitive", "=", "False", ",", "invert", "=", "False", ")", ":", "#NEWLINE#", "#INDENT#", "vec", "=", "np", ".", "array", "(", "vec", ")", "#NEWLINE#", "m", "=", "[", "]", "#NEWLINE#", "if", "isinstance", "(", "s", ",", "list", ")", ":", "#NEWLINE#", "#INDENT#", "S", "=", "s", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "S", "=", "[", "s", "]", "#NEWLINE#", "#UNINDENT#", "V", "=", "[", "]", "#NEWLINE#", "M", "=", "[", "]", "#NEWLINE#", "for", "s", "in", "S", ":", "#NEWLINE#", "#INDENT#", "if", "(", "not", "case_sensitive", ")", ":", "#NEWLINE#", "#INDENT#", "s", "=", "s", ".", "lower", "(", ")", "#NEWLINE#", "#UNINDENT#", "for", "i", "in", "range", "(", "len", "(", "vec", ")", ")", ":", "#NEWLINE#", "#INDENT#", "if", "case_sensitive", ":", "#NEWLINE#", "#INDENT#", "st", "=", "vec", "[", "i", "]", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "st", "=", "vec", "[", "i", "]", ".", "lower", "(", ")", "#NEWLINE#", "#UNINDENT#", "b", "=", "st", ".", "find", "(", "s", ")", "#NEWLINE#", "if", "(", "(", "(", "not", "invert", ")", "and", "(", "b", "!=", "(", "-", "1", ")", ")", ")", "or", "(", "invert", "and", "(", "b", "==", "(", "-", "1", ")", ")", ")", ")", ":", "#NEWLINE#", "#INDENT#", "m", ".", "append", "(", "i", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "if", "(", "len", "(", "m", ")", ">", "0", ")", ":", "#NEWLINE#", "#INDENT#", "V", ".", "append", "(", "vec", "[", "np", ".", "array", "(", "m", ")", "]", ")", "#NEWLINE#", "M", ".", "append", "(", "np", ".", "array", "(", "m", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "if", "(", "len", "(", "V", ")", ">", "0", ")", ":", "#NEWLINE#", "#INDENT#", "i", "=", "len", "(", "V", ")", "#NEWLINE#", "V", "=", "np", ".", "concatenate", "(", "V", ")", "#NEWLINE#", "M", "=", "np", ".", "concatenate", "(", "M", ")", "#NEWLINE#", "if", "(", "i", ">", "1", ")", ":", "#NEWLINE#", "#INDENT#", "ix", "=", "np", ".", "sort", "(", "np", ".", "unique", "(", "V", ",", "return_index", "=", "True", ")", "[", "1", "]", ")", "#NEWLINE#", "V", "=", "V", "[", "ix", "]", "#NEWLINE#", "M", "=", "M", "[", "ix", "]", "#NEWLINE#", "#UNINDENT#", "return", "(", "V", ",", "M", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "return", "(", "(", "-", "1", ")", ",", "(", "-", "1", ")", ")"], "edges": [[1, 7, 7, "enum_FIELD"], [16, 22, 7, "enum_FIELD"], [25, 28, 7, "enum_FIELD"], [38, 35, 7, "enum_FIELD"], [56, 59, 7, "enum_FIELD"], [61, 64, 7, "enum_FIELD"], [69, 68, 7, "enum_FIELD"], [69, 70, 7, "enum_FIELD"], [235, 232, 7, "enum_FIELD"], [22, 20, 7, "enum_FIELD"], [35, 32, 7, "enum_FIELD"], [40, 43, 7, "enum_FIELD"], [49, 52, 7, "enum_FIELD"], [74, 76, 7, "enum_FIELD"], [93, 92, 7, "enum_FIELD"], [93, 95, 7, "enum_FIELD"], [185, 191, 7, "enum_FIELD"], [232, 229, 7, "enum_FIELD"], [237, 241, 7, "enum_FIELD"], [244, 250, 7, "enum_FIELD"], [253, 259, 7, "enum_FIELD"], [263, 266, 7, "enum_FIELD"], [308, 311, 7, "enum_FIELD"], [320, 326, 7, "enum_FIELD"], [20, 19, 7, "enum_FIELD"], [76, 77, 7, "enum_FIELD"], [81, 87, 7, "enum_FIELD"], [95, 94, 7, "enum_FIELD"], [106, 105, 7, "enum_FIELD"], [132, 138, 7, "enum_FIELD"], [142, 159, 7, "enum_FIELD"], [191, 188, 7, "enum_FIELD"], [196, 200, 7, "enum_FIELD"], [211, 215, 7, "enum_FIELD"], [229, 228, 7, "enum_FIELD"], [241, 240, 7, "enum_FIELD"], [250, 248, 7, "enum_FIELD"], [259, 257, 7, "enum_FIELD"], [266, 265, 7, "enum_FIELD"], [271, 277, 7, "enum_FIELD"], [292, 296, 7, "enum_FIELD"], [299, 303, 7, "enum_FIELD"], [87, 85, 7, "enum_FIELD"], [97, 96, 7, "enum_FIELD"], [108, 112, 7, "enum_FIELD"], [120, 129, 7, "enum_FIELD"], [138, 136, 7, "enum_FIELD"], [175, 179, 7, "enum_FIELD"], [188, 187, 7, "enum_FIELD"], [200, 198, 7, "enum_FIELD"], [215, 213, 7, "enum_FIELD"], [248, 247, 7, "enum_FIELD"], [257, 256, 7, "enum_FIELD"], [277, 275, 7, "enum_FIELD"], [296, 295, 7, "enum_FIELD"], [296, 297, 7, "enum_FIELD"], [303, 302, 7, "enum_FIELD"], [303, 304, 7, "enum_FIELD"], [323, 324, 7, "enum_FIELD"], [328, 329, 7, "enum_FIELD"], [85, 84, 7, "enum_FIELD"], [112, 111, 7, "enum_FIELD"], [112, 113, 7, "enum_FIELD"], [129, 127, 7, "enum_FIELD"], [136, 135, 7, "enum_FIELD"], [179, 177, 7, "enum_FIELD"], [198, 197, 7, "enum_FIELD"], [202, 201, 7, "enum_FIELD"], [202, 206, 7, "enum_FIELD"], [213, 212, 7, "enum_FIELD"], [219, 217, 7, "enum_FIELD"], [275, 274, 7, "enum_FIELD"], [288, 283, 7, "enum_FIELD"], [288, 289, 7, "enum_FIELD"], [127, 124, 7, "enum_FIELD"], [146, 147, 7, "enum_FIELD"], [152, 151, 7, "enum_FIELD"], [165, 164, 7, "enum_FIELD"], [177, 176, 7, "enum_FIELD"], [206, 204, 7, "enum_FIELD"], [217, 216, 7, "enum_FIELD"], [283, 279, 7, "enum_FIELD"], [124, 123, 7, "enum_FIELD"], [124, 125, 7, "enum_FIELD"], [154, 155, 7, "enum_FIELD"], [167, 168, 7, "enum_FIELD"], [204, 203, 7, "enum_FIELD"], [279, 278, 7, "enum_FIELD"], [284, 286, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 16, 9, "enum_NEXT_SYNTAX"], [17, 2, 10, "enum_LAST_LEXICAL_USE"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [23, 17, 10, "enum_LAST_LEXICAL_USE"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [34, 4, 10, "enum_LAST_LEXICAL_USE"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [43, 34, 10, "enum_LAST_LEXICAL_USE"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 49, 9, "enum_NEXT_SYNTAX"], [50, 41, 10, "enum_LAST_LEXICAL_USE"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [53, 43, 10, "enum_LAST_LEXICAL_USE"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 67, 9, "enum_NEXT_SYNTAX"], [68, 53, 10, "enum_LAST_LEXICAL_USE"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [70, 50, 10, "enum_LAST_LEXICAL_USE"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [77, 6, 10, "enum_LAST_LEXICAL_USE"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 81, 9, "enum_NEXT_SYNTAX"], [82, 68, 10, "enum_LAST_LEXICAL_USE"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [84, 82, 10, "enum_LAST_LEXICAL_USE"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [98, 23, 10, "enum_LAST_LEXICAL_USE"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 104, 9, "enum_NEXT_SYNTAX"], [105, 77, 10, "enum_LAST_LEXICAL_USE"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [111, 98, 10, "enum_LAST_LEXICAL_USE"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [113, 92, 10, "enum_LAST_LEXICAL_USE"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 120, 9, "enum_NEXT_SYNTAX"], [121, 109, 10, "enum_LAST_LEXICAL_USE"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [123, 111, 10, "enum_LAST_LEXICAL_USE"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [125, 113, 10, "enum_LAST_LEXICAL_USE"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [135, 121, 10, "enum_LAST_LEXICAL_USE"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [139, 84, 10, "enum_LAST_LEXICAL_USE"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [147, 10, 10, "enum_LAST_LEXICAL_USE"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [151, 133, 10, "enum_LAST_LEXICAL_USE"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [161, 147, 10, "enum_LAST_LEXICAL_USE"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [164, 151, 10, "enum_LAST_LEXICAL_USE"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 175, 9, "enum_NEXT_SYNTAX"], [176, 26, 10, "enum_LAST_LEXICAL_USE"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [180, 125, 10, "enum_LAST_LEXICAL_USE"], [179, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [187, 96, 10, "enum_LAST_LEXICAL_USE"], [186, 187, 9, "enum_NEXT_SYNTAX"], [187, 188, 9, "enum_NEXT_SYNTAX"], [189, 176, 10, "enum_LAST_LEXICAL_USE"], [188, 189, 9, "enum_NEXT_SYNTAX"], [189, 190, 9, "enum_NEXT_SYNTAX"], [190, 191, 9, "enum_NEXT_SYNTAX"], [191, 192, 9, "enum_NEXT_SYNTAX"], [192, 193, 9, "enum_NEXT_SYNTAX"], [193, 194, 9, "enum_NEXT_SYNTAX"], [194, 196, 9, "enum_NEXT_SYNTAX"], [197, 57, 10, "enum_LAST_LEXICAL_USE"], [196, 197, 9, "enum_NEXT_SYNTAX"], [197, 198, 9, "enum_NEXT_SYNTAX"], [198, 199, 9, "enum_NEXT_SYNTAX"], [199, 200, 9, "enum_NEXT_SYNTAX"], [201, 123, 10, "enum_LAST_LEXICAL_USE"], [200, 201, 9, "enum_NEXT_SYNTAX"], [201, 202, 9, "enum_NEXT_SYNTAX"], [203, 19, 10, "enum_LAST_LEXICAL_USE"], [202, 203, 9, "enum_NEXT_SYNTAX"], [203, 204, 9, "enum_NEXT_SYNTAX"], [204, 205, 9, "enum_NEXT_SYNTAX"], [205, 206, 9, "enum_NEXT_SYNTAX"], [207, 189, 10, "enum_LAST_LEXICAL_USE"], [206, 207, 9, "enum_NEXT_SYNTAX"], [207, 208, 9, "enum_NEXT_SYNTAX"], [208, 209, 9, "enum_NEXT_SYNTAX"], [209, 210, 9, "enum_NEXT_SYNTAX"], [210, 211, 9, "enum_NEXT_SYNTAX"], [212, 62, 10, "enum_LAST_LEXICAL_USE"], [211, 212, 9, "enum_NEXT_SYNTAX"], [212, 213, 9, "enum_NEXT_SYNTAX"], [213, 214, 9, "enum_NEXT_SYNTAX"], [214, 215, 9, "enum_NEXT_SYNTAX"], [216, 203, 10, "enum_LAST_LEXICAL_USE"], [215, 216, 9, "enum_NEXT_SYNTAX"], [216, 217, 9, "enum_NEXT_SYNTAX"], [217, 218, 9, "enum_NEXT_SYNTAX"], [218, 219, 9, "enum_NEXT_SYNTAX"], [220, 207, 10, "enum_LAST_LEXICAL_USE"], [219, 220, 9, "enum_NEXT_SYNTAX"], [220, 221, 9, "enum_NEXT_SYNTAX"], [221, 222, 9, "enum_NEXT_SYNTAX"], [222, 226, 9, "enum_NEXT_SYNTAX"], [226, 227, 9, "enum_NEXT_SYNTAX"], [228, 187, 10, "enum_LAST_LEXICAL_USE"], [227, 228, 9, "enum_NEXT_SYNTAX"], [228, 229, 9, "enum_NEXT_SYNTAX"], [230, 197, 10, "enum_LAST_LEXICAL_USE"], [229, 230, 9, "enum_NEXT_SYNTAX"], [230, 231, 9, "enum_NEXT_SYNTAX"], [231, 232, 9, "enum_NEXT_SYNTAX"], [232, 233, 9, "enum_NEXT_SYNTAX"], [233, 234, 9, "enum_NEXT_SYNTAX"], [234, 235, 9, "enum_NEXT_SYNTAX"], [235, 237, 9, "enum_NEXT_SYNTAX"], [238, 180, 10, "enum_LAST_LEXICAL_USE"], [237, 238, 9, "enum_NEXT_SYNTAX"], [238, 239, 9, "enum_NEXT_SYNTAX"], [240, 228, 10, "enum_LAST_LEXICAL_USE"], [239, 240, 9, "enum_NEXT_SYNTAX"], [240, 241, 9, "enum_NEXT_SYNTAX"], [242, 230, 10, "enum_LAST_LEXICAL_USE"], [241, 242, 9, "enum_NEXT_SYNTAX"], [242, 243, 9, "enum_NEXT_SYNTAX"], [243, 244, 9, "enum_NEXT_SYNTAX"], [245, 242, 10, "enum_LAST_LEXICAL_USE"], [244, 245, 9, "enum_NEXT_SYNTAX"], [245, 246, 9, "enum_NEXT_SYNTAX"], [247, 216, 10, "enum_LAST_LEXICAL_USE"], [246, 247, 9, "enum_NEXT_SYNTAX"], [247, 248, 9, "enum_NEXT_SYNTAX"], [248, 249, 9, "enum_NEXT_SYNTAX"], [249, 250, 9, "enum_NEXT_SYNTAX"], [251, 245, 10, "enum_LAST_LEXICAL_USE"], [250, 251, 9, "enum_NEXT_SYNTAX"], [251, 252, 9, "enum_NEXT_SYNTAX"], [252, 253, 9, "enum_NEXT_SYNTAX"], [254, 212, 10, "enum_LAST_LEXICAL_USE"], [253, 254, 9, "enum_NEXT_SYNTAX"], [254, 255, 9, "enum_NEXT_SYNTAX"], [256, 247, 10, "enum_LAST_LEXICAL_USE"], [255, 256, 9, "enum_NEXT_SYNTAX"], [256, 257, 9, "enum_NEXT_SYNTAX"], [257, 258, 9, "enum_NEXT_SYNTAX"], [258, 259, 9, "enum_NEXT_SYNTAX"], [260, 254, 10, "enum_LAST_LEXICAL_USE"], [259, 260, 9, "enum_NEXT_SYNTAX"], [260, 261, 9, "enum_NEXT_SYNTAX"], [261, 263, 9, "enum_NEXT_SYNTAX"], [263, 264, 9, "enum_NEXT_SYNTAX"], [265, 238, 10, "enum_LAST_LEXICAL_USE"], [264, 265, 9, "enum_NEXT_SYNTAX"], [265, 266, 9, "enum_NEXT_SYNTAX"], [266, 267, 9, "enum_NEXT_SYNTAX"], [267, 268, 9, "enum_NEXT_SYNTAX"], [268, 269, 9, "enum_NEXT_SYNTAX"], [269, 271, 9, "enum_NEXT_SYNTAX"], [271, 272, 9, "enum_NEXT_SYNTAX"], [272, 273, 9, "enum_NEXT_SYNTAX"], [274, 256, 10, "enum_LAST_LEXICAL_USE"], [273, 274, 9, "enum_NEXT_SYNTAX"], [274, 275, 9, "enum_NEXT_SYNTAX"], [275, 276, 9, "enum_NEXT_SYNTAX"], [276, 277, 9, "enum_NEXT_SYNTAX"], [278, 274, 10, "enum_LAST_LEXICAL_USE"], [277, 278, 9, "enum_NEXT_SYNTAX"], [278, 279, 9, "enum_NEXT_SYNTAX"], [279, 280, 9, "enum_NEXT_SYNTAX"], [280, 281, 9, "enum_NEXT_SYNTAX"], [282, 251, 10, "enum_LAST_LEXICAL_USE"], [281, 282, 9, "enum_NEXT_SYNTAX"], [282, 283, 9, "enum_NEXT_SYNTAX"], [283, 284, 9, "enum_NEXT_SYNTAX"], [284, 285, 9, "enum_NEXT_SYNTAX"], [285, 286, 9, "enum_NEXT_SYNTAX"], [286, 287, 9, "enum_NEXT_SYNTAX"], [287, 288, 9, "enum_NEXT_SYNTAX"], [288, 289, 9, "enum_NEXT_SYNTAX"], [289, 290, 9, "enum_NEXT_SYNTAX"], [290, 291, 9, "enum_NEXT_SYNTAX"], [291, 292, 9, "enum_NEXT_SYNTAX"], [293, 282, 10, "enum_LAST_LEXICAL_USE"], [292, 293, 9, "enum_NEXT_SYNTAX"], [293, 294, 9, "enum_NEXT_SYNTAX"], [295, 293, 10, "enum_LAST_LEXICAL_USE"], [294, 295, 9, "enum_NEXT_SYNTAX"], [295, 296, 9, "enum_NEXT_SYNTAX"], [297, 272, 10, "enum_LAST_LEXICAL_USE"], [296, 297, 9, "enum_NEXT_SYNTAX"], [297, 298, 9, "enum_NEXT_SYNTAX"], [298, 299, 9, "enum_NEXT_SYNTAX"], [300, 260, 10, "enum_LAST_LEXICAL_USE"], [299, 300, 9, "enum_NEXT_SYNTAX"], [300, 301, 9, "enum_NEXT_SYNTAX"], [302, 300, 10, "enum_LAST_LEXICAL_USE"], [301, 302, 9, "enum_NEXT_SYNTAX"], [302, 303, 9, "enum_NEXT_SYNTAX"], [304, 297, 10, "enum_LAST_LEXICAL_USE"], [303, 304, 9, "enum_NEXT_SYNTAX"], [304, 305, 9, "enum_NEXT_SYNTAX"], [305, 308, 9, "enum_NEXT_SYNTAX"], [308, 309, 9, "enum_NEXT_SYNTAX"], [310, 295, 10, "enum_LAST_LEXICAL_USE"], [309, 310, 9, "enum_NEXT_SYNTAX"], [310, 311, 9, "enum_NEXT_SYNTAX"], [312, 302, 10, "enum_LAST_LEXICAL_USE"], [311, 312, 9, "enum_NEXT_SYNTAX"], [312, 313, 9, "enum_NEXT_SYNTAX"], [313, 316, 9, "enum_NEXT_SYNTAX"], [316, 317, 9, "enum_NEXT_SYNTAX"], [317, 320, 9, "enum_NEXT_SYNTAX"], [320, 321, 9, "enum_NEXT_SYNTAX"], [321, 322, 9, "enum_NEXT_SYNTAX"], [322, 323, 9, "enum_NEXT_SYNTAX"], [323, 324, 9, "enum_NEXT_SYNTAX"], [324, 325, 9, "enum_NEXT_SYNTAX"], [325, 326, 9, "enum_NEXT_SYNTAX"], [326, 327, 9, "enum_NEXT_SYNTAX"], [327, 328, 9, "enum_NEXT_SYNTAX"], [328, 329, 9, "enum_NEXT_SYNTAX"], [329, 330, 9, "enum_NEXT_SYNTAX"], [330, 331, 9, "enum_NEXT_SYNTAX"], [8, 12, 1, "enum_CFG_NEXT"], [12, 1, 1, "enum_CFG_NEXT"], [7, 16, 1, "enum_CFG_NEXT"], [16, 25, 1, "enum_CFG_NEXT"], [25, 35, 1, "enum_CFG_NEXT"], [35, 49, 1, "enum_CFG_NEXT"], [35, 40, 1, "enum_CFG_NEXT"], [40, 56, 1, "enum_CFG_NEXT"], [49, 56, 1, "enum_CFG_NEXT"], [56, 61, 1, "enum_CFG_NEXT"], [61, 70, 1, "enum_CFG_NEXT"], [70, 68, 1, "enum_CFG_NEXT"], [68, 232, 1, "enum_CFG_NEXT"], [68, 76, 1, "enum_CFG_NEXT"], [76, 81, 1, "enum_CFG_NEXT"], [76, 95, 1, "enum_CFG_NEXT"], [81, 95, 1, "enum_CFG_NEXT"], [95, 92, 1, "enum_CFG_NEXT"], [92, 191, 1, "enum_CFG_NEXT"], [92, 105, 1, "enum_CFG_NEXT"], [105, 120, 1, "enum_CFG_NEXT"], [105, 108, 1, "enum_CFG_NEXT"], [108, 132, 1, "enum_CFG_NEXT"], [120, 132, 1, "enum_CFG_NEXT"], [132, 159, 1, "enum_CFG_NEXT"], [159, 175, 1, "enum_CFG_NEXT"], [159, 92, 1, "enum_CFG_NEXT"], [175, 92, 1, "enum_CFG_NEXT"], [191, 196, 1, "enum_CFG_NEXT"], [191, 68, 1, "enum_CFG_NEXT"], [196, 211, 1, "enum_CFG_NEXT"], [211, 68, 1, "enum_CFG_NEXT"], [232, 320, 1, "enum_CFG_NEXT"], [232, 237, 1, "enum_CFG_NEXT"], [237, 244, 1, "enum_CFG_NEXT"], [244, 253, 1, "enum_CFG_NEXT"], [253, 266, 1, "enum_CFG_NEXT"], [266, 271, 1, "enum_CFG_NEXT"], [266, 308, 1, "enum_CFG_NEXT"], [271, 292, 1, "enum_CFG_NEXT"], [292, 299, 1, "enum_CFG_NEXT"], [299, 308, 1, "enum_CFG_NEXT"], [23, 2, 3, "enum_LAST_WRITE"], [17, 23, 2, "enum_LAST_READ"], [17, 2, 3, "enum_LAST_WRITE"], [34, 4, 3, "enum_LAST_WRITE"], [43, 34, 2, "enum_LAST_READ"], [43, 4, 3, "enum_LAST_WRITE"], [53, 34, 2, "enum_LAST_READ"], [53, 4, 3, "enum_LAST_WRITE"], [70, 41, 3, "enum_LAST_WRITE"], [70, 50, 3, "enum_LAST_WRITE"], [68, 53, 2, "enum_LAST_READ"], [68, 84, 2, "enum_LAST_READ"], [68, 43, 2, "enum_LAST_READ"], [68, 139, 2, "enum_LAST_READ"], [68, 4, 3, "enum_LAST_WRITE"], [68, 82, 3, "enum_LAST_WRITE"], [68, 68, 3, "enum_LAST_WRITE"], [77, 77, 2, "enum_LAST_READ"], [77, 105, 2, "enum_LAST_READ"], [77, 6, 3, "enum_LAST_WRITE"], [84, 84, 2, "enum_LAST_READ"], [84, 53, 2, "enum_LAST_READ"], [84, 43, 2, "enum_LAST_READ"], [84, 139, 2, "enum_LAST_READ"], [84, 68, 3, "enum_LAST_WRITE"], [82, 84, 2, "enum_LAST_READ"], [82, 68, 3, "enum_LAST_WRITE"], [94, 94, 2, "enum_LAST_READ"], [96, 187, 2, "enum_LAST_READ"], [98, 23, 2, "enum_LAST_READ"], [98, 111, 2, "enum_LAST_READ"], [98, 201, 2, "enum_LAST_READ"], [98, 98, 2, "enum_LAST_READ"], [98, 123, 2, "enum_LAST_READ"], [98, 17, 3, "enum_LAST_WRITE"], [92, 113, 2, "enum_LAST_READ"], [92, 125, 2, "enum_LAST_READ"], [92, 180, 2, "enum_LAST_READ"], [92, 92, 3, "enum_LAST_WRITE"], [105, 77, 2, "enum_LAST_READ"], [105, 105, 2, "enum_LAST_READ"], [105, 6, 3, "enum_LAST_WRITE"], [111, 123, 2, "enum_LAST_READ"], [111, 111, 2, "enum_LAST_READ"], [111, 98, 2, "enum_LAST_READ"], [111, 17, 3, "enum_LAST_WRITE"], [113, 125, 2, "enum_LAST_READ"], [113, 180, 2, "enum_LAST_READ"], [113, 113, 2, "enum_LAST_READ"], [113, 92, 3, "enum_LAST_WRITE"], [109, 135, 2, "enum_LAST_READ"], [109, 121, 3, "enum_LAST_WRITE"], [109, 109, 3, "enum_LAST_WRITE"], [123, 123, 2, "enum_LAST_READ"], [123, 111, 2, "enum_LAST_READ"], [123, 98, 2, "enum_LAST_READ"], [123, 17, 3, "enum_LAST_WRITE"], [125, 125, 2, "enum_LAST_READ"], [125, 180, 2, "enum_LAST_READ"], [125, 113, 2, "enum_LAST_READ"], [125, 92, 3, "enum_LAST_WRITE"], [121, 135, 2, "enum_LAST_READ"], [121, 121, 3, "enum_LAST_WRITE"], [121, 109, 3, "enum_LAST_WRITE"], [135, 135, 2, "enum_LAST_READ"], [135, 121, 3, "enum_LAST_WRITE"], [135, 109, 3, "enum_LAST_WRITE"], [139, 53, 2, "enum_LAST_READ"], [139, 84, 2, "enum_LAST_READ"], [139, 43, 2, "enum_LAST_READ"], [139, 139, 2, "enum_LAST_READ"], [139, 82, 3, "enum_LAST_WRITE"], [139, 68, 3, "enum_LAST_WRITE"], [133, 164, 2, "enum_LAST_READ"], [133, 133, 3, "enum_LAST_WRITE"], [147, 161, 2, "enum_LAST_READ"], [147, 10, 3, "enum_LAST_WRITE"], [151, 164, 2, "enum_LAST_READ"], [151, 133, 3, "enum_LAST_WRITE"], [161, 147, 2, "enum_LAST_READ"], [161, 10, 3, "enum_LAST_WRITE"], [164, 151, 2, "enum_LAST_READ"], [164, 133, 3, "enum_LAST_WRITE"], [176, 189, 2, "enum_LAST_READ"], [176, 176, 2, "enum_LAST_READ"], [176, 220, 2, "enum_LAST_READ"], [176, 26, 3, "enum_LAST_WRITE"], [180, 125, 2, "enum_LAST_READ"], [180, 113, 2, "enum_LAST_READ"], [180, 92, 3, "enum_LAST_WRITE"], [187, 96, 2, "enum_LAST_READ"], [189, 189, 2, "enum_LAST_READ"], [189, 176, 2, "enum_LAST_READ"], [189, 220, 2, "enum_LAST_READ"], [189, 26, 3, "enum_LAST_WRITE"], [197, 197, 2, "enum_LAST_READ"], [197, 57, 3, "enum_LAST_WRITE"], [201, 123, 2, "enum_LAST_READ"], [201, 111, 2, "enum_LAST_READ"], [201, 98, 2, "enum_LAST_READ"], [201, 17, 3, "enum_LAST_WRITE"], [203, 19, 2, "enum_LAST_READ"], [203, 216, 2, "enum_LAST_READ"], [207, 189, 2, "enum_LAST_READ"], [207, 26, 3, "enum_LAST_WRITE"], [212, 212, 2, "enum_LAST_READ"], [212, 62, 3, "enum_LAST_WRITE"], [216, 203, 2, "enum_LAST_READ"], [220, 207, 2, "enum_LAST_READ"], [220, 26, 3, "enum_LAST_WRITE"], [228, 187, 2, "enum_LAST_READ"], [230, 197, 2, "enum_LAST_READ"], [230, 57, 3, "enum_LAST_WRITE"], [240, 228, 2, "enum_LAST_READ"], [242, 230, 2, "enum_LAST_READ"], [242, 57, 3, "enum_LAST_WRITE"], [238, 125, 2, "enum_LAST_READ"], [238, 180, 2, "enum_LAST_READ"], [238, 113, 2, "enum_LAST_READ"], [238, 92, 3, "enum_LAST_WRITE"], [247, 19, 2, "enum_LAST_READ"], [247, 216, 2, "enum_LAST_READ"], [251, 242, 2, "enum_LAST_READ"], [251, 57, 3, "enum_LAST_WRITE"], [245, 251, 2, "enum_LAST_READ"], [245, 57, 3, "enum_LAST_WRITE"], [256, 247, 2, "enum_LAST_READ"], [260, 212, 2, "enum_LAST_READ"], [260, 62, 3, "enum_LAST_WRITE"], [254, 260, 2, "enum_LAST_READ"], [254, 62, 3, "enum_LAST_WRITE"], [265, 125, 2, "enum_LAST_READ"], [265, 180, 2, "enum_LAST_READ"], [265, 113, 2, "enum_LAST_READ"], [265, 238, 3, "enum_LAST_WRITE"], [274, 256, 2, "enum_LAST_READ"], [278, 274, 2, "enum_LAST_READ"], [282, 251, 2, "enum_LAST_READ"], [282, 245, 3, "enum_LAST_WRITE"], [295, 282, 2, "enum_LAST_READ"], [295, 245, 3, "enum_LAST_WRITE"], [297, 272, 3, "enum_LAST_WRITE"], [293, 295, 2, "enum_LAST_READ"], [293, 245, 3, "enum_LAST_WRITE"], [302, 260, 2, "enum_LAST_READ"], [302, 254, 3, "enum_LAST_WRITE"], [304, 297, 2, "enum_LAST_READ"], [304, 272, 3, "enum_LAST_WRITE"], [300, 302, 2, "enum_LAST_READ"], [300, 254, 3, "enum_LAST_WRITE"], [310, 295, 2, "enum_LAST_READ"], [310, 251, 2, "enum_LAST_READ"], [310, 245, 3, "enum_LAST_WRITE"], [310, 293, 3, "enum_LAST_WRITE"], [312, 260, 2, "enum_LAST_READ"], [312, 302, 2, "enum_LAST_READ"], [312, 300, 3, "enum_LAST_WRITE"], [312, 254, 3, "enum_LAST_WRITE"], [17, 23, 4, "enum_COMPUTED_FROM"], [17, 19, 4, "enum_COMPUTED_FROM"], [41, 43, 4, "enum_COMPUTED_FROM"], [50, 53, 4, "enum_COMPUTED_FROM"], [238, 240, 4, "enum_COMPUTED_FROM"], [238, 242, 4, "enum_COMPUTED_FROM"], [245, 251, 4, "enum_COMPUTED_FROM"], [245, 247, 4, "enum_COMPUTED_FROM"], [254, 260, 4, "enum_COMPUTED_FROM"], [254, 256, 4, "enum_COMPUTED_FROM"], [82, 84, 4, "enum_COMPUTED_FROM"], [133, 139, 4, "enum_COMPUTED_FROM"], [133, 135, 4, "enum_COMPUTED_FROM"], [272, 274, 4, "enum_COMPUTED_FROM"], [272, 282, 4, "enum_COMPUTED_FROM"], [272, 278, 4, "enum_COMPUTED_FROM"], [293, 295, 4, "enum_COMPUTED_FROM"], [293, 297, 4, "enum_COMPUTED_FROM"], [300, 302, 4, "enum_COMPUTED_FROM"], [300, 304, 4, "enum_COMPUTED_FROM"], [109, 111, 4, "enum_COMPUTED_FROM"], [109, 113, 4, "enum_COMPUTED_FROM"], [121, 123, 4, "enum_COMPUTED_FROM"], [121, 125, 4, "enum_COMPUTED_FROM"]], "error_location": 282, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/atarashansky/self-assembling-manifold.git", "old_path": "samalg/utilities.py", "hash": "6539b0d87edc6dd18bd1bd3709fc41ad2c51b3f3", "code": "def search_string(vec: List[str], s: Union[str, List[str]], case_sensitive: bool=False, invert: bool=False) -> Tuple[Union[np.ndarray, int], Union[np.ndarray, int]]:\n    vec: np.ndarray = np.array(vec)\n\n    m: List[int] = []\n\n    if isinstance(s,list):\n        S: List[str] = s\n    else:\n        S: List[str] = [s]\n\n    V: List[np.ndarray]=[]; M: List[np.ndarray]=[]\n    for s in S:\n        if not case_sensitive:\n            s: str = s.lower()\n        for i in range(len(vec)):\n            if case_sensitive:\n                st: str = vec[i]\n            else:\n                st: str = vec[i].lower()\n            b: int = st.find(s)\n            if not invert and b != -1 or invert and b == -1:\n                m.append(i)\n        if len(m) > 0:\n            V.append(vec[np.array(m)]); M.append(np.array(m))\n    if len(V)>0:\n        i: int = len(V)\n        V = np.concatenate(V); M = np.concatenate(M);\n        if i > 1:\n            ix: np.ndarray = np.sort(np.unique(V,return_index=True)[1])\n            V: np.ndarray=V[ix]; M: np.ndarray=M[ix];\n        return V,M\n    else:\n        return -1,-1\n", "rewrite": "ReplaceText(target='M' @(251,35)->(251,36))", "error_line": 28, "has_bug": true, "code_full": "from typing import List, Tuple, Union\n\nimport numpy as np\n\n\ndef search_string(vec: List[str], s: Union[str, List[str]], case_sensitive: bool=False, invert: bool=False) -> Tuple[Union[np.ndarray, int], Union[np.ndarray, int]]:\n    vec: np.ndarray = np.array(vec)\n\n    m: List[int] = []\n\n    if isinstance(s,list):\n        S: List[str] = s\n    else:\n        S: List[str] = [s]\n\n    V: List[np.ndarray]=[]; M: List[np.ndarray]=[]\n    for s in S:\n        if not case_sensitive:\n            s: str = s.lower()\n        for i in range(len(vec)):\n            if case_sensitive:\n                st: str = vec[i]\n            else:\n                st: str = vec[i].lower()\n            b: int = st.find(s)\n            if not invert and b != -1 or invert and b == -1:\n                m.append(i)\n        if len(m) > 0:\n            V.append(vec[np.array(m)]); M.append(np.array(m))\n    if len(V)>0:\n        i: int = len(V)\n        V = np.concatenate(V); M = np.concatenate(M);\n        if i > 1:\n            ix: np.ndarray = np.sort(np.unique(V,return_index=True)[1])\n            V: np.ndarray=V[ix]; M: np.ndarray=M[ix];\n        return V,M\n    else:\n        return -1,-1\n", "error_location_char": [968, 969], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def _adjustWriteData(", "self", ",", "data", ")", ":", "#NEWLINE#", "#INDENT#", "NewData", "=", "[", "]", "#NEWLINE#", "DataLen", "=", "data", ".", "applymap", "(", "(", "lambda", "x", ":", "(", "len", "(", "x", ")", "if", "isinstance", "(", "x", ",", "list", ")", "else", "1", ")", ")", ")", "#NEWLINE#", "DataLenMax", "=", "DataLen", ".", "max", "(", "axis", "=", "1", ")", "#NEWLINE#", "DataLenMin", "=", "DataLen", ".", "min", "(", "axis", "=", "1", ")", "#NEWLINE#", "if", "(", "(", "DataLenMax", "!=", "DataLenMin", ")", ".", "sum", "(", ")", ">", "0", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "_QS_Logger", ".", "warning", "(", "(", "\"'%s' \u5728\u5199\u5165\u56e0\u5b50 '%s' \u65f6\u51fa\u73b0\u56e0\u5b50\u503c\u957f\u5ea6\u4e0d\u4e00\u81f4\u7684\u60c5\u51b5, \u5c06\u586b\u5145\u7f3a\u5931!\"", "%", "(", "self", ".", "Name", ",", "str", "(", "data", ".", "columns", ".", "tolist", "(", ")", ")", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "for", "i", "in", "range", "(", "data", ".", "shape", "[", "0", "]", ")", ":", "#NEWLINE#", "#INDENT#", "iDataLen", "=", "DataLen", ".", "iloc", "[", "i", "]", "#NEWLINE#", "if", "(", "iDataLen", ">", "0", ")", ":", "#NEWLINE#", "#INDENT#", "iData", "=", "data", ".", "iloc", "[", "i", "]", ".", "apply", "(", "(", "lambda", "x", ":", "(", "(", "(", "[", "None", "]", "*", "(", "iDataLen", "-", "len", "(", "x", ")", ")", ")", "+", "x", ")", "if", "isinstance", "(", "x", ",", "list", ")", "else", "(", "[", "x", "]", "*", "iDataLen", ")", ")", ")", ")", ".", "tolist", "(", ")", "#NEWLINE#", "NewData", ".", "extend", "(", "zip", "(", "*", "iData", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "NewData", "=", "pd", ".", "DataFrame", "(", "NewData", ",", "dtype", "=", "'O'", ")", "#NEWLINE#", "return", "NewData", ".", "where", "(", "pd", ".", "notnull", "(", "NewData", ")", ",", "None", ")", ".", "to_records", "(", "index", "=", "False", ")", ".", "tolist", "(", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [8, 11, 7, "enum_FIELD"], [13, 19, 7, "enum_FIELD"], [41, 47, 7, "enum_FIELD"], [52, 58, 7, "enum_FIELD"], [64, 75, 7, "enum_FIELD"], [112, 111, 7, "enum_FIELD"], [112, 114, 7, "enum_FIELD"], [212, 220, 7, "enum_FIELD"], [226, 249, 7, "enum_FIELD"], [19, 17, 7, "enum_FIELD"], [47, 45, 7, "enum_FIELD"], [58, 56, 7, "enum_FIELD"], [75, 73, 7, "enum_FIELD"], [80, 86, 7, "enum_FIELD"], [114, 113, 7, "enum_FIELD"], [124, 130, 7, "enum_FIELD"], [134, 137, 7, "enum_FIELD"], [220, 216, 7, "enum_FIELD"], [249, 247, 7, "enum_FIELD"], [17, 16, 7, "enum_FIELD"], [21, 29, 7, "enum_FIELD"], [45, 44, 7, "enum_FIELD"], [48, 50, 7, "enum_FIELD"], [56, 55, 7, "enum_FIELD"], [59, 61, 7, "enum_FIELD"], [73, 71, 7, "enum_FIELD"], [86, 84, 7, "enum_FIELD"], [118, 116, 7, "enum_FIELD"], [118, 119, 7, "enum_FIELD"], [130, 128, 7, "enum_FIELD"], [130, 131, 7, "enum_FIELD"], [137, 136, 7, "enum_FIELD"], [142, 197, 7, "enum_FIELD"], [199, 203, 7, "enum_FIELD"], [216, 215, 7, "enum_FIELD"], [221, 223, 7, "enum_FIELD"], [247, 242, 7, "enum_FIELD"], [29, 33, 7, "enum_FIELD"], [29, 26, 7, "enum_FIELD"], [29, 37, 7, "enum_FIELD"], [71, 68, 7, "enum_FIELD"], [84, 82, 7, "enum_FIELD"], [89, 88, 7, "enum_FIELD"], [89, 94, 7, "enum_FIELD"], [116, 115, 7, "enum_FIELD"], [128, 127, 7, "enum_FIELD"], [197, 195, 7, "enum_FIELD"], [203, 201, 7, "enum_FIELD"], [242, 240, 7, "enum_FIELD"], [33, 30, 7, "enum_FIELD"], [26, 25, 7, "enum_FIELD"], [68, 67, 7, "enum_FIELD"], [82, 81, 7, "enum_FIELD"], [195, 153, 7, "enum_FIELD"], [201, 200, 7, "enum_FIELD"], [205, 204, 7, "enum_FIELD"], [240, 237, 7, "enum_FIELD"], [243, 245, 7, "enum_FIELD"], [92, 91, 7, "enum_FIELD"], [96, 95, 7, "enum_FIELD"], [153, 151, 7, "enum_FIELD"], [206, 207, 7, "enum_FIELD"], [237, 228, 7, "enum_FIELD"], [102, 100, 7, "enum_FIELD"], [151, 148, 7, "enum_FIELD"], [155, 177, 7, "enum_FIELD"], [228, 227, 7, "enum_FIELD"], [234, 232, 7, "enum_FIELD"], [100, 98, 7, "enum_FIELD"], [148, 146, 7, "enum_FIELD"], [148, 149, 7, "enum_FIELD"], [177, 181, 7, "enum_FIELD"], [177, 174, 7, "enum_FIELD"], [177, 189, 7, "enum_FIELD"], [232, 231, 7, "enum_FIELD"], [98, 97, 7, "enum_FIELD"], [146, 145, 7, "enum_FIELD"], [181, 178, 7, "enum_FIELD"], [174, 164, 7, "enum_FIELD"], [174, 175, 7, "enum_FIELD"], [189, 186, 7, "enum_FIELD"], [189, 190, 7, "enum_FIELD"], [164, 161, 7, "enum_FIELD"], [164, 167, 7, "enum_FIELD"], [167, 166, 7, "enum_FIELD"], [167, 169, 7, "enum_FIELD"], [169, 168, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [16, 4, 10, "enum_LAST_LEXICAL_USE"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [27, 22, 10, "enum_LAST_LEXICAL_USE"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [32, 27, 10, "enum_LAST_LEXICAL_USE"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [44, 14, 10, "enum_LAST_LEXICAL_USE"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [55, 44, 10, "enum_LAST_LEXICAL_USE"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [67, 42, 10, "enum_LAST_LEXICAL_USE"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [69, 53, 10, "enum_LAST_LEXICAL_USE"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 80, 9, "enum_NEXT_SYNTAX"], [81, 2, 10, "enum_LAST_LEXICAL_USE"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [91, 81, 10, "enum_LAST_LEXICAL_USE"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [97, 16, 10, "enum_LAST_LEXICAL_USE"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [115, 97, 10, "enum_LAST_LEXICAL_USE"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [127, 55, 10, "enum_LAST_LEXICAL_USE"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [131, 111, 10, "enum_LAST_LEXICAL_USE"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [136, 125, 10, "enum_LAST_LEXICAL_USE"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [145, 115, 10, "enum_LAST_LEXICAL_USE"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [149, 131, 10, "enum_LAST_LEXICAL_USE"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [156, 32, 10, "enum_LAST_LEXICAL_USE"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [166, 136, 10, "enum_LAST_LEXICAL_USE"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [168, 25, 10, "enum_LAST_LEXICAL_USE"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [170, 156, 10, "enum_LAST_LEXICAL_USE"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [175, 170, 10, "enum_LAST_LEXICAL_USE"], [174, 175, 9, "enum_NEXT_SYNTAX"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [178, 30, 10, "enum_LAST_LEXICAL_USE"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [180, 175, 10, "enum_LAST_LEXICAL_USE"], [179, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [182, 34, 10, "enum_LAST_LEXICAL_USE"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 184, 9, "enum_NEXT_SYNTAX"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [187, 180, 10, "enum_LAST_LEXICAL_USE"], [186, 187, 9, "enum_NEXT_SYNTAX"], [187, 188, 9, "enum_NEXT_SYNTAX"], [188, 189, 9, "enum_NEXT_SYNTAX"], [190, 166, 10, "enum_LAST_LEXICAL_USE"], [189, 190, 9, "enum_NEXT_SYNTAX"], [190, 191, 9, "enum_NEXT_SYNTAX"], [191, 192, 9, "enum_NEXT_SYNTAX"], [192, 193, 9, "enum_NEXT_SYNTAX"], [193, 194, 9, "enum_NEXT_SYNTAX"], [194, 195, 9, "enum_NEXT_SYNTAX"], [195, 196, 9, "enum_NEXT_SYNTAX"], [196, 197, 9, "enum_NEXT_SYNTAX"], [197, 198, 9, "enum_NEXT_SYNTAX"], [198, 199, 9, "enum_NEXT_SYNTAX"], [200, 9, 10, "enum_LAST_LEXICAL_USE"], [199, 200, 9, "enum_NEXT_SYNTAX"], [200, 201, 9, "enum_NEXT_SYNTAX"], [201, 202, 9, "enum_NEXT_SYNTAX"], [202, 203, 9, "enum_NEXT_SYNTAX"], [203, 204, 9, "enum_NEXT_SYNTAX"], [204, 205, 9, "enum_NEXT_SYNTAX"], [205, 206, 9, "enum_NEXT_SYNTAX"], [207, 143, 10, "enum_LAST_LEXICAL_USE"], [206, 207, 9, "enum_NEXT_SYNTAX"], [207, 208, 9, "enum_NEXT_SYNTAX"], [208, 209, 9, "enum_NEXT_SYNTAX"], [209, 212, 9, "enum_NEXT_SYNTAX"], [213, 200, 10, "enum_LAST_LEXICAL_USE"], [212, 213, 9, "enum_NEXT_SYNTAX"], [213, 214, 9, "enum_NEXT_SYNTAX"], [214, 215, 9, "enum_NEXT_SYNTAX"], [215, 216, 9, "enum_NEXT_SYNTAX"], [216, 217, 9, "enum_NEXT_SYNTAX"], [217, 218, 9, "enum_NEXT_SYNTAX"], [219, 213, 10, "enum_LAST_LEXICAL_USE"], [218, 219, 9, "enum_NEXT_SYNTAX"], [219, 220, 9, "enum_NEXT_SYNTAX"], [220, 221, 9, "enum_NEXT_SYNTAX"], [221, 222, 9, "enum_NEXT_SYNTAX"], [222, 223, 9, "enum_NEXT_SYNTAX"], [223, 224, 9, "enum_NEXT_SYNTAX"], [224, 226, 9, "enum_NEXT_SYNTAX"], [227, 219, 10, "enum_LAST_LEXICAL_USE"], [226, 227, 9, "enum_NEXT_SYNTAX"], [227, 228, 9, "enum_NEXT_SYNTAX"], [228, 229, 9, "enum_NEXT_SYNTAX"], [229, 230, 9, "enum_NEXT_SYNTAX"], [231, 215, 10, "enum_LAST_LEXICAL_USE"], [230, 231, 9, "enum_NEXT_SYNTAX"], [231, 232, 9, "enum_NEXT_SYNTAX"], [232, 233, 9, "enum_NEXT_SYNTAX"], [233, 234, 9, "enum_NEXT_SYNTAX"], [235, 227, 10, "enum_LAST_LEXICAL_USE"], [234, 235, 9, "enum_NEXT_SYNTAX"], [235, 236, 9, "enum_NEXT_SYNTAX"], [236, 237, 9, "enum_NEXT_SYNTAX"], [237, 238, 9, "enum_NEXT_SYNTAX"], [238, 239, 9, "enum_NEXT_SYNTAX"], [239, 240, 9, "enum_NEXT_SYNTAX"], [240, 241, 9, "enum_NEXT_SYNTAX"], [241, 242, 9, "enum_NEXT_SYNTAX"], [242, 243, 9, "enum_NEXT_SYNTAX"], [243, 244, 9, "enum_NEXT_SYNTAX"], [244, 245, 9, "enum_NEXT_SYNTAX"], [245, 246, 9, "enum_NEXT_SYNTAX"], [246, 247, 9, "enum_NEXT_SYNTAX"], [247, 248, 9, "enum_NEXT_SYNTAX"], [248, 249, 9, "enum_NEXT_SYNTAX"], [249, 250, 9, "enum_NEXT_SYNTAX"], [3, 8, 1, "enum_CFG_NEXT"], [8, 13, 1, "enum_CFG_NEXT"], [13, 41, 1, "enum_CFG_NEXT"], [41, 52, 1, "enum_CFG_NEXT"], [52, 75, 1, "enum_CFG_NEXT"], [75, 80, 1, "enum_CFG_NEXT"], [75, 114, 1, "enum_CFG_NEXT"], [80, 114, 1, "enum_CFG_NEXT"], [114, 111, 1, "enum_CFG_NEXT"], [111, 124, 1, "enum_CFG_NEXT"], [111, 212, 1, "enum_CFG_NEXT"], [124, 137, 1, "enum_CFG_NEXT"], [137, 142, 1, "enum_CFG_NEXT"], [137, 111, 1, "enum_CFG_NEXT"], [142, 199, 1, "enum_CFG_NEXT"], [199, 111, 1, "enum_CFG_NEXT"], [212, 226, 1, "enum_CFG_NEXT"], [16, 4, 3, "enum_LAST_WRITE"], [32, 22, 3, "enum_LAST_WRITE"], [27, 32, 2, "enum_LAST_READ"], [27, 22, 3, "enum_LAST_WRITE"], [44, 14, 3, "enum_LAST_WRITE"], [55, 44, 2, "enum_LAST_READ"], [55, 14, 3, "enum_LAST_WRITE"], [67, 42, 3, "enum_LAST_WRITE"], [69, 53, 3, "enum_LAST_WRITE"], [81, 2, 3, "enum_LAST_WRITE"], [91, 81, 2, "enum_LAST_READ"], [91, 2, 3, "enum_LAST_WRITE"], [97, 16, 2, "enum_LAST_READ"], [97, 4, 3, "enum_LAST_WRITE"], [115, 16, 2, "enum_LAST_READ"], [115, 97, 2, "enum_LAST_READ"], [115, 4, 3, "enum_LAST_WRITE"], [111, 149, 2, "enum_LAST_READ"], [111, 131, 2, "enum_LAST_READ"], [111, 111, 3, "enum_LAST_WRITE"], [127, 55, 2, "enum_LAST_READ"], [127, 127, 2, "enum_LAST_READ"], [127, 14, 3, "enum_LAST_WRITE"], [131, 149, 2, "enum_LAST_READ"], [131, 131, 2, "enum_LAST_READ"], [131, 111, 3, "enum_LAST_WRITE"], [125, 190, 2, "enum_LAST_READ"], [125, 136, 2, "enum_LAST_READ"], [125, 125, 3, "enum_LAST_WRITE"], [136, 190, 2, "enum_LAST_READ"], [136, 136, 2, "enum_LAST_READ"], [136, 125, 3, "enum_LAST_WRITE"], [145, 145, 2, "enum_LAST_READ"], [145, 115, 2, "enum_LAST_READ"], [145, 4, 3, "enum_LAST_WRITE"], [149, 131, 2, "enum_LAST_READ"], [149, 111, 3, "enum_LAST_WRITE"], [156, 27, 2, "enum_LAST_READ"], [156, 187, 2, "enum_LAST_READ"], [156, 22, 3, "enum_LAST_WRITE"], [156, 156, 3, "enum_LAST_WRITE"], [178, 178, 2, "enum_LAST_READ"], [178, 30, 2, "enum_LAST_READ"], [180, 27, 2, "enum_LAST_READ"], [180, 187, 2, "enum_LAST_READ"], [180, 156, 3, "enum_LAST_WRITE"], [182, 34, 2, "enum_LAST_READ"], [182, 182, 2, "enum_LAST_READ"], [166, 136, 2, "enum_LAST_READ"], [166, 125, 3, "enum_LAST_WRITE"], [168, 168, 2, "enum_LAST_READ"], [168, 25, 2, "enum_LAST_READ"], [170, 180, 2, "enum_LAST_READ"], [170, 156, 3, "enum_LAST_WRITE"], [175, 170, 2, "enum_LAST_READ"], [175, 156, 3, "enum_LAST_WRITE"], [187, 175, 2, "enum_LAST_READ"], [187, 156, 3, "enum_LAST_WRITE"], [190, 166, 2, "enum_LAST_READ"], [190, 125, 3, "enum_LAST_WRITE"], [143, 207, 2, "enum_LAST_READ"], [143, 143, 3, "enum_LAST_WRITE"], [200, 200, 2, "enum_LAST_READ"], [200, 9, 3, "enum_LAST_WRITE"], [204, 204, 2, "enum_LAST_READ"], [207, 207, 2, "enum_LAST_READ"], [207, 143, 3, "enum_LAST_WRITE"], [219, 200, 2, "enum_LAST_READ"], [219, 9, 3, "enum_LAST_WRITE"], [213, 219, 2, "enum_LAST_READ"], [213, 9, 3, "enum_LAST_WRITE"], [227, 219, 2, "enum_LAST_READ"], [227, 213, 3, "enum_LAST_WRITE"], [231, 215, 2, "enum_LAST_READ"], [235, 227, 2, "enum_LAST_READ"], [235, 213, 3, "enum_LAST_WRITE"], [14, 16, 4, "enum_COMPUTED_FROM"], [14, 22, 4, "enum_COMPUTED_FROM"], [14, 30, 4, "enum_COMPUTED_FROM"], [14, 32, 4, "enum_COMPUTED_FROM"], [14, 34, 4, "enum_COMPUTED_FROM"], [14, 25, 4, "enum_COMPUTED_FROM"], [14, 27, 4, "enum_COMPUTED_FROM"], [42, 44, 4, "enum_COMPUTED_FROM"], [53, 55, 4, "enum_COMPUTED_FROM"], [213, 219, 4, "enum_COMPUTED_FROM"], [213, 215, 4, "enum_COMPUTED_FROM"], [125, 131, 4, "enum_COMPUTED_FROM"], [125, 127, 4, "enum_COMPUTED_FROM"], [143, 149, 4, "enum_COMPUTED_FROM"], [143, 156, 4, "enum_COMPUTED_FROM"], [143, 145, 4, "enum_COMPUTED_FROM"], [143, 178, 4, "enum_COMPUTED_FROM"], [143, 180, 4, "enum_COMPUTED_FROM"], [143, 182, 4, "enum_COMPUTED_FROM"], [143, 175, 4, "enum_COMPUTED_FROM"], [143, 190, 4, "enum_COMPUTED_FROM"], [143, 187, 4, "enum_COMPUTED_FROM"], [143, 166, 4, "enum_COMPUTED_FROM"], [143, 168, 4, "enum_COMPUTED_FROM"], [143, 170, 4, "enum_COMPUTED_FROM"]], "error_location": 127, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/Scorpi000/QuantStudio.git", "old_path": "QuantStudio/FactorDataBase/SQLDB.py", "hash": "2d2788d5d5192b8b90868c30e247ef6533fb1164", "code": "def _adjustWriteData(self, data: pd.DataFrame) -> Any:\n    NewData: List[Any] = []\n    DataLen: pd.DataFrame = data.applymap(lambda x: len(x) if isinstance(x, list) else 1)\n    DataLenMax: pd.Series = DataLen.max(axis=1)\n    DataLenMin: pd.Series = DataLen.min(axis=1)\n    if (DataLenMax!=DataLenMin).sum()>0:\n        self._QS_Logger.warning(\"'%s' \u5728\u5199\u5165\u56e0\u5b50 '%s' \u65f6\u51fa\u73b0\u56e0\u5b50\u503c\u957f\u5ea6\u4e0d\u4e00\u81f4\u7684\u60c5\u51b5, \u5c06\u586b\u5145\u7f3a\u5931!\" % (self.Name, str(data.columns.tolist())))\n    for i in range(data.shape[0]):\n        iDataLen: int = DataLen.iloc[i]\n        if iDataLen>0:\n            iData: List[List[Any]] = data.iloc[i].apply(lambda x: [None]*(iDataLen-len(x))+x if isinstance(x, list) else [x]*iDataLen).tolist()\n            NewData.extend(zip(*iData))\n    NewData: pd.DataFrame = pd.DataFrame(NewData, dtype=\"O\")\n    return NewData.where(pd.notnull(NewData), None).to_records(index=False).tolist()\n", "rewrite": "ReplaceText(target='DataLenMax' @(670,23)->(670,30))", "error_line": 8, "has_bug": true, "code_full": "from typing import Any, List\n\nimport pandas as pd\n\n\nclass Class:\n    Name: str\n    _QS_Logger: Any\n\n    def _adjustWriteData(self, data: pd.DataFrame) -> Any:\n        NewData: List[Any] = []\n        DataLen: pd.DataFrame = data.applymap(lambda x: len(x) if isinstance(x, list) else 1)\n        DataLenMax: pd.Series = DataLen.max(axis=1)\n        DataLenMin: pd.Series = DataLen.min(axis=1)\n        if (DataLenMax!=DataLenMin).sum()>0:\n            self._QS_Logger.warning(\"'%s' \u5728\u5199\u5165\u56e0\u5b50 '%s' \u65f6\u51fa\u73b0\u56e0\u5b50\u503c\u957f\u5ea6\u4e0d\u4e00\u81f4\u7684\u60c5\u51b5, \u5c06\u586b\u5145\u7f3a\u5931!\" % (self.Name, str(data.columns.tolist())))\n        for i in range(data.shape[0]):\n            iDataLen: int = DataLen.iloc[i]\n            if iDataLen>0:\n                iData: List[List[Any]] = data.iloc[i].apply(lambda x: [None]*(iDataLen-len(x))+x if isinstance(x, list) else [x]*iDataLen).tolist()\n                NewData.extend(zip(*iData))\n        NewData: pd.DataFrame = pd.DataFrame(NewData, dtype=\"O\")\n        return NewData.where(pd.notnull(NewData), None).to_records(index=False).tolist()\n", "error_location_char": [485, 492], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def closure(", "data", ",", "k", "=", "1.0", ")", ":", "#NEWLINE#", "#INDENT#", "'Apply closure to data, sample-wise.\\n\\n    Parameters\\n    ----------\\n    data : 2d numpy array, shape [n_samples, n_measurements]\\n        Data to be closed to a certain constant. Do not forget to deal with\\n        zeros in the data before this operation.\\n    k : float, positive\\n        Sum of the measurements will be equal to this number.\\n\\n    Returns\\n    -------\\n    data : 2d numpy array, shape [n_samples, n_measurements]\\n        Closed data.\\n\\n    Reference\\n    ---------\\n    [1] Pawlowsky-Glahn, V., Egozcue, J. J., & Tolosana-Delgado, R.\\n        (2015). Modelling and Analysis of Compositional Data, pg. 9.\\n        Chichester, UK: John Wiley & Sons, Ltd.\\n        DOI: 10.1002/9781119003144\\n\\n    '", "#NEWLINE#", "data_sum", "=", "np", ".", "sum", "(", "data", ",", "axis", "=", "1", ")", "#NEWLINE#", "out", "=", "np", ".", "copy", "(", "data", ")", "#NEWLINE#", "for", "i", "in", "range", "(", "data", ".", "shape", "[", "1", "]", ")", ":", "#NEWLINE#", "#INDENT#", "out", "[", "(", ":", ",", "i", ")", "]", "=", "np", ".", "divide", "(", "out", "[", "(", ":", ",", "i", ")", "]", ",", "data_sum", ")", "#NEWLINE#", "#UNINDENT#", "out", "=", "(", "data", "*", "k", ")", "#NEWLINE#", "return", "out"], "edges": [[1, 3, 7, "enum_FIELD"], [10, 11, 7, "enum_FIELD"], [12, 20, 7, "enum_FIELD"], [25, 31, 7, "enum_FIELD"], [37, 36, 7, "enum_FIELD"], [37, 39, 7, "enum_FIELD"], [75, 80, 7, "enum_FIELD"], [84, 85, 7, "enum_FIELD"], [20, 16, 7, "enum_FIELD"], [31, 29, 7, "enum_FIELD"], [39, 38, 7, "enum_FIELD"], [49, 71, 7, "enum_FIELD"], [80, 79, 7, "enum_FIELD"], [80, 81, 7, "enum_FIELD"], [16, 15, 7, "enum_FIELD"], [21, 23, 7, "enum_FIELD"], [29, 28, 7, "enum_FIELD"], [43, 41, 7, "enum_FIELD"], [43, 44, 7, "enum_FIELD"], [51, 50, 7, "enum_FIELD"], [51, 54, 7, "enum_FIELD"], [71, 60, 7, "enum_FIELD"], [41, 40, 7, "enum_FIELD"], [60, 59, 7, "enum_FIELD"], [64, 63, 7, "enum_FIELD"], [64, 67, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [19, 2, 10, "enum_LAST_LEXICAL_USE"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [28, 15, 10, "enum_LAST_LEXICAL_USE"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [32, 19, 10, "enum_LAST_LEXICAL_USE"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [40, 32, 10, "enum_LAST_LEXICAL_USE"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 49, 9, "enum_NEXT_SYNTAX"], [50, 26, 10, "enum_LAST_LEXICAL_USE"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [55, 36, 10, "enum_LAST_LEXICAL_USE"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [59, 28, 10, "enum_LAST_LEXICAL_USE"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [63, 50, 10, "enum_LAST_LEXICAL_USE"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [68, 55, 10, "enum_LAST_LEXICAL_USE"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [72, 13, 10, "enum_LAST_LEXICAL_USE"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 75, 9, "enum_NEXT_SYNTAX"], [76, 63, 10, "enum_LAST_LEXICAL_USE"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [79, 40, 10, "enum_LAST_LEXICAL_USE"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [81, 4, 10, "enum_LAST_LEXICAL_USE"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 84, 9, "enum_NEXT_SYNTAX"], [85, 76, 10, "enum_LAST_LEXICAL_USE"], [84, 85, 9, "enum_NEXT_SYNTAX"], [6, 1, 1, "enum_CFG_NEXT"], [3, 10, 1, "enum_CFG_NEXT"], [10, 12, 1, "enum_CFG_NEXT"], [12, 25, 1, "enum_CFG_NEXT"], [25, 39, 1, "enum_CFG_NEXT"], [39, 36, 1, "enum_CFG_NEXT"], [36, 75, 1, "enum_CFG_NEXT"], [36, 49, 1, "enum_CFG_NEXT"], [49, 36, 1, "enum_CFG_NEXT"], [75, 84, 1, "enum_CFG_NEXT"], [19, 2, 3, "enum_LAST_WRITE"], [28, 15, 2, "enum_LAST_READ"], [32, 19, 2, "enum_LAST_READ"], [32, 2, 3, "enum_LAST_WRITE"], [40, 32, 2, "enum_LAST_READ"], [40, 2, 3, "enum_LAST_WRITE"], [36, 55, 2, "enum_LAST_READ"], [36, 36, 3, "enum_LAST_WRITE"], [59, 28, 2, "enum_LAST_READ"], [59, 59, 2, "enum_LAST_READ"], [63, 50, 2, "enum_LAST_READ"], [63, 26, 3, "enum_LAST_WRITE"], [68, 55, 2, "enum_LAST_READ"], [68, 36, 3, "enum_LAST_WRITE"], [72, 72, 2, "enum_LAST_READ"], [72, 13, 3, "enum_LAST_WRITE"], [50, 63, 2, "enum_LAST_READ"], [50, 26, 3, "enum_LAST_WRITE"], [55, 68, 2, "enum_LAST_READ"], [55, 36, 3, "enum_LAST_WRITE"], [79, 40, 2, "enum_LAST_READ"], [79, 2, 3, "enum_LAST_WRITE"], [81, 4, 3, "enum_LAST_WRITE"], [76, 50, 2, "enum_LAST_READ"], [76, 26, 3, "enum_LAST_WRITE"], [85, 50, 2, "enum_LAST_READ"], [85, 76, 3, "enum_LAST_WRITE"], [13, 19, 4, "enum_COMPUTED_FROM"], [13, 15, 4, "enum_COMPUTED_FROM"], [26, 32, 4, "enum_COMPUTED_FROM"], [26, 28, 4, "enum_COMPUTED_FROM"], [76, 79, 4, "enum_COMPUTED_FROM"], [76, 81, 4, "enum_COMPUTED_FROM"], [51, 72, 4, "enum_COMPUTED_FROM"], [51, 59, 4, "enum_COMPUTED_FROM"], [51, 63, 4, "enum_COMPUTED_FROM"], [51, 68, 4, "enum_COMPUTED_FROM"]], "error_location": 79, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/ofgulban/compoda.git", "old_path": "compoda/core.py", "hash": "610dfad6de73410b4b99e8e9260b06dbe4ab91b7", "code": "def closure(data: np.ndarray, k: float=1.0) -> np.ndarray:\n    \"\"\"Apply closure to data, sample-wise.\n\n    Parameters\n    ----------\n    data : 2d numpy array, shape [n_samples, n_measurements]\n        Data to be closed to a certain constant. Do not forget to deal with\n        zeros in the data before this operation.\n    k : float, positive\n        Sum of the measurements will be equal to this number.\n\n    Returns\n    -------\n    data : 2d numpy array, shape [n_samples, n_measurements]\n        Closed data.\n\n    Reference\n    ---------\n    [1] Pawlowsky-Glahn, V., Egozcue, J. J., & Tolosana-Delgado, R.\n        (2015). Modelling and Analysis of Compositional Data, pg. 9.\n        Chichester, UK: John Wiley & Sons, Ltd.\n        DOI: 10.1002/9781119003144\n\n    \"\"\"\n    data_sum: np.ndarray = np.sum(data, axis=1)\n    out: np.ndarray = np.copy(data)\n    for i in range(data.shape[1]):\n        out[:, i] = np.divide(out[:, i], data_sum)\n    out: np.ndarray = data * k\n    return out\n", "rewrite": "ReplaceText(target='out' @(52,10)->(52,14))", "error_line": 28, "has_bug": true, "code_full": "import numpy as np\n\n\ndef closure(data: np.ndarray, k: float=1.0) -> np.ndarray:\n    \"\"\"Apply closure to data, sample-wise.\n\n    Parameters\n    ----------\n    data : 2d numpy array, shape [n_samples, n_measurements]\n        Data to be closed to a certain constant. Do not forget to deal with\n        zeros in the data before this operation.\n    k : float, positive\n        Sum of the measurements will be equal to this number.\n\n    Returns\n    -------\n    data : 2d numpy array, shape [n_samples, n_measurements]\n        Closed data.\n\n    Reference\n    ---------\n    [1] Pawlowsky-Glahn, V., Egozcue, J. J., & Tolosana-Delgado, R.\n        (2015). Modelling and Analysis of Compositional Data, pg. 9.\n        Chichester, UK: John Wiley & Sons, Ltd.\n        DOI: 10.1002/9781119003144\n\n    \"\"\"\n    data_sum: np.ndarray = np.sum(data, axis=1)\n    out: np.ndarray = np.copy(data)\n    for i in range(data.shape[1]):\n        out[:, i] = np.divide(out[:, i], data_sum)\n    out: np.ndarray = data * k\n    return out\n", "error_location_char": [962, 966], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def sync_content(", "token", "=", "None", ",", "content_type_to_sync", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Synchronizes the local models with Axilent content.\\n    '", "#NEWLINE#", "from", "djax.models", "import", "AxilentContentRecord", ",", "ContentSyncLock", "#NEWLINE#", "if", "ContentSyncLock", ".", "objects", ".", "all", "(", ")", ".", "exists", "(", ")", ":", "#NEWLINE#", "#INDENT#", "return", "False", "#NEWLINE#", "#UNINDENT#", "if", "(", "not", "token", ")", ":", "#NEWLINE#", "#INDENT#", "token", "=", "uuid", ".", "uuid4", "(", ")", ".", "hex", "#NEWLINE#", "#UNINDENT#", "lock", "=", "ContentSyncLock", ".", "objects", ".", "create", "(", "token", "=", "token", ")", "#NEWLINE#", "build_registry", "(", ")", "#NEWLINE#", "if", "content_type_to_sync", ":", "#NEWLINE#", "#INDENT#", "log", ".", "info", "(", "(", "'Syncing %s.'", "%", "content_type_to_sync", ")", ")", "#NEWLINE#", "try", ":", "#NEWLINE#", "#INDENT#", "content_type", "=", "content_registry", "[", "content_type_to_sync", "]", "#NEWLINE#", "sync_content_type", "(", "content_type", ")", "#NEWLINE#", "#UNINDENT#", "except", "KeyError", ":", "#NEWLINE#", "#INDENT#", "log", ".", "error", "(", "(", "'%s is not in the content registry.'", "%", "content_type_to_sync", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "for", "content_type", "in", "content_registry", ".", "keys", "(", ")", ":", "#NEWLINE#", "#INDENT#", "sync_content_type", "(", "content_type", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "lock", ".", "delete", "(", ")", "#NEWLINE#", "return", "True"], "edges": [[1, 5, 7, "enum_FIELD"], [12, 13, 7, "enum_FIELD"], [22, 32, 7, "enum_FIELD"], [41, 43, 7, "enum_FIELD"], [59, 67, 7, "enum_FIELD"], [72, 74, 7, "enum_FIELD"], [79, 78, 7, "enum_FIELD"], [149, 153, 7, "enum_FIELD"], [156, 157, 7, "enum_FIELD"], [32, 30, 7, "enum_FIELD"], [37, 38, 7, "enum_FIELD"], [43, 44, 7, "enum_FIELD"], [48, 56, 7, "enum_FIELD"], [67, 65, 7, "enum_FIELD"], [74, 73, 7, "enum_FIELD"], [81, 85, 7, "enum_FIELD"], [134, 133, 7, "enum_FIELD"], [134, 138, 7, "enum_FIELD"], [153, 151, 7, "enum_FIELD"], [30, 28, 7, "enum_FIELD"], [56, 54, 7, "enum_FIELD"], [65, 63, 7, "enum_FIELD"], [68, 70, 7, "enum_FIELD"], [85, 83, 7, "enum_FIELD"], [96, 100, 7, "enum_FIELD"], [103, 105, 7, "enum_FIELD"], [110, 111, 7, "enum_FIELD"], [138, 136, 7, "enum_FIELD"], [142, 144, 7, "enum_FIELD"], [151, 150, 7, "enum_FIELD"], [28, 26, 7, "enum_FIELD"], [54, 52, 7, "enum_FIELD"], [63, 62, 7, "enum_FIELD"], [83, 82, 7, "enum_FIELD"], [88, 87, 7, "enum_FIELD"], [88, 89, 7, "enum_FIELD"], [100, 99, 7, "enum_FIELD"], [100, 101, 7, "enum_FIELD"], [105, 104, 7, "enum_FIELD"], [114, 118, 7, "enum_FIELD"], [136, 135, 7, "enum_FIELD"], [144, 143, 7, "enum_FIELD"], [26, 24, 7, "enum_FIELD"], [52, 51, 7, "enum_FIELD"], [118, 116, 7, "enum_FIELD"], [24, 23, 7, "enum_FIELD"], [116, 115, 7, "enum_FIELD"], [121, 120, 7, "enum_FIELD"], [121, 122, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [44, 2, 10, "enum_LAST_LEXICAL_USE"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 48, 9, "enum_NEXT_SYNTAX"], [49, 44, 10, "enum_LAST_LEXICAL_USE"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [62, 23, 10, "enum_LAST_LEXICAL_USE"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [70, 49, 10, "enum_LAST_LEXICAL_USE"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 77, 9, "enum_NEXT_SYNTAX"], [78, 6, 10, "enum_LAST_LEXICAL_USE"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [89, 78, 10, "enum_LAST_LEXICAL_USE"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [101, 89, 10, "enum_LAST_LEXICAL_USE"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [106, 97, 10, "enum_LAST_LEXICAL_USE"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 114, 9, "enum_NEXT_SYNTAX"], [115, 82, 10, "enum_LAST_LEXICAL_USE"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [122, 101, 10, "enum_LAST_LEXICAL_USE"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 132, 9, "enum_NEXT_SYNTAX"], [133, 106, 10, "enum_LAST_LEXICAL_USE"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [135, 99, 10, "enum_LAST_LEXICAL_USE"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 142, 9, "enum_NEXT_SYNTAX"], [143, 104, 10, "enum_LAST_LEXICAL_USE"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [145, 133, 10, "enum_LAST_LEXICAL_USE"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 149, 9, "enum_NEXT_SYNTAX"], [150, 60, 10, "enum_LAST_LEXICAL_USE"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [4, 8, 1, "enum_CFG_NEXT"], [8, 1, 1, "enum_CFG_NEXT"], [5, 12, 1, "enum_CFG_NEXT"], [12, 16, 1, "enum_CFG_NEXT"], [16, 32, 1, "enum_CFG_NEXT"], [32, 43, 1, "enum_CFG_NEXT"], [32, 37, 1, "enum_CFG_NEXT"], [43, 59, 1, "enum_CFG_NEXT"], [43, 48, 1, "enum_CFG_NEXT"], [48, 59, 1, "enum_CFG_NEXT"], [59, 72, 1, "enum_CFG_NEXT"], [72, 78, 1, "enum_CFG_NEXT"], [78, 138, 1, "enum_CFG_NEXT"], [78, 81, 1, "enum_CFG_NEXT"], [81, 96, 1, "enum_CFG_NEXT"], [96, 103, 1, "enum_CFG_NEXT"], [103, 111, 1, "enum_CFG_NEXT"], [103, 149, 1, "enum_CFG_NEXT"], [111, 114, 1, "enum_CFG_NEXT"], [114, 149, 1, "enum_CFG_NEXT"], [138, 133, 1, "enum_CFG_NEXT"], [133, 142, 1, "enum_CFG_NEXT"], [133, 149, 1, "enum_CFG_NEXT"], [142, 133, 1, "enum_CFG_NEXT"], [149, 156, 1, "enum_CFG_NEXT"], [44, 2, 3, "enum_LAST_WRITE"], [49, 44, 2, "enum_LAST_READ"], [49, 2, 3, "enum_LAST_WRITE"], [62, 23, 2, "enum_LAST_READ"], [70, 44, 2, "enum_LAST_READ"], [70, 2, 3, "enum_LAST_WRITE"], [70, 49, 3, "enum_LAST_WRITE"], [78, 6, 3, "enum_LAST_WRITE"], [89, 78, 2, "enum_LAST_READ"], [89, 6, 3, "enum_LAST_WRITE"], [101, 89, 2, "enum_LAST_READ"], [101, 6, 3, "enum_LAST_WRITE"], [106, 97, 3, "enum_LAST_WRITE"], [115, 82, 2, "enum_LAST_READ"], [122, 101, 2, "enum_LAST_READ"], [122, 6, 3, "enum_LAST_WRITE"], [133, 145, 2, "enum_LAST_READ"], [133, 133, 3, "enum_LAST_WRITE"], [143, 143, 2, "enum_LAST_READ"], [145, 145, 2, "enum_LAST_READ"], [145, 133, 3, "enum_LAST_WRITE"], [150, 60, 3, "enum_LAST_WRITE"], [60, 70, 4, "enum_COMPUTED_FROM"], [60, 62, 4, "enum_COMPUTED_FROM"], [49, 51, 4, "enum_COMPUTED_FROM"], [97, 99, 4, "enum_COMPUTED_FROM"], [97, 101, 4, "enum_COMPUTED_FROM"]], "error_location": 106, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/Axilent/Djax.git", "old_path": "djax/content.py", "hash": "6ed7214dd303d0358b6adda49eca86511a12e430", "code": "def sync_content(token: Optional[str]=None,content_type_to_sync: Optional[str]=None) -> bool:\n    \"\"\"\n    Synchronizes the local models with Axilent content.\n    \"\"\"\n    from djax.models import AxilentContentRecord, ContentSyncLock\n    \n    if ContentSyncLock.objects.all().exists():\n        return False # already sync locked\n    \n    if not token:\n        token = uuid.uuid4().hex\n    \n    lock: Any = ContentSyncLock.objects.create(token=token)\n    \n    # ensure content registry loaded\n    build_registry()\n    \n    if content_type_to_sync:\n        log.info('Syncing %s.' % content_type_to_sync)\n        try:\n            content_type: Type = content_registry[content_type_to_sync]\n            sync_content_type(content_type)\n        except KeyError:\n            log.error('%s is not in the content registry.' % content_type_to_sync)\n    else:\n        for content_type in content_registry.keys():\n            sync_content_type(content_type)\n    \n    lock.delete()\n    return True # sync occured\n", "rewrite": "ReplaceText(target='content_type_to_sync' @(206,30)->(206,42))", "error_line": 21, "has_bug": true, "code_full": "import logging\nimport uuid\nfrom typing import Any, Dict, Optional, Type\n\nlog = logging.getLogger(__name__)\n\ndef sync_content_type(content_type: str):\n    pass\n\ndef build_registry():\n    pass\n\ncontent_registry: Dict[str, Type] = {}\n\ndef sync_content(token: Optional[str]=None,content_type_to_sync: Optional[str]=None) -> bool:\n    \"\"\"\n    Synchronizes the local models with Axilent content.\n    \"\"\"\n    from djax.models import AxilentContentRecord, ContentSyncLock\n    \n    if ContentSyncLock.objects.all().exists():\n        return False # already sync locked\n    \n    if not token:\n        token = uuid.uuid4().hex\n    \n    lock: Any = ContentSyncLock.objects.create(token=token)\n    \n    # ensure content registry loaded\n    build_registry()\n    \n    if content_type_to_sync:\n        log.info('Syncing %s.' % content_type_to_sync)\n        try:\n            content_type: Type = content_registry[content_type_to_sync]\n            sync_content_type(content_type)\n        except KeyError:\n            log.error('%s is not in the content registry.' % content_type_to_sync)\n    else:\n        for content_type in content_registry.keys():\n            sync_content_type(content_type)\n    \n    lock.delete()\n    return True # sync occured\n", "error_location_char": [715, 727], "type_checked_pytype": true, "type_error_label": "arg-type", "type_checked_mypy": false}
{"source_tokens": ["#NEWLINE#", "def globalOtsu(", "collection", ",", "target_date", ",", "region", ",", "canny_threshold", "=", "7", ",", "canny_sigma", "=", "1", ",", "canny_lt", "=", "7", ",", "smoothing", "=", "100", ",", "connected_pixels", "=", "200", ",", "edge_length", "=", "50", ",", "smooth_edges", "=", "100", ",", "qualityBand", "=", "None", ",", "reductionScale", "=", "90", ",", "initThresh", "=", "0", ",", "seed", "=", "7", ")", ":", "#NEWLINE#", "#INDENT#", "tDate", "=", "ee", ".", "Date", "(", "target_date", ")", "#NEWLINE#", "targetColl", "=", "collection", ".", "filterDate", "(", "tDate", ",", "tDate", ".", "advance", "(", "1", ",", "'day'", ")", ")", "#NEWLINE#", "if", "(", "qualityBand", "==", "None", ")", ":", "#NEWLINE#", "#INDENT#", "histBand", "=", "target", ".", "bandNames", "(", ")", ".", "get", "(", "0", ")", "#NEWLINE#", "target", "=", "targetColl", ".", "mosaic", "(", ")", ".", "select", "(", "histBand", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "histBand", "=", "ee", ".", "String", "(", "qualityBand", ")", "#NEWLINE#", "target", "=", "targetColl", ".", "qualityMosaic", "(", "qualityBand", ")", ".", "select", "(", "histBand", ")", "#NEWLINE#", "#UNINDENT#", "binary", "=", "target", ".", "gt", "(", "initThresh", ")", ".", "rename", "(", "'binary'", ")", "#NEWLINE#", "samps", "=", "binary", ".", "stratifiedSample", "(", "numPoints", "=", "20", ",", "classBand", "=", "'binary'", ",", "region", "=", "region", ",", "scale", "=", "reductionScale", ",", "geometries", "=", "True", ",", "seed", "=", "seed", ",", "tileScale", "=", "8", ")", "#NEWLINE#", "sampleRegion", "=", "samps", ".", "geometry", "(", ")", ".", "buffer", "(", "2500", ")", "#NEWLINE#", "canny", "=", "ee", ".", "Algorithms", ".", "CannyEdgeDetector", "(", "target", ",", "canny_threshold", ",", "canny_sigma", ")", "#NEWLINE#", "connected", "=", "canny", ".", "mask", "(", "canny", ")", ".", "lt", "(", "canny_lt", ")", ".", "connectedPixelCount", "(", "connected_pixels", ",", "True", ")", "#NEWLINE#", "edges", "=", "connected", ".", "gte", "(", "edge_length", ")", "#NEWLINE#", "edgeBuffer", "=", "edges", ".", "focal_max", "(", "smooth_edges", ",", "'square'", ",", "'meters'", ")", "#NEWLINE#", "imageEdge", "=", "target", ".", "mask", "(", "edges", ")", "#NEWLINE#", "histogram_image", "=", "target", ".", "mask", "(", "edgeBuffer", ")", "#NEWLINE#", "histogram", "=", "histogram_image", ".", "reduceRegion", "(", "ee", ".", "Reducer", ".", "histogram", "(", "255", ",", "2", ")", ".", "combine", "(", "'mean'", ",", "None", ",", "True", ")", ".", "combine", "(", "'variance'", ",", "None", ",", "True", ")", ",", "sampleRegion", ",", "reductionScale", ",", "bestEffort", "=", "True", ")", "#NEWLINE#", "threshold", "=", "otsu_function", "(", "histogram", ".", "get", "(", "histBand", ".", "cat", "(", "'_histogram'", ")", ")", ")", "#NEWLINE#", "water", "=", "target", ".", "gt", "(", "threshold", ")", ".", "clip", "(", "landShp", ".", "geometry", "(", ")", ")", "#NEWLINE#", "return", "water"], "edges": [[1, 25, 7, "enum_FIELD"], [54, 60, 7, "enum_FIELD"], [63, 71, 7, "enum_FIELD"], [88, 85, 7, "enum_FIELD"], [145, 156, 7, "enum_FIELD"], [159, 177, 7, "enum_FIELD"], [194, 204, 7, "enum_FIELD"], [207, 217, 7, "enum_FIELD"], [222, 240, 7, "enum_FIELD"], [243, 249, 7, "enum_FIELD"], [252, 260, 7, "enum_FIELD"], [265, 271, 7, "enum_FIELD"], [274, 280, 7, "enum_FIELD"], [283, 320, 7, "enum_FIELD"], [327, 331, 7, "enum_FIELD"], [344, 355, 7, "enum_FIELD"], [363, 364, 7, "enum_FIELD"], [60, 58, 7, "enum_FIELD"], [71, 67, 7, "enum_FIELD"], [85, 84, 7, "enum_FIELD"], [90, 100, 7, "enum_FIELD"], [103, 113, 7, "enum_FIELD"], [121, 127, 7, "enum_FIELD"], [130, 141, 7, "enum_FIELD"], [156, 154, 7, "enum_FIELD"], [177, 163, 7, "enum_FIELD"], [204, 202, 7, "enum_FIELD"], [217, 213, 7, "enum_FIELD"], [240, 236, 7, "enum_FIELD"], [249, 247, 7, "enum_FIELD"], [260, 256, 7, "enum_FIELD"], [271, 269, 7, "enum_FIELD"], [280, 278, 7, "enum_FIELD"], [320, 287, 7, "enum_FIELD"], [331, 330, 7, "enum_FIELD"], [355, 353, 7, "enum_FIELD"], [58, 57, 7, "enum_FIELD"], [67, 66, 7, "enum_FIELD"], [77, 73, 7, "enum_FIELD"], [100, 98, 7, "enum_FIELD"], [113, 111, 7, "enum_FIELD"], [127, 125, 7, "enum_FIELD"], [141, 139, 7, "enum_FIELD"], [154, 151, 7, "enum_FIELD"], [163, 162, 7, "enum_FIELD"], [166, 168, 7, "enum_FIELD"], [170, 172, 7, "enum_FIELD"], [174, 176, 7, "enum_FIELD"], [178, 180, 7, "enum_FIELD"], [182, 184, 7, "enum_FIELD"], [186, 188, 7, "enum_FIELD"], [190, 192, 7, "enum_FIELD"], [202, 200, 7, "enum_FIELD"], [213, 211, 7, "enum_FIELD"], [236, 233, 7, "enum_FIELD"], [247, 246, 7, "enum_FIELD"], [256, 255, 7, "enum_FIELD"], [269, 268, 7, "enum_FIELD"], [278, 277, 7, "enum_FIELD"], [287, 286, 7, "enum_FIELD"], [313, 309, 7, "enum_FIELD"], [323, 325, 7, "enum_FIELD"], [335, 333, 7, "enum_FIELD"], [353, 350, 7, "enum_FIELD"], [359, 357, 7, "enum_FIELD"], [73, 72, 7, "enum_FIELD"], [98, 96, 7, "enum_FIELD"], [111, 109, 7, "enum_FIELD"], [125, 124, 7, "enum_FIELD"], [139, 136, 7, "enum_FIELD"], [151, 149, 7, "enum_FIELD"], [200, 198, 7, "enum_FIELD"], [211, 210, 7, "enum_FIELD"], [233, 231, 7, "enum_FIELD"], [309, 304, 7, "enum_FIELD"], [333, 332, 7, "enum_FIELD"], [339, 337, 7, "enum_FIELD"], [350, 348, 7, "enum_FIELD"], [357, 356, 7, "enum_FIELD"], [96, 94, 7, "enum_FIELD"], [109, 107, 7, "enum_FIELD"], [136, 134, 7, "enum_FIELD"], [149, 148, 7, "enum_FIELD"], [198, 197, 7, "enum_FIELD"], [231, 228, 7, "enum_FIELD"], [304, 300, 7, "enum_FIELD"], [337, 336, 7, "enum_FIELD"], [348, 347, 7, "enum_FIELD"], [94, 93, 7, "enum_FIELD"], [107, 106, 7, "enum_FIELD"], [134, 133, 7, "enum_FIELD"], [228, 226, 7, "enum_FIELD"], [300, 297, 7, "enum_FIELD"], [226, 225, 7, "enum_FIELD"], [297, 293, 7, "enum_FIELD"], [293, 291, 7, "enum_FIELD"], [291, 290, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [61, 4, 10, "enum_LAST_LEXICAL_USE"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [66, 2, 10, "enum_LAST_LEXICAL_USE"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [70, 55, 10, "enum_LAST_LEXICAL_USE"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [72, 70, 10, "enum_LAST_LEXICAL_USE"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [84, 36, 10, "enum_LAST_LEXICAL_USE"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [104, 93, 10, "enum_LAST_LEXICAL_USE"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [106, 64, 10, "enum_LAST_LEXICAL_USE"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [114, 91, 10, "enum_LAST_LEXICAL_USE"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 121, 9, "enum_NEXT_SYNTAX"], [122, 114, 10, "enum_LAST_LEXICAL_USE"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [124, 57, 10, "enum_LAST_LEXICAL_USE"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [128, 84, 10, "enum_LAST_LEXICAL_USE"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [131, 104, 10, "enum_LAST_LEXICAL_USE"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [133, 106, 10, "enum_LAST_LEXICAL_USE"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [137, 128, 10, "enum_LAST_LEXICAL_USE"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [142, 122, 10, "enum_LAST_LEXICAL_USE"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [148, 131, 10, "enum_LAST_LEXICAL_USE"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [152, 44, 10, "enum_LAST_LEXICAL_USE"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [162, 146, 10, "enum_LAST_LEXICAL_USE"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [176, 6, 10, "enum_LAST_LEXICAL_USE"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [180, 40, 10, "enum_LAST_LEXICAL_USE"], [179, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 184, 9, "enum_NEXT_SYNTAX"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [188, 48, 10, "enum_LAST_LEXICAL_USE"], [187, 188, 9, "enum_NEXT_SYNTAX"], [188, 189, 9, "enum_NEXT_SYNTAX"], [189, 190, 9, "enum_NEXT_SYNTAX"], [190, 191, 9, "enum_NEXT_SYNTAX"], [191, 192, 9, "enum_NEXT_SYNTAX"], [192, 193, 9, "enum_NEXT_SYNTAX"], [193, 194, 9, "enum_NEXT_SYNTAX"], [194, 195, 9, "enum_NEXT_SYNTAX"], [195, 196, 9, "enum_NEXT_SYNTAX"], [197, 160, 10, "enum_LAST_LEXICAL_USE"], [196, 197, 9, "enum_NEXT_SYNTAX"], [197, 198, 9, "enum_NEXT_SYNTAX"], [198, 199, 9, "enum_NEXT_SYNTAX"], [199, 200, 9, "enum_NEXT_SYNTAX"], [200, 201, 9, "enum_NEXT_SYNTAX"], [201, 202, 9, "enum_NEXT_SYNTAX"], [202, 203, 9, "enum_NEXT_SYNTAX"], [203, 204, 9, "enum_NEXT_SYNTAX"], [204, 205, 9, "enum_NEXT_SYNTAX"], [205, 206, 9, "enum_NEXT_SYNTAX"], [206, 207, 9, "enum_NEXT_SYNTAX"], [207, 208, 9, "enum_NEXT_SYNTAX"], [208, 209, 9, "enum_NEXT_SYNTAX"], [210, 124, 10, "enum_LAST_LEXICAL_USE"], [209, 210, 9, "enum_NEXT_SYNTAX"], [210, 211, 9, "enum_NEXT_SYNTAX"], [211, 212, 9, "enum_NEXT_SYNTAX"], [212, 213, 9, "enum_NEXT_SYNTAX"], [213, 214, 9, "enum_NEXT_SYNTAX"], [214, 215, 9, "enum_NEXT_SYNTAX"], [216, 148, 10, "enum_LAST_LEXICAL_USE"], [215, 216, 9, "enum_NEXT_SYNTAX"], [216, 217, 9, "enum_NEXT_SYNTAX"], [218, 8, 10, "enum_LAST_LEXICAL_USE"], [217, 218, 9, "enum_NEXT_SYNTAX"], [218, 219, 9, "enum_NEXT_SYNTAX"], [220, 12, 10, "enum_LAST_LEXICAL_USE"], [219, 220, 9, "enum_NEXT_SYNTAX"], [220, 221, 9, "enum_NEXT_SYNTAX"], [221, 222, 9, "enum_NEXT_SYNTAX"], [222, 223, 9, "enum_NEXT_SYNTAX"], [223, 224, 9, "enum_NEXT_SYNTAX"], [225, 208, 10, "enum_LAST_LEXICAL_USE"], [224, 225, 9, "enum_NEXT_SYNTAX"], [225, 226, 9, "enum_NEXT_SYNTAX"], [226, 227, 9, "enum_NEXT_SYNTAX"], [227, 228, 9, "enum_NEXT_SYNTAX"], [229, 225, 10, "enum_LAST_LEXICAL_USE"], [228, 229, 9, "enum_NEXT_SYNTAX"], [229, 230, 9, "enum_NEXT_SYNTAX"], [230, 231, 9, "enum_NEXT_SYNTAX"], [231, 232, 9, "enum_NEXT_SYNTAX"], [232, 233, 9, "enum_NEXT_SYNTAX"], [234, 16, 10, "enum_LAST_LEXICAL_USE"], [233, 234, 9, "enum_NEXT_SYNTAX"], [234, 235, 9, "enum_NEXT_SYNTAX"], [235, 236, 9, "enum_NEXT_SYNTAX"], [236, 237, 9, "enum_NEXT_SYNTAX"], [237, 238, 9, "enum_NEXT_SYNTAX"], [239, 24, 10, "enum_LAST_LEXICAL_USE"], [238, 239, 9, "enum_NEXT_SYNTAX"], [239, 240, 9, "enum_NEXT_SYNTAX"], [240, 241, 9, "enum_NEXT_SYNTAX"], [241, 242, 9, "enum_NEXT_SYNTAX"], [242, 243, 9, "enum_NEXT_SYNTAX"], [243, 244, 9, "enum_NEXT_SYNTAX"], [244, 245, 9, "enum_NEXT_SYNTAX"], [246, 223, 10, "enum_LAST_LEXICAL_USE"], [245, 246, 9, "enum_NEXT_SYNTAX"], [246, 247, 9, "enum_NEXT_SYNTAX"], [247, 248, 9, "enum_NEXT_SYNTAX"], [248, 249, 9, "enum_NEXT_SYNTAX"], [250, 28, 10, "enum_LAST_LEXICAL_USE"], [249, 250, 9, "enum_NEXT_SYNTAX"], [250, 251, 9, "enum_NEXT_SYNTAX"], [251, 252, 9, "enum_NEXT_SYNTAX"], [252, 253, 9, "enum_NEXT_SYNTAX"], [253, 254, 9, "enum_NEXT_SYNTAX"], [255, 244, 10, "enum_LAST_LEXICAL_USE"], [254, 255, 9, "enum_NEXT_SYNTAX"], [255, 256, 9, "enum_NEXT_SYNTAX"], [256, 257, 9, "enum_NEXT_SYNTAX"], [257, 258, 9, "enum_NEXT_SYNTAX"], [259, 32, 10, "enum_LAST_LEXICAL_USE"], [258, 259, 9, "enum_NEXT_SYNTAX"], [259, 260, 9, "enum_NEXT_SYNTAX"], [260, 261, 9, "enum_NEXT_SYNTAX"], [261, 262, 9, "enum_NEXT_SYNTAX"], [262, 263, 9, "enum_NEXT_SYNTAX"], [263, 264, 9, "enum_NEXT_SYNTAX"], [264, 265, 9, "enum_NEXT_SYNTAX"], [265, 266, 9, "enum_NEXT_SYNTAX"], [266, 267, 9, "enum_NEXT_SYNTAX"], [268, 216, 10, "enum_LAST_LEXICAL_USE"], [267, 268, 9, "enum_NEXT_SYNTAX"], [268, 269, 9, "enum_NEXT_SYNTAX"], [269, 270, 9, "enum_NEXT_SYNTAX"], [270, 271, 9, "enum_NEXT_SYNTAX"], [272, 255, 10, "enum_LAST_LEXICAL_USE"], [271, 272, 9, "enum_NEXT_SYNTAX"], [272, 273, 9, "enum_NEXT_SYNTAX"], [273, 274, 9, "enum_NEXT_SYNTAX"], [274, 275, 9, "enum_NEXT_SYNTAX"], [275, 276, 9, "enum_NEXT_SYNTAX"], [277, 268, 10, "enum_LAST_LEXICAL_USE"], [276, 277, 9, "enum_NEXT_SYNTAX"], [277, 278, 9, "enum_NEXT_SYNTAX"], [278, 279, 9, "enum_NEXT_SYNTAX"], [279, 280, 9, "enum_NEXT_SYNTAX"], [281, 253, 10, "enum_LAST_LEXICAL_USE"], [280, 281, 9, "enum_NEXT_SYNTAX"], [281, 282, 9, "enum_NEXT_SYNTAX"], [282, 283, 9, "enum_NEXT_SYNTAX"], [283, 284, 9, "enum_NEXT_SYNTAX"], [284, 285, 9, "enum_NEXT_SYNTAX"], [286, 275, 10, "enum_LAST_LEXICAL_USE"], [285, 286, 9, "enum_NEXT_SYNTAX"], [286, 287, 9, "enum_NEXT_SYNTAX"], [287, 288, 9, "enum_NEXT_SYNTAX"], [288, 289, 9, "enum_NEXT_SYNTAX"], [290, 210, 10, "enum_LAST_LEXICAL_USE"], [289, 290, 9, "enum_NEXT_SYNTAX"], [290, 291, 9, "enum_NEXT_SYNTAX"], [291, 292, 9, "enum_NEXT_SYNTAX"], [292, 293, 9, "enum_NEXT_SYNTAX"], [293, 294, 9, "enum_NEXT_SYNTAX"], [294, 295, 9, "enum_NEXT_SYNTAX"], [295, 296, 9, "enum_NEXT_SYNTAX"], [296, 297, 9, "enum_NEXT_SYNTAX"], [297, 298, 9, "enum_NEXT_SYNTAX"], [298, 299, 9, "enum_NEXT_SYNTAX"], [299, 300, 9, "enum_NEXT_SYNTAX"], [300, 301, 9, "enum_NEXT_SYNTAX"], [301, 302, 9, "enum_NEXT_SYNTAX"], [302, 303, 9, "enum_NEXT_SYNTAX"], [303, 304, 9, "enum_NEXT_SYNTAX"], [304, 305, 9, "enum_NEXT_SYNTAX"], [305, 306, 9, "enum_NEXT_SYNTAX"], [306, 307, 9, "enum_NEXT_SYNTAX"], [307, 308, 9, "enum_NEXT_SYNTAX"], [308, 309, 9, "enum_NEXT_SYNTAX"], [309, 310, 9, "enum_NEXT_SYNTAX"], [310, 311, 9, "enum_NEXT_SYNTAX"], [311, 312, 9, "enum_NEXT_SYNTAX"], [312, 313, 9, "enum_NEXT_SYNTAX"], [313, 314, 9, "enum_NEXT_SYNTAX"], [314, 315, 9, "enum_NEXT_SYNTAX"], [315, 316, 9, "enum_NEXT_SYNTAX"], [316, 317, 9, "enum_NEXT_SYNTAX"], [317, 318, 9, "enum_NEXT_SYNTAX"], [319, 195, 10, "enum_LAST_LEXICAL_USE"], [318, 319, 9, "enum_NEXT_SYNTAX"], [319, 320, 9, "enum_NEXT_SYNTAX"], [321, 180, 10, "enum_LAST_LEXICAL_USE"], [320, 321, 9, "enum_NEXT_SYNTAX"], [321, 322, 9, "enum_NEXT_SYNTAX"], [322, 323, 9, "enum_NEXT_SYNTAX"], [323, 324, 9, "enum_NEXT_SYNTAX"], [324, 325, 9, "enum_NEXT_SYNTAX"], [325, 326, 9, "enum_NEXT_SYNTAX"], [326, 327, 9, "enum_NEXT_SYNTAX"], [327, 328, 9, "enum_NEXT_SYNTAX"], [328, 329, 9, "enum_NEXT_SYNTAX"], [329, 330, 9, "enum_NEXT_SYNTAX"], [330, 331, 9, "enum_NEXT_SYNTAX"], [332, 284, 10, "enum_LAST_LEXICAL_USE"], [331, 332, 9, "enum_NEXT_SYNTAX"], [332, 333, 9, "enum_NEXT_SYNTAX"], [333, 334, 9, "enum_NEXT_SYNTAX"], [334, 335, 9, "enum_NEXT_SYNTAX"], [336, 142, 10, "enum_LAST_LEXICAL_USE"], [335, 336, 9, "enum_NEXT_SYNTAX"], [336, 337, 9, "enum_NEXT_SYNTAX"], [337, 338, 9, "enum_NEXT_SYNTAX"], [338, 339, 9, "enum_NEXT_SYNTAX"], [339, 340, 9, "enum_NEXT_SYNTAX"], [340, 341, 9, "enum_NEXT_SYNTAX"], [341, 342, 9, "enum_NEXT_SYNTAX"], [342, 343, 9, "enum_NEXT_SYNTAX"], [343, 344, 9, "enum_NEXT_SYNTAX"], [344, 345, 9, "enum_NEXT_SYNTAX"], [345, 346, 9, "enum_NEXT_SYNTAX"], [347, 277, 10, "enum_LAST_LEXICAL_USE"], [346, 347, 9, "enum_NEXT_SYNTAX"], [347, 348, 9, "enum_NEXT_SYNTAX"], [348, 349, 9, "enum_NEXT_SYNTAX"], [349, 350, 9, "enum_NEXT_SYNTAX"], [351, 328, 10, "enum_LAST_LEXICAL_USE"], [350, 351, 9, "enum_NEXT_SYNTAX"], [351, 352, 9, "enum_NEXT_SYNTAX"], [352, 353, 9, "enum_NEXT_SYNTAX"], [353, 354, 9, "enum_NEXT_SYNTAX"], [354, 355, 9, "enum_NEXT_SYNTAX"], [355, 356, 9, "enum_NEXT_SYNTAX"], [356, 357, 9, "enum_NEXT_SYNTAX"], [357, 358, 9, "enum_NEXT_SYNTAX"], [358, 359, 9, "enum_NEXT_SYNTAX"], [359, 360, 9, "enum_NEXT_SYNTAX"], [360, 361, 9, "enum_NEXT_SYNTAX"], [361, 363, 9, "enum_NEXT_SYNTAX"], [364, 345, 10, "enum_LAST_LEXICAL_USE"], [363, 364, 9, "enum_NEXT_SYNTAX"], [10, 14, 1, "enum_CFG_NEXT"], [14, 18, 1, "enum_CFG_NEXT"], [18, 22, 1, "enum_CFG_NEXT"], [22, 26, 1, "enum_CFG_NEXT"], [26, 30, 1, "enum_CFG_NEXT"], [30, 34, 1, "enum_CFG_NEXT"], [34, 38, 1, "enum_CFG_NEXT"], [38, 42, 1, "enum_CFG_NEXT"], [42, 46, 1, "enum_CFG_NEXT"], [46, 50, 1, "enum_CFG_NEXT"], [50, 1, 1, "enum_CFG_NEXT"], [25, 54, 1, "enum_CFG_NEXT"], [54, 63, 1, "enum_CFG_NEXT"], [63, 85, 1, "enum_CFG_NEXT"], [85, 90, 1, "enum_CFG_NEXT"], [85, 121, 1, "enum_CFG_NEXT"], [90, 103, 1, "enum_CFG_NEXT"], [103, 145, 1, "enum_CFG_NEXT"], [121, 130, 1, "enum_CFG_NEXT"], [130, 145, 1, "enum_CFG_NEXT"], [145, 159, 1, "enum_CFG_NEXT"], [159, 194, 1, "enum_CFG_NEXT"], [194, 207, 1, "enum_CFG_NEXT"], [207, 222, 1, "enum_CFG_NEXT"], [222, 243, 1, "enum_CFG_NEXT"], [243, 252, 1, "enum_CFG_NEXT"], [252, 265, 1, "enum_CFG_NEXT"], [265, 274, 1, "enum_CFG_NEXT"], [274, 283, 1, "enum_CFG_NEXT"], [283, 327, 1, "enum_CFG_NEXT"], [327, 344, 1, "enum_CFG_NEXT"], [344, 363, 1, "enum_CFG_NEXT"], [61, 4, 3, "enum_LAST_WRITE"], [66, 2, 3, "enum_LAST_WRITE"], [70, 55, 3, "enum_LAST_WRITE"], [72, 70, 2, "enum_LAST_READ"], [72, 55, 3, "enum_LAST_WRITE"], [84, 36, 3, "enum_LAST_WRITE"], [106, 64, 3, "enum_LAST_WRITE"], [114, 91, 3, "enum_LAST_WRITE"], [104, 93, 2, "enum_LAST_READ"], [124, 57, 2, "enum_LAST_READ"], [128, 84, 2, "enum_LAST_READ"], [128, 36, 3, "enum_LAST_WRITE"], [133, 64, 3, "enum_LAST_WRITE"], [137, 128, 2, "enum_LAST_READ"], [137, 36, 3, "enum_LAST_WRITE"], [142, 122, 3, "enum_LAST_WRITE"], [148, 93, 2, "enum_LAST_READ"], [148, 131, 3, "enum_LAST_WRITE"], [148, 104, 3, "enum_LAST_WRITE"], [152, 44, 3, "enum_LAST_WRITE"], [162, 146, 3, "enum_LAST_WRITE"], [176, 6, 3, "enum_LAST_WRITE"], [180, 40, 3, "enum_LAST_WRITE"], [188, 48, 3, "enum_LAST_WRITE"], [197, 160, 3, "enum_LAST_WRITE"], [210, 124, 2, "enum_LAST_READ"], [210, 57, 2, "enum_LAST_READ"], [216, 148, 2, "enum_LAST_READ"], [216, 131, 3, "enum_LAST_WRITE"], [216, 104, 3, "enum_LAST_WRITE"], [218, 8, 3, "enum_LAST_WRITE"], [220, 12, 3, "enum_LAST_WRITE"], [225, 208, 3, "enum_LAST_WRITE"], [229, 225, 2, "enum_LAST_READ"], [229, 208, 3, "enum_LAST_WRITE"], [234, 16, 3, "enum_LAST_WRITE"], [239, 24, 3, "enum_LAST_WRITE"], [246, 223, 3, "enum_LAST_WRITE"], [250, 28, 3, "enum_LAST_WRITE"], [255, 244, 3, "enum_LAST_WRITE"], [259, 32, 3, "enum_LAST_WRITE"], [268, 216, 2, "enum_LAST_READ"], [268, 131, 3, "enum_LAST_WRITE"], [268, 104, 3, "enum_LAST_WRITE"], [272, 255, 2, "enum_LAST_READ"], [272, 244, 3, "enum_LAST_WRITE"], [277, 268, 2, "enum_LAST_READ"], [277, 131, 3, "enum_LAST_WRITE"], [277, 104, 3, "enum_LAST_WRITE"], [281, 253, 3, "enum_LAST_WRITE"], [286, 275, 3, "enum_LAST_WRITE"], [290, 210, 2, "enum_LAST_READ"], [319, 195, 3, "enum_LAST_WRITE"], [321, 180, 2, "enum_LAST_READ"], [321, 40, 3, "enum_LAST_WRITE"], [332, 284, 3, "enum_LAST_WRITE"], [336, 142, 2, "enum_LAST_READ"], [336, 114, 2, "enum_LAST_READ"], [336, 91, 3, "enum_LAST_WRITE"], [336, 122, 3, "enum_LAST_WRITE"], [347, 277, 2, "enum_LAST_READ"], [347, 131, 3, "enum_LAST_WRITE"], [347, 104, 3, "enum_LAST_WRITE"], [351, 328, 3, "enum_LAST_WRITE"], [364, 345, 3, "enum_LAST_WRITE"], [55, 61, 4, "enum_COMPUTED_FROM"], [55, 57, 4, "enum_COMPUTED_FROM"], [64, 70, 4, "enum_COMPUTED_FROM"], [64, 66, 4, "enum_COMPUTED_FROM"], [64, 72, 4, "enum_COMPUTED_FROM"], [146, 152, 4, "enum_COMPUTED_FROM"], [146, 148, 4, "enum_COMPUTED_FROM"], [160, 162, 4, "enum_COMPUTED_FROM"], [160, 176, 4, "enum_COMPUTED_FROM"], [160, 180, 4, "enum_COMPUTED_FROM"], [160, 188, 4, "enum_COMPUTED_FROM"], [195, 197, 4, "enum_COMPUTED_FROM"], [208, 216, 4, "enum_COMPUTED_FROM"], [208, 218, 4, "enum_COMPUTED_FROM"], [208, 220, 4, "enum_COMPUTED_FROM"], [208, 210, 4, "enum_COMPUTED_FROM"], [223, 239, 4, "enum_COMPUTED_FROM"], [223, 234, 4, "enum_COMPUTED_FROM"], [223, 229, 4, "enum_COMPUTED_FROM"], [223, 225, 4, "enum_COMPUTED_FROM"], [244, 250, 4, "enum_COMPUTED_FROM"], [244, 246, 4, "enum_COMPUTED_FROM"], [253, 259, 4, "enum_COMPUTED_FROM"], [253, 255, 4, "enum_COMPUTED_FROM"], [266, 272, 4, "enum_COMPUTED_FROM"], [266, 268, 4, "enum_COMPUTED_FROM"], [275, 281, 4, "enum_COMPUTED_FROM"], [275, 277, 4, "enum_COMPUTED_FROM"], [284, 319, 4, "enum_COMPUTED_FROM"], [284, 321, 4, "enum_COMPUTED_FROM"], [284, 286, 4, "enum_COMPUTED_FROM"], [284, 290, 4, "enum_COMPUTED_FROM"], [328, 330, 4, "enum_COMPUTED_FROM"], [328, 332, 4, "enum_COMPUTED_FROM"], [328, 336, 4, "enum_COMPUTED_FROM"], [345, 351, 4, "enum_COMPUTED_FROM"], [345, 356, 4, "enum_COMPUTED_FROM"], [345, 347, 4, "enum_COMPUTED_FROM"], [91, 93, 4, "enum_COMPUTED_FROM"], [104, 114, 4, "enum_COMPUTED_FROM"], [104, 106, 4, "enum_COMPUTED_FROM"], [122, 128, 4, "enum_COMPUTED_FROM"], [122, 124, 4, "enum_COMPUTED_FROM"], [131, 142, 4, "enum_COMPUTED_FROM"], [131, 137, 4, "enum_COMPUTED_FROM"], [131, 133, 4, "enum_COMPUTED_FROM"]], "error_location": 286, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/servir-mekong/hydra-floods.git", "old_path": "hydrafloods/geeutils.py", "hash": "f7de9b4516deb7ac5055624fb9012596ac25374c", "code": "def globalOtsu(collection: ee.ImageCollection,target_date: str,region: ee.Geometry,\n               canny_threshold: int=7,    # threshold for canny edge detection\n               canny_sigma: float=1,        # sigma value for gaussian filter\n               canny_lt: int=7,           # lower threshold for canny detection\n               smoothing: int=100,        # amount of smoothing in meters\n               connected_pixels: int=200, # maximum size of the neighborhood in pixels\n               edge_length: int=50,       # minimum length of edges from canny detection\n               smooth_edges: int=100,\n               qualityBand: Optional[str]=None,\n               reductionScale: int=90,\n               initThresh: int=0,\n               seed: int=7):\n\n    tDate: ee.Date = ee.Date(target_date)\n    targetColl: ee.ImageCollection = collection.filterDate(tDate,tDate.advance(1,'day'))\n\n    if qualityBand == None:\n        histBand: ee.String = target.bandNames().get(0)\n        target: ee.Image = targetColl.mosaic()            .select(histBand)\n    else:\n        histBand: ee.String = ee.String(qualityBand)\n        target: Any = targetColl.qualityMosaic(qualityBand)            .select(histBand)\n\n    binary: ee.Image = target.gt(initThresh).rename('binary')\n\n    samps: ee.FeatureCollection = binary.stratifiedSample(numPoints=20,\n        classBand='binary',\n        region=region,\n        scale=reductionScale,\n        geometries=True,\n        seed=seed,\n        tileScale=8\n    )\n    sampleRegion: ee.Geometry = samps.geometry().buffer(2500)\n\n    canny: ee.Image = ee.Algorithms.CannyEdgeDetector(target,canny_threshold,canny_sigma)\n\n    connected: ee.Image = canny.mask(canny).lt(canny_lt).connectedPixelCount(connected_pixels, True)\n    edges: ee.Image = connected.gte(edge_length)\n\n    edgeBuffer: ee.Image = edges.focal_max(smooth_edges, 'square', 'meters');\n\n    imageEdge: ee.Image = target.mask(edges)\n    histogram_image: ee.Image = target.mask(edgeBuffer)\n\n    histogram: ee.Dictionary =  histogram_image.reduceRegion(ee.Reducer.histogram(255, 2)                                .combine('mean', None, True)                                .combine('variance', None,True),sampleRegion,reductionScale,bestEffort=True)\n\n    threshold: float = otsu_function(histogram.get(histBand.cat('_histogram')));\n\n    water: ee.Image = target.gt(threshold).clip(landShp.geometry())\n\n    return water\n", "rewrite": "ReplaceText(target='target' @(132,17)->(132,32))", "error_line": 47, "has_bug": true, "code_full": "from typing import Any, Optional\n\nimport ee\n\n\ndef otsu_function(histogram: ee.Dictionary) -> float:\n    return 0\n\nlandShp: Any = None\n\ndef globalOtsu(collection: ee.ImageCollection,target_date: str,region: ee.Geometry,\n               canny_threshold: int=7,    # threshold for canny edge detection\n               canny_sigma: float=1,        # sigma value for gaussian filter\n               canny_lt: int=7,           # lower threshold for canny detection\n               smoothing: int=100,        # amount of smoothing in meters\n               connected_pixels: int=200, # maximum size of the neighborhood in pixels\n               edge_length: int=50,       # minimum length of edges from canny detection\n               smooth_edges: int=100,\n               qualityBand: Optional[str]=None,\n               reductionScale: int=90,\n               initThresh: int=0,\n               seed: int=7):\n\n    tDate: ee.Date = ee.Date(target_date)\n    targetColl: ee.ImageCollection = collection.filterDate(tDate,tDate.advance(1,'day'))\n\n    if qualityBand == None:\n        histBand: ee.String = target.bandNames().get(0)\n        target: ee.Image = targetColl.mosaic()            .select(histBand)\n    else:\n        histBand: ee.String = ee.String(qualityBand)\n        target: Any = targetColl.qualityMosaic(qualityBand)            .select(histBand)\n\n    binary: ee.Image = target.gt(initThresh).rename('binary')\n\n    samps: ee.FeatureCollection = binary.stratifiedSample(numPoints=20,\n        classBand='binary',\n        region=region,\n        scale=reductionScale,\n        geometries=True,\n        seed=seed,\n        tileScale=8\n    )\n    sampleRegion: ee.Geometry = samps.geometry().buffer(2500)\n\n    canny: ee.Image = ee.Algorithms.CannyEdgeDetector(target,canny_threshold,canny_sigma)\n\n    connected: ee.Image = canny.mask(canny).lt(canny_lt).connectedPixelCount(connected_pixels, True)\n    edges: ee.Image = connected.gte(edge_length)\n\n    edgeBuffer: ee.Image = edges.focal_max(smooth_edges, 'square', 'meters');\n\n    imageEdge: ee.Image = target.mask(edges)\n    histogram_image: ee.Image = target.mask(edgeBuffer)\n\n    histogram: ee.Dictionary =  histogram_image.reduceRegion(ee.Reducer.histogram(255, 2)                                .combine('mean', None, True)                                .combine('variance', None,True),sampleRegion,reductionScale,bestEffort=True)\n\n    threshold: float = otsu_function(histogram.get(histBand.cat('_histogram')));\n\n    water: ee.Image = target.gt(threshold).clip(landShp.geometry())\n\n    return water\n", "error_location_char": [2009, 2024], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def add_region(", "self", ",", "spec", ",", "resp", ",", "back", "=", "None", ",", "corr", "=", "None", ",", "area", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "'Add OGIP objects to an OGIP region. This is useful when the OGIP files are already read in, but they\\n    need to be added to an OGIP region and converted to spo and res objects.'", "#NEWLINE#", "if", "isinstance", "(", "spec", ",", "Pha", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "spec", "=", "spec", "#NEWLINE#", "self", ".", "input_spec", "=", "True", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "message", ".", "error", "(", "'Input spectrum object is not of type Pha.'", ")", "#NEWLINE#", "return", "1", "#NEWLINE#", "#UNINDENT#", "if", "isinstance", "(", "resp", ",", "Rmf", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "resp", "=", "resp", "#NEWLINE#", "self", ".", "input_resp", "=", "True", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "message", ".", "error", "(", "'Input response object is not of type Rmf.'", ")", "#NEWLINE#", "return", "1", "#NEWLINE#", "#UNINDENT#", "if", "isinstance", "(", "back", ",", "Pha", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "back", "=", "back", "#NEWLINE#", "self", ".", "input_back", "=", "True", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "back", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "input_back", "=", "False", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "self", ".", "input_back", "=", "False", "#NEWLINE#", "message", ".", "error", "(", "'Input background object is not of type Pha.'", ")", "#NEWLINE#", "return", "1", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "if", "isinstance", "(", "corr", ",", "Pha", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "corr", "=", "corr", "#NEWLINE#", "self", ".", "input_corr", "=", "True", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "back", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "input_corr", "=", "False", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "self", ".", "input_corr", "=", "False", "#NEWLINE#", "message", ".", "error", "(", "'Input correction object is not of type Pha.'", ")", "#NEWLINE#", "return", "1", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "if", "isinstance", "(", "area", ",", "Arf", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "area", "=", "area", "#NEWLINE#", "self", ".", "input_area", "=", "True", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "area", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "input_area", "=", "False", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "self", ".", "input_area", "=", "False", "#NEWLINE#", "message", ".", "error", "(", "'Input effective area object is not of type Arf.'", ")", "#NEWLINE#", "return", "1", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "stat", "=", "self", ".", "ogip_to_spex", "(", ")", "#NEWLINE#", "if", "(", "stat", "!=", "0", ")", ":", "#NEWLINE#", "#INDENT#", "message", ".", "error", "(", "'OGIP to spex conversion failed.'", ")", "#NEWLINE#", "return", "1", "#NEWLINE#", "#UNINDENT#", "return", "0"], "edges": [[1, 9, 7, "enum_FIELD"], [22, 23, 7, "enum_FIELD"], [32, 29, 7, "enum_FIELD"], [70, 67, 7, "enum_FIELD"], [108, 105, 7, "enum_FIELD"], [173, 170, 7, "enum_FIELD"], [238, 235, 7, "enum_FIELD"], [295, 301, 7, "enum_FIELD"], [304, 307, 7, "enum_FIELD"], [324, 325, 7, "enum_FIELD"], [29, 26, 7, "enum_FIELD"], [34, 39, 7, "enum_FIELD"], [40, 45, 7, "enum_FIELD"], [51, 55, 7, "enum_FIELD"], [59, 60, 7, "enum_FIELD"], [67, 64, 7, "enum_FIELD"], [72, 77, 7, "enum_FIELD"], [78, 83, 7, "enum_FIELD"], [89, 93, 7, "enum_FIELD"], [97, 98, 7, "enum_FIELD"], [105, 102, 7, "enum_FIELD"], [110, 115, 7, "enum_FIELD"], [116, 121, 7, "enum_FIELD"], [134, 131, 7, "enum_FIELD"], [170, 167, 7, "enum_FIELD"], [175, 180, 7, "enum_FIELD"], [181, 186, 7, "enum_FIELD"], [199, 196, 7, "enum_FIELD"], [235, 232, 7, "enum_FIELD"], [240, 245, 7, "enum_FIELD"], [246, 251, 7, "enum_FIELD"], [264, 261, 7, "enum_FIELD"], [301, 299, 7, "enum_FIELD"], [307, 306, 7, "enum_FIELD"], [312, 316, 7, "enum_FIELD"], [320, 321, 7, "enum_FIELD"], [36, 35, 7, "enum_FIELD"], [42, 41, 7, "enum_FIELD"], [55, 53, 7, "enum_FIELD"], [74, 73, 7, "enum_FIELD"], [80, 79, 7, "enum_FIELD"], [93, 91, 7, "enum_FIELD"], [112, 111, 7, "enum_FIELD"], [118, 117, 7, "enum_FIELD"], [131, 130, 7, "enum_FIELD"], [136, 141, 7, "enum_FIELD"], [147, 152, 7, "enum_FIELD"], [153, 157, 7, "enum_FIELD"], [161, 162, 7, "enum_FIELD"], [177, 176, 7, "enum_FIELD"], [183, 182, 7, "enum_FIELD"], [196, 195, 7, "enum_FIELD"], [201, 206, 7, "enum_FIELD"], [212, 217, 7, "enum_FIELD"], [218, 222, 7, "enum_FIELD"], [226, 227, 7, "enum_FIELD"], [242, 241, 7, "enum_FIELD"], [248, 247, 7, "enum_FIELD"], [261, 260, 7, "enum_FIELD"], [266, 271, 7, "enum_FIELD"], [277, 282, 7, "enum_FIELD"], [283, 287, 7, "enum_FIELD"], [291, 292, 7, "enum_FIELD"], [299, 298, 7, "enum_FIELD"], [316, 314, 7, "enum_FIELD"], [53, 52, 7, "enum_FIELD"], [91, 90, 7, "enum_FIELD"], [138, 137, 7, "enum_FIELD"], [149, 148, 7, "enum_FIELD"], [157, 155, 7, "enum_FIELD"], [203, 202, 7, "enum_FIELD"], [214, 213, 7, "enum_FIELD"], [222, 220, 7, "enum_FIELD"], [268, 267, 7, "enum_FIELD"], [279, 278, 7, "enum_FIELD"], [287, 285, 7, "enum_FIELD"], [314, 313, 7, "enum_FIELD"], [155, 154, 7, "enum_FIELD"], [220, 219, 7, "enum_FIELD"], [285, 284, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [28, 4, 10, "enum_LAST_LEXICAL_USE"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 34, 9, "enum_NEXT_SYNTAX"], [35, 2, 10, "enum_LAST_LEXICAL_USE"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [39, 28, 10, "enum_LAST_LEXICAL_USE"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [41, 35, 10, "enum_LAST_LEXICAL_USE"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 63, 9, "enum_NEXT_SYNTAX"], [64, 26, 10, "enum_LAST_LEXICAL_USE"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [66, 6, 10, "enum_LAST_LEXICAL_USE"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 72, 9, "enum_NEXT_SYNTAX"], [73, 41, 10, "enum_LAST_LEXICAL_USE"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [77, 66, 10, "enum_LAST_LEXICAL_USE"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [79, 73, 10, "enum_LAST_LEXICAL_USE"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 89, 9, "enum_NEXT_SYNTAX"], [90, 52, 10, "enum_LAST_LEXICAL_USE"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 101, 9, "enum_NEXT_SYNTAX"], [102, 64, 10, "enum_LAST_LEXICAL_USE"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [104, 8, 10, "enum_LAST_LEXICAL_USE"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [106, 30, 10, "enum_LAST_LEXICAL_USE"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 110, 9, "enum_NEXT_SYNTAX"], [111, 79, 10, "enum_LAST_LEXICAL_USE"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [115, 104, 10, "enum_LAST_LEXICAL_USE"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [117, 111, 10, "enum_LAST_LEXICAL_USE"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [130, 115, 10, "enum_LAST_LEXICAL_USE"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 136, 9, "enum_NEXT_SYNTAX"], [137, 117, 10, "enum_LAST_LEXICAL_USE"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 147, 9, "enum_NEXT_SYNTAX"], [148, 137, 10, "enum_LAST_LEXICAL_USE"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [154, 90, 10, "enum_LAST_LEXICAL_USE"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 166, 9, "enum_NEXT_SYNTAX"], [167, 102, 10, "enum_LAST_LEXICAL_USE"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [169, 12, 10, "enum_LAST_LEXICAL_USE"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [171, 106, 10, "enum_LAST_LEXICAL_USE"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 175, 9, "enum_NEXT_SYNTAX"], [176, 148, 10, "enum_LAST_LEXICAL_USE"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [180, 169, 10, "enum_LAST_LEXICAL_USE"], [179, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [182, 176, 10, "enum_LAST_LEXICAL_USE"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 184, 9, "enum_NEXT_SYNTAX"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 189, 9, "enum_NEXT_SYNTAX"], [189, 190, 9, "enum_NEXT_SYNTAX"], [190, 193, 9, "enum_NEXT_SYNTAX"], [193, 194, 9, "enum_NEXT_SYNTAX"], [195, 130, 10, "enum_LAST_LEXICAL_USE"], [194, 195, 9, "enum_NEXT_SYNTAX"], [195, 196, 9, "enum_NEXT_SYNTAX"], [196, 197, 9, "enum_NEXT_SYNTAX"], [197, 198, 9, "enum_NEXT_SYNTAX"], [198, 199, 9, "enum_NEXT_SYNTAX"], [199, 201, 9, "enum_NEXT_SYNTAX"], [202, 182, 10, "enum_LAST_LEXICAL_USE"], [201, 202, 9, "enum_NEXT_SYNTAX"], [202, 203, 9, "enum_NEXT_SYNTAX"], [203, 204, 9, "enum_NEXT_SYNTAX"], [204, 205, 9, "enum_NEXT_SYNTAX"], [205, 206, 9, "enum_NEXT_SYNTAX"], [206, 209, 9, "enum_NEXT_SYNTAX"], [209, 210, 9, "enum_NEXT_SYNTAX"], [210, 212, 9, "enum_NEXT_SYNTAX"], [213, 202, 10, "enum_LAST_LEXICAL_USE"], [212, 213, 9, "enum_NEXT_SYNTAX"], [213, 214, 9, "enum_NEXT_SYNTAX"], [214, 215, 9, "enum_NEXT_SYNTAX"], [215, 216, 9, "enum_NEXT_SYNTAX"], [216, 217, 9, "enum_NEXT_SYNTAX"], [217, 218, 9, "enum_NEXT_SYNTAX"], [219, 154, 10, "enum_LAST_LEXICAL_USE"], [218, 219, 9, "enum_NEXT_SYNTAX"], [219, 220, 9, "enum_NEXT_SYNTAX"], [220, 221, 9, "enum_NEXT_SYNTAX"], [221, 222, 9, "enum_NEXT_SYNTAX"], [222, 223, 9, "enum_NEXT_SYNTAX"], [223, 224, 9, "enum_NEXT_SYNTAX"], [224, 226, 9, "enum_NEXT_SYNTAX"], [226, 227, 9, "enum_NEXT_SYNTAX"], [227, 231, 9, "enum_NEXT_SYNTAX"], [232, 167, 10, "enum_LAST_LEXICAL_USE"], [231, 232, 9, "enum_NEXT_SYNTAX"], [232, 233, 9, "enum_NEXT_SYNTAX"], [234, 16, 10, "enum_LAST_LEXICAL_USE"], [233, 234, 9, "enum_NEXT_SYNTAX"], [234, 235, 9, "enum_NEXT_SYNTAX"], [235, 236, 9, "enum_NEXT_SYNTAX"], [236, 237, 9, "enum_NEXT_SYNTAX"], [237, 238, 9, "enum_NEXT_SYNTAX"], [238, 240, 9, "enum_NEXT_SYNTAX"], [241, 213, 10, "enum_LAST_LEXICAL_USE"], [240, 241, 9, "enum_NEXT_SYNTAX"], [241, 242, 9, "enum_NEXT_SYNTAX"], [242, 243, 9, "enum_NEXT_SYNTAX"], [243, 244, 9, "enum_NEXT_SYNTAX"], [245, 234, 10, "enum_LAST_LEXICAL_USE"], [244, 245, 9, "enum_NEXT_SYNTAX"], [245, 246, 9, "enum_NEXT_SYNTAX"], [247, 241, 10, "enum_LAST_LEXICAL_USE"], [246, 247, 9, "enum_NEXT_SYNTAX"], [247, 248, 9, "enum_NEXT_SYNTAX"], [248, 249, 9, "enum_NEXT_SYNTAX"], [249, 250, 9, "enum_NEXT_SYNTAX"], [250, 251, 9, "enum_NEXT_SYNTAX"], [251, 254, 9, "enum_NEXT_SYNTAX"], [254, 255, 9, "enum_NEXT_SYNTAX"], [255, 258, 9, "enum_NEXT_SYNTAX"], [258, 259, 9, "enum_NEXT_SYNTAX"], [260, 245, 10, "enum_LAST_LEXICAL_USE"], [259, 260, 9, "enum_NEXT_SYNTAX"], [260, 261, 9, "enum_NEXT_SYNTAX"], [261, 262, 9, "enum_NEXT_SYNTAX"], [262, 263, 9, "enum_NEXT_SYNTAX"], [263, 264, 9, "enum_NEXT_SYNTAX"], [264, 266, 9, "enum_NEXT_SYNTAX"], [267, 247, 10, "enum_LAST_LEXICAL_USE"], [266, 267, 9, "enum_NEXT_SYNTAX"], [267, 268, 9, "enum_NEXT_SYNTAX"], [268, 269, 9, "enum_NEXT_SYNTAX"], [269, 270, 9, "enum_NEXT_SYNTAX"], [270, 271, 9, "enum_NEXT_SYNTAX"], [271, 274, 9, "enum_NEXT_SYNTAX"], [274, 275, 9, "enum_NEXT_SYNTAX"], [275, 277, 9, "enum_NEXT_SYNTAX"], [278, 267, 10, "enum_LAST_LEXICAL_USE"], [277, 278, 9, "enum_NEXT_SYNTAX"], [278, 279, 9, "enum_NEXT_SYNTAX"], [279, 280, 9, "enum_NEXT_SYNTAX"], [280, 281, 9, "enum_NEXT_SYNTAX"], [281, 282, 9, "enum_NEXT_SYNTAX"], [282, 283, 9, "enum_NEXT_SYNTAX"], [284, 219, 10, "enum_LAST_LEXICAL_USE"], [283, 284, 9, "enum_NEXT_SYNTAX"], [284, 285, 9, "enum_NEXT_SYNTAX"], [285, 286, 9, "enum_NEXT_SYNTAX"], [286, 287, 9, "enum_NEXT_SYNTAX"], [287, 288, 9, "enum_NEXT_SYNTAX"], [288, 289, 9, "enum_NEXT_SYNTAX"], [289, 291, 9, "enum_NEXT_SYNTAX"], [291, 292, 9, "enum_NEXT_SYNTAX"], [292, 295, 9, "enum_NEXT_SYNTAX"], [295, 296, 9, "enum_NEXT_SYNTAX"], [296, 297, 9, "enum_NEXT_SYNTAX"], [298, 278, 10, "enum_LAST_LEXICAL_USE"], [297, 298, 9, "enum_NEXT_SYNTAX"], [298, 299, 9, "enum_NEXT_SYNTAX"], [299, 300, 9, "enum_NEXT_SYNTAX"], [300, 301, 9, "enum_NEXT_SYNTAX"], [301, 302, 9, "enum_NEXT_SYNTAX"], [302, 304, 9, "enum_NEXT_SYNTAX"], [304, 305, 9, "enum_NEXT_SYNTAX"], [306, 296, 10, "enum_LAST_LEXICAL_USE"], [305, 306, 9, "enum_NEXT_SYNTAX"], [306, 307, 9, "enum_NEXT_SYNTAX"], [307, 308, 9, "enum_NEXT_SYNTAX"], [308, 309, 9, "enum_NEXT_SYNTAX"], [309, 310, 9, "enum_NEXT_SYNTAX"], [310, 312, 9, "enum_NEXT_SYNTAX"], [313, 284, 10, "enum_LAST_LEXICAL_USE"], [312, 313, 9, "enum_NEXT_SYNTAX"], [313, 314, 9, "enum_NEXT_SYNTAX"], [314, 315, 9, "enum_NEXT_SYNTAX"], [315, 316, 9, "enum_NEXT_SYNTAX"], [316, 317, 9, "enum_NEXT_SYNTAX"], [317, 318, 9, "enum_NEXT_SYNTAX"], [318, 320, 9, "enum_NEXT_SYNTAX"], [320, 321, 9, "enum_NEXT_SYNTAX"], [321, 324, 9, "enum_NEXT_SYNTAX"], [324, 325, 9, "enum_NEXT_SYNTAX"], [10, 14, 1, "enum_CFG_NEXT"], [14, 18, 1, "enum_CFG_NEXT"], [18, 1, 1, "enum_CFG_NEXT"], [9, 22, 1, "enum_CFG_NEXT"], [22, 29, 1, "enum_CFG_NEXT"], [29, 34, 1, "enum_CFG_NEXT"], [29, 51, 1, "enum_CFG_NEXT"], [34, 40, 1, "enum_CFG_NEXT"], [40, 67, 1, "enum_CFG_NEXT"], [51, 59, 1, "enum_CFG_NEXT"], [67, 72, 1, "enum_CFG_NEXT"], [67, 89, 1, "enum_CFG_NEXT"], [72, 78, 1, "enum_CFG_NEXT"], [78, 105, 1, "enum_CFG_NEXT"], [89, 97, 1, "enum_CFG_NEXT"], [105, 110, 1, "enum_CFG_NEXT"], [105, 131, 1, "enum_CFG_NEXT"], [110, 116, 1, "enum_CFG_NEXT"], [116, 170, 1, "enum_CFG_NEXT"], [131, 136, 1, "enum_CFG_NEXT"], [131, 147, 1, "enum_CFG_NEXT"], [136, 170, 1, "enum_CFG_NEXT"], [147, 153, 1, "enum_CFG_NEXT"], [153, 161, 1, "enum_CFG_NEXT"], [170, 175, 1, "enum_CFG_NEXT"], [170, 196, 1, "enum_CFG_NEXT"], [175, 181, 1, "enum_CFG_NEXT"], [181, 235, 1, "enum_CFG_NEXT"], [196, 212, 1, "enum_CFG_NEXT"], [196, 201, 1, "enum_CFG_NEXT"], [201, 235, 1, "enum_CFG_NEXT"], [212, 218, 1, "enum_CFG_NEXT"], [218, 226, 1, "enum_CFG_NEXT"], [235, 240, 1, "enum_CFG_NEXT"], [235, 261, 1, "enum_CFG_NEXT"], [240, 246, 1, "enum_CFG_NEXT"], [246, 295, 1, "enum_CFG_NEXT"], [261, 266, 1, "enum_CFG_NEXT"], [261, 277, 1, "enum_CFG_NEXT"], [266, 295, 1, "enum_CFG_NEXT"], [277, 283, 1, "enum_CFG_NEXT"], [283, 291, 1, "enum_CFG_NEXT"], [295, 307, 1, "enum_CFG_NEXT"], [307, 324, 1, "enum_CFG_NEXT"], [307, 312, 1, "enum_CFG_NEXT"], [312, 320, 1, "enum_CFG_NEXT"], [28, 4, 3, "enum_LAST_WRITE"], [39, 28, 2, "enum_LAST_READ"], [39, 4, 3, "enum_LAST_WRITE"], [35, 2, 3, "enum_LAST_WRITE"], [41, 35, 2, "enum_LAST_READ"], [41, 2, 3, "enum_LAST_WRITE"], [64, 26, 2, "enum_LAST_READ"], [66, 6, 3, "enum_LAST_WRITE"], [77, 66, 2, "enum_LAST_READ"], [77, 6, 3, "enum_LAST_WRITE"], [73, 41, 2, "enum_LAST_READ"], [73, 2, 3, "enum_LAST_WRITE"], [79, 73, 2, "enum_LAST_READ"], [79, 2, 3, "enum_LAST_WRITE"], [102, 64, 2, "enum_LAST_READ"], [104, 8, 3, "enum_LAST_WRITE"], [106, 30, 2, "enum_LAST_READ"], [115, 104, 2, "enum_LAST_READ"], [115, 8, 3, "enum_LAST_WRITE"], [111, 79, 2, "enum_LAST_READ"], [111, 2, 3, "enum_LAST_WRITE"], [117, 111, 2, "enum_LAST_READ"], [117, 2, 3, "enum_LAST_WRITE"], [130, 104, 2, "enum_LAST_READ"], [130, 8, 3, "enum_LAST_WRITE"], [137, 79, 2, "enum_LAST_READ"], [137, 2, 3, "enum_LAST_WRITE"], [148, 79, 2, "enum_LAST_READ"], [148, 2, 3, "enum_LAST_WRITE"], [167, 102, 2, "enum_LAST_READ"], [169, 12, 3, "enum_LAST_WRITE"], [171, 106, 2, "enum_LAST_READ"], [180, 169, 2, "enum_LAST_READ"], [180, 12, 3, "enum_LAST_WRITE"], [176, 117, 2, "enum_LAST_READ"], [176, 137, 2, "enum_LAST_READ"], [176, 2, 3, "enum_LAST_WRITE"], [182, 176, 2, "enum_LAST_READ"], [182, 2, 3, "enum_LAST_WRITE"], [195, 130, 2, "enum_LAST_READ"], [195, 115, 2, "enum_LAST_READ"], [195, 8, 3, "enum_LAST_WRITE"], [202, 117, 2, "enum_LAST_READ"], [202, 137, 2, "enum_LAST_READ"], [202, 2, 3, "enum_LAST_WRITE"], [213, 117, 2, "enum_LAST_READ"], [213, 137, 2, "enum_LAST_READ"], [213, 2, 3, "enum_LAST_WRITE"], [232, 167, 2, "enum_LAST_READ"], [234, 16, 3, "enum_LAST_WRITE"], [245, 234, 2, "enum_LAST_READ"], [245, 16, 3, "enum_LAST_WRITE"], [241, 182, 2, "enum_LAST_READ"], [241, 202, 2, "enum_LAST_READ"], [241, 2, 3, "enum_LAST_WRITE"], [247, 241, 2, "enum_LAST_READ"], [247, 2, 3, "enum_LAST_WRITE"], [260, 234, 2, "enum_LAST_READ"], [260, 16, 3, "enum_LAST_WRITE"], [267, 182, 2, "enum_LAST_READ"], [267, 202, 2, "enum_LAST_READ"], [267, 2, 3, "enum_LAST_WRITE"], [278, 182, 2, "enum_LAST_READ"], [278, 202, 2, "enum_LAST_READ"], [278, 2, 3, "enum_LAST_WRITE"], [298, 267, 2, "enum_LAST_READ"], [298, 247, 2, "enum_LAST_READ"], [298, 2, 3, "enum_LAST_WRITE"], [306, 296, 3, "enum_LAST_WRITE"], [296, 298, 4, "enum_COMPUTED_FROM"], [36, 39, 4, "enum_COMPUTED_FROM"], [74, 77, 4, "enum_COMPUTED_FROM"], [112, 115, 4, "enum_COMPUTED_FROM"], [177, 180, 4, "enum_COMPUTED_FROM"], [242, 245, 4, "enum_COMPUTED_FROM"]], "error_location": 195, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/spex-xray/pyspextools.git", "old_path": "pyspextools/io/ogip.py", "hash": "c68beb5206e3525010e0265f2c18f8f5fc4bebc3", "code": "def add_region(self,spec: Optional[Pha],resp: Optional[Rmf],back: Optional[Pha]=None,corr: Optional[Pha]=None,area: Optional[Arf]=None):\n    \"\"\"Add OGIP objects to an OGIP region. This is useful when the OGIP files are already read in, but they\n    need to be added to an OGIP region and converted to spo and res objects.\"\"\"\n\n    # Load Pha object\n    if isinstance(spec, Pha):\n        self.spec = spec\n        self.input_spec = True\n    else:\n        message.error(\"Input spectrum object is not of type Pha.\")\n        return 1\n\n    # Load Rmf object\n    if isinstance(resp, Rmf):\n        self.resp = resp\n        self.input_resp = True\n    else:\n        message.error(\"Input response object is not of type Rmf.\")\n        return 1\n\n    # Load background object (if available)\n    if isinstance(back, Pha):\n        self.back = back\n        self.input_back = True\n    elif back is None:\n        self.input_back = False\n    else:\n        self.input_back = False\n        message.error(\"Input background object is not of type Pha.\")\n        return 1\n\n    # Load correction spectrum (if available)\n    if isinstance(corr, Pha):\n        self.corr = corr\n        self.input_corr = True\n    elif back is None:\n        self.input_corr = False\n    else:\n        self.input_corr = False\n        message.error(\"Input correction object is not of type Pha.\")\n        return 1\n\n    # Load effective area (if available)\n    if isinstance(area, Arf):\n        self.area = area\n        self.input_area = True\n    elif area is None:\n        self.input_area = False\n    else:\n        self.input_area = False\n        message.error(\"Input effective area object is not of type Arf.\")\n        return 1\n\n    # Do the OGIP to SPEX conversion\n    stat: int = self.ogip_to_spex()\n    if stat != 0:\n        message.error(\"OGIP to spex conversion failed.\")\n        return 1\n\n    return 0\n", "rewrite": "ReplaceText(target='corr' @(134,13)->(134,17))", "error_line": 35, "has_bug": true, "code_full": "from typing import Any, Optional\n\nmessage: Any = None\n\nclass Pha:\n    pass\n\nclass Rmf:\n    pass\n\nclass Arf:\n    pass\n\nclass Class:\n    spec: Optional[Pha] = None\n    resp: Optional[Rmf] = None\n    back: Optional[Pha] = None\n    corr: Optional[Pha] = None\n    area: Optional[Arf] = None\n    input_spec: bool = False\n    input_resp: bool = False\n    input_back: bool = False\n    input_corr: bool = False\n    input_area: bool = False\n\n    def ogip_to_spex(self) -> int:\n        return 0\n\n    def add_region(self,spec: Optional[Pha],resp: Optional[Rmf],back: Optional[Pha]=None,corr: Optional[Pha]=None,area: Optional[Arf]=None):\n        \"\"\"Add OGIP objects to an OGIP region. This is useful when the OGIP files are already read in, but they\n        need to be added to an OGIP region and converted to spo and res objects.\"\"\"\n\n        # Load Pha object\n        if isinstance(spec, Pha):\n            self.spec = spec\n            self.input_spec = True\n        else:\n            message.error(\"Input spectrum object is not of type Pha.\")\n            return 1\n\n        # Load Rmf object\n        if isinstance(resp, Rmf):\n            self.resp = resp\n            self.input_resp = True\n        else:\n            message.error(\"Input response object is not of type Rmf.\")\n            return 1\n\n        # Load background object (if available)\n        if isinstance(back, Pha):\n            self.back = back\n            self.input_back = True\n        elif back is None:\n            self.input_back = False\n        else:\n            self.input_back = False\n            message.error(\"Input background object is not of type Pha.\")\n            return 1\n\n        # Load correction spectrum (if available)\n        if isinstance(corr, Pha):\n            self.corr = corr\n            self.input_corr = True\n        elif back is None:\n            self.input_corr = False\n        else:\n            self.input_corr = False\n            message.error(\"Input correction object is not of type Pha.\")\n            return 1\n\n        # Load effective area (if available)\n        if isinstance(area, Arf):\n            self.area = area\n            self.input_area = True\n        elif area is None:\n            self.input_area = False\n        else:\n            self.input_area = False\n            message.error(\"Input effective area object is not of type Arf.\")\n            return 1\n\n        # Do the OGIP to SPEX conversion\n        stat: int = self.ogip_to_spex()\n        if stat != 0:\n            message.error(\"OGIP to spex conversion failed.\")\n            return 1\n\n        return 0\n", "error_location_char": [1187, 1191], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def add_subwindow(", "self", ",", "aclass", ",", "flist", ")", ":", "#NEWLINE#", "#INDENT#", "'Add a subwindow, register data set and add to menu'", "#NEWLINE#", "sub", "=", "PyJibeQMdiSubWindow", "(", ")", "#NEWLINE#", "inst", "=", "aclass", "(", "sub", ")", "#NEWLINE#", "sub", ".", "setWidget", "(", "inst", ")", "#NEWLINE#", "inst", ".", "add_files", "(", "flist", ")", "#NEWLINE#", "self", ".", "mdiArea", ".", "addSubWindow", "(", "sub", ")", "#NEWLINE#", "sub", ".", "show", "(", ")", "#NEWLINE#", "self", ".", "subwindows", ".", "append", "(", "sub", ")", "#NEWLINE#", "if", "hasattr", "(", "inst", ",", "'get_export_choices'", ")", ":", "#NEWLINE#", "#INDENT#", "choices", "=", "inst", ".", "get_export_choices", "(", ")", "#NEWLINE#", "menobj", "=", "self", ".", "menuExport", ".", "addMenu", "(", "inst", ".", "windowTitle", "(", ")", ")", "#NEWLINE#", "for", "choice", "in", "choices", ":", "#NEWLINE#", "#INDENT#", "action", "=", "menobj", ".", "addAction", "(", "choice", "[", "0", "]", ")", "#NEWLINE#", "action", ".", "triggered", ".", "connect", "(", "getattr", "(", "inst", ",", "choice", "[", "1", "]", ")", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [10, 11, 7, "enum_FIELD"], [12, 16, 7, "enum_FIELD"], [18, 22, 7, "enum_FIELD"], [25, 29, 7, "enum_FIELD"], [32, 36, 7, "enum_FIELD"], [39, 45, 7, "enum_FIELD"], [48, 52, 7, "enum_FIELD"], [54, 60, 7, "enum_FIELD"], [64, 68, 7, "enum_FIELD"], [16, 15, 7, "enum_FIELD"], [22, 21, 7, "enum_FIELD"], [29, 27, 7, "enum_FIELD"], [36, 34, 7, "enum_FIELD"], [45, 43, 7, "enum_FIELD"], [52, 50, 7, "enum_FIELD"], [60, 58, 7, "enum_FIELD"], [68, 65, 7, "enum_FIELD"], [73, 79, 7, "enum_FIELD"], [81, 89, 7, "enum_FIELD"], [99, 98, 7, "enum_FIELD"], [99, 100, 7, "enum_FIELD"], [27, 26, 7, "enum_FIELD"], [34, 33, 7, "enum_FIELD"], [43, 41, 7, "enum_FIELD"], [50, 49, 7, "enum_FIELD"], [58, 56, 7, "enum_FIELD"], [79, 77, 7, "enum_FIELD"], [89, 87, 7, "enum_FIELD"], [103, 109, 7, "enum_FIELD"], [115, 121, 7, "enum_FIELD"], [41, 40, 7, "enum_FIELD"], [56, 55, 7, "enum_FIELD"], [77, 76, 7, "enum_FIELD"], [87, 85, 7, "enum_FIELD"], [93, 91, 7, "enum_FIELD"], [109, 107, 7, "enum_FIELD"], [121, 119, 7, "enum_FIELD"], [85, 84, 7, "enum_FIELD"], [91, 90, 7, "enum_FIELD"], [107, 106, 7, "enum_FIELD"], [111, 110, 7, "enum_FIELD"], [111, 112, 7, "enum_FIELD"], [119, 117, 7, "enum_FIELD"], [125, 122, 7, "enum_FIELD"], [117, 116, 7, "enum_FIELD"], [127, 126, 7, "enum_FIELD"], [127, 128, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [21, 4, 10, "enum_LAST_LEXICAL_USE"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [23, 13, 10, "enum_LAST_LEXICAL_USE"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [26, 23, 10, "enum_LAST_LEXICAL_USE"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [30, 19, 10, "enum_LAST_LEXICAL_USE"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [33, 30, 10, "enum_LAST_LEXICAL_USE"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [37, 6, 10, "enum_LAST_LEXICAL_USE"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [40, 2, 10, "enum_LAST_LEXICAL_USE"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [46, 26, 10, "enum_LAST_LEXICAL_USE"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [49, 46, 10, "enum_LAST_LEXICAL_USE"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [55, 40, 10, "enum_LAST_LEXICAL_USE"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [61, 49, 10, "enum_LAST_LEXICAL_USE"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [67, 33, 10, "enum_LAST_LEXICAL_USE"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [76, 67, 10, "enum_LAST_LEXICAL_USE"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [84, 55, 10, "enum_LAST_LEXICAL_USE"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [90, 76, 10, "enum_LAST_LEXICAL_USE"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [100, 74, 10, "enum_LAST_LEXICAL_USE"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [106, 82, 10, "enum_LAST_LEXICAL_USE"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [110, 98, 10, "enum_LAST_LEXICAL_USE"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [116, 104, 10, "enum_LAST_LEXICAL_USE"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [124, 90, 10, "enum_LAST_LEXICAL_USE"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [126, 110, 10, "enum_LAST_LEXICAL_USE"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [3, 10, 1, "enum_CFG_NEXT"], [10, 12, 1, "enum_CFG_NEXT"], [12, 18, 1, "enum_CFG_NEXT"], [18, 25, 1, "enum_CFG_NEXT"], [25, 32, 1, "enum_CFG_NEXT"], [32, 39, 1, "enum_CFG_NEXT"], [39, 48, 1, "enum_CFG_NEXT"], [48, 54, 1, "enum_CFG_NEXT"], [54, 68, 1, "enum_CFG_NEXT"], [68, 73, 1, "enum_CFG_NEXT"], [73, 81, 1, "enum_CFG_NEXT"], [81, 100, 1, "enum_CFG_NEXT"], [100, 98, 1, "enum_CFG_NEXT"], [98, 103, 1, "enum_CFG_NEXT"], [103, 115, 1, "enum_CFG_NEXT"], [115, 98, 1, "enum_CFG_NEXT"], [21, 4, 3, "enum_LAST_WRITE"], [23, 13, 3, "enum_LAST_WRITE"], [26, 23, 2, "enum_LAST_READ"], [26, 13, 3, "enum_LAST_WRITE"], [30, 19, 3, "enum_LAST_WRITE"], [33, 30, 2, "enum_LAST_READ"], [33, 19, 3, "enum_LAST_WRITE"], [37, 6, 3, "enum_LAST_WRITE"], [40, 2, 3, "enum_LAST_WRITE"], [46, 26, 2, "enum_LAST_READ"], [46, 13, 3, "enum_LAST_WRITE"], [49, 46, 2, "enum_LAST_READ"], [49, 13, 3, "enum_LAST_WRITE"], [55, 40, 2, "enum_LAST_READ"], [55, 2, 3, "enum_LAST_WRITE"], [61, 49, 2, "enum_LAST_READ"], [61, 13, 3, "enum_LAST_WRITE"], [67, 33, 2, "enum_LAST_READ"], [67, 19, 3, "enum_LAST_WRITE"], [76, 67, 2, "enum_LAST_READ"], [76, 19, 3, "enum_LAST_WRITE"], [84, 55, 2, "enum_LAST_READ"], [84, 2, 3, "enum_LAST_WRITE"], [90, 76, 2, "enum_LAST_READ"], [90, 19, 3, "enum_LAST_WRITE"], [100, 74, 3, "enum_LAST_WRITE"], [98, 126, 2, "enum_LAST_READ"], [98, 98, 3, "enum_LAST_WRITE"], [106, 106, 2, "enum_LAST_READ"], [106, 82, 3, "enum_LAST_WRITE"], [110, 126, 2, "enum_LAST_READ"], [110, 98, 3, "enum_LAST_WRITE"], [104, 116, 2, "enum_LAST_READ"], [104, 104, 3, "enum_LAST_WRITE"], [116, 116, 2, "enum_LAST_READ"], [116, 104, 3, "enum_LAST_WRITE"], [122, 122, 2, "enum_LAST_READ"], [124, 90, 2, "enum_LAST_READ"], [124, 124, 2, "enum_LAST_READ"], [124, 19, 3, "enum_LAST_WRITE"], [126, 110, 2, "enum_LAST_READ"], [126, 98, 3, "enum_LAST_WRITE"], [13, 15, 4, "enum_COMPUTED_FROM"], [19, 21, 4, "enum_COMPUTED_FROM"], [19, 23, 4, "enum_COMPUTED_FROM"], [74, 76, 4, "enum_COMPUTED_FROM"], [82, 84, 4, "enum_COMPUTED_FROM"], [82, 90, 4, "enum_COMPUTED_FROM"], [104, 106, 4, "enum_COMPUTED_FROM"], [104, 110, 4, "enum_COMPUTED_FROM"]], "error_location": 90, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/AFM-analysis/PyJibe.git", "old_path": "pyjibe/head/main.py", "hash": "9946f6261a7ea6bbf7309e077788cafd3f6ba7e6", "code": "def add_subwindow(self, aclass: type[UiForceDistance], flist: list[str]):\n    \"\"\"Add a subwindow, register data set and add to menu\"\"\"\n    sub: PyJibeQMdiSubWindow = PyJibeQMdiSubWindow()\n    inst: UiForceDistance = aclass(sub)\n    sub.setWidget(inst)\n    inst.add_files(flist)\n    self.mdiArea.addSubWindow(sub)\n    sub.show()\n    self.subwindows.append(sub)\n    # Add export choices\n    if hasattr(inst, \"get_export_choices\"):\n        choices: List[Tuple] = inst.get_export_choices()\n        menobj: Any = self.menuExport.addMenu(inst.windowTitle())\n        for choice in choices:\n            action: Any = menobj.addAction(choice[0])\n            action.triggered.connect(getattr(inst, choice[1]))\n", "rewrite": "ReplaceText(target='sub' @(60,45)->(60,49))", "error_line": 12, "has_bug": true, "code_full": "from typing import Any, List, Tuple\n\n\nclass PyJibeQMdiSubWindow:\n    def setWidget(self, widget: Any):\n        pass\n\n    def show(self):\n        pass\n\n    def windowTitle(self) -> Any:\n        pass\n\n\nclass UiForceDistance:\n    def __init__(self, sub: PyJibeQMdiSubWindow):\n        pass\n\n    def add_files(self, flist: Any):\n        pass\n\n    def get_export_choices(self) -> Any:\n        pass\n\ndef add_subwindow(self, aclass: type[UiForceDistance], flist: list[str]):\n    \"\"\"Add a subwindow, register data set and add to menu\"\"\"\n    sub: PyJibeQMdiSubWindow = PyJibeQMdiSubWindow()\n    inst: UiForceDistance = aclass(sub)\n    sub.setWidget(inst)\n    inst.add_files(flist)\n    self.mdiArea.addSubWindow(sub)\n    sub.show()\n    self.subwindows.append(sub)\n    # Add export choices\n    if hasattr(inst, \"get_export_choices\"):\n        choices: List[Tuple] = inst.get_export_choices()\n        menobj: Any = self.menuExport.addMenu(inst.windowTitle())\n        for choice in choices:\n            action: Any = menobj.addAction(choice[0])\n            action.triggered.connect(getattr(inst, choice[1]))\n", "error_location_char": [532, 536], "type_checked_pytype": false, "type_error_label": "attribute-error", "type_checked_mypy": false}
{"source_tokens": ["#NEWLINE#", "def cjsx(", "filename", ",", "data", ")", ":", "#NEWLINE#", "#INDENT#", "bare", "=", "cjsx", ".", "settings", ".", "get", "(", "'bare'", ")", "#NEWLINE#", "executable", "=", "cjsx", ".", "settings", ".", "get", "(", "'executable'", ")", "#NEWLINE#", "command", "=", "(", "'%s -c -s'", "%", "(", "executable", "or", "'cjsx'", ")", ")", "#NEWLINE#", "if", "bare", ":", "#NEWLINE#", "#INDENT#", "command", "=", "' '", ".", "join", "(", "(", "executable", ",", "'-b'", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "runner", "(", "command", ",", "filename", ",", "data", ",", "'.js'", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [8, 16, 7, "enum_FIELD"], [19, 27, 7, "enum_FIELD"], [30, 35, 7, "enum_FIELD"], [43, 44, 7, "enum_FIELD"], [62, 68, 7, "enum_FIELD"], [16, 14, 7, "enum_FIELD"], [27, 25, 7, "enum_FIELD"], [35, 34, 7, "enum_FIELD"], [35, 38, 7, "enum_FIELD"], [47, 53, 7, "enum_FIELD"], [68, 63, 7, "enum_FIELD"], [14, 12, 7, "enum_FIELD"], [25, 23, 7, "enum_FIELD"], [53, 51, 7, "enum_FIELD"], [12, 11, 7, "enum_FIELD"], [23, 22, 7, "enum_FIELD"], [51, 50, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [22, 11, 10, "enum_LAST_LEXICAL_USE"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [37, 20, 10, "enum_LAST_LEXICAL_USE"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 43, 9, "enum_NEXT_SYNTAX"], [44, 9, 10, "enum_LAST_LEXICAL_USE"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 47, 9, "enum_NEXT_SYNTAX"], [48, 31, 10, "enum_LAST_LEXICAL_USE"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [55, 37, 10, "enum_LAST_LEXICAL_USE"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [65, 48, 10, "enum_LAST_LEXICAL_USE"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [67, 2, 10, "enum_LAST_LEXICAL_USE"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [69, 4, 10, "enum_LAST_LEXICAL_USE"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [3, 8, 1, "enum_CFG_NEXT"], [8, 19, 1, "enum_CFG_NEXT"], [19, 30, 1, "enum_CFG_NEXT"], [30, 44, 1, "enum_CFG_NEXT"], [44, 47, 1, "enum_CFG_NEXT"], [44, 62, 1, "enum_CFG_NEXT"], [47, 62, 1, "enum_CFG_NEXT"], [22, 11, 2, "enum_LAST_READ"], [37, 20, 3, "enum_LAST_WRITE"], [44, 9, 3, "enum_LAST_WRITE"], [55, 37, 2, "enum_LAST_READ"], [55, 20, 3, "enum_LAST_WRITE"], [48, 31, 3, "enum_LAST_WRITE"], [65, 31, 3, "enum_LAST_WRITE"], [65, 48, 3, "enum_LAST_WRITE"], [67, 2, 3, "enum_LAST_WRITE"], [69, 4, 3, "enum_LAST_WRITE"], [9, 11, 4, "enum_COMPUTED_FROM"], [20, 22, 4, "enum_COMPUTED_FROM"], [31, 37, 4, "enum_COMPUTED_FROM"], [48, 55, 4, "enum_COMPUTED_FROM"]], "error_location": 55, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/rolurq/flask-gulp.git", "old_path": "flask_static/extensions.py", "hash": "615013477dcfcf53b64e5cba0858f3b01e66b8fb", "code": "def cjsx(filename: str, data: str) -> Any:\n    bare: Optional[bool] = cjsx.settings.get('bare')\n    executable: Optional[str] = cjsx.settings.get('executable')\n\n    command: str = \"%s -c -s\" % (executable or 'cjsx')\n    if bare:\n        command = ' '.join((executable, '-b'))\n\n    return runner(command, filename, data, '.js')\n", "rewrite": "ReplaceText(target='command' @(64,28)->(64,38))", "error_line": 6, "has_bug": true, "code_full": "from functools import wraps\nfrom typing import Any, Optional\n\n\ndef runner(command: str, filename: str, data: str, extension: str) -> Any:\n    pass\n\ndef cjsx(filename: str, data: str) -> Any:\n    bare: Optional[bool] = cjsx.settings.get('bare')\n    executable: Optional[str] = cjsx.settings.get('executable')\n\n    command: str = \"%s -c -s\" % (executable or 'cjsx')\n    if bare:\n        command = ' '.join((executable, '-b'))\n\n    return runner(command, filename, data, '.js')\n", "error_location_char": [257, 267], "type_checked_pytype": true, "type_error_label": "arg-type", "type_checked_mypy": false}
{"source_tokens": ["#NEWLINE#", "def put(", "self", ",", "document", ",", "upsert", "=", "False", ",", "replace", "=", "False", ")", ":", "#NEWLINE#", "#INDENT#", "changeset", "=", "document", ".", "get_changeset", "(", "(", "not", "replace", ")", ")", "#NEWLINE#", "if", "replace", ":", "#NEWLINE#", "#INDENT#", "update_instruction", "=", "changeset", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "del", "changeset", "[", "'_id'", "]", "#NEWLINE#", "update_instruction", "=", "{", "'$set'", ":", "changeset", "}", "#NEWLINE#", "#UNINDENT#", "self", ".", "api", ".", "update", "(", "{", "'_id'", ":", "document", ".", "id", "}", ",", "changeset", ",", "upsert", "=", "upsert", ")", "#NEWLINE#", "document", ".", "reset_bits", "(", ")", "#NEWLINE#", "return", "document"], "edges": [[1, 7, 7, "enum_FIELD"], [16, 22, 7, "enum_FIELD"], [31, 30, 7, "enum_FIELD"], [57, 71, 7, "enum_FIELD"], [78, 82, 7, "enum_FIELD"], [85, 86, 7, "enum_FIELD"], [22, 20, 7, "enum_FIELD"], [33, 36, 7, "enum_FIELD"], [48, 53, 7, "enum_FIELD"], [71, 61, 7, "enum_FIELD"], [82, 80, 7, "enum_FIELD"], [20, 19, 7, "enum_FIELD"], [24, 25, 7, "enum_FIELD"], [45, 44, 7, "enum_FIELD"], [45, 46, 7, "enum_FIELD"], [61, 59, 7, "enum_FIELD"], [74, 76, 7, "enum_FIELD"], [80, 79, 7, "enum_FIELD"], [59, 58, 7, "enum_FIELD"], [68, 67, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [19, 4, 10, "enum_LAST_LEXICAL_USE"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [25, 10, 10, "enum_LAST_LEXICAL_USE"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 29, 9, "enum_NEXT_SYNTAX"], [30, 25, 10, "enum_LAST_LEXICAL_USE"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [36, 17, 10, "enum_LAST_LEXICAL_USE"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 43, 9, "enum_NEXT_SYNTAX"], [44, 36, 10, "enum_LAST_LEXICAL_USE"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [49, 34, 10, "enum_LAST_LEXICAL_USE"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [54, 44, 10, "enum_LAST_LEXICAL_USE"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 57, 9, "enum_NEXT_SYNTAX"], [58, 2, 10, "enum_LAST_LEXICAL_USE"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [67, 19, 10, "enum_LAST_LEXICAL_USE"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [72, 54, 10, "enum_LAST_LEXICAL_USE"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [76, 6, 10, "enum_LAST_LEXICAL_USE"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [79, 67, 10, "enum_LAST_LEXICAL_USE"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 85, 9, "enum_NEXT_SYNTAX"], [86, 79, 10, "enum_LAST_LEXICAL_USE"], [85, 86, 9, "enum_NEXT_SYNTAX"], [8, 12, 1, "enum_CFG_NEXT"], [12, 1, 1, "enum_CFG_NEXT"], [7, 16, 1, "enum_CFG_NEXT"], [16, 30, 1, "enum_CFG_NEXT"], [30, 43, 1, "enum_CFG_NEXT"], [30, 33, 1, "enum_CFG_NEXT"], [33, 57, 1, "enum_CFG_NEXT"], [43, 48, 1, "enum_CFG_NEXT"], [48, 57, 1, "enum_CFG_NEXT"], [57, 78, 1, "enum_CFG_NEXT"], [78, 85, 1, "enum_CFG_NEXT"], [19, 4, 3, "enum_LAST_WRITE"], [25, 10, 3, "enum_LAST_WRITE"], [30, 25, 2, "enum_LAST_READ"], [30, 10, 3, "enum_LAST_WRITE"], [36, 17, 3, "enum_LAST_WRITE"], [44, 17, 3, "enum_LAST_WRITE"], [54, 44, 2, "enum_LAST_READ"], [54, 17, 3, "enum_LAST_WRITE"], [58, 2, 3, "enum_LAST_WRITE"], [67, 19, 2, "enum_LAST_READ"], [67, 4, 3, "enum_LAST_WRITE"], [72, 54, 2, "enum_LAST_READ"], [72, 36, 2, "enum_LAST_READ"], [72, 17, 3, "enum_LAST_WRITE"], [76, 6, 3, "enum_LAST_WRITE"], [79, 67, 2, "enum_LAST_READ"], [79, 4, 3, "enum_LAST_WRITE"], [86, 79, 2, "enum_LAST_READ"], [86, 4, 3, "enum_LAST_WRITE"], [17, 19, 4, "enum_COMPUTED_FROM"], [17, 25, 4, "enum_COMPUTED_FROM"], [34, 36, 4, "enum_COMPUTED_FROM"], [49, 54, 4, "enum_COMPUTED_FROM"]], "error_location": 72, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/shiroyuki/passerine.git", "old_path": "tori/db/odm/collection.py", "hash": "c9ac93750b7b09b440c8cd53654264d52135c005", "code": "def put(self, document: Document, upsert: bool=False, replace: bool=False) -> Document:\n    changeset = document.get_changeset(not replace)\n\n    if replace:\n        update_instruction = changeset\n    else:\n        del changeset['_id']\n\n        update_instruction = {'$set': changeset}\n\n    self.api.update({'_id': document.id}, changeset, upsert=upsert)\n\n    document.reset_bits()\n\n    return document\n", "rewrite": "ReplaceText(target='update_instruction' @(82,46)->(82,55))", "error_line": 10, "has_bug": true, "code_full": "from typing import Any, Dict, Union\n\n\nclass Document:\n    id: Any\n    \n    def get_changeset(self, include_id: bool) -> Dict[str, Any]:\n        return {}\n\n    def reset_bits(self):\n        pass\n\nclass API:\n    def update(self, query: Dict[str, Any], update: Dict[str, Any], upsert: bool = False):\n        pass\n\nclass MyClass:\n    def __init__(self, api: API):\n        self.api: API = api\n\nclass Class:\n    api: API\n\n    def put(self, document: Document, upsert: bool=False, replace: bool=False) -> Document:\n        changeset = document.get_changeset(not replace)\n\n        if replace:\n            update_instruction = changeset\n        else:\n            del changeset['_id']\n\n            update_instruction = {'$set': changeset}\n\n        self.api.update({'_id': document.id}, changeset, upsert=upsert)\n\n        document.reset_bits()\n\n        return document\n", "error_location_char": [328, 337], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def send(", "self", ",", "arg_1", ",", "arg_2", ",", "arg_3", ")", ":", "#NEWLINE#", "#INDENT#", "peer_connection", "=", "(", "yield", "self", ".", "tchannel", "(", ")", ".", "get_peer", "(", "self", ".", "hostport", ")", ")", "#NEWLINE#", "self", ".", "message_id", "=", "message_id", "=", "peer_connection", ".", "next_message_id", "(", ")", "#NEWLINE#", "def safebytes(", "arg", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "arg", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "return", "None", "#NEWLINE#", "#UNINDENT#", "if", "isinstance", "(", "arg", ",", "bytes", ")", ":", "#NEWLINE#", "#INDENT#", "return", "arg", "#NEWLINE#", "#UNINDENT#", "return", "bytes", "(", "arg", ".", "encode", "(", "'ascii'", ")", ")", "#NEWLINE#", "#UNINDENT#", "message", "=", "CallRequestMessage", "(", "service", "=", "self", ".", "service", ",", "args", "=", "[", "safebytes", "(", "arg_1", ")", ",", "arg_3", ",", "arg_3", "]", ")", "#NEWLINE#", "response_future", "=", "peer_connection", ".", "send", "(", "message", ",", "message_id", ")", "#NEWLINE#", "with", "timeout", "(", "response_future", ")", ":", "#NEWLINE#", "#INDENT#", "response", "=", "(", "yield", "response_future", ")", "#NEWLINE#", "#UNINDENT#", "log", ".", "debug", "(", "'Got response %s'", ",", "response", ")", "#NEWLINE#", "if", "(", "not", "response", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "InvalidMessageException", "(", ")", "#NEWLINE#", "#UNINDENT#", "raise", "tornado", ".", "gen", ".", "Return", "(", "response", ")"], "edges": [[1, 5, 7, "enum_FIELD"], [12, 16, 7, "enum_FIELD"], [34, 40, 7, "enum_FIELD"], [87, 97, 7, "enum_FIELD"], [111, 119, 7, "enum_FIELD"], [138, 144, 7, "enum_FIELD"], [148, 150, 7, "enum_FIELD"], [162, 168, 7, "enum_FIELD"], [16, 24, 7, "enum_FIELD"], [32, 31, 7, "enum_FIELD"], [40, 38, 7, "enum_FIELD"], [49, 52, 7, "enum_FIELD"], [62, 66, 7, "enum_FIELD"], [76, 78, 7, "enum_FIELD"], [97, 90, 7, "enum_FIELD"], [119, 115, 7, "enum_FIELD"], [130, 134, 7, "enum_FIELD"], [144, 140, 7, "enum_FIELD"], [150, 151, 7, "enum_FIELD"], [156, 158, 7, "enum_FIELD"], [168, 166, 7, "enum_FIELD"], [24, 22, 7, "enum_FIELD"], [38, 37, 7, "enum_FIELD"], [52, 51, 7, "enum_FIELD"], [58, 59, 7, "enum_FIELD"], [66, 63, 7, "enum_FIELD"], [72, 73, 7, "enum_FIELD"], [78, 77, 7, "enum_FIELD"], [92, 95, 7, "enum_FIELD"], [98, 105, 7, "enum_FIELD"], [115, 114, 7, "enum_FIELD"], [125, 124, 7, "enum_FIELD"], [134, 135, 7, "enum_FIELD"], [140, 139, 7, "enum_FIELD"], [158, 157, 7, "enum_FIELD"], [166, 164, 7, "enum_FIELD"], [22, 20, 7, "enum_FIELD"], [26, 25, 7, "enum_FIELD"], [82, 80, 7, "enum_FIELD"], [95, 94, 7, "enum_FIELD"], [164, 163, 7, "enum_FIELD"], [20, 18, 7, "enum_FIELD"], [80, 79, 7, "enum_FIELD"], [102, 101, 7, "enum_FIELD"], [18, 17, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [17, 2, 10, "enum_LAST_LEXICAL_USE"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [25, 17, 10, "enum_LAST_LEXICAL_USE"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [31, 25, 10, "enum_LAST_LEXICAL_USE"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [37, 13, 10, "enum_LAST_LEXICAL_USE"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [51, 44, 10, "enum_LAST_LEXICAL_USE"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [65, 51, 10, "enum_LAST_LEXICAL_USE"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 72, 9, "enum_NEXT_SYNTAX"], [73, 65, 10, "enum_LAST_LEXICAL_USE"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 76, 9, "enum_NEXT_SYNTAX"], [77, 67, 10, "enum_LAST_LEXICAL_USE"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [79, 73, 10, "enum_LAST_LEXICAL_USE"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [94, 31, 10, "enum_LAST_LEXICAL_USE"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [103, 4, 10, "enum_LAST_LEXICAL_USE"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [106, 8, 10, "enum_LAST_LEXICAL_USE"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [108, 106, 10, "enum_LAST_LEXICAL_USE"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [114, 37, 10, "enum_LAST_LEXICAL_USE"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [118, 88, 10, "enum_LAST_LEXICAL_USE"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [120, 35, 10, "enum_LAST_LEXICAL_USE"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [126, 112, 10, "enum_LAST_LEXICAL_USE"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [135, 126, 10, "enum_LAST_LEXICAL_USE"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [145, 131, 10, "enum_LAST_LEXICAL_USE"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [151, 145, 10, "enum_LAST_LEXICAL_USE"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [169, 151, 10, "enum_LAST_LEXICAL_USE"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [5, 12, 1, "enum_CFG_NEXT"], [12, 34, 1, "enum_CFG_NEXT"], [34, 45, 1, "enum_CFG_NEXT"], [45, 87, 1, "enum_CFG_NEXT"], [52, 58, 1, "enum_CFG_NEXT"], [52, 66, 1, "enum_CFG_NEXT"], [66, 76, 1, "enum_CFG_NEXT"], [66, 72, 1, "enum_CFG_NEXT"], [87, 111, 1, "enum_CFG_NEXT"], [111, 138, 1, "enum_CFG_NEXT"], [138, 150, 1, "enum_CFG_NEXT"], [150, 162, 1, "enum_CFG_NEXT"], [150, 156, 1, "enum_CFG_NEXT"], [17, 2, 3, "enum_LAST_WRITE"], [25, 17, 2, "enum_LAST_READ"], [25, 2, 3, "enum_LAST_WRITE"], [37, 13, 3, "enum_LAST_WRITE"], [31, 25, 2, "enum_LAST_READ"], [31, 2, 3, "enum_LAST_WRITE"], [51, 44, 3, "enum_LAST_WRITE"], [65, 51, 2, "enum_LAST_READ"], [65, 44, 3, "enum_LAST_WRITE"], [73, 65, 2, "enum_LAST_READ"], [73, 44, 3, "enum_LAST_WRITE"], [77, 67, 2, "enum_LAST_READ"], [79, 65, 2, "enum_LAST_READ"], [79, 44, 3, "enum_LAST_WRITE"], [94, 31, 2, "enum_LAST_READ"], [94, 2, 3, "enum_LAST_WRITE"], [101, 45, 3, "enum_LAST_WRITE"], [103, 4, 3, "enum_LAST_WRITE"], [106, 8, 3, "enum_LAST_WRITE"], [108, 106, 2, "enum_LAST_READ"], [108, 8, 3, "enum_LAST_WRITE"], [114, 37, 2, "enum_LAST_READ"], [114, 13, 3, "enum_LAST_WRITE"], [118, 88, 3, "enum_LAST_WRITE"], [120, 35, 3, "enum_LAST_WRITE"], [151, 145, 2, "enum_LAST_READ"], [169, 151, 2, "enum_LAST_READ"], [13, 25, 4, "enum_COMPUTED_FROM"], [13, 17, 4, "enum_COMPUTED_FROM"], [32, 37, 4, "enum_COMPUTED_FROM"], [35, 37, 4, "enum_COMPUTED_FROM"], [88, 90, 4, "enum_COMPUTED_FROM"], [88, 94, 4, "enum_COMPUTED_FROM"], [88, 106, 4, "enum_COMPUTED_FROM"], [88, 108, 4, "enum_COMPUTED_FROM"], [88, 101, 4, "enum_COMPUTED_FROM"], [88, 103, 4, "enum_COMPUTED_FROM"], [112, 118, 4, "enum_COMPUTED_FROM"], [112, 120, 4, "enum_COMPUTED_FROM"], [112, 114, 4, "enum_COMPUTED_FROM"], [131, 135, 4, "enum_COMPUTED_FROM"], [102, 45, 11, "enum_CALLS"], [76, 102, 5, "enum_RETURNS_TO"], [58, 102, 5, "enum_RETURNS_TO"], [72, 102, 5, "enum_RETURNS_TO"], [103, 44, 6, "enum_FORMAL_ARG_NAME"]], "error_location": 106, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/uber/tchannel-python.git", "old_path": "tchannel/tornado/tchannel.py", "hash": "867364eea67d8da34f5f84a2d9fa02203f02aa95", "code": "def send(self, arg_1: str, arg_2: str, arg_3: str) -> Any:\n    peer_connection = yield self.tchannel().get_peer(self.hostport)\n    self.message_id = message_id = peer_connection.next_message_id()\n\n    def safebytes(arg: str) -> Optional[bytes]:\n        if arg is None:\n            return None\n        if isinstance(arg, bytes):\n            return arg\n        return bytes(arg.encode('ascii'))\n\n    message: CallRequestMessage = CallRequestMessage(\n        service=self.service,\n        args=[safebytes(arg_1), arg_3, arg_3],\n    )\n\n    response_future: Any = peer_connection.send(message, message_id)\n    with timeout(response_future):\n        response = yield response_future\n\n    log.debug(\"Got response %s\", response)\n\n    if not response:\n        raise InvalidMessageException()\n\n    raise tornado.gen.Return(response)\n", "rewrite": "ReplaceText(target='arg_2' @(225,36)->(225,41))", "error_line": 13, "has_bug": true, "code_full": "import logging\nfrom typing import Any, List, Optional\n\nimport tornado.gen\n\nlog = logging.getLogger(__name__)\n\nclass CallRequestMessage:\n    service: str\n    args: List\n\n    def __init__(self, service: str, args: List) -> None:\n        pass\n\ndef timeout(future: Any) -> Any:\n    pass\n\nclass InvalidMessageException(Exception):\n    pass\n\nclass Class:\n    hostport: str\n    service: str\n    message_id: int\n\n    def tchannel(self) -> Any:\n        pass\n\n    def get_peer(self, hostport: str) -> Any:\n        pass\n\n\n    def send(self, arg_1: str, arg_2: str, arg_3: str) -> Any:\n        peer_connection = yield self.tchannel().get_peer(self.hostport)\n        self.message_id = message_id = peer_connection.next_message_id()\n\n        def safebytes(arg: str) -> Optional[bytes]:\n            if arg is None:\n                return None\n            if isinstance(arg, bytes):\n                return arg\n            return bytes(arg.encode('ascii'))\n\n        message: CallRequestMessage = CallRequestMessage(\n            service=self.service,\n            args=[safebytes(arg_1), arg_3, arg_3],\n        )\n\n        response_future: Any = peer_connection.send(message, message_id)\n        with timeout(response_future):\n            response = yield response_future\n\n        log.debug(\"Got response %s\", response)\n\n        if not response:\n            raise InvalidMessageException()\n\n        raise tornado.gen.Return(response)\n", "error_location_char": [510, 515], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def _test_recurrent_layer_bidirectional_transduction(", "fwd_layer", ",", "bwd_layer", ",", "dummy_input", ",", "lengths", ",", "left_padded", ")", ":", "#NEWLINE#", "#INDENT#", "tranductor", "=", "transduction_layers", ".", "BidirectionalLayer", "(", "fwd_layer", ",", "bwd_layer", ")", "#NEWLINE#", "dy", ".", "renew_cg", "(", ")", "#NEWLINE#", "seq", "=", "[", "(", "dy", ".", "inputTensor", "(", "dummy_input", ",", "batched", "=", "True", ")", "+", "i", ")", "for", "i", "in", "range", "(", "10", ")", "]", "#NEWLINE#", "tranductor", ".", "init", "(", "test", "=", "False", ",", "update", "=", "True", ")", "#NEWLINE#", "(", "fwd_states", ",", "bwd_states", ")", "=", "tranductor", "(", "seq", ",", "lengths", "=", "lengths", ",", "left_padded", "=", "left_padded", ")", "#NEWLINE#", "fwd_z", "=", "dy", ".", "mean_batches", "(", "dy", ".", "esum", "(", "[", "dy", ".", "sum_elems", "(", "state", "[", "0", "]", ")", "for", "state", "in", "fwd_states", "]", ")", ")", "#NEWLINE#", "bwd_z", "=", "dy", ".", "mean_batches", "(", "dy", ".", "esum", "(", "[", "dy", ".", "sum_elems", "(", "state", "[", "0", "]", ")", "for", "state", "in", "fwd_states", "]", ")", ")", "#NEWLINE#", "z", "=", "(", "fwd_z", "+", "bwd_z", ")", "#NEWLINE#", "z", ".", "forward", "(", ")", "#NEWLINE#", "z", ".", "backward", "(", ")"], "edges": [[1, 5, 7, "enum_FIELD"], [14, 22, 7, "enum_FIELD"], [25, 29, 7, "enum_FIELD"], [31, 34, 7, "enum_FIELD"], [57, 65, 7, "enum_FIELD"], [70, 80, 7, "enum_FIELD"], [89, 95, 7, "enum_FIELD"], [117, 123, 7, "enum_FIELD"], [145, 150, 7, "enum_FIELD"], [153, 157, 7, "enum_FIELD"], [159, 163, 7, "enum_FIELD"], [22, 18, 7, "enum_FIELD"], [29, 27, 7, "enum_FIELD"], [34, 46, 7, "enum_FIELD"], [65, 59, 7, "enum_FIELD"], [80, 77, 7, "enum_FIELD"], [95, 93, 7, "enum_FIELD"], [123, 121, 7, "enum_FIELD"], [150, 149, 7, "enum_FIELD"], [150, 151, 7, "enum_FIELD"], [157, 155, 7, "enum_FIELD"], [163, 161, 7, "enum_FIELD"], [18, 17, 7, "enum_FIELD"], [27, 26, 7, "enum_FIELD"], [46, 41, 7, "enum_FIELD"], [46, 47, 7, "enum_FIELD"], [49, 50, 7, "enum_FIELD"], [49, 53, 7, "enum_FIELD"], [59, 58, 7, "enum_FIELD"], [62, 64, 7, "enum_FIELD"], [66, 68, 7, "enum_FIELD"], [81, 83, 7, "enum_FIELD"], [85, 87, 7, "enum_FIELD"], [93, 92, 7, "enum_FIELD"], [99, 97, 7, "enum_FIELD"], [121, 120, 7, "enum_FIELD"], [127, 125, 7, "enum_FIELD"], [155, 154, 7, "enum_FIELD"], [161, 160, 7, "enum_FIELD"], [41, 37, 7, "enum_FIELD"], [53, 52, 7, "enum_FIELD"], [97, 96, 7, "enum_FIELD"], [100, 104, 7, "enum_FIELD"], [125, 124, 7, "enum_FIELD"], [128, 132, 7, "enum_FIELD"], [37, 36, 7, "enum_FIELD"], [42, 44, 7, "enum_FIELD"], [104, 102, 7, "enum_FIELD"], [110, 111, 7, "enum_FIELD"], [110, 113, 7, "enum_FIELD"], [132, 130, 7, "enum_FIELD"], [138, 139, 7, "enum_FIELD"], [138, 141, 7, "enum_FIELD"], [102, 101, 7, "enum_FIELD"], [106, 105, 7, "enum_FIELD"], [106, 107, 7, "enum_FIELD"], [130, 129, 7, "enum_FIELD"], [134, 133, 7, "enum_FIELD"], [134, 135, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [21, 2, 10, "enum_LAST_LEXICAL_USE"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [23, 4, 10, "enum_LAST_LEXICAL_USE"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [36, 26, 10, "enum_LAST_LEXICAL_USE"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [40, 6, 10, "enum_LAST_LEXICAL_USE"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [50, 47, 10, "enum_LAST_LEXICAL_USE"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [58, 15, 10, "enum_LAST_LEXICAL_USE"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [77, 58, 10, "enum_LAST_LEXICAL_USE"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [79, 32, 10, "enum_LAST_LEXICAL_USE"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [83, 8, 10, "enum_LAST_LEXICAL_USE"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [87, 10, 10, "enum_LAST_LEXICAL_USE"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [92, 36, 10, "enum_LAST_LEXICAL_USE"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [96, 92, 10, "enum_LAST_LEXICAL_USE"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [101, 96, 10, "enum_LAST_LEXICAL_USE"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [111, 105, 10, "enum_LAST_LEXICAL_USE"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [113, 72, 10, "enum_LAST_LEXICAL_USE"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [120, 101, 10, "enum_LAST_LEXICAL_USE"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [124, 120, 10, "enum_LAST_LEXICAL_USE"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [129, 124, 10, "enum_LAST_LEXICAL_USE"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [133, 111, 10, "enum_LAST_LEXICAL_USE"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [139, 133, 10, "enum_LAST_LEXICAL_USE"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [141, 113, 10, "enum_LAST_LEXICAL_USE"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [149, 90, 10, "enum_LAST_LEXICAL_USE"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [151, 118, 10, "enum_LAST_LEXICAL_USE"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [154, 146, 10, "enum_LAST_LEXICAL_USE"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [160, 154, 10, "enum_LAST_LEXICAL_USE"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [5, 14, 1, "enum_CFG_NEXT"], [14, 25, 1, "enum_CFG_NEXT"], [25, 31, 1, "enum_CFG_NEXT"], [31, 57, 1, "enum_CFG_NEXT"], [57, 70, 1, "enum_CFG_NEXT"], [70, 89, 1, "enum_CFG_NEXT"], [89, 117, 1, "enum_CFG_NEXT"], [117, 145, 1, "enum_CFG_NEXT"], [145, 153, 1, "enum_CFG_NEXT"], [153, 159, 1, "enum_CFG_NEXT"], [21, 2, 3, "enum_LAST_WRITE"], [23, 4, 3, "enum_LAST_WRITE"], [36, 26, 2, "enum_LAST_READ"], [40, 6, 3, "enum_LAST_WRITE"], [50, 47, 2, "enum_LAST_READ"], [58, 15, 3, "enum_LAST_WRITE"], [77, 58, 2, "enum_LAST_READ"], [77, 15, 3, "enum_LAST_WRITE"], [79, 32, 3, "enum_LAST_WRITE"], [83, 8, 3, "enum_LAST_WRITE"], [87, 10, 3, "enum_LAST_WRITE"], [92, 36, 2, "enum_LAST_READ"], [96, 92, 2, "enum_LAST_READ"], [101, 96, 2, "enum_LAST_READ"], [111, 105, 2, "enum_LAST_READ"], [113, 72, 3, "enum_LAST_WRITE"], [120, 101, 2, "enum_LAST_READ"], [124, 120, 2, "enum_LAST_READ"], [129, 124, 2, "enum_LAST_READ"], [133, 105, 2, "enum_LAST_READ"], [133, 111, 3, "enum_LAST_WRITE"], [139, 133, 2, "enum_LAST_READ"], [139, 111, 3, "enum_LAST_WRITE"], [141, 113, 2, "enum_LAST_READ"], [141, 72, 3, "enum_LAST_WRITE"], [149, 90, 3, "enum_LAST_WRITE"], [151, 118, 3, "enum_LAST_WRITE"], [154, 146, 3, "enum_LAST_WRITE"], [160, 154, 2, "enum_LAST_READ"], [160, 146, 3, "enum_LAST_WRITE"], [15, 21, 4, "enum_COMPUTED_FROM"], [15, 23, 4, "enum_COMPUTED_FROM"], [15, 17, 4, "enum_COMPUTED_FROM"], [32, 47, 4, "enum_COMPUTED_FROM"], [32, 50, 4, "enum_COMPUTED_FROM"], [32, 40, 4, "enum_COMPUTED_FROM"], [32, 52, 4, "enum_COMPUTED_FROM"], [32, 36, 4, "enum_COMPUTED_FROM"], [73, 77, 4, "enum_COMPUTED_FROM"], [73, 79, 4, "enum_COMPUTED_FROM"], [73, 83, 4, "enum_COMPUTED_FROM"], [73, 87, 4, "enum_COMPUTED_FROM"], [90, 92, 4, "enum_COMPUTED_FROM"], [90, 96, 4, "enum_COMPUTED_FROM"], [90, 111, 4, "enum_COMPUTED_FROM"], [90, 113, 4, "enum_COMPUTED_FROM"], [90, 101, 4, "enum_COMPUTED_FROM"], [90, 105, 4, "enum_COMPUTED_FROM"], [118, 120, 4, "enum_COMPUTED_FROM"], [118, 124, 4, "enum_COMPUTED_FROM"], [118, 139, 4, "enum_COMPUTED_FROM"], [118, 141, 4, "enum_COMPUTED_FROM"], [118, 129, 4, "enum_COMPUTED_FROM"], [118, 133, 4, "enum_COMPUTED_FROM"], [146, 149, 4, "enum_COMPUTED_FROM"], [146, 151, 4, "enum_COMPUTED_FROM"]], "error_location": 141, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/pmichel31415/dynn.git", "old_path": "tests/layers/test_transduction_layers.py", "hash": "644f1b8a3e59e8855ac04417290c2172c2b5fa88", "code": "def _test_recurrent_layer_bidirectional_transduction(\n    fwd_layer: Any,\n    bwd_layer: Any,\n    dummy_input: List[List[float]],\n    lengths: List[int],\n    left_padded: bool,\n):\n    # Create transduction layer\n    tranductor = transduction_layers.BidirectionalLayer(fwd_layer, bwd_layer)\n    # Initialize computation graph\n    dy.renew_cg()\n    # Create inputs\n    seq = [\n        dy.inputTensor(dummy_input, batched=True) + i for i in range(10)\n    ]\n    # Initialize tranductor\n    tranductor.init(test=False, update=True)\n    # Run tranductor\n    fwd_states, bwd_states = tranductor(\n        seq, lengths=lengths, left_padded=left_padded\n    )\n    # Try forward/backward\n    fwd_z = dy.mean_batches(\n        dy.esum([dy.sum_elems(state[0]) for state in fwd_states])\n    )\n    bwd_z = dy.mean_batches(\n        dy.esum([dy.sum_elems(state[0]) for state in fwd_states])\n    )\n    z = fwd_z + bwd_z\n    z.forward()\n    z.backward()\n", "rewrite": "ReplaceText(target='bwd_states' @(149,53)->(149,63))", "error_line": 26, "has_bug": true, "code_full": "from typing import Any, List, Tuple\n\nimport dynet as dy\n\ntransduction_layers: Any = None\n\nclass BidirectionalLayer():\n    def __init__(self, fwd_layer: Any, bwd_layer: Any):\n        self.fwd_layer = fwd_layer\n        self.bwd_layer = bwd_layer\n\n    def init(self, test: bool, update: bool):\n        pass\n\n    def __call__(self, seq: List[Any], lengths: List[int], left_padded: bool) -> Tuple[List[Any], List[Any]]:\n        return ([], [])\n\ndef _test_recurrent_layer_bidirectional_transduction(\n    fwd_layer: Any,\n    bwd_layer: Any,\n    dummy_input: List[List[float]],\n    lengths: List[int],\n    left_padded: bool,\n):\n    # Create transduction layer\n    tranductor = transduction_layers.BidirectionalLayer(fwd_layer, bwd_layer)\n    # Initialize computation graph\n    dy.renew_cg()\n    # Create inputs\n    seq = [\n        dy.inputTensor(dummy_input, batched=True) + i for i in range(10)\n    ]\n    # Initialize tranductor\n    tranductor.init(test=False, update=True)\n    # Run tranductor\n    fwd_states, bwd_states = tranductor(\n        seq, lengths=lengths, left_padded=left_padded\n    )\n    # Try forward/backward\n    fwd_z = dy.mean_batches(\n        dy.esum([dy.sum_elems(state[0]) for state in fwd_states])\n    )\n    bwd_z = dy.mean_batches(\n        dy.esum([dy.sum_elems(state[0]) for state in fwd_states])\n    )\n    z = fwd_z + bwd_z\n    z.forward()\n    z.backward()\n", "error_location_char": [859, 869], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def __init__(", "self", ",", "output", "=", "sys", ".", "stdout", ",", "error", "=", "sys", ".", "stderr", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    :param output: Where to write the output; defaults to sys.stdout.\\n    :param error: Where to write any errors; defaults to sys.stderr.\\n    '", "#NEWLINE#", "if", "isinstance", "(", "output", ",", "TextIOBase", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "_out", "=", "output", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "self", ".", "_out", "=", "TextIOWrapper", "(", "output", ")", "#NEWLINE#", "#UNINDENT#", "if", "isinstance", "(", "output", ",", "TextIOBase", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "_err", "=", "error", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "self", ".", "_err", "=", "TextIOWrapper", "(", "error", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "header_written", "=", "False"], "edges": [[1, 5, 7, "enum_FIELD"], [18, 19, 7, "enum_FIELD"], [28, 25, 7, "enum_FIELD"], [59, 56, 7, "enum_FIELD"], [82, 87, 7, "enum_FIELD"], [7, 6, 7, "enum_FIELD"], [13, 12, 7, "enum_FIELD"], [25, 22, 7, "enum_FIELD"], [30, 35, 7, "enum_FIELD"], [41, 47, 7, "enum_FIELD"], [56, 53, 7, "enum_FIELD"], [61, 66, 7, "enum_FIELD"], [72, 78, 7, "enum_FIELD"], [84, 83, 7, "enum_FIELD"], [32, 31, 7, "enum_FIELD"], [43, 42, 7, "enum_FIELD"], [47, 46, 7, "enum_FIELD"], [63, 62, 7, "enum_FIELD"], [74, 73, 7, "enum_FIELD"], [78, 77, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [12, 6, 10, "enum_LAST_LEXICAL_USE"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [24, 4, 10, "enum_LAST_LEXICAL_USE"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 30, 9, "enum_NEXT_SYNTAX"], [31, 2, 10, "enum_LAST_LEXICAL_USE"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [35, 24, 10, "enum_LAST_LEXICAL_USE"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 41, 9, "enum_NEXT_SYNTAX"], [42, 31, 10, "enum_LAST_LEXICAL_USE"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [48, 35, 10, "enum_LAST_LEXICAL_USE"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 52, 9, "enum_NEXT_SYNTAX"], [53, 22, 10, "enum_LAST_LEXICAL_USE"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [55, 48, 10, "enum_LAST_LEXICAL_USE"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [57, 26, 10, "enum_LAST_LEXICAL_USE"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 61, 9, "enum_NEXT_SYNTAX"], [62, 42, 10, "enum_LAST_LEXICAL_USE"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [66, 10, 10, "enum_LAST_LEXICAL_USE"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 72, 9, "enum_NEXT_SYNTAX"], [73, 62, 10, "enum_LAST_LEXICAL_USE"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [77, 46, 10, "enum_LAST_LEXICAL_USE"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [79, 66, 10, "enum_LAST_LEXICAL_USE"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 82, 9, "enum_NEXT_SYNTAX"], [83, 73, 10, "enum_LAST_LEXICAL_USE"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [7, 13, 1, "enum_CFG_NEXT"], [13, 1, 1, "enum_CFG_NEXT"], [5, 18, 1, "enum_CFG_NEXT"], [18, 25, 1, "enum_CFG_NEXT"], [25, 41, 1, "enum_CFG_NEXT"], [25, 30, 1, "enum_CFG_NEXT"], [30, 56, 1, "enum_CFG_NEXT"], [41, 56, 1, "enum_CFG_NEXT"], [56, 61, 1, "enum_CFG_NEXT"], [56, 72, 1, "enum_CFG_NEXT"], [61, 82, 1, "enum_CFG_NEXT"], [72, 82, 1, "enum_CFG_NEXT"], [12, 6, 2, "enum_LAST_READ"], [24, 4, 3, "enum_LAST_WRITE"], [35, 24, 2, "enum_LAST_READ"], [35, 4, 3, "enum_LAST_WRITE"], [31, 2, 3, "enum_LAST_WRITE"], [48, 24, 2, "enum_LAST_READ"], [48, 4, 3, "enum_LAST_WRITE"], [42, 2, 3, "enum_LAST_WRITE"], [53, 22, 2, "enum_LAST_READ"], [55, 48, 2, "enum_LAST_READ"], [55, 35, 2, "enum_LAST_READ"], [55, 4, 3, "enum_LAST_WRITE"], [57, 26, 2, "enum_LAST_READ"], [66, 10, 3, "enum_LAST_WRITE"], [62, 31, 2, "enum_LAST_READ"], [62, 42, 2, "enum_LAST_READ"], [62, 2, 3, "enum_LAST_WRITE"], [77, 46, 2, "enum_LAST_READ"], [79, 10, 3, "enum_LAST_WRITE"], [73, 31, 2, "enum_LAST_READ"], [73, 42, 2, "enum_LAST_READ"], [73, 2, 3, "enum_LAST_WRITE"], [83, 62, 2, "enum_LAST_READ"], [83, 73, 2, "enum_LAST_READ"], [83, 2, 3, "enum_LAST_WRITE"], [32, 35, 4, "enum_COMPUTED_FROM"], [43, 46, 4, "enum_COMPUTED_FROM"], [43, 48, 4, "enum_COMPUTED_FROM"], [63, 66, 4, "enum_COMPUTED_FROM"], [74, 77, 4, "enum_COMPUTED_FROM"], [74, 79, 4, "enum_COMPUTED_FROM"]], "error_location": 55, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/splunk/splunk-sdk-python.git", "old_path": "splunklib/modularinput/event_writer.py", "hash": "68f87378d5bac7efc97cf118f6754b5a6de73fa3", "code": "def __init__(self, output: Union[TextIO, _WrappedBuffer] = sys.stdout, error: Union[TextIO, _WrappedBuffer] = sys.stderr):\n    \"\"\"\n    :param output: Where to write the output; defaults to sys.stdout.\n    :param error: Where to write any errors; defaults to sys.stderr.\n    \"\"\"\n    if isinstance(output, TextIO):\n        self._out = output\n    else:\n        self._out = TextIOWrapper(output)\n\n    if isinstance(output, TextIO):\n        self._err = error\n    else:\n        self._err = TextIOWrapper(error)\n\n    # has the opening <stream> tag been written yet?\n    self.header_written = False\n", "rewrite": "ReplaceText(target='error' @(51,22)->(51,28))", "error_line": 10, "has_bug": true, "code_full": "import sys\nfrom io import TextIOWrapper, _WrappedBuffer\nfrom typing import TextIO, Union\n\n\nclass Class:\n    _out: Union[TextIO, TextIOWrapper, TextIO]\n    _err: Union[TextIO, TextIOWrapper, TextIO]\n\n    def __init__(self, output: Union[TextIO, _WrappedBuffer] = sys.stdout, error: Union[TextIO, _WrappedBuffer] = sys.stderr):\n        \"\"\"\n        :param output: Where to write the output; defaults to sys.stdout.\n        :param error: Where to write any errors; defaults to sys.stderr.\n        \"\"\"\n        if isinstance(output, TextIO):\n            self._out = output\n        else:\n            self._out = TextIOWrapper(output)\n\n        if isinstance(output, TextIO):\n            self._err = error\n        else:\n            self._err = TextIOWrapper(error)\n\n        # has the opening <stream> tag been written yet?\n        self.header_written = False\n", "error_location_char": [411, 417], "type_checked_pytype": true, "type_error_label": "type-mismatch,indirect", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def data_is_valid(", "post_data", ",", "postback_url", "=", "POSTBACK_URL", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Validates data via the postback. Returns True if data is valid,\\n    False if data is invalid and None if the request failed.\\n    '", "#NEWLINE#", "post_str", "=", "urlencode", "(", "_values_to_encode", "(", "post_data", ")", ")", "#NEWLINE#", "try", ":", "#NEWLINE#", "#INDENT#", "response", "=", "urllib2", ".", "urlopen", "(", "postback_url", ",", "post_data", ")", ".", "read", "(", ")", "#NEWLINE#", "#UNINDENT#", "except", "urllib2", ".", "HTTPError", ":", "#NEWLINE#", "#INDENT#", "return", "None", "#NEWLINE#", "#UNINDENT#", "if", "(", "response", "==", "'VALID'", ")", ":", "#NEWLINE#", "#INDENT#", "return", "True", "#NEWLINE#", "#UNINDENT#", "if", "(", "response", "==", "'INVALID'", ")", ":", "#NEWLINE#", "#INDENT#", "return", "False", "#NEWLINE#", "#UNINDENT#", "return", "None"], "edges": [[1, 3, 7, "enum_FIELD"], [10, 11, 7, "enum_FIELD"], [12, 16, 7, "enum_FIELD"], [54, 57, 7, "enum_FIELD"], [67, 70, 7, "enum_FIELD"], [80, 81, 7, "enum_FIELD"], [16, 15, 7, "enum_FIELD"], [26, 39, 7, "enum_FIELD"], [43, 45, 7, "enum_FIELD"], [57, 56, 7, "enum_FIELD"], [63, 64, 7, "enum_FIELD"], [70, 69, 7, "enum_FIELD"], [76, 77, 7, "enum_FIELD"], [18, 17, 7, "enum_FIELD"], [39, 37, 7, "enum_FIELD"], [45, 44, 7, "enum_FIELD"], [50, 51, 7, "enum_FIELD"], [37, 34, 7, "enum_FIELD"], [34, 30, 7, "enum_FIELD"], [30, 29, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [19, 2, 10, "enum_LAST_LEXICAL_USE"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [33, 4, 10, "enum_LAST_LEXICAL_USE"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [35, 19, 10, "enum_LAST_LEXICAL_USE"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 43, 9, "enum_NEXT_SYNTAX"], [44, 29, 10, "enum_LAST_LEXICAL_USE"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [56, 27, 10, "enum_LAST_LEXICAL_USE"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [69, 56, 10, "enum_LAST_LEXICAL_USE"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [6, 1, 1, "enum_CFG_NEXT"], [3, 10, 1, "enum_CFG_NEXT"], [10, 12, 1, "enum_CFG_NEXT"], [12, 26, 1, "enum_CFG_NEXT"], [26, 57, 1, "enum_CFG_NEXT"], [26, 45, 1, "enum_CFG_NEXT"], [45, 50, 1, "enum_CFG_NEXT"], [57, 70, 1, "enum_CFG_NEXT"], [57, 63, 1, "enum_CFG_NEXT"], [70, 80, 1, "enum_CFG_NEXT"], [70, 76, 1, "enum_CFG_NEXT"], [19, 2, 3, "enum_LAST_WRITE"], [33, 4, 3, "enum_LAST_WRITE"], [35, 19, 2, "enum_LAST_READ"], [35, 2, 3, "enum_LAST_WRITE"], [44, 29, 2, "enum_LAST_READ"], [56, 27, 3, "enum_LAST_WRITE"], [69, 56, 2, "enum_LAST_READ"], [69, 27, 3, "enum_LAST_WRITE"], [13, 15, 4, "enum_COMPUTED_FROM"], [13, 17, 4, "enum_COMPUTED_FROM"], [13, 19, 4, "enum_COMPUTED_FROM"], [27, 33, 4, "enum_COMPUTED_FROM"], [27, 35, 4, "enum_COMPUTED_FROM"], [27, 29, 4, "enum_COMPUTED_FROM"]], "error_location": 35, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/pjdelport/django-payfast.git", "old_path": "payfast/api.py", "hash": "8b9de727d901a6698a8f7118d73ffb5e8d7fa1d0", "code": "def data_is_valid(post_data: Dict[str, Any], postback_url: str=POSTBACK_URL) -> Optional[bool]:\n    \"\"\"\n    Validates data via the postback. Returns True if data is valid,\n    False if data is invalid and None if the request failed.\n    \"\"\"\n    post_str: str = urlencode(_values_to_encode(post_data))\n    try:\n        response = urllib2.urlopen(postback_url, post_data).read()\n    except urllib2.HTTPError:\n        return None\n    if response == 'VALID':\n        return True\n    if response == 'INVALID':\n        return False\n    return None\n", "rewrite": "ReplaceText(target='post_str' @(35,49)->(35,58))", "error_line": 7, "has_bug": true, "code_full": "from typing import Any, Dict, Optional\nfrom urllib.parse import urlencode\n\n\nclass urllib2:\n    @staticmethod\n    def urlopen(url: str, data: Optional[str]=None) -> Any:\n        pass\n\n    HTTPError = Exception\n\ndef _values_to_encode(post_data: Dict[str, Any]) -> Any:\n    pass\n    \n\nPOSTBACK_URL: str = \"\"\n\ndef data_is_valid(post_data: Dict[str, Any], postback_url: str=POSTBACK_URL) -> Optional[bool]:\n    \"\"\"\n    Validates data via the postback. Returns True if data is valid,\n    False if data is invalid and None if the request failed.\n    \"\"\"\n    post_str: str = urlencode(_values_to_encode(post_data))\n    try:\n        response = urllib2.urlopen(postback_url, post_data).read()\n    except urllib2.HTTPError:\n        return None\n    if response == 'VALID':\n        return True\n    if response == 'INVALID':\n        return False\n    return None\n", "error_location_char": [359, 368], "type_checked_pytype": false, "type_error_label": "wrong-arg-types", "type_checked_mypy": false}
{"source_tokens": ["#NEWLINE#", "def query_ncbi_species(", "species_entry", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "species_entry", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "return", "None", "#NEWLINE#", "#UNINDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "species_entry", "=", "re", ".", "compile", "(", "species_entry", ")", "#NEWLINE#", "with", "get_connection", "(", ")", "as", "connection", ":", "#NEWLINE#", "#INDENT#", "db", "=", "connection", ".", "get_database", "(", ")", "#NEWLINE#", "species_db", "=", "db", ".", "species", "#NEWLINE#", "result", "=", "species_db", ".", "find_one", "(", "{", "'organism'", ":", "species_entry", "}", ",", "{", "'ncbi_species'", ":", "1", ",", "'_id'", ":", "0", "}", ")", "#NEWLINE#", "group_result", "=", "species_db", ".", "find_one", "(", "{", "'group'", ":", "species_entry", "}", ",", "{", "'ncbi_species'", ":", "1", ",", "'_id'", ":", "0", "}", ")", "#NEWLINE#", "if", "(", "result", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "return", "result", "[", "'ncbi_species'", "]", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "group_result", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "return", "result", "[", "'ncbi_species'", "]", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "return", "None", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "except", "Exception", "as", "e", ":", "#NEWLINE#", "#INDENT#", "print", "(", "traceback", ".", "format_exc", "(", ")", ")", "#NEWLINE#", "return", "None"], "edges": [[7, 10, 7, "enum_FIELD"], [10, 9, 7, "enum_FIELD"], [16, 17, 7, "enum_FIELD"], [23, 29, 7, "enum_FIELD"], [151, 150, 7, "enum_FIELD"], [151, 152, 7, "enum_FIELD"], [29, 27, 7, "enum_FIELD"], [37, 35, 7, "enum_FIELD"], [37, 38, 7, "enum_FIELD"], [41, 47, 7, "enum_FIELD"], [49, 53, 7, "enum_FIELD"], [55, 67, 7, "enum_FIELD"], [78, 90, 7, "enum_FIELD"], [108, 105, 7, "enum_FIELD"], [155, 157, 7, "enum_FIELD"], [165, 166, 7, "enum_FIELD"], [27, 26, 7, "enum_FIELD"], [35, 34, 7, "enum_FIELD"], [47, 45, 7, "enum_FIELD"], [53, 52, 7, "enum_FIELD"], [67, 59, 7, "enum_FIELD"], [90, 82, 7, "enum_FIELD"], [105, 104, 7, "enum_FIELD"], [111, 113, 7, "enum_FIELD"], [128, 125, 7, "enum_FIELD"], [157, 156, 7, "enum_FIELD"], [45, 44, 7, "enum_FIELD"], [59, 58, 7, "enum_FIELD"], [82, 81, 7, "enum_FIELD"], [113, 112, 7, "enum_FIELD"], [113, 114, 7, "enum_FIELD"], [125, 124, 7, "enum_FIELD"], [131, 133, 7, "enum_FIELD"], [142, 143, 7, "enum_FIELD"], [161, 159, 7, "enum_FIELD"], [133, 132, 7, "enum_FIELD"], [133, 134, 7, "enum_FIELD"], [159, 158, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [9, 2, 10, "enum_LAST_LEXICAL_USE"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 23, 9, "enum_NEXT_SYNTAX"], [24, 9, 10, "enum_LAST_LEXICAL_USE"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [30, 24, 10, "enum_LAST_LEXICAL_USE"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [44, 38, 10, "enum_LAST_LEXICAL_USE"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [52, 42, 10, "enum_LAST_LEXICAL_USE"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [58, 50, 10, "enum_LAST_LEXICAL_USE"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [65, 30, 10, "enum_LAST_LEXICAL_USE"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [81, 58, 10, "enum_LAST_LEXICAL_USE"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [88, 65, 10, "enum_LAST_LEXICAL_USE"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [104, 56, 10, "enum_LAST_LEXICAL_USE"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 111, 9, "enum_NEXT_SYNTAX"], [112, 104, 10, "enum_LAST_LEXICAL_USE"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [124, 79, 10, "enum_LAST_LEXICAL_USE"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 131, 9, "enum_NEXT_SYNTAX"], [132, 112, 10, "enum_LAST_LEXICAL_USE"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [10, 16, 1, "enum_CFG_NEXT"], [10, 23, 1, "enum_CFG_NEXT"], [23, 150, 1, "enum_CFG_NEXT"], [150, 152, 1, "enum_CFG_NEXT"], [152, 155, 1, "enum_CFG_NEXT"], [155, 165, 1, "enum_CFG_NEXT"], [9, 2, 3, "enum_LAST_WRITE"], [30, 9, 2, "enum_LAST_READ"], [30, 2, 3, "enum_LAST_WRITE"], [24, 30, 2, "enum_LAST_READ"], [24, 2, 3, "enum_LAST_WRITE"], [24, 30, 4, "enum_COMPUTED_FROM"], [24, 26, 4, "enum_COMPUTED_FROM"], [42, 44, 4, "enum_COMPUTED_FROM"], [50, 52, 4, "enum_COMPUTED_FROM"], [56, 58, 4, "enum_COMPUTED_FROM"], [56, 65, 4, "enum_COMPUTED_FROM"], [79, 81, 4, "enum_COMPUTED_FROM"], [79, 88, 4, "enum_COMPUTED_FROM"]], "error_location": 132, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/ssi-dk/bifrost.git", "old_path": "lib/bifrostlib/bifrostlib/mongo_interface.py", "hash": "d05050feff39d057a8db6b64d31645efbf741200", "code": "def query_ncbi_species(species_entry: Optional[str]) -> Optional[str]:\n    if species_entry is None:\n        return None\n    try:\n        species_entry: re.Pattern = re.compile(species_entry)\n        with get_connection() as connection:\n            db: Database = connection.get_database()  # Database name is ngs_runs\n            species_db: Collection = db.species  # Collection name is samples\n            result: Optional[Dict[str, Any]] = species_db.find_one({\"organism\": species_entry}, {\"ncbi_species\": 1, \"_id\": 0})\n            group_result: Optional[Dict[str, Any]] = species_db.find_one({\"group\": species_entry}, {\"ncbi_species\": 1, \"_id\": 0})\n            if result is not None:\n                return result[\"ncbi_species\"]\n            elif group_result is not None:\n                return result[\"ncbi_species\"]\n            else:\n                return None\n    except Exception as e:\n        print(traceback.format_exc())\n        return None\n", "rewrite": "ReplaceText(target='group_result' @(146,23)->(146,29))", "error_line": 13, "has_bug": true, "code_full": "import re\nimport traceback\nfrom typing import Any, Dict, Optional\n\nfrom pymongo.collection import Collection\n\n\nclass Database:\n    @property\n    def species(self) -> Collection:\n        # Dummy implementation\n        return Collection(self, \"species\")\n\nclass Connection:\n    def __enter__(self) -> \"Connection\":\n        return self\n    def __exit__(self, exc_type, exc_val, exc_tb) :\n        pass\n    def get_database(self) -> Any:\n        return Database()\n\ndef get_connection() -> Connection:\n\n    return Connection()\n\ndef query_ncbi_species(species_entry: Optional[str]) -> Optional[str]:\n    if species_entry is None:\n        return None\n    try:\n        species_entry: re.Pattern = re.compile(species_entry)\n        with get_connection() as connection:\n            db: Database = connection.get_database()  # Database name is ngs_runs\n            species_db: Collection = db.species  # Collection name is samples\n            result: Optional[Dict[str, Any]] = species_db.find_one({\"organism\": species_entry}, {\"ncbi_species\": 1, \"_id\": 0})\n            group_result: Optional[Dict[str, Any]] = species_db.find_one({\"group\": species_entry}, {\"ncbi_species\": 1, \"_id\": 0})\n            if result is not None:\n                return result[\"ncbi_species\"]\n            elif group_result is not None:\n                return result[\"ncbi_species\"]\n            else:\n                return None\n    except Exception as e:\n        print(traceback.format_exc())\n        return None\n", "error_location_char": [801, 807], "type_checked_pytype": true, "type_error_label": "index", "type_checked_mypy": false}
{"source_tokens": ["#NEWLINE#", "def generate_output(", "args", ",", "output_dict", ",", "output_order", ")", ":", "#NEWLINE#", "#INDENT#", "if", "args", ".", "json", ":", "#NEWLINE#", "#INDENT#", "print", "(", "json", ".", "dumps", "(", "output_dict", ",", "indent", "=", "3", ",", "sort_keys", "=", "True", ")", ".", "replace", "(", "' \\n'", ",", "'\\n'", ")", ")", "#NEWLINE#", "return", "#NEWLINE#", "#UNINDENT#", "if", "(", "len", "(", "output_order", ")", "==", "0", ")", ":", "#NEWLINE#", "#INDENT#", "print", "(", "'no output: use -j option to see keys'", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "len", "(", "output_order", ")", "==", "1", ")", ":", "#NEWLINE#", "#INDENT#", "print", "(", "output_dict", "[", "output_order", "[", "0", "]", "[", "0", "]", "]", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "dump_output", "(", "output_dict", ",", "output_order", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [11, 13, 7, "enum_FIELD"], [55, 52, 7, "enum_FIELD"], [13, 12, 7, "enum_FIELD"], [17, 19, 7, "enum_FIELD"], [52, 49, 7, "enum_FIELD"], [57, 59, 7, "enum_FIELD"], [77, 74, 7, "enum_FIELD"], [19, 18, 7, "enum_FIELD"], [49, 48, 7, "enum_FIELD"], [59, 58, 7, "enum_FIELD"], [74, 71, 7, "enum_FIELD"], [79, 81, 7, "enum_FIELD"], [98, 102, 7, "enum_FIELD"], [38, 34, 7, "enum_FIELD"], [71, 70, 7, "enum_FIELD"], [81, 80, 7, "enum_FIELD"], [102, 99, 7, "enum_FIELD"], [34, 25, 7, "enum_FIELD"], [83, 82, 7, "enum_FIELD"], [83, 88, 7, "enum_FIELD"], [25, 21, 7, "enum_FIELD"], [88, 85, 7, "enum_FIELD"], [88, 89, 7, "enum_FIELD"], [21, 20, 7, "enum_FIELD"], [26, 28, 7, "enum_FIELD"], [30, 32, 7, "enum_FIELD"], [85, 84, 7, "enum_FIELD"], [85, 86, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 11, 9, "enum_NEXT_SYNTAX"], [12, 2, 10, "enum_LAST_LEXICAL_USE"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [24, 4, 10, "enum_LAST_LEXICAL_USE"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 43, 9, "enum_NEXT_SYNTAX"], [43, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [50, 6, 10, "enum_LAST_LEXICAL_USE"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 57, 9, "enum_NEXT_SYNTAX"], [58, 18, 10, "enum_LAST_LEXICAL_USE"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [70, 48, 10, "enum_LAST_LEXICAL_USE"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [72, 50, 10, "enum_LAST_LEXICAL_USE"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 79, 9, "enum_NEXT_SYNTAX"], [80, 58, 10, "enum_LAST_LEXICAL_USE"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [82, 24, 10, "enum_LAST_LEXICAL_USE"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [84, 72, 10, "enum_LAST_LEXICAL_USE"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [101, 82, 10, "enum_LAST_LEXICAL_USE"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [103, 84, 10, "enum_LAST_LEXICAL_USE"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [3, 13, 1, "enum_CFG_NEXT"], [13, 52, 1, "enum_CFG_NEXT"], [13, 17, 1, "enum_CFG_NEXT"], [17, 43, 1, "enum_CFG_NEXT"], [52, 57, 1, "enum_CFG_NEXT"], [52, 74, 1, "enum_CFG_NEXT"], [74, 79, 1, "enum_CFG_NEXT"], [74, 98, 1, "enum_CFG_NEXT"], [12, 2, 3, "enum_LAST_WRITE"], [24, 4, 3, "enum_LAST_WRITE"], [50, 6, 3, "enum_LAST_WRITE"], [70, 48, 2, "enum_LAST_READ"], [72, 50, 2, "enum_LAST_READ"], [72, 6, 3, "enum_LAST_WRITE"], [82, 4, 3, "enum_LAST_WRITE"], [84, 72, 2, "enum_LAST_READ"], [84, 6, 3, "enum_LAST_WRITE"], [101, 4, 3, "enum_LAST_WRITE"], [103, 72, 2, "enum_LAST_READ"], [103, 6, 3, "enum_LAST_WRITE"]], "error_location": 72, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/richardkiss/pycoin.git", "old_path": "pycoin/cmds/ku.py", "hash": "6d1df60ddb054d1510f38231a529ccf35a73525a", "code": "def generate_output(args: Any, output_dict: Dict[str, str], output_order: List[str]):\n    if args.json:\n        # the python2 version of json.dumps puts an extra blank prior to the end of each line\n        # the \"replace\" is a hack to make python2 produce the same output as python3\n        print(json.dumps(output_dict, indent=3, sort_keys=True).replace(\" \n\", \"\n\"))\n        return\n\n    if len(output_order) == 0:\n        print(\"no output: use -j option to see keys\")\n    elif len(output_order) == 1:\n        print(output_dict[output_order[0][0]])\n    else:\n        dump_output(output_dict, output_order)\n", "rewrite": "ReplaceText(target='output_dict' @(305,13)->(305,25))", "error_line": 9, "has_bug": true, "code_full": "import json\nfrom typing import Any, Dict, List\n\n\ndef dump_output(output_dict: Dict[str, str], output_order: List[str]):\n    pass\n\ndef generate_output(args: Any, output_dict: Dict[str, str], output_order: List[str]):\n    if args.json:\n        # the python2 version of json.dumps puts an extra blank prior to the end of each line\n        # the \"replace\" is a hack to make python2 produce the same output as python3\n        print(json.dumps(output_dict, indent=3, sort_keys=True).replace(\" \n\", \"\n\"))\n        return\n\n    if len(output_order) == 0:\n        print(\"no output: use -j option to see keys\")\n    elif len(output_order) == 1:\n        print(output_dict[output_order[0][0]])\n    else:\n        dump_output(output_dict, output_order)\n", "error_location_char": [481, 493], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def test_generalized_normal(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'Test the generalized normal sampling\\n\\n    '", "#NEWLINE#", "from", "baobab.distributions", "import", "sample_generalized_normal", "#NEWLINE#", "mu", "=", "0.0", "#NEWLINE#", "alpha", "=", "0.5", "#NEWLINE#", "p", "=", "10.0", "#NEWLINE#", "n_samples", "=", "(", "10", "**", "4", ")", "#NEWLINE#", "sample", "=", "np", ".", "zeros", "(", "(", "n_samples", ",", ")", ")", "#NEWLINE#", "for", "i", "in", "range", "(", "n_samples", ")", ":", "#NEWLINE#", "#INDENT#", "sample", "[", "i", "]", "=", "sample_generalized_normal", "(", "mu", "=", "mu", ",", "alpha", "=", "alpha", ",", "p", "=", "p", ")", "#NEWLINE#", "#UNINDENT#", "sample_mean", "=", "np", ".", "mean", "(", "sample", ")", "#NEWLINE#", "sample_var", "=", "np", ".", "var", "(", "sample", ")", "#NEWLINE#", "sample_skew", "=", "skew", "(", "sample", ")", "#NEWLINE#", "sample_kurtosis", "=", "kurtosis", "(", "sample", ")", "#NEWLINE#", "exp_mean", "=", "mu", "#NEWLINE#", "exp_var", "=", "(", "(", "(", "alpha", "**", "2.0", ")", "*", "gamma", "(", "(", "3", "/", "p", ")", ")", ")", "/", "gamma", "(", "(", "1", "/", "p", ")", ")", ")", "#NEWLINE#", "exp_skew", "=", "0", "#NEWLINE#", "exp_kurtosis", "=", "(", "(", "(", "gamma", "(", "(", "5", "/", "p", ")", ")", "*", "gamma", "(", "(", "1", "/", "p", ")", ")", ")", "/", "(", "gamma", "(", "(", "3", "/", "p", ")", ")", "**", "2.0", ")", ")", "-", "3.0", ")", "#NEWLINE#", "precision", "=", "2", "#NEWLINE#", "np", ".", "testing", ".", "assert_almost_equal", "(", "sample_mean", ",", "mu", ",", "precision", ")", "#NEWLINE#", "np", ".", "testing", ".", "assert_almost_equal", "(", "sample_var", ",", "exp_var", ",", "precision", ")", "#NEWLINE#", "np", ".", "testing", ".", "assert_almost_equal", "(", "sample_skew", ",", "exp_skew", ",", "precision", ")", "#NEWLINE#", "np", ".", "testing", ".", "assert_almost_equal", "(", "sample_kurtosis", ",", "exp_kurtosis", ",", "precision", ")"], "edges": [[6, 7, 7, "enum_FIELD"], [13, 16, 7, "enum_FIELD"], [17, 20, 7, "enum_FIELD"], [21, 24, 7, "enum_FIELD"], [25, 30, 7, "enum_FIELD"], [33, 39, 7, "enum_FIELD"], [48, 47, 7, "enum_FIELD"], [48, 50, 7, "enum_FIELD"], [76, 82, 7, "enum_FIELD"], [85, 91, 7, "enum_FIELD"], [94, 98, 7, "enum_FIELD"], [101, 105, 7, "enum_FIELD"], [108, 111, 7, "enum_FIELD"], [112, 132, 7, "enum_FIELD"], [142, 145, 7, "enum_FIELD"], [146, 184, 7, "enum_FIELD"], [187, 190, 7, "enum_FIELD"], [191, 199, 7, "enum_FIELD"], [204, 212, 7, "enum_FIELD"], [217, 225, 7, "enum_FIELD"], [230, 238, 7, "enum_FIELD"], [30, 29, 7, "enum_FIELD"], [30, 31, 7, "enum_FIELD"], [39, 37, 7, "enum_FIELD"], [50, 49, 7, "enum_FIELD"], [55, 66, 7, "enum_FIELD"], [82, 80, 7, "enum_FIELD"], [91, 89, 7, "enum_FIELD"], [98, 97, 7, "enum_FIELD"], [105, 104, 7, "enum_FIELD"], [132, 122, 7, "enum_FIELD"], [132, 134, 7, "enum_FIELD"], [184, 170, 7, "enum_FIELD"], [184, 185, 7, "enum_FIELD"], [199, 195, 7, "enum_FIELD"], [212, 208, 7, "enum_FIELD"], [225, 221, 7, "enum_FIELD"], [238, 234, 7, "enum_FIELD"], [37, 36, 7, "enum_FIELD"], [57, 56, 7, "enum_FIELD"], [57, 58, 7, "enum_FIELD"], [66, 61, 7, "enum_FIELD"], [80, 79, 7, "enum_FIELD"], [89, 88, 7, "enum_FIELD"], [122, 119, 7, "enum_FIELD"], [122, 124, 7, "enum_FIELD"], [134, 133, 7, "enum_FIELD"], [170, 160, 7, "enum_FIELD"], [170, 180, 7, "enum_FIELD"], [195, 193, 7, "enum_FIELD"], [208, 206, 7, "enum_FIELD"], [221, 219, 7, "enum_FIELD"], [234, 232, 7, "enum_FIELD"], [63, 65, 7, "enum_FIELD"], [67, 69, 7, "enum_FIELD"], [71, 73, 7, "enum_FIELD"], [119, 118, 7, "enum_FIELD"], [119, 120, 7, "enum_FIELD"], [124, 123, 7, "enum_FIELD"], [137, 136, 7, "enum_FIELD"], [137, 138, 7, "enum_FIELD"], [160, 153, 7, "enum_FIELD"], [160, 162, 7, "enum_FIELD"], [180, 173, 7, "enum_FIELD"], [180, 181, 7, "enum_FIELD"], [193, 192, 7, "enum_FIELD"], [206, 205, 7, "enum_FIELD"], [219, 218, 7, "enum_FIELD"], [232, 231, 7, "enum_FIELD"], [127, 126, 7, "enum_FIELD"], [127, 128, 7, "enum_FIELD"], [153, 152, 7, "enum_FIELD"], [162, 161, 7, "enum_FIELD"], [173, 172, 7, "enum_FIELD"], [156, 155, 7, "enum_FIELD"], [156, 157, 7, "enum_FIELD"], [165, 164, 7, "enum_FIELD"], [165, 166, 7, "enum_FIELD"], [176, 175, 7, "enum_FIELD"], [176, 177, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [41, 26, 10, "enum_LAST_LEXICAL_USE"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [51, 41, 10, "enum_LAST_LEXICAL_USE"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 55, 9, "enum_NEXT_SYNTAX"], [56, 34, 10, "enum_LAST_LEXICAL_USE"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [58, 47, 10, "enum_LAST_LEXICAL_USE"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [65, 14, 10, "enum_LAST_LEXICAL_USE"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [69, 18, 10, "enum_LAST_LEXICAL_USE"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [73, 22, 10, "enum_LAST_LEXICAL_USE"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [79, 36, 10, "enum_LAST_LEXICAL_USE"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [83, 56, 10, "enum_LAST_LEXICAL_USE"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [88, 79, 10, "enum_LAST_LEXICAL_USE"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [92, 83, 10, "enum_LAST_LEXICAL_USE"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [99, 92, 10, "enum_LAST_LEXICAL_USE"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [106, 99, 10, "enum_LAST_LEXICAL_USE"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [111, 65, 10, "enum_LAST_LEXICAL_USE"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [118, 69, 10, "enum_LAST_LEXICAL_USE"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [128, 73, 10, "enum_LAST_LEXICAL_USE"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [133, 123, 10, "enum_LAST_LEXICAL_USE"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [138, 128, 10, "enum_LAST_LEXICAL_USE"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [152, 133, 10, "enum_LAST_LEXICAL_USE"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [157, 138, 10, "enum_LAST_LEXICAL_USE"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [161, 152, 10, "enum_LAST_LEXICAL_USE"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [166, 157, 10, "enum_LAST_LEXICAL_USE"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [172, 161, 10, "enum_LAST_LEXICAL_USE"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [175, 176, 9, "enum_NEXT_SYNTAX"], [177, 166, 10, "enum_LAST_LEXICAL_USE"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 184, 9, "enum_NEXT_SYNTAX"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [187, 188, 9, "enum_NEXT_SYNTAX"], [188, 189, 9, "enum_NEXT_SYNTAX"], [189, 190, 9, "enum_NEXT_SYNTAX"], [190, 191, 9, "enum_NEXT_SYNTAX"], [192, 88, 10, "enum_LAST_LEXICAL_USE"], [191, 192, 9, "enum_NEXT_SYNTAX"], [192, 193, 9, "enum_NEXT_SYNTAX"], [193, 194, 9, "enum_NEXT_SYNTAX"], [194, 195, 9, "enum_NEXT_SYNTAX"], [195, 196, 9, "enum_NEXT_SYNTAX"], [196, 197, 9, "enum_NEXT_SYNTAX"], [198, 77, 10, "enum_LAST_LEXICAL_USE"], [197, 198, 9, "enum_NEXT_SYNTAX"], [198, 199, 9, "enum_NEXT_SYNTAX"], [200, 111, 10, "enum_LAST_LEXICAL_USE"], [199, 200, 9, "enum_NEXT_SYNTAX"], [200, 201, 9, "enum_NEXT_SYNTAX"], [202, 188, 10, "enum_LAST_LEXICAL_USE"], [201, 202, 9, "enum_NEXT_SYNTAX"], [202, 203, 9, "enum_NEXT_SYNTAX"], [203, 204, 9, "enum_NEXT_SYNTAX"], [205, 192, 10, "enum_LAST_LEXICAL_USE"], [204, 205, 9, "enum_NEXT_SYNTAX"], [205, 206, 9, "enum_NEXT_SYNTAX"], [206, 207, 9, "enum_NEXT_SYNTAX"], [207, 208, 9, "enum_NEXT_SYNTAX"], [208, 209, 9, "enum_NEXT_SYNTAX"], [209, 210, 9, "enum_NEXT_SYNTAX"], [211, 86, 10, "enum_LAST_LEXICAL_USE"], [210, 211, 9, "enum_NEXT_SYNTAX"], [211, 212, 9, "enum_NEXT_SYNTAX"], [213, 113, 10, "enum_LAST_LEXICAL_USE"], [212, 213, 9, "enum_NEXT_SYNTAX"], [213, 214, 9, "enum_NEXT_SYNTAX"], [215, 202, 10, "enum_LAST_LEXICAL_USE"], [214, 215, 9, "enum_NEXT_SYNTAX"], [215, 216, 9, "enum_NEXT_SYNTAX"], [216, 217, 9, "enum_NEXT_SYNTAX"], [218, 205, 10, "enum_LAST_LEXICAL_USE"], [217, 218, 9, "enum_NEXT_SYNTAX"], [218, 219, 9, "enum_NEXT_SYNTAX"], [219, 220, 9, "enum_NEXT_SYNTAX"], [220, 221, 9, "enum_NEXT_SYNTAX"], [221, 222, 9, "enum_NEXT_SYNTAX"], [222, 223, 9, "enum_NEXT_SYNTAX"], [224, 95, 10, "enum_LAST_LEXICAL_USE"], [223, 224, 9, "enum_NEXT_SYNTAX"], [224, 225, 9, "enum_NEXT_SYNTAX"], [226, 143, 10, "enum_LAST_LEXICAL_USE"], [225, 226, 9, "enum_NEXT_SYNTAX"], [226, 227, 9, "enum_NEXT_SYNTAX"], [228, 215, 10, "enum_LAST_LEXICAL_USE"], [227, 228, 9, "enum_NEXT_SYNTAX"], [228, 229, 9, "enum_NEXT_SYNTAX"], [229, 230, 9, "enum_NEXT_SYNTAX"], [231, 218, 10, "enum_LAST_LEXICAL_USE"], [230, 231, 9, "enum_NEXT_SYNTAX"], [231, 232, 9, "enum_NEXT_SYNTAX"], [232, 233, 9, "enum_NEXT_SYNTAX"], [233, 234, 9, "enum_NEXT_SYNTAX"], [234, 235, 9, "enum_NEXT_SYNTAX"], [235, 236, 9, "enum_NEXT_SYNTAX"], [237, 102, 10, "enum_LAST_LEXICAL_USE"], [236, 237, 9, "enum_NEXT_SYNTAX"], [237, 238, 9, "enum_NEXT_SYNTAX"], [239, 147, 10, "enum_LAST_LEXICAL_USE"], [238, 239, 9, "enum_NEXT_SYNTAX"], [239, 240, 9, "enum_NEXT_SYNTAX"], [241, 228, 10, "enum_LAST_LEXICAL_USE"], [240, 241, 9, "enum_NEXT_SYNTAX"], [241, 242, 9, "enum_NEXT_SYNTAX"], [6, 10, 1, "enum_CFG_NEXT"], [10, 13, 1, "enum_CFG_NEXT"], [13, 17, 1, "enum_CFG_NEXT"], [17, 21, 1, "enum_CFG_NEXT"], [21, 25, 1, "enum_CFG_NEXT"], [25, 33, 1, "enum_CFG_NEXT"], [33, 50, 1, "enum_CFG_NEXT"], [50, 47, 1, "enum_CFG_NEXT"], [47, 55, 1, "enum_CFG_NEXT"], [47, 76, 1, "enum_CFG_NEXT"], [55, 47, 1, "enum_CFG_NEXT"], [76, 85, 1, "enum_CFG_NEXT"], [85, 94, 1, "enum_CFG_NEXT"], [94, 101, 1, "enum_CFG_NEXT"], [101, 108, 1, "enum_CFG_NEXT"], [108, 112, 1, "enum_CFG_NEXT"], [112, 142, 1, "enum_CFG_NEXT"], [142, 146, 1, "enum_CFG_NEXT"], [146, 187, 1, "enum_CFG_NEXT"], [187, 191, 1, "enum_CFG_NEXT"], [191, 204, 1, "enum_CFG_NEXT"], [204, 217, 1, "enum_CFG_NEXT"], [217, 230, 1, "enum_CFG_NEXT"], [41, 26, 3, "enum_LAST_WRITE"], [51, 41, 2, "enum_LAST_READ"], [51, 26, 3, "enum_LAST_WRITE"], [47, 58, 2, "enum_LAST_READ"], [47, 47, 3, "enum_LAST_WRITE"], [61, 61, 2, "enum_LAST_READ"], [65, 65, 2, "enum_LAST_READ"], [65, 14, 3, "enum_LAST_WRITE"], [69, 69, 2, "enum_LAST_READ"], [69, 18, 3, "enum_LAST_WRITE"], [73, 73, 2, "enum_LAST_READ"], [73, 22, 3, "enum_LAST_WRITE"], [56, 56, 2, "enum_LAST_READ"], [56, 34, 3, "enum_LAST_WRITE"], [58, 58, 2, "enum_LAST_READ"], [58, 47, 3, "enum_LAST_WRITE"], [79, 36, 2, "enum_LAST_READ"], [83, 56, 2, "enum_LAST_READ"], [83, 34, 3, "enum_LAST_WRITE"], [88, 79, 2, "enum_LAST_READ"], [92, 83, 2, "enum_LAST_READ"], [92, 34, 3, "enum_LAST_WRITE"], [99, 92, 2, "enum_LAST_READ"], [99, 34, 3, "enum_LAST_WRITE"], [106, 99, 2, "enum_LAST_READ"], [106, 34, 3, "enum_LAST_WRITE"], [111, 65, 2, "enum_LAST_READ"], [111, 14, 3, "enum_LAST_WRITE"], [118, 69, 2, "enum_LAST_READ"], [118, 18, 3, "enum_LAST_WRITE"], [128, 73, 2, "enum_LAST_READ"], [128, 22, 3, "enum_LAST_WRITE"], [133, 123, 2, "enum_LAST_READ"], [138, 128, 2, "enum_LAST_READ"], [138, 22, 3, "enum_LAST_WRITE"], [152, 133, 2, "enum_LAST_READ"], [157, 138, 2, "enum_LAST_READ"], [157, 22, 3, "enum_LAST_WRITE"], [161, 152, 2, "enum_LAST_READ"], [166, 157, 2, "enum_LAST_READ"], [166, 22, 3, "enum_LAST_WRITE"], [172, 161, 2, "enum_LAST_READ"], [177, 166, 2, "enum_LAST_READ"], [177, 22, 3, "enum_LAST_WRITE"], [192, 88, 2, "enum_LAST_READ"], [198, 77, 3, "enum_LAST_WRITE"], [200, 111, 2, "enum_LAST_READ"], [200, 14, 3, "enum_LAST_WRITE"], [202, 188, 3, "enum_LAST_WRITE"], [205, 192, 2, "enum_LAST_READ"], [211, 86, 3, "enum_LAST_WRITE"], [213, 113, 3, "enum_LAST_WRITE"], [215, 202, 2, "enum_LAST_READ"], [215, 188, 3, "enum_LAST_WRITE"], [218, 205, 2, "enum_LAST_READ"], [224, 95, 3, "enum_LAST_WRITE"], [226, 143, 3, "enum_LAST_WRITE"], [228, 215, 2, "enum_LAST_READ"], [228, 188, 3, "enum_LAST_WRITE"], [231, 218, 2, "enum_LAST_READ"], [237, 102, 3, "enum_LAST_WRITE"], [239, 147, 3, "enum_LAST_WRITE"], [241, 228, 2, "enum_LAST_READ"], [241, 188, 3, "enum_LAST_WRITE"], [34, 36, 4, "enum_COMPUTED_FROM"], [34, 41, 4, "enum_COMPUTED_FROM"], [77, 83, 4, "enum_COMPUTED_FROM"], [77, 79, 4, "enum_COMPUTED_FROM"], [86, 92, 4, "enum_COMPUTED_FROM"], [86, 88, 4, "enum_COMPUTED_FROM"], [95, 97, 4, "enum_COMPUTED_FROM"], [95, 99, 4, "enum_COMPUTED_FROM"], [102, 104, 4, "enum_COMPUTED_FROM"], [102, 106, 4, "enum_COMPUTED_FROM"], [109, 111, 4, "enum_COMPUTED_FROM"], [113, 133, 4, "enum_COMPUTED_FROM"], [113, 118, 4, "enum_COMPUTED_FROM"], [113, 123, 4, "enum_COMPUTED_FROM"], [113, 138, 4, "enum_COMPUTED_FROM"], [113, 128, 4, "enum_COMPUTED_FROM"], [147, 152, 4, "enum_COMPUTED_FROM"], [147, 161, 4, "enum_COMPUTED_FROM"], [147, 172, 4, "enum_COMPUTED_FROM"], [147, 157, 4, "enum_COMPUTED_FROM"], [147, 166, 4, "enum_COMPUTED_FROM"], [147, 177, 4, "enum_COMPUTED_FROM"], [57, 61, 4, "enum_COMPUTED_FROM"], [57, 65, 4, "enum_COMPUTED_FROM"], [57, 69, 4, "enum_COMPUTED_FROM"], [57, 73, 4, "enum_COMPUTED_FROM"]], "error_location": 200, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/jiwoncpark/baobab.git", "old_path": "baobab/tests/test_distributions/test_distributions.py", "hash": "a6a56166079636e36467522f1854976980648167", "code": "def test_generalized_normal(self) -> None:\n    \"\"\"Test the generalized normal sampling\n\n    \"\"\"\n    from baobab.distributions import sample_generalized_normal\n    mu: float = 0.0\n    alpha: float = 0.5\n    p: float = 10.0\n    n_samples: int = 10**4\n    sample: np.ndarray = np.zeros((n_samples,))\n    for i in range(n_samples):\n        sample[i] = sample_generalized_normal(mu=mu, alpha=alpha, p=p)\n    sample_mean: float = np.mean(sample)\n    sample_var: float = np.var(sample)\n    sample_skew: float = skew(sample)\n    sample_kurtosis: float = kurtosis(sample)\n    #sample_entropy = entropy(sample)\n    exp_mean: float = mu\n    exp_var: float = alpha**2.0 * gamma(3/p) / gamma(1/p)\n    exp_skew: float = 0\n    exp_kurtosis: float = gamma(5/p) * gamma(1/p) / gamma(3/p)**2.0 - 3.0\n    #exp_entropy = 1/p - np.log(p / (2 * alpha * gamma(1/p)))\n    precision: int = 2\n    np.testing.assert_almost_equal(sample_mean, mu, precision)\n    np.testing.assert_almost_equal(sample_var, exp_var, precision)\n    np.testing.assert_almost_equal(sample_skew, exp_skew, precision)\n    np.testing.assert_almost_equal(sample_kurtosis, exp_kurtosis, precision)\n", "rewrite": "ReplaceText(target='exp_mean' @(52,52)->(52,54))", "error_line": 23, "has_bug": true, "code_full": "import numpy as np\nfrom scipy.special import gamma\nfrom scipy.stats import kurtosis, skew\n\n\ndef test_generalized_normal(self) -> None:\n    \"\"\"Test the generalized normal sampling\n\n    \"\"\"\n    from baobab.distributions import sample_generalized_normal\n    mu: float = 0.0\n    alpha: float = 0.5\n    p: float = 10.0\n    n_samples: int = 10**4\n    sample: np.ndarray = np.zeros((n_samples,))\n    for i in range(n_samples):\n        sample[i] = sample_generalized_normal(mu=mu, alpha=alpha, p=p)\n    sample_mean: float = np.mean(sample)\n    sample_var: float = np.var(sample)\n    sample_skew: float = skew(sample)\n    sample_kurtosis: float = kurtosis(sample)\n    #sample_entropy = entropy(sample)\n    exp_mean: float = mu\n    exp_var: float = alpha**2.0 * gamma(3/p) / gamma(1/p)\n    exp_skew: float = 0\n    exp_kurtosis: float = gamma(5/p) * gamma(1/p) / gamma(3/p)**2.0 - 3.0\n    #exp_entropy = 1/p - np.log(p / (2 * alpha * gamma(1/p)))\n    precision: int = 2\n    np.testing.assert_almost_equal(sample_mean, mu, precision)\n    np.testing.assert_almost_equal(sample_var, exp_var, precision)\n    np.testing.assert_almost_equal(sample_skew, exp_skew, precision)\n    np.testing.assert_almost_equal(sample_kurtosis, exp_kurtosis, precision)\n", "error_location_char": [915, 917], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def from_bbox(", "cls", ",", "bbox", ",", "image", "=", "None", ",", "category", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Creates annotation from bounding box\\n\\n    :param image: image assoicated with annotation\\n    :type image: :class:`Image` \\n    :param category: category to label annotation\\n    :type category: :class:`Category` \\n    :param polygons: bbox to create annotation from\\n    :type polygons: :class:`BBox`, list, tuple\\n    '", "#NEWLINE#", "return", "cls", "(", "image", "=", "image", ",", "category", "=", "image", ",", "bbox", "=", "bbox", ")"], "edges": [[1, 7, 7, "enum_FIELD"], [16, 17, 7, "enum_FIELD"], [19, 25, 7, "enum_FIELD"], [25, 20, 7, "enum_FIELD"], [22, 24, 7, "enum_FIELD"], [26, 28, 7, "enum_FIELD"], [30, 32, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 19, 9, "enum_NEXT_SYNTAX"], [20, 2, 10, "enum_LAST_LEXICAL_USE"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [24, 6, 10, "enum_LAST_LEXICAL_USE"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [28, 24, 10, "enum_LAST_LEXICAL_USE"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [32, 4, 10, "enum_LAST_LEXICAL_USE"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [8, 12, 1, "enum_CFG_NEXT"], [12, 1, 1, "enum_CFG_NEXT"], [7, 16, 1, "enum_CFG_NEXT"], [16, 19, 1, "enum_CFG_NEXT"], [20, 2, 3, "enum_LAST_WRITE"], [24, 6, 3, "enum_LAST_WRITE"], [28, 24, 2, "enum_LAST_READ"], [28, 6, 3, "enum_LAST_WRITE"], [32, 4, 3, "enum_LAST_WRITE"]], "error_location": 28, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/jsbroks/imantics.git", "old_path": "imantics/annotation.py", "hash": "a9919325c1628d65cc0baf150599e3d04d6cf1be", "code": "@classmethod\ndef from_bbox(cls, bbox: BBox, image: Optional[Image]=None, category: Optional[Category]=None):\n    \"\"\"\n    Creates annotation from bounding box\n\n    :param image: image assoicated with annotation\n    :type image: :class:`Image`\n    :param category: category to label annotation\n    :type category: :class:`Category`\n    :param polygons: bbox to create annotation from\n    :type polygons: :class:`BBox`, list, tuple\n    \"\"\"\n    return cls(image=image, category=image, bbox=bbox)\n", "rewrite": "ReplaceText(target='category' @(46,41)->(46,46))", "error_line": 11, "has_bug": true, "code_full": "from typing import Optional\n\n\nclass Image:\n    pass\n\n\nclass Category:\n    pass\n\n\nclass BBox:\n    pass\n\n\nclass Annotation:\n    def __init__(\n        self,\n        image: Optional[Image] = None,\n        category: Optional[Category] = None,\n        bbox: Optional[BBox] = None,\n    ):\n        pass\n\n    @classmethod\n    def from_bbox(cls, bbox: BBox, image: Optional[Image]=None, category: Optional[Category]=None):\n        \"\"\"\n        Creates annotation from bounding box\n\n        :param image: image assoicated with annotation\n        :type image: :class:`Image`\n        :param category: category to label annotation\n        :type category: :class:`Category`\n        :param polygons: bbox to create annotation from\n        :type polygons: :class:`BBox`, list, tuple\n        \"\"\"\n        return cls(image=image, category=image, bbox=bbox)\n\n", "error_location_char": [474, 479], "type_checked_pytype": true, "type_error_label": "arg-type", "type_checked_mypy": false}
{"source_tokens": ["#NEWLINE#", "def remoteSliderUpdate(", "self", ",", "widget", ",", "value", ",", "sliderMoved", "=", "True", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Gets called when a user interacts with the slider\\n    :param widget: the widget the user interacted with\\n    :param value: the actual value of the widget\\n    :param sliderMoved: False if gets called from another widget\\n    '", "#NEWLINE#", "if", "(", "not", "sliderMoved", ")", ":", "#NEWLINE#", "#INDENT#", "for", "wid", "in", "self", ".", "remoteWidgetLayout", ".", "list", ":", "#NEWLINE#", "#INDENT#", "if", "isinstance", "(", "wid", ",", "MovableSlider", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "(", "wid", ".", "module", "==", "widget", ".", "module", ")", "and", "(", "wid", ".", "parameter", "==", "widget", ".", "parameter", ")", ")", ":", "#NEWLINE#", "#INDENT#", "wid", ".", "setValue", "(", "float", "(", "value", ")", ")", "#NEWLINE#", "wid", ".", "valueOn", "=", "value", "#NEWLINE#", "wid", ".", "label", ".", "setText", "(", "(", "(", "wid", ".", "widgetName", "+", "': '", ")", "+", "'{:.3f}'", ".", "format", "(", "widget", ".", "value", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "widget", ".", "valueOn", "=", "value", "#NEWLINE#", "widget", ".", "label", ".", "setText", "(", "(", "(", "widget", ".", "widgetName", "+", "': '", ")", "+", "'{:.3f}'", ".", "format", "(", "widget", ".", "value", ")", ")", ")"], "edges": [[1, 5, 7, "enum_FIELD"], [14, 15, 7, "enum_FIELD"], [22, 19, 7, "enum_FIELD"], [19, 20, 7, "enum_FIELD"], [27, 26, 7, "enum_FIELD"], [27, 31, 7, "enum_FIELD"], [120, 125, 7, "enum_FIELD"], [126, 132, 7, "enum_FIELD"], [31, 29, 7, "enum_FIELD"], [36, 40, 7, "enum_FIELD"], [122, 121, 7, "enum_FIELD"], [132, 130, 7, "enum_FIELD"], [29, 28, 7, "enum_FIELD"], [40, 37, 7, "enum_FIELD"], [46, 57, 7, "enum_FIELD"], [130, 128, 7, "enum_FIELD"], [141, 138, 7, "enum_FIELD"], [141, 145, 7, "enum_FIELD"], [70, 74, 7, "enum_FIELD"], [80, 85, 7, "enum_FIELD"], [86, 92, 7, "enum_FIELD"], [128, 127, 7, "enum_FIELD"], [138, 136, 7, "enum_FIELD"], [138, 139, 7, "enum_FIELD"], [145, 143, 7, "enum_FIELD"], [52, 50, 7, "enum_FIELD"], [62, 60, 7, "enum_FIELD"], [74, 72, 7, "enum_FIELD"], [82, 81, 7, "enum_FIELD"], [92, 90, 7, "enum_FIELD"], [136, 135, 7, "enum_FIELD"], [143, 142, 7, "enum_FIELD"], [147, 146, 7, "enum_FIELD"], [50, 49, 7, "enum_FIELD"], [54, 53, 7, "enum_FIELD"], [60, 59, 7, "enum_FIELD"], [64, 63, 7, "enum_FIELD"], [72, 71, 7, "enum_FIELD"], [76, 75, 7, "enum_FIELD"], [90, 88, 7, "enum_FIELD"], [101, 98, 7, "enum_FIELD"], [101, 105, 7, "enum_FIELD"], [88, 87, 7, "enum_FIELD"], [98, 96, 7, "enum_FIELD"], [98, 99, 7, "enum_FIELD"], [105, 103, 7, "enum_FIELD"], [96, 95, 7, "enum_FIELD"], [103, 102, 7, "enum_FIELD"], [107, 106, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [20, 8, 10, "enum_LAST_LEXICAL_USE"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [28, 2, 10, "enum_LAST_LEXICAL_USE"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [39, 26, 10, "enum_LAST_LEXICAL_USE"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [49, 39, 10, "enum_LAST_LEXICAL_USE"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [53, 4, 10, "enum_LAST_LEXICAL_USE"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [59, 49, 10, "enum_LAST_LEXICAL_USE"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [63, 53, 10, "enum_LAST_LEXICAL_USE"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 70, 9, "enum_NEXT_SYNTAX"], [71, 59, 10, "enum_LAST_LEXICAL_USE"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [77, 6, 10, "enum_LAST_LEXICAL_USE"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [81, 71, 10, "enum_LAST_LEXICAL_USE"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [85, 77, 10, "enum_LAST_LEXICAL_USE"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [87, 81, 10, "enum_LAST_LEXICAL_USE"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [95, 87, 10, "enum_LAST_LEXICAL_USE"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [106, 63, 10, "enum_LAST_LEXICAL_USE"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 120, 9, "enum_NEXT_SYNTAX"], [121, 106, 10, "enum_LAST_LEXICAL_USE"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [125, 85, 10, "enum_LAST_LEXICAL_USE"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [127, 121, 10, "enum_LAST_LEXICAL_USE"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [135, 127, 10, "enum_LAST_LEXICAL_USE"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [146, 135, 10, "enum_LAST_LEXICAL_USE"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [10, 1, 1, "enum_CFG_NEXT"], [5, 14, 1, "enum_CFG_NEXT"], [14, 19, 1, "enum_CFG_NEXT"], [19, 31, 1, "enum_CFG_NEXT"], [19, 120, 1, "enum_CFG_NEXT"], [31, 26, 1, "enum_CFG_NEXT"], [26, 40, 1, "enum_CFG_NEXT"], [40, 57, 1, "enum_CFG_NEXT"], [40, 26, 1, "enum_CFG_NEXT"], [57, 26, 1, "enum_CFG_NEXT"], [57, 70, 1, "enum_CFG_NEXT"], [70, 80, 1, "enum_CFG_NEXT"], [80, 86, 1, "enum_CFG_NEXT"], [86, 26, 1, "enum_CFG_NEXT"], [120, 126, 1, "enum_CFG_NEXT"], [20, 8, 3, "enum_LAST_WRITE"], [28, 2, 3, "enum_LAST_WRITE"], [26, 39, 2, "enum_LAST_READ"], [26, 95, 2, "enum_LAST_READ"], [26, 59, 2, "enum_LAST_READ"], [26, 26, 3, "enum_LAST_WRITE"], [37, 37, 2, "enum_LAST_READ"], [39, 39, 2, "enum_LAST_READ"], [39, 95, 2, "enum_LAST_READ"], [39, 59, 2, "enum_LAST_READ"], [39, 26, 3, "enum_LAST_WRITE"], [41, 41, 2, "enum_LAST_READ"], [49, 39, 2, "enum_LAST_READ"], [49, 26, 3, "enum_LAST_WRITE"], [53, 106, 2, "enum_LAST_READ"], [53, 63, 2, "enum_LAST_READ"], [53, 4, 3, "enum_LAST_WRITE"], [59, 49, 2, "enum_LAST_READ"], [59, 26, 3, "enum_LAST_WRITE"], [63, 53, 2, "enum_LAST_READ"], [63, 4, 3, "enum_LAST_WRITE"], [71, 59, 2, "enum_LAST_READ"], [71, 26, 3, "enum_LAST_WRITE"], [75, 75, 2, "enum_LAST_READ"], [77, 85, 2, "enum_LAST_READ"], [77, 6, 3, "enum_LAST_WRITE"], [85, 77, 2, "enum_LAST_READ"], [85, 6, 3, "enum_LAST_WRITE"], [81, 71, 2, "enum_LAST_READ"], [81, 26, 3, "enum_LAST_WRITE"], [87, 81, 2, "enum_LAST_READ"], [87, 26, 3, "enum_LAST_WRITE"], [95, 87, 2, "enum_LAST_READ"], [95, 26, 3, "enum_LAST_WRITE"], [106, 63, 2, "enum_LAST_READ"], [106, 4, 3, "enum_LAST_WRITE"], [125, 6, 3, "enum_LAST_WRITE"], [121, 4, 3, "enum_LAST_WRITE"], [127, 121, 2, "enum_LAST_READ"], [127, 4, 3, "enum_LAST_WRITE"], [135, 127, 2, "enum_LAST_READ"], [135, 4, 3, "enum_LAST_WRITE"], [146, 135, 2, "enum_LAST_READ"], [146, 4, 3, "enum_LAST_WRITE"], [122, 125, 4, "enum_COMPUTED_FROM"], [82, 85, 4, "enum_COMPUTED_FROM"]], "error_location": 106, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/umit-iace/tool-pywisp.git", "old_path": "pywisp/gui.py", "hash": "ea8491fda2af3d354e137085365807aa04194128", "code": "def remoteSliderUpdate(self, widget: MovableSlider, value: float, sliderMoved: bool=True):\n    \"\"\"\n    Gets called when a user interacts with the slider\n    :param widget: the widget the user interacted with\n    :param value: the actual value of the widget\n    :param sliderMoved: False if gets called from another widget\n    \"\"\"\n    if not sliderMoved:\n        for wid in self.remoteWidgetLayout.list:\n            if isinstance(wid, MovableSlider):\n                if wid.module == widget.module and wid.parameter == widget.parameter:\n                    wid.setValue(float(value))\n                    wid.valueOn = value\n                    wid.label.setText(wid.widgetName + ': ' + \"{:.3f}\".format(widget.value))\n    else:\n        widget.valueOn = value\n        widget.label.setText(widget.widgetName + ': ' + \"{:.3f}\".format(widget.value))\n", "rewrite": "ReplaceText(target='wid' @(1595,82)->(1595,88))", "error_line": 13, "has_bug": true, "code_full": "from typing import Any, List\n\n\nclass Label:\n    def setText(self, text: str):\n        pass\n\n\nclass MovableSlider:\n    module: Any\n    parameter: Any\n    widgetName: str\n    valueOn: float\n    label: Label\n    value: float\n\n    def setValue(self, value: float):\n        pass\n\n\nclass RemoteWidgetLayout:\n    list: List\n\n\nclass Class:\n    remoteWidgetLayout: RemoteWidgetLayout\n\n\n    def remoteSliderUpdate(self, widget: MovableSlider, value: float, sliderMoved: bool=True):\n        \"\"\"\n        Gets called when a user interacts with the slider\n        :param widget: the widget the user interacted with\n        :param value: the actual value of the widget\n        :param sliderMoved: False if gets called from another widget\n        \"\"\"\n        if not sliderMoved:\n            for wid in self.remoteWidgetLayout.list:\n                if isinstance(wid, MovableSlider):\n                    if wid.module == widget.module and wid.parameter == widget.parameter:\n                        wid.setValue(float(value))\n                        wid.valueOn = value\n                        wid.label.setText(wid.widgetName + ': ' + \"{:.3f}\".format(widget.value))\n        else:\n            widget.valueOn = value\n            widget.label.setText(widget.widgetName + ': ' + \"{:.3f}\".format(widget.value))\n", "error_location_char": [701, 707], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def unsubscribe(", "self", ",", "callback", ",", "channel", ",", "pattern", "=", "False", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "channel", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "channel", "=", "inspect_listener", "(", "callback", ")", "#NEWLINE#", "pattern", "=", "False", "#NEWLINE#", "#UNINDENT#", "callbacks", "=", "self", ".", "_subscribers", ".", "get", "(", "(", "channel", ",", "pattern", ")", ")", "#NEWLINE#", "if", "callback", ":", "#NEWLINE#", "#INDENT#", "callbacks", ".", "remove", "(", "callback", ")", "#NEWLINE#", "if", "(", "len", "(", "callbacks", ")", "==", "0", ")", ":", "#NEWLINE#", "#INDENT#", "del", "self", ".", "_subscribers", "[", "(", "channel", ",", "pattern", ")", "]", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "self", ".", "_unsubscribe", "(", "callback", ",", "channel", ",", "pattern", ")"], "edges": [[1, 5, 7, "enum_FIELD"], [15, 18, 7, "enum_FIELD"], [35, 43, 7, "enum_FIELD"], [51, 52, 7, "enum_FIELD"], [88, 94, 7, "enum_FIELD"], [18, 17, 7, "enum_FIELD"], [23, 27, 7, "enum_FIELD"], [30, 33, 7, "enum_FIELD"], [43, 41, 7, "enum_FIELD"], [55, 59, 7, "enum_FIELD"], [63, 69, 7, "enum_FIELD"], [94, 90, 7, "enum_FIELD"], [27, 26, 7, "enum_FIELD"], [41, 39, 7, "enum_FIELD"], [59, 57, 7, "enum_FIELD"], [69, 66, 7, "enum_FIELD"], [90, 89, 7, "enum_FIELD"], [39, 38, 7, "enum_FIELD"], [57, 56, 7, "enum_FIELD"], [66, 65, 7, "enum_FIELD"], [79, 77, 7, "enum_FIELD"], [79, 82, 7, "enum_FIELD"], [77, 76, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [17, 6, 10, "enum_LAST_LEXICAL_USE"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 23, 9, "enum_NEXT_SYNTAX"], [24, 17, 10, "enum_LAST_LEXICAL_USE"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [28, 4, 10, "enum_LAST_LEXICAL_USE"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [31, 8, 10, "enum_LAST_LEXICAL_USE"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [38, 2, 10, "enum_LAST_LEXICAL_USE"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [45, 24, 10, "enum_LAST_LEXICAL_USE"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [47, 31, 10, "enum_LAST_LEXICAL_USE"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 51, 9, "enum_NEXT_SYNTAX"], [52, 28, 10, "enum_LAST_LEXICAL_USE"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 55, 9, "enum_NEXT_SYNTAX"], [56, 36, 10, "enum_LAST_LEXICAL_USE"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [60, 52, 10, "enum_LAST_LEXICAL_USE"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [67, 56, 10, "enum_LAST_LEXICAL_USE"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 75, 9, "enum_NEXT_SYNTAX"], [76, 38, 10, "enum_LAST_LEXICAL_USE"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [81, 45, 10, "enum_LAST_LEXICAL_USE"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [83, 47, 10, "enum_LAST_LEXICAL_USE"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 88, 9, "enum_NEXT_SYNTAX"], [89, 76, 10, "enum_LAST_LEXICAL_USE"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [93, 60, 10, "enum_LAST_LEXICAL_USE"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [95, 81, 10, "enum_LAST_LEXICAL_USE"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [97, 83, 10, "enum_LAST_LEXICAL_USE"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [10, 1, 1, "enum_CFG_NEXT"], [5, 18, 1, "enum_CFG_NEXT"], [18, 23, 1, "enum_CFG_NEXT"], [18, 35, 1, "enum_CFG_NEXT"], [23, 30, 1, "enum_CFG_NEXT"], [30, 35, 1, "enum_CFG_NEXT"], [35, 52, 1, "enum_CFG_NEXT"], [52, 55, 1, "enum_CFG_NEXT"], [52, 88, 1, "enum_CFG_NEXT"], [55, 69, 1, "enum_CFG_NEXT"], [69, 88, 1, "enum_CFG_NEXT"], [69, 75, 1, "enum_CFG_NEXT"], [75, 88, 1, "enum_CFG_NEXT"], [17, 6, 3, "enum_LAST_WRITE"], [28, 4, 3, "enum_LAST_WRITE"], [24, 17, 2, "enum_LAST_READ"], [24, 6, 3, "enum_LAST_WRITE"], [31, 8, 3, "enum_LAST_WRITE"], [38, 2, 3, "enum_LAST_WRITE"], [45, 17, 2, "enum_LAST_READ"], [45, 6, 3, "enum_LAST_WRITE"], [45, 24, 3, "enum_LAST_WRITE"], [47, 31, 3, "enum_LAST_WRITE"], [47, 8, 3, "enum_LAST_WRITE"], [52, 28, 2, "enum_LAST_READ"], [52, 4, 3, "enum_LAST_WRITE"], [56, 36, 3, "enum_LAST_WRITE"], [60, 52, 2, "enum_LAST_READ"], [60, 4, 3, "enum_LAST_WRITE"], [67, 56, 2, "enum_LAST_READ"], [67, 36, 3, "enum_LAST_WRITE"], [76, 38, 2, "enum_LAST_READ"], [76, 2, 3, "enum_LAST_WRITE"], [81, 45, 2, "enum_LAST_READ"], [81, 6, 3, "enum_LAST_WRITE"], [81, 24, 3, "enum_LAST_WRITE"], [83, 47, 2, "enum_LAST_READ"], [83, 31, 3, "enum_LAST_WRITE"], [83, 8, 3, "enum_LAST_WRITE"], [89, 38, 2, "enum_LAST_READ"], [89, 76, 2, "enum_LAST_READ"], [89, 2, 3, "enum_LAST_WRITE"], [93, 52, 2, "enum_LAST_READ"], [93, 60, 2, "enum_LAST_READ"], [93, 4, 3, "enum_LAST_WRITE"], [95, 81, 2, "enum_LAST_READ"], [95, 45, 2, "enum_LAST_READ"], [95, 6, 3, "enum_LAST_WRITE"], [95, 24, 3, "enum_LAST_WRITE"], [97, 83, 2, "enum_LAST_READ"], [97, 47, 2, "enum_LAST_READ"], [97, 31, 3, "enum_LAST_WRITE"], [97, 8, 3, "enum_LAST_WRITE"], [36, 45, 4, "enum_COMPUTED_FROM"], [36, 47, 4, "enum_COMPUTED_FROM"], [36, 38, 4, "enum_COMPUTED_FROM"], [24, 26, 4, "enum_COMPUTED_FROM"], [24, 28, 4, "enum_COMPUTED_FROM"]], "error_location": 52, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/thrau/pymq.git", "old_path": "pymq/provider/base.py", "hash": "3b7c4e61b1e5a9387085ac91448070df0a8b6f73", "code": "def unsubscribe(self: Any, callback: Callable, channel: Optional[Any], pattern: bool=False):\n    if channel is None:\n        channel = inspect_listener(callback)\n        pattern = False\n\n    callbacks: Optional[List[Callable]] = self._subscribers.get((channel, pattern))\n\n    if callback:\n        callbacks.remove(callback)\n        if len(callbacks) == 0:\n            del self._subscribers[(channel, pattern)]\n\n    self._unsubscribe(callback, channel, pattern)\n", "rewrite": "ReplaceText(target='callbacks' @(236,11)->(236,19))", "error_line": 7, "has_bug": true, "code_full": "from typing import Any, Callable, List, Optional\n\n\ndef inspect_listener(callback: Callable) -> Any:\n    pass\n\n\ndef unsubscribe(self: Any, callback: Callable, channel: Optional[Any], pattern: bool=False):\n    if channel is None:\n        channel = inspect_listener(callback)\n        pattern = False\n\n    callbacks: Optional[List[Callable]] = self._subscribers.get((channel, pattern))\n\n    if callback:\n        callbacks.remove(callback)\n        if len(callbacks) == 0:\n            del self._subscribers[(channel, pattern)]\n\n    self._unsubscribe(callback, channel, pattern)\n", "error_location_char": [279, 287], "type_checked_pytype": true, "type_error_label": "attribute-error,indirect", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def request(", "self", ",", "verb", ",", "method", ",", "**kwargs", ")", ":", "#NEWLINE#", "#INDENT#", "verb", "=", "verb", ".", "upper", "(", ")", "#NEWLINE#", "request_kwargs", "=", "{", "}", "#NEWLINE#", "if", "(", "method", "==", "'GET'", ")", ":", "#NEWLINE#", "#INDENT#", "request_kwargs", "[", "'params'", "]", "=", "kwargs", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "request_kwargs", "[", "'data'", "]", "=", "kwargs", "#NEWLINE#", "#UNINDENT#", "url", "=", "(", "self", ".", "config", "[", "'base_url'", "]", "+", "method", ")", "#NEWLINE#", "logger", ".", "debug", "(", "(", "'%s %s'", "%", "(", "verb", ",", "url", ")", ")", ")", "#NEWLINE#", "r", "=", "self", ".", "requester", ".", "request", "(", "verb", ",", "url", ",", "**", "request_kwargs", ")", "#NEWLINE#", "if", "(", "r", ".", "status_code", "!=", "200", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "APIError", "(", "r", ".", "status_code", ")", "#NEWLINE#", "#UNINDENT#", "return", "r", ".", "json", "(", ")"], "edges": [[1, 5, 7, "enum_FIELD"], [12, 18, 7, "enum_FIELD"], [20, 23, 7, "enum_FIELD"], [32, 29, 7, "enum_FIELD"], [54, 64, 7, "enum_FIELD"], [67, 71, 7, "enum_FIELD"], [82, 92, 7, "enum_FIELD"], [99, 104, 7, "enum_FIELD"], [119, 123, 7, "enum_FIELD"], [18, 16, 7, "enum_FIELD"], [29, 28, 7, "enum_FIELD"], [34, 40, 7, "enum_FIELD"], [46, 52, 7, "enum_FIELD"], [64, 61, 7, "enum_FIELD"], [64, 65, 7, "enum_FIELD"], [71, 69, 7, "enum_FIELD"], [92, 88, 7, "enum_FIELD"], [104, 102, 7, "enum_FIELD"], [110, 112, 7, "enum_FIELD"], [123, 121, 7, "enum_FIELD"], [16, 15, 7, "enum_FIELD"], [36, 35, 7, "enum_FIELD"], [36, 37, 7, "enum_FIELD"], [48, 47, 7, "enum_FIELD"], [48, 49, 7, "enum_FIELD"], [61, 59, 7, "enum_FIELD"], [61, 62, 7, "enum_FIELD"], [69, 68, 7, "enum_FIELD"], [74, 73, 7, "enum_FIELD"], [74, 77, 7, "enum_FIELD"], [88, 86, 7, "enum_FIELD"], [95, 96, 7, "enum_FIELD"], [102, 101, 7, "enum_FIELD"], [112, 111, 7, "enum_FIELD"], [121, 120, 7, "enum_FIELD"], [59, 58, 7, "enum_FIELD"], [86, 85, 7, "enum_FIELD"], [114, 113, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 12, 9, "enum_NEXT_SYNTAX"], [13, 4, 10, "enum_LAST_LEXICAL_USE"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [15, 13, 10, "enum_LAST_LEXICAL_USE"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [28, 6, 10, "enum_LAST_LEXICAL_USE"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 34, 9, "enum_NEXT_SYNTAX"], [35, 21, 10, "enum_LAST_LEXICAL_USE"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 46, 9, "enum_NEXT_SYNTAX"], [47, 35, 10, "enum_LAST_LEXICAL_USE"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [52, 40, 10, "enum_LAST_LEXICAL_USE"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [58, 2, 10, "enum_LAST_LEXICAL_USE"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [65, 28, 10, "enum_LAST_LEXICAL_USE"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [76, 15, 10, "enum_LAST_LEXICAL_USE"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [78, 55, 10, "enum_LAST_LEXICAL_USE"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [85, 58, 10, "enum_LAST_LEXICAL_USE"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [91, 76, 10, "enum_LAST_LEXICAL_USE"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [93, 78, 10, "enum_LAST_LEXICAL_USE"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [96, 47, 10, "enum_LAST_LEXICAL_USE"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [101, 83, 10, "enum_LAST_LEXICAL_USE"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [113, 101, 10, "enum_LAST_LEXICAL_USE"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 119, 9, "enum_NEXT_SYNTAX"], [120, 113, 10, "enum_LAST_LEXICAL_USE"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [5, 12, 1, "enum_CFG_NEXT"], [12, 20, 1, "enum_CFG_NEXT"], [20, 29, 1, "enum_CFG_NEXT"], [29, 34, 1, "enum_CFG_NEXT"], [29, 46, 1, "enum_CFG_NEXT"], [34, 54, 1, "enum_CFG_NEXT"], [46, 54, 1, "enum_CFG_NEXT"], [54, 67, 1, "enum_CFG_NEXT"], [67, 82, 1, "enum_CFG_NEXT"], [82, 104, 1, "enum_CFG_NEXT"], [104, 110, 1, "enum_CFG_NEXT"], [104, 119, 1, "enum_CFG_NEXT"], [15, 4, 3, "enum_LAST_WRITE"], [13, 15, 2, "enum_LAST_READ"], [13, 4, 3, "enum_LAST_WRITE"], [28, 6, 3, "enum_LAST_WRITE"], [35, 21, 3, "enum_LAST_WRITE"], [47, 21, 3, "enum_LAST_WRITE"], [58, 2, 3, "enum_LAST_WRITE"], [65, 28, 2, "enum_LAST_READ"], [65, 6, 3, "enum_LAST_WRITE"], [76, 15, 2, "enum_LAST_READ"], [76, 13, 3, "enum_LAST_WRITE"], [78, 55, 3, "enum_LAST_WRITE"], [85, 58, 2, "enum_LAST_READ"], [85, 2, 3, "enum_LAST_WRITE"], [91, 76, 2, "enum_LAST_READ"], [91, 13, 3, "enum_LAST_WRITE"], [93, 78, 2, "enum_LAST_READ"], [93, 55, 3, "enum_LAST_WRITE"], [96, 47, 2, "enum_LAST_READ"], [96, 35, 2, "enum_LAST_READ"], [96, 21, 3, "enum_LAST_WRITE"], [101, 83, 3, "enum_LAST_WRITE"], [113, 101, 2, "enum_LAST_READ"], [113, 83, 3, "enum_LAST_WRITE"], [120, 101, 2, "enum_LAST_READ"], [120, 83, 3, "enum_LAST_WRITE"], [13, 15, 4, "enum_COMPUTED_FROM"], [55, 65, 4, "enum_COMPUTED_FROM"], [55, 58, 4, "enum_COMPUTED_FROM"], [83, 91, 4, "enum_COMPUTED_FROM"], [83, 93, 4, "enum_COMPUTED_FROM"], [83, 96, 4, "enum_COMPUTED_FROM"], [83, 85, 4, "enum_COMPUTED_FROM"], [36, 40, 4, "enum_COMPUTED_FROM"], [48, 52, 4, "enum_COMPUTED_FROM"]], "error_location": 28, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/rkhleics/police-api-client-python.git", "old_path": "police_api/service.py", "hash": "2bedbab8eb7d2efb9ff8e39a821fd2796dd4ce3f", "code": "def request(self, verb: str, method: str, **kwargs):\n    verb = verb.upper()\n    request_kwargs: Dict[str, Dict] = {}\n    if method == 'GET':\n        request_kwargs['params'] = kwargs\n    else:\n        request_kwargs['data'] = kwargs\n    url: str = self.config['base_url'] + method\n    logger.debug('%s %s' % (verb, url))\n    r = self.requester.request(verb, url, **request_kwargs)\n    if r.status_code != 200:\n        raise APIError(r.status_code)\n    return r.json()\n", "rewrite": "ReplaceText(target='verb' @(31,11)->(31,17))", "error_line": 3, "has_bug": true, "code_full": "\nimport logging\nfrom typing import Dict\n\nfrom requests import Session\n\nlogger = logging.getLogger(__name__)\n\n\nclass APIError(Exception):\n    pass\n\n\nclass Class:\n    config: Dict[str, str]\n    requester: Session\n\n    def request(self, verb: str, method: str, **kwargs):\n        verb = verb.upper()\n        request_kwargs: Dict[str, Dict] = {}\n        if method == 'GET':\n            request_kwargs['params'] = kwargs\n        else:\n            request_kwargs['data'] = kwargs\n        url: str = self.config['base_url'] + method\n        logger.debug('%s %s' % (verb, url))\n        r = self.requester.request(verb, url, **request_kwargs)\n        if r.status_code != 200:\n            raise APIError(r.status_code)\n        return r.json()\n", "error_location_char": [125, 131], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def update(", "cls", ",", "rating_object", ",", "user", ",", "rating", ",", "category", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "ct", "=", "ContentType", ".", "objects", ".", "get_for_model", "(", "rating_object", ")", "#NEWLINE#", "try", ":", "#NEWLINE#", "#INDENT#", "rating_obj", "=", "cls", ".", "objects", ".", "get", "(", "object_id", "=", "rating_object", ".", "pk", ",", "content_type", "=", "ct", ",", "user", "=", "user", ",", "category", "=", "category", ")", "#NEWLINE#", "#UNINDENT#", "except", "cls", ".", "DoesNotExist", ":", "#NEWLINE#", "#INDENT#", "rating_obj", "=", "None", "#NEWLINE#", "#UNINDENT#", "if", "(", "rating_obj", "and", "(", "rating", "==", "0", ")", ")", ":", "#NEWLINE#", "#INDENT#", "return", "rating", ".", "clear", "(", ")", "#NEWLINE#", "#UNINDENT#", "if", "(", "rating_obj", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "rating_obj", "=", "cls", ".", "objects", ".", "create", "(", "object_id", "=", "rating_object", ".", "pk", ",", "content_type", "=", "ct", ",", "user", "=", "user", ",", "category", "=", "category", ",", "rating", "=", "rating", ")", "#NEWLINE#", "#UNINDENT#", "(", "overall", ",", "_", ")", "=", "OverallRating", ".", "objects", ".", "get_or_create", "(", "object_id", "=", "rating_object", ".", "pk", ",", "content_type", "=", "ct", ",", "category", "=", "category", ")", "#NEWLINE#", "rating_obj", ".", "overall_rating", "=", "overall", "#NEWLINE#", "rating_obj", ".", "rating", "=", "rating", "#NEWLINE#", "rating_obj", ".", "save", "(", ")", "#NEWLINE#", "overall", ".", "update", "(", ")", "#NEWLINE#", "return", "overall", ".", "rating"], "edges": [[1, 7, 7, "enum_FIELD"], [16, 24, 7, "enum_FIELD"], [72, 75, 7, "enum_FIELD"], [93, 96, 7, "enum_FIELD"], [133, 151, 7, "enum_FIELD"], [160, 165, 7, "enum_FIELD"], [166, 171, 7, "enum_FIELD"], [172, 176, 7, "enum_FIELD"], [178, 182, 7, "enum_FIELD"], [185, 187, 7, "enum_FIELD"], [24, 22, 7, "enum_FIELD"], [31, 49, 7, "enum_FIELD"], [60, 62, 7, "enum_FIELD"], [85, 89, 7, "enum_FIELD"], [96, 95, 7, "enum_FIELD"], [101, 119, 7, "enum_FIELD"], [151, 143, 7, "enum_FIELD"], [162, 161, 7, "enum_FIELD"], [168, 167, 7, "enum_FIELD"], [176, 174, 7, "enum_FIELD"], [182, 180, 7, "enum_FIELD"], [187, 186, 7, "enum_FIELD"], [22, 20, 7, "enum_FIELD"], [49, 37, 7, "enum_FIELD"], [62, 61, 7, "enum_FIELD"], [66, 69, 7, "enum_FIELD"], [78, 77, 7, "enum_FIELD"], [89, 87, 7, "enum_FIELD"], [119, 107, 7, "enum_FIELD"], [143, 141, 7, "enum_FIELD"], [146, 149, 7, "enum_FIELD"], [152, 154, 7, "enum_FIELD"], [156, 158, 7, "enum_FIELD"], [174, 173, 7, "enum_FIELD"], [180, 179, 7, "enum_FIELD"], [20, 19, 7, "enum_FIELD"], [37, 35, 7, "enum_FIELD"], [40, 43, 7, "enum_FIELD"], [46, 48, 7, "enum_FIELD"], [50, 52, 7, "enum_FIELD"], [54, 56, 7, "enum_FIELD"], [87, 86, 7, "enum_FIELD"], [107, 105, 7, "enum_FIELD"], [110, 113, 7, "enum_FIELD"], [116, 118, 7, "enum_FIELD"], [120, 122, 7, "enum_FIELD"], [124, 126, 7, "enum_FIELD"], [128, 130, 7, "enum_FIELD"], [141, 140, 7, "enum_FIELD"], [149, 148, 7, "enum_FIELD"], [35, 34, 7, "enum_FIELD"], [43, 42, 7, "enum_FIELD"], [105, 104, 7, "enum_FIELD"], [113, 112, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [25, 4, 10, "enum_LAST_LEXICAL_USE"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [34, 2, 10, "enum_LAST_LEXICAL_USE"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [42, 25, 10, "enum_LAST_LEXICAL_USE"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [48, 17, 10, "enum_LAST_LEXICAL_USE"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [52, 6, 10, "enum_LAST_LEXICAL_USE"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [56, 10, 10, "enum_LAST_LEXICAL_USE"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 60, 9, "enum_NEXT_SYNTAX"], [61, 34, 10, "enum_LAST_LEXICAL_USE"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 66, 9, "enum_NEXT_SYNTAX"], [67, 32, 10, "enum_LAST_LEXICAL_USE"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [74, 67, 10, "enum_LAST_LEXICAL_USE"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [77, 8, 10, "enum_LAST_LEXICAL_USE"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 85, 9, "enum_NEXT_SYNTAX"], [86, 77, 10, "enum_LAST_LEXICAL_USE"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [95, 74, 10, "enum_LAST_LEXICAL_USE"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 101, 9, "enum_NEXT_SYNTAX"], [102, 95, 10, "enum_LAST_LEXICAL_USE"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [104, 61, 10, "enum_LAST_LEXICAL_USE"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [112, 42, 10, "enum_LAST_LEXICAL_USE"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [118, 48, 10, "enum_LAST_LEXICAL_USE"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [122, 52, 10, "enum_LAST_LEXICAL_USE"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [126, 56, 10, "enum_LAST_LEXICAL_USE"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [130, 86, 10, "enum_LAST_LEXICAL_USE"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [148, 112, 10, "enum_LAST_LEXICAL_USE"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [154, 118, 10, "enum_LAST_LEXICAL_USE"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [158, 126, 10, "enum_LAST_LEXICAL_USE"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [161, 102, 10, "enum_LAST_LEXICAL_USE"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [165, 135, 10, "enum_LAST_LEXICAL_USE"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [167, 161, 10, "enum_LAST_LEXICAL_USE"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [171, 130, 10, "enum_LAST_LEXICAL_USE"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [173, 167, 10, "enum_LAST_LEXICAL_USE"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 178, 9, "enum_NEXT_SYNTAX"], [179, 165, 10, "enum_LAST_LEXICAL_USE"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 185, 9, "enum_NEXT_SYNTAX"], [186, 179, 10, "enum_LAST_LEXICAL_USE"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [187, 188, 9, "enum_NEXT_SYNTAX"], [12, 1, 1, "enum_CFG_NEXT"], [7, 16, 1, "enum_CFG_NEXT"], [16, 31, 1, "enum_CFG_NEXT"], [31, 62, 1, "enum_CFG_NEXT"], [31, 75, 1, "enum_CFG_NEXT"], [62, 66, 1, "enum_CFG_NEXT"], [66, 75, 1, "enum_CFG_NEXT"], [75, 85, 1, "enum_CFG_NEXT"], [75, 96, 1, "enum_CFG_NEXT"], [96, 101, 1, "enum_CFG_NEXT"], [96, 133, 1, "enum_CFG_NEXT"], [101, 133, 1, "enum_CFG_NEXT"], [133, 160, 1, "enum_CFG_NEXT"], [160, 166, 1, "enum_CFG_NEXT"], [166, 172, 1, "enum_CFG_NEXT"], [172, 178, 1, "enum_CFG_NEXT"], [178, 185, 1, "enum_CFG_NEXT"], [25, 4, 3, "enum_LAST_WRITE"], [34, 2, 3, "enum_LAST_WRITE"], [42, 25, 2, "enum_LAST_READ"], [42, 4, 3, "enum_LAST_WRITE"], [48, 17, 3, "enum_LAST_WRITE"], [52, 6, 3, "enum_LAST_WRITE"], [56, 10, 3, "enum_LAST_WRITE"], [61, 34, 2, "enum_LAST_READ"], [61, 2, 3, "enum_LAST_WRITE"], [67, 32, 3, "enum_LAST_WRITE"], [74, 67, 3, "enum_LAST_WRITE"], [74, 32, 3, "enum_LAST_WRITE"], [77, 8, 3, "enum_LAST_WRITE"], [86, 77, 2, "enum_LAST_READ"], [86, 8, 3, "enum_LAST_WRITE"], [95, 74, 2, "enum_LAST_READ"], [95, 67, 3, "enum_LAST_WRITE"], [95, 32, 3, "enum_LAST_WRITE"], [104, 61, 2, "enum_LAST_READ"], [104, 34, 2, "enum_LAST_READ"], [104, 2, 3, "enum_LAST_WRITE"], [112, 42, 2, "enum_LAST_READ"], [112, 4, 3, "enum_LAST_WRITE"], [118, 48, 2, "enum_LAST_READ"], [118, 17, 3, "enum_LAST_WRITE"], [122, 52, 2, "enum_LAST_READ"], [122, 6, 3, "enum_LAST_WRITE"], [126, 56, 2, "enum_LAST_READ"], [126, 10, 3, "enum_LAST_WRITE"], [130, 77, 2, "enum_LAST_READ"], [130, 8, 3, "enum_LAST_WRITE"], [102, 95, 2, "enum_LAST_READ"], [102, 67, 3, "enum_LAST_WRITE"], [102, 32, 3, "enum_LAST_WRITE"], [148, 42, 2, "enum_LAST_READ"], [148, 112, 2, "enum_LAST_READ"], [148, 4, 3, "enum_LAST_WRITE"], [154, 48, 2, "enum_LAST_READ"], [154, 118, 2, "enum_LAST_READ"], [154, 17, 3, "enum_LAST_WRITE"], [158, 126, 2, "enum_LAST_READ"], [158, 56, 2, "enum_LAST_READ"], [158, 10, 3, "enum_LAST_WRITE"], [165, 135, 3, "enum_LAST_WRITE"], [161, 95, 2, "enum_LAST_READ"], [161, 102, 3, "enum_LAST_WRITE"], [161, 32, 3, "enum_LAST_WRITE"], [161, 67, 3, "enum_LAST_WRITE"], [171, 77, 2, "enum_LAST_READ"], [171, 130, 2, "enum_LAST_READ"], [171, 8, 3, "enum_LAST_WRITE"], [167, 161, 2, "enum_LAST_READ"], [167, 102, 3, "enum_LAST_WRITE"], [167, 32, 3, "enum_LAST_WRITE"], [167, 67, 3, "enum_LAST_WRITE"], [173, 167, 2, "enum_LAST_READ"], [173, 102, 3, "enum_LAST_WRITE"], [173, 32, 3, "enum_LAST_WRITE"], [173, 67, 3, "enum_LAST_WRITE"], [179, 165, 2, "enum_LAST_READ"], [179, 135, 3, "enum_LAST_WRITE"], [186, 179, 2, "enum_LAST_READ"], [186, 135, 3, "enum_LAST_WRITE"], [17, 25, 4, "enum_COMPUTED_FROM"], [17, 19, 4, "enum_COMPUTED_FROM"], [136, 154, 4, "enum_COMPUTED_FROM"], [136, 158, 4, "enum_COMPUTED_FROM"], [136, 140, 4, "enum_COMPUTED_FROM"], [136, 148, 4, "enum_COMPUTED_FROM"], [162, 165, 4, "enum_COMPUTED_FROM"], [168, 171, 4, "enum_COMPUTED_FROM"], [32, 48, 4, "enum_COMPUTED_FROM"], [32, 52, 4, "enum_COMPUTED_FROM"], [32, 56, 4, "enum_COMPUTED_FROM"], [32, 34, 4, "enum_COMPUTED_FROM"], [32, 42, 4, "enum_COMPUTED_FROM"], [102, 118, 4, "enum_COMPUTED_FROM"], [102, 122, 4, "enum_COMPUTED_FROM"], [102, 126, 4, "enum_COMPUTED_FROM"], [102, 130, 4, "enum_COMPUTED_FROM"], [102, 104, 4, "enum_COMPUTED_FROM"], [102, 112, 4, "enum_COMPUTED_FROM"]], "error_location": 86, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/eldarion/agon-ratings.git", "old_path": "pinax/ratings/models.py", "hash": "99a317f1ead850e948cf08123fef8ea60b30060e", "code": "@classmethod\ndef update(cls, rating_object: Rating, user: Any, rating: int, category: Optional[Any]=None):\n    # @@@ Still doing too much in this method\n    ct: ContentType = ContentType.objects.get_for_model(rating_object)\n    try:\n        rating_obj = cls.objects.get(\n            object_id=rating_object.pk,\n            content_type=ct,\n            user=user,\n            category=category\n        )\n    except cls.DoesNotExist:\n        rating_obj = None\n\n    if rating_obj and rating == 0:\n        return rating.clear()\n\n    if rating_obj is None:\n        rating_obj = cls.objects.create(\n            object_id=rating_object.pk,\n            content_type=ct,\n            user=user,\n            category=category,\n            rating=rating\n        )\n    overall, _ = OverallRating.objects.get_or_create(\n        object_id=rating_object.pk,\n        content_type=ct,\n        category=category\n    )\n    rating_obj.overall_rating = overall\n    rating_obj.rating = rating\n    rating_obj.save()\n    overall.update()\n    return overall.rating\n", "rewrite": "ReplaceText(target='rating_obj' @(75,19)->(75,25))", "error_line": 14, "has_bug": true, "code_full": "from typing import Any, Optional, Tuple\n\n\nclass Rating:\n    pk: str\n    overall_rating: Any\n    rating: int\n\n    def save(self):\n        pass\n\n    def clear(self):\n        pass\n\n\nclass ContentType:\n    class objects:\n        @staticmethod\n        def get_for_model(rating_object: Rating) -> \"ContentType\":\n            return ContentType()\n\n\nclass OverallRating:\n    class objects:\n        @staticmethod\n        def get_or_create(object_id: str, content_type: ContentType, category: Optional[Any]) -> Tuple:\n            return None, None\n\nclass Class:\n    class DoesNotExist(Exception):\n        pass\n\n    class objects:\n        @staticmethod\n        def get(object_id: str, content_type: ContentType, user: Any, category: Optional[Any]) -> \"Rating\":\n            return Rating()\n\n        @staticmethod\n        def create(object_id: str, content_type: ContentType, user: Any, category: Optional[Any], rating: int) -> \"Rating\":\n            return Rating()\n\n    @classmethod\n    def update(cls, rating_object: Rating, user: Any, rating: int, category: Optional[Any]=None):\n        # @@@ Still doing too much in this method\n        ct: ContentType = ContentType.objects.get_for_model(rating_object)\n        try:\n            rating_obj = cls.objects.get(\n                object_id=rating_object.pk,\n                content_type=ct,\n                user=user,\n                category=category\n            )\n        except cls.DoesNotExist:\n            rating_obj = None\n\n        if rating_obj and rating == 0:\n            return rating.clear()\n\n        if rating_obj is None:\n            rating_obj = cls.objects.create(\n                object_id=rating_object.pk,\n                content_type=ct,\n                user=user,\n                category=category,\n                rating=rating\n            )\n        overall, _ = OverallRating.objects.get_or_create(\n            object_id=rating_object.pk,\n            content_type=ct,\n            category=category\n        )\n        rating_obj.overall_rating = overall\n        rating_obj.rating = rating\n        rating_obj.save()\n        overall.update()\n        return overall.rating\n", "error_location_char": [509, 515], "type_checked_pytype": false, "type_error_label": "attribute-error", "type_checked_mypy": false}
{"source_tokens": ["#NEWLINE#", "def get_app_urlpatterns(", "self", ",", "app_config", ")", ":", "#NEWLINE#", "#INDENT#", "app_config", ".", "backend", "=", "self", "#NEWLINE#", "urlpatterns", "=", "super", "(", "Backend", ",", "self", ")", ".", "get_urlpatterns", "(", "source", "=", "app_config", ",", "app_config", "=", "app_config", ")", "#NEWLINE#", "for", "model", "in", "app_config", ".", "get_models", "(", ")", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "controller", "=", "self", ".", "get_registered_controller", "(", "model", ")", "#NEWLINE#", "#UNINDENT#", "except", "NotRegistered", ":", "#NEWLINE#", "#INDENT#", "continue", "#NEWLINE#", "#UNINDENT#", "if", "controller", ".", "public_modes", ":", "#NEWLINE#", "#INDENT#", "app_config", ".", "has_public_views", "=", "True", "#NEWLINE#", "#UNINDENT#", "controller_namespace", "=", "controller", ".", "model_namespace", "#NEWLINE#", "controller_prefix", "=", "controller", ".", "url_prefix", "#NEWLINE#", "controller_urlpatterns", "=", "controller", ".", "get_urlpatterns", "(", ")", "#NEWLINE#", "for", "(", "name", ",", "patterns", ")", "in", "controller_urlpatterns", ".", "items", "(", ")", ":", "#NEWLINE#", "#INDENT#", "urlpatterns", "[", "name", "]", ".", "append", "(", "url", "(", "(", "'^{prefix}'", ".", "format", "(", "prefix", "=", "controller_prefix", ")", "if", "controller_prefix", "else", "''", ")", ",", "include", "(", "(", "patterns", ",", "controller_namespace", ")", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "app_index_class", "=", "getattr", "(", "app_config", ",", "'app_index_class'", ",", "None", ")", "#NEWLINE#", "if", "app_index_class", ":", "#NEWLINE#", "#INDENT#", "template_name", "=", "getattr", "(", "app_config", ",", "'template_name'", ",", "'app_index.html'", ")", "#NEWLINE#", "app_index", "=", "app_index_class", ".", "as_view", "(", "app_config", "=", "app_config", ",", "backend", "=", "self", ",", "template_name", "=", "template_name", ")", "#NEWLINE#", "urlpatterns", "[", "None", "]", ".", "append", "(", "url", "(", "'^$'", ",", "app_index", ",", "name", "=", "'index'", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "urlpatterns"], "edges": [[1, 3, 7, "enum_FIELD"], [8, 13, 7, "enum_FIELD"], [14, 29, 7, "enum_FIELD"], [37, 36, 7, "enum_FIELD"], [37, 41, 7, "enum_FIELD"], [153, 159, 7, "enum_FIELD"], [165, 166, 7, "enum_FIELD"], [220, 221, 7, "enum_FIELD"], [10, 9, 7, "enum_FIELD"], [29, 23, 7, "enum_FIELD"], [41, 39, 7, "enum_FIELD"], [68, 70, 7, "enum_FIELD"], [81, 85, 7, "enum_FIELD"], [87, 91, 7, "enum_FIELD"], [93, 99, 7, "enum_FIELD"], [108, 105, 7, "enum_FIELD"], [108, 112, 7, "enum_FIELD"], [159, 156, 7, "enum_FIELD"], [169, 175, 7, "enum_FIELD"], [180, 190, 7, "enum_FIELD"], [199, 206, 7, "enum_FIELD"], [23, 20, 7, "enum_FIELD"], [26, 28, 7, "enum_FIELD"], [30, 32, 7, "enum_FIELD"], [39, 38, 7, "enum_FIELD"], [49, 55, 7, "enum_FIELD"], [60, 61, 7, "enum_FIELD"], [70, 69, 7, "enum_FIELD"], [74, 79, 7, "enum_FIELD"], [85, 84, 7, "enum_FIELD"], [91, 90, 7, "enum_FIELD"], [99, 97, 7, "enum_FIELD"], [112, 110, 7, "enum_FIELD"], [116, 123, 7, "enum_FIELD"], [175, 172, 7, "enum_FIELD"], [190, 184, 7, "enum_FIELD"], [206, 204, 7, "enum_FIELD"], [20, 17, 7, "enum_FIELD"], [55, 53, 7, "enum_FIELD"], [76, 75, 7, "enum_FIELD"], [97, 96, 7, "enum_FIELD"], [110, 109, 7, "enum_FIELD"], [123, 121, 7, "enum_FIELD"], [184, 183, 7, "enum_FIELD"], [187, 189, 7, "enum_FIELD"], [191, 193, 7, "enum_FIELD"], [195, 197, 7, "enum_FIELD"], [204, 201, 7, "enum_FIELD"], [210, 207, 7, "enum_FIELD"], [53, 52, 7, "enum_FIELD"], [121, 118, 7, "enum_FIELD"], [140, 124, 7, "enum_FIELD"], [201, 200, 7, "enum_FIELD"], [201, 202, 7, "enum_FIELD"], [213, 215, 7, "enum_FIELD"], [118, 117, 7, "enum_FIELD"], [118, 119, 7, "enum_FIELD"], [135, 136, 7, "enum_FIELD"], [135, 130, 7, "enum_FIELD"], [135, 138, 7, "enum_FIELD"], [142, 141, 7, "enum_FIELD"], [130, 128, 7, "enum_FIELD"], [128, 127, 7, "enum_FIELD"], [131, 133, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 8, 9, "enum_NEXT_SYNTAX"], [9, 4, 10, "enum_LAST_LEXICAL_USE"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [13, 2, 10, "enum_LAST_LEXICAL_USE"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [21, 13, 10, "enum_LAST_LEXICAL_USE"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [28, 9, 10, "enum_LAST_LEXICAL_USE"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [32, 28, 10, "enum_LAST_LEXICAL_USE"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [38, 32, 10, "enum_LAST_LEXICAL_USE"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [52, 21, 10, "enum_LAST_LEXICAL_USE"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [56, 36, 10, "enum_LAST_LEXICAL_USE"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 65, 9, "enum_NEXT_SYNTAX"], [65, 68, 9, "enum_NEXT_SYNTAX"], [69, 50, 10, "enum_LAST_LEXICAL_USE"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 74, 9, "enum_NEXT_SYNTAX"], [75, 38, 10, "enum_LAST_LEXICAL_USE"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [84, 69, 10, "enum_LAST_LEXICAL_USE"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [90, 84, 10, "enum_LAST_LEXICAL_USE"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [96, 90, 10, "enum_LAST_LEXICAL_USE"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [109, 94, 10, "enum_LAST_LEXICAL_USE"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 116, 9, "enum_NEXT_SYNTAX"], [117, 15, 10, "enum_LAST_LEXICAL_USE"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [119, 104, 10, "enum_LAST_LEXICAL_USE"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [133, 88, 10, "enum_LAST_LEXICAL_USE"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [136, 133, 10, "enum_LAST_LEXICAL_USE"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [144, 106, 10, "enum_LAST_LEXICAL_USE"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [146, 82, 10, "enum_LAST_LEXICAL_USE"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [158, 75, 10, "enum_LAST_LEXICAL_USE"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 165, 9, "enum_NEXT_SYNTAX"], [166, 154, 10, "enum_LAST_LEXICAL_USE"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [172, 156, 10, "enum_LAST_LEXICAL_USE"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [174, 158, 10, "enum_LAST_LEXICAL_USE"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [183, 166, 10, "enum_LAST_LEXICAL_USE"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 184, 9, "enum_NEXT_SYNTAX"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [187, 188, 9, "enum_NEXT_SYNTAX"], [189, 174, 10, "enum_LAST_LEXICAL_USE"], [188, 189, 9, "enum_NEXT_SYNTAX"], [189, 190, 9, "enum_NEXT_SYNTAX"], [190, 191, 9, "enum_NEXT_SYNTAX"], [191, 192, 9, "enum_NEXT_SYNTAX"], [193, 52, 10, "enum_LAST_LEXICAL_USE"], [192, 193, 9, "enum_NEXT_SYNTAX"], [193, 194, 9, "enum_NEXT_SYNTAX"], [194, 195, 9, "enum_NEXT_SYNTAX"], [195, 196, 9, "enum_NEXT_SYNTAX"], [197, 170, 10, "enum_LAST_LEXICAL_USE"], [196, 197, 9, "enum_NEXT_SYNTAX"], [197, 198, 9, "enum_NEXT_SYNTAX"], [198, 199, 9, "enum_NEXT_SYNTAX"], [200, 117, 10, "enum_LAST_LEXICAL_USE"], [199, 200, 9, "enum_NEXT_SYNTAX"], [200, 201, 9, "enum_NEXT_SYNTAX"], [201, 202, 9, "enum_NEXT_SYNTAX"], [202, 203, 9, "enum_NEXT_SYNTAX"], [203, 204, 9, "enum_NEXT_SYNTAX"], [204, 205, 9, "enum_NEXT_SYNTAX"], [205, 206, 9, "enum_NEXT_SYNTAX"], [207, 124, 10, "enum_LAST_LEXICAL_USE"], [206, 207, 9, "enum_NEXT_SYNTAX"], [207, 208, 9, "enum_NEXT_SYNTAX"], [208, 209, 9, "enum_NEXT_SYNTAX"], [209, 210, 9, "enum_NEXT_SYNTAX"], [211, 181, 10, "enum_LAST_LEXICAL_USE"], [210, 211, 9, "enum_NEXT_SYNTAX"], [211, 212, 9, "enum_NEXT_SYNTAX"], [212, 213, 9, "enum_NEXT_SYNTAX"], [213, 214, 9, "enum_NEXT_SYNTAX"], [214, 215, 9, "enum_NEXT_SYNTAX"], [215, 216, 9, "enum_NEXT_SYNTAX"], [216, 217, 9, "enum_NEXT_SYNTAX"], [217, 220, 9, "enum_NEXT_SYNTAX"], [221, 200, 10, "enum_LAST_LEXICAL_USE"], [220, 221, 9, "enum_NEXT_SYNTAX"], [3, 8, 1, "enum_CFG_NEXT"], [8, 14, 1, "enum_CFG_NEXT"], [14, 41, 1, "enum_CFG_NEXT"], [41, 36, 1, "enum_CFG_NEXT"], [36, 153, 1, "enum_CFG_NEXT"], [36, 49, 1, "enum_CFG_NEXT"], [49, 70, 1, "enum_CFG_NEXT"], [49, 61, 1, "enum_CFG_NEXT"], [61, 36, 1, "enum_CFG_NEXT"], [70, 81, 1, "enum_CFG_NEXT"], [70, 74, 1, "enum_CFG_NEXT"], [74, 81, 1, "enum_CFG_NEXT"], [81, 87, 1, "enum_CFG_NEXT"], [87, 93, 1, "enum_CFG_NEXT"], [93, 112, 1, "enum_CFG_NEXT"], [112, 105, 1, "enum_CFG_NEXT"], [105, 116, 1, "enum_CFG_NEXT"], [105, 36, 1, "enum_CFG_NEXT"], [116, 105, 1, "enum_CFG_NEXT"], [153, 166, 1, "enum_CFG_NEXT"], [166, 169, 1, "enum_CFG_NEXT"], [166, 220, 1, "enum_CFG_NEXT"], [169, 180, 1, "enum_CFG_NEXT"], [180, 199, 1, "enum_CFG_NEXT"], [199, 220, 1, "enum_CFG_NEXT"], [13, 2, 3, "enum_LAST_WRITE"], [9, 4, 3, "enum_LAST_WRITE"], [21, 13, 2, "enum_LAST_READ"], [21, 2, 3, "enum_LAST_WRITE"], [28, 9, 2, "enum_LAST_READ"], [28, 4, 3, "enum_LAST_WRITE"], [32, 28, 2, "enum_LAST_READ"], [32, 4, 3, "enum_LAST_WRITE"], [38, 32, 2, "enum_LAST_READ"], [38, 4, 3, "enum_LAST_WRITE"], [36, 56, 2, "enum_LAST_READ"], [36, 36, 3, "enum_LAST_WRITE"], [52, 52, 2, "enum_LAST_READ"], [52, 21, 2, "enum_LAST_READ"], [52, 2, 3, "enum_LAST_WRITE"], [56, 56, 2, "enum_LAST_READ"], [56, 36, 3, "enum_LAST_WRITE"], [50, 96, 2, "enum_LAST_READ"], [50, 50, 3, "enum_LAST_WRITE"], [61, 61, 2, "enum_LAST_READ"], [69, 96, 2, "enum_LAST_READ"], [69, 50, 3, "enum_LAST_WRITE"], [75, 38, 2, "enum_LAST_READ"], [75, 75, 2, "enum_LAST_READ"], [75, 4, 3, "enum_LAST_WRITE"], [84, 69, 2, "enum_LAST_READ"], [84, 50, 3, "enum_LAST_WRITE"], [82, 146, 2, "enum_LAST_READ"], [82, 82, 3, "enum_LAST_WRITE"], [90, 84, 2, "enum_LAST_READ"], [90, 50, 3, "enum_LAST_WRITE"], [88, 133, 2, "enum_LAST_READ"], [88, 88, 3, "enum_LAST_WRITE"], [96, 90, 2, "enum_LAST_READ"], [96, 50, 3, "enum_LAST_WRITE"], [94, 109, 2, "enum_LAST_READ"], [94, 94, 3, "enum_LAST_WRITE"], [109, 109, 2, "enum_LAST_READ"], [109, 94, 3, "enum_LAST_WRITE"], [104, 119, 2, "enum_LAST_READ"], [104, 104, 3, "enum_LAST_WRITE"], [106, 144, 2, "enum_LAST_READ"], [106, 106, 3, "enum_LAST_WRITE"], [117, 117, 2, "enum_LAST_READ"], [117, 15, 3, "enum_LAST_WRITE"], [119, 119, 2, "enum_LAST_READ"], [119, 104, 3, "enum_LAST_WRITE"], [124, 124, 2, "enum_LAST_READ"], [136, 133, 2, "enum_LAST_READ"], [136, 88, 3, "enum_LAST_WRITE"], [133, 136, 2, "enum_LAST_READ"], [133, 88, 3, "enum_LAST_WRITE"], [141, 141, 2, "enum_LAST_READ"], [144, 144, 2, "enum_LAST_READ"], [144, 106, 3, "enum_LAST_WRITE"], [146, 146, 2, "enum_LAST_READ"], [146, 82, 3, "enum_LAST_WRITE"], [158, 38, 2, "enum_LAST_READ"], [158, 75, 2, "enum_LAST_READ"], [158, 4, 3, "enum_LAST_WRITE"], [166, 154, 3, "enum_LAST_WRITE"], [172, 156, 2, "enum_LAST_READ"], [174, 158, 2, "enum_LAST_READ"], [174, 4, 3, "enum_LAST_WRITE"], [183, 166, 2, "enum_LAST_READ"], [183, 154, 3, "enum_LAST_WRITE"], [189, 174, 2, "enum_LAST_READ"], [189, 4, 3, "enum_LAST_WRITE"], [193, 52, 2, "enum_LAST_READ"], [193, 21, 2, "enum_LAST_READ"], [193, 2, 3, "enum_LAST_WRITE"], [197, 170, 3, "enum_LAST_WRITE"], [200, 117, 2, "enum_LAST_READ"], [200, 15, 3, "enum_LAST_WRITE"], [207, 124, 2, "enum_LAST_READ"], [211, 181, 3, "enum_LAST_WRITE"], [221, 117, 2, "enum_LAST_READ"], [221, 200, 2, "enum_LAST_READ"], [221, 15, 3, "enum_LAST_WRITE"], [10, 13, 4, "enum_COMPUTED_FROM"], [15, 28, 4, "enum_COMPUTED_FROM"], [15, 32, 4, "enum_COMPUTED_FROM"], [15, 17, 4, "enum_COMPUTED_FROM"], [15, 19, 4, "enum_COMPUTED_FROM"], [15, 21, 4, "enum_COMPUTED_FROM"], [154, 156, 4, "enum_COMPUTED_FROM"], [154, 158, 4, "enum_COMPUTED_FROM"], [82, 84, 4, "enum_COMPUTED_FROM"], [88, 90, 4, "enum_COMPUTED_FROM"], [94, 96, 4, "enum_COMPUTED_FROM"], [170, 172, 4, "enum_COMPUTED_FROM"], [170, 174, 4, "enum_COMPUTED_FROM"], [181, 183, 4, "enum_COMPUTED_FROM"], [181, 189, 4, "enum_COMPUTED_FROM"], [181, 193, 4, "enum_COMPUTED_FROM"], [181, 197, 4, "enum_COMPUTED_FROM"], [50, 56, 4, "enum_COMPUTED_FROM"], [50, 52, 4, "enum_COMPUTED_FROM"]], "error_location": 174, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/altio/foundation.git", "old_path": "foundation/backend/base.py", "hash": "e39b13a5046467ebed3014bb2b5b4a47c5cd0e80", "code": "def get_app_urlpatterns(self, app_config: AppConfig) -> Dict[Union[str, None], List[URLPattern]]:\n\n    # set backend on app_config since may be using django appconfigs and the\n    # kwargs build-out for AppViewSets will look to AppConfig for backend\n    app_config.backend = self\n    urlpatterns: Dict[Optional[str], List[URLPattern]] = super(Backend, self).get_urlpatterns(\n        source=app_config, app_config=app_config)\n\n    # start by getting all controller urlpatterns in-depth\n    for model in app_config.get_models():\n        try:\n            controller = self.get_registered_controller(model)\n        except NotRegistered:\n            continue\n\n        # if any controllers have public modes, app is public\n        if controller.public_modes:\n            app_config.has_public_views = True\n\n        controller_namespace: str = controller.model_namespace\n        controller_prefix: str = controller.url_prefix\n\n        # get named patterns from controller and extend\n        controller_urlpatterns = controller.get_urlpatterns()\n        for name, patterns in controller_urlpatterns.items():\n            urlpatterns[name].append(\n                url((r'^{prefix}'.format(prefix=controller_prefix)\n                    if controller_prefix\n                    else ''),\n                    include((patterns, controller_namespace))\n                ),\n            )\n\n    # set app_index_class on app to \"None\" to skip creation\n    global app_index_class\n    app_index_class = getattr(app_index_class, 'app_index_class', None)\n    if app_index_class:\n        template_name: str = getattr(app_config, 'template_name', 'app_index.html')\n        app_index: Any = app_index_class.as_view(\n            app_config=app_config, backend=self, template_name=template_name\n        )\n        urlpatterns[None].append(url(r'^$', app_index, name='index'))\n\n    return urlpatterns\n", "rewrite": "ReplaceText(target='app_index_class' @(120,36)->(120,46))", "error_line": 36, "has_bug": true, "code_full": "from typing import Any, Dict, List, Optional, Type, Union\n\nfrom django.apps import AppConfig\nfrom django.conf.urls import include, url\nfrom django.urls import URLPattern\n\n\nclass NotRegistered(Exception):\n    pass\n\n\nclass Controller:\n    public_modes: bool\n    model_namespace: str\n    url_prefix: str\n\n    def get_urlpatterns(self) -> Dict[str, List[URLPattern]]:\n        return {}\n\n\nclass Super:\n    def get_urlpatterns(self, source: AppConfig, app_config: AppConfig) -> Dict[Optional[str], List[URLPattern]]:\n        return {}\n    \n\napp_index_class: Optional[Type] = None\n\nclass Backend(Super):\n    def get_urlpatterns(self, source: AppConfig, app_config: AppConfig) -> Dict[Optional[str], List[URLPattern]]:\n        return {}\n\n    def get_registered_controller(self, model: Type) -> Any:\n        pass\n\n    def get_app_urlpatterns(self, app_config: AppConfig) -> Dict[Union[str, None], List[URLPattern]]:\n\n        # set backend on app_config since may be using django appconfigs and the\n        # kwargs build-out for AppViewSets will look to AppConfig for backend\n        app_config.backend = self\n        urlpatterns: Dict[Optional[str], List[URLPattern]] = super(Backend, self).get_urlpatterns(\n            source=app_config, app_config=app_config)\n\n        # start by getting all controller urlpatterns in-depth\n        for model in app_config.get_models():\n            try:\n                controller = self.get_registered_controller(model)\n            except NotRegistered:\n                continue\n\n            # if any controllers have public modes, app is public\n            if controller.public_modes:\n                app_config.has_public_views = True\n\n            controller_namespace: str = controller.model_namespace\n            controller_prefix: str = controller.url_prefix\n\n            # get named patterns from controller and extend\n            controller_urlpatterns = controller.get_urlpatterns()\n            for name, patterns in controller_urlpatterns.items():\n                urlpatterns[name].append(\n                    url((r'^{prefix}'.format(prefix=controller_prefix)\n                        if controller_prefix\n                        else ''),\n                        include((patterns, controller_namespace))\n                    ),\n                )\n\n        # set app_index_class on app to \"None\" to skip creation\n        global app_index_class\n        app_index_class = getattr(app_index_class, 'app_index_class', None)\n        if app_index_class:\n            template_name: str = getattr(app_config, 'template_name', 'app_index.html')\n            app_index: Any = app_index_class.as_view(\n                app_config=app_config, backend=self, template_name=template_name\n            )\n            urlpatterns[None].append(url(r'^$', app_index, name='index'))\n\n        return urlpatterns\n", "error_location_char": [1592, 1602], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def plot_opt(", "h5_fn", "=", "'optimization.h5'", ",", "group_name", "=", "'opt'", ")", ":", "#NEWLINE#", "#INDENT#", "with", "h5py", ".", "File", "(", "'optimization.h5'", ",", "'r'", ")", "as", "handle", ":", "#NEWLINE#", "#INDENT#", "group", "=", "handle", "[", "group_name", "]", "#NEWLINE#", "cur_cycle", "=", "group", "[", "'cur_cycle'", "]", "[", "(", ")", "]", "#NEWLINE#", "ens", "=", "group", "[", "'energies'", "]", "[", ":", "cur_cycle", "]", "#NEWLINE#", "is_cos", "=", "group", "[", "'is_cos'", "]", "[", "(", ")", "]", "#NEWLINE#", "max_forces", "=", "group", "[", "'max_forces'", "]", "[", ":", "cur_cycle", "]", "#NEWLINE#", "rms_forces", "=", "group", "[", "'rms_forces'", "]", "[", ":", "cur_cycle", "]", "#NEWLINE#", "#UNINDENT#", "ens", "-=", "ens", ".", "min", "(", ")", "#NEWLINE#", "ens", "*=", "AU2KJPERMOL", "#NEWLINE#", "if", "is_cos", ":", "#NEWLINE#", "#INDENT#", "print", "(", "'COS optimization detected. Plotting total energy of all images in every cycle. Results from optimizing growing COS methods can be plotted but the plots are not really useful as the varying number of images is not considered.'", ")", "#NEWLINE#", "ens", "=", "ens", ".", "sum", "(", "axis", "=", "1", ")", "#NEWLINE#", "#UNINDENT#", "ax_kwargs", "=", "{", "'marker'", ":", "'o'", "}", "#NEWLINE#", "(", "fig", ",", "(", "ax0", ",", "ax1", ",", "ax2", ")", ")", "=", "plt", ".", "subplots", "(", "nrows", "=", "3", ",", "sharex", "=", "True", ")", "#NEWLINE#", "ax0", ".", "plot", "(", "ens", ",", "**", "ax_kwargs", ")", "#NEWLINE#", "ax0", ".", "set_ylabel", "(", "'$\\\\Delta E$ / kJ mol\u207b\u00b9'", ")", "#NEWLINE#", "ax1", ".", "plot", "(", "max_forces", ",", "**", "ax_kwargs", ")", "#NEWLINE#", "ax1", ".", "set_title", "(", "'max(forces)'", ")", "#NEWLINE#", "ax1", ".", "set_ylabel", "(", "'$E_h$ Bohr\u207b\u00b9 (rad)\u207b\u00b9'", ")", "#NEWLINE#", "ax2", ".", "plot", "(", "max_forces", ",", "**", "ax_kwargs", ")", "#NEWLINE#", "ax2", ".", "set_title", "(", "'rms(forces)'", ")", "#NEWLINE#", "ax2", ".", "set_xlabel", "(", "'Step'", ")", "#NEWLINE#", "ax2", ".", "set_ylabel", "(", "'$E_h$ Bohr\u207b\u00b9 (rad)\u207b\u00b9'", ")", "#NEWLINE#", "fig", ".", "suptitle", "(", "(", "(", "str", "(", "h5_fn", ")", "+", "'/'", ")", "+", "group_name", ")", ")", "#NEWLINE#", "plt", ".", "show", "(", ")"], "edges": [[1, 5, 7, "enum_FIELD"], [89, 90, 7, "enum_FIELD"], [89, 95, 7, "enum_FIELD"], [97, 98, 7, "enum_FIELD"], [97, 100, 7, "enum_FIELD"], [102, 103, 7, "enum_FIELD"], [123, 128, 7, "enum_FIELD"], [131, 151, 7, "enum_FIELD"], [156, 162, 7, "enum_FIELD"], [166, 170, 7, "enum_FIELD"], [173, 179, 7, "enum_FIELD"], [183, 187, 7, "enum_FIELD"], [190, 194, 7, "enum_FIELD"], [197, 203, 7, "enum_FIELD"], [207, 211, 7, "enum_FIELD"], [214, 218, 7, "enum_FIELD"], [221, 225, 7, "enum_FIELD"], [228, 232, 7, "enum_FIELD"], [246, 250, 7, "enum_FIELD"], [22, 19, 7, "enum_FIELD"], [22, 23, 7, "enum_FIELD"], [26, 30, 7, "enum_FIELD"], [33, 40, 7, "enum_FIELD"], [44, 51, 7, "enum_FIELD"], [55, 62, 7, "enum_FIELD"], [66, 73, 7, "enum_FIELD"], [77, 84, 7, "enum_FIELD"], [95, 93, 7, "enum_FIELD"], [106, 108, 7, "enum_FIELD"], [111, 117, 7, "enum_FIELD"], [151, 145, 7, "enum_FIELD"], [162, 158, 7, "enum_FIELD"], [170, 168, 7, "enum_FIELD"], [179, 175, 7, "enum_FIELD"], [187, 185, 7, "enum_FIELD"], [194, 192, 7, "enum_FIELD"], [203, 199, 7, "enum_FIELD"], [211, 209, 7, "enum_FIELD"], [218, 216, 7, "enum_FIELD"], [225, 223, 7, "enum_FIELD"], [232, 230, 7, "enum_FIELD"], [250, 248, 7, "enum_FIELD"], [19, 15, 7, "enum_FIELD"], [30, 29, 7, "enum_FIELD"], [30, 31, 7, "enum_FIELD"], [40, 37, 7, "enum_FIELD"], [40, 41, 7, "enum_FIELD"], [51, 48, 7, "enum_FIELD"], [51, 52, 7, "enum_FIELD"], [62, 59, 7, "enum_FIELD"], [62, 63, 7, "enum_FIELD"], [73, 70, 7, "enum_FIELD"], [73, 74, 7, "enum_FIELD"], [84, 81, 7, "enum_FIELD"], [84, 85, 7, "enum_FIELD"], [93, 92, 7, "enum_FIELD"], [108, 107, 7, "enum_FIELD"], [117, 115, 7, "enum_FIELD"], [145, 144, 7, "enum_FIELD"], [148, 150, 7, "enum_FIELD"], [152, 154, 7, "enum_FIELD"], [158, 157, 7, "enum_FIELD"], [163, 164, 7, "enum_FIELD"], [168, 167, 7, "enum_FIELD"], [175, 174, 7, "enum_FIELD"], [180, 181, 7, "enum_FIELD"], [185, 184, 7, "enum_FIELD"], [192, 191, 7, "enum_FIELD"], [199, 198, 7, "enum_FIELD"], [204, 205, 7, "enum_FIELD"], [209, 208, 7, "enum_FIELD"], [216, 215, 7, "enum_FIELD"], [223, 222, 7, "enum_FIELD"], [230, 229, 7, "enum_FIELD"], [242, 239, 7, "enum_FIELD"], [242, 243, 7, "enum_FIELD"], [248, 247, 7, "enum_FIELD"], [15, 14, 7, "enum_FIELD"], [37, 36, 7, "enum_FIELD"], [37, 38, 7, "enum_FIELD"], [48, 47, 7, "enum_FIELD"], [48, 49, 7, "enum_FIELD"], [52, 53, 7, "enum_FIELD"], [59, 58, 7, "enum_FIELD"], [59, 60, 7, "enum_FIELD"], [70, 69, 7, "enum_FIELD"], [70, 71, 7, "enum_FIELD"], [74, 75, 7, "enum_FIELD"], [81, 80, 7, "enum_FIELD"], [81, 82, 7, "enum_FIELD"], [85, 86, 7, "enum_FIELD"], [115, 114, 7, "enum_FIELD"], [118, 120, 7, "enum_FIELD"], [239, 236, 7, "enum_FIELD"], [239, 240, 7, "enum_FIELD"], [236, 235, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [29, 23, 10, "enum_LAST_LEXICAL_USE"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [31, 6, 10, "enum_LAST_LEXICAL_USE"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [36, 27, 10, "enum_LAST_LEXICAL_USE"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [47, 36, 10, "enum_LAST_LEXICAL_USE"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [53, 34, 10, "enum_LAST_LEXICAL_USE"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [58, 47, 10, "enum_LAST_LEXICAL_USE"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [69, 58, 10, "enum_LAST_LEXICAL_USE"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [75, 53, 10, "enum_LAST_LEXICAL_USE"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [80, 69, 10, "enum_LAST_LEXICAL_USE"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [86, 75, 10, "enum_LAST_LEXICAL_USE"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 89, 9, "enum_NEXT_SYNTAX"], [90, 45, 10, "enum_LAST_LEXICAL_USE"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [92, 90, 10, "enum_LAST_LEXICAL_USE"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [98, 92, 10, "enum_LAST_LEXICAL_USE"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 102, 9, "enum_NEXT_SYNTAX"], [103, 56, 10, "enum_LAST_LEXICAL_USE"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [112, 98, 10, "enum_LAST_LEXICAL_USE"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [114, 112, 10, "enum_LAST_LEXICAL_USE"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [157, 136, 10, "enum_LAST_LEXICAL_USE"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [161, 114, 10, "enum_LAST_LEXICAL_USE"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [164, 124, 10, "enum_LAST_LEXICAL_USE"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [167, 157, 10, "enum_LAST_LEXICAL_USE"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [174, 138, 10, "enum_LAST_LEXICAL_USE"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [178, 67, 10, "enum_LAST_LEXICAL_USE"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 180, 9, "enum_NEXT_SYNTAX"], [181, 164, 10, "enum_LAST_LEXICAL_USE"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [184, 174, 10, "enum_LAST_LEXICAL_USE"], [183, 184, 9, "enum_NEXT_SYNTAX"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [187, 188, 9, "enum_NEXT_SYNTAX"], [188, 189, 9, "enum_NEXT_SYNTAX"], [189, 190, 9, "enum_NEXT_SYNTAX"], [191, 184, 10, "enum_LAST_LEXICAL_USE"], [190, 191, 9, "enum_NEXT_SYNTAX"], [191, 192, 9, "enum_NEXT_SYNTAX"], [192, 193, 9, "enum_NEXT_SYNTAX"], [193, 194, 9, "enum_NEXT_SYNTAX"], [194, 195, 9, "enum_NEXT_SYNTAX"], [195, 196, 9, "enum_NEXT_SYNTAX"], [196, 197, 9, "enum_NEXT_SYNTAX"], [198, 140, 10, "enum_LAST_LEXICAL_USE"], [197, 198, 9, "enum_NEXT_SYNTAX"], [198, 199, 9, "enum_NEXT_SYNTAX"], [199, 200, 9, "enum_NEXT_SYNTAX"], [200, 201, 9, "enum_NEXT_SYNTAX"], [202, 178, 10, "enum_LAST_LEXICAL_USE"], [201, 202, 9, "enum_NEXT_SYNTAX"], [202, 203, 9, "enum_NEXT_SYNTAX"], [203, 204, 9, "enum_NEXT_SYNTAX"], [205, 181, 10, "enum_LAST_LEXICAL_USE"], [204, 205, 9, "enum_NEXT_SYNTAX"], [205, 206, 9, "enum_NEXT_SYNTAX"], [206, 207, 9, "enum_NEXT_SYNTAX"], [208, 198, 10, "enum_LAST_LEXICAL_USE"], [207, 208, 9, "enum_NEXT_SYNTAX"], [208, 209, 9, "enum_NEXT_SYNTAX"], [209, 210, 9, "enum_NEXT_SYNTAX"], [210, 211, 9, "enum_NEXT_SYNTAX"], [211, 212, 9, "enum_NEXT_SYNTAX"], [212, 213, 9, "enum_NEXT_SYNTAX"], [213, 214, 9, "enum_NEXT_SYNTAX"], [215, 208, 10, "enum_LAST_LEXICAL_USE"], [214, 215, 9, "enum_NEXT_SYNTAX"], [215, 216, 9, "enum_NEXT_SYNTAX"], [216, 217, 9, "enum_NEXT_SYNTAX"], [217, 218, 9, "enum_NEXT_SYNTAX"], [218, 219, 9, "enum_NEXT_SYNTAX"], [219, 220, 9, "enum_NEXT_SYNTAX"], [220, 221, 9, "enum_NEXT_SYNTAX"], [222, 215, 10, "enum_LAST_LEXICAL_USE"], [221, 222, 9, "enum_NEXT_SYNTAX"], [222, 223, 9, "enum_NEXT_SYNTAX"], [223, 224, 9, "enum_NEXT_SYNTAX"], [224, 225, 9, "enum_NEXT_SYNTAX"], [225, 226, 9, "enum_NEXT_SYNTAX"], [226, 227, 9, "enum_NEXT_SYNTAX"], [227, 228, 9, "enum_NEXT_SYNTAX"], [229, 133, 10, "enum_LAST_LEXICAL_USE"], [228, 229, 9, "enum_NEXT_SYNTAX"], [229, 230, 9, "enum_NEXT_SYNTAX"], [230, 231, 9, "enum_NEXT_SYNTAX"], [231, 232, 9, "enum_NEXT_SYNTAX"], [232, 233, 9, "enum_NEXT_SYNTAX"], [233, 234, 9, "enum_NEXT_SYNTAX"], [234, 235, 9, "enum_NEXT_SYNTAX"], [235, 236, 9, "enum_NEXT_SYNTAX"], [237, 2, 10, "enum_LAST_LEXICAL_USE"], [236, 237, 9, "enum_NEXT_SYNTAX"], [237, 238, 9, "enum_NEXT_SYNTAX"], [238, 239, 9, "enum_NEXT_SYNTAX"], [239, 240, 9, "enum_NEXT_SYNTAX"], [240, 241, 9, "enum_NEXT_SYNTAX"], [241, 242, 9, "enum_NEXT_SYNTAX"], [243, 31, 10, "enum_LAST_LEXICAL_USE"], [242, 243, 9, "enum_NEXT_SYNTAX"], [243, 244, 9, "enum_NEXT_SYNTAX"], [244, 245, 9, "enum_NEXT_SYNTAX"], [245, 246, 9, "enum_NEXT_SYNTAX"], [247, 144, 10, "enum_LAST_LEXICAL_USE"], [246, 247, 9, "enum_NEXT_SYNTAX"], [247, 248, 9, "enum_NEXT_SYNTAX"], [248, 249, 9, "enum_NEXT_SYNTAX"], [249, 250, 9, "enum_NEXT_SYNTAX"], [250, 251, 9, "enum_NEXT_SYNTAX"], [4, 8, 1, "enum_CFG_NEXT"], [8, 1, 1, "enum_CFG_NEXT"], [5, 89, 1, "enum_CFG_NEXT"], [89, 97, 1, "enum_CFG_NEXT"], [97, 103, 1, "enum_CFG_NEXT"], [103, 123, 1, "enum_CFG_NEXT"], [103, 106, 1, "enum_CFG_NEXT"], [106, 111, 1, "enum_CFG_NEXT"], [111, 123, 1, "enum_CFG_NEXT"], [123, 131, 1, "enum_CFG_NEXT"], [131, 156, 1, "enum_CFG_NEXT"], [156, 166, 1, "enum_CFG_NEXT"], [166, 173, 1, "enum_CFG_NEXT"], [173, 183, 1, "enum_CFG_NEXT"], [183, 190, 1, "enum_CFG_NEXT"], [190, 197, 1, "enum_CFG_NEXT"], [197, 207, 1, "enum_CFG_NEXT"], [207, 214, 1, "enum_CFG_NEXT"], [214, 221, 1, "enum_CFG_NEXT"], [221, 228, 1, "enum_CFG_NEXT"], [228, 246, 1, "enum_CFG_NEXT"], [90, 92, 2, "enum_LAST_READ"], [90, 90, 2, "enum_LAST_READ"], [98, 90, 2, "enum_LAST_READ"], [98, 90, 3, "enum_LAST_WRITE"], [98, 98, 2, "enum_LAST_READ"], [98, 90, 3, "enum_LAST_WRITE"], [114, 98, 2, "enum_LAST_READ"], [114, 98, 3, "enum_LAST_WRITE"], [112, 114, 2, "enum_LAST_READ"], [112, 98, 3, "enum_LAST_WRITE"], [157, 136, 3, "enum_LAST_WRITE"], [161, 114, 2, "enum_LAST_READ"], [161, 98, 2, "enum_LAST_READ"], [161, 112, 3, "enum_LAST_WRITE"], [161, 98, 3, "enum_LAST_WRITE"], [164, 124, 3, "enum_LAST_WRITE"], [167, 157, 2, "enum_LAST_READ"], [167, 136, 3, "enum_LAST_WRITE"], [174, 138, 3, "enum_LAST_WRITE"], [181, 164, 2, "enum_LAST_READ"], [181, 124, 3, "enum_LAST_WRITE"], [184, 174, 2, "enum_LAST_READ"], [184, 138, 3, "enum_LAST_WRITE"], [191, 184, 2, "enum_LAST_READ"], [191, 138, 3, "enum_LAST_WRITE"], [198, 140, 3, "enum_LAST_WRITE"], [202, 178, 2, "enum_LAST_READ"], [205, 181, 2, "enum_LAST_READ"], [205, 124, 3, "enum_LAST_WRITE"], [208, 198, 2, "enum_LAST_READ"], [208, 140, 3, "enum_LAST_WRITE"], [215, 208, 2, "enum_LAST_READ"], [215, 140, 3, "enum_LAST_WRITE"], [222, 215, 2, "enum_LAST_READ"], [222, 140, 3, "enum_LAST_WRITE"], [229, 133, 3, "enum_LAST_WRITE"], [237, 2, 3, "enum_LAST_WRITE"], [243, 6, 3, "enum_LAST_WRITE"], [247, 144, 2, "enum_LAST_READ"], [134, 144, 4, "enum_COMPUTED_FROM"], [27, 29, 4, "enum_COMPUTED_FROM"], [27, 31, 4, "enum_COMPUTED_FROM"], [34, 36, 4, "enum_COMPUTED_FROM"], [45, 47, 4, "enum_COMPUTED_FROM"], [45, 53, 4, "enum_COMPUTED_FROM"], [56, 58, 4, "enum_COMPUTED_FROM"], [67, 69, 4, "enum_COMPUTED_FROM"], [67, 75, 4, "enum_COMPUTED_FROM"], [78, 80, 4, "enum_COMPUTED_FROM"], [78, 86, 4, "enum_COMPUTED_FROM"], [112, 114, 4, "enum_COMPUTED_FROM"]], "error_location": 202, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/eljost/pysisyphus.git", "old_path": "pysisyphus/plot.py", "hash": "98f7e8f2e9a295c727cf57b2dd6bca90fd829b16", "code": "def plot_opt(h5_fn: str=\"optimization.h5\", group_name: str=\"opt\"):\n    with h5py.File(\"optimization.h5\", \"r\") as handle:\n        group: h5py.Group = handle[group_name]\n        cur_cycle: int = group[\"cur_cycle\"][()]\n        ens: np.ndarray = group[\"energies\"][:cur_cycle]\n        is_cos: bool = group[\"is_cos\"][()]\n        max_forces: np.ndarray = group[\"max_forces\"][:cur_cycle]\n        rms_forces: np.ndarray = group[\"rms_forces\"][:cur_cycle]\n\n    ens -= ens.min()\n    ens *= AU2KJPERMOL\n    if is_cos:\n        print(\"COS optimization detected. Plotting total energy of all images \"\n              \"in every cycle. Results from optimizing growing COS methods can \"\n              \"be plotted but the plots are not really useful as the varying \"\n              \"number of images is not considered.\")\n        ens = ens.sum(axis=1)\n\n    ax_kwargs: Dict[str, Any] = {\n        \"marker\": \"o\",\n    }\n\n    fig, (ax0, ax1, ax2) = plt.subplots(nrows=3, sharex=True)\n\n    ax0.plot(ens, **ax_kwargs)\n    ax0.set_ylabel(\"$\\Delta E$ / kJ mol\u207b\u00b9\")\n\n    ax1.plot(max_forces, **ax_kwargs)\n    ax1.set_title(\"max(forces)\")\n    ax1.set_ylabel(\"$E_h$ Bohr\u207b\u00b9 (rad)\u207b\u00b9\")\n\n    ax2.plot(max_forces, **ax_kwargs)\n    ax2.set_title(\"rms(forces)\")\n    ax2.set_xlabel(\"Step\")\n    ax2.set_ylabel(\"$E_h$ Bohr\u207b\u00b9 (rad)\u207b\u00b9\")\n\n    fig.suptitle(str(h5_fn) + \"/\" + group_name)\n    plt.show()\n", "rewrite": "ReplaceText(target='rms_forces' @(840,13)->(840,23))", "error_line": 31, "has_bug": true, "code_full": "from typing import Any, Dict\n\nimport h5py\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nAU2KJPERMOL: float\n\n\ndef plot_opt(h5_fn: str=\"optimization.h5\", group_name: str=\"opt\"):\n    with h5py.File(\"optimization.h5\", \"r\") as handle:\n        group: h5py.Group = handle[group_name]\n        cur_cycle: int = group[\"cur_cycle\"][()]\n        ens: np.ndarray = group[\"energies\"][:cur_cycle]\n        is_cos: bool = group[\"is_cos\"][()]\n        max_forces: np.ndarray = group[\"max_forces\"][:cur_cycle]\n        rms_forces: np.ndarray = group[\"rms_forces\"][:cur_cycle]\n\n    ens -= ens.min()\n    ens *= AU2KJPERMOL\n    if is_cos:\n        print(\"COS optimization detected. Plotting total energy of all images \"\n              \"in every cycle. Results from optimizing growing COS methods can \"\n              \"be plotted but the plots are not really useful as the varying \"\n              \"number of images is not considered.\")\n        ens = ens.sum(axis=1)\n\n    ax_kwargs: Dict[str, Any] = {\n        \"marker\": \"o\",\n    }\n\n    fig, (ax0, ax1, ax2) = plt.subplots(nrows=3, sharex=True)\n\n    ax0.plot(ens, **ax_kwargs)\n    ax0.set_ylabel(\"$\\Delta E$ / kJ mol\u207b\u00b9\")\n\n    ax1.plot(max_forces, **ax_kwargs)\n    ax1.set_title(\"max(forces)\")\n    ax1.set_ylabel(\"$E_h$ Bohr\u207b\u00b9 (rad)\u207b\u00b9\")\n\n    ax2.plot(max_forces, **ax_kwargs)\n    ax2.set_title(\"rms(forces)\")\n    ax2.set_xlabel(\"Step\")\n    ax2.set_ylabel(\"$E_h$ Bohr\u207b\u00b9 (rad)\u207b\u00b9\")\n\n    fig.suptitle(str(h5_fn) + \"/\" + group_name)\n    plt.show()\n", "error_location_char": [1160, 1170], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def echo_copyright(", ")", ":", "#NEWLINE#", "#INDENT#", "'Display a greeting message providing basic set of information.'", "#NEWLINE#", "cur_year", "=", "str", "(", "datetime", ".", "now", "(", ")", ".", "year", ")", "#NEWLINE#", "year_range", "=", "'2018'", "#NEWLINE#", "if", "(", "cur_year", "!=", "year_range", ")", ":", "#NEWLINE#", "#INDENT#", "year_range", "=", "'2018-{}'", ".", "format", "(", "year_range", ")", "#NEWLINE#", "#UNINDENT#", "gpl3_notice_2018", "=", "[", "'{app_name} {version}'", ".", "format", "(", "app_name", "=", "__BigName__", ",", "version", "=", "dob_version", ")", ",", "''", ",", "'Copyright (C) {years} {author} <{email}>'", ".", "format", "(", "years", "=", "year_range", ",", "author", "=", "__author__", ",", "email", "=", "__author_email__", ")", ",", "'Copyright (C) 2015-2016 Eric Goller <elbenfreund@DenkenInEchtzeit.net>'", ",", "'Copyright (C) 2007-2014 Toms Baugis <toms.baugis@gmail.com>'", ",", "'Copyright (C) 2007-2008 Patryk Zawadzki <patrys at pld-linux.org>'", ",", "''", ",", "_", "(", "'This program comes with ABSOLUTELY NO WARRANTY. This is free software,'", ")", ",", "_", "(", "'and you are welcome to redistribute it under certain conditions.'", ")", ",", "_", "(", "''", ")", ",", "_", "(", "'Run `{} license` for details.'", ")", ".", "format", "(", "__arg0name__", ")", "]", "#NEWLINE#", "notice", "=", "gpl3_notice_2018", "#NEWLINE#", "for", "line", "in", "notice", ":", "#NEWLINE#", "#INDENT#", "click_echo", "(", "line", ")"], "edges": [[5, 6, 7, "enum_FIELD"], [7, 11, 7, "enum_FIELD"], [20, 23, 7, "enum_FIELD"], [25, 28, 7, "enum_FIELD"], [43, 82, 7, "enum_FIELD"], [112, 115, 7, "enum_FIELD"], [119, 118, 7, "enum_FIELD"], [119, 120, 7, "enum_FIELD"], [11, 10, 7, "enum_FIELD"], [28, 27, 7, "enum_FIELD"], [33, 39, 7, "enum_FIELD"], [123, 125, 7, "enum_FIELD"], [17, 15, 7, "enum_FIELD"], [39, 37, 7, "enum_FIELD"], [54, 48, 7, "enum_FIELD"], [69, 63, 7, "enum_FIELD"], [88, 87, 7, "enum_FIELD"], [93, 92, 7, "enum_FIELD"], [98, 97, 7, "enum_FIELD"], [108, 106, 7, "enum_FIELD"], [125, 124, 7, "enum_FIELD"], [15, 13, 7, "enum_FIELD"], [37, 36, 7, "enum_FIELD"], [48, 47, 7, "enum_FIELD"], [51, 53, 7, "enum_FIELD"], [55, 57, 7, "enum_FIELD"], [63, 62, 7, "enum_FIELD"], [66, 68, 7, "enum_FIELD"], [70, 72, 7, "enum_FIELD"], [74, 76, 7, "enum_FIELD"], [106, 103, 7, "enum_FIELD"], [13, 12, 7, "enum_FIELD"], [103, 102, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [27, 8, 10, "enum_LAST_LEXICAL_USE"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [29, 21, 10, "enum_LAST_LEXICAL_USE"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 33, 9, "enum_NEXT_SYNTAX"], [34, 29, 10, "enum_LAST_LEXICAL_USE"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [40, 34, 10, "enum_LAST_LEXICAL_USE"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [68, 40, 10, "enum_LAST_LEXICAL_USE"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [92, 87, 10, "enum_LAST_LEXICAL_USE"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [97, 92, 10, "enum_LAST_LEXICAL_USE"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [102, 97, 10, "enum_LAST_LEXICAL_USE"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [115, 44, 10, "enum_LAST_LEXICAL_USE"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [120, 113, 10, "enum_LAST_LEXICAL_USE"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [126, 118, 10, "enum_LAST_LEXICAL_USE"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [5, 7, 1, "enum_CFG_NEXT"], [7, 20, 1, "enum_CFG_NEXT"], [20, 28, 1, "enum_CFG_NEXT"], [28, 43, 1, "enum_CFG_NEXT"], [28, 33, 1, "enum_CFG_NEXT"], [33, 43, 1, "enum_CFG_NEXT"], [43, 112, 1, "enum_CFG_NEXT"], [112, 120, 1, "enum_CFG_NEXT"], [120, 118, 1, "enum_CFG_NEXT"], [118, 123, 1, "enum_CFG_NEXT"], [123, 118, 1, "enum_CFG_NEXT"], [27, 8, 3, "enum_LAST_WRITE"], [29, 21, 3, "enum_LAST_WRITE"], [40, 29, 2, "enum_LAST_READ"], [40, 21, 3, "enum_LAST_WRITE"], [34, 40, 2, "enum_LAST_READ"], [34, 21, 3, "enum_LAST_WRITE"], [68, 29, 2, "enum_LAST_READ"], [68, 40, 2, "enum_LAST_READ"], [68, 21, 3, "enum_LAST_WRITE"], [68, 34, 3, "enum_LAST_WRITE"], [92, 87, 2, "enum_LAST_READ"], [97, 92, 2, "enum_LAST_READ"], [102, 97, 2, "enum_LAST_READ"], [115, 44, 3, "enum_LAST_WRITE"], [120, 113, 3, "enum_LAST_WRITE"], [118, 126, 2, "enum_LAST_READ"], [118, 118, 3, "enum_LAST_WRITE"], [124, 124, 2, "enum_LAST_READ"], [126, 126, 2, "enum_LAST_READ"], [126, 118, 3, "enum_LAST_WRITE"], [8, 10, 4, "enum_COMPUTED_FROM"], [8, 12, 4, "enum_COMPUTED_FROM"], [44, 87, 4, "enum_COMPUTED_FROM"], [44, 92, 4, "enum_COMPUTED_FROM"], [44, 97, 4, "enum_COMPUTED_FROM"], [44, 109, 4, "enum_COMPUTED_FROM"], [44, 53, 4, "enum_COMPUTED_FROM"], [44, 57, 4, "enum_COMPUTED_FROM"], [44, 68, 4, "enum_COMPUTED_FROM"], [44, 72, 4, "enum_COMPUTED_FROM"], [44, 76, 4, "enum_COMPUTED_FROM"], [44, 102, 4, "enum_COMPUTED_FROM"], [113, 115, 4, "enum_COMPUTED_FROM"], [34, 40, 4, "enum_COMPUTED_FROM"]], "error_location": 40, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/hotoffthehamster/dob.git", "old_path": "dob/copyright.py", "hash": "9615cad9da920842a23b9a124b1d39356ebe7d2e", "code": "def echo_copyright():\n    \"\"\"Display a greeting message providing basic set of information.\"\"\"\n    cur_year: str = str(datetime.now().year)\n    year_range: str = '2018'\n    if cur_year != year_range:\n        year_range = '2018-{}'.format(year_range)\n    gpl3_notice_2018: List[str] = [\n        '{app_name} {version}'.format(\n            app_name=__BigName__,\n            version=dob_version,\n        ),\n        '',\n        'Copyright (C) {years} {author} <{email}>'.format(\n            years=year_range,\n            author=__author__,\n            email=__author_email__,\n        ),\n        # Be nice and call out the significant copyright holders from the years.\n        # (lb): What about Right to be forgotten?\n        'Copyright (C) 2015-2016 Eric Goller <elbenfreund@DenkenInEchtzeit.net>',\n        'Copyright (C) 2007-2014 Toms Baugis <toms.baugis@gmail.com>',\n        'Copyright (C) 2007-2008 Patryk Zawadzki <patrys at pld-linux.org>',\n        '',\n        _('This program comes with ABSOLUTELY NO WARRANTY. This is free software,'),\n        _('and you are welcome to redistribute it under certain conditions.'),\n        _(''),\n        _('Run `{} license` for details.').format(__arg0name__),\n    ]\n    notice: List[str] = gpl3_notice_2018\n    for line in notice:\n        click_echo(line)\n", "rewrite": "ReplaceText(target='cur_year' @(46,38)->(46,48))", "error_line": 5, "has_bug": true, "code_full": "from datetime import datetime\nfrom typing import List\n\nimport click\n\n__BigName__: str = \"\"\n__author__: str = \"\"\n__author_email__: str = \"\"\n__arg0name__: str = \"\"\ndob_version: str = \"\"\n\n\ndef click_echo(message: str):\n    pass\n\n\ndef _(text: str) -> str:\n    return text\n\n\ndef echo_copyright():\n    \"\"\"Display a greeting message providing basic set of information.\"\"\"\n    cur_year: str = str(datetime.now().year)\n    year_range: str = '2018'\n    if cur_year != year_range:\n        year_range = '2018-{}'.format(year_range)\n    gpl3_notice_2018: List[str] = [\n        '{app_name} {version}'.format(\n            app_name=__BigName__,\n            version=dob_version,\n        ),\n        '',\n        'Copyright (C) {years} {author} <{email}>'.format(\n            years=year_range,\n            author=__author__,\n            email=__author_email__,\n        ),\n        # Be nice and call out the significant copyright holders from the years.\n        # (lb): What about Right to be forgotten?\n        'Copyright (C) 2015-2016 Eric Goller <elbenfreund@DenkenInEchtzeit.net>',\n        'Copyright (C) 2007-2014 Toms Baugis <toms.baugis@gmail.com>',\n        'Copyright (C) 2007-2008 Patryk Zawadzki <patrys at pld-linux.org>',\n        '',\n        _('This program comes with ABSOLUTELY NO WARRANTY. This is free software,'),\n        _('and you are welcome to redistribute it under certain conditions.'),\n        _(''),\n        _('Run `{} license` for details.').format(__arg0name__),\n    ]\n    notice: List[str] = gpl3_notice_2018\n    for line in notice:\n        click_echo(line)\n", "error_location_char": [238, 248], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def generate_prebuilt_files(", "build_lib", ")", ":", "#NEWLINE#", "#INDENT#", "print", "(", "'compiling frc hal...'", ")", "#NEWLINE#", "with", "tempfile", ".", "TemporaryDirectory", "(", ")", "as", "builddir", ":", "#NEWLINE#", "#INDENT#", "source_dir", "=", "os", ".", "path", ".", "realpath", "(", "os", ".", "path", ".", "join", "(", "here", ",", "'themis-frc-hal'", ")", ")", "#NEWLINE#", "subprocess", ".", "check_call", "(", "[", "'cmake'", ",", "source_dir", "]", ",", "cwd", "=", "builddir", ")", "#NEWLINE#", "subprocess", ".", "check_call", "(", "[", "'make'", "]", ",", "cwd", "=", "builddir", ")", "#NEWLINE#", "SO_NAME", "=", "'libthemis-frc.so'", "#NEWLINE#", "HEADER_NAME", "=", "'themis/themis.h'", "#NEWLINE#", "shutil", ".", "copyfile", "(", "os", ".", "path", ".", "join", "(", "builddir", ",", "SO_NAME", ")", ",", "os", ".", "path", ".", "join", "(", "build_lib", ",", "'themis'", ",", "SO_NAME", ")", ")", "#NEWLINE#", "shutil", ".", "copyfile", "(", "os", ".", "path", ".", "join", "(", "builddir", ",", "HEADER_NAME", ")", ",", "os", ".", "path", ".", "join", "(", "build_lib", ",", "'themis'", ",", "os", ".", "path", ".", "basename", "(", "HEADER_NAME", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "print", "(", "'finished compiling frc hal'", ")"], "edges": [[6, 8, 7, "enum_FIELD"], [144, 146, 7, "enum_FIELD"], [8, 7, 7, "enum_FIELD"], [18, 16, 7, "enum_FIELD"], [18, 19, 7, "enum_FIELD"], [22, 30, 7, "enum_FIELD"], [42, 52, 7, "enum_FIELD"], [57, 65, 7, "enum_FIELD"], [70, 73, 7, "enum_FIELD"], [74, 77, 7, "enum_FIELD"], [78, 93, 7, "enum_FIELD"], [107, 122, 7, "enum_FIELD"], [146, 145, 7, "enum_FIELD"], [16, 14, 7, "enum_FIELD"], [30, 28, 7, "enum_FIELD"], [52, 44, 7, "enum_FIELD"], [65, 59, 7, "enum_FIELD"], [93, 80, 7, "enum_FIELD"], [122, 109, 7, "enum_FIELD"], [14, 13, 7, "enum_FIELD"], [28, 26, 7, "enum_FIELD"], [38, 34, 7, "enum_FIELD"], [44, 43, 7, "enum_FIELD"], [53, 55, 7, "enum_FIELD"], [59, 58, 7, "enum_FIELD"], [66, 68, 7, "enum_FIELD"], [80, 79, 7, "enum_FIELD"], [90, 86, 7, "enum_FIELD"], [101, 97, 7, "enum_FIELD"], [109, 108, 7, "enum_FIELD"], [119, 115, 7, "enum_FIELD"], [130, 126, 7, "enum_FIELD"], [26, 25, 7, "enum_FIELD"], [34, 32, 7, "enum_FIELD"], [86, 84, 7, "enum_FIELD"], [97, 95, 7, "enum_FIELD"], [115, 113, 7, "enum_FIELD"], [126, 124, 7, "enum_FIELD"], [138, 136, 7, "enum_FIELD"], [32, 31, 7, "enum_FIELD"], [84, 83, 7, "enum_FIELD"], [95, 94, 7, "enum_FIELD"], [113, 112, 7, "enum_FIELD"], [124, 123, 7, "enum_FIELD"], [136, 134, 7, "enum_FIELD"], [134, 133, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [31, 25, 10, "enum_LAST_LEXICAL_USE"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [50, 23, 10, "enum_LAST_LEXICAL_USE"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [55, 19, 10, "enum_LAST_LEXICAL_USE"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [58, 43, 10, "enum_LAST_LEXICAL_USE"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [68, 55, 10, "enum_LAST_LEXICAL_USE"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [83, 31, 10, "enum_LAST_LEXICAL_USE"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [89, 68, 10, "enum_LAST_LEXICAL_USE"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [91, 71, 10, "enum_LAST_LEXICAL_USE"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [94, 83, 10, "enum_LAST_LEXICAL_USE"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [100, 2, 10, "enum_LAST_LEXICAL_USE"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [104, 91, 10, "enum_LAST_LEXICAL_USE"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [108, 79, 10, "enum_LAST_LEXICAL_USE"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [112, 94, 10, "enum_LAST_LEXICAL_USE"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [118, 89, 10, "enum_LAST_LEXICAL_USE"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [120, 75, 10, "enum_LAST_LEXICAL_USE"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [123, 112, 10, "enum_LAST_LEXICAL_USE"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [129, 100, 10, "enum_LAST_LEXICAL_USE"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [133, 123, 10, "enum_LAST_LEXICAL_USE"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [139, 120, 10, "enum_LAST_LEXICAL_USE"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 144, 9, "enum_NEXT_SYNTAX"], [145, 7, 10, "enum_LAST_LEXICAL_USE"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [6, 144, 1, "enum_CFG_NEXT"], [145, 7, 2, "enum_LAST_READ"], [23, 37, 4, "enum_COMPUTED_FROM"], [23, 25, 4, "enum_COMPUTED_FROM"], [23, 31, 4, "enum_COMPUTED_FROM"]], "error_location": 118, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/celskeggs/themis.git", "old_path": "setup.py", "hash": "7f075e9140cb32cd691ca4725fa6a1789226ad23", "code": "def generate_prebuilt_files(build_lib: str):\n    print(\"compiling frc hal...\")\n    with tempfile.TemporaryDirectory() as builddir:\n        source_dir: str = os.path.realpath(os.path.join(here, \"themis-frc-hal\"))\n        subprocess.check_call([\"cmake\", source_dir], cwd=builddir)\n        subprocess.check_call([\"make\"], cwd=builddir)\n        SO_NAME: str = \"libthemis-frc.so\"\n        HEADER_NAME: str = \"themis/themis.h\"\n\n        shutil.copyfile(os.path.join(builddir, SO_NAME),\n                        os.path.join(build_lib, \"themis\", SO_NAME))\n        shutil.copyfile(os.path.join(builddir, HEADER_NAME),\n                        os.path.join(build_lib, \"themis\", os.path.basename(HEADER_NAME)))\n    print(\"finished compiling frc hal\")\n", "rewrite": "ReplaceText(target='source_dir' @(22,37)->(22,45))", "error_line": 11, "has_bug": true, "code_full": "import os\nimport shutil\nimport subprocess\nimport tempfile\n\nhere: str = \"\"\n\n\ndef generate_prebuilt_files(build_lib: str):\n    print(\"compiling frc hal...\")\n    with tempfile.TemporaryDirectory() as builddir:\n        source_dir: str = os.path.realpath(os.path.join(here, \"themis-frc-hal\"))\n        subprocess.check_call([\"cmake\", source_dir], cwd=builddir)\n        subprocess.check_call([\"make\"], cwd=builddir)\n        SO_NAME: str = \"libthemis-frc.so\"\n        HEADER_NAME: str = \"themis/themis.h\"\n\n        shutil.copyfile(os.path.join(builddir, SO_NAME),\n                        os.path.join(build_lib, \"themis\", SO_NAME))\n        shutil.copyfile(os.path.join(builddir, HEADER_NAME),\n                        os.path.join(build_lib, \"themis\", os.path.basename(HEADER_NAME)))\n    print(\"finished compiling frc hal\")\n", "error_location_char": [583, 591], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def _save_structure(", "self", ",", "out_file", ",", "select", ",", "preserve_atom_numbering", ")", ":", "#NEWLINE#", "#INDENT#", "if", "self", ".", "_noRepeated", "(", "self", ".", "structure", ")", ":", "#NEWLINE#", "#INDENT#", "atom_dict", "=", "defaultdict", "(", "list", ")", "#NEWLINE#", "for", "model", "in", "self", ".", "structure", ".", "get_list", "(", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "not", "select", ".", "accept_model", "(", "model", ")", ")", ":", "#NEWLINE#", "#INDENT#", "continue", "#NEWLINE#", "#UNINDENT#", "if", "(", "model", ".", "serial_num", "==", "0", ")", ":", "#NEWLINE#", "#INDENT#", "model_n", "=", "'1'", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "model_n", "=", "str", "(", "model", ".", "serial_num", ")", "#NEWLINE#", "#UNINDENT#", "entity_id", "=", "0", "#NEWLINE#", "if", "(", "not", "preserve_atom_numbering", ")", ":", "#NEWLINE#", "#INDENT#", "atom_number", "=", "1", "#NEWLINE#", "#UNINDENT#", "for", "chain", "in", "model", ".", "get_list", "(", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "not", "select", ".", "accept_chain", "(", "chain", ")", ")", ":", "#NEWLINE#", "#INDENT#", "continue", "#NEWLINE#", "#UNINDENT#", "chain_id", "=", "chain", ".", "get_id", "(", ")", "#NEWLINE#", "if", "(", "chain_id", "==", "' '", ")", ":", "#NEWLINE#", "#INDENT#", "chain_id", "=", "'.'", "#NEWLINE#", "#UNINDENT#", "residue_number", "=", "1", "#NEWLINE#", "prev_residue_type", "=", "''", "#NEWLINE#", "prev_resname", "=", "''", "#NEWLINE#", "for", "residue", "in", "chain", ".", "get_unpacked_list", "(", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "not", "select", ".", "accept_residue", "(", "residue", ")", ")", ":", "#NEWLINE#", "#INDENT#", "continue", "#NEWLINE#", "#UNINDENT#", "(", "hetfield", ",", "resseq", ",", "icode", ")", "=", "residue", ".", "get_id", "(", ")", "#NEWLINE#", "if", "(", "hetfield", "==", "' '", ")", ":", "#NEWLINE#", "#INDENT#", "residue_type", "=", "'ATOM'", "#NEWLINE#", "label_seq_id", "=", "str", "(", "residue_number", ")", "#NEWLINE#", "residue_number", "+=", "1", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "residue_type", "=", "'HETATM'", "#NEWLINE#", "label_seq_id", "=", "'.'", "#NEWLINE#", "#UNINDENT#", "resseq", "=", "str", "(", "resseq", ")", "#NEWLINE#", "if", "(", "icode", "==", "' '", ")", ":", "#NEWLINE#", "#INDENT#", "icode", "=", "'?'", "#NEWLINE#", "#UNINDENT#", "resname", "=", "residue", ".", "get_resname", "(", ")", "#NEWLINE#", "prev_residue_type", "=", "residue_type", "#NEWLINE#", "prev_resname", "=", "resname", "#NEWLINE#", "for", "atom", "in", "residue", ".", "get_unpacked_list", "(", ")", ":", "#NEWLINE#", "#INDENT#", "if", "select", ".", "accept_atom", "(", "atom", ")", ":", "#NEWLINE#", "#INDENT#", "atom_dict", "[", "'_atom_site.group_PDB'", "]", ".", "append", "(", "residue_type", ")", "#NEWLINE#", "if", "preserve_atom_numbering", ":", "#NEWLINE#", "#INDENT#", "atom_number", "=", "atom", ".", "get_serial_number", "(", ")", "#NEWLINE#", "#UNINDENT#", "atom_dict", "[", "'_atom_site.id'", "]", ".", "append", "(", "str", "(", "atom_number", ")", ")", "#NEWLINE#", "if", "(", "not", "preserve_atom_numbering", ")", ":", "#NEWLINE#", "#INDENT#", "atom_number", "+=", "1", "#NEWLINE#", "#UNINDENT#", "element", "=", "atom", ".", "element", ".", "strip", "(", ")", "#NEWLINE#", "if", "(", "element", "==", "''", ")", ":", "#NEWLINE#", "#INDENT#", "element", "=", "'?'", "#NEWLINE#", "#UNINDENT#", "atom_dict", "[", "'_atom_site.type_symbol'", "]", ".", "append", "(", "element", ")", "#NEWLINE#", "atom_dict", "[", "'_atom_site.label_atom_id'", "]", ".", "append", "(", "atom", ".", "get_name", "(", ")", ".", "strip", "(", ")", ")", "#NEWLINE#", "altloc", "=", "atom", ".", "get_altloc", "(", ")", "#NEWLINE#", "if", "(", "altloc", "==", "' '", ")", ":", "#NEWLINE#", "#INDENT#", "altloc", "=", "'.'", "#NEWLINE#", "#UNINDENT#", "atom_dict", "[", "'_atom_site.label_alt_id'", "]", ".", "append", "(", "altloc", ")", "#NEWLINE#", "atom_dict", "[", "'_atom_site.label_comp_id'", "]", ".", "append", "(", "resname", ".", "strip", "(", ")", ")", "#NEWLINE#", "atom_dict", "[", "'_atom_site.label_asym_id'", "]", ".", "append", "(", "chain_id", ")", "#NEWLINE#", "atom_dict", "[", "'_atom_site.label_entity_id'", "]", ".", "append", "(", "'?'", ")", "#NEWLINE#", "atom_dict", "[", "'_atom_site.label_seq_id'", "]", ".", "append", "(", "label_seq_id", ")", "#NEWLINE#", "atom_dict", "[", "'_atom_site.pdbx_PDB_ins_code'", "]", ".", "append", "(", "icode", ")", "#NEWLINE#", "coord", "=", "atom", ".", "get_coord", "(", ")", "#NEWLINE#", "atom_dict", "[", "'_atom_site.Cartn_x'", "]", ".", "append", "(", "(", "'%.3f'", "%", "coord", "[", "0", "]", ")", ")", "#NEWLINE#", "atom_dict", "[", "'_atom_site.Cartn_y'", "]", ".", "append", "(", "(", "'%.3f'", "%", "coord", "[", "1", "]", ")", ")", "#NEWLINE#", "atom_dict", "[", "'_atom_site.Cartn_z'", "]", ".", "append", "(", "(", "'%.3f'", "%", "coord", "[", "2", "]", ")", ")", "#NEWLINE#", "atom_dict", "[", "'_atom_site.occupancy'", "]", ".", "append", "(", "str", "(", "atom", ".", "get_occupancy", "(", ")", ")", ")", "#NEWLINE#", "atom_dict", "[", "'_atom_site.B_iso_or_equiv'", "]", ".", "append", "(", "str", "(", "atom", ".", "get_bfactor", "(", ")", ")", ")", "#NEWLINE#", "atom_dict", "[", "'_atom_site.auth_seq_id'", "]", ".", "append", "(", "resseq", ")", "#NEWLINE#", "atom_dict", "[", "'_atom_site.auth_asym_id'", "]", ".", "append", "(", "chain_id", ")", "#NEWLINE#", "atom_dict", "[", "'_atom_site.pdbx_PDB_model_num'", "]", ".", "append", "(", "model_n", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "structure_id", "=", "self", ".", "structure", ".", "id", "#NEWLINE#", "for", "c", "in", "[", "'#'", ",", "'$'", ",", "\"'\"", ",", "'\"'", ",", "'['", ",", "']'", ",", "' '", ",", "'\\t'", ",", "'\\n'", "]", ":", "#NEWLINE#", "#INDENT#", "structure_id", "=", "structure_id", ".", "replace", "(", "c", ",", "''", ")", "#NEWLINE#", "#UNINDENT#", "atom_dict", "[", "'data_'", "]", "=", "structure_id", "#NEWLINE#", "self", ".", "dic", "=", "atom_dict", "#NEWLINE#", "self", ".", "_save_dict", "(", "out_file", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "super", "(", "scipionMMCIFIO", ",", "self", ")", ".", "_save_structure", "(", "out_file", ",", "select", ",", "preserve_atom_numbering", ")"], "edges": [[1, 5, 7, "enum_FIELD"], [22, 17, 7, "enum_FIELD"], [17, 15, 7, "enum_FIELD"], [24, 28, 7, "enum_FIELD"], [34, 33, 7, "enum_FIELD"], [34, 40, 7, "enum_FIELD"], [621, 627, 7, "enum_FIELD"], [632, 631, 7, "enum_FIELD"], [632, 641, 7, "enum_FIELD"], [666, 672, 7, "enum_FIELD"], [673, 678, 7, "enum_FIELD"], [679, 683, 7, "enum_FIELD"], [691, 702, 7, "enum_FIELD"], [15, 14, 7, "enum_FIELD"], [19, 18, 7, "enum_FIELD"], [28, 27, 7, "enum_FIELD"], [40, 38, 7, "enum_FIELD"], [45, 47, 7, "enum_FIELD"], [69, 66, 7, "enum_FIELD"], [90, 93, 7, "enum_FIELD"], [95, 97, 7, "enum_FIELD"], [110, 109, 7, "enum_FIELD"], [110, 114, 7, "enum_FIELD"], [627, 625, 7, "enum_FIELD"], [654, 662, 7, "enum_FIELD"], [668, 667, 7, "enum_FIELD"], [668, 669, 7, "enum_FIELD"], [675, 674, 7, "enum_FIELD"], [683, 681, 7, "enum_FIELD"], [702, 698, 7, "enum_FIELD"], [38, 36, 7, "enum_FIELD"], [47, 51, 7, "enum_FIELD"], [66, 64, 7, "enum_FIELD"], [71, 74, 7, "enum_FIELD"], [80, 84, 7, "enum_FIELD"], [97, 98, 7, "enum_FIELD"], [102, 105, 7, "enum_FIELD"], [114, 112, 7, "enum_FIELD"], [119, 121, 7, "enum_FIELD"], [134, 140, 7, "enum_FIELD"], [143, 146, 7, "enum_FIELD"], [156, 159, 7, "enum_FIELD"], [160, 163, 7, "enum_FIELD"], [164, 167, 7, "enum_FIELD"], [171, 170, 7, "enum_FIELD"], [171, 175, 7, "enum_FIELD"], [625, 624, 7, "enum_FIELD"], [662, 658, 7, "enum_FIELD"], [681, 680, 7, "enum_FIELD"], [698, 695, 7, "enum_FIELD"], [36, 35, 7, "enum_FIELD"], [51, 49, 7, "enum_FIELD"], [64, 63, 7, "enum_FIELD"], [84, 83, 7, "enum_FIELD"], [112, 111, 7, "enum_FIELD"], [121, 125, 7, "enum_FIELD"], [140, 138, 7, "enum_FIELD"], [146, 145, 7, "enum_FIELD"], [151, 154, 7, "enum_FIELD"], [175, 173, 7, "enum_FIELD"], [180, 182, 7, "enum_FIELD"], [195, 207, 7, "enum_FIELD"], [216, 213, 7, "enum_FIELD"], [247, 251, 7, "enum_FIELD"], [255, 258, 7, "enum_FIELD"], [268, 274, 7, "enum_FIELD"], [276, 279, 7, "enum_FIELD"], [280, 283, 7, "enum_FIELD"], [287, 286, 7, "enum_FIELD"], [287, 291, 7, "enum_FIELD"], [658, 657, 7, "enum_FIELD"], [695, 692, 7, "enum_FIELD"], [49, 48, 7, "enum_FIELD"], [86, 85, 7, "enum_FIELD"], [125, 123, 7, "enum_FIELD"], [138, 137, 7, "enum_FIELD"], [173, 172, 7, "enum_FIELD"], [182, 186, 7, "enum_FIELD"], [207, 205, 7, "enum_FIELD"], [213, 212, 7, "enum_FIELD"], [218, 221, 7, "enum_FIELD"], [222, 226, 7, "enum_FIELD"], [229, 230, 7, "enum_FIELD"], [229, 232, 7, "enum_FIELD"], [238, 241, 7, "enum_FIELD"], [242, 245, 7, "enum_FIELD"], [251, 250, 7, "enum_FIELD"], [258, 257, 7, "enum_FIELD"], [263, 266, 7, "enum_FIELD"], [274, 272, 7, "enum_FIELD"], [291, 289, 7, "enum_FIELD"], [296, 300, 7, "enum_FIELD"], [123, 122, 7, "enum_FIELD"], [186, 184, 7, "enum_FIELD"], [205, 204, 7, "enum_FIELD"], [226, 225, 7, "enum_FIELD"], [272, 271, 7, "enum_FIELD"], [289, 288, 7, "enum_FIELD"], [300, 298, 7, "enum_FIELD"], [305, 312, 7, "enum_FIELD"], [316, 317, 7, "enum_FIELD"], [329, 336, 7, "enum_FIELD"], [343, 345, 7, "enum_FIELD"], [355, 363, 7, "enum_FIELD"], [366, 369, 7, "enum_FIELD"], [379, 386, 7, "enum_FIELD"], [389, 396, 7, "enum_FIELD"], [407, 413, 7, "enum_FIELD"], [416, 419, 7, "enum_FIELD"], [429, 436, 7, "enum_FIELD"], [439, 446, 7, "enum_FIELD"], [453, 460, 7, "enum_FIELD"], [463, 470, 7, "enum_FIELD"], [473, 480, 7, "enum_FIELD"], [483, 490, 7, "enum_FIELD"], [493, 499, 7, "enum_FIELD"], [501, 508, 7, "enum_FIELD"], [518, 525, 7, "enum_FIELD"], [535, 542, 7, "enum_FIELD"], [552, 559, 7, "enum_FIELD"], [569, 576, 7, "enum_FIELD"], [586, 593, 7, "enum_FIELD"], [596, 603, 7, "enum_FIELD"], [606, 613, 7, "enum_FIELD"], [184, 183, 7, "enum_FIELD"], [298, 297, 7, "enum_FIELD"], [312, 310, 7, "enum_FIELD"], [320, 326, 7, "enum_FIELD"], [336, 334, 7, "enum_FIELD"], [345, 346, 7, "enum_FIELD"], [350, 351, 7, "enum_FIELD"], [350, 353, 7, "enum_FIELD"], [363, 361, 7, "enum_FIELD"], [369, 368, 7, "enum_FIELD"], [374, 377, 7, "enum_FIELD"], [386, 384, 7, "enum_FIELD"], [396, 394, 7, "enum_FIELD"], [413, 411, 7, "enum_FIELD"], [419, 418, 7, "enum_FIELD"], [424, 427, 7, "enum_FIELD"], [436, 434, 7, "enum_FIELD"], [446, 444, 7, "enum_FIELD"], [460, 458, 7, "enum_FIELD"], [470, 468, 7, "enum_FIELD"], [480, 478, 7, "enum_FIELD"], [490, 488, 7, "enum_FIELD"], [499, 497, 7, "enum_FIELD"], [508, 506, 7, "enum_FIELD"], [525, 523, 7, "enum_FIELD"], [542, 540, 7, "enum_FIELD"], [559, 557, 7, "enum_FIELD"], [576, 574, 7, "enum_FIELD"], [593, 591, 7, "enum_FIELD"], [603, 601, 7, "enum_FIELD"], [613, 611, 7, "enum_FIELD"], [310, 307, 7, "enum_FIELD"], [326, 324, 7, "enum_FIELD"], [334, 331, 7, "enum_FIELD"], [338, 337, 7, "enum_FIELD"], [361, 359, 7, "enum_FIELD"], [384, 381, 7, "enum_FIELD"], [394, 391, 7, "enum_FIELD"], [404, 402, 7, "enum_FIELD"], [411, 410, 7, "enum_FIELD"], [434, 431, 7, "enum_FIELD"], [444, 441, 7, "enum_FIELD"], [450, 448, 7, "enum_FIELD"], [458, 455, 7, "enum_FIELD"], [468, 465, 7, "enum_FIELD"], [478, 475, 7, "enum_FIELD"], [488, 485, 7, "enum_FIELD"], [497, 496, 7, "enum_FIELD"], [506, 503, 7, "enum_FIELD"], [511, 510, 7, "enum_FIELD"], [511, 513, 7, "enum_FIELD"], [523, 520, 7, "enum_FIELD"], [528, 527, 7, "enum_FIELD"], [528, 530, 7, "enum_FIELD"], [540, 537, 7, "enum_FIELD"], [545, 544, 7, "enum_FIELD"], [545, 547, 7, "enum_FIELD"], [557, 554, 7, "enum_FIELD"], [561, 560, 7, "enum_FIELD"], [574, 571, 7, "enum_FIELD"], [578, 577, 7, "enum_FIELD"], [591, 588, 7, "enum_FIELD"], [601, 598, 7, "enum_FIELD"], [611, 608, 7, "enum_FIELD"], [307, 306, 7, "enum_FIELD"], [307, 308, 7, "enum_FIELD"], [324, 323, 7, "enum_FIELD"], [331, 330, 7, "enum_FIELD"], [331, 332, 7, "enum_FIELD"], [359, 358, 7, "enum_FIELD"], [381, 380, 7, "enum_FIELD"], [381, 382, 7, "enum_FIELD"], [391, 390, 7, "enum_FIELD"], [391, 392, 7, "enum_FIELD"], [402, 400, 7, "enum_FIELD"], [431, 430, 7, "enum_FIELD"], [431, 432, 7, "enum_FIELD"], [441, 440, 7, "enum_FIELD"], [441, 442, 7, "enum_FIELD"], [448, 447, 7, "enum_FIELD"], [455, 454, 7, "enum_FIELD"], [455, 456, 7, "enum_FIELD"], [465, 464, 7, "enum_FIELD"], [465, 466, 7, "enum_FIELD"], [475, 474, 7, "enum_FIELD"], [475, 476, 7, "enum_FIELD"], [485, 484, 7, "enum_FIELD"], [485, 486, 7, "enum_FIELD"], [503, 502, 7, "enum_FIELD"], [503, 504, 7, "enum_FIELD"], [513, 512, 7, "enum_FIELD"], [513, 514, 7, "enum_FIELD"], [520, 519, 7, "enum_FIELD"], [520, 521, 7, "enum_FIELD"], [530, 529, 7, "enum_FIELD"], [530, 531, 7, "enum_FIELD"], [537, 536, 7, "enum_FIELD"], [537, 538, 7, "enum_FIELD"], [547, 546, 7, "enum_FIELD"], [547, 548, 7, "enum_FIELD"], [554, 553, 7, "enum_FIELD"], [554, 555, 7, "enum_FIELD"], [565, 563, 7, "enum_FIELD"], [571, 570, 7, "enum_FIELD"], [571, 572, 7, "enum_FIELD"], [582, 580, 7, "enum_FIELD"], [588, 587, 7, "enum_FIELD"], [588, 589, 7, "enum_FIELD"], [598, 597, 7, "enum_FIELD"], [598, 599, 7, "enum_FIELD"], [608, 607, 7, "enum_FIELD"], [608, 609, 7, "enum_FIELD"], [400, 398, 7, "enum_FIELD"], [563, 562, 7, "enum_FIELD"], [580, 579, 7, "enum_FIELD"], [398, 397, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 13, 9, "enum_NEXT_SYNTAX"], [14, 2, 10, "enum_LAST_LEXICAL_USE"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [18, 14, 10, "enum_LAST_LEXICAL_USE"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [35, 18, 10, "enum_LAST_LEXICAL_USE"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [48, 6, 10, "enum_LAST_LEXICAL_USE"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [52, 33, 10, "enum_LAST_LEXICAL_USE"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 58, 9, "enum_NEXT_SYNTAX"], [58, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [63, 52, 10, "enum_LAST_LEXICAL_USE"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 80, 9, "enum_NEXT_SYNTAX"], [81, 72, 10, "enum_LAST_LEXICAL_USE"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [85, 63, 10, "enum_LAST_LEXICAL_USE"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [98, 8, 10, "enum_LAST_LEXICAL_USE"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [111, 85, 10, "enum_LAST_LEXICAL_USE"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [122, 48, 10, "enum_LAST_LEXICAL_USE"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [126, 109, 10, "enum_LAST_LEXICAL_USE"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 132, 9, "enum_NEXT_SYNTAX"], [132, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [137, 126, 10, "enum_LAST_LEXICAL_USE"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [145, 135, 10, "enum_LAST_LEXICAL_USE"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 151, 9, "enum_NEXT_SYNTAX"], [152, 145, 10, "enum_LAST_LEXICAL_USE"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [172, 137, 10, "enum_LAST_LEXICAL_USE"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [183, 122, 10, "enum_LAST_LEXICAL_USE"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 184, 9, "enum_NEXT_SYNTAX"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [187, 170, 10, "enum_LAST_LEXICAL_USE"], [186, 187, 9, "enum_NEXT_SYNTAX"], [187, 188, 9, "enum_NEXT_SYNTAX"], [188, 189, 9, "enum_NEXT_SYNTAX"], [189, 190, 9, "enum_NEXT_SYNTAX"], [190, 193, 9, "enum_NEXT_SYNTAX"], [193, 195, 9, "enum_NEXT_SYNTAX"], [195, 196, 9, "enum_NEXT_SYNTAX"], [196, 197, 9, "enum_NEXT_SYNTAX"], [197, 198, 9, "enum_NEXT_SYNTAX"], [198, 199, 9, "enum_NEXT_SYNTAX"], [199, 200, 9, "enum_NEXT_SYNTAX"], [200, 201, 9, "enum_NEXT_SYNTAX"], [201, 202, 9, "enum_NEXT_SYNTAX"], [202, 203, 9, "enum_NEXT_SYNTAX"], [204, 187, 10, "enum_LAST_LEXICAL_USE"], [203, 204, 9, "enum_NEXT_SYNTAX"], [204, 205, 9, "enum_NEXT_SYNTAX"], [205, 206, 9, "enum_NEXT_SYNTAX"], [206, 207, 9, "enum_NEXT_SYNTAX"], [207, 208, 9, "enum_NEXT_SYNTAX"], [208, 210, 9, "enum_NEXT_SYNTAX"], [210, 211, 9, "enum_NEXT_SYNTAX"], [212, 197, 10, "enum_LAST_LEXICAL_USE"], [211, 212, 9, "enum_NEXT_SYNTAX"], [212, 213, 9, "enum_NEXT_SYNTAX"], [213, 214, 9, "enum_NEXT_SYNTAX"], [214, 215, 9, "enum_NEXT_SYNTAX"], [215, 216, 9, "enum_NEXT_SYNTAX"], [216, 218, 9, "enum_NEXT_SYNTAX"], [218, 219, 9, "enum_NEXT_SYNTAX"], [219, 220, 9, "enum_NEXT_SYNTAX"], [220, 221, 9, "enum_NEXT_SYNTAX"], [221, 222, 9, "enum_NEXT_SYNTAX"], [222, 223, 9, "enum_NEXT_SYNTAX"], [223, 224, 9, "enum_NEXT_SYNTAX"], [225, 83, 10, "enum_LAST_LEXICAL_USE"], [224, 225, 9, "enum_NEXT_SYNTAX"], [225, 226, 9, "enum_NEXT_SYNTAX"], [227, 157, 10, "enum_LAST_LEXICAL_USE"], [226, 227, 9, "enum_NEXT_SYNTAX"], [227, 228, 9, "enum_NEXT_SYNTAX"], [228, 229, 9, "enum_NEXT_SYNTAX"], [230, 227, 10, "enum_LAST_LEXICAL_USE"], [229, 230, 9, "enum_NEXT_SYNTAX"], [230, 231, 9, "enum_NEXT_SYNTAX"], [231, 232, 9, "enum_NEXT_SYNTAX"], [232, 235, 9, "enum_NEXT_SYNTAX"], [235, 236, 9, "enum_NEXT_SYNTAX"], [236, 238, 9, "enum_NEXT_SYNTAX"], [239, 219, 10, "enum_LAST_LEXICAL_USE"], [238, 239, 9, "enum_NEXT_SYNTAX"], [239, 240, 9, "enum_NEXT_SYNTAX"], [240, 241, 9, "enum_NEXT_SYNTAX"], [241, 242, 9, "enum_NEXT_SYNTAX"], [243, 223, 10, "enum_LAST_LEXICAL_USE"], [242, 243, 9, "enum_NEXT_SYNTAX"], [243, 244, 9, "enum_NEXT_SYNTAX"], [244, 245, 9, "enum_NEXT_SYNTAX"], [245, 247, 9, "enum_NEXT_SYNTAX"], [248, 199, 10, "enum_LAST_LEXICAL_USE"], [247, 248, 9, "enum_NEXT_SYNTAX"], [248, 249, 9, "enum_NEXT_SYNTAX"], [250, 225, 10, "enum_LAST_LEXICAL_USE"], [249, 250, 9, "enum_NEXT_SYNTAX"], [250, 251, 9, "enum_NEXT_SYNTAX"], [252, 248, 10, "enum_LAST_LEXICAL_USE"], [251, 252, 9, "enum_NEXT_SYNTAX"], [252, 253, 9, "enum_NEXT_SYNTAX"], [253, 255, 9, "enum_NEXT_SYNTAX"], [255, 256, 9, "enum_NEXT_SYNTAX"], [257, 201, 10, "enum_LAST_LEXICAL_USE"], [256, 257, 9, "enum_NEXT_SYNTAX"], [257, 258, 9, "enum_NEXT_SYNTAX"], [258, 259, 9, "enum_NEXT_SYNTAX"], [259, 260, 9, "enum_NEXT_SYNTAX"], [260, 261, 9, "enum_NEXT_SYNTAX"], [261, 263, 9, "enum_NEXT_SYNTAX"], [264, 257, 10, "enum_LAST_LEXICAL_USE"], [263, 264, 9, "enum_NEXT_SYNTAX"], [264, 265, 9, "enum_NEXT_SYNTAX"], [265, 266, 9, "enum_NEXT_SYNTAX"], [266, 268, 9, "enum_NEXT_SYNTAX"], [268, 269, 9, "enum_NEXT_SYNTAX"], [269, 270, 9, "enum_NEXT_SYNTAX"], [271, 204, 10, "enum_LAST_LEXICAL_USE"], [270, 271, 9, "enum_NEXT_SYNTAX"], [271, 272, 9, "enum_NEXT_SYNTAX"], [272, 273, 9, "enum_NEXT_SYNTAX"], [273, 274, 9, "enum_NEXT_SYNTAX"], [274, 275, 9, "enum_NEXT_SYNTAX"], [275, 276, 9, "enum_NEXT_SYNTAX"], [277, 161, 10, "enum_LAST_LEXICAL_USE"], [276, 277, 9, "enum_NEXT_SYNTAX"], [277, 278, 9, "enum_NEXT_SYNTAX"], [279, 239, 10, "enum_LAST_LEXICAL_USE"], [278, 279, 9, "enum_NEXT_SYNTAX"], [279, 280, 9, "enum_NEXT_SYNTAX"], [281, 165, 10, "enum_LAST_LEXICAL_USE"], [280, 281, 9, "enum_NEXT_SYNTAX"], [281, 282, 9, "enum_NEXT_SYNTAX"], [283, 269, 10, "enum_LAST_LEXICAL_USE"], [282, 283, 9, "enum_NEXT_SYNTAX"], [283, 285, 9, "enum_NEXT_SYNTAX"], [285, 286, 9, "enum_NEXT_SYNTAX"], [286, 287, 9, "enum_NEXT_SYNTAX"], [288, 271, 10, "enum_LAST_LEXICAL_USE"], [287, 288, 9, "enum_NEXT_SYNTAX"], [288, 289, 9, "enum_NEXT_SYNTAX"], [289, 290, 9, "enum_NEXT_SYNTAX"], [290, 291, 9, "enum_NEXT_SYNTAX"], [291, 292, 9, "enum_NEXT_SYNTAX"], [292, 293, 9, "enum_NEXT_SYNTAX"], [293, 296, 9, "enum_NEXT_SYNTAX"], [297, 183, 10, "enum_LAST_LEXICAL_USE"], [296, 297, 9, "enum_NEXT_SYNTAX"], [297, 298, 9, "enum_NEXT_SYNTAX"], [298, 299, 9, "enum_NEXT_SYNTAX"], [299, 300, 9, "enum_NEXT_SYNTAX"], [301, 286, 10, "enum_LAST_LEXICAL_USE"], [300, 301, 9, "enum_NEXT_SYNTAX"], [301, 302, 9, "enum_NEXT_SYNTAX"], [302, 303, 9, "enum_NEXT_SYNTAX"], [303, 305, 9, "enum_NEXT_SYNTAX"], [306, 25, 10, "enum_LAST_LEXICAL_USE"], [305, 306, 9, "enum_NEXT_SYNTAX"], [306, 307, 9, "enum_NEXT_SYNTAX"], [307, 308, 9, "enum_NEXT_SYNTAX"], [308, 309, 9, "enum_NEXT_SYNTAX"], [309, 310, 9, "enum_NEXT_SYNTAX"], [310, 311, 9, "enum_NEXT_SYNTAX"], [311, 312, 9, "enum_NEXT_SYNTAX"], [313, 279, 10, "enum_LAST_LEXICAL_USE"], [312, 313, 9, "enum_NEXT_SYNTAX"], [313, 314, 9, "enum_NEXT_SYNTAX"], [314, 316, 9, "enum_NEXT_SYNTAX"], [317, 98, 10, "enum_LAST_LEXICAL_USE"], [316, 317, 9, "enum_NEXT_SYNTAX"], [317, 318, 9, "enum_NEXT_SYNTAX"], [318, 320, 9, "enum_NEXT_SYNTAX"], [321, 103, 10, "enum_LAST_LEXICAL_USE"], [320, 321, 9, "enum_NEXT_SYNTAX"], [321, 322, 9, "enum_NEXT_SYNTAX"], [323, 301, 10, "enum_LAST_LEXICAL_USE"], [322, 323, 9, "enum_NEXT_SYNTAX"], [323, 324, 9, "enum_NEXT_SYNTAX"], [324, 325, 9, "enum_NEXT_SYNTAX"], [325, 326, 9, "enum_NEXT_SYNTAX"], [326, 327, 9, "enum_NEXT_SYNTAX"], [327, 329, 9, "enum_NEXT_SYNTAX"], [330, 306, 10, "enum_LAST_LEXICAL_USE"], [329, 330, 9, "enum_NEXT_SYNTAX"], [330, 331, 9, "enum_NEXT_SYNTAX"], [331, 332, 9, "enum_NEXT_SYNTAX"], [332, 333, 9, "enum_NEXT_SYNTAX"], [333, 334, 9, "enum_NEXT_SYNTAX"], [334, 335, 9, "enum_NEXT_SYNTAX"], [335, 336, 9, "enum_NEXT_SYNTAX"], [337, 250, 10, "enum_LAST_LEXICAL_USE"], [336, 337, 9, "enum_NEXT_SYNTAX"], [337, 338, 9, "enum_NEXT_SYNTAX"], [339, 321, 10, "enum_LAST_LEXICAL_USE"], [338, 339, 9, "enum_NEXT_SYNTAX"], [339, 340, 9, "enum_NEXT_SYNTAX"], [340, 341, 9, "enum_NEXT_SYNTAX"], [341, 343, 9, "enum_NEXT_SYNTAX"], [343, 344, 9, "enum_NEXT_SYNTAX"], [344, 345, 9, "enum_NEXT_SYNTAX"], [346, 317, 10, "enum_LAST_LEXICAL_USE"], [345, 346, 9, "enum_NEXT_SYNTAX"], [346, 347, 9, "enum_NEXT_SYNTAX"], [347, 348, 9, "enum_NEXT_SYNTAX"], [348, 350, 9, "enum_NEXT_SYNTAX"], [351, 339, 10, "enum_LAST_LEXICAL_USE"], [350, 351, 9, "enum_NEXT_SYNTAX"], [351, 352, 9, "enum_NEXT_SYNTAX"], [352, 353, 9, "enum_NEXT_SYNTAX"], [353, 355, 9, "enum_NEXT_SYNTAX"], [355, 356, 9, "enum_NEXT_SYNTAX"], [356, 357, 9, "enum_NEXT_SYNTAX"], [358, 323, 10, "enum_LAST_LEXICAL_USE"], [357, 358, 9, "enum_NEXT_SYNTAX"], [358, 359, 9, "enum_NEXT_SYNTAX"], [359, 360, 9, "enum_NEXT_SYNTAX"], [360, 361, 9, "enum_NEXT_SYNTAX"], [361, 362, 9, "enum_NEXT_SYNTAX"], [362, 363, 9, "enum_NEXT_SYNTAX"], [363, 364, 9, "enum_NEXT_SYNTAX"], [364, 366, 9, "enum_NEXT_SYNTAX"], [366, 367, 9, "enum_NEXT_SYNTAX"], [368, 356, 10, "enum_LAST_LEXICAL_USE"], [367, 368, 9, "enum_NEXT_SYNTAX"], [368, 369, 9, "enum_NEXT_SYNTAX"], [369, 370, 9, "enum_NEXT_SYNTAX"], [370, 371, 9, "enum_NEXT_SYNTAX"], [371, 372, 9, "enum_NEXT_SYNTAX"], [372, 374, 9, "enum_NEXT_SYNTAX"], [375, 368, 10, "enum_LAST_LEXICAL_USE"], [374, 375, 9, "enum_NEXT_SYNTAX"], [375, 376, 9, "enum_NEXT_SYNTAX"], [376, 377, 9, "enum_NEXT_SYNTAX"], [377, 379, 9, "enum_NEXT_SYNTAX"], [380, 330, 10, "enum_LAST_LEXICAL_USE"], [379, 380, 9, "enum_NEXT_SYNTAX"], [380, 381, 9, "enum_NEXT_SYNTAX"], [381, 382, 9, "enum_NEXT_SYNTAX"], [382, 383, 9, "enum_NEXT_SYNTAX"], [383, 384, 9, "enum_NEXT_SYNTAX"], [384, 385, 9, "enum_NEXT_SYNTAX"], [385, 386, 9, "enum_NEXT_SYNTAX"], [387, 375, 10, "enum_LAST_LEXICAL_USE"], [386, 387, 9, "enum_NEXT_SYNTAX"], [387, 388, 9, "enum_NEXT_SYNTAX"], [388, 389, 9, "enum_NEXT_SYNTAX"], [390, 380, 10, "enum_LAST_LEXICAL_USE"], [389, 390, 9, "enum_NEXT_SYNTAX"], [390, 391, 9, "enum_NEXT_SYNTAX"], [391, 392, 9, "enum_NEXT_SYNTAX"], [392, 393, 9, "enum_NEXT_SYNTAX"], [393, 394, 9, "enum_NEXT_SYNTAX"], [394, 395, 9, "enum_NEXT_SYNTAX"], [395, 396, 9, "enum_NEXT_SYNTAX"], [397, 358, 10, "enum_LAST_LEXICAL_USE"], [396, 397, 9, "enum_NEXT_SYNTAX"], [397, 398, 9, "enum_NEXT_SYNTAX"], [398, 399, 9, "enum_NEXT_SYNTAX"], [399, 400, 9, "enum_NEXT_SYNTAX"], [400, 401, 9, "enum_NEXT_SYNTAX"], [401, 402, 9, "enum_NEXT_SYNTAX"], [402, 403, 9, "enum_NEXT_SYNTAX"], [403, 404, 9, "enum_NEXT_SYNTAX"], [404, 405, 9, "enum_NEXT_SYNTAX"], [405, 406, 9, "enum_NEXT_SYNTAX"], [406, 407, 9, "enum_NEXT_SYNTAX"], [407, 408, 9, "enum_NEXT_SYNTAX"], [408, 409, 9, "enum_NEXT_SYNTAX"], [410, 397, 10, "enum_LAST_LEXICAL_USE"], [409, 410, 9, "enum_NEXT_SYNTAX"], [410, 411, 9, "enum_NEXT_SYNTAX"], [411, 412, 9, "enum_NEXT_SYNTAX"], [412, 413, 9, "enum_NEXT_SYNTAX"], [413, 414, 9, "enum_NEXT_SYNTAX"], [414, 416, 9, "enum_NEXT_SYNTAX"], [416, 417, 9, "enum_NEXT_SYNTAX"], [418, 408, 10, "enum_LAST_LEXICAL_USE"], [417, 418, 9, "enum_NEXT_SYNTAX"], [418, 419, 9, "enum_NEXT_SYNTAX"], [419, 420, 9, "enum_NEXT_SYNTAX"], [420, 421, 9, "enum_NEXT_SYNTAX"], [421, 422, 9, "enum_NEXT_SYNTAX"], [422, 424, 9, "enum_NEXT_SYNTAX"], [425, 418, 10, "enum_LAST_LEXICAL_USE"], [424, 425, 9, "enum_NEXT_SYNTAX"], [425, 426, 9, "enum_NEXT_SYNTAX"], [426, 427, 9, "enum_NEXT_SYNTAX"], [427, 429, 9, "enum_NEXT_SYNTAX"], [430, 390, 10, "enum_LAST_LEXICAL_USE"], [429, 430, 9, "enum_NEXT_SYNTAX"], [430, 431, 9, "enum_NEXT_SYNTAX"], [431, 432, 9, "enum_NEXT_SYNTAX"], [432, 433, 9, "enum_NEXT_SYNTAX"], [433, 434, 9, "enum_NEXT_SYNTAX"], [434, 435, 9, "enum_NEXT_SYNTAX"], [435, 436, 9, "enum_NEXT_SYNTAX"], [437, 425, 10, "enum_LAST_LEXICAL_USE"], [436, 437, 9, "enum_NEXT_SYNTAX"], [437, 438, 9, "enum_NEXT_SYNTAX"], [438, 439, 9, "enum_NEXT_SYNTAX"], [440, 430, 10, "enum_LAST_LEXICAL_USE"], [439, 440, 9, "enum_NEXT_SYNTAX"], [440, 441, 9, "enum_NEXT_SYNTAX"], [441, 442, 9, "enum_NEXT_SYNTAX"], [442, 443, 9, "enum_NEXT_SYNTAX"], [443, 444, 9, "enum_NEXT_SYNTAX"], [444, 445, 9, "enum_NEXT_SYNTAX"], [445, 446, 9, "enum_NEXT_SYNTAX"], [447, 283, 10, "enum_LAST_LEXICAL_USE"], [446, 447, 9, "enum_NEXT_SYNTAX"], [447, 448, 9, "enum_NEXT_SYNTAX"], [448, 449, 9, "enum_NEXT_SYNTAX"], [449, 450, 9, "enum_NEXT_SYNTAX"], [450, 451, 9, "enum_NEXT_SYNTAX"], [451, 452, 9, "enum_NEXT_SYNTAX"], [452, 453, 9, "enum_NEXT_SYNTAX"], [454, 440, 10, "enum_LAST_LEXICAL_USE"], [453, 454, 9, "enum_NEXT_SYNTAX"], [454, 455, 9, "enum_NEXT_SYNTAX"], [455, 456, 9, "enum_NEXT_SYNTAX"], [456, 457, 9, "enum_NEXT_SYNTAX"], [457, 458, 9, "enum_NEXT_SYNTAX"], [458, 459, 9, "enum_NEXT_SYNTAX"], [459, 460, 9, "enum_NEXT_SYNTAX"], [461, 152, 10, "enum_LAST_LEXICAL_USE"], [460, 461, 9, "enum_NEXT_SYNTAX"], [461, 462, 9, "enum_NEXT_SYNTAX"], [462, 463, 9, "enum_NEXT_SYNTAX"], [464, 454, 10, "enum_LAST_LEXICAL_USE"], [463, 464, 9, "enum_NEXT_SYNTAX"], [464, 465, 9, "enum_NEXT_SYNTAX"], [465, 466, 9, "enum_NEXT_SYNTAX"], [466, 467, 9, "enum_NEXT_SYNTAX"], [467, 468, 9, "enum_NEXT_SYNTAX"], [468, 469, 9, "enum_NEXT_SYNTAX"], [469, 470, 9, "enum_NEXT_SYNTAX"], [470, 471, 9, "enum_NEXT_SYNTAX"], [471, 472, 9, "enum_NEXT_SYNTAX"], [472, 473, 9, "enum_NEXT_SYNTAX"], [474, 464, 10, "enum_LAST_LEXICAL_USE"], [473, 474, 9, "enum_NEXT_SYNTAX"], [474, 475, 9, "enum_NEXT_SYNTAX"], [475, 476, 9, "enum_NEXT_SYNTAX"], [476, 477, 9, "enum_NEXT_SYNTAX"], [477, 478, 9, "enum_NEXT_SYNTAX"], [478, 479, 9, "enum_NEXT_SYNTAX"], [479, 480, 9, "enum_NEXT_SYNTAX"], [481, 243, 10, "enum_LAST_LEXICAL_USE"], [480, 481, 9, "enum_NEXT_SYNTAX"], [481, 482, 9, "enum_NEXT_SYNTAX"], [482, 483, 9, "enum_NEXT_SYNTAX"], [484, 474, 10, "enum_LAST_LEXICAL_USE"], [483, 484, 9, "enum_NEXT_SYNTAX"], [484, 485, 9, "enum_NEXT_SYNTAX"], [485, 486, 9, "enum_NEXT_SYNTAX"], [486, 487, 9, "enum_NEXT_SYNTAX"], [487, 488, 9, "enum_NEXT_SYNTAX"], [488, 489, 9, "enum_NEXT_SYNTAX"], [489, 490, 9, "enum_NEXT_SYNTAX"], [491, 264, 10, "enum_LAST_LEXICAL_USE"], [490, 491, 9, "enum_NEXT_SYNTAX"], [491, 492, 9, "enum_NEXT_SYNTAX"], [492, 493, 9, "enum_NEXT_SYNTAX"], [493, 494, 9, "enum_NEXT_SYNTAX"], [494, 495, 9, "enum_NEXT_SYNTAX"], [496, 410, 10, "enum_LAST_LEXICAL_USE"], [495, 496, 9, "enum_NEXT_SYNTAX"], [496, 497, 9, "enum_NEXT_SYNTAX"], [497, 498, 9, "enum_NEXT_SYNTAX"], [498, 499, 9, "enum_NEXT_SYNTAX"], [499, 500, 9, "enum_NEXT_SYNTAX"], [500, 501, 9, "enum_NEXT_SYNTAX"], [502, 484, 10, "enum_LAST_LEXICAL_USE"], [501, 502, 9, "enum_NEXT_SYNTAX"], [502, 503, 9, "enum_NEXT_SYNTAX"], [503, 504, 9, "enum_NEXT_SYNTAX"], [504, 505, 9, "enum_NEXT_SYNTAX"], [505, 506, 9, "enum_NEXT_SYNTAX"], [506, 507, 9, "enum_NEXT_SYNTAX"], [507, 508, 9, "enum_NEXT_SYNTAX"], [508, 509, 9, "enum_NEXT_SYNTAX"], [509, 510, 9, "enum_NEXT_SYNTAX"], [510, 511, 9, "enum_NEXT_SYNTAX"], [512, 494, 10, "enum_LAST_LEXICAL_USE"], [511, 512, 9, "enum_NEXT_SYNTAX"], [512, 513, 9, "enum_NEXT_SYNTAX"], [513, 514, 9, "enum_NEXT_SYNTAX"], [514, 515, 9, "enum_NEXT_SYNTAX"], [515, 516, 9, "enum_NEXT_SYNTAX"], [516, 517, 9, "enum_NEXT_SYNTAX"], [517, 518, 9, "enum_NEXT_SYNTAX"], [519, 502, 10, "enum_LAST_LEXICAL_USE"], [518, 519, 9, "enum_NEXT_SYNTAX"], [519, 520, 9, "enum_NEXT_SYNTAX"], [520, 521, 9, "enum_NEXT_SYNTAX"], [521, 522, 9, "enum_NEXT_SYNTAX"], [522, 523, 9, "enum_NEXT_SYNTAX"], [523, 524, 9, "enum_NEXT_SYNTAX"], [524, 525, 9, "enum_NEXT_SYNTAX"], [525, 526, 9, "enum_NEXT_SYNTAX"], [526, 527, 9, "enum_NEXT_SYNTAX"], [527, 528, 9, "enum_NEXT_SYNTAX"], [529, 512, 10, "enum_LAST_LEXICAL_USE"], [528, 529, 9, "enum_NEXT_SYNTAX"], [529, 530, 9, "enum_NEXT_SYNTAX"], [530, 531, 9, "enum_NEXT_SYNTAX"], [531, 532, 9, "enum_NEXT_SYNTAX"], [532, 533, 9, "enum_NEXT_SYNTAX"], [533, 534, 9, "enum_NEXT_SYNTAX"], [534, 535, 9, "enum_NEXT_SYNTAX"], [536, 519, 10, "enum_LAST_LEXICAL_USE"], [535, 536, 9, "enum_NEXT_SYNTAX"], [536, 537, 9, "enum_NEXT_SYNTAX"], [537, 538, 9, "enum_NEXT_SYNTAX"], [538, 539, 9, "enum_NEXT_SYNTAX"], [539, 540, 9, "enum_NEXT_SYNTAX"], [540, 541, 9, "enum_NEXT_SYNTAX"], [541, 542, 9, "enum_NEXT_SYNTAX"], [542, 543, 9, "enum_NEXT_SYNTAX"], [543, 544, 9, "enum_NEXT_SYNTAX"], [544, 545, 9, "enum_NEXT_SYNTAX"], [546, 529, 10, "enum_LAST_LEXICAL_USE"], [545, 546, 9, "enum_NEXT_SYNTAX"], [546, 547, 9, "enum_NEXT_SYNTAX"], [547, 548, 9, "enum_NEXT_SYNTAX"], [548, 549, 9, "enum_NEXT_SYNTAX"], [549, 550, 9, "enum_NEXT_SYNTAX"], [550, 551, 9, "enum_NEXT_SYNTAX"], [551, 552, 9, "enum_NEXT_SYNTAX"], [553, 536, 10, "enum_LAST_LEXICAL_USE"], [552, 553, 9, "enum_NEXT_SYNTAX"], [553, 554, 9, "enum_NEXT_SYNTAX"], [554, 555, 9, "enum_NEXT_SYNTAX"], [555, 556, 9, "enum_NEXT_SYNTAX"], [556, 557, 9, "enum_NEXT_SYNTAX"], [557, 558, 9, "enum_NEXT_SYNTAX"], [558, 559, 9, "enum_NEXT_SYNTAX"], [560, 337, 10, "enum_LAST_LEXICAL_USE"], [559, 560, 9, "enum_NEXT_SYNTAX"], [560, 561, 9, "enum_NEXT_SYNTAX"], [562, 496, 10, "enum_LAST_LEXICAL_USE"], [561, 562, 9, "enum_NEXT_SYNTAX"], [562, 563, 9, "enum_NEXT_SYNTAX"], [563, 564, 9, "enum_NEXT_SYNTAX"], [564, 565, 9, "enum_NEXT_SYNTAX"], [565, 566, 9, "enum_NEXT_SYNTAX"], [566, 567, 9, "enum_NEXT_SYNTAX"], [567, 568, 9, "enum_NEXT_SYNTAX"], [568, 569, 9, "enum_NEXT_SYNTAX"], [570, 553, 10, "enum_LAST_LEXICAL_USE"], [569, 570, 9, "enum_NEXT_SYNTAX"], [570, 571, 9, "enum_NEXT_SYNTAX"], [571, 572, 9, "enum_NEXT_SYNTAX"], [572, 573, 9, "enum_NEXT_SYNTAX"], [573, 574, 9, "enum_NEXT_SYNTAX"], [574, 575, 9, "enum_NEXT_SYNTAX"], [575, 576, 9, "enum_NEXT_SYNTAX"], [577, 560, 10, "enum_LAST_LEXICAL_USE"], [576, 577, 9, "enum_NEXT_SYNTAX"], [577, 578, 9, "enum_NEXT_SYNTAX"], [579, 562, 10, "enum_LAST_LEXICAL_USE"], [578, 579, 9, "enum_NEXT_SYNTAX"], [579, 580, 9, "enum_NEXT_SYNTAX"], [580, 581, 9, "enum_NEXT_SYNTAX"], [581, 582, 9, "enum_NEXT_SYNTAX"], [582, 583, 9, "enum_NEXT_SYNTAX"], [583, 584, 9, "enum_NEXT_SYNTAX"], [584, 585, 9, "enum_NEXT_SYNTAX"], [585, 586, 9, "enum_NEXT_SYNTAX"], [587, 570, 10, "enum_LAST_LEXICAL_USE"], [586, 587, 9, "enum_NEXT_SYNTAX"], [587, 588, 9, "enum_NEXT_SYNTAX"], [588, 589, 9, "enum_NEXT_SYNTAX"], [589, 590, 9, "enum_NEXT_SYNTAX"], [590, 591, 9, "enum_NEXT_SYNTAX"], [591, 592, 9, "enum_NEXT_SYNTAX"], [592, 593, 9, "enum_NEXT_SYNTAX"], [594, 252, 10, "enum_LAST_LEXICAL_USE"], [593, 594, 9, "enum_NEXT_SYNTAX"], [594, 595, 9, "enum_NEXT_SYNTAX"], [595, 596, 9, "enum_NEXT_SYNTAX"], [597, 587, 10, "enum_LAST_LEXICAL_USE"], [596, 597, 9, "enum_NEXT_SYNTAX"], [597, 598, 9, "enum_NEXT_SYNTAX"], [598, 599, 9, "enum_NEXT_SYNTAX"], [599, 600, 9, "enum_NEXT_SYNTAX"], [600, 601, 9, "enum_NEXT_SYNTAX"], [601, 602, 9, "enum_NEXT_SYNTAX"], [602, 603, 9, "enum_NEXT_SYNTAX"], [604, 461, 10, "enum_LAST_LEXICAL_USE"], [603, 604, 9, "enum_NEXT_SYNTAX"], [604, 605, 9, "enum_NEXT_SYNTAX"], [605, 606, 9, "enum_NEXT_SYNTAX"], [607, 597, 10, "enum_LAST_LEXICAL_USE"], [606, 607, 9, "enum_NEXT_SYNTAX"], [607, 608, 9, "enum_NEXT_SYNTAX"], [608, 609, 9, "enum_NEXT_SYNTAX"], [609, 610, 9, "enum_NEXT_SYNTAX"], [610, 611, 9, "enum_NEXT_SYNTAX"], [611, 612, 9, "enum_NEXT_SYNTAX"], [612, 613, 9, "enum_NEXT_SYNTAX"], [614, 81, 10, "enum_LAST_LEXICAL_USE"], [613, 614, 9, "enum_NEXT_SYNTAX"], [614, 615, 9, "enum_NEXT_SYNTAX"], [615, 621, 9, "enum_NEXT_SYNTAX"], [621, 622, 9, "enum_NEXT_SYNTAX"], [622, 623, 9, "enum_NEXT_SYNTAX"], [624, 35, 10, "enum_LAST_LEXICAL_USE"], [623, 624, 9, "enum_NEXT_SYNTAX"], [624, 625, 9, "enum_NEXT_SYNTAX"], [625, 626, 9, "enum_NEXT_SYNTAX"], [626, 627, 9, "enum_NEXT_SYNTAX"], [627, 628, 9, "enum_NEXT_SYNTAX"], [628, 630, 9, "enum_NEXT_SYNTAX"], [630, 631, 9, "enum_NEXT_SYNTAX"], [631, 632, 9, "enum_NEXT_SYNTAX"], [632, 633, 9, "enum_NEXT_SYNTAX"], [633, 634, 9, "enum_NEXT_SYNTAX"], [634, 635, 9, "enum_NEXT_SYNTAX"], [635, 636, 9, "enum_NEXT_SYNTAX"], [636, 637, 9, "enum_NEXT_SYNTAX"], [637, 638, 9, "enum_NEXT_SYNTAX"], [638, 639, 9, "enum_NEXT_SYNTAX"], [639, 640, 9, "enum_NEXT_SYNTAX"], [640, 641, 9, "enum_NEXT_SYNTAX"], [641, 642, 9, "enum_NEXT_SYNTAX"], [642, 643, 9, "enum_NEXT_SYNTAX"], [643, 644, 9, "enum_NEXT_SYNTAX"], [644, 645, 9, "enum_NEXT_SYNTAX"], [645, 646, 9, "enum_NEXT_SYNTAX"], [646, 647, 9, "enum_NEXT_SYNTAX"], [647, 648, 9, "enum_NEXT_SYNTAX"], [648, 649, 9, "enum_NEXT_SYNTAX"], [649, 650, 9, "enum_NEXT_SYNTAX"], [650, 651, 9, "enum_NEXT_SYNTAX"], [651, 652, 9, "enum_NEXT_SYNTAX"], [652, 654, 9, "enum_NEXT_SYNTAX"], [655, 622, 10, "enum_LAST_LEXICAL_USE"], [654, 655, 9, "enum_NEXT_SYNTAX"], [655, 656, 9, "enum_NEXT_SYNTAX"], [657, 655, 10, "enum_LAST_LEXICAL_USE"], [656, 657, 9, "enum_NEXT_SYNTAX"], [657, 658, 9, "enum_NEXT_SYNTAX"], [658, 659, 9, "enum_NEXT_SYNTAX"], [659, 660, 9, "enum_NEXT_SYNTAX"], [661, 631, 10, "enum_LAST_LEXICAL_USE"], [660, 661, 9, "enum_NEXT_SYNTAX"], [661, 662, 9, "enum_NEXT_SYNTAX"], [662, 663, 9, "enum_NEXT_SYNTAX"], [663, 664, 9, "enum_NEXT_SYNTAX"], [664, 666, 9, "enum_NEXT_SYNTAX"], [667, 607, 10, "enum_LAST_LEXICAL_USE"], [666, 667, 9, "enum_NEXT_SYNTAX"], [667, 668, 9, "enum_NEXT_SYNTAX"], [668, 669, 9, "enum_NEXT_SYNTAX"], [669, 670, 9, "enum_NEXT_SYNTAX"], [670, 671, 9, "enum_NEXT_SYNTAX"], [672, 657, 10, "enum_LAST_LEXICAL_USE"], [671, 672, 9, "enum_NEXT_SYNTAX"], [672, 673, 9, "enum_NEXT_SYNTAX"], [674, 624, 10, "enum_LAST_LEXICAL_USE"], [673, 674, 9, "enum_NEXT_SYNTAX"], [674, 675, 9, "enum_NEXT_SYNTAX"], [675, 676, 9, "enum_NEXT_SYNTAX"], [676, 677, 9, "enum_NEXT_SYNTAX"], [678, 667, 10, "enum_LAST_LEXICAL_USE"], [677, 678, 9, "enum_NEXT_SYNTAX"], [678, 679, 9, "enum_NEXT_SYNTAX"], [680, 674, 10, "enum_LAST_LEXICAL_USE"], [679, 680, 9, "enum_NEXT_SYNTAX"], [680, 681, 9, "enum_NEXT_SYNTAX"], [681, 682, 9, "enum_NEXT_SYNTAX"], [682, 683, 9, "enum_NEXT_SYNTAX"], [684, 4, 10, "enum_LAST_LEXICAL_USE"], [683, 684, 9, "enum_NEXT_SYNTAX"], [684, 685, 9, "enum_NEXT_SYNTAX"], [685, 688, 9, "enum_NEXT_SYNTAX"], [688, 689, 9, "enum_NEXT_SYNTAX"], [689, 691, 9, "enum_NEXT_SYNTAX"], [691, 692, 9, "enum_NEXT_SYNTAX"], [692, 693, 9, "enum_NEXT_SYNTAX"], [693, 694, 9, "enum_NEXT_SYNTAX"], [694, 695, 9, "enum_NEXT_SYNTAX"], [696, 680, 10, "enum_LAST_LEXICAL_USE"], [695, 696, 9, "enum_NEXT_SYNTAX"], [696, 697, 9, "enum_NEXT_SYNTAX"], [697, 698, 9, "enum_NEXT_SYNTAX"], [698, 699, 9, "enum_NEXT_SYNTAX"], [699, 700, 9, "enum_NEXT_SYNTAX"], [701, 684, 10, "enum_LAST_LEXICAL_USE"], [700, 701, 9, "enum_NEXT_SYNTAX"], [701, 702, 9, "enum_NEXT_SYNTAX"], [703, 297, 10, "enum_LAST_LEXICAL_USE"], [702, 703, 9, "enum_NEXT_SYNTAX"], [703, 704, 9, "enum_NEXT_SYNTAX"], [705, 346, 10, "enum_LAST_LEXICAL_USE"], [704, 705, 9, "enum_NEXT_SYNTAX"], [705, 706, 9, "enum_NEXT_SYNTAX"], [5, 17, 1, "enum_CFG_NEXT"], [17, 691, 1, "enum_CFG_NEXT"], [17, 24, 1, "enum_CFG_NEXT"], [24, 40, 1, "enum_CFG_NEXT"], [40, 33, 1, "enum_CFG_NEXT"], [33, 47, 1, "enum_CFG_NEXT"], [33, 621, 1, "enum_CFG_NEXT"], [47, 66, 1, "enum_CFG_NEXT"], [47, 33, 1, "enum_CFG_NEXT"], [66, 71, 1, "enum_CFG_NEXT"], [66, 80, 1, "enum_CFG_NEXT"], [71, 90, 1, "enum_CFG_NEXT"], [80, 90, 1, "enum_CFG_NEXT"], [90, 97, 1, "enum_CFG_NEXT"], [97, 102, 1, "enum_CFG_NEXT"], [97, 114, 1, "enum_CFG_NEXT"], [102, 114, 1, "enum_CFG_NEXT"], [114, 109, 1, "enum_CFG_NEXT"], [109, 121, 1, "enum_CFG_NEXT"], [109, 33, 1, "enum_CFG_NEXT"], [121, 134, 1, "enum_CFG_NEXT"], [121, 109, 1, "enum_CFG_NEXT"], [134, 146, 1, "enum_CFG_NEXT"], [146, 151, 1, "enum_CFG_NEXT"], [146, 156, 1, "enum_CFG_NEXT"], [151, 156, 1, "enum_CFG_NEXT"], [156, 160, 1, "enum_CFG_NEXT"], [160, 164, 1, "enum_CFG_NEXT"], [164, 175, 1, "enum_CFG_NEXT"], [175, 170, 1, "enum_CFG_NEXT"], [170, 182, 1, "enum_CFG_NEXT"], [170, 109, 1, "enum_CFG_NEXT"], [182, 170, 1, "enum_CFG_NEXT"], [182, 195, 1, "enum_CFG_NEXT"], [195, 213, 1, "enum_CFG_NEXT"], [213, 218, 1, "enum_CFG_NEXT"], [213, 238, 1, "enum_CFG_NEXT"], [218, 222, 1, "enum_CFG_NEXT"], [222, 229, 1, "enum_CFG_NEXT"], [229, 247, 1, "enum_CFG_NEXT"], [238, 242, 1, "enum_CFG_NEXT"], [242, 247, 1, "enum_CFG_NEXT"], [247, 258, 1, "enum_CFG_NEXT"], [258, 263, 1, "enum_CFG_NEXT"], [258, 268, 1, "enum_CFG_NEXT"], [263, 268, 1, "enum_CFG_NEXT"], [268, 276, 1, "enum_CFG_NEXT"], [276, 280, 1, "enum_CFG_NEXT"], [280, 291, 1, "enum_CFG_NEXT"], [291, 286, 1, "enum_CFG_NEXT"], [286, 170, 1, "enum_CFG_NEXT"], [286, 300, 1, "enum_CFG_NEXT"], [300, 305, 1, "enum_CFG_NEXT"], [300, 286, 1, "enum_CFG_NEXT"], [305, 317, 1, "enum_CFG_NEXT"], [317, 320, 1, "enum_CFG_NEXT"], [317, 329, 1, "enum_CFG_NEXT"], [320, 329, 1, "enum_CFG_NEXT"], [329, 345, 1, "enum_CFG_NEXT"], [345, 350, 1, "enum_CFG_NEXT"], [345, 355, 1, "enum_CFG_NEXT"], [350, 355, 1, "enum_CFG_NEXT"], [355, 369, 1, "enum_CFG_NEXT"], [369, 374, 1, "enum_CFG_NEXT"], [369, 379, 1, "enum_CFG_NEXT"], [374, 379, 1, "enum_CFG_NEXT"], [379, 389, 1, "enum_CFG_NEXT"], [389, 407, 1, "enum_CFG_NEXT"], [407, 419, 1, "enum_CFG_NEXT"], [419, 424, 1, "enum_CFG_NEXT"], [419, 429, 1, "enum_CFG_NEXT"], [424, 429, 1, "enum_CFG_NEXT"], [429, 439, 1, "enum_CFG_NEXT"], [439, 453, 1, "enum_CFG_NEXT"], [453, 463, 1, "enum_CFG_NEXT"], [463, 473, 1, "enum_CFG_NEXT"], [473, 483, 1, "enum_CFG_NEXT"], [483, 493, 1, "enum_CFG_NEXT"], [493, 501, 1, "enum_CFG_NEXT"], [501, 518, 1, "enum_CFG_NEXT"], [518, 535, 1, "enum_CFG_NEXT"], [535, 552, 1, "enum_CFG_NEXT"], [552, 569, 1, "enum_CFG_NEXT"], [569, 586, 1, "enum_CFG_NEXT"], [586, 596, 1, "enum_CFG_NEXT"], [596, 606, 1, "enum_CFG_NEXT"], [606, 286, 1, "enum_CFG_NEXT"], [621, 641, 1, "enum_CFG_NEXT"], [641, 631, 1, "enum_CFG_NEXT"], [631, 654, 1, "enum_CFG_NEXT"], [631, 666, 1, "enum_CFG_NEXT"], [654, 631, 1, "enum_CFG_NEXT"], [666, 673, 1, "enum_CFG_NEXT"], [673, 679, 1, "enum_CFG_NEXT"], [14, 2, 3, "enum_LAST_WRITE"], [18, 14, 2, "enum_LAST_READ"], [18, 2, 3, "enum_LAST_WRITE"], [35, 18, 2, "enum_LAST_READ"], [35, 2, 3, "enum_LAST_WRITE"], [33, 111, 2, "enum_LAST_READ"], [33, 52, 2, "enum_LAST_READ"], [33, 33, 3, "enum_LAST_WRITE"], [48, 122, 2, "enum_LAST_READ"], [48, 297, 2, "enum_LAST_READ"], [48, 183, 2, "enum_LAST_READ"], [48, 48, 2, "enum_LAST_READ"], [48, 6, 3, "enum_LAST_WRITE"], [52, 111, 2, "enum_LAST_READ"], [52, 52, 2, "enum_LAST_READ"], [52, 33, 3, "enum_LAST_WRITE"], [63, 52, 2, "enum_LAST_READ"], [63, 33, 3, "enum_LAST_WRITE"], [72, 614, 2, "enum_LAST_READ"], [72, 81, 3, "enum_LAST_WRITE"], [72, 72, 3, "enum_LAST_WRITE"], [83, 83, 2, "enum_LAST_READ"], [83, 250, 2, "enum_LAST_READ"], [83, 577, 2, "enum_LAST_READ"], [85, 63, 2, "enum_LAST_READ"], [85, 33, 3, "enum_LAST_WRITE"], [81, 614, 2, "enum_LAST_READ"], [81, 81, 3, "enum_LAST_WRITE"], [81, 72, 3, "enum_LAST_WRITE"], [91, 91, 3, "enum_LAST_WRITE"], [98, 346, 2, "enum_LAST_READ"], [98, 98, 2, "enum_LAST_READ"], [98, 8, 3, "enum_LAST_WRITE"], [103, 339, 2, "enum_LAST_READ"], [103, 351, 2, "enum_LAST_READ"], [103, 103, 3, "enum_LAST_WRITE"], [103, 351, 3, "enum_LAST_WRITE"], [103, 321, 3, "enum_LAST_WRITE"], [111, 85, 2, "enum_LAST_READ"], [111, 63, 2, "enum_LAST_READ"], [111, 33, 3, "enum_LAST_WRITE"], [109, 126, 2, "enum_LAST_READ"], [109, 172, 2, "enum_LAST_READ"], [109, 109, 3, "enum_LAST_WRITE"], [122, 122, 2, "enum_LAST_READ"], [122, 297, 2, "enum_LAST_READ"], [122, 183, 2, "enum_LAST_READ"], [122, 48, 2, "enum_LAST_READ"], [122, 6, 3, "enum_LAST_WRITE"], [126, 126, 2, "enum_LAST_READ"], [126, 172, 2, "enum_LAST_READ"], [126, 109, 3, "enum_LAST_WRITE"], [137, 126, 2, "enum_LAST_READ"], [137, 109, 3, "enum_LAST_WRITE"], [135, 604, 2, "enum_LAST_READ"], [135, 145, 2, "enum_LAST_READ"], [135, 152, 3, "enum_LAST_WRITE"], [135, 135, 3, "enum_LAST_WRITE"], [145, 604, 2, "enum_LAST_READ"], [145, 145, 2, "enum_LAST_READ"], [145, 135, 3, "enum_LAST_WRITE"], [152, 145, 2, "enum_LAST_READ"], [152, 135, 3, "enum_LAST_WRITE"], [157, 230, 2, "enum_LAST_READ"], [157, 230, 3, "enum_LAST_WRITE"], [157, 157, 3, "enum_LAST_WRITE"], [161, 277, 3, "enum_LAST_WRITE"], [161, 161, 3, "enum_LAST_WRITE"], [165, 165, 3, "enum_LAST_WRITE"], [165, 281, 3, "enum_LAST_WRITE"], [172, 137, 2, "enum_LAST_READ"], [172, 109, 3, "enum_LAST_WRITE"], [170, 187, 2, "enum_LAST_READ"], [170, 288, 2, "enum_LAST_READ"], [170, 170, 3, "enum_LAST_WRITE"], [183, 122, 2, "enum_LAST_READ"], [183, 297, 2, "enum_LAST_READ"], [183, 183, 2, "enum_LAST_READ"], [183, 6, 3, "enum_LAST_WRITE"], [187, 187, 2, "enum_LAST_READ"], [187, 288, 2, "enum_LAST_READ"], [187, 170, 3, "enum_LAST_WRITE"], [204, 187, 2, "enum_LAST_READ"], [204, 170, 3, "enum_LAST_WRITE"], [197, 212, 2, "enum_LAST_READ"], [197, 197, 3, "enum_LAST_WRITE"], [199, 594, 2, "enum_LAST_READ"], [199, 252, 2, "enum_LAST_READ"], [199, 248, 3, "enum_LAST_WRITE"], [201, 491, 2, "enum_LAST_READ"], [201, 257, 2, "enum_LAST_READ"], [201, 201, 3, "enum_LAST_WRITE"], [201, 264, 3, "enum_LAST_WRITE"], [212, 212, 2, "enum_LAST_READ"], [212, 197, 3, "enum_LAST_WRITE"], [219, 279, 2, "enum_LAST_READ"], [219, 313, 2, "enum_LAST_READ"], [219, 219, 3, "enum_LAST_WRITE"], [219, 239, 3, "enum_LAST_WRITE"], [225, 83, 2, "enum_LAST_READ"], [225, 250, 2, "enum_LAST_READ"], [225, 577, 2, "enum_LAST_READ"], [227, 230, 2, "enum_LAST_READ"], [227, 230, 3, "enum_LAST_WRITE"], [227, 157, 3, "enum_LAST_WRITE"], [223, 481, 2, "enum_LAST_READ"], [223, 223, 3, "enum_LAST_WRITE"], [223, 243, 3, "enum_LAST_WRITE"], [230, 227, 2, "enum_LAST_READ"], [230, 230, 3, "enum_LAST_WRITE"], [230, 157, 3, "enum_LAST_WRITE"], [230, 230, 2, "enum_LAST_READ"], [230, 230, 3, "enum_LAST_WRITE"], [230, 157, 3, "enum_LAST_WRITE"], [239, 279, 2, "enum_LAST_READ"], [239, 313, 2, "enum_LAST_READ"], [239, 219, 3, "enum_LAST_WRITE"], [239, 239, 3, "enum_LAST_WRITE"], [243, 481, 2, "enum_LAST_READ"], [243, 223, 3, "enum_LAST_WRITE"], [243, 243, 3, "enum_LAST_WRITE"], [250, 83, 2, "enum_LAST_READ"], [250, 225, 2, "enum_LAST_READ"], [250, 250, 2, "enum_LAST_READ"], [250, 577, 2, "enum_LAST_READ"], [252, 594, 2, "enum_LAST_READ"], [252, 252, 2, "enum_LAST_READ"], [252, 199, 3, "enum_LAST_WRITE"], [248, 252, 2, "enum_LAST_READ"], [248, 199, 3, "enum_LAST_WRITE"], [257, 491, 2, "enum_LAST_READ"], [257, 257, 2, "enum_LAST_READ"], [257, 201, 3, "enum_LAST_WRITE"], [264, 257, 2, "enum_LAST_READ"], [264, 201, 3, "enum_LAST_WRITE"], [271, 204, 2, "enum_LAST_READ"], [271, 170, 3, "enum_LAST_WRITE"], [269, 283, 2, "enum_LAST_READ"], [269, 447, 2, "enum_LAST_READ"], [269, 269, 3, "enum_LAST_WRITE"], [279, 279, 2, "enum_LAST_READ"], [279, 313, 2, "enum_LAST_READ"], [279, 219, 3, "enum_LAST_WRITE"], [279, 239, 3, "enum_LAST_WRITE"], [277, 277, 3, "enum_LAST_WRITE"], [277, 161, 3, "enum_LAST_WRITE"], [283, 283, 2, "enum_LAST_READ"], [283, 447, 2, "enum_LAST_READ"], [283, 269, 3, "enum_LAST_WRITE"], [281, 165, 3, "enum_LAST_WRITE"], [281, 281, 3, "enum_LAST_WRITE"], [288, 271, 2, "enum_LAST_READ"], [288, 170, 3, "enum_LAST_WRITE"], [286, 579, 2, "enum_LAST_READ"], [286, 301, 2, "enum_LAST_READ"], [286, 286, 3, "enum_LAST_WRITE"], [297, 297, 2, "enum_LAST_READ"], [297, 183, 2, "enum_LAST_READ"], [297, 6, 3, "enum_LAST_WRITE"], [301, 579, 2, "enum_LAST_READ"], [301, 301, 2, "enum_LAST_READ"], [301, 286, 3, "enum_LAST_WRITE"], [306, 607, 2, "enum_LAST_READ"], [306, 25, 3, "enum_LAST_WRITE"], [313, 279, 2, "enum_LAST_READ"], [313, 313, 2, "enum_LAST_READ"], [313, 219, 3, "enum_LAST_WRITE"], [313, 239, 3, "enum_LAST_WRITE"], [317, 346, 2, "enum_LAST_READ"], [317, 98, 2, "enum_LAST_READ"], [317, 8, 3, "enum_LAST_WRITE"], [323, 301, 2, "enum_LAST_READ"], [323, 286, 3, "enum_LAST_WRITE"], [321, 339, 2, "enum_LAST_READ"], [321, 351, 2, "enum_LAST_READ"], [321, 103, 3, "enum_LAST_WRITE"], [321, 351, 3, "enum_LAST_WRITE"], [321, 321, 3, "enum_LAST_WRITE"], [330, 306, 2, "enum_LAST_READ"], [330, 25, 3, "enum_LAST_WRITE"], [337, 250, 2, "enum_LAST_READ"], [337, 577, 2, "enum_LAST_READ"], [339, 339, 2, "enum_LAST_READ"], [339, 351, 2, "enum_LAST_READ"], [339, 103, 3, "enum_LAST_WRITE"], [339, 351, 3, "enum_LAST_WRITE"], [339, 321, 3, "enum_LAST_WRITE"], [346, 317, 2, "enum_LAST_READ"], [346, 8, 3, "enum_LAST_WRITE"], [351, 339, 2, "enum_LAST_READ"], [351, 103, 3, "enum_LAST_WRITE"], [351, 351, 3, "enum_LAST_WRITE"], [351, 321, 3, "enum_LAST_WRITE"], [351, 351, 2, "enum_LAST_READ"], [351, 103, 3, "enum_LAST_WRITE"], [351, 351, 3, "enum_LAST_WRITE"], [351, 321, 3, "enum_LAST_WRITE"], [358, 301, 2, "enum_LAST_READ"], [358, 323, 2, "enum_LAST_READ"], [358, 286, 3, "enum_LAST_WRITE"], [356, 387, 2, "enum_LAST_READ"], [356, 356, 3, "enum_LAST_WRITE"], [356, 375, 3, "enum_LAST_WRITE"], [368, 387, 2, "enum_LAST_READ"], [368, 356, 3, "enum_LAST_WRITE"], [375, 368, 2, "enum_LAST_READ"], [375, 356, 3, "enum_LAST_WRITE"], [380, 330, 2, "enum_LAST_READ"], [380, 25, 3, "enum_LAST_WRITE"], [387, 368, 2, "enum_LAST_READ"], [387, 356, 3, "enum_LAST_WRITE"], [387, 375, 3, "enum_LAST_WRITE"], [390, 380, 2, "enum_LAST_READ"], [390, 25, 3, "enum_LAST_WRITE"], [397, 358, 2, "enum_LAST_READ"], [397, 286, 3, "enum_LAST_WRITE"], [410, 397, 2, "enum_LAST_READ"], [410, 286, 3, "enum_LAST_WRITE"], [408, 437, 2, "enum_LAST_READ"], [408, 425, 3, "enum_LAST_WRITE"], [408, 408, 3, "enum_LAST_WRITE"], [418, 437, 2, "enum_LAST_READ"], [418, 408, 3, "enum_LAST_WRITE"], [425, 418, 2, "enum_LAST_READ"], [425, 408, 3, "enum_LAST_WRITE"], [430, 390, 2, "enum_LAST_READ"], [430, 25, 3, "enum_LAST_WRITE"], [437, 418, 2, "enum_LAST_READ"], [437, 425, 3, "enum_LAST_WRITE"], [437, 408, 3, "enum_LAST_WRITE"], [440, 430, 2, "enum_LAST_READ"], [440, 25, 3, "enum_LAST_WRITE"], [447, 283, 2, "enum_LAST_READ"], [447, 447, 2, "enum_LAST_READ"], [447, 269, 3, "enum_LAST_WRITE"], [454, 440, 2, "enum_LAST_READ"], [454, 25, 3, "enum_LAST_WRITE"], [461, 604, 2, "enum_LAST_READ"], [461, 145, 2, "enum_LAST_READ"], [461, 152, 3, "enum_LAST_WRITE"], [461, 135, 3, "enum_LAST_WRITE"], [464, 454, 2, "enum_LAST_READ"], [464, 25, 3, "enum_LAST_WRITE"], [474, 464, 2, "enum_LAST_READ"], [474, 25, 3, "enum_LAST_WRITE"], [481, 481, 2, "enum_LAST_READ"], [481, 223, 3, "enum_LAST_WRITE"], [481, 243, 3, "enum_LAST_WRITE"], [484, 474, 2, "enum_LAST_READ"], [484, 25, 3, "enum_LAST_WRITE"], [491, 491, 2, "enum_LAST_READ"], [491, 257, 2, "enum_LAST_READ"], [491, 201, 3, "enum_LAST_WRITE"], [491, 264, 3, "enum_LAST_WRITE"], [496, 410, 2, "enum_LAST_READ"], [496, 286, 3, "enum_LAST_WRITE"], [494, 546, 2, "enum_LAST_READ"], [494, 494, 3, "enum_LAST_WRITE"], [502, 484, 2, "enum_LAST_READ"], [502, 25, 3, "enum_LAST_WRITE"], [512, 546, 2, "enum_LAST_READ"], [512, 494, 3, "enum_LAST_WRITE"], [519, 502, 2, "enum_LAST_READ"], [519, 25, 3, "enum_LAST_WRITE"], [529, 512, 2, "enum_LAST_READ"], [529, 494, 3, "enum_LAST_WRITE"], [536, 519, 2, "enum_LAST_READ"], [536, 25, 3, "enum_LAST_WRITE"], [546, 529, 2, "enum_LAST_READ"], [546, 494, 3, "enum_LAST_WRITE"], [553, 536, 2, "enum_LAST_READ"], [553, 25, 3, "enum_LAST_WRITE"], [560, 337, 2, "enum_LAST_READ"], [562, 496, 2, "enum_LAST_READ"], [562, 286, 3, "enum_LAST_WRITE"], [570, 553, 2, "enum_LAST_READ"], [570, 25, 3, "enum_LAST_WRITE"], [577, 560, 2, "enum_LAST_READ"], [579, 562, 2, "enum_LAST_READ"], [579, 286, 3, "enum_LAST_WRITE"], [587, 570, 2, "enum_LAST_READ"], [587, 25, 3, "enum_LAST_WRITE"], [594, 594, 2, "enum_LAST_READ"], [594, 252, 2, "enum_LAST_READ"], [594, 248, 3, "enum_LAST_WRITE"], [597, 587, 2, "enum_LAST_READ"], [597, 25, 3, "enum_LAST_WRITE"], [604, 461, 2, "enum_LAST_READ"], [604, 152, 3, "enum_LAST_WRITE"], [604, 135, 3, "enum_LAST_WRITE"], [607, 597, 2, "enum_LAST_READ"], [607, 25, 3, "enum_LAST_WRITE"], [614, 614, 2, "enum_LAST_READ"], [614, 81, 3, "enum_LAST_WRITE"], [614, 72, 3, "enum_LAST_WRITE"], [624, 35, 2, "enum_LAST_READ"], [624, 2, 3, "enum_LAST_WRITE"], [631, 661, 2, "enum_LAST_READ"], [631, 631, 3, "enum_LAST_WRITE"], [657, 657, 2, "enum_LAST_READ"], [657, 655, 3, "enum_LAST_WRITE"], [657, 622, 3, "enum_LAST_WRITE"], [661, 661, 2, "enum_LAST_READ"], [661, 631, 3, "enum_LAST_WRITE"], [655, 657, 2, "enum_LAST_READ"], [655, 655, 3, "enum_LAST_WRITE"], [655, 622, 3, "enum_LAST_WRITE"], [672, 657, 2, "enum_LAST_READ"], [672, 655, 3, "enum_LAST_WRITE"], [672, 622, 3, "enum_LAST_WRITE"], [667, 607, 2, "enum_LAST_READ"], [667, 25, 3, "enum_LAST_WRITE"], [678, 667, 2, "enum_LAST_READ"], [678, 25, 3, "enum_LAST_WRITE"], [674, 624, 2, "enum_LAST_READ"], [674, 2, 3, "enum_LAST_WRITE"], [680, 674, 2, "enum_LAST_READ"], [680, 2, 3, "enum_LAST_WRITE"], [684, 4, 3, "enum_LAST_WRITE"], [696, 18, 2, "enum_LAST_READ"], [696, 2, 3, "enum_LAST_WRITE"], [701, 4, 3, "enum_LAST_WRITE"], [703, 6, 3, "enum_LAST_WRITE"], [705, 8, 3, "enum_LAST_WRITE"], [25, 27, 4, "enum_COMPUTED_FROM"], [25, 29, 4, "enum_COMPUTED_FROM"], [622, 624, 4, "enum_COMPUTED_FROM"], [668, 672, 4, "enum_COMPUTED_FROM"], [675, 678, 4, "enum_COMPUTED_FROM"], [655, 661, 4, "enum_COMPUTED_FROM"], [655, 657, 4, "enum_COMPUTED_FROM"], [81, 83, 4, "enum_COMPUTED_FROM"], [81, 85, 4, "enum_COMPUTED_FROM"], [135, 137, 4, "enum_COMPUTED_FROM"], [198, 204, 4, "enum_COMPUTED_FROM"], [248, 250, 4, "enum_COMPUTED_FROM"], [248, 252, 4, "enum_COMPUTED_FROM"], [269, 271, 4, "enum_COMPUTED_FROM"], [277, 279, 4, "enum_COMPUTED_FROM"], [281, 283, 4, "enum_COMPUTED_FROM"], [223, 225, 4, "enum_COMPUTED_FROM"], [223, 227, 4, "enum_COMPUTED_FROM"], [356, 358, 4, "enum_COMPUTED_FROM"], [408, 410, 4, "enum_COMPUTED_FROM"], [494, 496, 4, "enum_COMPUTED_FROM"], [321, 323, 4, "enum_COMPUTED_FROM"]], "error_location": 227, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/scipion-em/scipion-em.git", "old_path": "pwem/convert/atom_struct.py", "hash": "2d9ba7dfcd59de3b77e19cb23d5fa2ad34c80d55", "code": "def _save_structure(self, out_file: str, select: Select, preserve_atom_numbering: bool):\n    if self._noRepeated(self.structure):  # if the chain ids are unique\n        atom_dict: Dict[str, Any] = defaultdict(list)\n\n        for model in self.structure.get_list():\n            if not select.accept_model(model):\n                continue\n            # mmCIF files with a single model have it specified as model 1\n            if model.serial_num == 0:\n                model_n: str = \"1\"\n            else:\n                model_n: str = str(model.serial_num)\n            # This is used to write label_entity_id and label_asym_id and\n            # increments from 1, changing with each molecule\n            entity_id: int = 0\n            if not preserve_atom_numbering:\n                atom_number: int = 1\n            for chain in model.get_list():\n                if not select.accept_chain(chain):\n                    continue\n                chain_id: str = chain.get_id()\n                if chain_id == \" \":\n                    chain_id = \".\"\n                # This is used to write label_seq_id and increments from 1,\n                # remaining blank for hetero residues\n                residue_number: int = 1\n                prev_residue_type: str = \"\"\n                prev_resname: str = \"\"\n                for residue in chain.get_unpacked_list():\n                    if not select.accept_residue(residue):\n                        continue\n                    hetfield: str\n                    resseq: int\n                    icode: str\n                    hetfield, resseq, icode = residue.get_id()\n                    if hetfield == \" \":\n                        residue_type = \"ATOM\"\n                        label_seq_id = str(residue_number)\n                        residue_number += 1\n                    else:\n                        residue_type = \"HETATM\"\n                        label_seq_id = \".\"\n                    resseq: str = str(resseq)\n                    if icode == \" \":\n                        icode = \"?\"\n                    resname: str = residue.get_resname()\n                    # Check if the molecule changes within the chain\n                    # This will always increment for the first residue in a\n                    # chain due to the starting values above\n                    ## ROB if residue_type != prev_residue_type or                     ## ROB        (residue_type == \"HETATM\" and resname != prev_resname):\n                    ## ROB    entity_id += 1\n                    prev_residue_type: str = residue_type\n                    prev_resname: str = resname\n                    ## ROB label_asym_id = self._get_label_asym_id(entity_id)\n                    for atom in residue.get_unpacked_list():\n                        if select.accept_atom(atom):\n                            atom_dict[\"_atom_site.group_PDB\"].append(residue_type)\n                            if preserve_atom_numbering:\n                                atom_number: int = atom.get_serial_number()\n                            atom_dict[\"_atom_site.id\"].append(str(atom_number))\n                            if not preserve_atom_numbering:\n                                atom_number += 1\n                            element = atom.element.strip()\n                            if element == \"\":\n                                element: str = \"?\"\n                            atom_dict[\"_atom_site.type_symbol\"].append(element)\n                            atom_dict[\"_atom_site.label_atom_id\"].append(atom.get_name().strip())\n                            altloc: str = atom.get_altloc()\n                            if altloc == \" \":\n                                altloc = \".\"\n                            atom_dict[\"_atom_site.label_alt_id\"].append(altloc)\n                            atom_dict[\"_atom_site.label_comp_id\"].append(resname.strip())\n                            # modified by ROB BEGIN\n                            atom_dict[\"_atom_site.label_asym_id\"].append(chain_id)\n                            # modified by ROB END\n                            # The entity ID should be the same for similar chains\n                            # However this is non-trivial to calculate so we write \"?\"\n                            atom_dict[\"_atom_site.label_entity_id\"].append(\"?\")\n                            atom_dict[\"_atom_site.label_seq_id\"].append(label_seq_id)\n                            atom_dict[\"_atom_site.pdbx_PDB_ins_code\"].append(icode)\n                            coord: Any = atom.get_coord()\n                            atom_dict[\"_atom_site.Cartn_x\"].append(\"%.3f\" % coord[0])\n                            atom_dict[\"_atom_site.Cartn_y\"].append(\"%.3f\" % coord[1])\n                            atom_dict[\"_atom_site.Cartn_z\"].append(\"%.3f\" % coord[2])\n                            atom_dict[\"_atom_site.occupancy\"].append(str(atom.get_occupancy()))\n                            atom_dict[\"_atom_site.B_iso_or_equiv\"].append(str(atom.get_bfactor()))\n                            atom_dict[\"_atom_site.auth_seq_id\"].append(resseq)\n                            atom_dict[\"_atom_site.auth_asym_id\"].append(chain_id)\n                            atom_dict[\"_atom_site.pdbx_PDB_model_num\"].append(model_n)\n\n        # Data block name is the structure ID with special characters removed\n        structure_id: str = self.structure.id\n        for c in [\"#\", \"$\", \"'\", \"\"\", \"[\", \"]\", \" \", \"\t\", \"\n\"]:\n            structure_id = structure_id.replace(c, \"\")\n        atom_dict[\"data_\"] = structure_id\n\n        # Set the dictionary and write out using the generic dictionary method\n        self.dic = atom_dict\n        self._save_dict(out_file)\n\n    else:\n        super(scipionMMCIFIO, self)._save_structure(out_file,\n                                                    select,\n                                                    preserve_atom_numbering)\n", "rewrite": "ReplaceText(target='resseq' @(113,47)->(113,61))", "error_line": 34, "has_bug": true, "code_full": "from collections import defaultdict\nfrom typing import Any, Dict, List\n\nimport h5py\n\n\nclass Structure:\n    id: str\n\n    def get_list(self) -> List:\n        return []\n\n\nclass Select:\n    def accept_model(self, model: Any) -> bool:\n        return True\n\n    def accept_chain(self, chain: Any) -> bool:\n        return True\n\n    def accept_residue(self, residue: Any) -> bool:\n        return True\n\n    def accept_atom(self, atom: Any) -> bool:\n        return True\n    \n\nclass SuperClass:\n    def _save_structure(self, out_file: str, select: Select, preserve_atom_numbering: bool):\n        pass\n\n    def _noRepeated(self, structure: Structure) -> bool:\n        return True\n    \n\nclass scipionMMCIFIO(SuperClass):\n    structure: Structure\n    dic: Dict[str, List[str]]\n\n    def _noRepeated(self, structure: Structure) -> bool:\n        return True\n\n    def _save_dict(self, out_file: str):\n        pass\n\n    def _save_structure(self, out_file: str, select: Select, preserve_atom_numbering: bool):\n        if self._noRepeated(self.structure):  # if the chain ids are unique\n            atom_dict: Dict[str, Any] = defaultdict(list)\n\n            for model in self.structure.get_list():\n                if not select.accept_model(model):\n                    continue\n                # mmCIF files with a single model have it specified as model 1\n                if model.serial_num == 0:\n                    model_n: str = \"1\"\n                else:\n                    model_n: str = str(model.serial_num)\n                # This is used to write label_entity_id and label_asym_id and\n                # increments from 1, changing with each molecule\n                entity_id: int = 0\n                if not preserve_atom_numbering:\n                    atom_number: int = 1\n                for chain in model.get_list():\n                    if not select.accept_chain(chain):\n                        continue\n                    chain_id: str = chain.get_id()\n                    if chain_id == \" \":\n                        chain_id = \".\"\n                    # This is used to write label_seq_id and increments from 1,\n                    # remaining blank for hetero residues\n                    residue_number: int = 1\n                    prev_residue_type: str = \"\"\n                    prev_resname: str = \"\"\n                    for residue in chain.get_unpacked_list():\n                        if not select.accept_residue(residue):\n                            continue\n                        hetfield: str\n                        resseq: int\n                        icode: str\n                        hetfield, resseq, icode = residue.get_id()\n                        if hetfield == \" \":\n                            residue_type = \"ATOM\"\n                            label_seq_id = str(residue_number)\n                            residue_number += 1\n                        else:\n                            residue_type = \"HETATM\"\n                            label_seq_id = \".\"\n                        resseq: str = str(resseq)\n                        if icode == \" \":\n                            icode = \"?\"\n                        resname: str = residue.get_resname()\n                        # Check if the molecule changes within the chain\n                        # This will always increment for the first residue in a\n                        # chain due to the starting values above\n                        ## ROB if residue_type != prev_residue_type or                         ## ROB        (residue_type == \"HETATM\" and resname != prev_resname):\n                        ## ROB    entity_id += 1\n                        prev_residue_type: str = residue_type\n                        prev_resname: str = resname\n                        ## ROB label_asym_id = self._get_label_asym_id(entity_id)\n                        for atom in residue.get_unpacked_list():\n                            if select.accept_atom(atom):\n                                atom_dict[\"_atom_site.group_PDB\"].append(residue_type)\n                                if preserve_atom_numbering:\n                                    atom_number: int = atom.get_serial_number()\n                                atom_dict[\"_atom_site.id\"].append(str(atom_number))\n                                if not preserve_atom_numbering:\n                                    atom_number += 1\n                                element = atom.element.strip()\n                                if element == \"\":\n                                    element: str = \"?\"\n                                atom_dict[\"_atom_site.type_symbol\"].append(element)\n                                atom_dict[\"_atom_site.label_atom_id\"].append(atom.get_name().strip())\n                                altloc: str = atom.get_altloc()\n                                if altloc == \" \":\n                                    altloc = \".\"\n                                atom_dict[\"_atom_site.label_alt_id\"].append(altloc)\n                                atom_dict[\"_atom_site.label_comp_id\"].append(resname.strip())\n                                # modified by ROB BEGIN\n                                atom_dict[\"_atom_site.label_asym_id\"].append(chain_id)\n                                # modified by ROB END\n                                # The entity ID should be the same for similar chains\n                                # However this is non-trivial to calculate so we write \"?\"\n                                atom_dict[\"_atom_site.label_entity_id\"].append(\"?\")\n                                atom_dict[\"_atom_site.label_seq_id\"].append(label_seq_id)\n                                atom_dict[\"_atom_site.pdbx_PDB_ins_code\"].append(icode)\n                                coord: Any = atom.get_coord()\n                                atom_dict[\"_atom_site.Cartn_x\"].append(\"%.3f\" % coord[0])\n                                atom_dict[\"_atom_site.Cartn_y\"].append(\"%.3f\" % coord[1])\n                                atom_dict[\"_atom_site.Cartn_z\"].append(\"%.3f\" % coord[2])\n                                atom_dict[\"_atom_site.occupancy\"].append(str(atom.get_occupancy()))\n                                atom_dict[\"_atom_site.B_iso_or_equiv\"].append(str(atom.get_bfactor()))\n                                atom_dict[\"_atom_site.auth_seq_id\"].append(resseq)\n                                atom_dict[\"_atom_site.auth_asym_id\"].append(chain_id)\n                                atom_dict[\"_atom_site.pdbx_PDB_model_num\"].append(model_n)\n\n            # Data block name is the structure ID with special characters removed\n            structure_id: str = self.structure.id\n            for c in [\"#\", \"$\", \"'\", \"\"\", \"[\", \"]\", \" \", \"\t\", \"\n\"]:\n                structure_id = structure_id.replace(c, \"\")\n            atom_dict[\"data_\"] = structure_id\n\n            # Set the dictionary and write out using the generic dictionary method\n            self.dic = atom_dict\n            self._save_dict(out_file)\n\n        else:\n            super(scipionMMCIFIO, self)._save_structure(out_file,\n                                                        select,\n                                                        preserve_atom_numbering)\n", "error_location_char": [1735, 1749], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def parse_inventory(", "email", ",", "data", ",", "params", ")", ":", "#NEWLINE#", "#INDENT#", "logging", ".", "info", "(", "'Processing inventory retrieved from Azure...'", ")", "#NEWLINE#", "hosts", "=", "[", "]", "#NEWLINE#", "assets", "=", "[", "]", "#NEWLINE#", "asset_map", "=", "{", "}", "#NEWLINE#", "not_running_vms", "=", "{", "}", "#NEWLINE#", "for", "i", "in", "range", "(", "len", "(", "data", ")", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "data", "[", "i", "]", "[", "4", "]", "==", "'WindowsServices'", ")", ":", "#NEWLINE#", "#INDENT#", "continue", "#NEWLINE#", "#UNINDENT#", "host", "=", "data", "[", "i", "]", "[", "5", "]", "#NEWLINE#", "vmuuid", "=", "data", "[", "i", "]", "[", "6", "]", "#NEWLINE#", "publisher", "=", "data", "[", "i", "]", "[", "2", "]", "#NEWLINE#", "if", "(", "not_running_vms", ".", "get", "(", "vmuuid", ")", "==", "1", ")", ":", "#NEWLINE#", "#INDENT#", "continue", "#NEWLINE#", "#UNINDENT#", "if", "(", "(", "host", "not in", "hosts", ")", "and", "(", "publisher", "!=", "'0'", ")", ")", ":", "#NEWLINE#", "#INDENT#", "patches", "=", "[", "]", "#NEWLINE#", "products", "=", "[", "]", "#NEWLINE#", "asset_map", "=", "{", "}", "#NEWLINE#", "asset_map", "[", "'owner'", "]", "=", "email", "#NEWLINE#", "asset_map", "[", "'host'", "]", "=", "host", "#NEWLINE#", "asset_map", "[", "'id'", "]", "=", "host", "#NEWLINE#", "asset_map", "[", "'name'", "]", "=", "host", "#NEWLINE#", "asset_map", "[", "'tags'", "]", "=", "[", "]", "#NEWLINE#", "asset_map", "[", "'patch_tracker'", "]", "=", "{", "}", "#NEWLINE#", "asset_map", "[", "'vmuuid'", "]", "=", "vmuuid", "#NEWLINE#", "if", "(", "data", "[", "i", "]", "[", "1", "]", "==", "'Update'", ")", ":", "#NEWLINE#", "#INDENT#", "patch", "=", "parse_patch", "(", "data", "[", "i", "]", ")", "#NEWLINE#", "if", "(", "patch", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "patches", ".", "append", "(", "patch", ")", "#NEWLINE#", "asset_map", "[", "'patch_tracker'", "]", "[", "patch", "[", "'id'", "]", "]", "=", "patch", "[", "'id'", "]", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "if", "(", "(", "data", "[", "i", "]", "[", "1", "]", "==", "'Package'", ")", "or", "(", "data", "[", "i", "]", "[", "1", "]", "==", "'Application'", ")", ")", ":", "#NEWLINE#", "#INDENT#", "pname", "=", "data", "[", "i", "]", "[", "0", "]", "#NEWLINE#", "pversion", "=", "data", "[", "i", "]", "[", "3", "]", "#NEWLINE#", "products", ".", "append", "(", "(", "(", "pname", "+", "' '", ")", "+", "pversion", ")", ")", "#NEWLINE#", "#UNINDENT#", "asset_map", "[", "'products'", "]", "=", "products", "#NEWLINE#", "asset_map", "[", "'patches'", "]", "=", "patches", "#NEWLINE#", "(", "vm_running", ",", "os", ",", "os_version", ")", "=", "get_os_details", "(", "host", ",", "vmuuid", ",", "params", ")", "#NEWLINE#", "if", "(", "vm_running", "==", "False", ")", ":", "#NEWLINE#", "#INDENT#", "not_running_vms", "[", "vmuuid", "]", "=", "1", "#NEWLINE#", "continue", "#NEWLINE#", "#UNINDENT#", "asset_map", "[", "'type'", "]", "=", "get_os_type", "(", "os", ")", "#NEWLINE#", "if", "(", "len", "(", "asset_map", "[", "'type'", "]", ")", ">", "0", ")", ":", "#NEWLINE#", "#INDENT#", "asset_map", "[", "'tags'", "]", ".", "append", "(", "asset_map", "[", "'type'", "]", ")", "#NEWLINE#", "#UNINDENT#", "if", "(", "asset_map", "[", "'type'", "]", "==", "'Windows'", ")", ":", "#NEWLINE#", "#INDENT#", "asset_map", "[", "'tags'", "]", ".", "append", "(", "(", "'OS_RELEASE:'", "+", "os", ")", ")", "#NEWLINE#", "asset_map", "[", "'tags'", "]", ".", "append", "(", "(", "'OS_VERSION:'", "+", "os_version", ")", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "asset_map", "[", "'tags'", "]", ".", "append", "(", "(", "'OS_RELEASE:%s %s'", "%", "(", "os", ",", "os_version", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "if", "(", "params", "[", "'enable_tracking_tags'", "]", "==", "True", ")", ":", "#NEWLINE#", "#INDENT#", "asset_map", "[", "'tags'", "]", ".", "append", "(", "(", "'SOURCE:Azure:'", "+", "params", "[", "'tenant_id'", "]", ")", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "asset_map", "[", "'tags'", "]", ".", "append", "(", "'SOURCE:Azure'", ")", "#NEWLINE#", "#UNINDENT#", "assets", ".", "append", "(", "asset_map", ")", "#NEWLINE#", "hosts", ".", "append", "(", "host", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "for", "asset", "in", "assets", ":", "#NEWLINE#", "#INDENT#", "if", "(", "asset", "[", "'host'", "]", "==", "host", ")", ":", "#NEWLINE#", "#INDENT#", "products", "=", "asset", "[", "'products'", "]", "#NEWLINE#", "patches", "=", "asset", "[", "'patches'", "]", "#NEWLINE#", "if", "(", "data", "[", "i", "]", "[", "1", "]", "==", "'Update'", ")", ":", "#NEWLINE#", "#INDENT#", "patch", "=", "parse_patch", "(", "data", "[", "i", "]", ")", "#NEWLINE#", "if", "(", "(", "patch", "is not", "None", ")", "and", "(", "asset", "[", "'patch_tracker'", "]", ".", "get", "(", "patch", "[", "'id'", "]", ")", "is", "None", ")", ")", ":", "#NEWLINE#", "#INDENT#", "patches", ".", "append", "(", "patch", ")", "#NEWLINE#", "asset", "[", "'patches'", "]", "=", "patches", "#NEWLINE#", "asset", "[", "'patch_tracker'", "]", "[", "patch", "[", "'id'", "]", "]", "=", "patch", "[", "'id'", "]", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "if", "(", "(", "data", "[", "i", "]", "[", "1", "]", "==", "'Package'", ")", "or", "(", "data", "[", "i", "]", "[", "1", "]", "==", "'Application'", ")", ")", ":", "#NEWLINE#", "#INDENT#", "pname", "=", "data", "[", "i", "]", "[", "0", "]", "#NEWLINE#", "pversion", "=", "data", "[", "i", "]", "[", "3", "]", "#NEWLINE#", "products", ".", "append", "(", "(", "(", "pname", "+", "' '", ")", "+", "pversion", ")", ")", "#NEWLINE#", "asset", "[", "'products'", "]", "=", "products", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "for", "asset", "in", "assets", ":", "#NEWLINE#", "#INDENT#", "asset", ".", "pop", "(", "'patch_tracker'", ",", "None", ")", "#NEWLINE#", "asset", ".", "pop", "(", "'vmuuid'", ",", "None", ")", "#NEWLINE#", "#UNINDENT#", "return", "assets"], "edges": [[1, 3, 7, "enum_FIELD"], [10, 14, 7, "enum_FIELD"], [17, 20, 7, "enum_FIELD"], [22, 25, 7, "enum_FIELD"], [27, 30, 7, "enum_FIELD"], [32, 35, 7, "enum_FIELD"], [40, 39, 7, "enum_FIELD"], [40, 42, 7, "enum_FIELD"], [736, 735, 7, "enum_FIELD"], [736, 737, 7, "enum_FIELD"], [760, 761, 7, "enum_FIELD"], [14, 12, 7, "enum_FIELD"], [42, 41, 7, "enum_FIELD"], [51, 60, 7, "enum_FIELD"], [68, 75, 7, "enum_FIELD"], [78, 85, 7, "enum_FIELD"], [88, 95, 7, "enum_FIELD"], [99, 107, 7, "enum_FIELD"], [130, 123, 7, "enum_FIELD"], [740, 746, 7, "enum_FIELD"], [749, 755, 7, "enum_FIELD"], [12, 11, 7, "enum_FIELD"], [44, 43, 7, "enum_FIELD"], [60, 57, 7, "enum_FIELD"], [75, 72, 7, "enum_FIELD"], [75, 76, 7, "enum_FIELD"], [85, 82, 7, "enum_FIELD"], [85, 86, 7, "enum_FIELD"], [95, 92, 7, "enum_FIELD"], [95, 96, 7, "enum_FIELD"], [107, 104, 7, "enum_FIELD"], [132, 135, 7, "enum_FIELD"], [137, 140, 7, "enum_FIELD"], [142, 145, 7, "enum_FIELD"], [147, 153, 7, "enum_FIELD"], [154, 160, 7, "enum_FIELD"], [161, 167, 7, "enum_FIELD"], [168, 174, 7, "enum_FIELD"], [175, 181, 7, "enum_FIELD"], [183, 189, 7, "enum_FIELD"], [191, 197, 7, "enum_FIELD"], [199, 208, 7, "enum_FIELD"], [258, 271, 7, "enum_FIELD"], [322, 328, 7, "enum_FIELD"], [329, 335, 7, "enum_FIELD"], [336, 348, 7, "enum_FIELD"], [354, 357, 7, "enum_FIELD"], [372, 379, 7, "enum_FIELD"], [383, 392, 7, "enum_FIELD"], [421, 418, 7, "enum_FIELD"], [485, 482, 7, "enum_FIELD"], [520, 524, 7, "enum_FIELD"], [527, 531, 7, "enum_FIELD"], [542, 541, 7, "enum_FIELD"], [542, 543, 7, "enum_FIELD"], [746, 742, 7, "enum_FIELD"], [755, 751, 7, "enum_FIELD"], [57, 54, 7, "enum_FIELD"], [57, 58, 7, "enum_FIELD"], [72, 71, 7, "enum_FIELD"], [72, 73, 7, "enum_FIELD"], [82, 81, 7, "enum_FIELD"], [82, 83, 7, "enum_FIELD"], [92, 91, 7, "enum_FIELD"], [92, 93, 7, "enum_FIELD"], [104, 102, 7, "enum_FIELD"], [120, 119, 7, "enum_FIELD"], [126, 125, 7, "enum_FIELD"], [149, 148, 7, "enum_FIELD"], [149, 150, 7, "enum_FIELD"], [156, 155, 7, "enum_FIELD"], [156, 157, 7, "enum_FIELD"], [163, 162, 7, "enum_FIELD"], [163, 164, 7, "enum_FIELD"], [170, 169, 7, "enum_FIELD"], [170, 171, 7, "enum_FIELD"], [177, 176, 7, "enum_FIELD"], [177, 178, 7, "enum_FIELD"], [185, 184, 7, "enum_FIELD"], [185, 186, 7, "enum_FIELD"], [193, 192, 7, "enum_FIELD"], [193, 194, 7, "enum_FIELD"], [208, 205, 7, "enum_FIELD"], [213, 217, 7, "enum_FIELD"], [224, 227, 7, "enum_FIELD"], [286, 293, 7, "enum_FIELD"], [296, 303, 7, "enum_FIELD"], [306, 310, 7, "enum_FIELD"], [324, 323, 7, "enum_FIELD"], [324, 325, 7, "enum_FIELD"], [331, 330, 7, "enum_FIELD"], [331, 332, 7, "enum_FIELD"], [348, 345, 7, "enum_FIELD"], [357, 356, 7, "enum_FIELD"], [362, 368, 7, "enum_FIELD"], [374, 373, 7, "enum_FIELD"], [374, 375, 7, "enum_FIELD"], [379, 378, 7, "enum_FIELD"], [392, 386, 7, "enum_FIELD"], [397, 404, 7, "enum_FIELD"], [418, 415, 7, "enum_FIELD"], [423, 430, 7, "enum_FIELD"], [437, 444, 7, "enum_FIELD"], [456, 463, 7, "enum_FIELD"], [482, 479, 7, "enum_FIELD"], [487, 494, 7, "enum_FIELD"], [509, 516, 7, "enum_FIELD"], [524, 522, 7, "enum_FIELD"], [531, 529, 7, "enum_FIELD"], [547, 553, 7, "enum_FIELD"], [742, 741, 7, "enum_FIELD"], [751, 750, 7, "enum_FIELD"], [54, 53, 7, "enum_FIELD"], [54, 55, 7, "enum_FIELD"], [102, 101, 7, "enum_FIELD"], [205, 202, 7, "enum_FIELD"], [205, 206, 7, "enum_FIELD"], [217, 216, 7, "enum_FIELD"], [227, 226, 7, "enum_FIELD"], [232, 236, 7, "enum_FIELD"], [239, 252, 7, "enum_FIELD"], [268, 265, 7, "enum_FIELD"], [280, 277, 7, "enum_FIELD"], [293, 290, 7, "enum_FIELD"], [293, 294, 7, "enum_FIELD"], [303, 300, 7, "enum_FIELD"], [303, 304, 7, "enum_FIELD"], [310, 308, 7, "enum_FIELD"], [364, 363, 7, "enum_FIELD"], [364, 365, 7, "enum_FIELD"], [386, 385, 7, "enum_FIELD"], [404, 402, 7, "enum_FIELD"], [415, 414, 7, "enum_FIELD"], [415, 416, 7, "enum_FIELD"], [430, 428, 7, "enum_FIELD"], [444, 442, 7, "enum_FIELD"], [463, 461, 7, "enum_FIELD"], [479, 478, 7, "enum_FIELD"], [479, 480, 7, "enum_FIELD"], [494, 492, 7, "enum_FIELD"], [516, 514, 7, "enum_FIELD"], [522, 521, 7, "enum_FIELD"], [529, 528, 7, "enum_FIELD"], [553, 550, 7, "enum_FIELD"], [558, 562, 7, "enum_FIELD"], [565, 569, 7, "enum_FIELD"], [573, 582, 7, "enum_FIELD"], [658, 671, 7, "enum_FIELD"], [202, 201, 7, "enum_FIELD"], [202, 203, 7, "enum_FIELD"], [219, 218, 7, "enum_FIELD"], [219, 220, 7, "enum_FIELD"], [236, 234, 7, "enum_FIELD"], [244, 241, 7, "enum_FIELD"], [244, 246, 7, "enum_FIELD"], [252, 251, 7, "enum_FIELD"], [252, 253, 7, "enum_FIELD"], [265, 262, 7, "enum_FIELD"], [265, 266, 7, "enum_FIELD"], [277, 274, 7, "enum_FIELD"], [277, 278, 7, "enum_FIELD"], [290, 289, 7, "enum_FIELD"], [290, 291, 7, "enum_FIELD"], [300, 299, 7, "enum_FIELD"], [300, 301, 7, "enum_FIELD"], [308, 307, 7, "enum_FIELD"], [317, 314, 7, "enum_FIELD"], [317, 318, 7, "enum_FIELD"], [388, 387, 7, "enum_FIELD"], [388, 389, 7, "enum_FIELD"], [402, 399, 7, "enum_FIELD"], [406, 405, 7, "enum_FIELD"], [406, 407, 7, "enum_FIELD"], [428, 425, 7, "enum_FIELD"], [433, 432, 7, "enum_FIELD"], [433, 434, 7, "enum_FIELD"], [442, 439, 7, "enum_FIELD"], [447, 446, 7, "enum_FIELD"], [447, 448, 7, "enum_FIELD"], [461, 458, 7, "enum_FIELD"], [466, 465, 7, "enum_FIELD"], [466, 469, 7, "enum_FIELD"], [492, 489, 7, "enum_FIELD"], [497, 496, 7, "enum_FIELD"], [497, 499, 7, "enum_FIELD"], [514, 511, 7, "enum_FIELD"], [550, 549, 7, "enum_FIELD"], [550, 551, 7, "enum_FIELD"], [562, 561, 7, "enum_FIELD"], [562, 563, 7, "enum_FIELD"], [569, 568, 7, "enum_FIELD"], [569, 570, 7, "enum_FIELD"], [582, 579, 7, "enum_FIELD"], [587, 591, 7, "enum_FIELD"], [598, 605, 7, "enum_FIELD"], [686, 693, 7, "enum_FIELD"], [696, 703, 7, "enum_FIELD"], [706, 710, 7, "enum_FIELD"], [721, 727, 7, "enum_FIELD"], [234, 233, 7, "enum_FIELD"], [241, 240, 7, "enum_FIELD"], [241, 242, 7, "enum_FIELD"], [246, 245, 7, "enum_FIELD"], [246, 247, 7, "enum_FIELD"], [262, 261, 7, "enum_FIELD"], [262, 263, 7, "enum_FIELD"], [274, 273, 7, "enum_FIELD"], [274, 275, 7, "enum_FIELD"], [314, 313, 7, "enum_FIELD"], [314, 315, 7, "enum_FIELD"], [399, 398, 7, "enum_FIELD"], [399, 400, 7, "enum_FIELD"], [425, 424, 7, "enum_FIELD"], [425, 426, 7, "enum_FIELD"], [439, 438, 7, "enum_FIELD"], [439, 440, 7, "enum_FIELD"], [458, 457, 7, "enum_FIELD"], [458, 459, 7, "enum_FIELD"], [489, 488, 7, "enum_FIELD"], [489, 490, 7, "enum_FIELD"], [499, 498, 7, "enum_FIELD"], [499, 500, 7, "enum_FIELD"], [511, 510, 7, "enum_FIELD"], [511, 512, 7, "enum_FIELD"], [579, 576, 7, "enum_FIELD"], [579, 580, 7, "enum_FIELD"], [591, 590, 7, "enum_FIELD"], [625, 629, 7, "enum_FIELD"], [632, 638, 7, "enum_FIELD"], [639, 652, 7, "enum_FIELD"], [668, 665, 7, "enum_FIELD"], [680, 677, 7, "enum_FIELD"], [693, 690, 7, "enum_FIELD"], [693, 694, 7, "enum_FIELD"], [703, 700, 7, "enum_FIELD"], [703, 704, 7, "enum_FIELD"], [710, 708, 7, "enum_FIELD"], [723, 722, 7, "enum_FIELD"], [723, 724, 7, "enum_FIELD"], [576, 575, 7, "enum_FIELD"], [576, 577, 7, "enum_FIELD"], [593, 592, 7, "enum_FIELD"], [593, 594, 7, "enum_FIELD"], [602, 601, 7, "enum_FIELD"], [619, 613, 7, "enum_FIELD"], [629, 627, 7, "enum_FIELD"], [634, 633, 7, "enum_FIELD"], [634, 635, 7, "enum_FIELD"], [644, 641, 7, "enum_FIELD"], [644, 646, 7, "enum_FIELD"], [652, 651, 7, "enum_FIELD"], [652, 653, 7, "enum_FIELD"], [665, 662, 7, "enum_FIELD"], [665, 666, 7, "enum_FIELD"], [677, 674, 7, "enum_FIELD"], [677, 678, 7, "enum_FIELD"], [690, 689, 7, "enum_FIELD"], [690, 691, 7, "enum_FIELD"], [700, 699, 7, "enum_FIELD"], [700, 701, 7, "enum_FIELD"], [708, 707, 7, "enum_FIELD"], [717, 714, 7, "enum_FIELD"], [717, 718, 7, "enum_FIELD"], [613, 611, 7, "enum_FIELD"], [627, 626, 7, "enum_FIELD"], [641, 640, 7, "enum_FIELD"], [641, 642, 7, "enum_FIELD"], [646, 645, 7, "enum_FIELD"], [646, 647, 7, "enum_FIELD"], [662, 661, 7, "enum_FIELD"], [662, 663, 7, "enum_FIELD"], [674, 673, 7, "enum_FIELD"], [674, 675, 7, "enum_FIELD"], [714, 713, 7, "enum_FIELD"], [714, 715, 7, "enum_FIELD"], [611, 608, 7, "enum_FIELD"], [615, 614, 7, "enum_FIELD"], [615, 616, 7, "enum_FIELD"], [608, 607, 7, "enum_FIELD"], [608, 609, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [45, 4, 10, "enum_LAST_LEXICAL_USE"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [53, 45, 10, "enum_LAST_LEXICAL_USE"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [55, 39, 10, "enum_LAST_LEXICAL_USE"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 66, 9, "enum_NEXT_SYNTAX"], [66, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [71, 53, 10, "enum_LAST_LEXICAL_USE"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [73, 55, 10, "enum_LAST_LEXICAL_USE"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [81, 71, 10, "enum_LAST_LEXICAL_USE"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [83, 73, 10, "enum_LAST_LEXICAL_USE"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [91, 81, 10, "enum_LAST_LEXICAL_USE"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [93, 83, 10, "enum_LAST_LEXICAL_USE"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [101, 33, 10, "enum_LAST_LEXICAL_USE"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [105, 79, 10, "enum_LAST_LEXICAL_USE"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 113, 9, "enum_NEXT_SYNTAX"], [113, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [119, 69, 10, "enum_LAST_LEXICAL_USE"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [121, 18, 10, "enum_LAST_LEXICAL_USE"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [125, 89, 10, "enum_LAST_LEXICAL_USE"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [143, 28, 10, "enum_LAST_LEXICAL_USE"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [148, 143, 10, "enum_LAST_LEXICAL_USE"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [153, 2, 10, "enum_LAST_LEXICAL_USE"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [155, 148, 10, "enum_LAST_LEXICAL_USE"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [160, 119, 10, "enum_LAST_LEXICAL_USE"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [162, 155, 10, "enum_LAST_LEXICAL_USE"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [167, 160, 10, "enum_LAST_LEXICAL_USE"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [169, 162, 10, "enum_LAST_LEXICAL_USE"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [174, 167, 10, "enum_LAST_LEXICAL_USE"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [176, 169, 10, "enum_LAST_LEXICAL_USE"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [184, 176, 10, "enum_LAST_LEXICAL_USE"], [183, 184, 9, "enum_NEXT_SYNTAX"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [187, 188, 9, "enum_NEXT_SYNTAX"], [188, 189, 9, "enum_NEXT_SYNTAX"], [189, 190, 9, "enum_NEXT_SYNTAX"], [190, 191, 9, "enum_NEXT_SYNTAX"], [192, 184, 10, "enum_LAST_LEXICAL_USE"], [191, 192, 9, "enum_NEXT_SYNTAX"], [192, 193, 9, "enum_NEXT_SYNTAX"], [193, 194, 9, "enum_NEXT_SYNTAX"], [194, 195, 9, "enum_NEXT_SYNTAX"], [195, 196, 9, "enum_NEXT_SYNTAX"], [197, 105, 10, "enum_LAST_LEXICAL_USE"], [196, 197, 9, "enum_NEXT_SYNTAX"], [197, 199, 9, "enum_NEXT_SYNTAX"], [199, 200, 9, "enum_NEXT_SYNTAX"], [201, 91, 10, "enum_LAST_LEXICAL_USE"], [200, 201, 9, "enum_NEXT_SYNTAX"], [201, 202, 9, "enum_NEXT_SYNTAX"], [203, 93, 10, "enum_LAST_LEXICAL_USE"], [202, 203, 9, "enum_NEXT_SYNTAX"], [203, 204, 9, "enum_NEXT_SYNTAX"], [204, 205, 9, "enum_NEXT_SYNTAX"], [205, 206, 9, "enum_NEXT_SYNTAX"], [206, 207, 9, "enum_NEXT_SYNTAX"], [207, 208, 9, "enum_NEXT_SYNTAX"], [208, 209, 9, "enum_NEXT_SYNTAX"], [209, 210, 9, "enum_NEXT_SYNTAX"], [210, 211, 9, "enum_NEXT_SYNTAX"], [211, 213, 9, "enum_NEXT_SYNTAX"], [213, 214, 9, "enum_NEXT_SYNTAX"], [214, 215, 9, "enum_NEXT_SYNTAX"], [215, 216, 9, "enum_NEXT_SYNTAX"], [216, 217, 9, "enum_NEXT_SYNTAX"], [218, 201, 10, "enum_LAST_LEXICAL_USE"], [217, 218, 9, "enum_NEXT_SYNTAX"], [218, 219, 9, "enum_NEXT_SYNTAX"], [220, 203, 10, "enum_LAST_LEXICAL_USE"], [219, 220, 9, "enum_NEXT_SYNTAX"], [220, 221, 9, "enum_NEXT_SYNTAX"], [221, 222, 9, "enum_NEXT_SYNTAX"], [222, 224, 9, "enum_NEXT_SYNTAX"], [224, 225, 9, "enum_NEXT_SYNTAX"], [226, 214, 10, "enum_LAST_LEXICAL_USE"], [225, 226, 9, "enum_NEXT_SYNTAX"], [226, 227, 9, "enum_NEXT_SYNTAX"], [227, 228, 9, "enum_NEXT_SYNTAX"], [228, 229, 9, "enum_NEXT_SYNTAX"], [229, 230, 9, "enum_NEXT_SYNTAX"], [230, 232, 9, "enum_NEXT_SYNTAX"], [233, 133, 10, "enum_LAST_LEXICAL_USE"], [232, 233, 9, "enum_NEXT_SYNTAX"], [233, 234, 9, "enum_NEXT_SYNTAX"], [234, 235, 9, "enum_NEXT_SYNTAX"], [235, 236, 9, "enum_NEXT_SYNTAX"], [237, 226, 10, "enum_LAST_LEXICAL_USE"], [236, 237, 9, "enum_NEXT_SYNTAX"], [237, 238, 9, "enum_NEXT_SYNTAX"], [238, 239, 9, "enum_NEXT_SYNTAX"], [240, 192, 10, "enum_LAST_LEXICAL_USE"], [239, 240, 9, "enum_NEXT_SYNTAX"], [240, 241, 9, "enum_NEXT_SYNTAX"], [241, 242, 9, "enum_NEXT_SYNTAX"], [242, 243, 9, "enum_NEXT_SYNTAX"], [243, 244, 9, "enum_NEXT_SYNTAX"], [245, 237, 10, "enum_LAST_LEXICAL_USE"], [244, 245, 9, "enum_NEXT_SYNTAX"], [245, 246, 9, "enum_NEXT_SYNTAX"], [246, 247, 9, "enum_NEXT_SYNTAX"], [247, 248, 9, "enum_NEXT_SYNTAX"], [248, 249, 9, "enum_NEXT_SYNTAX"], [249, 250, 9, "enum_NEXT_SYNTAX"], [251, 245, 10, "enum_LAST_LEXICAL_USE"], [250, 251, 9, "enum_NEXT_SYNTAX"], [251, 252, 9, "enum_NEXT_SYNTAX"], [252, 253, 9, "enum_NEXT_SYNTAX"], [253, 254, 9, "enum_NEXT_SYNTAX"], [254, 258, 9, "enum_NEXT_SYNTAX"], [258, 259, 9, "enum_NEXT_SYNTAX"], [259, 260, 9, "enum_NEXT_SYNTAX"], [261, 218, 10, "enum_LAST_LEXICAL_USE"], [260, 261, 9, "enum_NEXT_SYNTAX"], [261, 262, 9, "enum_NEXT_SYNTAX"], [263, 220, 10, "enum_LAST_LEXICAL_USE"], [262, 263, 9, "enum_NEXT_SYNTAX"], [263, 264, 9, "enum_NEXT_SYNTAX"], [264, 265, 9, "enum_NEXT_SYNTAX"], [265, 266, 9, "enum_NEXT_SYNTAX"], [266, 267, 9, "enum_NEXT_SYNTAX"], [267, 268, 9, "enum_NEXT_SYNTAX"], [268, 269, 9, "enum_NEXT_SYNTAX"], [269, 270, 9, "enum_NEXT_SYNTAX"], [270, 271, 9, "enum_NEXT_SYNTAX"], [271, 272, 9, "enum_NEXT_SYNTAX"], [273, 261, 10, "enum_LAST_LEXICAL_USE"], [272, 273, 9, "enum_NEXT_SYNTAX"], [273, 274, 9, "enum_NEXT_SYNTAX"], [275, 263, 10, "enum_LAST_LEXICAL_USE"], [274, 275, 9, "enum_NEXT_SYNTAX"], [275, 276, 9, "enum_NEXT_SYNTAX"], [276, 277, 9, "enum_NEXT_SYNTAX"], [277, 278, 9, "enum_NEXT_SYNTAX"], [278, 279, 9, "enum_NEXT_SYNTAX"], [279, 280, 9, "enum_NEXT_SYNTAX"], [280, 281, 9, "enum_NEXT_SYNTAX"], [281, 282, 9, "enum_NEXT_SYNTAX"], [282, 283, 9, "enum_NEXT_SYNTAX"], [283, 284, 9, "enum_NEXT_SYNTAX"], [284, 286, 9, "enum_NEXT_SYNTAX"], [286, 287, 9, "enum_NEXT_SYNTAX"], [287, 288, 9, "enum_NEXT_SYNTAX"], [289, 273, 10, "enum_LAST_LEXICAL_USE"], [288, 289, 9, "enum_NEXT_SYNTAX"], [289, 290, 9, "enum_NEXT_SYNTAX"], [291, 275, 10, "enum_LAST_LEXICAL_USE"], [290, 291, 9, "enum_NEXT_SYNTAX"], [291, 292, 9, "enum_NEXT_SYNTAX"], [292, 293, 9, "enum_NEXT_SYNTAX"], [293, 294, 9, "enum_NEXT_SYNTAX"], [294, 295, 9, "enum_NEXT_SYNTAX"], [295, 296, 9, "enum_NEXT_SYNTAX"], [296, 297, 9, "enum_NEXT_SYNTAX"], [297, 298, 9, "enum_NEXT_SYNTAX"], [299, 289, 10, "enum_LAST_LEXICAL_USE"], [298, 299, 9, "enum_NEXT_SYNTAX"], [299, 300, 9, "enum_NEXT_SYNTAX"], [301, 291, 10, "enum_LAST_LEXICAL_USE"], [300, 301, 9, "enum_NEXT_SYNTAX"], [301, 302, 9, "enum_NEXT_SYNTAX"], [302, 303, 9, "enum_NEXT_SYNTAX"], [303, 304, 9, "enum_NEXT_SYNTAX"], [304, 305, 9, "enum_NEXT_SYNTAX"], [305, 306, 9, "enum_NEXT_SYNTAX"], [307, 138, 10, "enum_LAST_LEXICAL_USE"], [306, 307, 9, "enum_NEXT_SYNTAX"], [307, 308, 9, "enum_NEXT_SYNTAX"], [308, 309, 9, "enum_NEXT_SYNTAX"], [309, 310, 9, "enum_NEXT_SYNTAX"], [310, 311, 9, "enum_NEXT_SYNTAX"], [311, 312, 9, "enum_NEXT_SYNTAX"], [313, 287, 10, "enum_LAST_LEXICAL_USE"], [312, 313, 9, "enum_NEXT_SYNTAX"], [313, 314, 9, "enum_NEXT_SYNTAX"], [314, 315, 9, "enum_NEXT_SYNTAX"], [315, 316, 9, "enum_NEXT_SYNTAX"], [316, 317, 9, "enum_NEXT_SYNTAX"], [318, 297, 10, "enum_LAST_LEXICAL_USE"], [317, 318, 9, "enum_NEXT_SYNTAX"], [318, 319, 9, "enum_NEXT_SYNTAX"], [319, 320, 9, "enum_NEXT_SYNTAX"], [320, 322, 9, "enum_NEXT_SYNTAX"], [323, 240, 10, "enum_LAST_LEXICAL_USE"], [322, 323, 9, "enum_NEXT_SYNTAX"], [323, 324, 9, "enum_NEXT_SYNTAX"], [324, 325, 9, "enum_NEXT_SYNTAX"], [325, 326, 9, "enum_NEXT_SYNTAX"], [326, 327, 9, "enum_NEXT_SYNTAX"], [328, 307, 10, "enum_LAST_LEXICAL_USE"], [327, 328, 9, "enum_NEXT_SYNTAX"], [328, 329, 9, "enum_NEXT_SYNTAX"], [330, 323, 10, "enum_LAST_LEXICAL_USE"], [329, 330, 9, "enum_NEXT_SYNTAX"], [330, 331, 9, "enum_NEXT_SYNTAX"], [331, 332, 9, "enum_NEXT_SYNTAX"], [332, 333, 9, "enum_NEXT_SYNTAX"], [333, 334, 9, "enum_NEXT_SYNTAX"], [335, 233, 10, "enum_LAST_LEXICAL_USE"], [334, 335, 9, "enum_NEXT_SYNTAX"], [335, 336, 9, "enum_NEXT_SYNTAX"], [336, 337, 9, "enum_NEXT_SYNTAX"], [337, 338, 9, "enum_NEXT_SYNTAX"], [338, 339, 9, "enum_NEXT_SYNTAX"], [339, 340, 9, "enum_NEXT_SYNTAX"], [340, 341, 9, "enum_NEXT_SYNTAX"], [341, 342, 9, "enum_NEXT_SYNTAX"], [342, 343, 9, "enum_NEXT_SYNTAX"], [343, 344, 9, "enum_NEXT_SYNTAX"], [344, 345, 9, "enum_NEXT_SYNTAX"], [345, 346, 9, "enum_NEXT_SYNTAX"], [347, 174, 10, "enum_LAST_LEXICAL_USE"], [346, 347, 9, "enum_NEXT_SYNTAX"], [347, 348, 9, "enum_NEXT_SYNTAX"], [349, 197, 10, "enum_LAST_LEXICAL_USE"], [348, 349, 9, "enum_NEXT_SYNTAX"], [349, 350, 9, "enum_NEXT_SYNTAX"], [351, 6, 10, "enum_LAST_LEXICAL_USE"], [350, 351, 9, "enum_NEXT_SYNTAX"], [351, 352, 9, "enum_NEXT_SYNTAX"], [352, 354, 9, "enum_NEXT_SYNTAX"], [354, 355, 9, "enum_NEXT_SYNTAX"], [356, 338, 10, "enum_LAST_LEXICAL_USE"], [355, 356, 9, "enum_NEXT_SYNTAX"], [356, 357, 9, "enum_NEXT_SYNTAX"], [357, 358, 9, "enum_NEXT_SYNTAX"], [358, 359, 9, "enum_NEXT_SYNTAX"], [359, 360, 9, "enum_NEXT_SYNTAX"], [360, 362, 9, "enum_NEXT_SYNTAX"], [363, 101, 10, "enum_LAST_LEXICAL_USE"], [362, 363, 9, "enum_NEXT_SYNTAX"], [363, 364, 9, "enum_NEXT_SYNTAX"], [365, 349, 10, "enum_LAST_LEXICAL_USE"], [364, 365, 9, "enum_NEXT_SYNTAX"], [365, 366, 9, "enum_NEXT_SYNTAX"], [366, 367, 9, "enum_NEXT_SYNTAX"], [367, 368, 9, "enum_NEXT_SYNTAX"], [368, 370, 9, "enum_NEXT_SYNTAX"], [370, 372, 9, "enum_NEXT_SYNTAX"], [373, 330, 10, "enum_LAST_LEXICAL_USE"], [372, 373, 9, "enum_NEXT_SYNTAX"], [373, 374, 9, "enum_NEXT_SYNTAX"], [374, 375, 9, "enum_NEXT_SYNTAX"], [375, 376, 9, "enum_NEXT_SYNTAX"], [376, 377, 9, "enum_NEXT_SYNTAX"], [377, 378, 9, "enum_NEXT_SYNTAX"], [378, 379, 9, "enum_NEXT_SYNTAX"], [380, 340, 10, "enum_LAST_LEXICAL_USE"], [379, 380, 9, "enum_NEXT_SYNTAX"], [380, 381, 9, "enum_NEXT_SYNTAX"], [381, 383, 9, "enum_NEXT_SYNTAX"], [383, 384, 9, "enum_NEXT_SYNTAX"], [385, 43, 10, "enum_LAST_LEXICAL_USE"], [384, 385, 9, "enum_NEXT_SYNTAX"], [385, 386, 9, "enum_NEXT_SYNTAX"], [387, 373, 10, "enum_LAST_LEXICAL_USE"], [386, 387, 9, "enum_NEXT_SYNTAX"], [387, 388, 9, "enum_NEXT_SYNTAX"], [388, 389, 9, "enum_NEXT_SYNTAX"], [389, 390, 9, "enum_NEXT_SYNTAX"], [390, 391, 9, "enum_NEXT_SYNTAX"], [391, 392, 9, "enum_NEXT_SYNTAX"], [392, 393, 9, "enum_NEXT_SYNTAX"], [393, 394, 9, "enum_NEXT_SYNTAX"], [394, 395, 9, "enum_NEXT_SYNTAX"], [395, 397, 9, "enum_NEXT_SYNTAX"], [398, 387, 10, "enum_LAST_LEXICAL_USE"], [397, 398, 9, "enum_NEXT_SYNTAX"], [398, 399, 9, "enum_NEXT_SYNTAX"], [399, 400, 9, "enum_NEXT_SYNTAX"], [400, 401, 9, "enum_NEXT_SYNTAX"], [401, 402, 9, "enum_NEXT_SYNTAX"], [402, 403, 9, "enum_NEXT_SYNTAX"], [403, 404, 9, "enum_NEXT_SYNTAX"], [405, 398, 10, "enum_LAST_LEXICAL_USE"], [404, 405, 9, "enum_NEXT_SYNTAX"], [405, 406, 9, "enum_NEXT_SYNTAX"], [406, 407, 9, "enum_NEXT_SYNTAX"], [407, 408, 9, "enum_NEXT_SYNTAX"], [408, 409, 9, "enum_NEXT_SYNTAX"], [409, 412, 9, "enum_NEXT_SYNTAX"], [412, 413, 9, "enum_NEXT_SYNTAX"], [414, 405, 10, "enum_LAST_LEXICAL_USE"], [413, 414, 9, "enum_NEXT_SYNTAX"], [414, 415, 9, "enum_NEXT_SYNTAX"], [415, 416, 9, "enum_NEXT_SYNTAX"], [416, 417, 9, "enum_NEXT_SYNTAX"], [417, 418, 9, "enum_NEXT_SYNTAX"], [418, 419, 9, "enum_NEXT_SYNTAX"], [419, 420, 9, "enum_NEXT_SYNTAX"], [420, 421, 9, "enum_NEXT_SYNTAX"], [421, 423, 9, "enum_NEXT_SYNTAX"], [424, 414, 10, "enum_LAST_LEXICAL_USE"], [423, 424, 9, "enum_NEXT_SYNTAX"], [424, 425, 9, "enum_NEXT_SYNTAX"], [425, 426, 9, "enum_NEXT_SYNTAX"], [426, 427, 9, "enum_NEXT_SYNTAX"], [427, 428, 9, "enum_NEXT_SYNTAX"], [428, 429, 9, "enum_NEXT_SYNTAX"], [429, 430, 9, "enum_NEXT_SYNTAX"], [430, 431, 9, "enum_NEXT_SYNTAX"], [431, 432, 9, "enum_NEXT_SYNTAX"], [432, 433, 9, "enum_NEXT_SYNTAX"], [434, 380, 10, "enum_LAST_LEXICAL_USE"], [433, 434, 9, "enum_NEXT_SYNTAX"], [434, 435, 9, "enum_NEXT_SYNTAX"], [435, 436, 9, "enum_NEXT_SYNTAX"], [436, 437, 9, "enum_NEXT_SYNTAX"], [438, 424, 10, "enum_LAST_LEXICAL_USE"], [437, 438, 9, "enum_NEXT_SYNTAX"], [438, 439, 9, "enum_NEXT_SYNTAX"], [439, 440, 9, "enum_NEXT_SYNTAX"], [440, 441, 9, "enum_NEXT_SYNTAX"], [441, 442, 9, "enum_NEXT_SYNTAX"], [442, 443, 9, "enum_NEXT_SYNTAX"], [443, 444, 9, "enum_NEXT_SYNTAX"], [444, 445, 9, "enum_NEXT_SYNTAX"], [445, 446, 9, "enum_NEXT_SYNTAX"], [446, 447, 9, "enum_NEXT_SYNTAX"], [448, 342, 10, "enum_LAST_LEXICAL_USE"], [447, 448, 9, "enum_NEXT_SYNTAX"], [448, 449, 9, "enum_NEXT_SYNTAX"], [449, 450, 9, "enum_NEXT_SYNTAX"], [450, 453, 9, "enum_NEXT_SYNTAX"], [453, 454, 9, "enum_NEXT_SYNTAX"], [454, 456, 9, "enum_NEXT_SYNTAX"], [457, 438, 10, "enum_LAST_LEXICAL_USE"], [456, 457, 9, "enum_NEXT_SYNTAX"], [457, 458, 9, "enum_NEXT_SYNTAX"], [458, 459, 9, "enum_NEXT_SYNTAX"], [459, 460, 9, "enum_NEXT_SYNTAX"], [460, 461, 9, "enum_NEXT_SYNTAX"], [461, 462, 9, "enum_NEXT_SYNTAX"], [462, 463, 9, "enum_NEXT_SYNTAX"], [463, 464, 9, "enum_NEXT_SYNTAX"], [464, 465, 9, "enum_NEXT_SYNTAX"], [465, 466, 9, "enum_NEXT_SYNTAX"], [466, 467, 9, "enum_NEXT_SYNTAX"], [468, 434, 10, "enum_LAST_LEXICAL_USE"], [467, 468, 9, "enum_NEXT_SYNTAX"], [468, 469, 9, "enum_NEXT_SYNTAX"], [470, 448, 10, "enum_LAST_LEXICAL_USE"], [469, 470, 9, "enum_NEXT_SYNTAX"], [470, 471, 9, "enum_NEXT_SYNTAX"], [471, 472, 9, "enum_NEXT_SYNTAX"], [472, 473, 9, "enum_NEXT_SYNTAX"], [473, 476, 9, "enum_NEXT_SYNTAX"], [476, 477, 9, "enum_NEXT_SYNTAX"], [478, 351, 10, "enum_LAST_LEXICAL_USE"], [477, 478, 9, "enum_NEXT_SYNTAX"], [478, 479, 9, "enum_NEXT_SYNTAX"], [479, 480, 9, "enum_NEXT_SYNTAX"], [480, 481, 9, "enum_NEXT_SYNTAX"], [481, 482, 9, "enum_NEXT_SYNTAX"], [482, 483, 9, "enum_NEXT_SYNTAX"], [483, 484, 9, "enum_NEXT_SYNTAX"], [484, 485, 9, "enum_NEXT_SYNTAX"], [485, 487, 9, "enum_NEXT_SYNTAX"], [488, 457, 10, "enum_LAST_LEXICAL_USE"], [487, 488, 9, "enum_NEXT_SYNTAX"], [488, 489, 9, "enum_NEXT_SYNTAX"], [489, 490, 9, "enum_NEXT_SYNTAX"], [490, 491, 9, "enum_NEXT_SYNTAX"], [491, 492, 9, "enum_NEXT_SYNTAX"], [492, 493, 9, "enum_NEXT_SYNTAX"], [493, 494, 9, "enum_NEXT_SYNTAX"], [494, 495, 9, "enum_NEXT_SYNTAX"], [495, 496, 9, "enum_NEXT_SYNTAX"], [496, 497, 9, "enum_NEXT_SYNTAX"], [498, 478, 10, "enum_LAST_LEXICAL_USE"], [497, 498, 9, "enum_NEXT_SYNTAX"], [498, 499, 9, "enum_NEXT_SYNTAX"], [499, 500, 9, "enum_NEXT_SYNTAX"], [500, 501, 9, "enum_NEXT_SYNTAX"], [501, 502, 9, "enum_NEXT_SYNTAX"], [502, 503, 9, "enum_NEXT_SYNTAX"], [503, 506, 9, "enum_NEXT_SYNTAX"], [506, 507, 9, "enum_NEXT_SYNTAX"], [507, 509, 9, "enum_NEXT_SYNTAX"], [510, 488, 10, "enum_LAST_LEXICAL_USE"], [509, 510, 9, "enum_NEXT_SYNTAX"], [510, 511, 9, "enum_NEXT_SYNTAX"], [511, 512, 9, "enum_NEXT_SYNTAX"], [512, 513, 9, "enum_NEXT_SYNTAX"], [513, 514, 9, "enum_NEXT_SYNTAX"], [514, 515, 9, "enum_NEXT_SYNTAX"], [515, 516, 9, "enum_NEXT_SYNTAX"], [516, 517, 9, "enum_NEXT_SYNTAX"], [517, 518, 9, "enum_NEXT_SYNTAX"], [518, 520, 9, "enum_NEXT_SYNTAX"], [521, 23, 10, "enum_LAST_LEXICAL_USE"], [520, 521, 9, "enum_NEXT_SYNTAX"], [521, 522, 9, "enum_NEXT_SYNTAX"], [522, 523, 9, "enum_NEXT_SYNTAX"], [523, 524, 9, "enum_NEXT_SYNTAX"], [525, 510, 10, "enum_LAST_LEXICAL_USE"], [524, 525, 9, "enum_NEXT_SYNTAX"], [525, 526, 9, "enum_NEXT_SYNTAX"], [526, 527, 9, "enum_NEXT_SYNTAX"], [528, 121, 10, "enum_LAST_LEXICAL_USE"], [527, 528, 9, "enum_NEXT_SYNTAX"], [528, 529, 9, "enum_NEXT_SYNTAX"], [529, 530, 9, "enum_NEXT_SYNTAX"], [530, 531, 9, "enum_NEXT_SYNTAX"], [532, 347, 10, "enum_LAST_LEXICAL_USE"], [531, 532, 9, "enum_NEXT_SYNTAX"], [532, 533, 9, "enum_NEXT_SYNTAX"], [533, 536, 9, "enum_NEXT_SYNTAX"], [536, 537, 9, "enum_NEXT_SYNTAX"], [537, 540, 9, "enum_NEXT_SYNTAX"], [540, 541, 9, "enum_NEXT_SYNTAX"], [541, 542, 9, "enum_NEXT_SYNTAX"], [543, 521, 10, "enum_LAST_LEXICAL_USE"], [542, 543, 9, "enum_NEXT_SYNTAX"], [543, 544, 9, "enum_NEXT_SYNTAX"], [544, 547, 9, "enum_NEXT_SYNTAX"], [547, 548, 9, "enum_NEXT_SYNTAX"], [549, 541, 10, "enum_LAST_LEXICAL_USE"], [548, 549, 9, "enum_NEXT_SYNTAX"], [549, 550, 9, "enum_NEXT_SYNTAX"], [550, 551, 9, "enum_NEXT_SYNTAX"], [551, 552, 9, "enum_NEXT_SYNTAX"], [552, 553, 9, "enum_NEXT_SYNTAX"], [554, 532, 10, "enum_LAST_LEXICAL_USE"], [553, 554, 9, "enum_NEXT_SYNTAX"], [554, 555, 9, "enum_NEXT_SYNTAX"], [555, 556, 9, "enum_NEXT_SYNTAX"], [556, 558, 9, "enum_NEXT_SYNTAX"], [559, 328, 10, "enum_LAST_LEXICAL_USE"], [558, 559, 9, "enum_NEXT_SYNTAX"], [559, 560, 9, "enum_NEXT_SYNTAX"], [561, 549, 10, "enum_LAST_LEXICAL_USE"], [560, 561, 9, "enum_NEXT_SYNTAX"], [561, 562, 9, "enum_NEXT_SYNTAX"], [562, 563, 9, "enum_NEXT_SYNTAX"], [563, 564, 9, "enum_NEXT_SYNTAX"], [564, 565, 9, "enum_NEXT_SYNTAX"], [566, 335, 10, "enum_LAST_LEXICAL_USE"], [565, 566, 9, "enum_NEXT_SYNTAX"], [566, 567, 9, "enum_NEXT_SYNTAX"], [568, 561, 10, "enum_LAST_LEXICAL_USE"], [567, 568, 9, "enum_NEXT_SYNTAX"], [568, 569, 9, "enum_NEXT_SYNTAX"], [569, 570, 9, "enum_NEXT_SYNTAX"], [570, 571, 9, "enum_NEXT_SYNTAX"], [571, 573, 9, "enum_NEXT_SYNTAX"], [573, 574, 9, "enum_NEXT_SYNTAX"], [575, 299, 10, "enum_LAST_LEXICAL_USE"], [574, 575, 9, "enum_NEXT_SYNTAX"], [575, 576, 9, "enum_NEXT_SYNTAX"], [577, 301, 10, "enum_LAST_LEXICAL_USE"], [576, 577, 9, "enum_NEXT_SYNTAX"], [577, 578, 9, "enum_NEXT_SYNTAX"], [578, 579, 9, "enum_NEXT_SYNTAX"], [579, 580, 9, "enum_NEXT_SYNTAX"], [580, 581, 9, "enum_NEXT_SYNTAX"], [581, 582, 9, "enum_NEXT_SYNTAX"], [582, 583, 9, "enum_NEXT_SYNTAX"], [583, 584, 9, "enum_NEXT_SYNTAX"], [584, 585, 9, "enum_NEXT_SYNTAX"], [585, 587, 9, "enum_NEXT_SYNTAX"], [588, 251, 10, "enum_LAST_LEXICAL_USE"], [587, 588, 9, "enum_NEXT_SYNTAX"], [588, 589, 9, "enum_NEXT_SYNTAX"], [590, 216, 10, "enum_LAST_LEXICAL_USE"], [589, 590, 9, "enum_NEXT_SYNTAX"], [590, 591, 9, "enum_NEXT_SYNTAX"], [592, 575, 10, "enum_LAST_LEXICAL_USE"], [591, 592, 9, "enum_NEXT_SYNTAX"], [592, 593, 9, "enum_NEXT_SYNTAX"], [594, 577, 10, "enum_LAST_LEXICAL_USE"], [593, 594, 9, "enum_NEXT_SYNTAX"], [594, 595, 9, "enum_NEXT_SYNTAX"], [595, 596, 9, "enum_NEXT_SYNTAX"], [596, 598, 9, "enum_NEXT_SYNTAX"], [598, 599, 9, "enum_NEXT_SYNTAX"], [599, 600, 9, "enum_NEXT_SYNTAX"], [601, 588, 10, "enum_LAST_LEXICAL_USE"], [600, 601, 9, "enum_NEXT_SYNTAX"], [601, 602, 9, "enum_NEXT_SYNTAX"], [602, 603, 9, "enum_NEXT_SYNTAX"], [603, 604, 9, "enum_NEXT_SYNTAX"], [604, 605, 9, "enum_NEXT_SYNTAX"], [605, 606, 9, "enum_NEXT_SYNTAX"], [607, 568, 10, "enum_LAST_LEXICAL_USE"], [606, 607, 9, "enum_NEXT_SYNTAX"], [607, 608, 9, "enum_NEXT_SYNTAX"], [608, 609, 9, "enum_NEXT_SYNTAX"], [609, 610, 9, "enum_NEXT_SYNTAX"], [610, 611, 9, "enum_NEXT_SYNTAX"], [611, 612, 9, "enum_NEXT_SYNTAX"], [612, 613, 9, "enum_NEXT_SYNTAX"], [614, 601, 10, "enum_LAST_LEXICAL_USE"], [613, 614, 9, "enum_NEXT_SYNTAX"], [614, 615, 9, "enum_NEXT_SYNTAX"], [615, 616, 9, "enum_NEXT_SYNTAX"], [616, 617, 9, "enum_NEXT_SYNTAX"], [617, 618, 9, "enum_NEXT_SYNTAX"], [618, 619, 9, "enum_NEXT_SYNTAX"], [619, 620, 9, "enum_NEXT_SYNTAX"], [620, 621, 9, "enum_NEXT_SYNTAX"], [621, 622, 9, "enum_NEXT_SYNTAX"], [622, 623, 9, "enum_NEXT_SYNTAX"], [623, 625, 9, "enum_NEXT_SYNTAX"], [626, 566, 10, "enum_LAST_LEXICAL_USE"], [625, 626, 9, "enum_NEXT_SYNTAX"], [626, 627, 9, "enum_NEXT_SYNTAX"], [627, 628, 9, "enum_NEXT_SYNTAX"], [628, 629, 9, "enum_NEXT_SYNTAX"], [630, 614, 10, "enum_LAST_LEXICAL_USE"], [629, 630, 9, "enum_NEXT_SYNTAX"], [630, 631, 9, "enum_NEXT_SYNTAX"], [631, 632, 9, "enum_NEXT_SYNTAX"], [633, 607, 10, "enum_LAST_LEXICAL_USE"], [632, 633, 9, "enum_NEXT_SYNTAX"], [633, 634, 9, "enum_NEXT_SYNTAX"], [634, 635, 9, "enum_NEXT_SYNTAX"], [635, 636, 9, "enum_NEXT_SYNTAX"], [636, 637, 9, "enum_NEXT_SYNTAX"], [638, 626, 10, "enum_LAST_LEXICAL_USE"], [637, 638, 9, "enum_NEXT_SYNTAX"], [638, 639, 9, "enum_NEXT_SYNTAX"], [640, 633, 10, "enum_LAST_LEXICAL_USE"], [639, 640, 9, "enum_NEXT_SYNTAX"], [640, 641, 9, "enum_NEXT_SYNTAX"], [641, 642, 9, "enum_NEXT_SYNTAX"], [642, 643, 9, "enum_NEXT_SYNTAX"], [643, 644, 9, "enum_NEXT_SYNTAX"], [645, 630, 10, "enum_LAST_LEXICAL_USE"], [644, 645, 9, "enum_NEXT_SYNTAX"], [645, 646, 9, "enum_NEXT_SYNTAX"], [646, 647, 9, "enum_NEXT_SYNTAX"], [647, 648, 9, "enum_NEXT_SYNTAX"], [648, 649, 9, "enum_NEXT_SYNTAX"], [649, 650, 9, "enum_NEXT_SYNTAX"], [651, 645, 10, "enum_LAST_LEXICAL_USE"], [650, 651, 9, "enum_NEXT_SYNTAX"], [651, 652, 9, "enum_NEXT_SYNTAX"], [652, 653, 9, "enum_NEXT_SYNTAX"], [653, 654, 9, "enum_NEXT_SYNTAX"], [654, 658, 9, "enum_NEXT_SYNTAX"], [658, 659, 9, "enum_NEXT_SYNTAX"], [659, 660, 9, "enum_NEXT_SYNTAX"], [661, 592, 10, "enum_LAST_LEXICAL_USE"], [660, 661, 9, "enum_NEXT_SYNTAX"], [661, 662, 9, "enum_NEXT_SYNTAX"], [663, 594, 10, "enum_LAST_LEXICAL_USE"], [662, 663, 9, "enum_NEXT_SYNTAX"], [663, 664, 9, "enum_NEXT_SYNTAX"], [664, 665, 9, "enum_NEXT_SYNTAX"], [665, 666, 9, "enum_NEXT_SYNTAX"], [666, 667, 9, "enum_NEXT_SYNTAX"], [667, 668, 9, "enum_NEXT_SYNTAX"], [668, 669, 9, "enum_NEXT_SYNTAX"], [669, 670, 9, "enum_NEXT_SYNTAX"], [670, 671, 9, "enum_NEXT_SYNTAX"], [671, 672, 9, "enum_NEXT_SYNTAX"], [673, 661, 10, "enum_LAST_LEXICAL_USE"], [672, 673, 9, "enum_NEXT_SYNTAX"], [673, 674, 9, "enum_NEXT_SYNTAX"], [675, 663, 10, "enum_LAST_LEXICAL_USE"], [674, 675, 9, "enum_NEXT_SYNTAX"], [675, 676, 9, "enum_NEXT_SYNTAX"], [676, 677, 9, "enum_NEXT_SYNTAX"], [677, 678, 9, "enum_NEXT_SYNTAX"], [678, 679, 9, "enum_NEXT_SYNTAX"], [679, 680, 9, "enum_NEXT_SYNTAX"], [680, 681, 9, "enum_NEXT_SYNTAX"], [681, 682, 9, "enum_NEXT_SYNTAX"], [682, 683, 9, "enum_NEXT_SYNTAX"], [683, 684, 9, "enum_NEXT_SYNTAX"], [684, 686, 9, "enum_NEXT_SYNTAX"], [687, 313, 10, "enum_LAST_LEXICAL_USE"], [686, 687, 9, "enum_NEXT_SYNTAX"], [687, 688, 9, "enum_NEXT_SYNTAX"], [689, 673, 10, "enum_LAST_LEXICAL_USE"], [688, 689, 9, "enum_NEXT_SYNTAX"], [689, 690, 9, "enum_NEXT_SYNTAX"], [691, 675, 10, "enum_LAST_LEXICAL_USE"], [690, 691, 9, "enum_NEXT_SYNTAX"], [691, 692, 9, "enum_NEXT_SYNTAX"], [692, 693, 9, "enum_NEXT_SYNTAX"], [693, 694, 9, "enum_NEXT_SYNTAX"], [694, 695, 9, "enum_NEXT_SYNTAX"], [695, 696, 9, "enum_NEXT_SYNTAX"], [697, 318, 10, "enum_LAST_LEXICAL_USE"], [696, 697, 9, "enum_NEXT_SYNTAX"], [697, 698, 9, "enum_NEXT_SYNTAX"], [699, 689, 10, "enum_LAST_LEXICAL_USE"], [698, 699, 9, "enum_NEXT_SYNTAX"], [699, 700, 9, "enum_NEXT_SYNTAX"], [701, 691, 10, "enum_LAST_LEXICAL_USE"], [700, 701, 9, "enum_NEXT_SYNTAX"], [701, 702, 9, "enum_NEXT_SYNTAX"], [702, 703, 9, "enum_NEXT_SYNTAX"], [703, 704, 9, "enum_NEXT_SYNTAX"], [704, 705, 9, "enum_NEXT_SYNTAX"], [705, 706, 9, "enum_NEXT_SYNTAX"], [707, 559, 10, "enum_LAST_LEXICAL_USE"], [706, 707, 9, "enum_NEXT_SYNTAX"], [707, 708, 9, "enum_NEXT_SYNTAX"], [708, 709, 9, "enum_NEXT_SYNTAX"], [709, 710, 9, "enum_NEXT_SYNTAX"], [710, 711, 9, "enum_NEXT_SYNTAX"], [711, 712, 9, "enum_NEXT_SYNTAX"], [713, 687, 10, "enum_LAST_LEXICAL_USE"], [712, 713, 9, "enum_NEXT_SYNTAX"], [713, 714, 9, "enum_NEXT_SYNTAX"], [714, 715, 9, "enum_NEXT_SYNTAX"], [715, 716, 9, "enum_NEXT_SYNTAX"], [716, 717, 9, "enum_NEXT_SYNTAX"], [718, 697, 10, "enum_LAST_LEXICAL_USE"], [717, 718, 9, "enum_NEXT_SYNTAX"], [718, 719, 9, "enum_NEXT_SYNTAX"], [719, 720, 9, "enum_NEXT_SYNTAX"], [720, 721, 9, "enum_NEXT_SYNTAX"], [722, 640, 10, "enum_LAST_LEXICAL_USE"], [721, 722, 9, "enum_NEXT_SYNTAX"], [722, 723, 9, "enum_NEXT_SYNTAX"], [723, 724, 9, "enum_NEXT_SYNTAX"], [724, 725, 9, "enum_NEXT_SYNTAX"], [725, 726, 9, "enum_NEXT_SYNTAX"], [727, 707, 10, "enum_LAST_LEXICAL_USE"], [726, 727, 9, "enum_NEXT_SYNTAX"], [727, 734, 9, "enum_NEXT_SYNTAX"], [735, 722, 10, "enum_LAST_LEXICAL_USE"], [734, 735, 9, "enum_NEXT_SYNTAX"], [735, 736, 9, "enum_NEXT_SYNTAX"], [737, 543, 10, "enum_LAST_LEXICAL_USE"], [736, 737, 9, "enum_NEXT_SYNTAX"], [737, 738, 9, "enum_NEXT_SYNTAX"], [738, 740, 9, "enum_NEXT_SYNTAX"], [741, 735, 10, "enum_LAST_LEXICAL_USE"], [740, 741, 9, "enum_NEXT_SYNTAX"], [741, 742, 9, "enum_NEXT_SYNTAX"], [742, 743, 9, "enum_NEXT_SYNTAX"], [743, 744, 9, "enum_NEXT_SYNTAX"], [744, 745, 9, "enum_NEXT_SYNTAX"], [745, 746, 9, "enum_NEXT_SYNTAX"], [746, 747, 9, "enum_NEXT_SYNTAX"], [747, 748, 9, "enum_NEXT_SYNTAX"], [748, 749, 9, "enum_NEXT_SYNTAX"], [750, 741, 10, "enum_LAST_LEXICAL_USE"], [749, 750, 9, "enum_NEXT_SYNTAX"], [750, 751, 9, "enum_NEXT_SYNTAX"], [751, 752, 9, "enum_NEXT_SYNTAX"], [752, 753, 9, "enum_NEXT_SYNTAX"], [753, 754, 9, "enum_NEXT_SYNTAX"], [754, 755, 9, "enum_NEXT_SYNTAX"], [755, 756, 9, "enum_NEXT_SYNTAX"], [756, 757, 9, "enum_NEXT_SYNTAX"], [757, 760, 9, "enum_NEXT_SYNTAX"], [761, 737, 10, "enum_LAST_LEXICAL_USE"], [760, 761, 9, "enum_NEXT_SYNTAX"], [3, 10, 1, "enum_CFG_NEXT"], [10, 17, 1, "enum_CFG_NEXT"], [17, 22, 1, "enum_CFG_NEXT"], [22, 27, 1, "enum_CFG_NEXT"], [27, 32, 1, "enum_CFG_NEXT"], [32, 42, 1, "enum_CFG_NEXT"], [42, 39, 1, "enum_CFG_NEXT"], [39, 737, 1, "enum_CFG_NEXT"], [39, 60, 1, "enum_CFG_NEXT"], [60, 39, 1, "enum_CFG_NEXT"], [60, 68, 1, "enum_CFG_NEXT"], [68, 78, 1, "enum_CFG_NEXT"], [78, 88, 1, "enum_CFG_NEXT"], [88, 107, 1, "enum_CFG_NEXT"], [107, 39, 1, "enum_CFG_NEXT"], [107, 123, 1, "enum_CFG_NEXT"], [123, 132, 1, "enum_CFG_NEXT"], [123, 543, 1, "enum_CFG_NEXT"], [132, 137, 1, "enum_CFG_NEXT"], [137, 142, 1, "enum_CFG_NEXT"], [142, 147, 1, "enum_CFG_NEXT"], [147, 154, 1, "enum_CFG_NEXT"], [154, 161, 1, "enum_CFG_NEXT"], [161, 168, 1, "enum_CFG_NEXT"], [168, 175, 1, "enum_CFG_NEXT"], [175, 183, 1, "enum_CFG_NEXT"], [183, 191, 1, "enum_CFG_NEXT"], [191, 208, 1, "enum_CFG_NEXT"], [208, 271, 1, "enum_CFG_NEXT"], [208, 213, 1, "enum_CFG_NEXT"], [213, 227, 1, "enum_CFG_NEXT"], [227, 271, 1, "enum_CFG_NEXT"], [227, 232, 1, "enum_CFG_NEXT"], [232, 239, 1, "enum_CFG_NEXT"], [239, 271, 1, "enum_CFG_NEXT"], [271, 322, 1, "enum_CFG_NEXT"], [271, 286, 1, "enum_CFG_NEXT"], [286, 296, 1, "enum_CFG_NEXT"], [296, 306, 1, "enum_CFG_NEXT"], [306, 322, 1, "enum_CFG_NEXT"], [322, 329, 1, "enum_CFG_NEXT"], [329, 336, 1, "enum_CFG_NEXT"], [336, 357, 1, "enum_CFG_NEXT"], [357, 372, 1, "enum_CFG_NEXT"], [357, 362, 1, "enum_CFG_NEXT"], [362, 39, 1, "enum_CFG_NEXT"], [372, 392, 1, "enum_CFG_NEXT"], [392, 397, 1, "enum_CFG_NEXT"], [392, 418, 1, "enum_CFG_NEXT"], [397, 418, 1, "enum_CFG_NEXT"], [418, 456, 1, "enum_CFG_NEXT"], [418, 423, 1, "enum_CFG_NEXT"], [423, 437, 1, "enum_CFG_NEXT"], [437, 482, 1, "enum_CFG_NEXT"], [456, 482, 1, "enum_CFG_NEXT"], [482, 487, 1, "enum_CFG_NEXT"], [482, 509, 1, "enum_CFG_NEXT"], [487, 520, 1, "enum_CFG_NEXT"], [509, 520, 1, "enum_CFG_NEXT"], [520, 527, 1, "enum_CFG_NEXT"], [527, 39, 1, "enum_CFG_NEXT"], [543, 541, 1, "enum_CFG_NEXT"], [541, 39, 1, "enum_CFG_NEXT"], [541, 553, 1, "enum_CFG_NEXT"], [553, 558, 1, "enum_CFG_NEXT"], [553, 541, 1, "enum_CFG_NEXT"], [558, 565, 1, "enum_CFG_NEXT"], [565, 582, 1, "enum_CFG_NEXT"], [582, 671, 1, "enum_CFG_NEXT"], [582, 587, 1, "enum_CFG_NEXT"], [587, 605, 1, "enum_CFG_NEXT"], [605, 671, 1, "enum_CFG_NEXT"], [605, 625, 1, "enum_CFG_NEXT"], [625, 632, 1, "enum_CFG_NEXT"], [632, 639, 1, "enum_CFG_NEXT"], [639, 671, 1, "enum_CFG_NEXT"], [671, 541, 1, "enum_CFG_NEXT"], [671, 686, 1, "enum_CFG_NEXT"], [686, 696, 1, "enum_CFG_NEXT"], [696, 706, 1, "enum_CFG_NEXT"], [706, 721, 1, "enum_CFG_NEXT"], [721, 541, 1, "enum_CFG_NEXT"], [737, 735, 1, "enum_CFG_NEXT"], [735, 740, 1, "enum_CFG_NEXT"], [735, 760, 1, "enum_CFG_NEXT"], [740, 749, 1, "enum_CFG_NEXT"], [749, 735, 1, "enum_CFG_NEXT"], [45, 4, 3, "enum_LAST_WRITE"], [39, 675, 2, "enum_LAST_READ"], [39, 301, 2, "enum_LAST_READ"], [39, 93, 2, "enum_LAST_READ"], [39, 701, 2, "enum_LAST_READ"], [39, 55, 2, "enum_LAST_READ"], [39, 275, 2, "enum_LAST_READ"], [39, 39, 3, "enum_LAST_WRITE"], [53, 299, 2, "enum_LAST_READ"], [53, 699, 2, "enum_LAST_READ"], [53, 673, 2, "enum_LAST_READ"], [53, 273, 2, "enum_LAST_READ"], [53, 53, 2, "enum_LAST_READ"], [53, 45, 2, "enum_LAST_READ"], [53, 91, 2, "enum_LAST_READ"], [53, 4, 3, "enum_LAST_WRITE"], [55, 675, 2, "enum_LAST_READ"], [55, 93, 2, "enum_LAST_READ"], [55, 301, 2, "enum_LAST_READ"], [55, 701, 2, "enum_LAST_READ"], [55, 55, 2, "enum_LAST_READ"], [55, 275, 2, "enum_LAST_READ"], [55, 39, 3, "enum_LAST_WRITE"], [71, 53, 2, "enum_LAST_READ"], [71, 4, 3, "enum_LAST_WRITE"], [73, 55, 2, "enum_LAST_READ"], [73, 39, 3, "enum_LAST_WRITE"], [69, 119, 2, "enum_LAST_READ"], [69, 347, 2, "enum_LAST_READ"], [69, 532, 2, "enum_LAST_READ"], [69, 554, 2, "enum_LAST_READ"], [69, 69, 3, "enum_LAST_WRITE"], [81, 71, 2, "enum_LAST_READ"], [81, 4, 3, "enum_LAST_WRITE"], [83, 73, 2, "enum_LAST_READ"], [83, 39, 3, "enum_LAST_WRITE"], [79, 105, 2, "enum_LAST_READ"], [79, 365, 2, "enum_LAST_READ"], [79, 349, 2, "enum_LAST_READ"], [79, 79, 3, "enum_LAST_WRITE"], [91, 81, 2, "enum_LAST_READ"], [91, 4, 3, "enum_LAST_WRITE"], [93, 83, 2, "enum_LAST_READ"], [93, 39, 3, "enum_LAST_WRITE"], [89, 125, 2, "enum_LAST_READ"], [89, 89, 3, "enum_LAST_WRITE"], [101, 363, 2, "enum_LAST_READ"], [101, 101, 2, "enum_LAST_READ"], [101, 33, 3, "enum_LAST_WRITE"], [105, 105, 2, "enum_LAST_READ"], [105, 365, 2, "enum_LAST_READ"], [105, 349, 2, "enum_LAST_READ"], [105, 79, 3, "enum_LAST_WRITE"], [119, 119, 2, "enum_LAST_READ"], [119, 347, 2, "enum_LAST_READ"], [119, 532, 2, "enum_LAST_READ"], [119, 554, 2, "enum_LAST_READ"], [119, 69, 3, "enum_LAST_WRITE"], [121, 528, 2, "enum_LAST_READ"], [121, 121, 2, "enum_LAST_READ"], [121, 18, 3, "enum_LAST_WRITE"], [125, 125, 2, "enum_LAST_READ"], [125, 89, 3, "enum_LAST_WRITE"], [133, 335, 2, "enum_LAST_READ"], [133, 638, 2, "enum_LAST_READ"], [133, 133, 3, "enum_LAST_WRITE"], [133, 566, 3, "enum_LAST_WRITE"], [138, 328, 2, "enum_LAST_READ"], [138, 727, 2, "enum_LAST_READ"], [138, 559, 3, "enum_LAST_WRITE"], [138, 138, 3, "enum_LAST_WRITE"], [143, 330, 2, "enum_LAST_READ"], [143, 525, 2, "enum_LAST_READ"], [143, 143, 3, "enum_LAST_WRITE"], [143, 28, 3, "enum_LAST_WRITE"], [153, 153, 2, "enum_LAST_READ"], [153, 2, 3, "enum_LAST_WRITE"], [148, 330, 2, "enum_LAST_READ"], [148, 525, 2, "enum_LAST_READ"], [148, 143, 3, "enum_LAST_WRITE"], [160, 119, 2, "enum_LAST_READ"], [160, 69, 3, "enum_LAST_WRITE"], [155, 148, 2, "enum_LAST_READ"], [155, 143, 3, "enum_LAST_WRITE"], [167, 160, 2, "enum_LAST_READ"], [167, 69, 3, "enum_LAST_WRITE"], [162, 155, 2, "enum_LAST_READ"], [162, 143, 3, "enum_LAST_WRITE"], [174, 167, 2, "enum_LAST_READ"], [174, 69, 3, "enum_LAST_WRITE"], [169, 162, 2, "enum_LAST_READ"], [169, 143, 3, "enum_LAST_WRITE"], [176, 169, 2, "enum_LAST_READ"], [176, 143, 3, "enum_LAST_WRITE"], [184, 176, 2, "enum_LAST_READ"], [184, 143, 3, "enum_LAST_WRITE"], [197, 105, 2, "enum_LAST_READ"], [197, 79, 3, "enum_LAST_WRITE"], [192, 184, 2, "enum_LAST_READ"], [192, 143, 3, "enum_LAST_WRITE"], [201, 91, 2, "enum_LAST_READ"], [201, 4, 3, "enum_LAST_WRITE"], [203, 93, 2, "enum_LAST_READ"], [203, 39, 3, "enum_LAST_WRITE"], [216, 590, 2, "enum_LAST_READ"], [216, 216, 2, "enum_LAST_READ"], [218, 201, 2, "enum_LAST_READ"], [218, 4, 3, "enum_LAST_WRITE"], [220, 203, 2, "enum_LAST_READ"], [220, 39, 3, "enum_LAST_WRITE"], [214, 226, 2, "enum_LAST_READ"], [214, 645, 2, "enum_LAST_READ"], [214, 614, 2, "enum_LAST_READ"], [214, 245, 2, "enum_LAST_READ"], [214, 588, 3, "enum_LAST_WRITE"], [214, 214, 3, "enum_LAST_WRITE"], [226, 226, 2, "enum_LAST_READ"], [226, 645, 2, "enum_LAST_READ"], [226, 614, 2, "enum_LAST_READ"], [226, 245, 2, "enum_LAST_READ"], [226, 214, 3, "enum_LAST_WRITE"], [233, 335, 2, "enum_LAST_READ"], [233, 638, 2, "enum_LAST_READ"], [233, 133, 3, "enum_LAST_WRITE"], [237, 226, 2, "enum_LAST_READ"], [237, 214, 3, "enum_LAST_WRITE"], [251, 237, 2, "enum_LAST_READ"], [251, 214, 3, "enum_LAST_WRITE"], [240, 192, 2, "enum_LAST_READ"], [240, 143, 3, "enum_LAST_WRITE"], [245, 251, 2, "enum_LAST_READ"], [245, 214, 3, "enum_LAST_WRITE"], [261, 218, 2, "enum_LAST_READ"], [261, 201, 2, "enum_LAST_READ"], [261, 4, 3, "enum_LAST_WRITE"], [263, 220, 2, "enum_LAST_READ"], [263, 203, 2, "enum_LAST_READ"], [263, 39, 3, "enum_LAST_WRITE"], [273, 261, 2, "enum_LAST_READ"], [273, 4, 3, "enum_LAST_WRITE"], [275, 263, 2, "enum_LAST_READ"], [275, 39, 3, "enum_LAST_WRITE"], [289, 273, 2, "enum_LAST_READ"], [289, 4, 3, "enum_LAST_WRITE"], [291, 275, 2, "enum_LAST_READ"], [291, 39, 3, "enum_LAST_WRITE"], [287, 713, 2, "enum_LAST_READ"], [287, 313, 2, "enum_LAST_READ"], [287, 287, 3, "enum_LAST_WRITE"], [287, 687, 3, "enum_LAST_WRITE"], [299, 289, 2, "enum_LAST_READ"], [299, 4, 3, "enum_LAST_WRITE"], [301, 291, 2, "enum_LAST_READ"], [301, 39, 3, "enum_LAST_WRITE"], [297, 718, 2, "enum_LAST_READ"], [297, 318, 2, "enum_LAST_READ"], [297, 697, 3, "enum_LAST_WRITE"], [297, 297, 3, "enum_LAST_WRITE"], [307, 328, 2, "enum_LAST_READ"], [307, 727, 2, "enum_LAST_READ"], [307, 138, 3, "enum_LAST_WRITE"], [313, 713, 2, "enum_LAST_READ"], [313, 313, 2, "enum_LAST_READ"], [313, 287, 3, "enum_LAST_WRITE"], [318, 718, 2, "enum_LAST_READ"], [318, 318, 2, "enum_LAST_READ"], [318, 297, 3, "enum_LAST_WRITE"], [328, 328, 2, "enum_LAST_READ"], [328, 727, 2, "enum_LAST_READ"], [328, 307, 2, "enum_LAST_READ"], [328, 138, 3, "enum_LAST_WRITE"], [323, 240, 2, "enum_LAST_READ"], [323, 192, 2, "enum_LAST_READ"], [323, 143, 3, "enum_LAST_WRITE"], [335, 233, 2, "enum_LAST_READ"], [335, 335, 2, "enum_LAST_READ"], [335, 638, 2, "enum_LAST_READ"], [335, 133, 3, "enum_LAST_WRITE"], [330, 323, 2, "enum_LAST_READ"], [330, 143, 3, "enum_LAST_WRITE"], [345, 345, 2, "enum_LAST_READ"], [347, 174, 2, "enum_LAST_READ"], [347, 69, 3, "enum_LAST_WRITE"], [349, 197, 2, "enum_LAST_READ"], [349, 79, 3, "enum_LAST_WRITE"], [351, 351, 2, "enum_LAST_READ"], [351, 498, 2, "enum_LAST_READ"], [351, 478, 2, "enum_LAST_READ"], [351, 6, 3, "enum_LAST_WRITE"], [338, 356, 2, "enum_LAST_READ"], [338, 338, 3, "enum_LAST_WRITE"], [340, 468, 2, "enum_LAST_READ"], [340, 434, 2, "enum_LAST_READ"], [340, 340, 3, "enum_LAST_WRITE"], [342, 470, 2, "enum_LAST_READ"], [342, 448, 2, "enum_LAST_READ"], [342, 342, 3, "enum_LAST_WRITE"], [356, 356, 2, "enum_LAST_READ"], [356, 338, 3, "enum_LAST_WRITE"], [363, 101, 2, "enum_LAST_READ"], [363, 33, 3, "enum_LAST_WRITE"], [365, 349, 2, "enum_LAST_READ"], [365, 79, 3, "enum_LAST_WRITE"], [378, 378, 2, "enum_LAST_READ"], [380, 468, 2, "enum_LAST_READ"], [380, 434, 2, "enum_LAST_READ"], [380, 340, 3, "enum_LAST_WRITE"], [373, 330, 2, "enum_LAST_READ"], [373, 143, 3, "enum_LAST_WRITE"], [385, 385, 2, "enum_LAST_READ"], [385, 43, 2, "enum_LAST_READ"], [387, 373, 2, "enum_LAST_READ"], [387, 143, 3, "enum_LAST_WRITE"], [398, 387, 2, "enum_LAST_READ"], [398, 143, 3, "enum_LAST_WRITE"], [405, 398, 2, "enum_LAST_READ"], [405, 143, 3, "enum_LAST_WRITE"], [414, 387, 2, "enum_LAST_READ"], [414, 405, 2, "enum_LAST_READ"], [414, 143, 3, "enum_LAST_WRITE"], [424, 414, 2, "enum_LAST_READ"], [424, 143, 3, "enum_LAST_WRITE"], [434, 380, 2, "enum_LAST_READ"], [434, 340, 3, "enum_LAST_WRITE"], [438, 424, 2, "enum_LAST_READ"], [438, 143, 3, "enum_LAST_WRITE"], [448, 470, 2, "enum_LAST_READ"], [448, 448, 2, "enum_LAST_READ"], [448, 342, 3, "enum_LAST_WRITE"], [457, 414, 2, "enum_LAST_READ"], [457, 143, 3, "enum_LAST_WRITE"], [468, 380, 2, "enum_LAST_READ"], [468, 340, 3, "enum_LAST_WRITE"], [470, 470, 2, "enum_LAST_READ"], [470, 448, 2, "enum_LAST_READ"], [470, 342, 3, "enum_LAST_WRITE"], [478, 351, 2, "enum_LAST_READ"], [478, 6, 3, "enum_LAST_WRITE"], [488, 457, 2, "enum_LAST_READ"], [488, 438, 2, "enum_LAST_READ"], [488, 143, 3, "enum_LAST_WRITE"], [498, 478, 2, "enum_LAST_READ"], [498, 6, 3, "enum_LAST_WRITE"], [510, 457, 2, "enum_LAST_READ"], [510, 438, 2, "enum_LAST_READ"], [510, 143, 3, "enum_LAST_WRITE"], [521, 521, 2, "enum_LAST_READ"], [521, 543, 2, "enum_LAST_READ"], [521, 23, 3, "enum_LAST_WRITE"], [525, 488, 2, "enum_LAST_READ"], [525, 510, 2, "enum_LAST_READ"], [525, 143, 3, "enum_LAST_WRITE"], [528, 121, 2, "enum_LAST_READ"], [528, 18, 3, "enum_LAST_WRITE"], [532, 347, 2, "enum_LAST_READ"], [532, 69, 3, "enum_LAST_WRITE"], [543, 521, 2, "enum_LAST_READ"], [543, 543, 2, "enum_LAST_READ"], [543, 23, 3, "enum_LAST_WRITE"], [541, 640, 2, "enum_LAST_READ"], [541, 549, 2, "enum_LAST_READ"], [541, 607, 2, "enum_LAST_READ"], [541, 568, 2, "enum_LAST_READ"], [541, 722, 2, "enum_LAST_READ"], [541, 541, 3, "enum_LAST_WRITE"], [549, 640, 2, "enum_LAST_READ"], [549, 549, 2, "enum_LAST_READ"], [549, 607, 2, "enum_LAST_READ"], [549, 568, 2, "enum_LAST_READ"], [549, 722, 2, "enum_LAST_READ"], [549, 541, 3, "enum_LAST_WRITE"], [554, 119, 2, "enum_LAST_READ"], [554, 554, 2, "enum_LAST_READ"], [554, 69, 3, "enum_LAST_WRITE"], [561, 549, 2, "enum_LAST_READ"], [561, 541, 3, "enum_LAST_WRITE"], [559, 727, 2, "enum_LAST_READ"], [559, 328, 2, "enum_LAST_READ"], [559, 559, 3, "enum_LAST_WRITE"], [559, 138, 3, "enum_LAST_WRITE"], [568, 561, 2, "enum_LAST_READ"], [568, 541, 3, "enum_LAST_WRITE"], [566, 335, 2, "enum_LAST_READ"], [566, 638, 2, "enum_LAST_READ"], [566, 133, 3, "enum_LAST_WRITE"], [566, 566, 3, "enum_LAST_WRITE"], [575, 91, 2, "enum_LAST_READ"], [575, 699, 2, "enum_LAST_READ"], [575, 673, 2, "enum_LAST_READ"], [575, 4, 3, "enum_LAST_WRITE"], [577, 675, 2, "enum_LAST_READ"], [577, 93, 2, "enum_LAST_READ"], [577, 701, 2, "enum_LAST_READ"], [577, 39, 3, "enum_LAST_WRITE"], [590, 590, 2, "enum_LAST_READ"], [590, 216, 2, "enum_LAST_READ"], [592, 575, 2, "enum_LAST_READ"], [592, 4, 3, "enum_LAST_WRITE"], [594, 577, 2, "enum_LAST_READ"], [594, 39, 3, "enum_LAST_WRITE"], [588, 226, 2, "enum_LAST_READ"], [588, 645, 2, "enum_LAST_READ"], [588, 614, 2, "enum_LAST_READ"], [588, 245, 2, "enum_LAST_READ"], [588, 588, 3, "enum_LAST_WRITE"], [588, 214, 3, "enum_LAST_WRITE"], [601, 226, 2, "enum_LAST_READ"], [601, 645, 2, "enum_LAST_READ"], [601, 614, 2, "enum_LAST_READ"], [601, 245, 2, "enum_LAST_READ"], [601, 588, 3, "enum_LAST_WRITE"], [607, 568, 2, "enum_LAST_READ"], [607, 541, 3, "enum_LAST_WRITE"], [614, 601, 2, "enum_LAST_READ"], [614, 588, 3, "enum_LAST_WRITE"], [626, 335, 2, "enum_LAST_READ"], [626, 638, 2, "enum_LAST_READ"], [626, 566, 3, "enum_LAST_WRITE"], [630, 614, 2, "enum_LAST_READ"], [630, 588, 3, "enum_LAST_WRITE"], [638, 626, 2, "enum_LAST_READ"], [638, 566, 3, "enum_LAST_WRITE"], [633, 607, 2, "enum_LAST_READ"], [633, 541, 3, "enum_LAST_WRITE"], [651, 630, 2, "enum_LAST_READ"], [651, 588, 3, "enum_LAST_WRITE"], [640, 633, 2, "enum_LAST_READ"], [640, 541, 3, "enum_LAST_WRITE"], [645, 651, 2, "enum_LAST_READ"], [645, 588, 3, "enum_LAST_WRITE"], [661, 575, 2, "enum_LAST_READ"], [661, 592, 2, "enum_LAST_READ"], [661, 4, 3, "enum_LAST_WRITE"], [663, 577, 2, "enum_LAST_READ"], [663, 594, 2, "enum_LAST_READ"], [663, 39, 3, "enum_LAST_WRITE"], [673, 661, 2, "enum_LAST_READ"], [673, 4, 3, "enum_LAST_WRITE"], [675, 663, 2, "enum_LAST_READ"], [675, 39, 3, "enum_LAST_WRITE"], [689, 673, 2, "enum_LAST_READ"], [689, 4, 3, "enum_LAST_WRITE"], [691, 675, 2, "enum_LAST_READ"], [691, 39, 3, "enum_LAST_WRITE"], [687, 713, 2, "enum_LAST_READ"], [687, 313, 2, "enum_LAST_READ"], [687, 287, 3, "enum_LAST_WRITE"], [687, 687, 3, "enum_LAST_WRITE"], [699, 689, 2, "enum_LAST_READ"], [699, 4, 3, "enum_LAST_WRITE"], [701, 691, 2, "enum_LAST_READ"], [701, 39, 3, "enum_LAST_WRITE"], [697, 718, 2, "enum_LAST_READ"], [697, 318, 2, "enum_LAST_READ"], [697, 697, 3, "enum_LAST_WRITE"], [697, 297, 3, "enum_LAST_WRITE"], [707, 727, 2, "enum_LAST_READ"], [707, 328, 2, "enum_LAST_READ"], [707, 559, 3, "enum_LAST_WRITE"], [713, 713, 2, "enum_LAST_READ"], [713, 313, 2, "enum_LAST_READ"], [713, 687, 3, "enum_LAST_WRITE"], [718, 718, 2, "enum_LAST_READ"], [718, 318, 2, "enum_LAST_READ"], [718, 697, 3, "enum_LAST_WRITE"], [727, 707, 2, "enum_LAST_READ"], [727, 559, 3, "enum_LAST_WRITE"], [722, 640, 2, "enum_LAST_READ"], [722, 568, 2, "enum_LAST_READ"], [722, 607, 2, "enum_LAST_READ"], [722, 541, 3, "enum_LAST_WRITE"], [737, 521, 2, "enum_LAST_READ"], [737, 543, 2, "enum_LAST_READ"], [737, 23, 3, "enum_LAST_WRITE"], [735, 640, 2, "enum_LAST_READ"], [735, 549, 2, "enum_LAST_READ"], [735, 750, 2, "enum_LAST_READ"], [735, 607, 2, "enum_LAST_READ"], [735, 568, 2, "enum_LAST_READ"], [735, 722, 2, "enum_LAST_READ"], [735, 735, 3, "enum_LAST_WRITE"], [735, 541, 3, "enum_LAST_WRITE"], [741, 640, 2, "enum_LAST_READ"], [741, 549, 2, "enum_LAST_READ"], [741, 750, 2, "enum_LAST_READ"], [741, 607, 2, "enum_LAST_READ"], [741, 568, 2, "enum_LAST_READ"], [741, 722, 2, "enum_LAST_READ"], [741, 735, 3, "enum_LAST_WRITE"], [750, 741, 2, "enum_LAST_READ"], [750, 735, 3, "enum_LAST_WRITE"], [761, 737, 2, "enum_LAST_READ"], [761, 23, 3, "enum_LAST_WRITE"], [69, 71, 4, "enum_COMPUTED_FROM"], [69, 73, 4, "enum_COMPUTED_FROM"], [79, 81, 4, "enum_COMPUTED_FROM"], [79, 83, 4, "enum_COMPUTED_FROM"], [89, 91, 4, "enum_COMPUTED_FROM"], [89, 93, 4, "enum_COMPUTED_FROM"], [149, 153, 4, "enum_COMPUTED_FROM"], [156, 160, 4, "enum_COMPUTED_FROM"], [163, 167, 4, "enum_COMPUTED_FROM"], [170, 174, 4, "enum_COMPUTED_FROM"], [193, 197, 4, "enum_COMPUTED_FROM"], [324, 328, 4, "enum_COMPUTED_FROM"], [331, 335, 4, "enum_COMPUTED_FROM"], [339, 345, 4, "enum_COMPUTED_FROM"], [339, 347, 4, "enum_COMPUTED_FROM"], [339, 349, 4, "enum_COMPUTED_FROM"], [339, 351, 4, "enum_COMPUTED_FROM"], [374, 378, 4, "enum_COMPUTED_FROM"], [374, 380, 4, "enum_COMPUTED_FROM"], [214, 216, 4, "enum_COMPUTED_FROM"], [214, 218, 4, "enum_COMPUTED_FROM"], [214, 220, 4, "enum_COMPUTED_FROM"], [287, 289, 4, "enum_COMPUTED_FROM"], [287, 291, 4, "enum_COMPUTED_FROM"], [297, 299, 4, "enum_COMPUTED_FROM"], [297, 301, 4, "enum_COMPUTED_FROM"], [244, 251, 4, "enum_COMPUTED_FROM"], [559, 561, 4, "enum_COMPUTED_FROM"], [566, 568, 4, "enum_COMPUTED_FROM"], [588, 590, 4, "enum_COMPUTED_FROM"], [588, 592, 4, "enum_COMPUTED_FROM"], [588, 594, 4, "enum_COMPUTED_FROM"], [687, 689, 4, "enum_COMPUTED_FROM"], [687, 691, 4, "enum_COMPUTED_FROM"], [697, 699, 4, "enum_COMPUTED_FROM"], [697, 701, 4, "enum_COMPUTED_FROM"], [723, 727, 4, "enum_COMPUTED_FROM"], [634, 638, 4, "enum_COMPUTED_FROM"], [644, 651, 4, "enum_COMPUTED_FROM"]], "error_location": 167, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/threatwatch/twigs.git", "old_path": "twigs/azure.py", "hash": "7ee5d95178a459a8c2e8ff7855e3156e620c395c", "code": "def parse_inventory(email: str,data: List[List[str]],params: Dict[str, Any]) -> List[Dict[str, Any]]:\n    logging.info(\"Processing inventory retrieved from Azure...\")\n    hosts: List[str] = []\n    assets: List[Dict[str, Any]] = []\n    asset_map: Dict[str, Any] = {}\n    not_running_vms: Dict[str, int] = {}\n    for i in range(len(data)):\n        if data[i][4] == 'WindowsServices': #ConfigDataType\n            continue\n        host: str = data[i][5]\n        vmuuid: str = data[i][6]\n        publisher: str = data[i][2]\n\n        # If VM is known to be not running, then skip it\n        if not_running_vms.get(vmuuid) == 1:\n            continue\n\n        if host not in hosts  and publisher != '0':\n            patches: List[Dict[str, Any]] = []\n            products: List[str] = []\n            asset_map: Dict[str, Any] = {}\n            asset_map['owner'] = email\n            asset_map['host'] = host\n            asset_map['id'] = host\n            asset_map['name'] = host\n            asset_map['tags'] = [ ]\n            asset_map['patch_tracker'] = { } # To help remove duplicate patches\n            asset_map['vmuuid'] = vmuuid\n            if data[i][1] == 'Update': #ApplicationType for MS patches\n                patch: Optional[Dict[str, Any]] = parse_patch(data[i])\n                if patch is not None:\n                    patches.append(patch)\n                    asset_map['patch_tracker'][patch['id']] = patch['id']\n            if data[i][1] == 'Package' or data[i][1] == 'Application': #ApplicationType for Linux packages\n                pname: str = data[i][0]\n                pversion: str =  data[i][3]\n                products.append(pname+' ' + pversion)\n            asset_map['products'] = products\n            asset_map['patches'] = patches\n            vm_running, os, os_version = get_os_details(host, vmuuid, params)\n            if vm_running == False:\n                # skip vm's which are not running\n                not_running_vms[vmuuid] = 1\n                continue\n            asset_map['type'] = get_os_type(os)\n            if len(asset_map['type']) > 0:\n                asset_map['tags'].append(asset_map['type'])\n            if asset_map['type'] == 'Windows':\n                asset_map['tags'].append('OS_RELEASE:' + os)\n                asset_map['tags'].append('OS_VERSION:' + os_version)\n            else:\n                asset_map['tags'].append('OS_RELEASE:%s %s' % (os, os_version))\n            if params['enable_tracking_tags'] == True:\n                asset_map['tags'].append(\"SOURCE:Azure:\" + params['tenant_id'])\n            else:\n                asset_map['tags'].append(\"SOURCE:Azure\")\n            assets.append(asset_map)\n            hosts.append(host)\n        else:\n            for asset in assets:\n                if asset['host'] == host:\n                    products: List[str] = asset['products']\n                    patches: List = asset['patches']\n                    if data[i][1] == 'Update': #ApplicationType for MS patches\n                        patch = parse_patch(data[i])\n                        if patch is not None and asset['patch_tracker'].get(patch['id']) is None:\n                            patches.append(patch)\n                            asset['patches'] = patches\n                            asset['patch_tracker'][patch['id']] = patch['id']\n                    if data[i][1] == 'Package' or data[i][1] == 'Application': #ApplicationType for Linux packages\n                        pname: str = data[i][0]\n                        pversion: str =  data[i][3]\n                        products.append(pname+' ' + pversion)\n                        asset['products'] = products\n    # Remove the additional fields 'patch_tracker' (added to avoid duplicate patches) & 'vmuuid'\n    for asset in assets:\n        asset.pop('patch_tracker', None)\n        asset.pop('vmuuid', None)\n    return assets\n", "rewrite": "ReplaceText(target='vmuuid' @(88,30)->(88,34))", "error_line": 23, "has_bug": true, "code_full": "import logging\nfrom typing import Any, Dict, List, Optional, Tuple\n\n\ndef parse_patch(data: List[str]) -> Optional[Dict[str, Any]]:\n    return None\n\n\ndef get_os_details(host: str, vmuuid: str, params: Dict[str, Any]) -> Tuple[bool, str, str]:\n    return False, \"\", \"\"\n\n\ndef get_os_type(os: str) -> str:\n    return \"\"\n\ndef parse_inventory(email: str,data: List[List[str]],params: Dict[str, Any]) -> List[Dict[str, Any]]:\n    logging.info(\"Processing inventory retrieved from Azure...\")\n    hosts: List[str] = []\n    assets: List[Dict[str, Any]] = []\n    asset_map: Dict[str, Any] = {}\n    not_running_vms: Dict[str, int] = {}\n    for i in range(len(data)):\n        if data[i][4] == 'WindowsServices': #ConfigDataType\n            continue\n        host: str = data[i][5]\n        vmuuid: str = data[i][6]\n        publisher: str = data[i][2]\n\n        # If VM is known to be not running, then skip it\n        if not_running_vms.get(vmuuid) == 1:\n            continue\n\n        if host not in hosts  and publisher != '0':\n            patches: List[Dict[str, Any]] = []\n            products: List[str] = []\n            asset_map: Dict[str, Any] = {}\n            asset_map['owner'] = email\n            asset_map['host'] = host\n            asset_map['id'] = host\n            asset_map['name'] = host\n            asset_map['tags'] = [ ]\n            asset_map['patch_tracker'] = { } # To help remove duplicate patches\n            asset_map['vmuuid'] = vmuuid\n            if data[i][1] == 'Update': #ApplicationType for MS patches\n                patch: Optional[Dict[str, Any]] = parse_patch(data[i])\n                if patch is not None:\n                    patches.append(patch)\n                    asset_map['patch_tracker'][patch['id']] = patch['id']\n            if data[i][1] == 'Package' or data[i][1] == 'Application': #ApplicationType for Linux packages\n                pname: str = data[i][0]\n                pversion: str =  data[i][3]\n                products.append(pname+' ' + pversion)\n            asset_map['products'] = products\n            asset_map['patches'] = patches\n            vm_running, os, os_version = get_os_details(host, vmuuid, params)\n            if vm_running == False:\n                # skip vm's which are not running\n                not_running_vms[vmuuid] = 1\n                continue\n            asset_map['type'] = get_os_type(os)\n            if len(asset_map['type']) > 0:\n                asset_map['tags'].append(asset_map['type'])\n            if asset_map['type'] == 'Windows':\n                asset_map['tags'].append('OS_RELEASE:' + os)\n                asset_map['tags'].append('OS_VERSION:' + os_version)\n            else:\n                asset_map['tags'].append('OS_RELEASE:%s %s' % (os, os_version))\n            if params['enable_tracking_tags'] == True:\n                asset_map['tags'].append(\"SOURCE:Azure:\" + params['tenant_id'])\n            else:\n                asset_map['tags'].append(\"SOURCE:Azure\")\n            assets.append(asset_map)\n            hosts.append(host)\n        else:\n            for asset in assets:\n                if asset['host'] == host:\n                    products: List[str] = asset['products']\n                    patches: List = asset['patches']\n                    if data[i][1] == 'Update': #ApplicationType for MS patches\n                        patch = parse_patch(data[i])\n                        if patch is not None and asset['patch_tracker'].get(patch['id']) is None:\n                            patches.append(patch)\n                            asset['patches'] = patches\n                            asset['patch_tracker'][patch['id']] = patch['id']\n                    if data[i][1] == 'Package' or data[i][1] == 'Application': #ApplicationType for Linux packages\n                        pname: str = data[i][0]\n                        pversion: str =  data[i][3]\n                        products.append(pname+' ' + pversion)\n                        asset['products'] = products\n    # Remove the additional fields 'patch_tracker' (added to avoid duplicate patches) & 'vmuuid'\n    for asset in assets:\n        asset.pop('patch_tracker', None)\n        asset.pop('vmuuid', None)\n    return assets\n", "error_location_char": [929, 933], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def get_logfile_metrics(", "agent", ")", ":", "#NEWLINE#", "#INDENT#", "def follow(", "thefile", ",", "run_event", ")", ":", "#NEWLINE#", "#INDENT#", "thefile", ".", "seek", "(", "0", ",", "2", ")", "#NEWLINE#", "while", "run_event", ".", "is_set", "(", ")", ":", "#NEWLINE#", "#INDENT#", "line", "=", "thefile", ".", "readline", "(", ")", "#NEWLINE#", "if", "(", "not", "line", ")", ":", "#NEWLINE#", "#INDENT#", "time", ".", "sleep", "(", "0.1", ")", "#NEWLINE#", "continue", "#NEWLINE#", "#UNINDENT#", "(", "yield", "line", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "agent", ".", "run_event", ".", "wait", "(", ")", "#NEWLINE#", "config", "=", "agent", ".", "pluginconfig", "[", "'log'", "]", "#NEWLINE#", "db_config", "=", "config", "[", "'database'", "]", "#NEWLINE#", "try", ":", "#NEWLINE#", "#INDENT#", "logger", ".", "debug", "(", "'try to create the database...'", ")", "#NEWLINE#", "agent", ".", "create_database", "(", "db_config", "[", "'name'", "]", ")", "#NEWLINE#", "agent", ".", "create_retention_policy", "(", "(", "'%s_rp'", "%", "db_config", "[", "'name'", "]", ")", ",", "db_config", "[", "'duration'", "]", ",", "db_config", "[", "'replication'", "]", ",", "db_config", "[", "'name'", "]", ")", "#NEWLINE#", "logger", ".", "info", "(", "'database \"%s\" created successfully'", ",", "config", "[", "'name'", "]", ")", "#NEWLINE#", "#UNINDENT#", "except", ":", "#NEWLINE#", "#INDENT#", "pass", "#NEWLINE#", "#UNINDENT#", "with", "open", "(", "config", "[", "'log_file'", "]", ",", "'r'", ")", "as", "f", ":", "#NEWLINE#", "#INDENT#", "for", "line", "in", "follow", "(", "f", ",", "agent", ".", "run_event", ")", ":", "#NEWLINE#", "#INDENT#", "point", "=", "{", "'measurement'", ":", "config", "[", "'measurement'", "]", ",", "'tags'", ":", "dict", "(", ")", ",", "'fields'", ":", "dict", "(", ")", "}", "#NEWLINE#", "logger", ".", "debug", "(", "(", "'-'", "*", "90", ")", ")", "#NEWLINE#", "res", "=", "re", ".", "match", "(", "config", "[", "'parser'", "]", "[", "'regex'", "]", ",", "line", ")", ".", "groups", "(", ")", "#NEWLINE#", "for", "elem", "in", "config", "[", "'parser'", "]", "[", "'mapping'", "]", ":", "#NEWLINE#", "#INDENT#", "dict_to_fill", "=", "None", "#NEWLINE#", "if", "(", "elem", "[", "'type'", "]", "==", "'field'", ")", ":", "#NEWLINE#", "#INDENT#", "dict_to_fill", "=", "point", "[", "'fields'", "]", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "dict_to_fill", "=", "point", "[", "'tags'", "]", "#NEWLINE#", "#UNINDENT#", "value", "=", "res", "[", "elem", "[", "'idx'", "]", "]", "#NEWLINE#", "if", "(", "'cast'", "in", "elem", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "elem", "[", "'cast'", "]", "==", "'int'", ")", ":", "#NEWLINE#", "#INDENT#", "value", "=", "int", "(", "value", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "dict_to_fill", "[", "elem", "[", "'name'", "]", "]", "=", "value", "#NEWLINE#", "#UNINDENT#", "logger", ".", "debug", "(", "point", ")", "#NEWLINE#", "logger", ".", "debug", "(", "(", "'-'", "*", "90", ")", ")", "#NEWLINE#", "agent", ".", "push", "(", "[", "point", "]", ",", "config", "[", "'dbname'", "]", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "logger", ".", "info", "(", "'get_logfile_metrics terminated'", ")"], "edges": [[11, 9, 7, "enum_FIELD"], [65, 71, 7, "enum_FIELD"], [73, 79, 7, "enum_FIELD"], [82, 86, 7, "enum_FIELD"], [377, 381, 7, "enum_FIELD"], [14, 20, 7, "enum_FIELD"], [24, 28, 7, "enum_FIELD"], [71, 69, 7, "enum_FIELD"], [79, 77, 7, "enum_FIELD"], [79, 80, 7, "enum_FIELD"], [86, 85, 7, "enum_FIELD"], [86, 87, 7, "enum_FIELD"], [93, 97, 7, "enum_FIELD"], [100, 104, 7, "enum_FIELD"], [110, 128, 7, "enum_FIELD"], [139, 145, 7, "enum_FIELD"], [170, 167, 7, "enum_FIELD"], [170, 171, 7, "enum_FIELD"], [177, 176, 7, "enum_FIELD"], [177, 181, 7, "enum_FIELD"], [381, 379, 7, "enum_FIELD"], [20, 16, 7, "enum_FIELD"], [28, 26, 7, "enum_FIELD"], [32, 38, 7, "enum_FIELD"], [41, 43, 7, "enum_FIELD"], [58, 60, 7, "enum_FIELD"], [69, 67, 7, "enum_FIELD"], [77, 76, 7, "enum_FIELD"], [97, 95, 7, "enum_FIELD"], [104, 102, 7, "enum_FIELD"], [128, 112, 7, "enum_FIELD"], [145, 141, 7, "enum_FIELD"], [167, 161, 7, "enum_FIELD"], [181, 178, 7, "enum_FIELD"], [188, 200, 7, "enum_FIELD"], [211, 215, 7, "enum_FIELD"], [222, 241, 7, "enum_FIELD"], [246, 245, 7, "enum_FIELD"], [246, 251, 7, "enum_FIELD"], [343, 347, 7, "enum_FIELD"], [350, 354, 7, "enum_FIELD"], [361, 369, 7, "enum_FIELD"], [379, 378, 7, "enum_FIELD"], [16, 15, 7, "enum_FIELD"], [26, 25, 7, "enum_FIELD"], [38, 36, 7, "enum_FIELD"], [43, 44, 7, "enum_FIELD"], [48, 52, 7, "enum_FIELD"], [60, 61, 7, "enum_FIELD"], [67, 66, 7, "enum_FIELD"], [95, 94, 7, "enum_FIELD"], [102, 101, 7, "enum_FIELD"], [106, 105, 7, "enum_FIELD"], [106, 107, 7, "enum_FIELD"], [112, 111, 7, "enum_FIELD"], [117, 116, 7, "enum_FIELD"], [117, 119, 7, "enum_FIELD"], [125, 124, 7, "enum_FIELD"], [125, 126, 7, "enum_FIELD"], [130, 129, 7, "enum_FIELD"], [130, 131, 7, "enum_FIELD"], [135, 134, 7, "enum_FIELD"], [135, 136, 7, "enum_FIELD"], [141, 140, 7, "enum_FIELD"], [147, 146, 7, "enum_FIELD"], [147, 148, 7, "enum_FIELD"], [164, 163, 7, "enum_FIELD"], [164, 165, 7, "enum_FIELD"], [183, 182, 7, "enum_FIELD"], [215, 213, 7, "enum_FIELD"], [241, 239, 7, "enum_FIELD"], [251, 248, 7, "enum_FIELD"], [251, 252, 7, "enum_FIELD"], [256, 259, 7, "enum_FIELD"], [270, 267, 7, "enum_FIELD"], [292, 296, 7, "enum_FIELD"], [303, 306, 7, "enum_FIELD"], [332, 341, 7, "enum_FIELD"], [347, 345, 7, "enum_FIELD"], [354, 352, 7, "enum_FIELD"], [369, 363, 7, "enum_FIELD"], [36, 35, 7, "enum_FIELD"], [52, 50, 7, "enum_FIELD"], [119, 118, 7, "enum_FIELD"], [119, 120, 7, "enum_FIELD"], [195, 194, 7, "enum_FIELD"], [195, 196, 7, "enum_FIELD"], [202, 201, 7, "enum_FIELD"], [208, 207, 7, "enum_FIELD"], [213, 212, 7, "enum_FIELD"], [218, 217, 7, "enum_FIELD"], [218, 219, 7, "enum_FIELD"], [239, 236, 7, "enum_FIELD"], [248, 247, 7, "enum_FIELD"], [248, 249, 7, "enum_FIELD"], [267, 264, 7, "enum_FIELD"], [272, 276, 7, "enum_FIELD"], [284, 288, 7, "enum_FIELD"], [296, 295, 7, "enum_FIELD"], [296, 298, 7, "enum_FIELD"], [306, 305, 7, "enum_FIELD"], [312, 318, 7, "enum_FIELD"], [334, 333, 7, "enum_FIELD"], [334, 336, 7, "enum_FIELD"], [345, 344, 7, "enum_FIELD"], [352, 351, 7, "enum_FIELD"], [357, 356, 7, "enum_FIELD"], [357, 358, 7, "enum_FIELD"], [363, 362, 7, "enum_FIELD"], [371, 370, 7, "enum_FIELD"], [371, 372, 7, "enum_FIELD"], [50, 49, 7, "enum_FIELD"], [236, 226, 7, "enum_FIELD"], [264, 263, 7, "enum_FIELD"], [264, 265, 7, "enum_FIELD"], [276, 275, 7, "enum_FIELD"], [276, 277, 7, "enum_FIELD"], [288, 287, 7, "enum_FIELD"], [288, 289, 7, "enum_FIELD"], [298, 297, 7, "enum_FIELD"], [298, 299, 7, "enum_FIELD"], [318, 315, 7, "enum_FIELD"], [323, 327, 7, "enum_FIELD"], [336, 335, 7, "enum_FIELD"], [336, 337, 7, "enum_FIELD"], [226, 225, 7, "enum_FIELD"], [233, 230, 7, "enum_FIELD"], [233, 234, 7, "enum_FIELD"], [315, 314, 7, "enum_FIELD"], [315, 316, 7, "enum_FIELD"], [327, 326, 7, "enum_FIELD"], [230, 229, 7, "enum_FIELD"], [230, 231, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 14, 9, "enum_NEXT_SYNTAX"], [15, 8, 10, "enum_LAST_LEXICAL_USE"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 24, 9, "enum_NEXT_SYNTAX"], [25, 10, 10, "enum_LAST_LEXICAL_USE"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [35, 15, 10, "enum_LAST_LEXICAL_USE"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [44, 33, 10, "enum_LAST_LEXICAL_USE"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 56, 9, "enum_NEXT_SYNTAX"], [56, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [61, 44, 10, "enum_LAST_LEXICAL_USE"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 65, 9, "enum_NEXT_SYNTAX"], [66, 2, 10, "enum_LAST_LEXICAL_USE"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [76, 66, 10, "enum_LAST_LEXICAL_USE"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [85, 74, 10, "enum_LAST_LEXICAL_USE"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [101, 76, 10, "enum_LAST_LEXICAL_USE"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [105, 83, 10, "enum_LAST_LEXICAL_USE"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [111, 101, 10, "enum_LAST_LEXICAL_USE"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [118, 105, 10, "enum_LAST_LEXICAL_USE"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [124, 118, 10, "enum_LAST_LEXICAL_USE"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [129, 124, 10, "enum_LAST_LEXICAL_USE"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [134, 129, 10, "enum_LAST_LEXICAL_USE"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [140, 94, 10, "enum_LAST_LEXICAL_USE"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [146, 85, 10, "enum_LAST_LEXICAL_USE"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 157, 9, "enum_NEXT_SYNTAX"], [157, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [163, 146, 10, "enum_LAST_LEXICAL_USE"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 175, 9, "enum_NEXT_SYNTAX"], [176, 61, 10, "enum_LAST_LEXICAL_USE"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [180, 171, 10, "enum_LAST_LEXICAL_USE"], [179, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [182, 111, 10, "enum_LAST_LEXICAL_USE"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 184, 9, "enum_NEXT_SYNTAX"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 188, 9, "enum_NEXT_SYNTAX"], [188, 189, 9, "enum_NEXT_SYNTAX"], [189, 190, 9, "enum_NEXT_SYNTAX"], [190, 191, 9, "enum_NEXT_SYNTAX"], [191, 192, 9, "enum_NEXT_SYNTAX"], [192, 193, 9, "enum_NEXT_SYNTAX"], [194, 163, 10, "enum_LAST_LEXICAL_USE"], [193, 194, 9, "enum_NEXT_SYNTAX"], [194, 195, 9, "enum_NEXT_SYNTAX"], [195, 196, 9, "enum_NEXT_SYNTAX"], [196, 197, 9, "enum_NEXT_SYNTAX"], [197, 198, 9, "enum_NEXT_SYNTAX"], [198, 199, 9, "enum_NEXT_SYNTAX"], [199, 200, 9, "enum_NEXT_SYNTAX"], [200, 201, 9, "enum_NEXT_SYNTAX"], [201, 202, 9, "enum_NEXT_SYNTAX"], [202, 203, 9, "enum_NEXT_SYNTAX"], [203, 204, 9, "enum_NEXT_SYNTAX"], [204, 205, 9, "enum_NEXT_SYNTAX"], [205, 206, 9, "enum_NEXT_SYNTAX"], [207, 201, 10, "enum_LAST_LEXICAL_USE"], [206, 207, 9, "enum_NEXT_SYNTAX"], [207, 208, 9, "enum_NEXT_SYNTAX"], [208, 209, 9, "enum_NEXT_SYNTAX"], [209, 210, 9, "enum_NEXT_SYNTAX"], [210, 211, 9, "enum_NEXT_SYNTAX"], [212, 140, 10, "enum_LAST_LEXICAL_USE"], [211, 212, 9, "enum_NEXT_SYNTAX"], [212, 213, 9, "enum_NEXT_SYNTAX"], [213, 214, 9, "enum_NEXT_SYNTAX"], [214, 215, 9, "enum_NEXT_SYNTAX"], [215, 216, 9, "enum_NEXT_SYNTAX"], [216, 217, 9, "enum_NEXT_SYNTAX"], [217, 218, 9, "enum_NEXT_SYNTAX"], [218, 219, 9, "enum_NEXT_SYNTAX"], [219, 220, 9, "enum_NEXT_SYNTAX"], [220, 221, 9, "enum_NEXT_SYNTAX"], [221, 222, 9, "enum_NEXT_SYNTAX"], [222, 223, 9, "enum_NEXT_SYNTAX"], [223, 224, 9, "enum_NEXT_SYNTAX"], [224, 225, 9, "enum_NEXT_SYNTAX"], [225, 226, 9, "enum_NEXT_SYNTAX"], [226, 227, 9, "enum_NEXT_SYNTAX"], [227, 228, 9, "enum_NEXT_SYNTAX"], [229, 194, 10, "enum_LAST_LEXICAL_USE"], [228, 229, 9, "enum_NEXT_SYNTAX"], [229, 230, 9, "enum_NEXT_SYNTAX"], [230, 231, 9, "enum_NEXT_SYNTAX"], [231, 232, 9, "enum_NEXT_SYNTAX"], [232, 233, 9, "enum_NEXT_SYNTAX"], [233, 234, 9, "enum_NEXT_SYNTAX"], [234, 235, 9, "enum_NEXT_SYNTAX"], [235, 236, 9, "enum_NEXT_SYNTAX"], [237, 176, 10, "enum_LAST_LEXICAL_USE"], [236, 237, 9, "enum_NEXT_SYNTAX"], [237, 238, 9, "enum_NEXT_SYNTAX"], [238, 239, 9, "enum_NEXT_SYNTAX"], [239, 240, 9, "enum_NEXT_SYNTAX"], [240, 241, 9, "enum_NEXT_SYNTAX"], [241, 242, 9, "enum_NEXT_SYNTAX"], [242, 244, 9, "enum_NEXT_SYNTAX"], [244, 245, 9, "enum_NEXT_SYNTAX"], [245, 246, 9, "enum_NEXT_SYNTAX"], [247, 229, 10, "enum_LAST_LEXICAL_USE"], [246, 247, 9, "enum_NEXT_SYNTAX"], [247, 248, 9, "enum_NEXT_SYNTAX"], [248, 249, 9, "enum_NEXT_SYNTAX"], [249, 250, 9, "enum_NEXT_SYNTAX"], [250, 251, 9, "enum_NEXT_SYNTAX"], [251, 252, 9, "enum_NEXT_SYNTAX"], [252, 253, 9, "enum_NEXT_SYNTAX"], [253, 254, 9, "enum_NEXT_SYNTAX"], [254, 256, 9, "enum_NEXT_SYNTAX"], [256, 257, 9, "enum_NEXT_SYNTAX"], [257, 258, 9, "enum_NEXT_SYNTAX"], [258, 259, 9, "enum_NEXT_SYNTAX"], [259, 261, 9, "enum_NEXT_SYNTAX"], [261, 262, 9, "enum_NEXT_SYNTAX"], [263, 245, 10, "enum_LAST_LEXICAL_USE"], [262, 263, 9, "enum_NEXT_SYNTAX"], [263, 264, 9, "enum_NEXT_SYNTAX"], [264, 265, 9, "enum_NEXT_SYNTAX"], [265, 266, 9, "enum_NEXT_SYNTAX"], [266, 267, 9, "enum_NEXT_SYNTAX"], [267, 268, 9, "enum_NEXT_SYNTAX"], [268, 269, 9, "enum_NEXT_SYNTAX"], [269, 270, 9, "enum_NEXT_SYNTAX"], [270, 272, 9, "enum_NEXT_SYNTAX"], [273, 257, 10, "enum_LAST_LEXICAL_USE"], [272, 273, 9, "enum_NEXT_SYNTAX"], [273, 274, 9, "enum_NEXT_SYNTAX"], [275, 189, 10, "enum_LAST_LEXICAL_USE"], [274, 275, 9, "enum_NEXT_SYNTAX"], [275, 276, 9, "enum_NEXT_SYNTAX"], [276, 277, 9, "enum_NEXT_SYNTAX"], [277, 278, 9, "enum_NEXT_SYNTAX"], [278, 281, 9, "enum_NEXT_SYNTAX"], [281, 282, 9, "enum_NEXT_SYNTAX"], [282, 284, 9, "enum_NEXT_SYNTAX"], [285, 273, 10, "enum_LAST_LEXICAL_USE"], [284, 285, 9, "enum_NEXT_SYNTAX"], [285, 286, 9, "enum_NEXT_SYNTAX"], [287, 275, 10, "enum_LAST_LEXICAL_USE"], [286, 287, 9, "enum_NEXT_SYNTAX"], [287, 288, 9, "enum_NEXT_SYNTAX"], [288, 289, 9, "enum_NEXT_SYNTAX"], [289, 290, 9, "enum_NEXT_SYNTAX"], [290, 292, 9, "enum_NEXT_SYNTAX"], [292, 293, 9, "enum_NEXT_SYNTAX"], [293, 294, 9, "enum_NEXT_SYNTAX"], [295, 223, 10, "enum_LAST_LEXICAL_USE"], [294, 295, 9, "enum_NEXT_SYNTAX"], [295, 296, 9, "enum_NEXT_SYNTAX"], [297, 263, 10, "enum_LAST_LEXICAL_USE"], [296, 297, 9, "enum_NEXT_SYNTAX"], [297, 298, 9, "enum_NEXT_SYNTAX"], [298, 299, 9, "enum_NEXT_SYNTAX"], [299, 300, 9, "enum_NEXT_SYNTAX"], [300, 301, 9, "enum_NEXT_SYNTAX"], [301, 303, 9, "enum_NEXT_SYNTAX"], [303, 304, 9, "enum_NEXT_SYNTAX"], [304, 305, 9, "enum_NEXT_SYNTAX"], [305, 306, 9, "enum_NEXT_SYNTAX"], [307, 297, 10, "enum_LAST_LEXICAL_USE"], [306, 307, 9, "enum_NEXT_SYNTAX"], [307, 308, 9, "enum_NEXT_SYNTAX"], [308, 309, 9, "enum_NEXT_SYNTAX"], [309, 312, 9, "enum_NEXT_SYNTAX"], [312, 313, 9, "enum_NEXT_SYNTAX"], [314, 307, 10, "enum_LAST_LEXICAL_USE"], [313, 314, 9, "enum_NEXT_SYNTAX"], [314, 315, 9, "enum_NEXT_SYNTAX"], [315, 316, 9, "enum_NEXT_SYNTAX"], [316, 317, 9, "enum_NEXT_SYNTAX"], [317, 318, 9, "enum_NEXT_SYNTAX"], [318, 319, 9, "enum_NEXT_SYNTAX"], [319, 320, 9, "enum_NEXT_SYNTAX"], [320, 321, 9, "enum_NEXT_SYNTAX"], [321, 323, 9, "enum_NEXT_SYNTAX"], [324, 293, 10, "enum_LAST_LEXICAL_USE"], [323, 324, 9, "enum_NEXT_SYNTAX"], [324, 325, 9, "enum_NEXT_SYNTAX"], [325, 326, 9, "enum_NEXT_SYNTAX"], [326, 327, 9, "enum_NEXT_SYNTAX"], [328, 324, 10, "enum_LAST_LEXICAL_USE"], [327, 328, 9, "enum_NEXT_SYNTAX"], [328, 329, 9, "enum_NEXT_SYNTAX"], [329, 332, 9, "enum_NEXT_SYNTAX"], [333, 285, 10, "enum_LAST_LEXICAL_USE"], [332, 333, 9, "enum_NEXT_SYNTAX"], [333, 334, 9, "enum_NEXT_SYNTAX"], [335, 314, 10, "enum_LAST_LEXICAL_USE"], [334, 335, 9, "enum_NEXT_SYNTAX"], [335, 336, 9, "enum_NEXT_SYNTAX"], [336, 337, 9, "enum_NEXT_SYNTAX"], [337, 338, 9, "enum_NEXT_SYNTAX"], [338, 339, 9, "enum_NEXT_SYNTAX"], [339, 340, 9, "enum_NEXT_SYNTAX"], [341, 328, 10, "enum_LAST_LEXICAL_USE"], [340, 341, 9, "enum_NEXT_SYNTAX"], [341, 343, 9, "enum_NEXT_SYNTAX"], [344, 212, 10, "enum_LAST_LEXICAL_USE"], [343, 344, 9, "enum_NEXT_SYNTAX"], [344, 345, 9, "enum_NEXT_SYNTAX"], [345, 346, 9, "enum_NEXT_SYNTAX"], [346, 347, 9, "enum_NEXT_SYNTAX"], [348, 287, 10, "enum_LAST_LEXICAL_USE"], [347, 348, 9, "enum_NEXT_SYNTAX"], [348, 349, 9, "enum_NEXT_SYNTAX"], [349, 350, 9, "enum_NEXT_SYNTAX"], [351, 344, 10, "enum_LAST_LEXICAL_USE"], [350, 351, 9, "enum_NEXT_SYNTAX"], [351, 352, 9, "enum_NEXT_SYNTAX"], [352, 353, 9, "enum_NEXT_SYNTAX"], [353, 354, 9, "enum_NEXT_SYNTAX"], [354, 355, 9, "enum_NEXT_SYNTAX"], [355, 356, 9, "enum_NEXT_SYNTAX"], [356, 357, 9, "enum_NEXT_SYNTAX"], [357, 358, 9, "enum_NEXT_SYNTAX"], [358, 359, 9, "enum_NEXT_SYNTAX"], [359, 360, 9, "enum_NEXT_SYNTAX"], [360, 361, 9, "enum_NEXT_SYNTAX"], [362, 182, 10, "enum_LAST_LEXICAL_USE"], [361, 362, 9, "enum_NEXT_SYNTAX"], [362, 363, 9, "enum_NEXT_SYNTAX"], [363, 364, 9, "enum_NEXT_SYNTAX"], [364, 365, 9, "enum_NEXT_SYNTAX"], [365, 366, 9, "enum_NEXT_SYNTAX"], [367, 348, 10, "enum_LAST_LEXICAL_USE"], [366, 367, 9, "enum_NEXT_SYNTAX"], [367, 368, 9, "enum_NEXT_SYNTAX"], [368, 369, 9, "enum_NEXT_SYNTAX"], [370, 247, 10, "enum_LAST_LEXICAL_USE"], [369, 370, 9, "enum_NEXT_SYNTAX"], [370, 371, 9, "enum_NEXT_SYNTAX"], [371, 372, 9, "enum_NEXT_SYNTAX"], [372, 373, 9, "enum_NEXT_SYNTAX"], [373, 374, 9, "enum_NEXT_SYNTAX"], [374, 377, 9, "enum_NEXT_SYNTAX"], [378, 351, 10, "enum_LAST_LEXICAL_USE"], [377, 378, 9, "enum_NEXT_SYNTAX"], [378, 379, 9, "enum_NEXT_SYNTAX"], [379, 380, 9, "enum_NEXT_SYNTAX"], [380, 381, 9, "enum_NEXT_SYNTAX"], [381, 382, 9, "enum_NEXT_SYNTAX"], [382, 383, 9, "enum_NEXT_SYNTAX"], [11, 65, 1, "enum_CFG_NEXT"], [9, 14, 1, "enum_CFG_NEXT"], [14, 28, 1, "enum_CFG_NEXT"], [28, 32, 1, "enum_CFG_NEXT"], [32, 43, 1, "enum_CFG_NEXT"], [43, 48, 1, "enum_CFG_NEXT"], [43, 58, 1, "enum_CFG_NEXT"], [48, 28, 1, "enum_CFG_NEXT"], [58, 28, 1, "enum_CFG_NEXT"], [65, 73, 1, "enum_CFG_NEXT"], [73, 82, 1, "enum_CFG_NEXT"], [82, 93, 1, "enum_CFG_NEXT"], [93, 100, 1, "enum_CFG_NEXT"], [100, 110, 1, "enum_CFG_NEXT"], [110, 139, 1, "enum_CFG_NEXT"], [139, 377, 1, "enum_CFG_NEXT"], [15, 8, 3, "enum_LAST_WRITE"], [25, 25, 2, "enum_LAST_READ"], [25, 10, 3, "enum_LAST_WRITE"], [35, 35, 2, "enum_LAST_READ"], [35, 15, 2, "enum_LAST_READ"], [35, 8, 3, "enum_LAST_WRITE"], [33, 61, 2, "enum_LAST_READ"], [33, 44, 2, "enum_LAST_READ"], [33, 33, 3, "enum_LAST_WRITE"], [44, 61, 2, "enum_LAST_READ"], [44, 44, 2, "enum_LAST_READ"], [44, 33, 3, "enum_LAST_WRITE"], [49, 49, 2, "enum_LAST_READ"], [61, 44, 2, "enum_LAST_READ"], [61, 33, 3, "enum_LAST_WRITE"], [66, 2, 3, "enum_LAST_WRITE"], [76, 66, 2, "enum_LAST_READ"], [76, 2, 3, "enum_LAST_WRITE"], [85, 74, 3, "enum_LAST_WRITE"], [101, 76, 2, "enum_LAST_READ"], [101, 2, 3, "enum_LAST_WRITE"], [105, 83, 3, "enum_LAST_WRITE"], [111, 101, 2, "enum_LAST_READ"], [111, 2, 3, "enum_LAST_WRITE"], [118, 105, 2, "enum_LAST_READ"], [118, 83, 3, "enum_LAST_WRITE"], [124, 118, 2, "enum_LAST_READ"], [124, 83, 3, "enum_LAST_WRITE"], [129, 124, 2, "enum_LAST_READ"], [129, 83, 3, "enum_LAST_WRITE"], [134, 129, 2, "enum_LAST_READ"], [134, 83, 3, "enum_LAST_WRITE"], [140, 94, 2, "enum_LAST_READ"], [146, 85, 2, "enum_LAST_READ"], [146, 74, 3, "enum_LAST_WRITE"], [378, 140, 2, "enum_LAST_READ"], [74, 76, 4, "enum_COMPUTED_FROM"], [83, 85, 4, "enum_COMPUTED_FROM"], [33, 35, 4, "enum_COMPUTED_FROM"], [189, 194, 4, "enum_COMPUTED_FROM"], [189, 201, 4, "enum_COMPUTED_FROM"], [189, 207, 4, "enum_COMPUTED_FROM"], [223, 237, 4, "enum_COMPUTED_FROM"], [223, 225, 4, "enum_COMPUTED_FROM"], [223, 229, 4, "enum_COMPUTED_FROM"], [293, 295, 4, "enum_COMPUTED_FROM"], [293, 297, 4, "enum_COMPUTED_FROM"], [334, 341, 4, "enum_COMPUTED_FROM"], [273, 275, 4, "enum_COMPUTED_FROM"], [285, 287, 4, "enum_COMPUTED_FROM"], [324, 326, 4, "enum_COMPUTED_FROM"], [324, 328, 4, "enum_COMPUTED_FROM"], [181, 11, 11, "enum_CALLS"], [180, 8, 6, "enum_FORMAL_ARG_NAME"], [183, 10, 6, "enum_FORMAL_ARG_NAME"]], "error_location": 146, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/tourbillonpy/tourbillon-log.git", "old_path": "tourbillon/log/log.py", "hash": "cee5b1f59349b7b95b7d9c406b36eab609ef386e", "code": "def get_logfile_metrics(agent: Agent):\n    def follow(thefile: IO, run_event: Any) -> Generator[str, None, None]:\n        thefile.seek(0, 2)\n        while run_event.is_set():\n            line: str = thefile.readline()\n            if not line:\n                time.sleep(0.1)\n                continue\n            yield line\n\n    agent.run_event.wait()\n    config: Dict[str, Any] = agent.pluginconfig['log']\n    db_config: Dict[str, Any] = config['database']\n    try:\n        logger.debug('try to create the database...')\n\n        agent.create_database(db_config['name'])\n        agent.create_retention_policy('%s_rp' % db_config['name'],\n                                      db_config['duration'],\n                                      db_config['replication'],\n                                      db_config['name'])\n        logger.info('database \"%s\" created successfully', config['name'])\n    except:\n        pass\n\n    with open(config['log_file'], 'r') as f:\n        for line in follow(f, agent.run_event):\n            point: Dict[str, Any] = {\n                'measurement': config['measurement'],\n                'tags': dict(),\n                'fields': dict()\n            }\n\n            logger.debug('-'*90)\n            res: Any = re.match(config['parser']['regex'], line).groups()\n\n            for elem in config['parser']['mapping']:\n                dict_to_fill: Optional[Dict[str, Any]] = None\n                if elem['type'] == 'field':\n                    dict_to_fill = point['fields']\n                else:\n                    dict_to_fill = point['tags']\n                value = res[elem['idx']]\n                if 'cast' in elem:\n                    if elem['cast'] == 'int':\n                        value = int(value)\n                dict_to_fill[elem['name']] = value\n            logger.debug(point)\n            logger.debug('-'*90)\n            agent.push([point], config['dbname'])\n\n    logger.info('get_logfile_metrics terminated')\n", "rewrite": "ReplaceText(target='db_config' @(30,58)->(30,64))", "error_line": 21, "has_bug": true, "code_full": "import logging\nimport re\nimport time\nfrom typing import IO, Any, Dict, Generator, List, Optional\n\nlogger = logging.getLogger(__name__)\n\n\nclass Agent:\n    pluginconfig: Dict[str, Any]\n    run_event: Any\n\n    def create_database(self, name: str):\n        pass\n\n    def create_retention_policy(self, name: str, duration: str, replication: int, db_name: str):\n        pass\n\n    def push(self, points: List, dbname: str):\n        pass\n\n\ndef get_logfile_metrics(agent: Agent):\n    def follow(thefile: IO, run_event: Any) -> Generator[str, None, None]:\n        thefile.seek(0, 2)\n        while run_event.is_set():\n            line: str = thefile.readline()\n            if not line:\n                time.sleep(0.1)\n                continue\n            yield line\n\n    agent.run_event.wait()\n    config: Dict[str, Any] = agent.pluginconfig['log']\n    db_config: Dict[str, Any] = config['database']\n    try:\n        logger.debug('try to create the database...')\n\n        agent.create_database(db_config['name'])\n        agent.create_retention_policy('%s_rp' % db_config['name'],\n                                      db_config['duration'],\n                                      db_config['replication'],\n                                      db_config['name'])\n        logger.info('database \"%s\" created successfully', config['name'])\n    except:\n        pass\n\n    with open(config['log_file'], 'r') as f:\n        for line in follow(f, agent.run_event):\n            point: Dict[str, Any] = {\n                'measurement': config['measurement'],\n                'tags': dict(),\n                'fields': dict()\n            }\n\n            logger.debug('-'*90)\n            res: Any = re.match(config['parser']['regex'], line).groups()\n\n            for elem in config['parser']['mapping']:\n                dict_to_fill: Optional[Dict[str, Any]] = None\n                if elem['type'] == 'field':\n                    dict_to_fill = point['fields']\n                else:\n                    dict_to_fill = point['tags']\n                value = res[elem['idx']]\n                if 'cast' in elem:\n                    if elem['cast'] == 'int':\n                        value = int(value)\n                dict_to_fill[elem['name']] = value\n            logger.debug(point)\n            logger.debug('-'*90)\n            agent.push([point], config['dbname'])\n\n    logger.info('get_logfile_metrics terminated')\n", "error_location_char": [877, 883], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def __init__(", "self", ",", "config", ",", "source_path", ",", "resource_path", ",", "model_conf", ",", "pipe", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "_pipe", "=", "pipe", "#NEWLINE#", "self", ".", "_resources", "=", "ModelServer", ".", "acquire_resources", "(", "config", ",", "model_conf", ",", "resource_path", ")", "#NEWLINE#", "self", ".", "_model_class", "=", "ModelServer", ".", "import_model", "(", "model_conf", "[", "'path'", "]", ",", "source_path", ")", "#NEWLINE#", "self", ".", "_model", "=", "self", ".", "_model_class", "(", "self", ".", "_resources", ",", "config", "=", "config", ")"], "edges": [[1, 7, 7, "enum_FIELD"], [16, 21, 7, "enum_FIELD"], [22, 32, 7, "enum_FIELD"], [37, 50, 7, "enum_FIELD"], [53, 65, 7, "enum_FIELD"], [18, 17, 7, "enum_FIELD"], [24, 23, 7, "enum_FIELD"], [32, 28, 7, "enum_FIELD"], [39, 38, 7, "enum_FIELD"], [50, 43, 7, "enum_FIELD"], [55, 54, 7, "enum_FIELD"], [65, 59, 7, "enum_FIELD"], [28, 27, 7, "enum_FIELD"], [43, 42, 7, "enum_FIELD"], [47, 46, 7, "enum_FIELD"], [47, 48, 7, "enum_FIELD"], [59, 58, 7, "enum_FIELD"], [63, 62, 7, "enum_FIELD"], [66, 68, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 16, 9, "enum_NEXT_SYNTAX"], [17, 2, 10, "enum_LAST_LEXICAL_USE"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [21, 12, 10, "enum_LAST_LEXICAL_USE"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [23, 17, 10, "enum_LAST_LEXICAL_USE"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [31, 4, 10, "enum_LAST_LEXICAL_USE"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [33, 10, 10, "enum_LAST_LEXICAL_USE"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [35, 8, 10, "enum_LAST_LEXICAL_USE"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [38, 23, 10, "enum_LAST_LEXICAL_USE"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [42, 27, 10, "enum_LAST_LEXICAL_USE"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [46, 33, 10, "enum_LAST_LEXICAL_USE"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [51, 6, 10, "enum_LAST_LEXICAL_USE"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [54, 38, 10, "enum_LAST_LEXICAL_USE"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [58, 54, 10, "enum_LAST_LEXICAL_USE"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [62, 58, 10, "enum_LAST_LEXICAL_USE"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [68, 31, 10, "enum_LAST_LEXICAL_USE"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [7, 16, 1, "enum_CFG_NEXT"], [16, 22, 1, "enum_CFG_NEXT"], [22, 37, 1, "enum_CFG_NEXT"], [37, 53, 1, "enum_CFG_NEXT"], [21, 12, 3, "enum_LAST_WRITE"], [17, 2, 3, "enum_LAST_WRITE"], [31, 4, 3, "enum_LAST_WRITE"], [33, 10, 3, "enum_LAST_WRITE"], [35, 8, 3, "enum_LAST_WRITE"], [23, 17, 2, "enum_LAST_READ"], [23, 2, 3, "enum_LAST_WRITE"], [42, 27, 2, "enum_LAST_READ"], [46, 33, 2, "enum_LAST_READ"], [46, 10, 3, "enum_LAST_WRITE"], [51, 6, 3, "enum_LAST_WRITE"], [38, 23, 2, "enum_LAST_READ"], [38, 2, 3, "enum_LAST_WRITE"], [58, 38, 2, "enum_LAST_READ"], [58, 2, 3, "enum_LAST_WRITE"], [62, 58, 2, "enum_LAST_READ"], [62, 2, 3, "enum_LAST_WRITE"], [68, 31, 2, "enum_LAST_READ"], [68, 4, 3, "enum_LAST_WRITE"], [54, 62, 2, "enum_LAST_READ"], [54, 2, 3, "enum_LAST_WRITE"], [18, 21, 4, "enum_COMPUTED_FROM"], [24, 31, 4, "enum_COMPUTED_FROM"], [24, 33, 4, "enum_COMPUTED_FROM"], [24, 35, 4, "enum_COMPUTED_FROM"], [24, 27, 4, "enum_COMPUTED_FROM"], [39, 51, 4, "enum_COMPUTED_FROM"], [39, 42, 4, "enum_COMPUTED_FROM"], [39, 46, 4, "enum_COMPUTED_FROM"], [55, 58, 4, "enum_COMPUTED_FROM"], [55, 62, 4, "enum_COMPUTED_FROM"], [55, 68, 4, "enum_COMPUTED_FROM"]], "error_location": 68, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/mmcdermo/pressurize.git", "old_path": "pressurize/model/model_server.py", "hash": "a5373cd338db37c225d15c61e3531fae1dc3b8ef", "code": "def __init__(self, config: Dict[str, Any], source_path: str, resource_path: str, model_conf: Dict[str, Any], pipe: Any):\n    self._pipe = pipe\n    self._resources = ModelServer.acquire_resources(config, model_conf, resource_path)\n    self._model_class = ModelServer.import_model(model_conf['path'], source_path)\n    self._model = self._model_class(self._resources, config=config)\n", "rewrite": "ReplaceText(target='model_conf' @(36,64)->(36,70))", "error_line": 4, "has_bug": true, "code_full": "from typing import Any, Dict, Type\n\n\nclass Model:\n    def __init__(self, resources: Any, config: Dict[str, Any]):\n        pass\n\n\nclass ModelServer:\n    @staticmethod\n    def acquire_resources(config: Dict[str, Any], model_conf: Dict[str, Any], resource_path: str) -> Any:\n        pass\n\n    @staticmethod\n    def import_model(model_path: str, source_path: str) -> Type[Model]:\n        return Model\n\n\nclass Class:\n    _pipe: Any\n    _resources: Any\n    _model_class: Any\n    _model: Any\n\n    def __init__(self, config: Dict[str, Any], source_path: str, resource_path: str, model_conf: Dict[str, Any], pipe: Any):\n        self._pipe = pipe\n        self._resources = ModelServer.acquire_resources(config, model_conf, resource_path)\n        self._model_class = ModelServer.import_model(model_conf['path'], source_path)\n        self._model = self._model_class(self._resources, config=config)\n", "error_location_char": [372, 378], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def design(", "u", ",", "y", ",", "y_iv", ",", "Td", ",", "C", ",", "L", ")", ":", "#NEWLINE#", "#INDENT#", "N", "=", "len", "(", "u", ")", "#NEWLINE#", "n", "=", "len", "(", "Td", ")", "#NEWLINE#", "t", "=", "np", ".", "linspace", "(", "0", ",", "(", "N", "-", "1", ")", ",", "N", ")", "#NEWLINE#", "t", ".", "shape", "=", "(", "1", ",", "N", ")", "#NEWLINE#", "uf", "=", "vrft", ".", "filter", "(", "L", ",", "u", ")", "#NEWLINE#", "(", "Atd", ",", "Btd", ",", "Ctd", ",", "Dtd", ")", "=", "vrft", ".", "mtf2ss", "(", "Td", ")", "#NEWLINE#", "(", "rv", ",", "_", ",", "flagvr", ")", "=", "vrft", ".", "stbinv", "(", "Atd", ",", "Btd", ",", "Ctd", ",", "Dtd", ",", "y", ".", "T", ",", "t", ")", "#NEWLINE#", "rv", "=", "rv", ".", "T", "#NEWLINE#", "(", "rv_iv", ",", "_", ",", "_", ")", "=", "vrft", ".", "stbinv", "(", "Atd", ",", "Btd", ",", "Ctd", ",", "Dtd", ",", "y_iv", ".", "T", ",", "t", ")", "#NEWLINE#", "rv_iv", "=", "rv_iv", ".", "T", "#NEWLINE#", "if", "(", "flagvr", "==", "0", ")", ":", "#NEWLINE#", "#INDENT#", "N", "=", "rv", ".", "shape", "[", "0", "]", "#NEWLINE#", "y", "=", "y", "[", "(", "0", ":", "N", ",", ":", ")", "]", "#NEWLINE#", "y_iv", "=", "y_iv", "[", "(", "0", ":", "N", ",", ":", ")", "]", "#NEWLINE#", "ebar", "=", "(", "rv", "-", "y", ")", "#NEWLINE#", "ebar_iv", "=", "(", "rv", "-", "y_iv", ")", "#NEWLINE#", "uf", "=", "uf", "[", "(", "0", ":", "N", ",", ":", ")", "]", "#NEWLINE#", "nbpar", "=", "np", ".", "zeros", "(", "(", "n", ",", "n", ")", ")", "#NEWLINE#", "for", "i", "in", "range", "(", "0", ",", "n", ")", ":", "#NEWLINE#", "#INDENT#", "for", "j", "in", "range", "(", "0", ",", "n", ")", ":", "#NEWLINE#", "#INDENT#", "nbpar", "[", "i", "]", "[", "j", "]", "=", "len", "(", "C", "[", "i", "]", "[", "j", "]", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "p_tot", "=", "int", "(", "np", ".", "sum", "(", "nbpar", ")", ")", "#NEWLINE#", "phi_iN_list", "=", "[", "]", "#NEWLINE#", "csi_iN_list", "=", "[", "]", "#NEWLINE#", "for", "i", "in", "range", "(", "0", ",", "n", ")", ":", "#NEWLINE#", "#INDENT#", "phi_iN", "=", "np", ".", "empty", "(", "(", "N", ",", "0", ")", ")", "#NEWLINE#", "csi_iN", "=", "np", ".", "empty", "(", "(", "N", ",", "0", ")", ")", "#NEWLINE#", "for", "j", "in", "range", "(", "0", ",", "n", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "len", "(", "C", "[", "i", "]", "[", "j", "]", ")", ">", "0", ")", ":", "#NEWLINE#", "#INDENT#", "phi_ijN", "=", "vrft", ".", "filter", "(", "C", "[", "i", "]", "[", "j", "]", ",", "ebar", "[", "(", ":", ",", "j", ":", "(", "j", "+", "1", ")", ")", "]", ")", "#NEWLINE#", "csi_ijN", "=", "vrft", ".", "filter", "(", "C", "[", "i", "]", "[", "j", "]", ",", "ebar_iv", "[", "(", ":", ",", "j", ":", "(", "j", "+", "1", ")", ")", "]", ")", "#NEWLINE#", "phi_iN", "=", "np", ".", "concatenate", "(", "(", "phi_iN", ",", "phi_ijN", ")", ",", "axis", "=", "1", ")", "#NEWLINE#", "csi_iN", "=", "np", ".", "concatenate", "(", "(", "csi_iN", ",", "csi_ijN", ")", ",", "axis", "=", "1", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "phi_iN_list", ".", "append", "(", "phi_iN", ")", "#NEWLINE#", "csi_iN_list", ".", "append", "(", "csi_iN", ")", "#NEWLINE#", "#UNINDENT#", "Phi_vrf", "=", "np", ".", "empty", "(", "(", "0", ",", "p_tot", ")", ")", "#NEWLINE#", "Csi_vrf", "=", "np", ".", "empty", "(", "(", "0", ",", "p_tot", ")", ")", "#NEWLINE#", "for", "i", "in", "range", "(", "0", ",", "n", ")", ":", "#NEWLINE#", "#INDENT#", "Phi_row", "=", "np", ".", "empty", "(", "(", "N", ",", "0", ")", ")", "#NEWLINE#", "Csi_row", "=", "np", ".", "empty", "(", "(", "N", ",", "0", ")", ")", "#NEWLINE#", "for", "j", "in", "range", "(", "0", ",", "n", ")", ":", "#NEWLINE#", "#INDENT#", "Phi_ij", "=", "vrft", ".", "colfilter", "(", "L", "[", "i", "]", "[", "j", "]", ",", "phi_iN_list", "[", "j", "]", ")", "#NEWLINE#", "Csi_ij", "=", "vrft", ".", "colfilter", "(", "L", "[", "i", "]", "[", "j", "]", ",", "csi_iN_list", "[", "j", "]", ")", "#NEWLINE#", "Phi_row", "=", "np", ".", "concatenate", "(", "(", "Phi_row", ",", "Phi_ij", ")", ",", "axis", "=", "1", ")", "#NEWLINE#", "Csi_row", "=", "np", ".", "concatenate", "(", "(", "Csi_row", ",", "Csi_ij", ")", ",", "axis", "=", "1", ")", "#NEWLINE#", "#UNINDENT#", "Phi_vrf", "=", "np", ".", "concatenate", "(", "(", "Phi_vrf", ",", "Phi_row", ")", ",", "axis", "=", "0", ")", "#NEWLINE#", "Csi_vrf", "=", "np", ".", "concatenate", "(", "(", "Csi_vrf", ",", "Csi_row", ")", ",", "axis", "=", "0", ")", "#NEWLINE#", "#UNINDENT#", "Uf", "=", "np", ".", "empty", "(", "(", "0", ",", "1", ")", ")", "#NEWLINE#", "for", "i", "in", "range", "(", "0", ",", "n", ")", ":", "#NEWLINE#", "#INDENT#", "Uf", "=", "np", ".", "concatenate", "(", "(", "Uf", ",", "uf", "[", "(", ":", ",", "i", ":", "(", "i", "+", "1", ")", ")", "]", ")", ",", "axis", "=", "0", ")", "#NEWLINE#", "#UNINDENT#", "Z", "=", "np", ".", "matmul", "(", "Csi_vrf", ".", "T", ",", "Phi_vrf", ")", "#NEWLINE#", "Y", "=", "np", ".", "matmul", "(", "Csi_vrf", ".", "T", ",", "Uf", ")", "#NEWLINE#", "p", "=", "np", ".", "linalg", ".", "solve", "(", "Z", ".", "T", ",", "Y", ")", "#NEWLINE#", "return", "p", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "flagvr", "==", "1", ")", ":", "#NEWLINE#", "#INDENT#", "print", "(", "'It was not possible to calculate the virtual reference. The inversion algorithm has failed.'", ")", "#NEWLINE#", "p", "=", "np", ".", "empty", "(", "(", "0", ",", "0", ")", ")", "#NEWLINE#", "return", "p", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "flagvr", "==", "2", ")", ":", "#NEWLINE#", "#INDENT#", "print", "(", "'The inverse of the reference model Td(z) is unstable. It is not recommended to proceed with the VRFT method, so the algorithm was aborted!'", ")", "#NEWLINE#", "p", "=", "np", ".", "empty", "(", "(", "0", ",", "0", ")", ")", "#NEWLINE#", "return", "p"], "edges": [[1, 7, 7, "enum_FIELD"], [16, 20, 7, "enum_FIELD"], [23, 27, 7, "enum_FIELD"], [30, 38, 7, "enum_FIELD"], [47, 54, 7, "enum_FIELD"], [57, 65, 7, "enum_FIELD"], [68, 82, 7, "enum_FIELD"], [85, 103, 7, "enum_FIELD"], [112, 116, 7, "enum_FIELD"], [118, 136, 7, "enum_FIELD"], [145, 149, 7, "enum_FIELD"], [158, 155, 7, "enum_FIELD"], [20, 19, 7, "enum_FIELD"], [27, 26, 7, "enum_FIELD"], [38, 34, 7, "enum_FIELD"], [49, 48, 7, "enum_FIELD"], [65, 61, 7, "enum_FIELD"], [82, 80, 7, "enum_FIELD"], [103, 95, 7, "enum_FIELD"], [116, 115, 7, "enum_FIELD"], [136, 128, 7, "enum_FIELD"], [149, 148, 7, "enum_FIELD"], [155, 154, 7, "enum_FIELD"], [160, 166, 7, "enum_FIELD"], [169, 173, 7, "enum_FIELD"], [182, 186, 7, "enum_FIELD"], [195, 200, 7, "enum_FIELD"], [203, 208, 7, "enum_FIELD"], [211, 215, 7, "enum_FIELD"], [224, 230, 7, "enum_FIELD"], [240, 239, 7, "enum_FIELD"], [240, 244, 7, "enum_FIELD"], [282, 286, 7, "enum_FIELD"], [294, 297, 7, "enum_FIELD"], [299, 302, 7, "enum_FIELD"], [307, 306, 7, "enum_FIELD"], [307, 311, 7, "enum_FIELD"], [483, 489, 7, "enum_FIELD"], [496, 502, 7, "enum_FIELD"], [512, 511, 7, "enum_FIELD"], [512, 516, 7, "enum_FIELD"], [669, 675, 7, "enum_FIELD"], [685, 684, 7, "enum_FIELD"], [685, 689, 7, "enum_FIELD"], [725, 735, 7, "enum_FIELD"], [738, 748, 7, "enum_FIELD"], [751, 763, 7, "enum_FIELD"], [767, 768, 7, "enum_FIELD"], [781, 778, 7, "enum_FIELD"], [34, 33, 7, "enum_FIELD"], [41, 40, 7, "enum_FIELD"], [41, 42, 7, "enum_FIELD"], [61, 60, 7, "enum_FIELD"], [80, 79, 7, "enum_FIELD"], [95, 94, 7, "enum_FIELD"], [107, 106, 7, "enum_FIELD"], [128, 127, 7, "enum_FIELD"], [140, 139, 7, "enum_FIELD"], [166, 164, 7, "enum_FIELD"], [166, 167, 7, "enum_FIELD"], [173, 172, 7, "enum_FIELD"], [173, 178, 7, "enum_FIELD"], [186, 185, 7, "enum_FIELD"], [186, 191, 7, "enum_FIELD"], [200, 199, 7, "enum_FIELD"], [200, 201, 7, "enum_FIELD"], [208, 207, 7, "enum_FIELD"], [208, 209, 7, "enum_FIELD"], [215, 214, 7, "enum_FIELD"], [215, 220, 7, "enum_FIELD"], [230, 228, 7, "enum_FIELD"], [244, 241, 7, "enum_FIELD"], [252, 251, 7, "enum_FIELD"], [252, 256, 7, "enum_FIELD"], [286, 285, 7, "enum_FIELD"], [311, 308, 7, "enum_FIELD"], [316, 322, 7, "enum_FIELD"], [329, 335, 7, "enum_FIELD"], [345, 344, 7, "enum_FIELD"], [345, 349, 7, "enum_FIELD"], [468, 472, 7, "enum_FIELD"], [475, 479, 7, "enum_FIELD"], [489, 487, 7, "enum_FIELD"], [502, 500, 7, "enum_FIELD"], [516, 513, 7, "enum_FIELD"], [521, 527, 7, "enum_FIELD"], [534, 540, 7, "enum_FIELD"], [550, 549, 7, "enum_FIELD"], [550, 554, 7, "enum_FIELD"], [634, 646, 7, "enum_FIELD"], [651, 663, 7, "enum_FIELD"], [675, 673, 7, "enum_FIELD"], [689, 686, 7, "enum_FIELD"], [694, 719, 7, "enum_FIELD"], [735, 729, 7, "enum_FIELD"], [748, 742, 7, "enum_FIELD"], [763, 757, 7, "enum_FIELD"], [778, 777, 7, "enum_FIELD"], [783, 785, 7, "enum_FIELD"], [788, 794, 7, "enum_FIELD"], [802, 803, 7, "enum_FIELD"], [810, 813, 7, "enum_FIELD"], [164, 163, 7, "enum_FIELD"], [228, 227, 7, "enum_FIELD"], [256, 253, 7, "enum_FIELD"], [261, 271, 7, "enum_FIELD"], [290, 288, 7, "enum_FIELD"], [322, 320, 7, "enum_FIELD"], [335, 333, 7, "enum_FIELD"], [349, 346, 7, "enum_FIELD"], [355, 367, 7, "enum_FIELD"], [472, 470, 7, "enum_FIELD"], [479, 477, 7, "enum_FIELD"], [487, 486, 7, "enum_FIELD"], [500, 499, 7, "enum_FIELD"], [527, 525, 7, "enum_FIELD"], [540, 538, 7, "enum_FIELD"], [554, 551, 7, "enum_FIELD"], [559, 573, 7, "enum_FIELD"], [579, 593, 7, "enum_FIELD"], [599, 611, 7, "enum_FIELD"], [616, 628, 7, "enum_FIELD"], [646, 638, 7, "enum_FIELD"], [663, 655, 7, "enum_FIELD"], [673, 672, 7, "enum_FIELD"], [719, 698, 7, "enum_FIELD"], [729, 728, 7, "enum_FIELD"], [733, 732, 7, "enum_FIELD"], [742, 741, 7, "enum_FIELD"], [746, 745, 7, "enum_FIELD"], [757, 755, 7, "enum_FIELD"], [761, 760, 7, "enum_FIELD"], [785, 784, 7, "enum_FIELD"], [794, 792, 7, "enum_FIELD"], [813, 812, 7, "enum_FIELD"], [818, 820, 7, "enum_FIELD"], [823, 829, 7, "enum_FIELD"], [837, 838, 7, "enum_FIELD"], [176, 175, 7, "enum_FIELD"], [176, 177, 7, "enum_FIELD"], [189, 188, 7, "enum_FIELD"], [189, 190, 7, "enum_FIELD"], [218, 217, 7, "enum_FIELD"], [218, 219, 7, "enum_FIELD"], [266, 263, 7, "enum_FIELD"], [266, 267, 7, "enum_FIELD"], [271, 270, 7, "enum_FIELD"], [288, 287, 7, "enum_FIELD"], [320, 319, 7, "enum_FIELD"], [333, 332, 7, "enum_FIELD"], [367, 358, 7, "enum_FIELD"], [372, 386, 7, "enum_FIELD"], [402, 416, 7, "enum_FIELD"], [432, 444, 7, "enum_FIELD"], [449, 461, 7, "enum_FIELD"], [470, 469, 7, "enum_FIELD"], [477, 476, 7, "enum_FIELD"], [525, 524, 7, "enum_FIELD"], [538, 537, 7, "enum_FIELD"], [573, 563, 7, "enum_FIELD"], [593, 583, 7, "enum_FIELD"], [611, 603, 7, "enum_FIELD"], [628, 620, 7, "enum_FIELD"], [638, 637, 7, "enum_FIELD"], [647, 649, 7, "enum_FIELD"], [655, 654, 7, "enum_FIELD"], [664, 666, 7, "enum_FIELD"], [698, 697, 7, "enum_FIELD"], [720, 722, 7, "enum_FIELD"], [755, 754, 7, "enum_FIELD"], [792, 791, 7, "enum_FIELD"], [820, 819, 7, "enum_FIELD"], [829, 827, 7, "enum_FIELD"], [263, 262, 7, "enum_FIELD"], [263, 264, 7, "enum_FIELD"], [276, 273, 7, "enum_FIELD"], [276, 277, 7, "enum_FIELD"], [358, 357, 7, "enum_FIELD"], [386, 376, 7, "enum_FIELD"], [416, 406, 7, "enum_FIELD"], [444, 436, 7, "enum_FIELD"], [461, 453, 7, "enum_FIELD"], [563, 562, 7, "enum_FIELD"], [570, 567, 7, "enum_FIELD"], [570, 571, 7, "enum_FIELD"], [575, 574, 7, "enum_FIELD"], [575, 576, 7, "enum_FIELD"], [583, 582, 7, "enum_FIELD"], [590, 587, 7, "enum_FIELD"], [590, 591, 7, "enum_FIELD"], [595, 594, 7, "enum_FIELD"], [595, 596, 7, "enum_FIELD"], [603, 602, 7, "enum_FIELD"], [612, 614, 7, "enum_FIELD"], [620, 619, 7, "enum_FIELD"], [629, 631, 7, "enum_FIELD"], [705, 704, 7, "enum_FIELD"], [705, 708, 7, "enum_FIELD"], [827, 826, 7, "enum_FIELD"], [273, 272, 7, "enum_FIELD"], [273, 274, 7, "enum_FIELD"], [363, 360, 7, "enum_FIELD"], [363, 364, 7, "enum_FIELD"], [376, 375, 7, "enum_FIELD"], [383, 380, 7, "enum_FIELD"], [383, 384, 7, "enum_FIELD"], [388, 387, 7, "enum_FIELD"], [388, 391, 7, "enum_FIELD"], [406, 405, 7, "enum_FIELD"], [413, 410, 7, "enum_FIELD"], [413, 414, 7, "enum_FIELD"], [418, 417, 7, "enum_FIELD"], [418, 421, 7, "enum_FIELD"], [436, 435, 7, "enum_FIELD"], [445, 447, 7, "enum_FIELD"], [453, 452, 7, "enum_FIELD"], [462, 464, 7, "enum_FIELD"], [567, 566, 7, "enum_FIELD"], [567, 568, 7, "enum_FIELD"], [587, 586, 7, "enum_FIELD"], [587, 588, 7, "enum_FIELD"], [360, 359, 7, "enum_FIELD"], [360, 361, 7, "enum_FIELD"], [380, 379, 7, "enum_FIELD"], [380, 381, 7, "enum_FIELD"], [410, 409, 7, "enum_FIELD"], [410, 411, 7, "enum_FIELD"], [710, 709, 7, "enum_FIELD"], [710, 713, 7, "enum_FIELD"], [393, 392, 7, "enum_FIELD"], [393, 396, 7, "enum_FIELD"], [423, 422, 7, "enum_FIELD"], [423, 426, 7, "enum_FIELD"], [713, 712, 7, "enum_FIELD"], [713, 714, 7, "enum_FIELD"], [396, 395, 7, "enum_FIELD"], [396, 397, 7, "enum_FIELD"], [426, 425, 7, "enum_FIELD"], [426, 427, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [21, 2, 10, "enum_LAST_LEXICAL_USE"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [26, 19, 10, "enum_LAST_LEXICAL_USE"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [28, 8, 10, "enum_LAST_LEXICAL_USE"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [40, 17, 10, "enum_LAST_LEXICAL_USE"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [45, 40, 10, "enum_LAST_LEXICAL_USE"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [48, 31, 10, "enum_LAST_LEXICAL_USE"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [55, 45, 10, "enum_LAST_LEXICAL_USE"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [64, 12, 10, "enum_LAST_LEXICAL_USE"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [66, 21, 10, "enum_LAST_LEXICAL_USE"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [79, 60, 10, "enum_LAST_LEXICAL_USE"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [83, 28, 10, "enum_LAST_LEXICAL_USE"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [94, 79, 10, "enum_LAST_LEXICAL_USE"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [98, 70, 10, "enum_LAST_LEXICAL_USE"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [100, 72, 10, "enum_LAST_LEXICAL_USE"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [102, 74, 10, "enum_LAST_LEXICAL_USE"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [104, 76, 10, "enum_LAST_LEXICAL_USE"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [106, 4, 10, "enum_LAST_LEXICAL_USE"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [110, 48, 10, "enum_LAST_LEXICAL_USE"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [113, 87, 10, "enum_LAST_LEXICAL_USE"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [115, 113, 10, "enum_LAST_LEXICAL_USE"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [122, 89, 10, "enum_LAST_LEXICAL_USE"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [124, 122, 10, "enum_LAST_LEXICAL_USE"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [127, 94, 10, "enum_LAST_LEXICAL_USE"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [131, 98, 10, "enum_LAST_LEXICAL_USE"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [133, 100, 10, "enum_LAST_LEXICAL_USE"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [135, 102, 10, "enum_LAST_LEXICAL_USE"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [137, 104, 10, "enum_LAST_LEXICAL_USE"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [139, 6, 10, "enum_LAST_LEXICAL_USE"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [143, 110, 10, "enum_LAST_LEXICAL_USE"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [146, 120, 10, "enum_LAST_LEXICAL_USE"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [148, 146, 10, "enum_LAST_LEXICAL_USE"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [154, 91, 10, "enum_LAST_LEXICAL_USE"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 160, 9, "enum_NEXT_SYNTAX"], [161, 55, 10, "enum_LAST_LEXICAL_USE"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [163, 115, 10, "enum_LAST_LEXICAL_USE"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [170, 106, 10, "enum_LAST_LEXICAL_USE"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [172, 170, 10, "enum_LAST_LEXICAL_USE"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [175, 176, 9, "enum_NEXT_SYNTAX"], [177, 161, 10, "enum_LAST_LEXICAL_USE"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [183, 139, 10, "enum_LAST_LEXICAL_USE"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 184, 9, "enum_NEXT_SYNTAX"], [185, 183, 10, "enum_LAST_LEXICAL_USE"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [187, 188, 9, "enum_NEXT_SYNTAX"], [188, 189, 9, "enum_NEXT_SYNTAX"], [190, 177, 10, "enum_LAST_LEXICAL_USE"], [189, 190, 9, "enum_NEXT_SYNTAX"], [190, 191, 9, "enum_NEXT_SYNTAX"], [191, 192, 9, "enum_NEXT_SYNTAX"], [192, 193, 9, "enum_NEXT_SYNTAX"], [193, 194, 9, "enum_NEXT_SYNTAX"], [194, 195, 9, "enum_NEXT_SYNTAX"], [195, 196, 9, "enum_NEXT_SYNTAX"], [196, 197, 9, "enum_NEXT_SYNTAX"], [197, 198, 9, "enum_NEXT_SYNTAX"], [199, 163, 10, "enum_LAST_LEXICAL_USE"], [198, 199, 9, "enum_NEXT_SYNTAX"], [199, 200, 9, "enum_NEXT_SYNTAX"], [201, 172, 10, "enum_LAST_LEXICAL_USE"], [200, 201, 9, "enum_NEXT_SYNTAX"], [201, 202, 9, "enum_NEXT_SYNTAX"], [202, 203, 9, "enum_NEXT_SYNTAX"], [203, 204, 9, "enum_NEXT_SYNTAX"], [204, 205, 9, "enum_NEXT_SYNTAX"], [205, 206, 9, "enum_NEXT_SYNTAX"], [207, 199, 10, "enum_LAST_LEXICAL_USE"], [206, 207, 9, "enum_NEXT_SYNTAX"], [207, 208, 9, "enum_NEXT_SYNTAX"], [209, 185, 10, "enum_LAST_LEXICAL_USE"], [208, 209, 9, "enum_NEXT_SYNTAX"], [209, 210, 9, "enum_NEXT_SYNTAX"], [210, 211, 9, "enum_NEXT_SYNTAX"], [212, 58, 10, "enum_LAST_LEXICAL_USE"], [211, 212, 9, "enum_NEXT_SYNTAX"], [212, 213, 9, "enum_NEXT_SYNTAX"], [214, 212, 10, "enum_LAST_LEXICAL_USE"], [213, 214, 9, "enum_NEXT_SYNTAX"], [214, 215, 9, "enum_NEXT_SYNTAX"], [215, 216, 9, "enum_NEXT_SYNTAX"], [216, 217, 9, "enum_NEXT_SYNTAX"], [217, 218, 9, "enum_NEXT_SYNTAX"], [219, 190, 10, "enum_LAST_LEXICAL_USE"], [218, 219, 9, "enum_NEXT_SYNTAX"], [219, 220, 9, "enum_NEXT_SYNTAX"], [220, 221, 9, "enum_NEXT_SYNTAX"], [221, 222, 9, "enum_NEXT_SYNTAX"], [222, 223, 9, "enum_NEXT_SYNTAX"], [223, 224, 9, "enum_NEXT_SYNTAX"], [224, 225, 9, "enum_NEXT_SYNTAX"], [225, 226, 9, "enum_NEXT_SYNTAX"], [227, 33, 10, "enum_LAST_LEXICAL_USE"], [226, 227, 9, "enum_NEXT_SYNTAX"], [227, 228, 9, "enum_NEXT_SYNTAX"], [228, 229, 9, "enum_NEXT_SYNTAX"], [229, 230, 9, "enum_NEXT_SYNTAX"], [230, 231, 9, "enum_NEXT_SYNTAX"], [232, 24, 10, "enum_LAST_LEXICAL_USE"], [231, 232, 9, "enum_NEXT_SYNTAX"], [232, 233, 9, "enum_NEXT_SYNTAX"], [234, 232, 10, "enum_LAST_LEXICAL_USE"], [233, 234, 9, "enum_NEXT_SYNTAX"], [234, 235, 9, "enum_NEXT_SYNTAX"], [235, 236, 9, "enum_NEXT_SYNTAX"], [236, 238, 9, "enum_NEXT_SYNTAX"], [238, 239, 9, "enum_NEXT_SYNTAX"], [239, 240, 9, "enum_NEXT_SYNTAX"], [240, 241, 9, "enum_NEXT_SYNTAX"], [241, 242, 9, "enum_NEXT_SYNTAX"], [242, 243, 9, "enum_NEXT_SYNTAX"], [243, 244, 9, "enum_NEXT_SYNTAX"], [245, 234, 10, "enum_LAST_LEXICAL_USE"], [244, 245, 9, "enum_NEXT_SYNTAX"], [245, 246, 9, "enum_NEXT_SYNTAX"], [246, 247, 9, "enum_NEXT_SYNTAX"], [247, 250, 9, "enum_NEXT_SYNTAX"], [250, 251, 9, "enum_NEXT_SYNTAX"], [251, 252, 9, "enum_NEXT_SYNTAX"], [253, 241, 10, "enum_LAST_LEXICAL_USE"], [252, 253, 9, "enum_NEXT_SYNTAX"], [253, 254, 9, "enum_NEXT_SYNTAX"], [254, 255, 9, "enum_NEXT_SYNTAX"], [255, 256, 9, "enum_NEXT_SYNTAX"], [257, 245, 10, "enum_LAST_LEXICAL_USE"], [256, 257, 9, "enum_NEXT_SYNTAX"], [257, 258, 9, "enum_NEXT_SYNTAX"], [258, 259, 9, "enum_NEXT_SYNTAX"], [259, 261, 9, "enum_NEXT_SYNTAX"], [262, 225, 10, "enum_LAST_LEXICAL_USE"], [261, 262, 9, "enum_NEXT_SYNTAX"], [262, 263, 9, "enum_NEXT_SYNTAX"], [264, 239, 10, "enum_LAST_LEXICAL_USE"], [263, 264, 9, "enum_NEXT_SYNTAX"], [264, 265, 9, "enum_NEXT_SYNTAX"], [265, 266, 9, "enum_NEXT_SYNTAX"], [267, 251, 10, "enum_LAST_LEXICAL_USE"], [266, 267, 9, "enum_NEXT_SYNTAX"], [267, 268, 9, "enum_NEXT_SYNTAX"], [268, 269, 9, "enum_NEXT_SYNTAX"], [270, 26, 10, "enum_LAST_LEXICAL_USE"], [269, 270, 9, "enum_NEXT_SYNTAX"], [270, 271, 9, "enum_NEXT_SYNTAX"], [272, 10, 10, "enum_LAST_LEXICAL_USE"], [271, 272, 9, "enum_NEXT_SYNTAX"], [272, 273, 9, "enum_NEXT_SYNTAX"], [274, 264, 10, "enum_LAST_LEXICAL_USE"], [273, 274, 9, "enum_NEXT_SYNTAX"], [274, 275, 9, "enum_NEXT_SYNTAX"], [275, 276, 9, "enum_NEXT_SYNTAX"], [277, 267, 10, "enum_LAST_LEXICAL_USE"], [276, 277, 9, "enum_NEXT_SYNTAX"], [277, 278, 9, "enum_NEXT_SYNTAX"], [278, 279, 9, "enum_NEXT_SYNTAX"], [279, 282, 9, "enum_NEXT_SYNTAX"], [282, 283, 9, "enum_NEXT_SYNTAX"], [283, 284, 9, "enum_NEXT_SYNTAX"], [284, 285, 9, "enum_NEXT_SYNTAX"], [285, 286, 9, "enum_NEXT_SYNTAX"], [287, 227, 10, "enum_LAST_LEXICAL_USE"], [286, 287, 9, "enum_NEXT_SYNTAX"], [287, 288, 9, "enum_NEXT_SYNTAX"], [288, 289, 9, "enum_NEXT_SYNTAX"], [289, 290, 9, "enum_NEXT_SYNTAX"], [291, 262, 10, "enum_LAST_LEXICAL_USE"], [290, 291, 9, "enum_NEXT_SYNTAX"], [291, 292, 9, "enum_NEXT_SYNTAX"], [292, 293, 9, "enum_NEXT_SYNTAX"], [293, 294, 9, "enum_NEXT_SYNTAX"], [294, 295, 9, "enum_NEXT_SYNTAX"], [295, 296, 9, "enum_NEXT_SYNTAX"], [296, 297, 9, "enum_NEXT_SYNTAX"], [297, 298, 9, "enum_NEXT_SYNTAX"], [298, 299, 9, "enum_NEXT_SYNTAX"], [299, 300, 9, "enum_NEXT_SYNTAX"], [300, 301, 9, "enum_NEXT_SYNTAX"], [301, 302, 9, "enum_NEXT_SYNTAX"], [302, 303, 9, "enum_NEXT_SYNTAX"], [303, 305, 9, "enum_NEXT_SYNTAX"], [306, 274, 10, "enum_LAST_LEXICAL_USE"], [305, 306, 9, "enum_NEXT_SYNTAX"], [306, 307, 9, "enum_NEXT_SYNTAX"], [308, 253, 10, "enum_LAST_LEXICAL_USE"], [307, 308, 9, "enum_NEXT_SYNTAX"], [308, 309, 9, "enum_NEXT_SYNTAX"], [309, 310, 9, "enum_NEXT_SYNTAX"], [310, 311, 9, "enum_NEXT_SYNTAX"], [312, 257, 10, "enum_LAST_LEXICAL_USE"], [311, 312, 9, "enum_NEXT_SYNTAX"], [312, 313, 9, "enum_NEXT_SYNTAX"], [313, 314, 9, "enum_NEXT_SYNTAX"], [314, 316, 9, "enum_NEXT_SYNTAX"], [316, 317, 9, "enum_NEXT_SYNTAX"], [317, 318, 9, "enum_NEXT_SYNTAX"], [319, 287, 10, "enum_LAST_LEXICAL_USE"], [318, 319, 9, "enum_NEXT_SYNTAX"], [319, 320, 9, "enum_NEXT_SYNTAX"], [320, 321, 9, "enum_NEXT_SYNTAX"], [321, 322, 9, "enum_NEXT_SYNTAX"], [322, 323, 9, "enum_NEXT_SYNTAX"], [324, 219, 10, "enum_LAST_LEXICAL_USE"], [323, 324, 9, "enum_NEXT_SYNTAX"], [324, 325, 9, "enum_NEXT_SYNTAX"], [325, 326, 9, "enum_NEXT_SYNTAX"], [326, 327, 9, "enum_NEXT_SYNTAX"], [327, 328, 9, "enum_NEXT_SYNTAX"], [328, 329, 9, "enum_NEXT_SYNTAX"], [329, 330, 9, "enum_NEXT_SYNTAX"], [330, 331, 9, "enum_NEXT_SYNTAX"], [332, 319, 10, "enum_LAST_LEXICAL_USE"], [331, 332, 9, "enum_NEXT_SYNTAX"], [332, 333, 9, "enum_NEXT_SYNTAX"], [333, 334, 9, "enum_NEXT_SYNTAX"], [334, 335, 9, "enum_NEXT_SYNTAX"], [335, 336, 9, "enum_NEXT_SYNTAX"], [337, 324, 10, "enum_LAST_LEXICAL_USE"], [336, 337, 9, "enum_NEXT_SYNTAX"], [337, 338, 9, "enum_NEXT_SYNTAX"], [338, 339, 9, "enum_NEXT_SYNTAX"], [339, 340, 9, "enum_NEXT_SYNTAX"], [340, 341, 9, "enum_NEXT_SYNTAX"], [341, 343, 9, "enum_NEXT_SYNTAX"], [344, 277, 10, "enum_LAST_LEXICAL_USE"], [343, 344, 9, "enum_NEXT_SYNTAX"], [344, 345, 9, "enum_NEXT_SYNTAX"], [346, 308, 10, "enum_LAST_LEXICAL_USE"], [345, 346, 9, "enum_NEXT_SYNTAX"], [346, 347, 9, "enum_NEXT_SYNTAX"], [347, 348, 9, "enum_NEXT_SYNTAX"], [348, 349, 9, "enum_NEXT_SYNTAX"], [350, 312, 10, "enum_LAST_LEXICAL_USE"], [349, 350, 9, "enum_NEXT_SYNTAX"], [350, 351, 9, "enum_NEXT_SYNTAX"], [351, 352, 9, "enum_NEXT_SYNTAX"], [352, 355, 9, "enum_NEXT_SYNTAX"], [355, 356, 9, "enum_NEXT_SYNTAX"], [357, 270, 10, "enum_LAST_LEXICAL_USE"], [356, 357, 9, "enum_NEXT_SYNTAX"], [357, 358, 9, "enum_NEXT_SYNTAX"], [359, 272, 10, "enum_LAST_LEXICAL_USE"], [358, 359, 9, "enum_NEXT_SYNTAX"], [359, 360, 9, "enum_NEXT_SYNTAX"], [361, 306, 10, "enum_LAST_LEXICAL_USE"], [360, 361, 9, "enum_NEXT_SYNTAX"], [361, 362, 9, "enum_NEXT_SYNTAX"], [362, 363, 9, "enum_NEXT_SYNTAX"], [364, 344, 10, "enum_LAST_LEXICAL_USE"], [363, 364, 9, "enum_NEXT_SYNTAX"], [364, 365, 9, "enum_NEXT_SYNTAX"], [365, 366, 9, "enum_NEXT_SYNTAX"], [366, 367, 9, "enum_NEXT_SYNTAX"], [367, 368, 9, "enum_NEXT_SYNTAX"], [368, 369, 9, "enum_NEXT_SYNTAX"], [369, 370, 9, "enum_NEXT_SYNTAX"], [370, 372, 9, "enum_NEXT_SYNTAX"], [372, 373, 9, "enum_NEXT_SYNTAX"], [373, 374, 9, "enum_NEXT_SYNTAX"], [375, 127, 10, "enum_LAST_LEXICAL_USE"], [374, 375, 9, "enum_NEXT_SYNTAX"], [375, 376, 9, "enum_NEXT_SYNTAX"], [376, 377, 9, "enum_NEXT_SYNTAX"], [377, 378, 9, "enum_NEXT_SYNTAX"], [379, 359, 10, "enum_LAST_LEXICAL_USE"], [378, 379, 9, "enum_NEXT_SYNTAX"], [379, 380, 9, "enum_NEXT_SYNTAX"], [381, 361, 10, "enum_LAST_LEXICAL_USE"], [380, 381, 9, "enum_NEXT_SYNTAX"], [381, 382, 9, "enum_NEXT_SYNTAX"], [382, 383, 9, "enum_NEXT_SYNTAX"], [384, 364, 10, "enum_LAST_LEXICAL_USE"], [383, 384, 9, "enum_NEXT_SYNTAX"], [384, 385, 9, "enum_NEXT_SYNTAX"], [385, 386, 9, "enum_NEXT_SYNTAX"], [387, 196, 10, "enum_LAST_LEXICAL_USE"], [386, 387, 9, "enum_NEXT_SYNTAX"], [387, 388, 9, "enum_NEXT_SYNTAX"], [388, 389, 9, "enum_NEXT_SYNTAX"], [389, 390, 9, "enum_NEXT_SYNTAX"], [390, 391, 9, "enum_NEXT_SYNTAX"], [392, 384, 10, "enum_LAST_LEXICAL_USE"], [391, 392, 9, "enum_NEXT_SYNTAX"], [392, 393, 9, "enum_NEXT_SYNTAX"], [393, 394, 9, "enum_NEXT_SYNTAX"], [395, 392, 10, "enum_LAST_LEXICAL_USE"], [394, 395, 9, "enum_NEXT_SYNTAX"], [395, 396, 9, "enum_NEXT_SYNTAX"], [396, 397, 9, "enum_NEXT_SYNTAX"], [397, 398, 9, "enum_NEXT_SYNTAX"], [398, 399, 9, "enum_NEXT_SYNTAX"], [399, 400, 9, "enum_NEXT_SYNTAX"], [400, 401, 9, "enum_NEXT_SYNTAX"], [401, 402, 9, "enum_NEXT_SYNTAX"], [402, 403, 9, "enum_NEXT_SYNTAX"], [403, 404, 9, "enum_NEXT_SYNTAX"], [405, 375, 10, "enum_LAST_LEXICAL_USE"], [404, 405, 9, "enum_NEXT_SYNTAX"], [405, 406, 9, "enum_NEXT_SYNTAX"], [406, 407, 9, "enum_NEXT_SYNTAX"], [407, 408, 9, "enum_NEXT_SYNTAX"], [409, 379, 10, "enum_LAST_LEXICAL_USE"], [408, 409, 9, "enum_NEXT_SYNTAX"], [409, 410, 9, "enum_NEXT_SYNTAX"], [411, 381, 10, "enum_LAST_LEXICAL_USE"], [410, 411, 9, "enum_NEXT_SYNTAX"], [411, 412, 9, "enum_NEXT_SYNTAX"], [412, 413, 9, "enum_NEXT_SYNTAX"], [414, 395, 10, "enum_LAST_LEXICAL_USE"], [413, 414, 9, "enum_NEXT_SYNTAX"], [414, 415, 9, "enum_NEXT_SYNTAX"], [415, 416, 9, "enum_NEXT_SYNTAX"], [417, 204, 10, "enum_LAST_LEXICAL_USE"], [416, 417, 9, "enum_NEXT_SYNTAX"], [417, 418, 9, "enum_NEXT_SYNTAX"], [418, 419, 9, "enum_NEXT_SYNTAX"], [419, 420, 9, "enum_NEXT_SYNTAX"], [420, 421, 9, "enum_NEXT_SYNTAX"], [422, 414, 10, "enum_LAST_LEXICAL_USE"], [421, 422, 9, "enum_NEXT_SYNTAX"], [422, 423, 9, "enum_NEXT_SYNTAX"], [423, 424, 9, "enum_NEXT_SYNTAX"], [425, 422, 10, "enum_LAST_LEXICAL_USE"], [424, 425, 9, "enum_NEXT_SYNTAX"], [425, 426, 9, "enum_NEXT_SYNTAX"], [426, 427, 9, "enum_NEXT_SYNTAX"], [427, 428, 9, "enum_NEXT_SYNTAX"], [428, 429, 9, "enum_NEXT_SYNTAX"], [429, 430, 9, "enum_NEXT_SYNTAX"], [430, 431, 9, "enum_NEXT_SYNTAX"], [431, 432, 9, "enum_NEXT_SYNTAX"], [433, 317, 10, "enum_LAST_LEXICAL_USE"], [432, 433, 9, "enum_NEXT_SYNTAX"], [433, 434, 9, "enum_NEXT_SYNTAX"], [435, 332, 10, "enum_LAST_LEXICAL_USE"], [434, 435, 9, "enum_NEXT_SYNTAX"], [435, 436, 9, "enum_NEXT_SYNTAX"], [436, 437, 9, "enum_NEXT_SYNTAX"], [437, 438, 9, "enum_NEXT_SYNTAX"], [438, 439, 9, "enum_NEXT_SYNTAX"], [440, 433, 10, "enum_LAST_LEXICAL_USE"], [439, 440, 9, "enum_NEXT_SYNTAX"], [440, 441, 9, "enum_NEXT_SYNTAX"], [442, 373, 10, "enum_LAST_LEXICAL_USE"], [441, 442, 9, "enum_NEXT_SYNTAX"], [442, 443, 9, "enum_NEXT_SYNTAX"], [443, 444, 9, "enum_NEXT_SYNTAX"], [444, 445, 9, "enum_NEXT_SYNTAX"], [445, 446, 9, "enum_NEXT_SYNTAX"], [446, 447, 9, "enum_NEXT_SYNTAX"], [447, 448, 9, "enum_NEXT_SYNTAX"], [448, 449, 9, "enum_NEXT_SYNTAX"], [450, 330, 10, "enum_LAST_LEXICAL_USE"], [449, 450, 9, "enum_NEXT_SYNTAX"], [450, 451, 9, "enum_NEXT_SYNTAX"], [452, 435, 10, "enum_LAST_LEXICAL_USE"], [451, 452, 9, "enum_NEXT_SYNTAX"], [452, 453, 9, "enum_NEXT_SYNTAX"], [453, 454, 9, "enum_NEXT_SYNTAX"], [454, 455, 9, "enum_NEXT_SYNTAX"], [455, 456, 9, "enum_NEXT_SYNTAX"], [457, 450, 10, "enum_LAST_LEXICAL_USE"], [456, 457, 9, "enum_NEXT_SYNTAX"], [457, 458, 9, "enum_NEXT_SYNTAX"], [459, 403, 10, "enum_LAST_LEXICAL_USE"], [458, 459, 9, "enum_NEXT_SYNTAX"], [459, 460, 9, "enum_NEXT_SYNTAX"], [460, 461, 9, "enum_NEXT_SYNTAX"], [461, 462, 9, "enum_NEXT_SYNTAX"], [462, 463, 9, "enum_NEXT_SYNTAX"], [463, 464, 9, "enum_NEXT_SYNTAX"], [464, 465, 9, "enum_NEXT_SYNTAX"], [465, 468, 9, "enum_NEXT_SYNTAX"], [469, 295, 10, "enum_LAST_LEXICAL_USE"], [468, 469, 9, "enum_NEXT_SYNTAX"], [469, 470, 9, "enum_NEXT_SYNTAX"], [470, 471, 9, "enum_NEXT_SYNTAX"], [471, 472, 9, "enum_NEXT_SYNTAX"], [473, 440, 10, "enum_LAST_LEXICAL_USE"], [472, 473, 9, "enum_NEXT_SYNTAX"], [473, 474, 9, "enum_NEXT_SYNTAX"], [474, 475, 9, "enum_NEXT_SYNTAX"], [476, 300, 10, "enum_LAST_LEXICAL_USE"], [475, 476, 9, "enum_NEXT_SYNTAX"], [476, 477, 9, "enum_NEXT_SYNTAX"], [477, 478, 9, "enum_NEXT_SYNTAX"], [478, 479, 9, "enum_NEXT_SYNTAX"], [480, 457, 10, "enum_LAST_LEXICAL_USE"], [479, 480, 9, "enum_NEXT_SYNTAX"], [480, 481, 9, "enum_NEXT_SYNTAX"], [481, 483, 9, "enum_NEXT_SYNTAX"], [483, 484, 9, "enum_NEXT_SYNTAX"], [484, 485, 9, "enum_NEXT_SYNTAX"], [486, 452, 10, "enum_LAST_LEXICAL_USE"], [485, 486, 9, "enum_NEXT_SYNTAX"], [486, 487, 9, "enum_NEXT_SYNTAX"], [487, 488, 9, "enum_NEXT_SYNTAX"], [488, 489, 9, "enum_NEXT_SYNTAX"], [489, 490, 9, "enum_NEXT_SYNTAX"], [490, 491, 9, "enum_NEXT_SYNTAX"], [491, 492, 9, "enum_NEXT_SYNTAX"], [493, 283, 10, "enum_LAST_LEXICAL_USE"], [492, 493, 9, "enum_NEXT_SYNTAX"], [493, 494, 9, "enum_NEXT_SYNTAX"], [494, 495, 9, "enum_NEXT_SYNTAX"], [495, 496, 9, "enum_NEXT_SYNTAX"], [496, 497, 9, "enum_NEXT_SYNTAX"], [497, 498, 9, "enum_NEXT_SYNTAX"], [499, 486, 10, "enum_LAST_LEXICAL_USE"], [498, 499, 9, "enum_NEXT_SYNTAX"], [499, 500, 9, "enum_NEXT_SYNTAX"], [500, 501, 9, "enum_NEXT_SYNTAX"], [501, 502, 9, "enum_NEXT_SYNTAX"], [502, 503, 9, "enum_NEXT_SYNTAX"], [503, 504, 9, "enum_NEXT_SYNTAX"], [504, 505, 9, "enum_NEXT_SYNTAX"], [506, 493, 10, "enum_LAST_LEXICAL_USE"], [505, 506, 9, "enum_NEXT_SYNTAX"], [506, 507, 9, "enum_NEXT_SYNTAX"], [507, 508, 9, "enum_NEXT_SYNTAX"], [508, 510, 9, "enum_NEXT_SYNTAX"], [511, 411, 10, "enum_LAST_LEXICAL_USE"], [510, 511, 9, "enum_NEXT_SYNTAX"], [511, 512, 9, "enum_NEXT_SYNTAX"], [513, 346, 10, "enum_LAST_LEXICAL_USE"], [512, 513, 9, "enum_NEXT_SYNTAX"], [513, 514, 9, "enum_NEXT_SYNTAX"], [514, 515, 9, "enum_NEXT_SYNTAX"], [515, 516, 9, "enum_NEXT_SYNTAX"], [517, 350, 10, "enum_LAST_LEXICAL_USE"], [516, 517, 9, "enum_NEXT_SYNTAX"], [517, 518, 9, "enum_NEXT_SYNTAX"], [518, 519, 9, "enum_NEXT_SYNTAX"], [519, 521, 9, "enum_NEXT_SYNTAX"], [521, 522, 9, "enum_NEXT_SYNTAX"], [522, 523, 9, "enum_NEXT_SYNTAX"], [524, 499, 10, "enum_LAST_LEXICAL_USE"], [523, 524, 9, "enum_NEXT_SYNTAX"], [524, 525, 9, "enum_NEXT_SYNTAX"], [525, 526, 9, "enum_NEXT_SYNTAX"], [526, 527, 9, "enum_NEXT_SYNTAX"], [527, 528, 9, "enum_NEXT_SYNTAX"], [529, 337, 10, "enum_LAST_LEXICAL_USE"], [528, 529, 9, "enum_NEXT_SYNTAX"], [529, 530, 9, "enum_NEXT_SYNTAX"], [530, 531, 9, "enum_NEXT_SYNTAX"], [531, 532, 9, "enum_NEXT_SYNTAX"], [532, 533, 9, "enum_NEXT_SYNTAX"], [533, 534, 9, "enum_NEXT_SYNTAX"], [534, 535, 9, "enum_NEXT_SYNTAX"], [535, 536, 9, "enum_NEXT_SYNTAX"], [537, 524, 10, "enum_LAST_LEXICAL_USE"], [536, 537, 9, "enum_NEXT_SYNTAX"], [537, 538, 9, "enum_NEXT_SYNTAX"], [538, 539, 9, "enum_NEXT_SYNTAX"], [539, 540, 9, "enum_NEXT_SYNTAX"], [540, 541, 9, "enum_NEXT_SYNTAX"], [542, 529, 10, "enum_LAST_LEXICAL_USE"], [541, 542, 9, "enum_NEXT_SYNTAX"], [542, 543, 9, "enum_NEXT_SYNTAX"], [543, 544, 9, "enum_NEXT_SYNTAX"], [544, 545, 9, "enum_NEXT_SYNTAX"], [545, 546, 9, "enum_NEXT_SYNTAX"], [546, 548, 9, "enum_NEXT_SYNTAX"], [549, 425, 10, "enum_LAST_LEXICAL_USE"], [548, 549, 9, "enum_NEXT_SYNTAX"], [549, 550, 9, "enum_NEXT_SYNTAX"], [551, 513, 10, "enum_LAST_LEXICAL_USE"], [550, 551, 9, "enum_NEXT_SYNTAX"], [551, 552, 9, "enum_NEXT_SYNTAX"], [552, 553, 9, "enum_NEXT_SYNTAX"], [553, 554, 9, "enum_NEXT_SYNTAX"], [555, 517, 10, "enum_LAST_LEXICAL_USE"], [554, 555, 9, "enum_NEXT_SYNTAX"], [555, 556, 9, "enum_NEXT_SYNTAX"], [556, 557, 9, "enum_NEXT_SYNTAX"], [557, 559, 9, "enum_NEXT_SYNTAX"], [559, 560, 9, "enum_NEXT_SYNTAX"], [560, 561, 9, "enum_NEXT_SYNTAX"], [562, 405, 10, "enum_LAST_LEXICAL_USE"], [561, 562, 9, "enum_NEXT_SYNTAX"], [562, 563, 9, "enum_NEXT_SYNTAX"], [563, 564, 9, "enum_NEXT_SYNTAX"], [564, 565, 9, "enum_NEXT_SYNTAX"], [566, 64, 10, "enum_LAST_LEXICAL_USE"], [565, 566, 9, "enum_NEXT_SYNTAX"], [566, 567, 9, "enum_NEXT_SYNTAX"], [568, 511, 10, "enum_LAST_LEXICAL_USE"], [567, 568, 9, "enum_NEXT_SYNTAX"], [568, 569, 9, "enum_NEXT_SYNTAX"], [569, 570, 9, "enum_NEXT_SYNTAX"], [571, 549, 10, "enum_LAST_LEXICAL_USE"], [570, 571, 9, "enum_NEXT_SYNTAX"], [571, 572, 9, "enum_NEXT_SYNTAX"], [572, 573, 9, "enum_NEXT_SYNTAX"], [574, 469, 10, "enum_LAST_LEXICAL_USE"], [573, 574, 9, "enum_NEXT_SYNTAX"], [574, 575, 9, "enum_NEXT_SYNTAX"], [576, 571, 10, "enum_LAST_LEXICAL_USE"], [575, 576, 9, "enum_NEXT_SYNTAX"], [576, 577, 9, "enum_NEXT_SYNTAX"], [577, 578, 9, "enum_NEXT_SYNTAX"], [578, 579, 9, "enum_NEXT_SYNTAX"], [579, 580, 9, "enum_NEXT_SYNTAX"], [580, 581, 9, "enum_NEXT_SYNTAX"], [582, 562, 10, "enum_LAST_LEXICAL_USE"], [581, 582, 9, "enum_NEXT_SYNTAX"], [582, 583, 9, "enum_NEXT_SYNTAX"], [583, 584, 9, "enum_NEXT_SYNTAX"], [584, 585, 9, "enum_NEXT_SYNTAX"], [586, 566, 10, "enum_LAST_LEXICAL_USE"], [585, 586, 9, "enum_NEXT_SYNTAX"], [586, 587, 9, "enum_NEXT_SYNTAX"], [588, 568, 10, "enum_LAST_LEXICAL_USE"], [587, 588, 9, "enum_NEXT_SYNTAX"], [588, 589, 9, "enum_NEXT_SYNTAX"], [589, 590, 9, "enum_NEXT_SYNTAX"], [591, 576, 10, "enum_LAST_LEXICAL_USE"], [590, 591, 9, "enum_NEXT_SYNTAX"], [591, 592, 9, "enum_NEXT_SYNTAX"], [592, 593, 9, "enum_NEXT_SYNTAX"], [594, 476, 10, "enum_LAST_LEXICAL_USE"], [593, 594, 9, "enum_NEXT_SYNTAX"], [594, 595, 9, "enum_NEXT_SYNTAX"], [596, 591, 10, "enum_LAST_LEXICAL_USE"], [595, 596, 9, "enum_NEXT_SYNTAX"], [596, 597, 9, "enum_NEXT_SYNTAX"], [597, 598, 9, "enum_NEXT_SYNTAX"], [598, 599, 9, "enum_NEXT_SYNTAX"], [600, 522, 10, "enum_LAST_LEXICAL_USE"], [599, 600, 9, "enum_NEXT_SYNTAX"], [600, 601, 9, "enum_NEXT_SYNTAX"], [602, 537, 10, "enum_LAST_LEXICAL_USE"], [601, 602, 9, "enum_NEXT_SYNTAX"], [602, 603, 9, "enum_NEXT_SYNTAX"], [603, 604, 9, "enum_NEXT_SYNTAX"], [604, 605, 9, "enum_NEXT_SYNTAX"], [605, 606, 9, "enum_NEXT_SYNTAX"], [607, 600, 10, "enum_LAST_LEXICAL_USE"], [606, 607, 9, "enum_NEXT_SYNTAX"], [607, 608, 9, "enum_NEXT_SYNTAX"], [609, 560, 10, "enum_LAST_LEXICAL_USE"], [608, 609, 9, "enum_NEXT_SYNTAX"], [609, 610, 9, "enum_NEXT_SYNTAX"], [610, 611, 9, "enum_NEXT_SYNTAX"], [611, 612, 9, "enum_NEXT_SYNTAX"], [612, 613, 9, "enum_NEXT_SYNTAX"], [613, 614, 9, "enum_NEXT_SYNTAX"], [614, 615, 9, "enum_NEXT_SYNTAX"], [615, 616, 9, "enum_NEXT_SYNTAX"], [617, 535, 10, "enum_LAST_LEXICAL_USE"], [616, 617, 9, "enum_NEXT_SYNTAX"], [617, 618, 9, "enum_NEXT_SYNTAX"], [619, 602, 10, "enum_LAST_LEXICAL_USE"], [618, 619, 9, "enum_NEXT_SYNTAX"], [619, 620, 9, "enum_NEXT_SYNTAX"], [620, 621, 9, "enum_NEXT_SYNTAX"], [621, 622, 9, "enum_NEXT_SYNTAX"], [622, 623, 9, "enum_NEXT_SYNTAX"], [624, 617, 10, "enum_LAST_LEXICAL_USE"], [623, 624, 9, "enum_NEXT_SYNTAX"], [624, 625, 9, "enum_NEXT_SYNTAX"], [626, 580, 10, "enum_LAST_LEXICAL_USE"], [625, 626, 9, "enum_NEXT_SYNTAX"], [626, 627, 9, "enum_NEXT_SYNTAX"], [627, 628, 9, "enum_NEXT_SYNTAX"], [628, 629, 9, "enum_NEXT_SYNTAX"], [629, 630, 9, "enum_NEXT_SYNTAX"], [630, 631, 9, "enum_NEXT_SYNTAX"], [631, 632, 9, "enum_NEXT_SYNTAX"], [632, 634, 9, "enum_NEXT_SYNTAX"], [635, 484, 10, "enum_LAST_LEXICAL_USE"], [634, 635, 9, "enum_NEXT_SYNTAX"], [635, 636, 9, "enum_NEXT_SYNTAX"], [637, 619, 10, "enum_LAST_LEXICAL_USE"], [636, 637, 9, "enum_NEXT_SYNTAX"], [637, 638, 9, "enum_NEXT_SYNTAX"], [638, 639, 9, "enum_NEXT_SYNTAX"], [639, 640, 9, "enum_NEXT_SYNTAX"], [640, 641, 9, "enum_NEXT_SYNTAX"], [642, 635, 10, "enum_LAST_LEXICAL_USE"], [641, 642, 9, "enum_NEXT_SYNTAX"], [642, 643, 9, "enum_NEXT_SYNTAX"], [644, 607, 10, "enum_LAST_LEXICAL_USE"], [643, 644, 9, "enum_NEXT_SYNTAX"], [644, 645, 9, "enum_NEXT_SYNTAX"], [645, 646, 9, "enum_NEXT_SYNTAX"], [646, 647, 9, "enum_NEXT_SYNTAX"], [647, 648, 9, "enum_NEXT_SYNTAX"], [648, 649, 9, "enum_NEXT_SYNTAX"], [649, 650, 9, "enum_NEXT_SYNTAX"], [650, 651, 9, "enum_NEXT_SYNTAX"], [652, 497, 10, "enum_LAST_LEXICAL_USE"], [651, 652, 9, "enum_NEXT_SYNTAX"], [652, 653, 9, "enum_NEXT_SYNTAX"], [654, 637, 10, "enum_LAST_LEXICAL_USE"], [653, 654, 9, "enum_NEXT_SYNTAX"], [654, 655, 9, "enum_NEXT_SYNTAX"], [655, 656, 9, "enum_NEXT_SYNTAX"], [656, 657, 9, "enum_NEXT_SYNTAX"], [657, 658, 9, "enum_NEXT_SYNTAX"], [659, 652, 10, "enum_LAST_LEXICAL_USE"], [658, 659, 9, "enum_NEXT_SYNTAX"], [659, 660, 9, "enum_NEXT_SYNTAX"], [661, 624, 10, "enum_LAST_LEXICAL_USE"], [660, 661, 9, "enum_NEXT_SYNTAX"], [661, 662, 9, "enum_NEXT_SYNTAX"], [662, 663, 9, "enum_NEXT_SYNTAX"], [663, 664, 9, "enum_NEXT_SYNTAX"], [664, 665, 9, "enum_NEXT_SYNTAX"], [665, 666, 9, "enum_NEXT_SYNTAX"], [666, 667, 9, "enum_NEXT_SYNTAX"], [667, 669, 9, "enum_NEXT_SYNTAX"], [669, 670, 9, "enum_NEXT_SYNTAX"], [670, 671, 9, "enum_NEXT_SYNTAX"], [672, 654, 10, "enum_LAST_LEXICAL_USE"], [671, 672, 9, "enum_NEXT_SYNTAX"], [672, 673, 9, "enum_NEXT_SYNTAX"], [673, 674, 9, "enum_NEXT_SYNTAX"], [674, 675, 9, "enum_NEXT_SYNTAX"], [675, 676, 9, "enum_NEXT_SYNTAX"], [676, 677, 9, "enum_NEXT_SYNTAX"], [677, 678, 9, "enum_NEXT_SYNTAX"], [678, 679, 9, "enum_NEXT_SYNTAX"], [679, 680, 9, "enum_NEXT_SYNTAX"], [680, 681, 9, "enum_NEXT_SYNTAX"], [681, 683, 9, "enum_NEXT_SYNTAX"], [684, 588, 10, "enum_LAST_LEXICAL_USE"], [683, 684, 9, "enum_NEXT_SYNTAX"], [684, 685, 9, "enum_NEXT_SYNTAX"], [686, 551, 10, "enum_LAST_LEXICAL_USE"], [685, 686, 9, "enum_NEXT_SYNTAX"], [686, 687, 9, "enum_NEXT_SYNTAX"], [687, 688, 9, "enum_NEXT_SYNTAX"], [688, 689, 9, "enum_NEXT_SYNTAX"], [690, 555, 10, "enum_LAST_LEXICAL_USE"], [689, 690, 9, "enum_NEXT_SYNTAX"], [690, 691, 9, "enum_NEXT_SYNTAX"], [691, 692, 9, "enum_NEXT_SYNTAX"], [692, 694, 9, "enum_NEXT_SYNTAX"], [695, 670, 10, "enum_LAST_LEXICAL_USE"], [694, 695, 9, "enum_NEXT_SYNTAX"], [695, 696, 9, "enum_NEXT_SYNTAX"], [697, 672, 10, "enum_LAST_LEXICAL_USE"], [696, 697, 9, "enum_NEXT_SYNTAX"], [697, 698, 9, "enum_NEXT_SYNTAX"], [698, 699, 9, "enum_NEXT_SYNTAX"], [699, 700, 9, "enum_NEXT_SYNTAX"], [700, 701, 9, "enum_NEXT_SYNTAX"], [702, 695, 10, "enum_LAST_LEXICAL_USE"], [701, 702, 9, "enum_NEXT_SYNTAX"], [702, 703, 9, "enum_NEXT_SYNTAX"], [704, 214, 10, "enum_LAST_LEXICAL_USE"], [703, 704, 9, "enum_NEXT_SYNTAX"], [704, 705, 9, "enum_NEXT_SYNTAX"], [705, 706, 9, "enum_NEXT_SYNTAX"], [706, 707, 9, "enum_NEXT_SYNTAX"], [707, 708, 9, "enum_NEXT_SYNTAX"], [709, 684, 10, "enum_LAST_LEXICAL_USE"], [708, 709, 9, "enum_NEXT_SYNTAX"], [709, 710, 9, "enum_NEXT_SYNTAX"], [710, 711, 9, "enum_NEXT_SYNTAX"], [712, 709, 10, "enum_LAST_LEXICAL_USE"], [711, 712, 9, "enum_NEXT_SYNTAX"], [712, 713, 9, "enum_NEXT_SYNTAX"], [713, 714, 9, "enum_NEXT_SYNTAX"], [714, 715, 9, "enum_NEXT_SYNTAX"], [715, 716, 9, "enum_NEXT_SYNTAX"], [716, 717, 9, "enum_NEXT_SYNTAX"], [717, 718, 9, "enum_NEXT_SYNTAX"], [718, 719, 9, "enum_NEXT_SYNTAX"], [719, 720, 9, "enum_NEXT_SYNTAX"], [720, 721, 9, "enum_NEXT_SYNTAX"], [721, 722, 9, "enum_NEXT_SYNTAX"], [722, 723, 9, "enum_NEXT_SYNTAX"], [723, 725, 9, "enum_NEXT_SYNTAX"], [725, 726, 9, "enum_NEXT_SYNTAX"], [726, 727, 9, "enum_NEXT_SYNTAX"], [728, 697, 10, "enum_LAST_LEXICAL_USE"], [727, 728, 9, "enum_NEXT_SYNTAX"], [728, 729, 9, "enum_NEXT_SYNTAX"], [729, 730, 9, "enum_NEXT_SYNTAX"], [730, 731, 9, "enum_NEXT_SYNTAX"], [732, 659, 10, "enum_LAST_LEXICAL_USE"], [731, 732, 9, "enum_NEXT_SYNTAX"], [732, 733, 9, "enum_NEXT_SYNTAX"], [733, 734, 9, "enum_NEXT_SYNTAX"], [734, 735, 9, "enum_NEXT_SYNTAX"], [736, 642, 10, "enum_LAST_LEXICAL_USE"], [735, 736, 9, "enum_NEXT_SYNTAX"], [736, 737, 9, "enum_NEXT_SYNTAX"], [737, 738, 9, "enum_NEXT_SYNTAX"], [738, 739, 9, "enum_NEXT_SYNTAX"], [739, 740, 9, "enum_NEXT_SYNTAX"], [741, 728, 10, "enum_LAST_LEXICAL_USE"], [740, 741, 9, "enum_NEXT_SYNTAX"], [741, 742, 9, "enum_NEXT_SYNTAX"], [742, 743, 9, "enum_NEXT_SYNTAX"], [743, 744, 9, "enum_NEXT_SYNTAX"], [745, 732, 10, "enum_LAST_LEXICAL_USE"], [744, 745, 9, "enum_NEXT_SYNTAX"], [745, 746, 9, "enum_NEXT_SYNTAX"], [746, 747, 9, "enum_NEXT_SYNTAX"], [747, 748, 9, "enum_NEXT_SYNTAX"], [749, 702, 10, "enum_LAST_LEXICAL_USE"], [748, 749, 9, "enum_NEXT_SYNTAX"], [749, 750, 9, "enum_NEXT_SYNTAX"], [750, 751, 9, "enum_NEXT_SYNTAX"], [751, 752, 9, "enum_NEXT_SYNTAX"], [752, 753, 9, "enum_NEXT_SYNTAX"], [754, 741, 10, "enum_LAST_LEXICAL_USE"], [753, 754, 9, "enum_NEXT_SYNTAX"], [754, 755, 9, "enum_NEXT_SYNTAX"], [755, 756, 9, "enum_NEXT_SYNTAX"], [756, 757, 9, "enum_NEXT_SYNTAX"], [757, 758, 9, "enum_NEXT_SYNTAX"], [758, 759, 9, "enum_NEXT_SYNTAX"], [760, 726, 10, "enum_LAST_LEXICAL_USE"], [759, 760, 9, "enum_NEXT_SYNTAX"], [760, 761, 9, "enum_NEXT_SYNTAX"], [761, 762, 9, "enum_NEXT_SYNTAX"], [762, 763, 9, "enum_NEXT_SYNTAX"], [764, 739, 10, "enum_LAST_LEXICAL_USE"], [763, 764, 9, "enum_NEXT_SYNTAX"], [764, 765, 9, "enum_NEXT_SYNTAX"], [765, 767, 9, "enum_NEXT_SYNTAX"], [768, 752, 10, "enum_LAST_LEXICAL_USE"], [767, 768, 9, "enum_NEXT_SYNTAX"], [768, 771, 9, "enum_NEXT_SYNTAX"], [771, 772, 9, "enum_NEXT_SYNTAX"], [772, 775, 9, "enum_NEXT_SYNTAX"], [775, 776, 9, "enum_NEXT_SYNTAX"], [777, 154, 10, "enum_LAST_LEXICAL_USE"], [776, 777, 9, "enum_NEXT_SYNTAX"], [777, 778, 9, "enum_NEXT_SYNTAX"], [778, 779, 9, "enum_NEXT_SYNTAX"], [779, 780, 9, "enum_NEXT_SYNTAX"], [780, 781, 9, "enum_NEXT_SYNTAX"], [781, 783, 9, "enum_NEXT_SYNTAX"], [783, 784, 9, "enum_NEXT_SYNTAX"], [784, 785, 9, "enum_NEXT_SYNTAX"], [785, 786, 9, "enum_NEXT_SYNTAX"], [786, 787, 9, "enum_NEXT_SYNTAX"], [787, 788, 9, "enum_NEXT_SYNTAX"], [789, 768, 10, "enum_LAST_LEXICAL_USE"], [788, 789, 9, "enum_NEXT_SYNTAX"], [789, 790, 9, "enum_NEXT_SYNTAX"], [791, 754, 10, "enum_LAST_LEXICAL_USE"], [790, 791, 9, "enum_NEXT_SYNTAX"], [791, 792, 9, "enum_NEXT_SYNTAX"], [792, 793, 9, "enum_NEXT_SYNTAX"], [793, 794, 9, "enum_NEXT_SYNTAX"], [794, 795, 9, "enum_NEXT_SYNTAX"], [795, 796, 9, "enum_NEXT_SYNTAX"], [796, 797, 9, "enum_NEXT_SYNTAX"], [797, 798, 9, "enum_NEXT_SYNTAX"], [798, 799, 9, "enum_NEXT_SYNTAX"], [799, 800, 9, "enum_NEXT_SYNTAX"], [800, 802, 9, "enum_NEXT_SYNTAX"], [803, 789, 10, "enum_LAST_LEXICAL_USE"], [802, 803, 9, "enum_NEXT_SYNTAX"], [803, 806, 9, "enum_NEXT_SYNTAX"], [806, 807, 9, "enum_NEXT_SYNTAX"], [807, 810, 9, "enum_NEXT_SYNTAX"], [810, 811, 9, "enum_NEXT_SYNTAX"], [812, 777, 10, "enum_LAST_LEXICAL_USE"], [811, 812, 9, "enum_NEXT_SYNTAX"], [812, 813, 9, "enum_NEXT_SYNTAX"], [813, 814, 9, "enum_NEXT_SYNTAX"], [814, 815, 9, "enum_NEXT_SYNTAX"], [815, 816, 9, "enum_NEXT_SYNTAX"], [816, 818, 9, "enum_NEXT_SYNTAX"], [819, 784, 10, "enum_LAST_LEXICAL_USE"], [818, 819, 9, "enum_NEXT_SYNTAX"], [819, 820, 9, "enum_NEXT_SYNTAX"], [820, 821, 9, "enum_NEXT_SYNTAX"], [821, 822, 9, "enum_NEXT_SYNTAX"], [822, 823, 9, "enum_NEXT_SYNTAX"], [824, 803, 10, "enum_LAST_LEXICAL_USE"], [823, 824, 9, "enum_NEXT_SYNTAX"], [824, 825, 9, "enum_NEXT_SYNTAX"], [826, 791, 10, "enum_LAST_LEXICAL_USE"], [825, 826, 9, "enum_NEXT_SYNTAX"], [826, 827, 9, "enum_NEXT_SYNTAX"], [827, 828, 9, "enum_NEXT_SYNTAX"], [828, 829, 9, "enum_NEXT_SYNTAX"], [829, 830, 9, "enum_NEXT_SYNTAX"], [830, 831, 9, "enum_NEXT_SYNTAX"], [831, 832, 9, "enum_NEXT_SYNTAX"], [832, 833, 9, "enum_NEXT_SYNTAX"], [833, 834, 9, "enum_NEXT_SYNTAX"], [834, 835, 9, "enum_NEXT_SYNTAX"], [835, 837, 9, "enum_NEXT_SYNTAX"], [838, 824, 10, "enum_LAST_LEXICAL_USE"], [837, 838, 9, "enum_NEXT_SYNTAX"], [7, 16, 1, "enum_CFG_NEXT"], [16, 23, 1, "enum_CFG_NEXT"], [23, 30, 1, "enum_CFG_NEXT"], [30, 47, 1, "enum_CFG_NEXT"], [47, 57, 1, "enum_CFG_NEXT"], [57, 68, 1, "enum_CFG_NEXT"], [68, 85, 1, "enum_CFG_NEXT"], [85, 112, 1, "enum_CFG_NEXT"], [112, 118, 1, "enum_CFG_NEXT"], [118, 145, 1, "enum_CFG_NEXT"], [145, 155, 1, "enum_CFG_NEXT"], [155, 160, 1, "enum_CFG_NEXT"], [155, 778, 1, "enum_CFG_NEXT"], [160, 169, 1, "enum_CFG_NEXT"], [169, 182, 1, "enum_CFG_NEXT"], [182, 195, 1, "enum_CFG_NEXT"], [195, 203, 1, "enum_CFG_NEXT"], [203, 211, 1, "enum_CFG_NEXT"], [211, 224, 1, "enum_CFG_NEXT"], [224, 244, 1, "enum_CFG_NEXT"], [244, 239, 1, "enum_CFG_NEXT"], [239, 282, 1, "enum_CFG_NEXT"], [239, 256, 1, "enum_CFG_NEXT"], [256, 251, 1, "enum_CFG_NEXT"], [251, 239, 1, "enum_CFG_NEXT"], [251, 261, 1, "enum_CFG_NEXT"], [261, 251, 1, "enum_CFG_NEXT"], [282, 294, 1, "enum_CFG_NEXT"], [294, 299, 1, "enum_CFG_NEXT"], [299, 311, 1, "enum_CFG_NEXT"], [311, 306, 1, "enum_CFG_NEXT"], [306, 483, 1, "enum_CFG_NEXT"], [306, 316, 1, "enum_CFG_NEXT"], [316, 329, 1, "enum_CFG_NEXT"], [329, 349, 1, "enum_CFG_NEXT"], [349, 344, 1, "enum_CFG_NEXT"], [344, 468, 1, "enum_CFG_NEXT"], [344, 367, 1, "enum_CFG_NEXT"], [367, 372, 1, "enum_CFG_NEXT"], [367, 344, 1, "enum_CFG_NEXT"], [372, 402, 1, "enum_CFG_NEXT"], [402, 432, 1, "enum_CFG_NEXT"], [432, 449, 1, "enum_CFG_NEXT"], [449, 344, 1, "enum_CFG_NEXT"], [468, 475, 1, "enum_CFG_NEXT"], [475, 306, 1, "enum_CFG_NEXT"], [483, 496, 1, "enum_CFG_NEXT"], [496, 516, 1, "enum_CFG_NEXT"], [516, 511, 1, "enum_CFG_NEXT"], [511, 669, 1, "enum_CFG_NEXT"], [511, 521, 1, "enum_CFG_NEXT"], [521, 534, 1, "enum_CFG_NEXT"], [534, 554, 1, "enum_CFG_NEXT"], [554, 549, 1, "enum_CFG_NEXT"], [549, 634, 1, "enum_CFG_NEXT"], [549, 559, 1, "enum_CFG_NEXT"], [559, 579, 1, "enum_CFG_NEXT"], [579, 599, 1, "enum_CFG_NEXT"], [599, 616, 1, "enum_CFG_NEXT"], [616, 549, 1, "enum_CFG_NEXT"], [634, 651, 1, "enum_CFG_NEXT"], [651, 511, 1, "enum_CFG_NEXT"], [669, 689, 1, "enum_CFG_NEXT"], [689, 684, 1, "enum_CFG_NEXT"], [684, 725, 1, "enum_CFG_NEXT"], [684, 694, 1, "enum_CFG_NEXT"], [694, 684, 1, "enum_CFG_NEXT"], [725, 738, 1, "enum_CFG_NEXT"], [738, 751, 1, "enum_CFG_NEXT"], [751, 767, 1, "enum_CFG_NEXT"], [778, 813, 1, "enum_CFG_NEXT"], [778, 783, 1, "enum_CFG_NEXT"], [783, 788, 1, "enum_CFG_NEXT"], [788, 802, 1, "enum_CFG_NEXT"], [813, 818, 1, "enum_CFG_NEXT"], [818, 823, 1, "enum_CFG_NEXT"], [823, 837, 1, "enum_CFG_NEXT"], [21, 2, 3, "enum_LAST_WRITE"], [26, 19, 2, "enum_LAST_READ"], [28, 8, 3, "enum_LAST_WRITE"], [40, 17, 3, "enum_LAST_WRITE"], [45, 40, 2, "enum_LAST_READ"], [45, 17, 3, "enum_LAST_WRITE"], [55, 45, 2, "enum_LAST_READ"], [55, 17, 3, "enum_LAST_WRITE"], [48, 31, 3, "enum_LAST_WRITE"], [64, 12, 3, "enum_LAST_WRITE"], [66, 21, 2, "enum_LAST_READ"], [66, 2, 3, "enum_LAST_WRITE"], [79, 60, 2, "enum_LAST_READ"], [83, 28, 2, "enum_LAST_READ"], [83, 8, 3, "enum_LAST_WRITE"], [94, 79, 2, "enum_LAST_READ"], [98, 70, 3, "enum_LAST_WRITE"], [100, 72, 3, "enum_LAST_WRITE"], [102, 74, 3, "enum_LAST_WRITE"], [104, 76, 3, "enum_LAST_WRITE"], [106, 4, 3, "enum_LAST_WRITE"], [110, 48, 2, "enum_LAST_READ"], [110, 31, 3, "enum_LAST_WRITE"], [115, 87, 3, "enum_LAST_WRITE"], [113, 115, 2, "enum_LAST_READ"], [113, 87, 3, "enum_LAST_WRITE"], [127, 94, 2, "enum_LAST_READ"], [131, 98, 2, "enum_LAST_READ"], [131, 70, 3, "enum_LAST_WRITE"], [133, 100, 2, "enum_LAST_READ"], [133, 72, 3, "enum_LAST_WRITE"], [135, 102, 2, "enum_LAST_READ"], [135, 74, 3, "enum_LAST_WRITE"], [137, 104, 2, "enum_LAST_READ"], [137, 76, 3, "enum_LAST_WRITE"], [139, 6, 3, "enum_LAST_WRITE"], [143, 110, 2, "enum_LAST_READ"], [143, 31, 3, "enum_LAST_WRITE"], [122, 89, 3, "enum_LAST_WRITE"], [124, 122, 3, "enum_LAST_WRITE"], [148, 120, 3, "enum_LAST_WRITE"], [146, 148, 2, "enum_LAST_READ"], [146, 120, 3, "enum_LAST_WRITE"], [154, 91, 3, "enum_LAST_WRITE"], [163, 115, 2, "enum_LAST_READ"], [163, 113, 3, "enum_LAST_WRITE"], [161, 55, 2, "enum_LAST_READ"], [161, 17, 3, "enum_LAST_WRITE"], [172, 106, 2, "enum_LAST_READ"], [172, 4, 3, "enum_LAST_WRITE"], [177, 55, 2, "enum_LAST_READ"], [177, 161, 3, "enum_LAST_WRITE"], [170, 172, 2, "enum_LAST_READ"], [170, 4, 3, "enum_LAST_WRITE"], [185, 139, 2, "enum_LAST_READ"], [185, 6, 3, "enum_LAST_WRITE"], [190, 177, 2, "enum_LAST_READ"], [190, 161, 3, "enum_LAST_WRITE"], [183, 185, 2, "enum_LAST_READ"], [183, 6, 3, "enum_LAST_WRITE"], [199, 163, 2, "enum_LAST_READ"], [199, 113, 3, "enum_LAST_WRITE"], [201, 172, 2, "enum_LAST_READ"], [201, 170, 3, "enum_LAST_WRITE"], [207, 199, 2, "enum_LAST_READ"], [207, 113, 3, "enum_LAST_WRITE"], [209, 185, 2, "enum_LAST_READ"], [209, 183, 3, "enum_LAST_WRITE"], [214, 58, 3, "enum_LAST_WRITE"], [219, 190, 2, "enum_LAST_READ"], [219, 161, 3, "enum_LAST_WRITE"], [212, 214, 2, "enum_LAST_READ"], [212, 58, 3, "enum_LAST_WRITE"], [227, 33, 2, "enum_LAST_READ"], [232, 24, 3, "enum_LAST_WRITE"], [234, 232, 2, "enum_LAST_READ"], [234, 24, 3, "enum_LAST_WRITE"], [245, 234, 2, "enum_LAST_READ"], [245, 24, 3, "enum_LAST_WRITE"], [239, 264, 2, "enum_LAST_READ"], [239, 239, 3, "enum_LAST_WRITE"], [253, 241, 2, "enum_LAST_READ"], [253, 253, 2, "enum_LAST_READ"], [257, 245, 2, "enum_LAST_READ"], [257, 257, 2, "enum_LAST_READ"], [257, 24, 3, "enum_LAST_WRITE"], [251, 267, 2, "enum_LAST_READ"], [251, 251, 3, "enum_LAST_WRITE"], [270, 26, 2, "enum_LAST_READ"], [270, 270, 2, "enum_LAST_READ"], [272, 272, 2, "enum_LAST_READ"], [272, 10, 3, "enum_LAST_WRITE"], [274, 264, 2, "enum_LAST_READ"], [274, 239, 3, "enum_LAST_WRITE"], [277, 267, 2, "enum_LAST_READ"], [277, 251, 3, "enum_LAST_WRITE"], [262, 262, 2, "enum_LAST_READ"], [262, 225, 3, "enum_LAST_WRITE"], [264, 274, 2, "enum_LAST_READ"], [264, 239, 3, "enum_LAST_WRITE"], [267, 277, 2, "enum_LAST_READ"], [267, 251, 3, "enum_LAST_WRITE"], [287, 227, 2, "enum_LAST_READ"], [291, 262, 2, "enum_LAST_READ"], [291, 225, 3, "enum_LAST_WRITE"], [308, 241, 2, "enum_LAST_READ"], [308, 253, 2, "enum_LAST_READ"], [312, 245, 2, "enum_LAST_READ"], [312, 257, 2, "enum_LAST_READ"], [312, 24, 3, "enum_LAST_WRITE"], [306, 361, 2, "enum_LAST_READ"], [306, 411, 2, "enum_LAST_READ"], [306, 264, 2, "enum_LAST_READ"], [306, 306, 3, "enum_LAST_WRITE"], [306, 239, 3, "enum_LAST_WRITE"], [319, 332, 2, "enum_LAST_READ"], [319, 287, 2, "enum_LAST_READ"], [319, 452, 2, "enum_LAST_READ"], [324, 219, 2, "enum_LAST_READ"], [324, 337, 2, "enum_LAST_READ"], [324, 161, 3, "enum_LAST_WRITE"], [317, 473, 2, "enum_LAST_READ"], [317, 317, 3, "enum_LAST_WRITE"], [317, 433, 3, "enum_LAST_WRITE"], [332, 319, 2, "enum_LAST_READ"], [337, 324, 2, "enum_LAST_READ"], [337, 161, 3, "enum_LAST_WRITE"], [330, 480, 2, "enum_LAST_READ"], [330, 330, 3, "enum_LAST_WRITE"], [330, 450, 3, "enum_LAST_WRITE"], [346, 346, 2, "enum_LAST_READ"], [346, 308, 2, "enum_LAST_READ"], [350, 312, 2, "enum_LAST_READ"], [350, 350, 2, "enum_LAST_READ"], [350, 24, 3, "enum_LAST_WRITE"], [344, 425, 2, "enum_LAST_READ"], [344, 364, 2, "enum_LAST_READ"], [344, 267, 2, "enum_LAST_READ"], [344, 251, 3, "enum_LAST_WRITE"], [344, 344, 3, "enum_LAST_WRITE"], [357, 357, 2, "enum_LAST_READ"], [357, 270, 2, "enum_LAST_READ"], [357, 26, 2, "enum_LAST_READ"], [359, 272, 2, "enum_LAST_READ"], [359, 359, 2, "enum_LAST_READ"], [359, 409, 2, "enum_LAST_READ"], [359, 10, 3, "enum_LAST_WRITE"], [361, 361, 2, "enum_LAST_READ"], [361, 411, 2, "enum_LAST_READ"], [361, 264, 2, "enum_LAST_READ"], [361, 306, 3, "enum_LAST_WRITE"], [364, 425, 2, "enum_LAST_READ"], [364, 364, 2, "enum_LAST_READ"], [364, 267, 2, "enum_LAST_READ"], [364, 344, 3, "enum_LAST_WRITE"], [375, 405, 2, "enum_LAST_READ"], [375, 127, 2, "enum_LAST_READ"], [379, 359, 2, "enum_LAST_READ"], [379, 10, 3, "enum_LAST_WRITE"], [381, 361, 2, "enum_LAST_READ"], [381, 306, 3, "enum_LAST_WRITE"], [384, 364, 2, "enum_LAST_READ"], [384, 344, 3, "enum_LAST_WRITE"], [387, 387, 2, "enum_LAST_READ"], [387, 196, 3, "enum_LAST_WRITE"], [392, 384, 2, "enum_LAST_READ"], [392, 344, 3, "enum_LAST_WRITE"], [395, 392, 2, "enum_LAST_READ"], [395, 344, 3, "enum_LAST_WRITE"], [373, 442, 2, "enum_LAST_READ"], [373, 373, 3, "enum_LAST_WRITE"], [405, 375, 2, "enum_LAST_READ"], [409, 379, 2, "enum_LAST_READ"], [409, 10, 3, "enum_LAST_WRITE"], [411, 381, 2, "enum_LAST_READ"], [411, 306, 3, "enum_LAST_WRITE"], [414, 395, 2, "enum_LAST_READ"], [414, 344, 3, "enum_LAST_WRITE"], [417, 417, 2, "enum_LAST_READ"], [417, 204, 3, "enum_LAST_WRITE"], [422, 414, 2, "enum_LAST_READ"], [422, 344, 3, "enum_LAST_WRITE"], [425, 422, 2, "enum_LAST_READ"], [425, 344, 3, "enum_LAST_WRITE"], [403, 459, 2, "enum_LAST_READ"], [403, 403, 3, "enum_LAST_WRITE"], [435, 332, 2, "enum_LAST_READ"], [435, 452, 2, "enum_LAST_READ"], [440, 440, 2, "enum_LAST_READ"], [440, 473, 2, "enum_LAST_READ"], [440, 317, 3, "enum_LAST_WRITE"], [440, 433, 3, "enum_LAST_WRITE"], [442, 442, 2, "enum_LAST_READ"], [442, 373, 3, "enum_LAST_WRITE"], [433, 440, 2, "enum_LAST_READ"], [433, 317, 3, "enum_LAST_WRITE"], [433, 433, 3, "enum_LAST_WRITE"], [452, 435, 2, "enum_LAST_READ"], [457, 480, 2, "enum_LAST_READ"], [457, 457, 2, "enum_LAST_READ"], [457, 330, 3, "enum_LAST_WRITE"], [457, 450, 3, "enum_LAST_WRITE"], [459, 459, 2, "enum_LAST_READ"], [459, 403, 3, "enum_LAST_WRITE"], [450, 457, 2, "enum_LAST_READ"], [450, 330, 3, "enum_LAST_WRITE"], [450, 450, 3, "enum_LAST_WRITE"], [469, 469, 2, "enum_LAST_READ"], [469, 295, 3, "enum_LAST_WRITE"], [473, 440, 2, "enum_LAST_READ"], [473, 473, 2, "enum_LAST_READ"], [473, 317, 3, "enum_LAST_WRITE"], [473, 433, 3, "enum_LAST_WRITE"], [476, 476, 2, "enum_LAST_READ"], [476, 300, 3, "enum_LAST_WRITE"], [480, 480, 2, "enum_LAST_READ"], [480, 457, 2, "enum_LAST_READ"], [480, 330, 3, "enum_LAST_WRITE"], [480, 450, 3, "enum_LAST_WRITE"], [486, 332, 2, "enum_LAST_READ"], [486, 287, 2, "enum_LAST_READ"], [486, 452, 2, "enum_LAST_READ"], [493, 283, 3, "enum_LAST_WRITE"], [499, 486, 2, "enum_LAST_READ"], [506, 493, 2, "enum_LAST_READ"], [506, 283, 3, "enum_LAST_WRITE"], [513, 346, 2, "enum_LAST_READ"], [513, 308, 2, "enum_LAST_READ"], [517, 312, 2, "enum_LAST_READ"], [517, 350, 2, "enum_LAST_READ"], [517, 24, 3, "enum_LAST_WRITE"], [511, 411, 2, "enum_LAST_READ"], [511, 264, 2, "enum_LAST_READ"], [511, 588, 2, "enum_LAST_READ"], [511, 361, 2, "enum_LAST_READ"], [511, 511, 3, "enum_LAST_WRITE"], [511, 306, 3, "enum_LAST_WRITE"], [524, 499, 2, "enum_LAST_READ"], [524, 654, 2, "enum_LAST_READ"], [529, 219, 2, "enum_LAST_READ"], [529, 542, 2, "enum_LAST_READ"], [529, 337, 2, "enum_LAST_READ"], [529, 161, 3, "enum_LAST_WRITE"], [522, 644, 2, "enum_LAST_READ"], [522, 522, 3, "enum_LAST_WRITE"], [522, 600, 3, "enum_LAST_WRITE"], [537, 524, 2, "enum_LAST_READ"], [542, 529, 2, "enum_LAST_READ"], [542, 161, 3, "enum_LAST_WRITE"], [535, 661, 2, "enum_LAST_READ"], [535, 535, 3, "enum_LAST_WRITE"], [535, 617, 3, "enum_LAST_WRITE"], [551, 551, 2, "enum_LAST_READ"], [551, 513, 2, "enum_LAST_READ"], [555, 517, 2, "enum_LAST_READ"], [555, 555, 2, "enum_LAST_READ"], [555, 24, 3, "enum_LAST_WRITE"], [549, 425, 2, "enum_LAST_READ"], [549, 596, 2, "enum_LAST_READ"], [549, 364, 2, "enum_LAST_READ"], [549, 267, 2, "enum_LAST_READ"], [549, 344, 3, "enum_LAST_WRITE"], [549, 251, 3, "enum_LAST_WRITE"], [549, 549, 3, "enum_LAST_WRITE"], [562, 405, 2, "enum_LAST_READ"], [562, 582, 2, "enum_LAST_READ"], [562, 127, 2, "enum_LAST_READ"], [566, 586, 2, "enum_LAST_READ"], [566, 64, 2, "enum_LAST_READ"], [566, 12, 3, "enum_LAST_WRITE"], [568, 361, 2, "enum_LAST_READ"], [568, 411, 2, "enum_LAST_READ"], [568, 264, 2, "enum_LAST_READ"], [568, 588, 2, "enum_LAST_READ"], [568, 511, 3, "enum_LAST_WRITE"], [571, 425, 2, "enum_LAST_READ"], [571, 596, 2, "enum_LAST_READ"], [571, 364, 2, "enum_LAST_READ"], [571, 267, 2, "enum_LAST_READ"], [571, 549, 3, "enum_LAST_WRITE"], [574, 469, 2, "enum_LAST_READ"], [574, 574, 2, "enum_LAST_READ"], [574, 295, 3, "enum_LAST_WRITE"], [576, 571, 2, "enum_LAST_READ"], [576, 549, 3, "enum_LAST_WRITE"], [560, 609, 2, "enum_LAST_READ"], [560, 560, 3, "enum_LAST_WRITE"], [582, 562, 2, "enum_LAST_READ"], [586, 566, 2, "enum_LAST_READ"], [586, 12, 3, "enum_LAST_WRITE"], [588, 568, 2, "enum_LAST_READ"], [588, 511, 3, "enum_LAST_WRITE"], [591, 576, 2, "enum_LAST_READ"], [591, 549, 3, "enum_LAST_WRITE"], [594, 476, 2, "enum_LAST_READ"], [594, 594, 2, "enum_LAST_READ"], [594, 300, 3, "enum_LAST_WRITE"], [596, 591, 2, "enum_LAST_READ"], [596, 549, 3, "enum_LAST_WRITE"], [580, 626, 2, "enum_LAST_READ"], [580, 580, 3, "enum_LAST_WRITE"], [602, 537, 2, "enum_LAST_READ"], [602, 619, 2, "enum_LAST_READ"], [607, 644, 2, "enum_LAST_READ"], [607, 607, 2, "enum_LAST_READ"], [607, 522, 3, "enum_LAST_WRITE"], [607, 600, 3, "enum_LAST_WRITE"], [609, 609, 2, "enum_LAST_READ"], [609, 560, 3, "enum_LAST_WRITE"], [600, 607, 2, "enum_LAST_READ"], [600, 522, 3, "enum_LAST_WRITE"], [600, 600, 3, "enum_LAST_WRITE"], [619, 602, 2, "enum_LAST_READ"], [624, 624, 2, "enum_LAST_READ"], [624, 661, 2, "enum_LAST_READ"], [624, 535, 3, "enum_LAST_WRITE"], [624, 617, 3, "enum_LAST_WRITE"], [626, 626, 2, "enum_LAST_READ"], [626, 580, 3, "enum_LAST_WRITE"], [617, 624, 2, "enum_LAST_READ"], [617, 535, 3, "enum_LAST_WRITE"], [617, 617, 3, "enum_LAST_WRITE"], [637, 537, 2, "enum_LAST_READ"], [637, 619, 2, "enum_LAST_READ"], [642, 642, 2, "enum_LAST_READ"], [642, 635, 3, "enum_LAST_WRITE"], [642, 484, 3, "enum_LAST_WRITE"], [644, 644, 2, "enum_LAST_READ"], [644, 607, 2, "enum_LAST_READ"], [644, 522, 3, "enum_LAST_WRITE"], [644, 600, 3, "enum_LAST_WRITE"], [635, 642, 2, "enum_LAST_READ"], [635, 635, 3, "enum_LAST_WRITE"], [635, 484, 3, "enum_LAST_WRITE"], [654, 637, 2, "enum_LAST_READ"], [659, 659, 2, "enum_LAST_READ"], [659, 652, 3, "enum_LAST_WRITE"], [659, 497, 3, "enum_LAST_WRITE"], [661, 624, 2, "enum_LAST_READ"], [661, 661, 2, "enum_LAST_READ"], [661, 535, 3, "enum_LAST_WRITE"], [661, 617, 3, "enum_LAST_WRITE"], [652, 659, 2, "enum_LAST_READ"], [652, 652, 3, "enum_LAST_WRITE"], [652, 497, 3, "enum_LAST_WRITE"], [672, 499, 2, "enum_LAST_READ"], [672, 654, 2, "enum_LAST_READ"], [686, 551, 2, "enum_LAST_READ"], [686, 513, 2, "enum_LAST_READ"], [690, 517, 2, "enum_LAST_READ"], [690, 555, 2, "enum_LAST_READ"], [690, 24, 3, "enum_LAST_WRITE"], [684, 411, 2, "enum_LAST_READ"], [684, 264, 2, "enum_LAST_READ"], [684, 588, 2, "enum_LAST_READ"], [684, 361, 2, "enum_LAST_READ"], [684, 712, 2, "enum_LAST_READ"], [684, 511, 3, "enum_LAST_WRITE"], [684, 684, 3, "enum_LAST_WRITE"], [697, 672, 2, "enum_LAST_READ"], [697, 697, 2, "enum_LAST_READ"], [702, 702, 2, "enum_LAST_READ"], [702, 695, 3, "enum_LAST_WRITE"], [702, 670, 3, "enum_LAST_WRITE"], [704, 214, 2, "enum_LAST_READ"], [704, 704, 2, "enum_LAST_READ"], [704, 212, 3, "enum_LAST_WRITE"], [709, 411, 2, "enum_LAST_READ"], [709, 264, 2, "enum_LAST_READ"], [709, 588, 2, "enum_LAST_READ"], [709, 361, 2, "enum_LAST_READ"], [709, 712, 2, "enum_LAST_READ"], [709, 684, 3, "enum_LAST_WRITE"], [712, 709, 2, "enum_LAST_READ"], [712, 684, 3, "enum_LAST_WRITE"], [695, 702, 2, "enum_LAST_READ"], [695, 695, 3, "enum_LAST_WRITE"], [695, 670, 3, "enum_LAST_WRITE"], [728, 672, 2, "enum_LAST_READ"], [728, 697, 2, "enum_LAST_READ"], [732, 659, 2, "enum_LAST_READ"], [732, 652, 3, "enum_LAST_WRITE"], [732, 497, 3, "enum_LAST_WRITE"], [736, 642, 2, "enum_LAST_READ"], [736, 635, 3, "enum_LAST_WRITE"], [736, 484, 3, "enum_LAST_WRITE"], [741, 728, 2, "enum_LAST_READ"], [745, 732, 2, "enum_LAST_READ"], [745, 652, 3, "enum_LAST_WRITE"], [745, 497, 3, "enum_LAST_WRITE"], [749, 702, 2, "enum_LAST_READ"], [749, 695, 3, "enum_LAST_WRITE"], [749, 670, 3, "enum_LAST_WRITE"], [754, 741, 2, "enum_LAST_READ"], [760, 726, 3, "enum_LAST_WRITE"], [764, 739, 3, "enum_LAST_WRITE"], [768, 752, 3, "enum_LAST_WRITE"], [777, 154, 2, "enum_LAST_READ"], [777, 91, 3, "enum_LAST_WRITE"], [791, 33, 2, "enum_LAST_READ"], [803, 789, 3, "enum_LAST_WRITE"], [812, 777, 2, "enum_LAST_READ"], [812, 91, 3, "enum_LAST_WRITE"], [826, 33, 2, "enum_LAST_READ"], [838, 824, 3, "enum_LAST_WRITE"], [17, 19, 4, "enum_COMPUTED_FROM"], [17, 21, 4, "enum_COMPUTED_FROM"], [24, 26, 4, "enum_COMPUTED_FROM"], [24, 28, 4, "enum_COMPUTED_FROM"], [31, 45, 4, "enum_COMPUTED_FROM"], [31, 33, 4, "enum_COMPUTED_FROM"], [31, 40, 4, "enum_COMPUTED_FROM"], [49, 55, 4, "enum_COMPUTED_FROM"], [58, 64, 4, "enum_COMPUTED_FROM"], [58, 66, 4, "enum_COMPUTED_FROM"], [58, 60, 4, "enum_COMPUTED_FROM"], [73, 83, 4, "enum_COMPUTED_FROM"], [73, 79, 4, "enum_COMPUTED_FROM"], [88, 98, 4, "enum_COMPUTED_FROM"], [88, 100, 4, "enum_COMPUTED_FROM"], [88, 102, 4, "enum_COMPUTED_FROM"], [88, 104, 4, "enum_COMPUTED_FROM"], [88, 110, 4, "enum_COMPUTED_FROM"], [88, 94, 4, "enum_COMPUTED_FROM"], [88, 106, 4, "enum_COMPUTED_FROM"], [113, 115, 4, "enum_COMPUTED_FROM"], [121, 131, 4, "enum_COMPUTED_FROM"], [121, 133, 4, "enum_COMPUTED_FROM"], [121, 135, 4, "enum_COMPUTED_FROM"], [121, 137, 4, "enum_COMPUTED_FROM"], [121, 143, 4, "enum_COMPUTED_FROM"], [121, 127, 4, "enum_COMPUTED_FROM"], [121, 139, 4, "enum_COMPUTED_FROM"], [146, 148, 4, "enum_COMPUTED_FROM"], [161, 163, 4, "enum_COMPUTED_FROM"], [170, 172, 4, "enum_COMPUTED_FROM"], [170, 177, 4, "enum_COMPUTED_FROM"], [183, 185, 4, "enum_COMPUTED_FROM"], [183, 190, 4, "enum_COMPUTED_FROM"], [196, 199, 4, "enum_COMPUTED_FROM"], [196, 201, 4, "enum_COMPUTED_FROM"], [204, 207, 4, "enum_COMPUTED_FROM"], [204, 209, 4, "enum_COMPUTED_FROM"], [212, 214, 4, "enum_COMPUTED_FROM"], [212, 219, 4, "enum_COMPUTED_FROM"], [225, 227, 4, "enum_COMPUTED_FROM"], [225, 232, 4, "enum_COMPUTED_FROM"], [225, 234, 4, "enum_COMPUTED_FROM"], [283, 285, 4, "enum_COMPUTED_FROM"], [283, 291, 4, "enum_COMPUTED_FROM"], [283, 287, 4, "enum_COMPUTED_FROM"], [484, 486, 4, "enum_COMPUTED_FROM"], [484, 493, 4, "enum_COMPUTED_FROM"], [497, 499, 4, "enum_COMPUTED_FROM"], [497, 506, 4, "enum_COMPUTED_FROM"], [670, 672, 4, "enum_COMPUTED_FROM"], [726, 736, 4, "enum_COMPUTED_FROM"], [726, 728, 4, "enum_COMPUTED_FROM"], [726, 732, 4, "enum_COMPUTED_FROM"], [739, 749, 4, "enum_COMPUTED_FROM"], [739, 741, 4, "enum_COMPUTED_FROM"], [739, 745, 4, "enum_COMPUTED_FROM"], [752, 764, 4, "enum_COMPUTED_FROM"], [752, 760, 4, "enum_COMPUTED_FROM"], [752, 754, 4, "enum_COMPUTED_FROM"], [317, 319, 4, "enum_COMPUTED_FROM"], [317, 324, 4, "enum_COMPUTED_FROM"], [330, 332, 4, "enum_COMPUTED_FROM"], [330, 337, 4, "enum_COMPUTED_FROM"], [522, 524, 4, "enum_COMPUTED_FROM"], [522, 529, 4, "enum_COMPUTED_FROM"], [535, 537, 4, "enum_COMPUTED_FROM"], [535, 542, 4, "enum_COMPUTED_FROM"], [635, 637, 4, "enum_COMPUTED_FROM"], [635, 642, 4, "enum_COMPUTED_FROM"], [635, 644, 4, "enum_COMPUTED_FROM"], [652, 654, 4, "enum_COMPUTED_FROM"], [652, 659, 4, "enum_COMPUTED_FROM"], [652, 661, 4, "enum_COMPUTED_FROM"], [695, 697, 4, "enum_COMPUTED_FROM"], [695, 702, 4, "enum_COMPUTED_FROM"], [695, 704, 4, "enum_COMPUTED_FROM"], [695, 709, 4, "enum_COMPUTED_FROM"], [695, 712, 4, "enum_COMPUTED_FROM"], [789, 791, 4, "enum_COMPUTED_FROM"], [266, 270, 4, "enum_COMPUTED_FROM"], [266, 277, 4, "enum_COMPUTED_FROM"], [266, 272, 4, "enum_COMPUTED_FROM"], [266, 274, 4, "enum_COMPUTED_FROM"], [560, 562, 4, "enum_COMPUTED_FROM"], [560, 571, 4, "enum_COMPUTED_FROM"], [560, 574, 4, "enum_COMPUTED_FROM"], [560, 576, 4, "enum_COMPUTED_FROM"], [560, 566, 4, "enum_COMPUTED_FROM"], [560, 568, 4, "enum_COMPUTED_FROM"], [580, 582, 4, "enum_COMPUTED_FROM"], [580, 591, 4, "enum_COMPUTED_FROM"], [580, 594, 4, "enum_COMPUTED_FROM"], [580, 596, 4, "enum_COMPUTED_FROM"], [580, 586, 4, "enum_COMPUTED_FROM"], [580, 588, 4, "enum_COMPUTED_FROM"], [600, 602, 4, "enum_COMPUTED_FROM"], [600, 607, 4, "enum_COMPUTED_FROM"], [600, 609, 4, "enum_COMPUTED_FROM"], [617, 619, 4, "enum_COMPUTED_FROM"], [617, 624, 4, "enum_COMPUTED_FROM"], [617, 626, 4, "enum_COMPUTED_FROM"], [824, 826, 4, "enum_COMPUTED_FROM"], [373, 375, 4, "enum_COMPUTED_FROM"], [373, 384, 4, "enum_COMPUTED_FROM"], [373, 387, 4, "enum_COMPUTED_FROM"], [373, 379, 4, "enum_COMPUTED_FROM"], [373, 381, 4, "enum_COMPUTED_FROM"], [373, 392, 4, "enum_COMPUTED_FROM"], [373, 395, 4, "enum_COMPUTED_FROM"], [403, 405, 4, "enum_COMPUTED_FROM"], [403, 414, 4, "enum_COMPUTED_FROM"], [403, 417, 4, "enum_COMPUTED_FROM"], [403, 409, 4, "enum_COMPUTED_FROM"], [403, 411, 4, "enum_COMPUTED_FROM"], [403, 422, 4, "enum_COMPUTED_FROM"], [403, 425, 4, "enum_COMPUTED_FROM"], [433, 435, 4, "enum_COMPUTED_FROM"], [433, 440, 4, "enum_COMPUTED_FROM"], [433, 442, 4, "enum_COMPUTED_FROM"], [450, 452, 4, "enum_COMPUTED_FROM"], [450, 457, 4, "enum_COMPUTED_FROM"], [450, 459, 4, "enum_COMPUTED_FROM"]], "error_location": 207, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/datadrivencontrol/pyvrft.git", "old_path": "vrft/control.py", "hash": "d21df29ac62c08e4de3bfbcc1c01a6943cfe78fe", "code": "def design(u: np.ndarray, y: np.ndarray, y_iv: np.ndarray, Td: List[Any], C: List[List[Any]], L: List[List[Any]]) -> Optional[np.ndarray]:\n    # function that implements the Unbiased MIMO VRFT method\n\n    # number of data samples\n    N: int=len(u)\n    # number of inputs/outputs of the system\n    n: int=len(Td)\n    # creates a dummy time vector, necessary for the function that calculates the virtual reference\n    t: np.ndarray=np.linspace(0,N-1,N) #linspace(start,stop,numberofpoints)\n    # pushing the vector to have the specified dimensions\n    t.shape=(1,N)\n    \n    # Filter u\n    uf: np.ndarray=vrft.filter(L,u)\n    \n    # transformation of Td from the MIMO transfer function list structure to a state-space model\n    Atd,Btd,Ctd,Dtd=vrft.mtf2ss(Td)\n    # calculates the virtual reference for the first data set\n    rv,_,flagvr=vrft.stbinv(Atd,Btd,Ctd,Dtd,y.T,t)\n    rv: np.ndarray=rv.T\n    # calculates the virtual reference for the second data set (instrumental variable)\n    rv_iv,_,_=vrft.stbinv(Atd,Btd,Ctd,Dtd,y_iv.T,t)\n    rv_iv: np.ndarray=rv_iv.T\n    \n    # test if the inversion algorithm was succesful\n    if flagvr==0:\n        # if flagvr=0, then, the inversion algorithm was succesful\n    \n        # remove the last samples of y, to match the dimension of the virtual reference\n        # number of samples used in the method\n        N=rv.shape[0]\n        y: np.ndarray=y[0:N,:]\n        y_iv: np.ndarray=y_iv[0:N,:]\n        # virtual error\n        ebar: np.ndarray=rv-y\n        ebar_iv: np.ndarray=rv-y_iv\n        # remove the last samples of the input (to match the dimension of the virtual error)\n        uf: np.ndarray=uf[0:N,:]\n        \n        # calculating the number of parameters of each controller and organizing it as a matrix\n        # preallocating\n        nbpar: np.ndarray=np.zeros((n,n))\n        # loop\n        for i in range (0,n):\n            for j in range (0,n):\n                nbpar[i][j]=len(C[i][j])\n            \n        # total number of parameters (casting to integer)\n        p_tot: int=int(np.sum(nbpar))\n        \n        # assembling the matrices phi_iN and organizing it as a python list\n        # initiating the list\n        phi_iN_list: List[np.ndarray]=[]\n        csi_iN_list: List[np.ndarray]=[]\n        # loops\n        for i in range (0,n):\n            # preallocating the matrices\n            phi_iN: np.ndarray=np.empty((N,0))\n            csi_iN: np.ndarray=np.empty((N,0))\n            # loop on j\n            for j in range (0,n):\n                if len(C[i][j])>0:\n                    # calculating phi_ijN^T\n                    phi_ijN: np.ndarray=vrft.filter(C[i][j],ebar[:,j:j+1])\n                    # calculating cis_ijN^T (instrumental variable)\n                    csi_ijN: np.ndarray=vrft.filter(C[i][j],ebar_iv[:,j:j+1])\n                    # calculating phi_iN^T, by concatenating the phi_ijN^T matrices\n                    phi_iN: np.ndarray=np.concatenate((phi_iN,phi_ijN),axis=1) # concatenate column wise\n                    # instrumental variable\n                    csi_iN: np.ndarray=np.concatenate((csi_iN,csi_ijN),axis=1) # concatenate column wise                        \n            # saving in the list structure\n            phi_iN_list.append(phi_iN)\n            csi_iN_list.append(csi_iN)\n            \n        # assembling the matrices Phi_vrf and Csi_vrf (instrumental variable) - which considers the filter of the VRFT method\n        # initiating the Phi_vrf and Csi_vrf matrices\n        Phi_vrf: np.ndarray=np.empty((0,p_tot))\n        Csi_vrf: np.ndarray=np.empty((0,p_tot))\n        # start the loop\n        # on i\n        for i in range(0,n):\n            # loop on j\n            # initiating the matrices the compososes \"each row\" of Phi_vrf and Csi_vrf\n            Phi_row: np.ndarray=np.empty((N,0))\n            Csi_row: np.ndarray=np.empty((N,0))\n            for j in range(0,n):\n                Phi_ij: np.ndarray=vrft.colfilter(L[i][j],phi_iN_list[j]) \n                Csi_ij: np.ndarray=vrft.colfilter(L[i][j],csi_iN_list[j])\n                # concatenating the columns to assemble \"each row\" of Phi_vrf and Csi_vrf\n                Phi_row: np.ndarray=np.concatenate((Phi_row,Phi_ij),axis=1) # concatenate column wise\n                Csi_row: np.ndarray=np.concatenate((Csi_row,Csi_ij),axis=1) # concatenate column wise\n            # concatanating the rows of Phi_vrf and Csi_vrf\n            Phi_vrf: np.ndarray=np.concatenate((Phi_vrf,Phi_row),axis=0) # concatenate row wise\n            Csi_vrf: np.ndarray=np.concatenate((Csi_vrf,Csi_row),axis=0) # concatenate row wise\n            \n        # reorganizing the uf vector (stacking)\n        # preallocating\n        Uf: np.ndarray=np.empty((0,1))\n        # loop\n        for i in range (0,n):\n            Uf: np.ndarray=np.concatenate((Uf,uf[:,i:i+1]),axis=0) # concatenate row wise\n            \n        # compute controller parameters\n        Z: np.ndarray=np.matmul(Csi_vrf.T,Phi_vrf)\n        Y: np.ndarray=np.matmul(Csi_vrf.T,Uf)\n        p: np.ndarray=np.linalg.solve(Z.T,Y)\n        \n        # returning the parameter vector\n        return p\n    \n    elif flagvr==1:\n        # if flagvr=1, then, it was not possible to calculate the inverse of the reference model\n        print(\"It was not possible to calculate the virtual reference. The inversion algorithm has failed.\")\n        # return an empty parameter vector\n        p: np.ndarray=np.empty((0,0))\n        return p\n        \n    elif flagvr==2:\n        # if flagvr=2, the inverse of the reference model is unstable. VRFT method aborted!\n        print(\"The inverse of the reference model Td(z) is unstable. It is not recommended to proceed with the VRFT method, so the algorithm was aborted!\")\n        # return an empty parameter vector\n        p: np.ndarray=np.empty((0,0))\n        return p\n", "rewrite": "ReplaceText(target='rv_iv' @(80,16)->(80,18))", "error_line": 35, "has_bug": true, "code_full": "from typing import Any, List, Optional, Tuple\n\nimport numpy as np\n\n\nclass vrft:\n    @staticmethod\n    def filter(L: Any, u: np.ndarray) -> np.ndarray:\n        return np.zeros((0, 0))\n    \n    @staticmethod\n    def mtf2ss(Td: List[Any]) -> Tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n        return np.zeros((0, 0)), np.zeros((0, 0)), np.zeros((0, 0)), np.zeros((0, 0))\n    \n    @staticmethod\n    def stbinv(Atd: np.ndarray, Btd: np.ndarray, Ctd: np.ndarray, Dtd: np.ndarray, y: np.ndarray, t: np.ndarray) -> Tuple[np.ndarray, Any, int]:\n        return np.zeros((0, 0)), np.zeros((0, 0)), 0\n    \n    @staticmethod\n    def colfilter(L: Any, phi_iN: np.ndarray) -> np.ndarray:\n        return np.zeros((0, 0))\n\n\ndef design(u: np.ndarray, y: np.ndarray, y_iv: np.ndarray, Td: List[Any], C: List[List[Any]], L: List[List[Any]]) -> Optional[np.ndarray]:\n    # function that implements the Unbiased MIMO VRFT method\n\n    # number of data samples\n    N: int=len(u)\n    # number of inputs/outputs of the system\n    n: int=len(Td)\n    # creates a dummy time vector, necessary for the function that calculates the virtual reference\n    t: np.ndarray=np.linspace(0,N-1,N) #linspace(start,stop,numberofpoints)\n    # pushing the vector to have the specified dimensions\n    t.shape=(1,N)\n    \n    # Filter u\n    uf: np.ndarray=vrft.filter(L,u)\n    \n    # transformation of Td from the MIMO transfer function list structure to a state-space model\n    Atd,Btd,Ctd,Dtd=vrft.mtf2ss(Td)\n    # calculates the virtual reference for the first data set\n    rv,_,flagvr=vrft.stbinv(Atd,Btd,Ctd,Dtd,y.T,t)\n    rv: np.ndarray=rv.T\n    # calculates the virtual reference for the second data set (instrumental variable)\n    rv_iv,_,_=vrft.stbinv(Atd,Btd,Ctd,Dtd,y_iv.T,t)\n    rv_iv: np.ndarray=rv_iv.T\n    \n    # test if the inversion algorithm was succesful\n    if flagvr==0:\n        # if flagvr=0, then, the inversion algorithm was succesful\n    \n        # remove the last samples of y, to match the dimension of the virtual reference\n        # number of samples used in the method\n        N=rv.shape[0]\n        y: np.ndarray=y[0:N,:]\n        y_iv: np.ndarray=y_iv[0:N,:]\n        # virtual error\n        ebar: np.ndarray=rv-y\n        ebar_iv: np.ndarray=rv-y_iv\n        # remove the last samples of the input (to match the dimension of the virtual error)\n        uf: np.ndarray=uf[0:N,:]\n        \n        # calculating the number of parameters of each controller and organizing it as a matrix\n        # preallocating\n        nbpar: np.ndarray=np.zeros((n,n))\n        # loop\n        for i in range (0,n):\n            for j in range (0,n):\n                nbpar[i][j]=len(C[i][j])\n            \n        # total number of parameters (casting to integer)\n        p_tot: int=int(np.sum(nbpar))\n        \n        # assembling the matrices phi_iN and organizing it as a python list\n        # initiating the list\n        phi_iN_list: List[np.ndarray]=[]\n        csi_iN_list: List[np.ndarray]=[]\n        # loops\n        for i in range (0,n):\n            # preallocating the matrices\n            phi_iN: np.ndarray=np.empty((N,0))\n            csi_iN: np.ndarray=np.empty((N,0))\n            # loop on j\n            for j in range (0,n):\n                if len(C[i][j])>0:\n                    # calculating phi_ijN^T\n                    phi_ijN: np.ndarray=vrft.filter(C[i][j],ebar[:,j:j+1])\n                    # calculating cis_ijN^T (instrumental variable)\n                    csi_ijN: np.ndarray=vrft.filter(C[i][j],ebar_iv[:,j:j+1])\n                    # calculating phi_iN^T, by concatenating the phi_ijN^T matrices\n                    phi_iN: np.ndarray=np.concatenate((phi_iN,phi_ijN),axis=1) # concatenate column wise\n                    # instrumental variable\n                    csi_iN: np.ndarray=np.concatenate((csi_iN,csi_ijN),axis=1) # concatenate column wise                        \n            # saving in the list structure\n            phi_iN_list.append(phi_iN)\n            csi_iN_list.append(csi_iN)\n            \n        # assembling the matrices Phi_vrf and Csi_vrf (instrumental variable) - which considers the filter of the VRFT method\n        # initiating the Phi_vrf and Csi_vrf matrices\n        Phi_vrf: np.ndarray=np.empty((0,p_tot))\n        Csi_vrf: np.ndarray=np.empty((0,p_tot))\n        # start the loop\n        # on i\n        for i in range(0,n):\n            # loop on j\n            # initiating the matrices the compososes \"each row\" of Phi_vrf and Csi_vrf\n            Phi_row: np.ndarray=np.empty((N,0))\n            Csi_row: np.ndarray=np.empty((N,0))\n            for j in range(0,n):\n                Phi_ij: np.ndarray=vrft.colfilter(L[i][j],phi_iN_list[j]) \n                Csi_ij: np.ndarray=vrft.colfilter(L[i][j],csi_iN_list[j])\n                # concatenating the columns to assemble \"each row\" of Phi_vrf and Csi_vrf\n                Phi_row: np.ndarray=np.concatenate((Phi_row,Phi_ij),axis=1) # concatenate column wise\n                Csi_row: np.ndarray=np.concatenate((Csi_row,Csi_ij),axis=1) # concatenate column wise\n            # concatanating the rows of Phi_vrf and Csi_vrf\n            Phi_vrf: np.ndarray=np.concatenate((Phi_vrf,Phi_row),axis=0) # concatenate row wise\n            Csi_vrf: np.ndarray=np.concatenate((Csi_vrf,Csi_row),axis=0) # concatenate row wise\n            \n        # reorganizing the uf vector (stacking)\n        # preallocating\n        Uf: np.ndarray=np.empty((0,1))\n        # loop\n        for i in range (0,n):\n            Uf: np.ndarray=np.concatenate((Uf,uf[:,i:i+1]),axis=0) # concatenate row wise\n            \n        # compute controller parameters\n        Z: np.ndarray=np.matmul(Csi_vrf.T,Phi_vrf)\n        Y: np.ndarray=np.matmul(Csi_vrf.T,Uf)\n        p: np.ndarray=np.linalg.solve(Z.T,Y)\n        \n        # returning the parameter vector\n        return p\n    \n    elif flagvr==1:\n        # if flagvr=1, then, it was not possible to calculate the inverse of the reference model\n        print(\"It was not possible to calculate the virtual reference. The inversion algorithm has failed.\")\n        # return an empty parameter vector\n        p: np.ndarray=np.empty((0,0))\n        return p\n        \n    elif flagvr==2:\n        # if flagvr=2, the inverse of the reference model is unstable. VRFT method aborted!\n        print(\"The inverse of the reference model Td(z) is unstable. It is not recommended to proceed with the VRFT method, so the algorithm was aborted!\")\n        # return an empty parameter vector\n        p: np.ndarray=np.empty((0,0))\n        return p\n", "error_location_char": [1518, 1520], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def pretty_xml(", "path", ",", "outpath", "=", "None", ",", "encoding", "=", "b'utf-8'", ")", ":", "#NEWLINE#", "#INDENT#", "tree", "=", "etree", ".", "parse", "(", "path", ")", "#NEWLINE#", "if", "(", "outpath", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "opener", "=", "compression", ".", "get", "(", "path", ")", "#NEWLINE#", "outpath", "=", "opener", "(", "path", ",", "'wb'", ")", "#NEWLINE#", "#UNINDENT#", "if", "hasattr", "(", "outpath", ",", "'write'", ")", ":", "#NEWLINE#", "#INDENT#", "outstream", "=", "outpath", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "opener", "=", "compression", ".", "get", "(", "outpath", ")", "#NEWLINE#", "outstream", "=", "opener", "(", "outpath", ",", "'wb'", ")", "#NEWLINE#", "#UNINDENT#", "with", "outstream", ":", "#NEWLINE#", "#INDENT#", "outstream", ".", "write", "(", "(", "(", "b'<?xml version=\"1.0\" encoding=\"'", "+", "encoding", ")", "+", "b'\"?>\\n'", ")", ")", "#NEWLINE#", "outstream", ".", "write", "(", "etree", ".", "tostring", "(", "tree", ",", "pretty_print", "=", "True", ")", ")"], "edges": [[1, 5, 7, "enum_FIELD"], [14, 20, 7, "enum_FIELD"], [24, 27, 7, "enum_FIELD"], [59, 56, 7, "enum_FIELD"], [20, 18, 7, "enum_FIELD"], [27, 26, 7, "enum_FIELD"], [32, 38, 7, "enum_FIELD"], [41, 47, 7, "enum_FIELD"], [56, 53, 7, "enum_FIELD"], [61, 64, 7, "enum_FIELD"], [70, 76, 7, "enum_FIELD"], [79, 85, 7, "enum_FIELD"], [94, 98, 7, "enum_FIELD"], [109, 113, 7, "enum_FIELD"], [18, 17, 7, "enum_FIELD"], [38, 36, 7, "enum_FIELD"], [47, 44, 7, "enum_FIELD"], [76, 74, 7, "enum_FIELD"], [85, 82, 7, "enum_FIELD"], [98, 96, 7, "enum_FIELD"], [113, 111, 7, "enum_FIELD"], [36, 35, 7, "enum_FIELD"], [74, 73, 7, "enum_FIELD"], [96, 95, 7, "enum_FIELD"], [105, 102, 7, "enum_FIELD"], [105, 106, 7, "enum_FIELD"], [111, 110, 7, "enum_FIELD"], [119, 115, 7, "enum_FIELD"], [102, 101, 7, "enum_FIELD"], [102, 103, 7, "enum_FIELD"], [115, 114, 7, "enum_FIELD"], [120, 122, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [21, 2, 10, "enum_LAST_LEXICAL_USE"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [26, 4, 10, "enum_LAST_LEXICAL_USE"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [39, 21, 10, "enum_LAST_LEXICAL_USE"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [42, 26, 10, "enum_LAST_LEXICAL_USE"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [44, 33, 10, "enum_LAST_LEXICAL_USE"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [46, 39, 10, "enum_LAST_LEXICAL_USE"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [55, 42, 10, "enum_LAST_LEXICAL_USE"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [64, 55, 10, "enum_LAST_LEXICAL_USE"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 70, 9, "enum_NEXT_SYNTAX"], [71, 44, 10, "enum_LAST_LEXICAL_USE"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [73, 35, 10, "enum_LAST_LEXICAL_USE"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [77, 64, 10, "enum_LAST_LEXICAL_USE"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [80, 62, 10, "enum_LAST_LEXICAL_USE"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [82, 71, 10, "enum_LAST_LEXICAL_USE"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [84, 77, 10, "enum_LAST_LEXICAL_USE"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 90, 9, "enum_NEXT_SYNTAX"], [91, 80, 10, "enum_LAST_LEXICAL_USE"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 94, 9, "enum_NEXT_SYNTAX"], [95, 91, 10, "enum_LAST_LEXICAL_USE"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [103, 8, 10, "enum_LAST_LEXICAL_USE"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [110, 95, 10, "enum_LAST_LEXICAL_USE"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [114, 17, 10, "enum_LAST_LEXICAL_USE"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [118, 15, 10, "enum_LAST_LEXICAL_USE"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [6, 10, 1, "enum_CFG_NEXT"], [10, 1, 1, "enum_CFG_NEXT"], [5, 14, 1, "enum_CFG_NEXT"], [14, 27, 1, "enum_CFG_NEXT"], [27, 32, 1, "enum_CFG_NEXT"], [27, 56, 1, "enum_CFG_NEXT"], [32, 41, 1, "enum_CFG_NEXT"], [41, 56, 1, "enum_CFG_NEXT"], [56, 70, 1, "enum_CFG_NEXT"], [56, 61, 1, "enum_CFG_NEXT"], [70, 79, 1, "enum_CFG_NEXT"], [21, 2, 3, "enum_LAST_WRITE"], [26, 4, 3, "enum_LAST_WRITE"], [39, 21, 2, "enum_LAST_READ"], [39, 2, 3, "enum_LAST_WRITE"], [44, 33, 3, "enum_LAST_WRITE"], [46, 39, 2, "enum_LAST_READ"], [46, 2, 3, "enum_LAST_WRITE"], [42, 26, 2, "enum_LAST_READ"], [42, 4, 3, "enum_LAST_WRITE"], [55, 26, 2, "enum_LAST_READ"], [55, 4, 3, "enum_LAST_WRITE"], [55, 42, 3, "enum_LAST_WRITE"], [64, 55, 2, "enum_LAST_READ"], [64, 4, 3, "enum_LAST_WRITE"], [64, 42, 3, "enum_LAST_WRITE"], [73, 35, 2, "enum_LAST_READ"], [77, 55, 2, "enum_LAST_READ"], [77, 4, 3, "enum_LAST_WRITE"], [77, 42, 3, "enum_LAST_WRITE"], [71, 44, 2, "enum_LAST_READ"], [71, 33, 3, "enum_LAST_WRITE"], [82, 44, 2, "enum_LAST_READ"], [82, 71, 3, "enum_LAST_WRITE"], [84, 77, 2, "enum_LAST_READ"], [84, 4, 3, "enum_LAST_WRITE"], [84, 42, 3, "enum_LAST_WRITE"], [15, 21, 4, "enum_COMPUTED_FROM"], [15, 17, 4, "enum_COMPUTED_FROM"], [33, 39, 4, "enum_COMPUTED_FROM"], [33, 35, 4, "enum_COMPUTED_FROM"], [42, 44, 4, "enum_COMPUTED_FROM"], [42, 46, 4, "enum_COMPUTED_FROM"], [62, 64, 4, "enum_COMPUTED_FROM"], [71, 77, 4, "enum_COMPUTED_FROM"], [71, 73, 4, "enum_COMPUTED_FROM"], [80, 82, 4, "enum_COMPUTED_FROM"], [80, 84, 4, "enum_COMPUTED_FROM"]], "error_location": 77, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/mobiusklein/psims.git", "old_path": "psims/utils.py", "hash": "50ffd519e75df03bc268f87d5654e3efd018e0ba", "code": "def pretty_xml(path: str, outpath: Optional[Union[str, IO]]=None, encoding: bytes=b'utf-8'):\n    tree: Any = etree.parse(path)\n    if outpath is None:\n        opener: Any = compression.get(path)\n        outpath = opener(path, 'wb')\n    if hasattr(outpath, 'write'):\n        outstream: IO = outpath\n    else:\n        opener = compression.get(outpath)\n        outstream: IO = opener(outpath, 'wb')\n    with outstream:\n        outstream.write(b'<?xml version=\"1.0\" encoding=\"' + encoding + b'\"?>\n')\n        outstream.write(\n            etree.tostring(tree, pretty_print=True))\n", "rewrite": "ReplaceText(target='path' @(29,33)->(29,40))", "error_line": 8, "has_bug": true, "code_full": "from typing import IO, Any, Dict, Optional, Union\n\nimport lxml.etree as etree\n\n\nclass compression:\n    @staticmethod\n    def get(path: Union[str, IO]) -> Any:\n        pass\n\n\ndef pretty_xml(path: str, outpath: Optional[Union[str, IO]]=None, encoding: bytes=b'utf-8'):\n    tree: Any = etree.parse(path)\n    if outpath is None:\n        opener: Any = compression.get(path)\n        outpath = opener(path, 'wb')\n    if hasattr(outpath, 'write'):\n        outstream: IO = outpath\n    else:\n        opener = compression.get(outpath)\n        outstream: IO = opener(outpath, 'wb')\n    with outstream:\n        outstream.write(b'<?xml version=\"1.0\" encoding=\"' + encoding + b'\"?>\n')\n        outstream.write(\n            etree.tostring(tree, pretty_print=True))\n", "error_location_char": [341, 348], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def get_queryset(", "self", ",", "filter", "=", "True", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Return the list of items for this view.\\n\\n    The return value must be an iterable and may be an instance of\\n    `QuerySet` in which case `QuerySet` specific behavior will be enabled.\\n    '", "#NEWLINE#", "key", "=", "self", ".", "kwargs", "[", "'filter_key'", "]", "#NEWLINE#", "value", "=", "self", ".", "kwargs", "[", "'filter_value'", "]", "#NEWLINE#", "filter_dict", "=", "{", "}", "#NEWLINE#", "if", "(", "not", "(", "value", "in", "self", ".", "filter_keys", ")", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "ImproperlyConfigured", "(", "(", "'%s is not present in filter_keys (%s)'", "%", "(", "key", ",", "self", ".", "filter_keys", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "key", "=", "'__'", ".", "join", "(", "key", ".", "split", "(", "'.'", ")", ")", "#NEWLINE#", "if", "filter", ":", "#NEWLINE#", "#INDENT#", "filter_dict", "=", "{", "key", ":", "value", "}", "#NEWLINE#", "#UNINDENT#", "if", "(", "self", ".", "queryset", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "queryset", "=", "self", ".", "queryset", "#NEWLINE#", "if", "isinstance", "(", "queryset", ",", "QuerySet", ")", ":", "#NEWLINE#", "#INDENT#", "queryset", "=", "queryset", ".", "filter", "(", "**", "filter_dict", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "self", ".", "model", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "queryset", "=", "self", ".", "model", ".", "_default_manager", ".", "filter", "(", "**", "filter_dict", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "raise", "ImproperlyConfigured", "(", "(", "'%(cls)s is missing a QuerySet. Define %(cls)s.model, %(cls)s.queryset, or override %(cls)s.get_queryset().'", "%", "{", "'cls'", ":", "self", ".", "__class__", ".", "__name__", "}", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "return", "queryset"], "edges": [[1, 3, 7, "enum_FIELD"], [10, 11, 7, "enum_FIELD"], [12, 18, 7, "enum_FIELD"], [21, 27, 7, "enum_FIELD"], [30, 33, 7, "enum_FIELD"], [36, 38, 7, "enum_FIELD"], [66, 72, 7, "enum_FIELD"], [81, 82, 7, "enum_FIELD"], [103, 100, 7, "enum_FIELD"], [188, 189, 7, "enum_FIELD"], [18, 16, 7, "enum_FIELD"], [18, 19, 7, "enum_FIELD"], [27, 25, 7, "enum_FIELD"], [27, 28, 7, "enum_FIELD"], [38, 41, 7, "enum_FIELD"], [50, 52, 7, "enum_FIELD"], [72, 70, 7, "enum_FIELD"], [85, 90, 7, "enum_FIELD"], [100, 98, 7, "enum_FIELD"], [105, 109, 7, "enum_FIELD"], [112, 116, 7, "enum_FIELD"], [146, 143, 7, "enum_FIELD"], [16, 15, 7, "enum_FIELD"], [25, 24, 7, "enum_FIELD"], [41, 40, 7, "enum_FIELD"], [52, 51, 7, "enum_FIELD"], [70, 69, 7, "enum_FIELD"], [76, 74, 7, "enum_FIELD"], [98, 97, 7, "enum_FIELD"], [109, 108, 7, "enum_FIELD"], [116, 113, 7, "enum_FIELD"], [121, 127, 7, "enum_FIELD"], [143, 141, 7, "enum_FIELD"], [148, 158, 7, "enum_FIELD"], [168, 170, 7, "enum_FIELD"], [43, 42, 7, "enum_FIELD"], [55, 54, 7, "enum_FIELD"], [55, 58, 7, "enum_FIELD"], [74, 73, 7, "enum_FIELD"], [127, 125, 7, "enum_FIELD"], [141, 140, 7, "enum_FIELD"], [158, 156, 7, "enum_FIELD"], [170, 169, 7, "enum_FIELD"], [125, 124, 7, "enum_FIELD"], [128, 129, 7, "enum_FIELD"], [156, 154, 7, "enum_FIELD"], [159, 160, 7, "enum_FIELD"], [173, 172, 7, "enum_FIELD"], [173, 176, 7, "enum_FIELD"], [60, 59, 7, "enum_FIELD"], [154, 152, 7, "enum_FIELD"], [152, 151, 7, "enum_FIELD"], [180, 178, 7, "enum_FIELD"], [178, 177, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [15, 2, 10, "enum_LAST_LEXICAL_USE"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [24, 15, 10, "enum_LAST_LEXICAL_USE"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [40, 22, 10, "enum_LAST_LEXICAL_USE"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [42, 24, 10, "enum_LAST_LEXICAL_USE"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [57, 13, 10, "enum_LAST_LEXICAL_USE"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [59, 42, 10, "enum_LAST_LEXICAL_USE"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 66, 9, "enum_NEXT_SYNTAX"], [67, 57, 10, "enum_LAST_LEXICAL_USE"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [73, 67, 10, "enum_LAST_LEXICAL_USE"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 81, 9, "enum_NEXT_SYNTAX"], [82, 4, 10, "enum_LAST_LEXICAL_USE"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 85, 9, "enum_NEXT_SYNTAX"], [86, 31, 10, "enum_LAST_LEXICAL_USE"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [89, 73, 10, "enum_LAST_LEXICAL_USE"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [91, 40, 10, "enum_LAST_LEXICAL_USE"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [97, 59, 10, "enum_LAST_LEXICAL_USE"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [108, 97, 10, "enum_LAST_LEXICAL_USE"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [115, 106, 10, "enum_LAST_LEXICAL_USE"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 121, 9, "enum_NEXT_SYNTAX"], [122, 115, 10, "enum_LAST_LEXICAL_USE"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [124, 122, 10, "enum_LAST_LEXICAL_USE"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [129, 86, 10, "enum_LAST_LEXICAL_USE"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [140, 108, 10, "enum_LAST_LEXICAL_USE"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 148, 9, "enum_NEXT_SYNTAX"], [149, 124, 10, "enum_LAST_LEXICAL_USE"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [151, 140, 10, "enum_LAST_LEXICAL_USE"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [160, 129, 10, "enum_LAST_LEXICAL_USE"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 168, 9, "enum_NEXT_SYNTAX"], [169, 51, 10, "enum_LAST_LEXICAL_USE"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [175, 176, 9, "enum_NEXT_SYNTAX"], [177, 151, 10, "enum_LAST_LEXICAL_USE"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 184, 9, "enum_NEXT_SYNTAX"], [184, 188, 9, "enum_NEXT_SYNTAX"], [189, 149, 10, "enum_LAST_LEXICAL_USE"], [188, 189, 9, "enum_NEXT_SYNTAX"], [6, 1, 1, "enum_CFG_NEXT"], [3, 10, 1, "enum_CFG_NEXT"], [10, 12, 1, "enum_CFG_NEXT"], [12, 21, 1, "enum_CFG_NEXT"], [21, 30, 1, "enum_CFG_NEXT"], [30, 38, 1, "enum_CFG_NEXT"], [38, 50, 1, "enum_CFG_NEXT"], [38, 66, 1, "enum_CFG_NEXT"], [66, 82, 1, "enum_CFG_NEXT"], [82, 100, 1, "enum_CFG_NEXT"], [82, 85, 1, "enum_CFG_NEXT"], [85, 100, 1, "enum_CFG_NEXT"], [100, 143, 1, "enum_CFG_NEXT"], [100, 105, 1, "enum_CFG_NEXT"], [105, 116, 1, "enum_CFG_NEXT"], [116, 188, 1, "enum_CFG_NEXT"], [116, 121, 1, "enum_CFG_NEXT"], [121, 188, 1, "enum_CFG_NEXT"], [143, 168, 1, "enum_CFG_NEXT"], [143, 148, 1, "enum_CFG_NEXT"], [148, 188, 1, "enum_CFG_NEXT"], [15, 2, 3, "enum_LAST_WRITE"], [24, 15, 2, "enum_LAST_READ"], [24, 2, 3, "enum_LAST_WRITE"], [40, 22, 3, "enum_LAST_WRITE"], [42, 24, 2, "enum_LAST_READ"], [42, 2, 3, "enum_LAST_WRITE"], [57, 13, 3, "enum_LAST_WRITE"], [59, 42, 2, "enum_LAST_READ"], [59, 2, 3, "enum_LAST_WRITE"], [73, 13, 3, "enum_LAST_WRITE"], [67, 73, 2, "enum_LAST_READ"], [67, 13, 3, "enum_LAST_WRITE"], [82, 4, 3, "enum_LAST_WRITE"], [89, 73, 2, "enum_LAST_READ"], [89, 67, 3, "enum_LAST_WRITE"], [91, 40, 2, "enum_LAST_READ"], [91, 22, 3, "enum_LAST_WRITE"], [86, 31, 3, "enum_LAST_WRITE"], [97, 42, 2, "enum_LAST_READ"], [97, 2, 3, "enum_LAST_WRITE"], [108, 97, 2, "enum_LAST_READ"], [108, 2, 3, "enum_LAST_WRITE"], [115, 106, 3, "enum_LAST_WRITE"], [124, 115, 2, "enum_LAST_READ"], [124, 106, 3, "enum_LAST_WRITE"], [129, 86, 3, "enum_LAST_WRITE"], [129, 31, 3, "enum_LAST_WRITE"], [122, 124, 2, "enum_LAST_READ"], [122, 106, 3, "enum_LAST_WRITE"], [140, 97, 2, "enum_LAST_READ"], [140, 2, 3, "enum_LAST_WRITE"], [151, 140, 2, "enum_LAST_READ"], [151, 2, 3, "enum_LAST_WRITE"], [160, 86, 3, "enum_LAST_WRITE"], [160, 31, 3, "enum_LAST_WRITE"], [177, 140, 2, "enum_LAST_READ"], [177, 2, 3, "enum_LAST_WRITE"], [189, 124, 2, "enum_LAST_READ"], [189, 115, 2, "enum_LAST_READ"], [189, 122, 3, "enum_LAST_WRITE"], [189, 149, 3, "enum_LAST_WRITE"], [189, 106, 3, "enum_LAST_WRITE"], [13, 15, 4, "enum_COMPUTED_FROM"], [22, 24, 4, "enum_COMPUTED_FROM"], [67, 73, 4, "enum_COMPUTED_FROM"], [86, 89, 4, "enum_COMPUTED_FROM"], [86, 91, 4, "enum_COMPUTED_FROM"], [106, 108, 4, "enum_COMPUTED_FROM"], [122, 124, 4, "enum_COMPUTED_FROM"], [122, 129, 4, "enum_COMPUTED_FROM"], [149, 160, 4, "enum_COMPUTED_FROM"], [149, 151, 4, "enum_COMPUTED_FROM"]], "error_location": 40, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/pstch/django-crucrudile.git", "old_path": "django_pstch_helpers/views/filtered.py", "hash": "1eaef5f8ee85d2444a3993b73e03d60ace013b4e", "code": "def get_queryset(self, filter: bool = True) -> QuerySet:\n    \"\"\"\n    Return the list of items for this view.\n\n    The return value must be an iterable and may be an instance of\n    `QuerySet` in which case `QuerySet` specific behavior will be enabled.\n    \"\"\"\n    key: str = self.kwargs['filter_key']\n    value: Any = self.kwargs['filter_value']\n\n    filter_dict: Dict[str, Any] = {}\n\n    if not value in self.filter_keys:\n        raise ImproperlyConfigured(\n            \"%s is not present in filter_keys (%s)\" % (key, self.filter_keys)\n        )\n\n    key: str = \"__\".join(key.split(\".\"))\n\n    if filter:\n        filter_dict = { key : value }\n\n    if self.queryset is not None:\n        queryset: QuerySet = self.queryset\n        if isinstance(queryset, QuerySet):\n            queryset: QuerySet = queryset.filter(**filter_dict)\n    elif self.model is not None:\n        queryset: QuerySet = self.model._default_manager.filter(**filter_dict)\n    else:\n        raise ImproperlyConfigured(\n            \"%(cls)s is missing a QuerySet. Define \"\n            \"%(cls)s.model, %(cls)s.queryset, or override \"\n            \"%(cls)s.get_queryset().\" % {\n                'cls': self.__class__.__name__\n            }\n        )\n    return queryset\n", "rewrite": "ReplaceText(target='key' @(24,15)->(24,20))", "error_line": 12, "has_bug": true, "code_full": "from typing import Any, Dict, Optional, Union\n\nfrom django.core.exceptions import ImproperlyConfigured\nfrom django.db.models import QuerySet\n\n\ndef get_queryset(self, filter: bool = True) -> QuerySet:\n    \"\"\"\n    Return the list of items for this view.\n\n    The return value must be an iterable and may be an instance of\n    `QuerySet` in which case `QuerySet` specific behavior will be enabled.\n    \"\"\"\n    key: str = self.kwargs['filter_key']\n    value: Any = self.kwargs['filter_value']\n\n    filter_dict: Dict[str, Any] = {}\n\n    if not value in self.filter_keys:\n        raise ImproperlyConfigured(\n            \"%s is not present in filter_keys (%s)\" % (key, self.filter_keys)\n        )\n\n    key: str = \"__\".join(key.split(\".\"))\n\n    if filter:\n        filter_dict = { key : value }\n\n    if self.queryset is not None:\n        queryset: QuerySet = self.queryset\n        if isinstance(queryset, QuerySet):\n            queryset: QuerySet = queryset.filter(**filter_dict)\n    elif self.model is not None:\n        queryset: QuerySet = self.model._default_manager.filter(**filter_dict)\n    else:\n        raise ImproperlyConfigured(\n            \"%(cls)s is missing a QuerySet. Define \"\n            \"%(cls)s.model, %(cls)s.queryset, or override \"\n            \"%(cls)s.get_queryset().\" % {\n                'cls': self.__class__.__name__\n            }\n        )\n    return queryset\n", "error_location_char": [396, 401], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def adjust_cluster(", "self", ",", "cluster", ",", "rowscores", ",", "cutoff", ",", "limit", ")", ":", "#NEWLINE#", "#INDENT#", "'adjust a single cluster'", "#NEWLINE#", "def max_row_in_column(", "matrix", ",", "column", ")", ":", "#NEWLINE#", "#INDENT#", "'returns a pair of the maximum row index and score in the given matrix and column'", "#NEWLINE#", "sm", "=", "matrix", ".", "submatrix_by_name", "(", "wh", ",", "[", "matrix", ".", "column_names", "[", "column", "]", "]", ")", "#NEWLINE#", "sm_values", "=", "sm", ".", "values", "#NEWLINE#", "max_row", "=", "0", "#NEWLINE#", "max_score", "=", "sys", ".", "float_info", ".", "min", "#NEWLINE#", "for", "row", "in", "range", "(", "sm", ".", "num_rows", "(", ")", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "sm_values", "[", "row", "]", "[", "0", "]", ">", "max_score", ")", ":", "#NEWLINE#", "#INDENT#", "max_score", "=", "sm", "[", "row", "]", "[", "0", "]", "#NEWLINE#", "max_row", "=", "row", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "return", "sm", ".", "row_names", "[", "max_row", "]", "#NEWLINE#", "#UNINDENT#", "old_rows", "=", "self", ".", "rows_for_cluster", "(", "cluster", ")", "#NEWLINE#", "not_in", "=", "[", "]", "#NEWLINE#", "for", "row", "in", "range", "(", "rowscores", ".", "num_rows", "(", ")", ")", ":", "#NEWLINE#", "#INDENT#", "row_name", "=", "rowscores", ".", "row_names", "[", "row", "]", "#NEWLINE#", "if", "(", "row_name", "not in", "old_rows", ")", ":", "#NEWLINE#", "#INDENT#", "not_in", ".", "append", "(", "(", "row", ",", "rowscores", ".", "row_names", "[", "row", "]", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "threshold", "=", "rowscores", ".", "submatrix_by_name", "(", "old_rows", ",", "[", "rowscores", ".", "column_names", "[", "(", "cluster", "-", "1", ")", "]", "]", ")", ".", "quantile", "(", "cutoff", ")", "#NEWLINE#", "wh", "=", "[", "]", "#NEWLINE#", "rs_values", "=", "rowscores", ".", "values", "#NEWLINE#", "for", "(", "row", ",", "row_name", ")", "in", "not_in", ":", "#NEWLINE#", "#INDENT#", "if", "(", "rs_values", "[", "row", "]", "[", "(", "cluster", "-", "1", ")", "]", "<", "threshold", ")", ":", "#NEWLINE#", "#INDENT#", "wh", ".", "append", "(", "row_name", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "if", "(", "len", "(", "wh", ")", "==", "0", ")", ":", "#NEWLINE#", "#INDENT#", "return", "{", "}", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "len", "(", "wh", ")", ">", "limit", ")", ":", "#NEWLINE#", "#INDENT#", "return", "{", "}", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "tries", "=", "0", "#NEWLINE#", "result", "=", "{", "}", "#NEWLINE#", "while", "(", "(", "len", "(", "wh", ")", ">", "0", ")", "and", "(", "tries", "<", "MAX_ADJUST_TRIES", ")", ")", ":", "#NEWLINE#", "#INDENT#", "wh2", "=", "max_row_in_column", "(", "rowscores", ",", "(", "cluster", "-", "1", ")", ")", "#NEWLINE#", "wh2_index", "=", "rowscores", ".", "row_names", ".", "index", "(", "wh2", ")", "#NEWLINE#", "clusters", "=", "self", ".", "clusters_for_row", "(", "wh2", ")", "#NEWLINE#", "wh2_scores", "=", "[", "]", "#NEWLINE#", "for", "c", "in", "clusters", ":", "#NEWLINE#", "#INDENT#", "wh2_scores", ".", "append", "(", "rs_values", "[", "wh2_index", "]", "[", "(", "c", "-", "1", ")", "]", ")", "#NEWLINE#", "#UNINDENT#", "result", "[", "wh2", "]", "=", "cluster", "#NEWLINE#", "wh", ".", "remove", "(", "wh2", ")", "#NEWLINE#", "tries", "+=", "1", "#NEWLINE#", "#UNINDENT#", "old_num", "=", "len", "(", "self", ".", "rows_for_cluster", "(", "cluster", ")", ")", "#NEWLINE#", "logging", ".", "info", "(", "'CLUSTER %d, # ROWS BEFORE: %d, AFTER: %d'", ",", "cluster", ",", "old_num", ",", "(", "old_num", "+", "len", "(", "result", ")", ")", ")", "#NEWLINE#", "return", "result"], "edges": [[1, 5, 7, "enum_FIELD"], [14, 15, 7, "enum_FIELD"], [21, 19, 7, "enum_FIELD"], [116, 122, 7, "enum_FIELD"], [125, 128, 7, "enum_FIELD"], [133, 132, 7, "enum_FIELD"], [133, 135, 7, "enum_FIELD"], [180, 204, 7, "enum_FIELD"], [207, 210, 7, "enum_FIELD"], [212, 216, 7, "enum_FIELD"], [225, 222, 7, "enum_FIELD"], [225, 226, 7, "enum_FIELD"], [267, 264, 7, "enum_FIELD"], [296, 299, 7, "enum_FIELD"], [300, 303, 7, "enum_FIELD"], [306, 316, 7, "enum_FIELD"], [407, 411, 7, "enum_FIELD"], [419, 427, 7, "enum_FIELD"], [440, 441, 7, "enum_FIELD"], [24, 25, 7, "enum_FIELD"], [26, 34, 7, "enum_FIELD"], [44, 48, 7, "enum_FIELD"], [50, 53, 7, "enum_FIELD"], [54, 60, 7, "enum_FIELD"], [65, 64, 7, "enum_FIELD"], [65, 67, 7, "enum_FIELD"], [108, 112, 7, "enum_FIELD"], [122, 120, 7, "enum_FIELD"], [135, 134, 7, "enum_FIELD"], [144, 150, 7, "enum_FIELD"], [154, 157, 7, "enum_FIELD"], [204, 202, 7, "enum_FIELD"], [216, 215, 7, "enum_FIELD"], [230, 243, 7, "enum_FIELD"], [264, 261, 7, "enum_FIELD"], [270, 271, 7, "enum_FIELD"], [279, 285, 7, "enum_FIELD"], [325, 331, 7, "enum_FIELD"], [338, 346, 7, "enum_FIELD"], [349, 355, 7, "enum_FIELD"], [358, 361, 7, "enum_FIELD"], [366, 365, 7, "enum_FIELD"], [366, 367, 7, "enum_FIELD"], [388, 394, 7, "enum_FIELD"], [395, 399, 7, "enum_FIELD"], [402, 403, 7, "enum_FIELD"], [402, 405, 7, "enum_FIELD"], [411, 410, 7, "enum_FIELD"], [427, 421, 7, "enum_FIELD"], [34, 30, 7, "enum_FIELD"], [48, 47, 7, "enum_FIELD"], [60, 58, 7, "enum_FIELD"], [67, 66, 7, "enum_FIELD"], [77, 86, 7, "enum_FIELD"], [112, 110, 7, "enum_FIELD"], [112, 113, 7, "enum_FIELD"], [120, 119, 7, "enum_FIELD"], [139, 137, 7, "enum_FIELD"], [150, 148, 7, "enum_FIELD"], [150, 151, 7, "enum_FIELD"], [157, 156, 7, "enum_FIELD"], [162, 166, 7, "enum_FIELD"], [202, 188, 7, "enum_FIELD"], [243, 236, 7, "enum_FIELD"], [248, 252, 7, "enum_FIELD"], [261, 260, 7, "enum_FIELD"], [285, 282, 7, "enum_FIELD"], [291, 292, 7, "enum_FIELD"], [313, 310, 7, "enum_FIELD"], [319, 318, 7, "enum_FIELD"], [331, 328, 7, "enum_FIELD"], [346, 344, 7, "enum_FIELD"], [355, 353, 7, "enum_FIELD"], [370, 374, 7, "enum_FIELD"], [390, 389, 7, "enum_FIELD"], [390, 391, 7, "enum_FIELD"], [399, 397, 7, "enum_FIELD"], [415, 413, 7, "enum_FIELD"], [421, 420, 7, "enum_FIELD"], [432, 431, 7, "enum_FIELD"], [432, 434, 7, "enum_FIELD"], [30, 29, 7, "enum_FIELD"], [58, 57, 7, "enum_FIELD"], [71, 69, 7, "enum_FIELD"], [86, 83, 7, "enum_FIELD"], [91, 98, 7, "enum_FIELD"], [101, 104, 7, "enum_FIELD"], [110, 109, 7, "enum_FIELD"], [137, 136, 7, "enum_FIELD"], [148, 147, 7, "enum_FIELD"], [166, 164, 7, "enum_FIELD"], [188, 184, 7, "enum_FIELD"], [236, 233, 7, "enum_FIELD"], [236, 239, 7, "enum_FIELD"], [252, 250, 7, "enum_FIELD"], [282, 281, 7, "enum_FIELD"], [310, 309, 7, "enum_FIELD"], [334, 333, 7, "enum_FIELD"], [334, 335, 7, "enum_FIELD"], [344, 342, 7, "enum_FIELD"], [353, 352, 7, "enum_FIELD"], [374, 372, 7, "enum_FIELD"], [397, 396, 7, "enum_FIELD"], [413, 412, 7, "enum_FIELD"], [434, 433, 7, "enum_FIELD"], [39, 37, 7, "enum_FIELD"], [39, 40, 7, "enum_FIELD"], [69, 68, 7, "enum_FIELD"], [83, 80, 7, "enum_FIELD"], [83, 84, 7, "enum_FIELD"], [98, 95, 7, "enum_FIELD"], [98, 99, 7, "enum_FIELD"], [164, 163, 7, "enum_FIELD"], [184, 183, 7, "enum_FIELD"], [233, 232, 7, "enum_FIELD"], [233, 234, 7, "enum_FIELD"], [239, 238, 7, "enum_FIELD"], [239, 240, 7, "enum_FIELD"], [250, 249, 7, "enum_FIELD"], [342, 341, 7, "enum_FIELD"], [372, 371, 7, "enum_FIELD"], [379, 376, 7, "enum_FIELD"], [379, 382, 7, "enum_FIELD"], [37, 36, 7, "enum_FIELD"], [80, 79, 7, "enum_FIELD"], [80, 81, 7, "enum_FIELD"], [95, 94, 7, "enum_FIELD"], [95, 96, 7, "enum_FIELD"], [173, 171, 7, "enum_FIELD"], [173, 174, 7, "enum_FIELD"], [193, 191, 7, "enum_FIELD"], [193, 196, 7, "enum_FIELD"], [376, 375, 7, "enum_FIELD"], [376, 377, 7, "enum_FIELD"], [382, 381, 7, "enum_FIELD"], [382, 383, 7, "enum_FIELD"], [171, 170, 7, "enum_FIELD"], [191, 190, 7, "enum_FIELD"], [196, 195, 7, "enum_FIELD"], [196, 197, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [29, 18, 10, "enum_LAST_LEXICAL_USE"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [36, 29, 10, "enum_LAST_LEXICAL_USE"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [40, 20, 10, "enum_LAST_LEXICAL_USE"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [47, 27, 10, "enum_LAST_LEXICAL_USE"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [68, 47, 10, "enum_LAST_LEXICAL_USE"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [79, 45, 10, "enum_LAST_LEXICAL_USE"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [81, 64, 10, "enum_LAST_LEXICAL_USE"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [87, 55, 10, "enum_LAST_LEXICAL_USE"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 91, 9, "enum_NEXT_SYNTAX"], [92, 87, 10, "enum_LAST_LEXICAL_USE"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [94, 68, 10, "enum_LAST_LEXICAL_USE"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [96, 81, 10, "enum_LAST_LEXICAL_USE"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [102, 51, 10, "enum_LAST_LEXICAL_USE"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [104, 96, 10, "enum_LAST_LEXICAL_USE"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 108, 9, "enum_NEXT_SYNTAX"], [109, 94, 10, "enum_LAST_LEXICAL_USE"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [113, 102, 10, "enum_LAST_LEXICAL_USE"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [119, 2, 10, "enum_LAST_LEXICAL_USE"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [123, 4, 10, "enum_LAST_LEXICAL_USE"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 131, 9, "enum_NEXT_SYNTAX"], [132, 104, 10, "enum_LAST_LEXICAL_USE"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [134, 66, 10, "enum_LAST_LEXICAL_USE"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [136, 6, 10, "enum_LAST_LEXICAL_USE"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [147, 136, 10, "enum_LAST_LEXICAL_USE"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [151, 132, 10, "enum_LAST_LEXICAL_USE"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [156, 145, 10, "enum_LAST_LEXICAL_USE"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [158, 117, 10, "enum_LAST_LEXICAL_USE"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 162, 9, "enum_NEXT_SYNTAX"], [163, 126, 10, "enum_LAST_LEXICAL_USE"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [168, 151, 10, "enum_LAST_LEXICAL_USE"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [170, 147, 10, "enum_LAST_LEXICAL_USE"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [174, 168, 10, "enum_LAST_LEXICAL_USE"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [183, 170, 10, "enum_LAST_LEXICAL_USE"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 184, 9, "enum_NEXT_SYNTAX"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [187, 158, 10, "enum_LAST_LEXICAL_USE"], [186, 187, 9, "enum_NEXT_SYNTAX"], [187, 188, 9, "enum_NEXT_SYNTAX"], [188, 189, 9, "enum_NEXT_SYNTAX"], [190, 183, 10, "enum_LAST_LEXICAL_USE"], [189, 190, 9, "enum_NEXT_SYNTAX"], [190, 191, 9, "enum_NEXT_SYNTAX"], [191, 192, 9, "enum_NEXT_SYNTAX"], [192, 193, 9, "enum_NEXT_SYNTAX"], [193, 194, 9, "enum_NEXT_SYNTAX"], [195, 123, 10, "enum_LAST_LEXICAL_USE"], [194, 195, 9, "enum_NEXT_SYNTAX"], [195, 196, 9, "enum_NEXT_SYNTAX"], [196, 197, 9, "enum_NEXT_SYNTAX"], [197, 198, 9, "enum_NEXT_SYNTAX"], [198, 199, 9, "enum_NEXT_SYNTAX"], [199, 200, 9, "enum_NEXT_SYNTAX"], [200, 201, 9, "enum_NEXT_SYNTAX"], [201, 202, 9, "enum_NEXT_SYNTAX"], [202, 203, 9, "enum_NEXT_SYNTAX"], [203, 204, 9, "enum_NEXT_SYNTAX"], [205, 8, 10, "enum_LAST_LEXICAL_USE"], [204, 205, 9, "enum_NEXT_SYNTAX"], [205, 206, 9, "enum_NEXT_SYNTAX"], [206, 207, 9, "enum_NEXT_SYNTAX"], [208, 33, 10, "enum_LAST_LEXICAL_USE"], [207, 208, 9, "enum_NEXT_SYNTAX"], [208, 209, 9, "enum_NEXT_SYNTAX"], [209, 210, 9, "enum_NEXT_SYNTAX"], [210, 211, 9, "enum_NEXT_SYNTAX"], [211, 212, 9, "enum_NEXT_SYNTAX"], [212, 213, 9, "enum_NEXT_SYNTAX"], [213, 214, 9, "enum_NEXT_SYNTAX"], [215, 190, 10, "enum_LAST_LEXICAL_USE"], [214, 215, 9, "enum_NEXT_SYNTAX"], [215, 216, 9, "enum_NEXT_SYNTAX"], [216, 217, 9, "enum_NEXT_SYNTAX"], [217, 219, 9, "enum_NEXT_SYNTAX"], [219, 220, 9, "enum_NEXT_SYNTAX"], [221, 174, 10, "enum_LAST_LEXICAL_USE"], [220, 221, 9, "enum_NEXT_SYNTAX"], [221, 222, 9, "enum_NEXT_SYNTAX"], [223, 156, 10, "enum_LAST_LEXICAL_USE"], [222, 223, 9, "enum_NEXT_SYNTAX"], [223, 224, 9, "enum_NEXT_SYNTAX"], [224, 225, 9, "enum_NEXT_SYNTAX"], [226, 163, 10, "enum_LAST_LEXICAL_USE"], [225, 226, 9, "enum_NEXT_SYNTAX"], [226, 227, 9, "enum_NEXT_SYNTAX"], [227, 230, 9, "enum_NEXT_SYNTAX"], [230, 231, 9, "enum_NEXT_SYNTAX"], [232, 213, 10, "enum_LAST_LEXICAL_USE"], [231, 232, 9, "enum_NEXT_SYNTAX"], [232, 233, 9, "enum_NEXT_SYNTAX"], [234, 221, 10, "enum_LAST_LEXICAL_USE"], [233, 234, 9, "enum_NEXT_SYNTAX"], [234, 235, 9, "enum_NEXT_SYNTAX"], [235, 236, 9, "enum_NEXT_SYNTAX"], [236, 237, 9, "enum_NEXT_SYNTAX"], [238, 195, 10, "enum_LAST_LEXICAL_USE"], [237, 238, 9, "enum_NEXT_SYNTAX"], [238, 239, 9, "enum_NEXT_SYNTAX"], [239, 240, 9, "enum_NEXT_SYNTAX"], [240, 241, 9, "enum_NEXT_SYNTAX"], [241, 242, 9, "enum_NEXT_SYNTAX"], [242, 243, 9, "enum_NEXT_SYNTAX"], [244, 181, 10, "enum_LAST_LEXICAL_USE"], [243, 244, 9, "enum_NEXT_SYNTAX"], [244, 245, 9, "enum_NEXT_SYNTAX"], [245, 246, 9, "enum_NEXT_SYNTAX"], [246, 248, 9, "enum_NEXT_SYNTAX"], [249, 208, 10, "enum_LAST_LEXICAL_USE"], [248, 249, 9, "enum_NEXT_SYNTAX"], [249, 250, 9, "enum_NEXT_SYNTAX"], [250, 251, 9, "enum_NEXT_SYNTAX"], [251, 252, 9, "enum_NEXT_SYNTAX"], [253, 223, 10, "enum_LAST_LEXICAL_USE"], [252, 253, 9, "enum_NEXT_SYNTAX"], [253, 254, 9, "enum_NEXT_SYNTAX"], [254, 258, 9, "enum_NEXT_SYNTAX"], [258, 259, 9, "enum_NEXT_SYNTAX"], [259, 260, 9, "enum_NEXT_SYNTAX"], [260, 261, 9, "enum_NEXT_SYNTAX"], [262, 249, 10, "enum_LAST_LEXICAL_USE"], [261, 262, 9, "enum_NEXT_SYNTAX"], [262, 263, 9, "enum_NEXT_SYNTAX"], [263, 264, 9, "enum_NEXT_SYNTAX"], [264, 265, 9, "enum_NEXT_SYNTAX"], [265, 266, 9, "enum_NEXT_SYNTAX"], [266, 267, 9, "enum_NEXT_SYNTAX"], [267, 270, 9, "enum_NEXT_SYNTAX"], [270, 271, 9, "enum_NEXT_SYNTAX"], [271, 272, 9, "enum_NEXT_SYNTAX"], [272, 275, 9, "enum_NEXT_SYNTAX"], [275, 276, 9, "enum_NEXT_SYNTAX"], [276, 279, 9, "enum_NEXT_SYNTAX"], [279, 280, 9, "enum_NEXT_SYNTAX"], [281, 260, 10, "enum_LAST_LEXICAL_USE"], [280, 281, 9, "enum_NEXT_SYNTAX"], [281, 282, 9, "enum_NEXT_SYNTAX"], [283, 262, 10, "enum_LAST_LEXICAL_USE"], [282, 283, 9, "enum_NEXT_SYNTAX"], [283, 284, 9, "enum_NEXT_SYNTAX"], [284, 285, 9, "enum_NEXT_SYNTAX"], [286, 10, 10, "enum_LAST_LEXICAL_USE"], [285, 286, 9, "enum_NEXT_SYNTAX"], [286, 287, 9, "enum_NEXT_SYNTAX"], [287, 288, 9, "enum_NEXT_SYNTAX"], [288, 291, 9, "enum_NEXT_SYNTAX"], [291, 292, 9, "enum_NEXT_SYNTAX"], [292, 293, 9, "enum_NEXT_SYNTAX"], [293, 296, 9, "enum_NEXT_SYNTAX"], [296, 297, 9, "enum_NEXT_SYNTAX"], [297, 298, 9, "enum_NEXT_SYNTAX"], [298, 299, 9, "enum_NEXT_SYNTAX"], [299, 300, 9, "enum_NEXT_SYNTAX"], [300, 301, 9, "enum_NEXT_SYNTAX"], [301, 302, 9, "enum_NEXT_SYNTAX"], [302, 303, 9, "enum_NEXT_SYNTAX"], [303, 304, 9, "enum_NEXT_SYNTAX"], [304, 306, 9, "enum_NEXT_SYNTAX"], [306, 307, 9, "enum_NEXT_SYNTAX"], [307, 308, 9, "enum_NEXT_SYNTAX"], [309, 281, 10, "enum_LAST_LEXICAL_USE"], [308, 309, 9, "enum_NEXT_SYNTAX"], [309, 310, 9, "enum_NEXT_SYNTAX"], [311, 283, 10, "enum_LAST_LEXICAL_USE"], [310, 311, 9, "enum_NEXT_SYNTAX"], [311, 312, 9, "enum_NEXT_SYNTAX"], [312, 313, 9, "enum_NEXT_SYNTAX"], [313, 314, 9, "enum_NEXT_SYNTAX"], [314, 315, 9, "enum_NEXT_SYNTAX"], [315, 316, 9, "enum_NEXT_SYNTAX"], [316, 317, 9, "enum_NEXT_SYNTAX"], [318, 297, 10, "enum_LAST_LEXICAL_USE"], [317, 318, 9, "enum_NEXT_SYNTAX"], [318, 319, 9, "enum_NEXT_SYNTAX"], [319, 320, 9, "enum_NEXT_SYNTAX"], [320, 321, 9, "enum_NEXT_SYNTAX"], [321, 322, 9, "enum_NEXT_SYNTAX"], [322, 323, 9, "enum_NEXT_SYNTAX"], [323, 325, 9, "enum_NEXT_SYNTAX"], [325, 326, 9, "enum_NEXT_SYNTAX"], [326, 327, 9, "enum_NEXT_SYNTAX"], [327, 328, 9, "enum_NEXT_SYNTAX"], [328, 329, 9, "enum_NEXT_SYNTAX"], [330, 215, 10, "enum_LAST_LEXICAL_USE"], [329, 330, 9, "enum_NEXT_SYNTAX"], [330, 331, 9, "enum_NEXT_SYNTAX"], [331, 332, 9, "enum_NEXT_SYNTAX"], [333, 238, 10, "enum_LAST_LEXICAL_USE"], [332, 333, 9, "enum_NEXT_SYNTAX"], [333, 334, 9, "enum_NEXT_SYNTAX"], [334, 335, 9, "enum_NEXT_SYNTAX"], [335, 336, 9, "enum_NEXT_SYNTAX"], [336, 337, 9, "enum_NEXT_SYNTAX"], [337, 338, 9, "enum_NEXT_SYNTAX"], [338, 339, 9, "enum_NEXT_SYNTAX"], [339, 340, 9, "enum_NEXT_SYNTAX"], [341, 330, 10, "enum_LAST_LEXICAL_USE"], [340, 341, 9, "enum_NEXT_SYNTAX"], [341, 342, 9, "enum_NEXT_SYNTAX"], [342, 343, 9, "enum_NEXT_SYNTAX"], [343, 344, 9, "enum_NEXT_SYNTAX"], [344, 345, 9, "enum_NEXT_SYNTAX"], [345, 346, 9, "enum_NEXT_SYNTAX"], [347, 326, 10, "enum_LAST_LEXICAL_USE"], [346, 347, 9, "enum_NEXT_SYNTAX"], [347, 348, 9, "enum_NEXT_SYNTAX"], [348, 349, 9, "enum_NEXT_SYNTAX"], [349, 350, 9, "enum_NEXT_SYNTAX"], [350, 351, 9, "enum_NEXT_SYNTAX"], [352, 119, 10, "enum_LAST_LEXICAL_USE"], [351, 352, 9, "enum_NEXT_SYNTAX"], [352, 353, 9, "enum_NEXT_SYNTAX"], [353, 354, 9, "enum_NEXT_SYNTAX"], [354, 355, 9, "enum_NEXT_SYNTAX"], [356, 347, 10, "enum_LAST_LEXICAL_USE"], [355, 356, 9, "enum_NEXT_SYNTAX"], [356, 357, 9, "enum_NEXT_SYNTAX"], [357, 358, 9, "enum_NEXT_SYNTAX"], [358, 359, 9, "enum_NEXT_SYNTAX"], [359, 360, 9, "enum_NEXT_SYNTAX"], [360, 361, 9, "enum_NEXT_SYNTAX"], [361, 362, 9, "enum_NEXT_SYNTAX"], [362, 364, 9, "enum_NEXT_SYNTAX"], [364, 365, 9, "enum_NEXT_SYNTAX"], [365, 366, 9, "enum_NEXT_SYNTAX"], [367, 350, 10, "enum_LAST_LEXICAL_USE"], [366, 367, 9, "enum_NEXT_SYNTAX"], [367, 368, 9, "enum_NEXT_SYNTAX"], [368, 370, 9, "enum_NEXT_SYNTAX"], [371, 359, 10, "enum_LAST_LEXICAL_USE"], [370, 371, 9, "enum_NEXT_SYNTAX"], [371, 372, 9, "enum_NEXT_SYNTAX"], [372, 373, 9, "enum_NEXT_SYNTAX"], [373, 374, 9, "enum_NEXT_SYNTAX"], [375, 232, 10, "enum_LAST_LEXICAL_USE"], [374, 375, 9, "enum_NEXT_SYNTAX"], [375, 376, 9, "enum_NEXT_SYNTAX"], [377, 339, 10, "enum_LAST_LEXICAL_USE"], [376, 377, 9, "enum_NEXT_SYNTAX"], [377, 378, 9, "enum_NEXT_SYNTAX"], [378, 379, 9, "enum_NEXT_SYNTAX"], [379, 380, 9, "enum_NEXT_SYNTAX"], [381, 365, 10, "enum_LAST_LEXICAL_USE"], [380, 381, 9, "enum_NEXT_SYNTAX"], [381, 382, 9, "enum_NEXT_SYNTAX"], [382, 383, 9, "enum_NEXT_SYNTAX"], [383, 384, 9, "enum_NEXT_SYNTAX"], [384, 385, 9, "enum_NEXT_SYNTAX"], [385, 386, 9, "enum_NEXT_SYNTAX"], [386, 388, 9, "enum_NEXT_SYNTAX"], [389, 301, 10, "enum_LAST_LEXICAL_USE"], [388, 389, 9, "enum_NEXT_SYNTAX"], [389, 390, 9, "enum_NEXT_SYNTAX"], [391, 356, 10, "enum_LAST_LEXICAL_USE"], [390, 391, 9, "enum_NEXT_SYNTAX"], [391, 392, 9, "enum_NEXT_SYNTAX"], [392, 393, 9, "enum_NEXT_SYNTAX"], [394, 333, 10, "enum_LAST_LEXICAL_USE"], [393, 394, 9, "enum_NEXT_SYNTAX"], [394, 395, 9, "enum_NEXT_SYNTAX"], [396, 311, 10, "enum_LAST_LEXICAL_USE"], [395, 396, 9, "enum_NEXT_SYNTAX"], [396, 397, 9, "enum_NEXT_SYNTAX"], [397, 398, 9, "enum_NEXT_SYNTAX"], [398, 399, 9, "enum_NEXT_SYNTAX"], [400, 391, 10, "enum_LAST_LEXICAL_USE"], [399, 400, 9, "enum_NEXT_SYNTAX"], [400, 401, 9, "enum_NEXT_SYNTAX"], [401, 402, 9, "enum_NEXT_SYNTAX"], [403, 318, 10, "enum_LAST_LEXICAL_USE"], [402, 403, 9, "enum_NEXT_SYNTAX"], [403, 404, 9, "enum_NEXT_SYNTAX"], [404, 405, 9, "enum_NEXT_SYNTAX"], [405, 407, 9, "enum_NEXT_SYNTAX"], [407, 408, 9, "enum_NEXT_SYNTAX"], [408, 409, 9, "enum_NEXT_SYNTAX"], [410, 309, 10, "enum_LAST_LEXICAL_USE"], [409, 410, 9, "enum_NEXT_SYNTAX"], [410, 411, 9, "enum_NEXT_SYNTAX"], [412, 352, 10, "enum_LAST_LEXICAL_USE"], [411, 412, 9, "enum_NEXT_SYNTAX"], [412, 413, 9, "enum_NEXT_SYNTAX"], [413, 414, 9, "enum_NEXT_SYNTAX"], [414, 415, 9, "enum_NEXT_SYNTAX"], [416, 394, 10, "enum_LAST_LEXICAL_USE"], [415, 416, 9, "enum_NEXT_SYNTAX"], [416, 417, 9, "enum_NEXT_SYNTAX"], [417, 418, 9, "enum_NEXT_SYNTAX"], [418, 419, 9, "enum_NEXT_SYNTAX"], [419, 420, 9, "enum_NEXT_SYNTAX"], [420, 421, 9, "enum_NEXT_SYNTAX"], [421, 422, 9, "enum_NEXT_SYNTAX"], [422, 423, 9, "enum_NEXT_SYNTAX"], [423, 424, 9, "enum_NEXT_SYNTAX"], [424, 425, 9, "enum_NEXT_SYNTAX"], [426, 416, 10, "enum_LAST_LEXICAL_USE"], [425, 426, 9, "enum_NEXT_SYNTAX"], [426, 427, 9, "enum_NEXT_SYNTAX"], [428, 408, 10, "enum_LAST_LEXICAL_USE"], [427, 428, 9, "enum_NEXT_SYNTAX"], [428, 429, 9, "enum_NEXT_SYNTAX"], [429, 430, 9, "enum_NEXT_SYNTAX"], [431, 428, 10, "enum_LAST_LEXICAL_USE"], [430, 431, 9, "enum_NEXT_SYNTAX"], [431, 432, 9, "enum_NEXT_SYNTAX"], [433, 410, 10, "enum_LAST_LEXICAL_USE"], [432, 433, 9, "enum_NEXT_SYNTAX"], [433, 434, 9, "enum_NEXT_SYNTAX"], [435, 389, 10, "enum_LAST_LEXICAL_USE"], [434, 435, 9, "enum_NEXT_SYNTAX"], [435, 436, 9, "enum_NEXT_SYNTAX"], [436, 437, 9, "enum_NEXT_SYNTAX"], [437, 438, 9, "enum_NEXT_SYNTAX"], [438, 440, 9, "enum_NEXT_SYNTAX"], [441, 435, 10, "enum_LAST_LEXICAL_USE"], [440, 441, 9, "enum_NEXT_SYNTAX"], [5, 14, 1, "enum_CFG_NEXT"], [14, 21, 1, "enum_CFG_NEXT"], [21, 116, 1, "enum_CFG_NEXT"], [19, 24, 1, "enum_CFG_NEXT"], [24, 26, 1, "enum_CFG_NEXT"], [26, 44, 1, "enum_CFG_NEXT"], [44, 50, 1, "enum_CFG_NEXT"], [50, 54, 1, "enum_CFG_NEXT"], [54, 67, 1, "enum_CFG_NEXT"], [67, 64, 1, "enum_CFG_NEXT"], [64, 108, 1, "enum_CFG_NEXT"], [64, 86, 1, "enum_CFG_NEXT"], [86, 64, 1, "enum_CFG_NEXT"], [86, 91, 1, "enum_CFG_NEXT"], [91, 101, 1, "enum_CFG_NEXT"], [101, 64, 1, "enum_CFG_NEXT"], [116, 125, 1, "enum_CFG_NEXT"], [125, 135, 1, "enum_CFG_NEXT"], [135, 132, 1, "enum_CFG_NEXT"], [132, 180, 1, "enum_CFG_NEXT"], [132, 144, 1, "enum_CFG_NEXT"], [144, 157, 1, "enum_CFG_NEXT"], [157, 132, 1, "enum_CFG_NEXT"], [157, 162, 1, "enum_CFG_NEXT"], [162, 132, 1, "enum_CFG_NEXT"], [180, 207, 1, "enum_CFG_NEXT"], [207, 212, 1, "enum_CFG_NEXT"], [212, 226, 1, "enum_CFG_NEXT"], [226, 222, 1, "enum_CFG_NEXT"], [222, 243, 1, "enum_CFG_NEXT"], [222, 264, 1, "enum_CFG_NEXT"], [243, 222, 1, "enum_CFG_NEXT"], [243, 248, 1, "enum_CFG_NEXT"], [248, 222, 1, "enum_CFG_NEXT"], [264, 285, 1, "enum_CFG_NEXT"], [264, 270, 1, "enum_CFG_NEXT"], [285, 291, 1, "enum_CFG_NEXT"], [285, 296, 1, "enum_CFG_NEXT"], [296, 300, 1, "enum_CFG_NEXT"], [300, 316, 1, "enum_CFG_NEXT"], [316, 325, 1, "enum_CFG_NEXT"], [316, 407, 1, "enum_CFG_NEXT"], [325, 338, 1, "enum_CFG_NEXT"], [338, 349, 1, "enum_CFG_NEXT"], [349, 358, 1, "enum_CFG_NEXT"], [358, 367, 1, "enum_CFG_NEXT"], [367, 365, 1, "enum_CFG_NEXT"], [365, 388, 1, "enum_CFG_NEXT"], [365, 370, 1, "enum_CFG_NEXT"], [370, 365, 1, "enum_CFG_NEXT"], [388, 395, 1, "enum_CFG_NEXT"], [395, 402, 1, "enum_CFG_NEXT"], [402, 316, 1, "enum_CFG_NEXT"], [407, 419, 1, "enum_CFG_NEXT"], [419, 440, 1, "enum_CFG_NEXT"], [29, 18, 3, "enum_LAST_WRITE"], [36, 29, 2, "enum_LAST_READ"], [36, 18, 3, "enum_LAST_WRITE"], [40, 20, 3, "enum_LAST_WRITE"], [47, 27, 3, "enum_LAST_WRITE"], [68, 47, 2, "enum_LAST_READ"], [68, 27, 3, "enum_LAST_WRITE"], [64, 104, 2, "enum_LAST_READ"], [64, 81, 2, "enum_LAST_READ"], [64, 64, 3, "enum_LAST_WRITE"], [79, 79, 2, "enum_LAST_READ"], [79, 45, 3, "enum_LAST_WRITE"], [81, 104, 2, "enum_LAST_READ"], [81, 81, 2, "enum_LAST_READ"], [81, 64, 3, "enum_LAST_WRITE"], [87, 87, 2, "enum_LAST_READ"], [87, 55, 3, "enum_LAST_WRITE"], [87, 92, 3, "enum_LAST_WRITE"], [94, 94, 2, "enum_LAST_READ"], [94, 68, 2, "enum_LAST_READ"], [94, 27, 3, "enum_LAST_WRITE"], [96, 81, 2, "enum_LAST_READ"], [96, 64, 3, "enum_LAST_WRITE"], [92, 87, 2, "enum_LAST_READ"], [92, 55, 3, "enum_LAST_WRITE"], [92, 92, 3, "enum_LAST_WRITE"], [104, 96, 2, "enum_LAST_READ"], [104, 64, 3, "enum_LAST_WRITE"], [102, 102, 3, "enum_LAST_WRITE"], [102, 51, 3, "enum_LAST_WRITE"], [109, 94, 2, "enum_LAST_READ"], [109, 68, 2, "enum_LAST_READ"], [109, 27, 3, "enum_LAST_WRITE"], [113, 102, 3, "enum_LAST_WRITE"], [113, 51, 3, "enum_LAST_WRITE"], [119, 2, 3, "enum_LAST_WRITE"], [123, 4, 3, "enum_LAST_WRITE"], [136, 6, 3, "enum_LAST_WRITE"], [132, 151, 2, "enum_LAST_READ"], [132, 174, 2, "enum_LAST_READ"], [132, 132, 3, "enum_LAST_WRITE"], [147, 147, 2, "enum_LAST_READ"], [147, 136, 2, "enum_LAST_READ"], [147, 170, 2, "enum_LAST_READ"], [147, 6, 3, "enum_LAST_WRITE"], [151, 151, 2, "enum_LAST_READ"], [151, 174, 2, "enum_LAST_READ"], [151, 132, 3, "enum_LAST_WRITE"], [145, 156, 2, "enum_LAST_READ"], [145, 145, 3, "enum_LAST_WRITE"], [156, 156, 2, "enum_LAST_READ"], [156, 145, 3, "enum_LAST_WRITE"], [158, 158, 2, "enum_LAST_READ"], [158, 117, 3, "enum_LAST_WRITE"], [163, 163, 2, "enum_LAST_READ"], [163, 126, 3, "enum_LAST_WRITE"], [168, 151, 2, "enum_LAST_READ"], [168, 132, 3, "enum_LAST_WRITE"], [170, 147, 2, "enum_LAST_READ"], [170, 6, 3, "enum_LAST_WRITE"], [174, 168, 2, "enum_LAST_READ"], [174, 132, 3, "enum_LAST_WRITE"], [183, 147, 2, "enum_LAST_READ"], [183, 136, 2, "enum_LAST_READ"], [183, 170, 2, "enum_LAST_READ"], [183, 6, 3, "enum_LAST_WRITE"], [187, 158, 2, "enum_LAST_READ"], [187, 117, 3, "enum_LAST_WRITE"], [190, 183, 2, "enum_LAST_READ"], [190, 6, 3, "enum_LAST_WRITE"], [195, 123, 2, "enum_LAST_READ"], [195, 4, 3, "enum_LAST_WRITE"], [205, 8, 3, "enum_LAST_WRITE"], [215, 190, 2, "enum_LAST_READ"], [215, 6, 3, "enum_LAST_WRITE"], [226, 163, 2, "enum_LAST_READ"], [226, 126, 3, "enum_LAST_WRITE"], [221, 234, 2, "enum_LAST_READ"], [221, 174, 2, "enum_LAST_READ"], [221, 151, 2, "enum_LAST_READ"], [221, 221, 3, "enum_LAST_WRITE"], [221, 132, 3, "enum_LAST_WRITE"], [223, 156, 2, "enum_LAST_READ"], [223, 253, 2, "enum_LAST_READ"], [223, 145, 3, "enum_LAST_WRITE"], [223, 223, 3, "enum_LAST_WRITE"], [232, 232, 2, "enum_LAST_READ"], [232, 213, 3, "enum_LAST_WRITE"], [234, 234, 2, "enum_LAST_READ"], [234, 174, 2, "enum_LAST_READ"], [234, 151, 2, "enum_LAST_READ"], [234, 221, 3, "enum_LAST_WRITE"], [238, 195, 2, "enum_LAST_READ"], [238, 238, 2, "enum_LAST_READ"], [238, 4, 3, "enum_LAST_WRITE"], [244, 244, 2, "enum_LAST_READ"], [244, 181, 3, "enum_LAST_WRITE"], [249, 249, 2, "enum_LAST_READ"], [249, 208, 3, "enum_LAST_WRITE"], [253, 156, 2, "enum_LAST_READ"], [253, 253, 2, "enum_LAST_READ"], [253, 223, 3, "enum_LAST_WRITE"], [262, 249, 2, "enum_LAST_READ"], [262, 208, 3, "enum_LAST_WRITE"], [281, 260, 2, "enum_LAST_READ"], [283, 262, 2, "enum_LAST_READ"], [283, 208, 3, "enum_LAST_WRITE"], [286, 10, 3, "enum_LAST_WRITE"], [309, 309, 2, "enum_LAST_READ"], [309, 281, 2, "enum_LAST_READ"], [311, 396, 2, "enum_LAST_READ"], [311, 283, 2, "enum_LAST_READ"], [311, 208, 3, "enum_LAST_WRITE"], [318, 403, 2, "enum_LAST_READ"], [318, 403, 3, "enum_LAST_WRITE"], [318, 297, 3, "enum_LAST_WRITE"], [320, 320, 2, "enum_LAST_READ"], [328, 328, 2, "enum_LAST_READ"], [328, 21, 3, "enum_LAST_WRITE"], [330, 215, 2, "enum_LAST_READ"], [330, 341, 2, "enum_LAST_READ"], [330, 6, 3, "enum_LAST_WRITE"], [333, 195, 2, "enum_LAST_READ"], [333, 394, 2, "enum_LAST_READ"], [333, 238, 2, "enum_LAST_READ"], [333, 4, 3, "enum_LAST_WRITE"], [326, 400, 2, "enum_LAST_READ"], [326, 326, 3, "enum_LAST_WRITE"], [341, 330, 2, "enum_LAST_READ"], [341, 6, 3, "enum_LAST_WRITE"], [347, 400, 2, "enum_LAST_READ"], [347, 326, 3, "enum_LAST_WRITE"], [339, 377, 2, "enum_LAST_READ"], [339, 339, 3, "enum_LAST_WRITE"], [352, 352, 2, "enum_LAST_READ"], [352, 119, 2, "enum_LAST_READ"], [352, 2, 3, "enum_LAST_WRITE"], [356, 347, 2, "enum_LAST_READ"], [356, 326, 3, "enum_LAST_WRITE"], [350, 367, 2, "enum_LAST_READ"], [350, 350, 3, "enum_LAST_WRITE"], [359, 371, 2, "enum_LAST_READ"], [359, 359, 3, "enum_LAST_WRITE"], [367, 367, 2, "enum_LAST_READ"], [367, 350, 3, "enum_LAST_WRITE"], [365, 381, 2, "enum_LAST_READ"], [365, 365, 3, "enum_LAST_WRITE"], [371, 371, 2, "enum_LAST_READ"], [371, 359, 3, "enum_LAST_WRITE"], [375, 375, 2, "enum_LAST_READ"], [375, 232, 2, "enum_LAST_READ"], [375, 213, 3, "enum_LAST_WRITE"], [377, 377, 2, "enum_LAST_READ"], [377, 339, 3, "enum_LAST_WRITE"], [381, 381, 2, "enum_LAST_READ"], [381, 365, 3, "enum_LAST_WRITE"], [394, 333, 2, "enum_LAST_READ"], [394, 4, 3, "enum_LAST_WRITE"], [389, 389, 2, "enum_LAST_READ"], [389, 301, 3, "enum_LAST_WRITE"], [391, 356, 2, "enum_LAST_READ"], [391, 326, 3, "enum_LAST_WRITE"], [396, 311, 2, "enum_LAST_READ"], [396, 208, 3, "enum_LAST_WRITE"], [400, 391, 2, "enum_LAST_READ"], [400, 326, 3, "enum_LAST_WRITE"], [403, 318, 2, "enum_LAST_READ"], [403, 403, 3, "enum_LAST_WRITE"], [403, 297, 3, "enum_LAST_WRITE"], [403, 403, 2, "enum_LAST_READ"], [403, 403, 3, "enum_LAST_WRITE"], [403, 297, 3, "enum_LAST_WRITE"], [410, 309, 2, "enum_LAST_READ"], [412, 352, 2, "enum_LAST_READ"], [412, 119, 2, "enum_LAST_READ"], [412, 2, 3, "enum_LAST_WRITE"], [416, 195, 2, "enum_LAST_READ"], [416, 394, 2, "enum_LAST_READ"], [416, 238, 2, "enum_LAST_READ"], [416, 4, 3, "enum_LAST_WRITE"], [426, 416, 2, "enum_LAST_READ"], [426, 4, 3, "enum_LAST_WRITE"], [428, 408, 3, "enum_LAST_WRITE"], [431, 428, 2, "enum_LAST_READ"], [431, 408, 3, "enum_LAST_WRITE"], [433, 410, 2, "enum_LAST_READ"], [435, 389, 2, "enum_LAST_READ"], [435, 301, 3, "enum_LAST_WRITE"], [441, 435, 2, "enum_LAST_READ"], [441, 301, 3, "enum_LAST_WRITE"], [117, 123, 4, "enum_COMPUTED_FROM"], [117, 119, 4, "enum_COMPUTED_FROM"], [181, 205, 4, "enum_COMPUTED_FROM"], [181, 187, 4, "enum_COMPUTED_FROM"], [181, 183, 4, "enum_COMPUTED_FROM"], [181, 190, 4, "enum_COMPUTED_FROM"], [181, 195, 4, "enum_COMPUTED_FROM"], [213, 215, 4, "enum_COMPUTED_FROM"], [408, 410, 4, "enum_COMPUTED_FROM"], [408, 416, 4, "enum_COMPUTED_FROM"], [408, 412, 4, "enum_COMPUTED_FROM"], [27, 33, 4, "enum_COMPUTED_FROM"], [27, 29, 4, "enum_COMPUTED_FROM"], [27, 40, 4, "enum_COMPUTED_FROM"], [27, 36, 4, "enum_COMPUTED_FROM"], [45, 47, 4, "enum_COMPUTED_FROM"], [55, 57, 4, "enum_COMPUTED_FROM"], [145, 151, 4, "enum_COMPUTED_FROM"], [145, 147, 4, "enum_COMPUTED_FROM"], [326, 328, 4, "enum_COMPUTED_FROM"], [326, 330, 4, "enum_COMPUTED_FROM"], [326, 333, 4, "enum_COMPUTED_FROM"], [339, 347, 4, "enum_COMPUTED_FROM"], [339, 341, 4, "enum_COMPUTED_FROM"], [350, 356, 4, "enum_COMPUTED_FROM"], [350, 352, 4, "enum_COMPUTED_FROM"], [390, 394, 4, "enum_COMPUTED_FROM"], [92, 94, 4, "enum_COMPUTED_FROM"], [92, 96, 4, "enum_COMPUTED_FROM"], [102, 104, 4, "enum_COMPUTED_FROM"], [331, 21, 11, "enum_CALLS"], [108, 331, 5, "enum_RETURNS_TO"], [330, 18, 6, "enum_FORMAL_ARG_NAME"], [334, 20, 6, "enum_FORMAL_ARG_NAME"]], "error_location": 94, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/baliga-lab/cmonkey2.git", "old_path": "cmonkey/membership.py", "hash": "48d14ac785b1013354a55a37239c66433fbf19eb", "code": "def adjust_cluster(self, cluster: int, rowscores: Matrix, cutoff: float, limit: int) -> Dict[str, int]:\n    \"\"\"adjust a single cluster\"\"\"\n    def max_row_in_column(matrix: Matrix, column: int) -> str:\n        \"\"\"returns a pair of the maximum row index and score in the given matrix and column\"\"\"\n        sm: Matrix = matrix.submatrix_by_name(wh, [matrix.column_names[column]])\n        sm_values: List[List[float]] = sm.values\n        max_row: int = 0\n        max_score: float = sys.float_info.min\n        for row in range(sm.num_rows()):\n            if sm_values[row][0] > max_score:\n                max_score = sm[row][0]\n                max_row = row\n        return sm.row_names[max_row]\n\n    old_rows: List[str] = self.rows_for_cluster(cluster)\n    not_in: List[Tuple] = []\n    for row in range(rowscores.num_rows()):\n        row_name = rowscores.row_names[row]\n        if row_name not in old_rows:\n            not_in.append((row, rowscores.row_names[row]))\n    #print old_rows\n    threshold: float = rowscores.submatrix_by_name(old_rows,\n                                            [rowscores.column_names[cluster - 1]]).quantile(cutoff)\n    wh: List[str] = []\n    rs_values: List[List[float]] = rowscores.values\n    for row, row_name in not_in:\n        if rs_values[row][cluster - 1] < threshold:\n            #print \"Appending %s with score: %f\" % (row_name, rowscores[row][cluster - 1])\n            wh.append(row_name)\n    #print \"THRESHOLD: \", threshold\n    #print \"WH: \", wh\n    if len(wh) == 0:\n        return {} # return unmodified row membership\n    elif len(wh) > limit:\n        return {} # return unmodified row membership\n\n    tries: int = 0\n    result: Dict[str, int] = {}\n    while len(wh) > 0 and tries < MAX_ADJUST_TRIES:\n        wh2: str = max_row_in_column(rowscores, cluster - 1)\n        wh2_index: Any = rowscores.row_names.index(wh2)\n        clusters: List[int] = self.clusters_for_row(wh2)\n        wh2_scores: List[str] = []\n        for c in clusters:\n            wh2_scores.append(rs_values[wh2_index][c - 1])\n        #print \"WH2: \", wh2, \" CLUSTERS: \", clusters, \" WH2_SCORES: \", wh2_scores\n        result[wh2] = cluster\n        wh.remove(wh2)\n        tries += 1\n    old_num: int = len(self.rows_for_cluster(cluster))\n    logging.info(\"CLUSTER %d, # ROWS BEFORE: %d, AFTER: %d\",\n                cluster, old_num, old_num + len(result))\n    return result\n", "rewrite": "ReplaceText(target='sm_values' @(463,32)->(463,34))", "error_line": 10, "has_bug": true, "code_full": "import logging\nimport sys\nfrom typing import Any, Dict, List, Tuple\n\nMAX_ADJUST_TRIES: int = 10  # Assuming a constant for maximum adjustment tries\n\n\nclass Matrix:\n    # Assuming a class Matrix with necessary methods\n    column_names: List[str]\n    values: List[List[float]]\n    row_names: List[str]\n\n    def submatrix_by_name(self, rows: List[str], columns: List[str]) -> 'Matrix':\n        return self\n\n    def num_rows(self) -> int:\n        return 0\n\n    def quantile(self, q: float) -> float:\n        return 0.0\n\n\nclass Class:\n    def rows_for_cluster(self, cluster: int) -> List[str]:\n        return []\n    \n    def clusters_for_row(self, row: str) -> List[int]:\n        return []\n\n    def adjust_cluster(self, cluster: int, rowscores: Matrix, cutoff: float, limit: int) -> Dict[str, int]:\n        \"\"\"adjust a single cluster\"\"\"\n        def max_row_in_column(matrix: Matrix, column: int) -> str:\n            \"\"\"returns a pair of the maximum row index and score in the given matrix and column\"\"\"\n            sm: Matrix = matrix.submatrix_by_name(wh, [matrix.column_names[column]])\n            sm_values: List[List[float]] = sm.values\n            max_row: int = 0\n            max_score: float = sys.float_info.min\n            for row in range(sm.num_rows()):\n                if sm_values[row][0] > max_score:\n                    max_score = sm[row][0]\n                    max_row = row\n            return sm.row_names[max_row]\n\n        old_rows: List[str] = self.rows_for_cluster(cluster)\n        not_in: List[Tuple] = []\n        for row in range(rowscores.num_rows()):\n            row_name = rowscores.row_names[row]\n            if row_name not in old_rows:\n                not_in.append((row, rowscores.row_names[row]))\n        #print old_rows\n        threshold: float = rowscores.submatrix_by_name(old_rows,\n                                                [rowscores.column_names[cluster - 1]]).quantile(cutoff)\n        wh: List[str] = []\n        rs_values: List[List[float]] = rowscores.values\n        for row, row_name in not_in:\n            if rs_values[row][cluster - 1] < threshold:\n                #print \"Appending %s with score: %f\" % (row_name, rowscores[row][cluster - 1])\n                wh.append(row_name)\n        #print \"THRESHOLD: \", threshold\n        #print \"WH: \", wh\n        if len(wh) == 0:\n            return {} # return unmodified row membership\n        elif len(wh) > limit:\n            return {} # return unmodified row membership\n\n        tries: int = 0\n        result: Dict[str, int] = {}\n        while len(wh) > 0 and tries < MAX_ADJUST_TRIES:\n            wh2: str = max_row_in_column(rowscores, cluster - 1)\n            wh2_index: Any = rowscores.row_names.index(wh2)\n            clusters: List[int] = self.clusters_for_row(wh2)\n            wh2_scores: List[str] = []\n            for c in clusters:\n                wh2_scores.append(rs_values[wh2_index][c - 1])\n            #print \"WH2: \", wh2, \" CLUSTERS: \", clusters, \" WH2_SCORES: \", wh2_scores\n            result[wh2] = cluster\n            wh.remove(wh2)\n            tries += 1\n        old_num: int = len(self.rows_for_cluster(cluster))\n        logging.info(\"CLUSTER %d, # ROWS BEFORE: %d, AFTER: %d\",\n                    cluster, old_num, old_num + len(result))\n        return result\n", "error_location_char": [612, 614], "type_checked_pytype": false, "type_error_label": "unsupported-operands", "type_checked_mypy": false}
{"source_tokens": ["#NEWLINE#", "def delete(", "self", ",", "group", ")", "->", "None", ":", "#NEWLINE#", "#INDENT#", "'\\n    Delete GROUP by name or Group() object.\\n\\n    '", "#NEWLINE#", "if", "isinstance", "(", "group", ",", "str", ")", ":", "#NEWLINE#", "#INDENT#", "name", "=", "group", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "group", ".", "dxftype", "(", ")", "==", "'GROUP'", ")", ":", "#NEWLINE#", "#INDENT#", "name", "=", "group", ".", "get_name", "(", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "raise", "DXFTypeError", "(", "group", ".", "dxftype", "(", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "if", "(", "name", "in", "self", ")", ":", "#NEWLINE#", "#INDENT#", "super", "(", ")", ".", "delete", "(", "group", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "raise", "DXFValueError", "(", "'GROUP not in group table registered.'", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [1, 7, 7, "enum_FIELD"], [10, 11, 7, "enum_FIELD"], [20, 17, 7, "enum_FIELD"], [76, 73, 7, "enum_FIELD"], [17, 14, 7, "enum_FIELD"], [22, 25, 7, "enum_FIELD"], [42, 39, 7, "enum_FIELD"], [73, 72, 7, "enum_FIELD"], [78, 84, 7, "enum_FIELD"], [93, 95, 7, "enum_FIELD"], [39, 37, 7, "enum_FIELD"], [44, 50, 7, "enum_FIELD"], [58, 60, 7, "enum_FIELD"], [84, 82, 7, "enum_FIELD"], [95, 94, 7, "enum_FIELD"], [37, 35, 7, "enum_FIELD"], [50, 48, 7, "enum_FIELD"], [60, 59, 7, "enum_FIELD"], [82, 80, 7, "enum_FIELD"], [35, 34, 7, "enum_FIELD"], [48, 47, 7, "enum_FIELD"], [64, 62, 7, "enum_FIELD"], [80, 79, 7, "enum_FIELD"], [62, 61, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [16, 4, 10, "enum_LAST_LEXICAL_USE"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [25, 16, 10, "enum_LAST_LEXICAL_USE"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [34, 25, 10, "enum_LAST_LEXICAL_USE"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 44, 9, "enum_NEXT_SYNTAX"], [45, 23, 10, "enum_LAST_LEXICAL_USE"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [47, 34, 10, "enum_LAST_LEXICAL_USE"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [61, 47, 10, "enum_LAST_LEXICAL_USE"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [72, 45, 10, "enum_LAST_LEXICAL_USE"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [74, 2, 10, "enum_LAST_LEXICAL_USE"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [85, 61, 10, "enum_LAST_LEXICAL_USE"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [3, 10, 1, "enum_CFG_NEXT"], [10, 17, 1, "enum_CFG_NEXT"], [17, 22, 1, "enum_CFG_NEXT"], [17, 39, 1, "enum_CFG_NEXT"], [22, 73, 1, "enum_CFG_NEXT"], [39, 58, 1, "enum_CFG_NEXT"], [39, 44, 1, "enum_CFG_NEXT"], [44, 73, 1, "enum_CFG_NEXT"], [73, 93, 1, "enum_CFG_NEXT"], [73, 78, 1, "enum_CFG_NEXT"], [16, 4, 3, "enum_LAST_WRITE"], [25, 16, 2, "enum_LAST_READ"], [25, 4, 3, "enum_LAST_WRITE"], [34, 16, 2, "enum_LAST_READ"], [34, 4, 3, "enum_LAST_WRITE"], [47, 34, 2, "enum_LAST_READ"], [47, 4, 3, "enum_LAST_WRITE"], [61, 34, 2, "enum_LAST_READ"], [61, 4, 3, "enum_LAST_WRITE"], [72, 23, 3, "enum_LAST_WRITE"], [72, 45, 3, "enum_LAST_WRITE"], [74, 2, 3, "enum_LAST_WRITE"], [85, 25, 2, "enum_LAST_READ"], [85, 47, 2, "enum_LAST_READ"], [85, 4, 3, "enum_LAST_WRITE"], [23, 25, 4, "enum_COMPUTED_FROM"], [45, 47, 4, "enum_COMPUTED_FROM"]], "error_location": 85, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/mozman/ezdxf.git", "old_path": "ezdxf/entities/dxfgroups.py", "hash": "d2bcbe493b5300e97913a1a13772a19547436239", "code": "def delete(self, group: DXFGroup):\n    \"\"\"\n    Delete GROUP by name or Group() object.\n\n    \"\"\"\n    if isinstance(group, str):  # delete group by name\n        name: str = group\n    elif group.dxftype() == 'GROUP':\n        name: str = group.get_name()\n    else:\n        raise DXFTypeError(group.dxftype())\n\n    if name in self:\n        super().delete(group)\n    else:\n        raise DXFValueError(\"GROUP not in group table registered.\")\n", "rewrite": "ReplaceText(target='name' @(215,27)->(215,32))", "error_line": 13, "has_bug": true, "code_full": "from typing import Union\n\n\nclass DXFGroup:\n    def dxftype(self) -> str:\n        return \"\"\n\n    def get_name(self) -> str:\n        return \"\"\n\n\nclass DXFTypeError(Exception):\n    pass\n\n\nclass DXFValueError(Exception):\n    pass\n\n\nclass ObjectCollection:\n    def delete(self, name: str):\n        pass\n\n\nclass GroupCollection(ObjectCollection):\n    def __contains__(self, name: str) -> bool:\n        return False\n\n    def delete(self, group: DXFGroup):\n        \"\"\"\n        Delete GROUP by name or Group() object.\n\n        \"\"\"\n        if isinstance(group, str):  # delete group by name\n            name: str = group\n        elif group.dxftype() == 'GROUP':\n            name: str = group.get_name()\n        else:\n            raise DXFTypeError(group.dxftype())\n\n        if name in self:\n            super().delete(group)\n        else:\n            raise DXFValueError(\"GROUP not in group table registered.\")\n", "error_location_char": [350, 355], "type_checked_pytype": false, "type_error_label": "wrong-arg-types", "type_checked_mypy": false}
{"source_tokens": ["#NEWLINE#", "def add_hooks(", ")", ":", "#NEWLINE#", "#INDENT#", "' Add git hooks for commit and push to run linting and tests. '", "#NEWLINE#", "virtual_env", "=", "conf", ".", "getenv", "(", "'VIRTUAL_ENV'", ")", "#NEWLINE#", "if", "(", "virtual_env", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "log", ".", "err", "(", "'You are not inside a virtualenv'", ")", "#NEWLINE#", "confirm_msg", "=", "'Are you sure you want to use global python installation to run your git hooks? [y/N] '", "#NEWLINE#", "click", ".", "prompt", "(", "confirm_msg", ",", "default", "=", "False", ")", "#NEWLINE#", "if", "(", "not", "click", ".", "confirm", "(", "confirm_msg", ")", ")", ":", "#NEWLINE#", "#INDENT#", "log", ".", "info", "(", "'Cancelling'", ")", "#NEWLINE#", "return", "#NEWLINE#", "#UNINDENT#", "load_venv", "=", "''", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "load_venv", "=", "'source \"{}/bin/activate\"'", ".", "format", "(", "virtual_env", ")", "#NEWLINE#", "#UNINDENT#", "commit_hook", "=", "conf", ".", "proj_path", "(", "'.git/hooks/pre-commit'", ")", "#NEWLINE#", "push_hook", "=", "conf", ".", "proj_path", "(", "'.git/hooks/pre-push'", ")", "#NEWLINE#", "log", ".", "info", "(", "'Adding pre-commit hook <33>{}'", ",", "commit_hook", ")", "#NEWLINE#", "fs", ".", "write_file", "(", "commit_hook", ",", "util", ".", "remove_indent", "(", "'\\n        #!/bin/bash\\n        PATH=\"/opt/local/libexec/gnubin:$PATH\"\\n        \\n        {load_venv}\\n        \\n        peltak lint --commit\\n        \\n    '", ".", "format", "(", "load_venv", "=", "load_venv", ")", ")", ")", "#NEWLINE#", "log", ".", "info", "(", "'Adding pre-push hook: <33>{}'", ",", "push_hook", ")", "#NEWLINE#", "fs", ".", "write_file", "(", "commit_hook", ",", "util", ".", "remove_indent", "(", "'\\n        #!/bin/bash\\n        PATH=\"/opt/local/libexec/gnubin:$PATH\"\\n        \\n        {load_venv}\\n        \\n        peltak test --allow-empty\\n        \\n    '", ".", "format", "(", "load_venv", "=", "load_venv", ")", ")", ")", "#NEWLINE#", "log", ".", "info", "(", "'Making hooks executable'", ")", "#NEWLINE#", "if", "(", "not", "context", ".", "get", "(", "'pretend'", ",", "False", ")", ")", ":", "#NEWLINE#", "#INDENT#", "os", ".", "chmod", "(", "conf", ".", "proj_path", "(", "'.git/hooks/pre-commit'", ")", ",", "493", ")", "#NEWLINE#", "os", ".", "chmod", "(", "conf", ".", "proj_path", "(", "'.git/hooks/pre-push'", ")", ",", "493", ")"], "edges": [[5, 6, 7, "enum_FIELD"], [7, 13, 7, "enum_FIELD"], [23, 20, 7, "enum_FIELD"], [89, 95, 7, "enum_FIELD"], [98, 104, 7, "enum_FIELD"], [107, 113, 7, "enum_FIELD"], [116, 122, 7, "enum_FIELD"], [137, 143, 7, "enum_FIELD"], [146, 152, 7, "enum_FIELD"], [167, 171, 7, "enum_FIELD"], [175, 177, 7, "enum_FIELD"], [13, 11, 7, "enum_FIELD"], [20, 19, 7, "enum_FIELD"], [25, 29, 7, "enum_FIELD"], [32, 35, 7, "enum_FIELD"], [36, 42, 7, "enum_FIELD"], [48, 50, 7, "enum_FIELD"], [70, 73, 7, "enum_FIELD"], [79, 85, 7, "enum_FIELD"], [95, 93, 7, "enum_FIELD"], [104, 102, 7, "enum_FIELD"], [113, 109, 7, "enum_FIELD"], [122, 118, 7, "enum_FIELD"], [143, 139, 7, "enum_FIELD"], [152, 148, 7, "enum_FIELD"], [171, 169, 7, "enum_FIELD"], [177, 183, 7, "enum_FIELD"], [189, 200, 7, "enum_FIELD"], [203, 214, 7, "enum_FIELD"], [11, 10, 7, "enum_FIELD"], [29, 27, 7, "enum_FIELD"], [42, 38, 7, "enum_FIELD"], [50, 54, 7, "enum_FIELD"], [60, 64, 7, "enum_FIELD"], [85, 83, 7, "enum_FIELD"], [93, 92, 7, "enum_FIELD"], [102, 101, 7, "enum_FIELD"], [109, 108, 7, "enum_FIELD"], [118, 117, 7, "enum_FIELD"], [126, 124, 7, "enum_FIELD"], [139, 138, 7, "enum_FIELD"], [148, 147, 7, "enum_FIELD"], [156, 154, 7, "enum_FIELD"], [169, 168, 7, "enum_FIELD"], [183, 179, 7, "enum_FIELD"], [200, 191, 7, "enum_FIELD"], [214, 205, 7, "enum_FIELD"], [27, 26, 7, "enum_FIELD"], [38, 37, 7, "enum_FIELD"], [43, 45, 7, "enum_FIELD"], [54, 52, 7, "enum_FIELD"], [64, 62, 7, "enum_FIELD"], [83, 82, 7, "enum_FIELD"], [124, 123, 7, "enum_FIELD"], [130, 128, 7, "enum_FIELD"], [154, 153, 7, "enum_FIELD"], [160, 158, 7, "enum_FIELD"], [179, 178, 7, "enum_FIELD"], [191, 190, 7, "enum_FIELD"], [197, 195, 7, "enum_FIELD"], [205, 204, 7, "enum_FIELD"], [211, 209, 7, "enum_FIELD"], [52, 51, 7, "enum_FIELD"], [62, 61, 7, "enum_FIELD"], [128, 127, 7, "enum_FIELD"], [131, 133, 7, "enum_FIELD"], [158, 157, 7, "enum_FIELD"], [161, 163, 7, "enum_FIELD"], [195, 194, 7, "enum_FIELD"], [209, 208, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [19, 8, 10, "enum_LAST_LEXICAL_USE"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [41, 33, 10, "enum_LAST_LEXICAL_USE"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [51, 37, 10, "enum_LAST_LEXICAL_USE"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [55, 41, 10, "enum_LAST_LEXICAL_USE"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 60, 9, "enum_NEXT_SYNTAX"], [61, 26, 10, "enum_LAST_LEXICAL_USE"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 68, 9, "enum_NEXT_SYNTAX"], [68, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 79, 9, "enum_NEXT_SYNTAX"], [80, 71, 10, "enum_LAST_LEXICAL_USE"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [86, 19, 10, "enum_LAST_LEXICAL_USE"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [92, 10, 10, "enum_LAST_LEXICAL_USE"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [101, 92, 10, "enum_LAST_LEXICAL_USE"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [108, 61, 10, "enum_LAST_LEXICAL_USE"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [114, 90, 10, "enum_LAST_LEXICAL_USE"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [121, 114, 10, "enum_LAST_LEXICAL_USE"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [133, 80, 10, "enum_LAST_LEXICAL_USE"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [138, 108, 10, "enum_LAST_LEXICAL_USE"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [144, 99, 10, "enum_LAST_LEXICAL_USE"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [147, 117, 10, "enum_LAST_LEXICAL_USE"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [151, 121, 10, "enum_LAST_LEXICAL_USE"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [153, 123, 10, "enum_LAST_LEXICAL_USE"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [163, 133, 10, "enum_LAST_LEXICAL_USE"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [168, 138, 10, "enum_LAST_LEXICAL_USE"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 175, 9, "enum_NEXT_SYNTAX"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 184, 9, "enum_NEXT_SYNTAX"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [187, 189, 9, "enum_NEXT_SYNTAX"], [189, 190, 9, "enum_NEXT_SYNTAX"], [190, 191, 9, "enum_NEXT_SYNTAX"], [191, 192, 9, "enum_NEXT_SYNTAX"], [192, 193, 9, "enum_NEXT_SYNTAX"], [194, 101, 10, "enum_LAST_LEXICAL_USE"], [193, 194, 9, "enum_NEXT_SYNTAX"], [194, 195, 9, "enum_NEXT_SYNTAX"], [195, 196, 9, "enum_NEXT_SYNTAX"], [196, 197, 9, "enum_NEXT_SYNTAX"], [197, 198, 9, "enum_NEXT_SYNTAX"], [198, 199, 9, "enum_NEXT_SYNTAX"], [199, 200, 9, "enum_NEXT_SYNTAX"], [200, 201, 9, "enum_NEXT_SYNTAX"], [201, 202, 9, "enum_NEXT_SYNTAX"], [202, 203, 9, "enum_NEXT_SYNTAX"], [204, 190, 10, "enum_LAST_LEXICAL_USE"], [203, 204, 9, "enum_NEXT_SYNTAX"], [204, 205, 9, "enum_NEXT_SYNTAX"], [205, 206, 9, "enum_NEXT_SYNTAX"], [206, 207, 9, "enum_NEXT_SYNTAX"], [208, 194, 10, "enum_LAST_LEXICAL_USE"], [207, 208, 9, "enum_NEXT_SYNTAX"], [208, 209, 9, "enum_NEXT_SYNTAX"], [209, 210, 9, "enum_NEXT_SYNTAX"], [210, 211, 9, "enum_NEXT_SYNTAX"], [211, 212, 9, "enum_NEXT_SYNTAX"], [212, 213, 9, "enum_NEXT_SYNTAX"], [213, 214, 9, "enum_NEXT_SYNTAX"], [214, 215, 9, "enum_NEXT_SYNTAX"], [215, 216, 9, "enum_NEXT_SYNTAX"], [5, 7, 1, "enum_CFG_NEXT"], [7, 20, 1, "enum_CFG_NEXT"], [20, 25, 1, "enum_CFG_NEXT"], [20, 79, 1, "enum_CFG_NEXT"], [25, 32, 1, "enum_CFG_NEXT"], [32, 36, 1, "enum_CFG_NEXT"], [36, 50, 1, "enum_CFG_NEXT"], [50, 60, 1, "enum_CFG_NEXT"], [50, 70, 1, "enum_CFG_NEXT"], [60, 68, 1, "enum_CFG_NEXT"], [70, 89, 1, "enum_CFG_NEXT"], [79, 89, 1, "enum_CFG_NEXT"], [89, 98, 1, "enum_CFG_NEXT"], [98, 107, 1, "enum_CFG_NEXT"], [107, 116, 1, "enum_CFG_NEXT"], [116, 137, 1, "enum_CFG_NEXT"], [137, 146, 1, "enum_CFG_NEXT"], [146, 167, 1, "enum_CFG_NEXT"], [167, 177, 1, "enum_CFG_NEXT"], [177, 189, 1, "enum_CFG_NEXT"], [189, 203, 1, "enum_CFG_NEXT"], [19, 8, 3, "enum_LAST_WRITE"], [41, 33, 3, "enum_LAST_WRITE"], [51, 37, 2, "enum_LAST_READ"], [55, 41, 2, "enum_LAST_READ"], [55, 33, 3, "enum_LAST_WRITE"], [61, 26, 2, "enum_LAST_READ"], [86, 19, 2, "enum_LAST_READ"], [86, 8, 3, "enum_LAST_WRITE"], [92, 10, 2, "enum_LAST_READ"], [101, 92, 2, "enum_LAST_READ"], [108, 26, 2, "enum_LAST_READ"], [114, 90, 3, "enum_LAST_WRITE"], [121, 114, 2, "enum_LAST_READ"], [121, 90, 3, "enum_LAST_WRITE"], [133, 71, 3, "enum_LAST_WRITE"], [133, 80, 3, "enum_LAST_WRITE"], [138, 108, 2, "enum_LAST_READ"], [144, 99, 3, "enum_LAST_WRITE"], [147, 117, 2, "enum_LAST_READ"], [151, 121, 2, "enum_LAST_READ"], [151, 90, 3, "enum_LAST_WRITE"], [153, 123, 2, "enum_LAST_READ"], [163, 133, 2, "enum_LAST_READ"], [163, 71, 3, "enum_LAST_WRITE"], [163, 80, 3, "enum_LAST_WRITE"], [168, 138, 2, "enum_LAST_READ"], [194, 101, 2, "enum_LAST_READ"], [204, 190, 2, "enum_LAST_READ"], [208, 194, 2, "enum_LAST_READ"], [8, 10, 4, "enum_COMPUTED_FROM"], [90, 92, 4, "enum_COMPUTED_FROM"], [99, 101, 4, "enum_COMPUTED_FROM"], [80, 86, 4, "enum_COMPUTED_FROM"]], "error_location": 151, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/novopl/fabops.git", "old_path": "src/peltak/logic/git.py", "hash": "4ace52dda2d85cb734ee74e126530e805777a000", "code": "def add_hooks():\n    # type: () -> None\n    \"\"\" Add git hooks for commit and push to run linting and tests. \"\"\"\n\n    # Detect virtualenv the hooks should use\n\n    # Detect virtualenv\n    virtual_env: Optional[str] = conf.getenv('VIRTUAL_ENV')\n    if virtual_env is None:\n        log.err(\"You are not inside a virtualenv\")\n        confirm_msg: str = (\n            \"Are you sure you want to use global python installation \"\n            \"to run your git hooks? [y/N] \"\n        )\n        click.prompt(confirm_msg, default=False)\n        if not click.confirm(confirm_msg):\n            log.info(\"Cancelling\")\n            return\n\n        load_venv: str = ''\n    else:\n        load_venv: str = 'source \"{}/bin/activate\"'.format(virtual_env)\n\n    commit_hook: str = conf.proj_path('.git/hooks/pre-commit')\n    push_hook: str = conf.proj_path('.git/hooks/pre-push')\n\n    # Write pre-commit hook\n    log.info(\"Adding pre-commit hook <33>{}\", commit_hook)\n    fs.write_file(commit_hook, util.remove_indent('''\n        #!/bin/bash\n        PATH=\"/opt/local/libexec/gnubin:$PATH\"\n        \n        {load_venv}\n        \n        peltak lint --commit\n        \n    '''.format(load_venv=load_venv)))\n\n    # Write pre-push hook\n    log.info(\"Adding pre-push hook: <33>{}\", push_hook)\n    fs.write_file(commit_hook, util.remove_indent('''\n        #!/bin/bash\n        PATH=\"/opt/local/libexec/gnubin:$PATH\"\n        \n        {load_venv}\n        \n        peltak test --allow-empty\n        \n    '''.format(load_venv=load_venv)))\n\n    log.info(\"Making hooks executable\")\n    if not context.get('pretend', False):\n        os.chmod(conf.proj_path('.git/hooks/pre-commit'), 0o755)\n        os.chmod(conf.proj_path('.git/hooks/pre-push'), 0o755)\n", "rewrite": "ReplaceText(target='push_hook' @(75,18)->(75,29))", "error_line": 40, "has_bug": true, "code_full": "import os\nfrom typing import Optional\n\nimport click\n\n\nclass Config:\n    def getenv(self, name: str) -> Optional[str]:\n        return None\n    \n    def proj_path(self, path: str) -> str:\n        return path\n    \n\nclass Log:\n    def err(self, msg: str):\n        pass\n\n    def info(self, msg: str, commit_hook: str=\"\"):\n        pass\n\n\nclass FileSystem:\n    def write_file(self, path: str, content: str):\n        pass\n\n\nclass Util:\n    def remove_indent(self, content: str) -> str:\n        return \"\"\n    \n\nclass Context:\n    def get(self, key: str, default: bool) -> bool:\n        return False\n\n\nfs = FileSystem()\n\nlog = Log()\n\nconf = Config()\n\nutil = Util()\n\ncontext = Context()\n\n\ndef add_hooks():\n    # type: () -> None\n    \"\"\" Add git hooks for commit and push to run linting and tests. \"\"\"\n\n    # Detect virtualenv the hooks should use\n\n    # Detect virtualenv\n    virtual_env: Optional[str] = conf.getenv('VIRTUAL_ENV')\n    if virtual_env is None:\n        log.err(\"You are not inside a virtualenv\")\n        confirm_msg: str = (\n            \"Are you sure you want to use global python installation \"\n            \"to run your git hooks? [y/N] \"\n        )\n        click.prompt(confirm_msg, default=False)\n        if not click.confirm(confirm_msg):\n            log.info(\"Cancelling\")\n            return\n\n        load_venv: str = ''\n    else:\n        load_venv: str = 'source \"{}/bin/activate\"'.format(virtual_env)\n\n    commit_hook: str = conf.proj_path('.git/hooks/pre-commit')\n    push_hook: str = conf.proj_path('.git/hooks/pre-push')\n\n    # Write pre-commit hook\n    log.info(\"Adding pre-commit hook <33>{}\", commit_hook)\n    fs.write_file(commit_hook, util.remove_indent('''\n        #!/bin/bash\n        PATH=\"/opt/local/libexec/gnubin:$PATH\"\n        \n        {load_venv}\n        \n        peltak lint --commit\n        \n    '''.format(load_venv=load_venv)))\n\n    # Write pre-push hook\n    log.info(\"Adding pre-push hook: <33>{}\", push_hook)\n    fs.write_file(commit_hook, util.remove_indent('''\n        #!/bin/bash\n        PATH=\"/opt/local/libexec/gnubin:$PATH\"\n        \n        {load_venv}\n        \n        peltak test --allow-empty\n        \n    '''.format(load_venv=load_venv)))\n\n    log.info(\"Making hooks executable\")\n    if not context.get('pretend', False):\n        os.chmod(conf.proj_path('.git/hooks/pre-commit'), 0o755)\n        os.chmod(conf.proj_path('.git/hooks/pre-push'), 0o755)\n", "error_location_char": [1280, 1291], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def debug_all_tokens_for_user(", "user_id", ")", ":", "#NEWLINE#", "#INDENT#", "manager", "=", "FacebookTokenManager", "(", ")", "#NEWLINE#", "token_manager", "=", "UserTokenManager", "(", ")", "#NEWLINE#", "user_tokens", "=", "UserToken", ".", "objects", ".", "filter", "(", "provider_user_id", "=", "user_id", ",", "deleted", "=", "False", ")", "#NEWLINE#", "processed_user_tokens", "=", "[", "]", "#NEWLINE#", "for", "token", "in", "user_tokens", ":", "#NEWLINE#", "#INDENT#", "processed_user_tokens", ".", "append", "(", "token", ".", "id", ")", "#NEWLINE#", "try", ":", "#NEWLINE#", "#INDENT#", "data", "=", "manager", ".", "debug_token", "(", "token", ".", "token", ")", "#NEWLINE#", "#UNINDENT#", "except", "ValueError", ":", "#NEWLINE#", "#INDENT#", "logger", ".", "info", "(", "'Invalid access token'", ")", "#NEWLINE#", "token_manager", ".", "invalidate_access_token", "(", "token", ".", "token", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "token_manager", ".", "insert_token", "(", "user_id", ",", "data", ".", "token", ",", "data", ".", "expires", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "best_token", "=", "token_manager", ".", "get_access_token", "(", "user_id", ")", "#NEWLINE#", "#UNINDENT#", "except", "UserToken", ".", "DoesNotExist", ":", "#NEWLINE#", "#INDENT#", "pass", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "best_token", ".", "id", "not in", "processed_user_tokens", ")", ":", "#NEWLINE#", "#INDENT#", "logger", ".", "info", "(", "'Retrying debug_all_tokens_for_user.'", ")", "#NEWLINE#", "debug_all_tokens_for_user", ".", "retry", "(", "args", "=", "[", "user_id", "]", ",", "countdown", "=", "45", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "logger", ".", "info", "(", "'Deleting user tokens except best one.'", ")", "#NEWLINE#", "tokens_to_delete", "=", "sorted", "(", "processed_user_tokens", ")", "#NEWLINE#", "tokens_to_delete", ".", "remove", "(", "best_token", ".", "id", ")", "#NEWLINE#", "for", "token_id", "in", "processed_user_tokens", ":", "#NEWLINE#", "#INDENT#", "UserToken", ".", "objects", ".", "filter", "(", "id", "=", "token_id", ")", ".", "update", "(", "deleted", "=", "True", ")"], "edges": [[6, 10, 7, "enum_FIELD"], [12, 16, 7, "enum_FIELD"], [18, 30, 7, "enum_FIELD"], [35, 38, 7, "enum_FIELD"], [43, 42, 7, "enum_FIELD"], [43, 44, 7, "enum_FIELD"], [10, 9, 7, "enum_FIELD"], [16, 15, 7, "enum_FIELD"], [30, 24, 7, "enum_FIELD"], [47, 51, 7, "enum_FIELD"], [119, 125, 7, "enum_FIELD"], [130, 132, 7, "enum_FIELD"], [152, 149, 7, "enum_FIELD"], [24, 22, 7, "enum_FIELD"], [27, 29, 7, "enum_FIELD"], [31, 33, 7, "enum_FIELD"], [51, 49, 7, "enum_FIELD"], [60, 66, 7, "enum_FIELD"], [73, 74, 7, "enum_FIELD"], [98, 104, 7, "enum_FIELD"], [125, 123, 7, "enum_FIELD"], [132, 131, 7, "enum_FIELD"], [149, 147, 7, "enum_FIELD"], [154, 158, 7, "enum_FIELD"], [161, 171, 7, "enum_FIELD"], [181, 185, 7, "enum_FIELD"], [188, 192, 7, "enum_FIELD"], [195, 199, 7, "enum_FIELD"], [207, 206, 7, "enum_FIELD"], [207, 208, 7, "enum_FIELD"], [22, 21, 7, "enum_FIELD"], [49, 48, 7, "enum_FIELD"], [53, 52, 7, "enum_FIELD"], [66, 64, 7, "enum_FIELD"], [77, 81, 7, "enum_FIELD"], [84, 88, 7, "enum_FIELD"], [104, 100, 7, "enum_FIELD"], [123, 122, 7, "enum_FIELD"], [147, 146, 7, "enum_FIELD"], [158, 156, 7, "enum_FIELD"], [171, 163, 7, "enum_FIELD"], [185, 183, 7, "enum_FIELD"], [192, 191, 7, "enum_FIELD"], [199, 197, 7, "enum_FIELD"], [211, 224, 7, "enum_FIELD"], [64, 63, 7, "enum_FIELD"], [68, 67, 7, "enum_FIELD"], [81, 79, 7, "enum_FIELD"], [88, 86, 7, "enum_FIELD"], [100, 99, 7, "enum_FIELD"], [106, 105, 7, "enum_FIELD"], [110, 109, 7, "enum_FIELD"], [156, 155, 7, "enum_FIELD"], [163, 162, 7, "enum_FIELD"], [166, 168, 7, "enum_FIELD"], [172, 174, 7, "enum_FIELD"], [183, 182, 7, "enum_FIELD"], [197, 196, 7, "enum_FIELD"], [201, 200, 7, "enum_FIELD"], [224, 222, 7, "enum_FIELD"], [79, 78, 7, "enum_FIELD"], [86, 85, 7, "enum_FIELD"], [90, 89, 7, "enum_FIELD"], [222, 217, 7, "enum_FIELD"], [225, 227, 7, "enum_FIELD"], [217, 215, 7, "enum_FIELD"], [215, 213, 7, "enum_FIELD"], [218, 220, 7, "enum_FIELD"], [213, 212, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [29, 2, 10, "enum_LAST_LEXICAL_USE"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [44, 19, 10, "enum_LAST_LEXICAL_USE"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 47, 9, "enum_NEXT_SYNTAX"], [48, 36, 10, "enum_LAST_LEXICAL_USE"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [52, 42, 10, "enum_LAST_LEXICAL_USE"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [63, 7, 10, "enum_LAST_LEXICAL_USE"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [67, 52, 10, "enum_LAST_LEXICAL_USE"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [85, 13, 10, "enum_LAST_LEXICAL_USE"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [89, 67, 10, "enum_LAST_LEXICAL_USE"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 98, 9, "enum_NEXT_SYNTAX"], [99, 85, 10, "enum_LAST_LEXICAL_USE"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [103, 29, 10, "enum_LAST_LEXICAL_USE"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [105, 61, 10, "enum_LAST_LEXICAL_USE"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [109, 105, 10, "enum_LAST_LEXICAL_USE"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [122, 99, 10, "enum_LAST_LEXICAL_USE"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [126, 103, 10, "enum_LAST_LEXICAL_USE"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 130, 9, "enum_NEXT_SYNTAX"], [131, 21, 10, "enum_LAST_LEXICAL_USE"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 137, 9, "enum_NEXT_SYNTAX"], [137, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [146, 120, 10, "enum_LAST_LEXICAL_USE"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [150, 48, 10, "enum_LAST_LEXICAL_USE"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 154, 9, "enum_NEXT_SYNTAX"], [155, 78, 10, "enum_LAST_LEXICAL_USE"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [169, 126, 10, "enum_LAST_LEXICAL_USE"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [175, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 181, 9, "enum_NEXT_SYNTAX"], [182, 155, 10, "enum_LAST_LEXICAL_USE"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 184, 9, "enum_NEXT_SYNTAX"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [187, 188, 9, "enum_NEXT_SYNTAX"], [188, 189, 9, "enum_NEXT_SYNTAX"], [189, 190, 9, "enum_NEXT_SYNTAX"], [190, 191, 9, "enum_NEXT_SYNTAX"], [191, 192, 9, "enum_NEXT_SYNTAX"], [193, 150, 10, "enum_LAST_LEXICAL_USE"], [192, 193, 9, "enum_NEXT_SYNTAX"], [193, 194, 9, "enum_NEXT_SYNTAX"], [194, 195, 9, "enum_NEXT_SYNTAX"], [196, 189, 10, "enum_LAST_LEXICAL_USE"], [195, 196, 9, "enum_NEXT_SYNTAX"], [196, 197, 9, "enum_NEXT_SYNTAX"], [197, 198, 9, "enum_NEXT_SYNTAX"], [198, 199, 9, "enum_NEXT_SYNTAX"], [200, 146, 10, "enum_LAST_LEXICAL_USE"], [199, 200, 9, "enum_NEXT_SYNTAX"], [200, 201, 9, "enum_NEXT_SYNTAX"], [201, 202, 9, "enum_NEXT_SYNTAX"], [202, 203, 9, "enum_NEXT_SYNTAX"], [203, 205, 9, "enum_NEXT_SYNTAX"], [205, 206, 9, "enum_NEXT_SYNTAX"], [206, 207, 9, "enum_NEXT_SYNTAX"], [208, 193, 10, "enum_LAST_LEXICAL_USE"], [207, 208, 9, "enum_NEXT_SYNTAX"], [208, 209, 9, "enum_NEXT_SYNTAX"], [209, 211, 9, "enum_NEXT_SYNTAX"], [212, 131, 10, "enum_LAST_LEXICAL_USE"], [211, 212, 9, "enum_NEXT_SYNTAX"], [212, 213, 9, "enum_NEXT_SYNTAX"], [213, 214, 9, "enum_NEXT_SYNTAX"], [214, 215, 9, "enum_NEXT_SYNTAX"], [215, 216, 9, "enum_NEXT_SYNTAX"], [216, 217, 9, "enum_NEXT_SYNTAX"], [217, 218, 9, "enum_NEXT_SYNTAX"], [218, 219, 9, "enum_NEXT_SYNTAX"], [220, 206, 10, "enum_LAST_LEXICAL_USE"], [219, 220, 9, "enum_NEXT_SYNTAX"], [220, 221, 9, "enum_NEXT_SYNTAX"], [221, 222, 9, "enum_NEXT_SYNTAX"], [222, 223, 9, "enum_NEXT_SYNTAX"], [223, 224, 9, "enum_NEXT_SYNTAX"], [224, 225, 9, "enum_NEXT_SYNTAX"], [225, 226, 9, "enum_NEXT_SYNTAX"], [226, 227, 9, "enum_NEXT_SYNTAX"], [227, 228, 9, "enum_NEXT_SYNTAX"], [6, 12, 1, "enum_CFG_NEXT"], [12, 18, 1, "enum_CFG_NEXT"], [18, 35, 1, "enum_CFG_NEXT"], [35, 44, 1, "enum_CFG_NEXT"], [44, 42, 1, "enum_CFG_NEXT"], [42, 47, 1, "enum_CFG_NEXT"], [42, 119, 1, "enum_CFG_NEXT"], [47, 60, 1, "enum_CFG_NEXT"], [60, 98, 1, "enum_CFG_NEXT"], [60, 74, 1, "enum_CFG_NEXT"], [74, 77, 1, "enum_CFG_NEXT"], [77, 84, 1, "enum_CFG_NEXT"], [84, 42, 1, "enum_CFG_NEXT"], [98, 42, 1, "enum_CFG_NEXT"], [119, 149, 1, "enum_CFG_NEXT"], [119, 132, 1, "enum_CFG_NEXT"], [149, 154, 1, "enum_CFG_NEXT"], [149, 181, 1, "enum_CFG_NEXT"], [154, 161, 1, "enum_CFG_NEXT"], [181, 188, 1, "enum_CFG_NEXT"], [188, 195, 1, "enum_CFG_NEXT"], [195, 208, 1, "enum_CFG_NEXT"], [208, 206, 1, "enum_CFG_NEXT"], [206, 211, 1, "enum_CFG_NEXT"], [211, 206, 1, "enum_CFG_NEXT"], [29, 2, 3, "enum_LAST_WRITE"], [44, 19, 3, "enum_LAST_WRITE"], [42, 89, 2, "enum_LAST_READ"], [42, 67, 2, "enum_LAST_READ"], [42, 42, 3, "enum_LAST_WRITE"], [48, 48, 2, "enum_LAST_READ"], [48, 36, 3, "enum_LAST_WRITE"], [52, 89, 2, "enum_LAST_READ"], [52, 67, 2, "enum_LAST_READ"], [52, 42, 3, "enum_LAST_WRITE"], [63, 63, 2, "enum_LAST_READ"], [63, 7, 3, "enum_LAST_WRITE"], [67, 52, 2, "enum_LAST_READ"], [67, 42, 3, "enum_LAST_WRITE"], [61, 109, 2, "enum_LAST_READ"], [61, 61, 3, "enum_LAST_WRITE"], [74, 74, 2, "enum_LAST_READ"], [78, 78, 2, "enum_LAST_READ"], [85, 99, 2, "enum_LAST_READ"], [85, 85, 2, "enum_LAST_READ"], [85, 13, 3, "enum_LAST_WRITE"], [89, 67, 2, "enum_LAST_READ"], [89, 42, 3, "enum_LAST_WRITE"], [99, 99, 2, "enum_LAST_READ"], [99, 85, 2, "enum_LAST_READ"], [99, 13, 3, "enum_LAST_WRITE"], [103, 29, 2, "enum_LAST_READ"], [103, 103, 2, "enum_LAST_READ"], [103, 2, 3, "enum_LAST_WRITE"], [105, 109, 2, "enum_LAST_READ"], [105, 61, 3, "enum_LAST_WRITE"], [109, 105, 2, "enum_LAST_READ"], [109, 61, 3, "enum_LAST_WRITE"], [122, 99, 2, "enum_LAST_READ"], [122, 85, 2, "enum_LAST_READ"], [122, 13, 3, "enum_LAST_WRITE"], [126, 29, 2, "enum_LAST_READ"], [126, 103, 2, "enum_LAST_READ"], [126, 2, 3, "enum_LAST_WRITE"], [131, 21, 2, "enum_LAST_READ"], [146, 120, 3, "enum_LAST_WRITE"], [150, 48, 2, "enum_LAST_READ"], [150, 36, 3, "enum_LAST_WRITE"], [155, 78, 2, "enum_LAST_READ"], [169, 126, 2, "enum_LAST_READ"], [169, 2, 3, "enum_LAST_WRITE"], [182, 78, 2, "enum_LAST_READ"], [193, 150, 2, "enum_LAST_READ"], [193, 36, 3, "enum_LAST_WRITE"], [196, 189, 3, "enum_LAST_WRITE"], [200, 146, 2, "enum_LAST_READ"], [200, 120, 3, "enum_LAST_WRITE"], [208, 193, 2, "enum_LAST_READ"], [208, 36, 3, "enum_LAST_WRITE"], [206, 220, 2, "enum_LAST_READ"], [206, 206, 3, "enum_LAST_WRITE"], [212, 212, 2, "enum_LAST_READ"], [212, 21, 2, "enum_LAST_READ"], [220, 220, 2, "enum_LAST_READ"], [220, 206, 3, "enum_LAST_WRITE"], [7, 9, 4, "enum_COMPUTED_FROM"], [13, 15, 4, "enum_COMPUTED_FROM"], [19, 29, 4, "enum_COMPUTED_FROM"], [19, 21, 4, "enum_COMPUTED_FROM"], [120, 126, 4, "enum_COMPUTED_FROM"], [120, 122, 4, "enum_COMPUTED_FROM"], [61, 63, 4, "enum_COMPUTED_FROM"], [61, 67, 4, "enum_COMPUTED_FROM"], [189, 191, 4, "enum_COMPUTED_FROM"], [189, 193, 4, "enum_COMPUTED_FROM"]], "error_location": 208, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/pozytywnie/django-facebook-auth.git", "old_path": "facebook_auth/models.py", "hash": "5301679f7ff26baab5b635204d309e89e907a47f", "code": "def debug_all_tokens_for_user(user_id: int):\n    manager: FacebookTokenManager = FacebookTokenManager()\n    token_manager: UserTokenManager = UserTokenManager()\n    user_tokens: List[UserToken] = UserToken.objects.filter(provider_user_id=user_id,\n        deleted=False)\n    processed_user_tokens: List[int] = []\n    for token in user_tokens:\n        processed_user_tokens.append(token.id)\n        try:\n            data = manager.debug_token(token.token)\n        except ValueError:\n            logger.info('Invalid access token')\n            token_manager.invalidate_access_token(token.token)\n        else:\n            token_manager.insert_token(user_id, data.token, data.expires)\n\n    try:\n        best_token: UserToken = token_manager.get_access_token(user_id)\n    except UserToken.DoesNotExist:\n        pass\n    else:\n        if best_token.id not in processed_user_tokens:\n            logger.info('Retrying debug_all_tokens_for_user.')\n            debug_all_tokens_for_user.retry(args=[user_id],\n                                            countdown=45)\n        else:\n            logger.info('Deleting user tokens except best one.')\n            tokens_to_delete: List[int] = sorted(processed_user_tokens)\n            tokens_to_delete.remove(best_token.id)\n            for token_id in processed_user_tokens:\n                UserToken.objects.filter(id=token_id).update(deleted=True)\n", "rewrite": "ReplaceText(target='tokens_to_delete' @(257,28)->(257,49))", "error_line": 29, "has_bug": true, "code_full": "import logging\nfrom typing import Dict, List\n\nlogger = logging.getLogger(__name__)\n\n\nclass UserTokens(List):\n    def update(self, deleted: bool):\n        pass\n\nclass UserToken:\n    id: int\n    token: str\n    expires: int\n\n    class objects:\n        @staticmethod\n        def filter(provider_user_id: int=0, deleted: bool=False, id: int=0) -> UserTokens:\n            return UserTokens()\n\n    class DoesNotExist(Exception):\n        pass\n\n\nclass FacebookTokenManager:\n    def debug_token(self, token: str) -> UserToken:\n        return UserToken()\n\n\nclass UserTokenManager:\n    def insert_token(self, user_id: int, token: str, expires: int):\n        pass\n\n    def get_access_token(self, user_id: int) -> UserToken:\n        return UserToken()\n\n    def invalidate_access_token(self, token: str):\n        pass\n\n\ndef debug_all_tokens_for_user(user_id: int):\n    manager: FacebookTokenManager = FacebookTokenManager()\n    token_manager: UserTokenManager = UserTokenManager()\n    user_tokens: List[UserToken] = UserToken.objects.filter(provider_user_id=user_id,\n        deleted=False)\n    processed_user_tokens: List[int] = []\n    for token in user_tokens:\n        processed_user_tokens.append(token.id)\n        try:\n            data = manager.debug_token(token.token)\n        except ValueError:\n            logger.info('Invalid access token')\n            token_manager.invalidate_access_token(token.token)\n        else:\n            token_manager.insert_token(user_id, data.token, data.expires)\n\n    try:\n        best_token: UserToken = token_manager.get_access_token(user_id)\n    except UserToken.DoesNotExist:\n        pass\n    else:\n        if best_token.id not in processed_user_tokens:\n            logger.info('Retrying debug_all_tokens_for_user.')\n            debug_all_tokens_for_user.retry(args=[user_id],\n                                            countdown=45)\n        else:\n            logger.info('Deleting user tokens except best one.')\n            tokens_to_delete: List[int] = sorted(processed_user_tokens)\n            tokens_to_delete.remove(best_token.id)\n            for token_id in processed_user_tokens:\n                UserToken.objects.filter(id=token_id).update(deleted=True)\n", "error_location_char": [1286, 1307], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def __getitem__(", "self", ",", "n", ")", ":", "#NEWLINE#", "#INDENT#", "'Return selected image(s) in the collection.\\n\\n    Loading is done on demand.\\n\\n    Parameters\\n    ----------\\n    n : int or slice\\n        The image number to be returned, or a slice selecting the images\\n        and ordering to be returned in a new ImageCollection.\\n\\n    Returns\\n    -------\\n    img : ndarray or ImageCollection.\\n        The `n`-th image in the collection, or a new ImageCollection with\\n        the selected images.\\n\\n    '", "#NEWLINE#", "if", "hasattr", "(", "n", ",", "'__index__'", ")", ":", "#NEWLINE#", "#INDENT#", "n", "=", "n", ".", "__index__", "(", ")", "#NEWLINE#", "#UNINDENT#", "if", "(", "type", "(", "n", ")", "not in", "[", "int", ",", "slice", "]", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "TypeError", "(", "'slicing must be with an int or slice object'", ")", "#NEWLINE#", "#UNINDENT#", "if", "(", "type", "(", "n", ")", "is", "int", ")", ":", "#NEWLINE#", "#INDENT#", "n", "=", "self", ".", "_check_imgnum", "(", "n", ")", "#NEWLINE#", "idx", "=", "(", "n", "%", "len", "(", "self", ".", "data", ")", ")", "#NEWLINE#", "if", "(", "(", "self", ".", "conserve_memory", "and", "(", "n", "!=", "self", ".", "_cached", ")", ")", "or", "(", "self", ".", "data", "[", "idx", "]", "is", "None", ")", ")", ":", "#NEWLINE#", "#INDENT#", "if", "self", ".", "_frame_index", ":", "#NEWLINE#", "#INDENT#", "(", "fname", ",", "img_num", ")", "=", "self", ".", "_frame_index", "[", "idx", "]", "#NEWLINE#", "self", ".", "data", "[", "idx", "]", "=", "self", ".", "load_func", "(", "fname", ",", "img_num", "=", "img_num", ",", "**", "self", ".", "load_func_kwargs", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "self", ".", "data", "[", "idx", "]", "=", "self", ".", "load_func", "(", "self", ".", "files", "[", "n", "]", ",", "**", "self", ".", "load_func_kwargs", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "_cached", "=", "n", "#NEWLINE#", "#UNINDENT#", "return", "self", ".", "data", "[", "idx", "]", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "fidx", "=", "range", "(", "self", ".", "_numframes", ")", "[", "n", "]", "#NEWLINE#", "new_ic", "=", "copy", "(", "self", ")", "#NEWLINE#", "if", "self", ".", "_frame_index", ":", "#NEWLINE#", "#INDENT#", "new_ic", ".", "_files", "=", "[", "self", ".", "_frame_index", "[", "i", "]", "[", "0", "]", "for", "i", "in", "fidx", "]", "#NEWLINE#", "new_ic", ".", "_frame_index", "=", "[", "self", ".", "_frame_index", "[", "i", "]", "for", "i", "in", "fidx", "]", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "new_ic", ".", "_files", "=", "[", "self", ".", "_files", "[", "i", "]", "for", "i", "in", "fidx", "]", "#NEWLINE#", "#UNINDENT#", "new_ic", ".", "_numframes", "=", "len", "(", "fidx", ")", "#NEWLINE#", "if", "self", ".", "conserve_memory", ":", "#NEWLINE#", "#INDENT#", "if", "(", "self", ".", "_cached", "in", "fidx", ")", ":", "#NEWLINE#", "#INDENT#", "new_ic", ".", "_cached", "=", "fidx", ".", "index", "(", "self", ".", "_cached", ")", "#NEWLINE#", "new_ic", ".", "data", "=", "np", ".", "copy", "(", "self", ".", "data", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "new_ic", ".", "data", "=", "np", ".", "empty", "(", "1", ",", "dtype", "=", "object", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "new_ic", ".", "data", "=", "self", ".", "data", "[", "fidx", "]", "#NEWLINE#", "#UNINDENT#", "return", "new_ic"], "edges": [[1, 3, 7, "enum_FIELD"], [8, 9, 7, "enum_FIELD"], [11, 15, 7, "enum_FIELD"], [30, 36, 7, "enum_FIELD"], [62, 59, 7, "enum_FIELD"], [15, 12, 7, "enum_FIELD"], [20, 26, 7, "enum_FIELD"], [36, 33, 7, "enum_FIELD"], [46, 48, 7, "enum_FIELD"], [59, 56, 7, "enum_FIELD"], [64, 70, 7, "enum_FIELD"], [73, 78, 7, "enum_FIELD"], [87, 102, 7, "enum_FIELD"], [197, 201, 7, "enum_FIELD"], [209, 218, 7, "enum_FIELD"], [221, 225, 7, "enum_FIELD"], [233, 231, 7, "enum_FIELD"], [295, 301, 7, "enum_FIELD"], [309, 307, 7, "enum_FIELD"], [387, 388, 7, "enum_FIELD"], [26, 24, 7, "enum_FIELD"], [33, 32, 7, "enum_FIELD"], [48, 47, 7, "enum_FIELD"], [56, 55, 7, "enum_FIELD"], [70, 68, 7, "enum_FIELD"], [78, 77, 7, "enum_FIELD"], [78, 80, 7, "enum_FIELD"], [121, 119, 7, "enum_FIELD"], [189, 194, 7, "enum_FIELD"], [201, 199, 7, "enum_FIELD"], [201, 202, 7, "enum_FIELD"], [218, 213, 7, "enum_FIELD"], [218, 219, 7, "enum_FIELD"], [225, 224, 7, "enum_FIELD"], [231, 230, 7, "enum_FIELD"], [235, 240, 7, "enum_FIELD"], [255, 260, 7, "enum_FIELD"], [277, 282, 7, "enum_FIELD"], [297, 296, 7, "enum_FIELD"], [301, 300, 7, "enum_FIELD"], [307, 306, 7, "enum_FIELD"], [320, 317, 7, "enum_FIELD"], [374, 382, 7, "enum_FIELD"], [24, 23, 7, "enum_FIELD"], [68, 67, 7, "enum_FIELD"], [80, 79, 7, "enum_FIELD"], [110, 107, 7, "enum_FIELD"], [119, 118, 7, "enum_FIELD"], [123, 133, 7, "enum_FIELD"], [136, 149, 7, "enum_FIELD"], [164, 182, 7, "enum_FIELD"], [191, 190, 7, "enum_FIELD"], [199, 198, 7, "enum_FIELD"], [213, 212, 7, "enum_FIELD"], [237, 236, 7, "enum_FIELD"], [240, 247, 7, "enum_FIELD"], [257, 256, 7, "enum_FIELD"], [260, 264, 7, "enum_FIELD"], [279, 278, 7, "enum_FIELD"], [282, 286, 7, "enum_FIELD"], [317, 315, 7, "enum_FIELD"], [322, 330, 7, "enum_FIELD"], [335, 343, 7, "enum_FIELD"], [353, 363, 7, "enum_FIELD"], [376, 375, 7, "enum_FIELD"], [382, 380, 7, "enum_FIELD"], [382, 383, 7, "enum_FIELD"], [82, 81, 7, "enum_FIELD"], [91, 90, 7, "enum_FIELD"], [96, 95, 7, "enum_FIELD"], [107, 105, 7, "enum_FIELD"], [107, 108, 7, "enum_FIELD"], [133, 131, 7, "enum_FIELD"], [133, 134, 7, "enum_FIELD"], [140, 138, 7, "enum_FIELD"], [140, 141, 7, "enum_FIELD"], [149, 145, 7, "enum_FIELD"], [168, 166, 7, "enum_FIELD"], [168, 169, 7, "enum_FIELD"], [182, 173, 7, "enum_FIELD"], [215, 214, 7, "enum_FIELD"], [247, 244, 7, "enum_FIELD"], [247, 248, 7, "enum_FIELD"], [250, 251, 7, "enum_FIELD"], [250, 253, 7, "enum_FIELD"], [264, 262, 7, "enum_FIELD"], [264, 265, 7, "enum_FIELD"], [267, 268, 7, "enum_FIELD"], [267, 270, 7, "enum_FIELD"], [286, 284, 7, "enum_FIELD"], [286, 287, 7, "enum_FIELD"], [289, 290, 7, "enum_FIELD"], [289, 292, 7, "enum_FIELD"], [315, 314, 7, "enum_FIELD"], [324, 323, 7, "enum_FIELD"], [330, 328, 7, "enum_FIELD"], [337, 336, 7, "enum_FIELD"], [343, 341, 7, "enum_FIELD"], [355, 354, 7, "enum_FIELD"], [363, 359, 7, "enum_FIELD"], [380, 379, 7, "enum_FIELD"], [98, 97, 7, "enum_FIELD"], [105, 104, 7, "enum_FIELD"], [131, 130, 7, "enum_FIELD"], [138, 137, 7, "enum_FIELD"], [145, 144, 7, "enum_FIELD"], [150, 152, 7, "enum_FIELD"], [154, 156, 7, "enum_FIELD"], [166, 165, 7, "enum_FIELD"], [173, 172, 7, "enum_FIELD"], [179, 177, 7, "enum_FIELD"], [179, 180, 7, "enum_FIELD"], [183, 185, 7, "enum_FIELD"], [244, 242, 7, "enum_FIELD"], [244, 245, 7, "enum_FIELD"], [262, 261, 7, "enum_FIELD"], [284, 283, 7, "enum_FIELD"], [328, 327, 7, "enum_FIELD"], [332, 331, 7, "enum_FIELD"], [341, 340, 7, "enum_FIELD"], [345, 344, 7, "enum_FIELD"], [359, 358, 7, "enum_FIELD"], [364, 366, 7, "enum_FIELD"], [156, 155, 7, "enum_FIELD"], [177, 176, 7, "enum_FIELD"], [185, 184, 7, "enum_FIELD"], [242, 241, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [14, 4, 10, "enum_LAST_LEXICAL_USE"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 20, 9, "enum_NEXT_SYNTAX"], [21, 14, 10, "enum_LAST_LEXICAL_USE"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [23, 21, 10, "enum_LAST_LEXICAL_USE"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [34, 23, 10, "enum_LAST_LEXICAL_USE"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [55, 32, 10, "enum_LAST_LEXICAL_USE"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [57, 34, 10, "enum_LAST_LEXICAL_USE"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [60, 38, 10, "enum_LAST_LEXICAL_USE"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 64, 9, "enum_NEXT_SYNTAX"], [65, 57, 10, "enum_LAST_LEXICAL_USE"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [67, 2, 10, "enum_LAST_LEXICAL_USE"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [71, 65, 10, "enum_LAST_LEXICAL_USE"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [77, 71, 10, "enum_LAST_LEXICAL_USE"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [81, 67, 10, "enum_LAST_LEXICAL_USE"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [90, 81, 10, "enum_LAST_LEXICAL_USE"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [95, 77, 10, "enum_LAST_LEXICAL_USE"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [97, 90, 10, "enum_LAST_LEXICAL_USE"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [104, 97, 10, "enum_LAST_LEXICAL_USE"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [108, 74, 10, "enum_LAST_LEXICAL_USE"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 117, 9, "enum_NEXT_SYNTAX"], [118, 104, 10, "enum_LAST_LEXICAL_USE"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [130, 118, 10, "enum_LAST_LEXICAL_USE"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [134, 108, 10, "enum_LAST_LEXICAL_USE"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [137, 130, 10, "enum_LAST_LEXICAL_USE"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [141, 134, 10, "enum_LAST_LEXICAL_USE"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [144, 137, 10, "enum_LAST_LEXICAL_USE"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [148, 125, 10, "enum_LAST_LEXICAL_USE"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [152, 127, 10, "enum_LAST_LEXICAL_USE"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [155, 144, 10, "enum_LAST_LEXICAL_USE"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 164, 9, "enum_NEXT_SYNTAX"], [165, 155, 10, "enum_LAST_LEXICAL_USE"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [169, 141, 10, "enum_LAST_LEXICAL_USE"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [172, 165, 10, "enum_LAST_LEXICAL_USE"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [176, 172, 10, "enum_LAST_LEXICAL_USE"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [180, 95, 10, "enum_LAST_LEXICAL_USE"], [179, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [184, 176, 10, "enum_LAST_LEXICAL_USE"], [183, 184, 9, "enum_NEXT_SYNTAX"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [187, 189, 9, "enum_NEXT_SYNTAX"], [190, 184, 10, "enum_LAST_LEXICAL_USE"], [189, 190, 9, "enum_NEXT_SYNTAX"], [190, 191, 9, "enum_NEXT_SYNTAX"], [191, 192, 9, "enum_NEXT_SYNTAX"], [192, 193, 9, "enum_NEXT_SYNTAX"], [194, 180, 10, "enum_LAST_LEXICAL_USE"], [193, 194, 9, "enum_NEXT_SYNTAX"], [194, 197, 9, "enum_NEXT_SYNTAX"], [198, 190, 10, "enum_LAST_LEXICAL_USE"], [197, 198, 9, "enum_NEXT_SYNTAX"], [198, 199, 9, "enum_NEXT_SYNTAX"], [199, 200, 9, "enum_NEXT_SYNTAX"], [200, 201, 9, "enum_NEXT_SYNTAX"], [202, 169, 10, "enum_LAST_LEXICAL_USE"], [201, 202, 9, "enum_NEXT_SYNTAX"], [202, 203, 9, "enum_NEXT_SYNTAX"], [203, 206, 9, "enum_NEXT_SYNTAX"], [206, 207, 9, "enum_NEXT_SYNTAX"], [207, 209, 9, "enum_NEXT_SYNTAX"], [209, 210, 9, "enum_NEXT_SYNTAX"], [210, 211, 9, "enum_NEXT_SYNTAX"], [211, 212, 9, "enum_NEXT_SYNTAX"], [212, 213, 9, "enum_NEXT_SYNTAX"], [214, 198, 10, "enum_LAST_LEXICAL_USE"], [213, 214, 9, "enum_NEXT_SYNTAX"], [214, 215, 9, "enum_NEXT_SYNTAX"], [215, 216, 9, "enum_NEXT_SYNTAX"], [216, 217, 9, "enum_NEXT_SYNTAX"], [217, 218, 9, "enum_NEXT_SYNTAX"], [219, 194, 10, "enum_LAST_LEXICAL_USE"], [218, 219, 9, "enum_NEXT_SYNTAX"], [219, 220, 9, "enum_NEXT_SYNTAX"], [220, 221, 9, "enum_NEXT_SYNTAX"], [221, 222, 9, "enum_NEXT_SYNTAX"], [222, 223, 9, "enum_NEXT_SYNTAX"], [223, 224, 9, "enum_NEXT_SYNTAX"], [224, 225, 9, "enum_NEXT_SYNTAX"], [226, 214, 10, "enum_LAST_LEXICAL_USE"], [225, 226, 9, "enum_NEXT_SYNTAX"], [226, 227, 9, "enum_NEXT_SYNTAX"], [227, 229, 9, "enum_NEXT_SYNTAX"], [230, 226, 10, "enum_LAST_LEXICAL_USE"], [229, 230, 9, "enum_NEXT_SYNTAX"], [230, 231, 9, "enum_NEXT_SYNTAX"], [231, 232, 9, "enum_NEXT_SYNTAX"], [232, 233, 9, "enum_NEXT_SYNTAX"], [233, 235, 9, "enum_NEXT_SYNTAX"], [236, 222, 10, "enum_LAST_LEXICAL_USE"], [235, 236, 9, "enum_NEXT_SYNTAX"], [236, 237, 9, "enum_NEXT_SYNTAX"], [237, 238, 9, "enum_NEXT_SYNTAX"], [238, 239, 9, "enum_NEXT_SYNTAX"], [239, 240, 9, "enum_NEXT_SYNTAX"], [241, 230, 10, "enum_LAST_LEXICAL_USE"], [240, 241, 9, "enum_NEXT_SYNTAX"], [241, 242, 9, "enum_NEXT_SYNTAX"], [242, 243, 9, "enum_NEXT_SYNTAX"], [243, 244, 9, "enum_NEXT_SYNTAX"], [244, 245, 9, "enum_NEXT_SYNTAX"], [245, 246, 9, "enum_NEXT_SYNTAX"], [246, 247, 9, "enum_NEXT_SYNTAX"], [247, 248, 9, "enum_NEXT_SYNTAX"], [248, 249, 9, "enum_NEXT_SYNTAX"], [249, 250, 9, "enum_NEXT_SYNTAX"], [251, 245, 10, "enum_LAST_LEXICAL_USE"], [250, 251, 9, "enum_NEXT_SYNTAX"], [251, 252, 9, "enum_NEXT_SYNTAX"], [253, 210, 10, "enum_LAST_LEXICAL_USE"], [252, 253, 9, "enum_NEXT_SYNTAX"], [253, 254, 9, "enum_NEXT_SYNTAX"], [254, 255, 9, "enum_NEXT_SYNTAX"], [256, 236, 10, "enum_LAST_LEXICAL_USE"], [255, 256, 9, "enum_NEXT_SYNTAX"], [256, 257, 9, "enum_NEXT_SYNTAX"], [257, 258, 9, "enum_NEXT_SYNTAX"], [258, 259, 9, "enum_NEXT_SYNTAX"], [259, 260, 9, "enum_NEXT_SYNTAX"], [261, 241, 10, "enum_LAST_LEXICAL_USE"], [260, 261, 9, "enum_NEXT_SYNTAX"], [261, 262, 9, "enum_NEXT_SYNTAX"], [262, 263, 9, "enum_NEXT_SYNTAX"], [263, 264, 9, "enum_NEXT_SYNTAX"], [265, 251, 10, "enum_LAST_LEXICAL_USE"], [264, 265, 9, "enum_NEXT_SYNTAX"], [265, 266, 9, "enum_NEXT_SYNTAX"], [266, 267, 9, "enum_NEXT_SYNTAX"], [268, 265, 10, "enum_LAST_LEXICAL_USE"], [267, 268, 9, "enum_NEXT_SYNTAX"], [268, 269, 9, "enum_NEXT_SYNTAX"], [270, 253, 10, "enum_LAST_LEXICAL_USE"], [269, 270, 9, "enum_NEXT_SYNTAX"], [270, 271, 9, "enum_NEXT_SYNTAX"], [271, 274, 9, "enum_NEXT_SYNTAX"], [274, 275, 9, "enum_NEXT_SYNTAX"], [275, 277, 9, "enum_NEXT_SYNTAX"], [278, 256, 10, "enum_LAST_LEXICAL_USE"], [277, 278, 9, "enum_NEXT_SYNTAX"], [278, 279, 9, "enum_NEXT_SYNTAX"], [279, 280, 9, "enum_NEXT_SYNTAX"], [280, 281, 9, "enum_NEXT_SYNTAX"], [281, 282, 9, "enum_NEXT_SYNTAX"], [283, 261, 10, "enum_LAST_LEXICAL_USE"], [282, 283, 9, "enum_NEXT_SYNTAX"], [283, 284, 9, "enum_NEXT_SYNTAX"], [284, 285, 9, "enum_NEXT_SYNTAX"], [285, 286, 9, "enum_NEXT_SYNTAX"], [287, 268, 10, "enum_LAST_LEXICAL_USE"], [286, 287, 9, "enum_NEXT_SYNTAX"], [287, 288, 9, "enum_NEXT_SYNTAX"], [288, 289, 9, "enum_NEXT_SYNTAX"], [290, 287, 10, "enum_LAST_LEXICAL_USE"], [289, 290, 9, "enum_NEXT_SYNTAX"], [290, 291, 9, "enum_NEXT_SYNTAX"], [292, 270, 10, "enum_LAST_LEXICAL_USE"], [291, 292, 9, "enum_NEXT_SYNTAX"], [292, 293, 9, "enum_NEXT_SYNTAX"], [293, 295, 9, "enum_NEXT_SYNTAX"], [296, 278, 10, "enum_LAST_LEXICAL_USE"], [295, 296, 9, "enum_NEXT_SYNTAX"], [296, 297, 9, "enum_NEXT_SYNTAX"], [297, 298, 9, "enum_NEXT_SYNTAX"], [298, 299, 9, "enum_NEXT_SYNTAX"], [300, 79, 10, "enum_LAST_LEXICAL_USE"], [299, 300, 9, "enum_NEXT_SYNTAX"], [300, 301, 9, "enum_NEXT_SYNTAX"], [302, 292, 10, "enum_LAST_LEXICAL_USE"], [301, 302, 9, "enum_NEXT_SYNTAX"], [302, 303, 9, "enum_NEXT_SYNTAX"], [303, 305, 9, "enum_NEXT_SYNTAX"], [306, 283, 10, "enum_LAST_LEXICAL_USE"], [305, 306, 9, "enum_NEXT_SYNTAX"], [306, 307, 9, "enum_NEXT_SYNTAX"], [307, 308, 9, "enum_NEXT_SYNTAX"], [308, 309, 9, "enum_NEXT_SYNTAX"], [309, 312, 9, "enum_NEXT_SYNTAX"], [312, 313, 9, "enum_NEXT_SYNTAX"], [314, 306, 10, "enum_LAST_LEXICAL_USE"], [313, 314, 9, "enum_NEXT_SYNTAX"], [314, 315, 9, "enum_NEXT_SYNTAX"], [315, 316, 9, "enum_NEXT_SYNTAX"], [316, 317, 9, "enum_NEXT_SYNTAX"], [318, 302, 10, "enum_LAST_LEXICAL_USE"], [317, 318, 9, "enum_NEXT_SYNTAX"], [318, 319, 9, "enum_NEXT_SYNTAX"], [319, 320, 9, "enum_NEXT_SYNTAX"], [320, 322, 9, "enum_NEXT_SYNTAX"], [323, 296, 10, "enum_LAST_LEXICAL_USE"], [322, 323, 9, "enum_NEXT_SYNTAX"], [323, 324, 9, "enum_NEXT_SYNTAX"], [324, 325, 9, "enum_NEXT_SYNTAX"], [325, 326, 9, "enum_NEXT_SYNTAX"], [327, 318, 10, "enum_LAST_LEXICAL_USE"], [326, 327, 9, "enum_NEXT_SYNTAX"], [327, 328, 9, "enum_NEXT_SYNTAX"], [328, 329, 9, "enum_NEXT_SYNTAX"], [329, 330, 9, "enum_NEXT_SYNTAX"], [331, 314, 10, "enum_LAST_LEXICAL_USE"], [330, 331, 9, "enum_NEXT_SYNTAX"], [331, 332, 9, "enum_NEXT_SYNTAX"], [332, 333, 9, "enum_NEXT_SYNTAX"], [333, 334, 9, "enum_NEXT_SYNTAX"], [334, 335, 9, "enum_NEXT_SYNTAX"], [336, 323, 10, "enum_LAST_LEXICAL_USE"], [335, 336, 9, "enum_NEXT_SYNTAX"], [336, 337, 9, "enum_NEXT_SYNTAX"], [337, 338, 9, "enum_NEXT_SYNTAX"], [338, 339, 9, "enum_NEXT_SYNTAX"], [339, 340, 9, "enum_NEXT_SYNTAX"], [340, 341, 9, "enum_NEXT_SYNTAX"], [341, 342, 9, "enum_NEXT_SYNTAX"], [342, 343, 9, "enum_NEXT_SYNTAX"], [344, 331, 10, "enum_LAST_LEXICAL_USE"], [343, 344, 9, "enum_NEXT_SYNTAX"], [344, 345, 9, "enum_NEXT_SYNTAX"], [345, 346, 9, "enum_NEXT_SYNTAX"], [346, 347, 9, "enum_NEXT_SYNTAX"], [347, 350, 9, "enum_NEXT_SYNTAX"], [350, 351, 9, "enum_NEXT_SYNTAX"], [351, 353, 9, "enum_NEXT_SYNTAX"], [354, 336, 10, "enum_LAST_LEXICAL_USE"], [353, 354, 9, "enum_NEXT_SYNTAX"], [354, 355, 9, "enum_NEXT_SYNTAX"], [355, 356, 9, "enum_NEXT_SYNTAX"], [356, 357, 9, "enum_NEXT_SYNTAX"], [358, 340, 10, "enum_LAST_LEXICAL_USE"], [357, 358, 9, "enum_NEXT_SYNTAX"], [358, 359, 9, "enum_NEXT_SYNTAX"], [359, 360, 9, "enum_NEXT_SYNTAX"], [360, 361, 9, "enum_NEXT_SYNTAX"], [361, 362, 9, "enum_NEXT_SYNTAX"], [362, 363, 9, "enum_NEXT_SYNTAX"], [363, 364, 9, "enum_NEXT_SYNTAX"], [364, 365, 9, "enum_NEXT_SYNTAX"], [365, 366, 9, "enum_NEXT_SYNTAX"], [366, 367, 9, "enum_NEXT_SYNTAX"], [367, 371, 9, "enum_NEXT_SYNTAX"], [371, 372, 9, "enum_NEXT_SYNTAX"], [372, 374, 9, "enum_NEXT_SYNTAX"], [375, 354, 10, "enum_LAST_LEXICAL_USE"], [374, 375, 9, "enum_NEXT_SYNTAX"], [375, 376, 9, "enum_NEXT_SYNTAX"], [376, 377, 9, "enum_NEXT_SYNTAX"], [377, 378, 9, "enum_NEXT_SYNTAX"], [379, 344, 10, "enum_LAST_LEXICAL_USE"], [378, 379, 9, "enum_NEXT_SYNTAX"], [379, 380, 9, "enum_NEXT_SYNTAX"], [380, 381, 9, "enum_NEXT_SYNTAX"], [381, 382, 9, "enum_NEXT_SYNTAX"], [383, 327, 10, "enum_LAST_LEXICAL_USE"], [382, 383, 9, "enum_NEXT_SYNTAX"], [383, 384, 9, "enum_NEXT_SYNTAX"], [384, 387, 9, "enum_NEXT_SYNTAX"], [388, 375, 10, "enum_LAST_LEXICAL_USE"], [387, 388, 9, "enum_NEXT_SYNTAX"], [3, 8, 1, "enum_CFG_NEXT"], [8, 15, 1, "enum_CFG_NEXT"], [15, 36, 1, "enum_CFG_NEXT"], [15, 20, 1, "enum_CFG_NEXT"], [20, 36, 1, "enum_CFG_NEXT"], [36, 59, 1, "enum_CFG_NEXT"], [36, 46, 1, "enum_CFG_NEXT"], [59, 64, 1, "enum_CFG_NEXT"], [59, 209, 1, "enum_CFG_NEXT"], [64, 73, 1, "enum_CFG_NEXT"], [73, 102, 1, "enum_CFG_NEXT"], [102, 197, 1, "enum_CFG_NEXT"], [102, 119, 1, "enum_CFG_NEXT"], [119, 164, 1, "enum_CFG_NEXT"], [119, 123, 1, "enum_CFG_NEXT"], [123, 136, 1, "enum_CFG_NEXT"], [136, 189, 1, "enum_CFG_NEXT"], [164, 189, 1, "enum_CFG_NEXT"], [189, 197, 1, "enum_CFG_NEXT"], [209, 221, 1, "enum_CFG_NEXT"], [221, 231, 1, "enum_CFG_NEXT"], [231, 277, 1, "enum_CFG_NEXT"], [231, 235, 1, "enum_CFG_NEXT"], [235, 255, 1, "enum_CFG_NEXT"], [255, 295, 1, "enum_CFG_NEXT"], [277, 295, 1, "enum_CFG_NEXT"], [295, 307, 1, "enum_CFG_NEXT"], [307, 374, 1, "enum_CFG_NEXT"], [307, 317, 1, "enum_CFG_NEXT"], [317, 353, 1, "enum_CFG_NEXT"], [317, 322, 1, "enum_CFG_NEXT"], [322, 335, 1, "enum_CFG_NEXT"], [335, 387, 1, "enum_CFG_NEXT"], [353, 387, 1, "enum_CFG_NEXT"], [374, 387, 1, "enum_CFG_NEXT"], [14, 4, 3, "enum_LAST_WRITE"], [23, 14, 2, "enum_LAST_READ"], [23, 4, 3, "enum_LAST_WRITE"], [21, 23, 2, "enum_LAST_READ"], [21, 4, 3, "enum_LAST_WRITE"], [34, 14, 2, "enum_LAST_READ"], [34, 23, 2, "enum_LAST_READ"], [34, 21, 3, "enum_LAST_WRITE"], [34, 4, 3, "enum_LAST_WRITE"], [55, 32, 2, "enum_LAST_READ"], [57, 34, 2, "enum_LAST_READ"], [57, 21, 3, "enum_LAST_WRITE"], [57, 4, 3, "enum_LAST_WRITE"], [60, 38, 2, "enum_LAST_READ"], [67, 2, 3, "enum_LAST_WRITE"], [71, 57, 2, "enum_LAST_READ"], [71, 21, 3, "enum_LAST_WRITE"], [71, 4, 3, "enum_LAST_WRITE"], [65, 71, 2, "enum_LAST_READ"], [65, 21, 3, "enum_LAST_WRITE"], [65, 4, 3, "enum_LAST_WRITE"], [77, 71, 2, "enum_LAST_READ"], [77, 65, 3, "enum_LAST_WRITE"], [81, 67, 2, "enum_LAST_READ"], [81, 2, 3, "enum_LAST_WRITE"], [90, 81, 2, "enum_LAST_READ"], [90, 2, 3, "enum_LAST_WRITE"], [95, 77, 2, "enum_LAST_READ"], [95, 65, 3, "enum_LAST_WRITE"], [97, 90, 2, "enum_LAST_READ"], [97, 2, 3, "enum_LAST_WRITE"], [104, 97, 2, "enum_LAST_READ"], [104, 2, 3, "enum_LAST_WRITE"], [108, 74, 3, "enum_LAST_WRITE"], [118, 104, 2, "enum_LAST_READ"], [118, 2, 3, "enum_LAST_WRITE"], [130, 118, 2, "enum_LAST_READ"], [130, 2, 3, "enum_LAST_WRITE"], [134, 108, 2, "enum_LAST_READ"], [134, 74, 3, "enum_LAST_WRITE"], [144, 130, 2, "enum_LAST_READ"], [144, 2, 3, "enum_LAST_WRITE"], [148, 125, 3, "enum_LAST_WRITE"], [152, 127, 3, "enum_LAST_WRITE"], [155, 144, 2, "enum_LAST_READ"], [155, 2, 3, "enum_LAST_WRITE"], [137, 155, 2, "enum_LAST_READ"], [137, 2, 3, "enum_LAST_WRITE"], [141, 134, 2, "enum_LAST_READ"], [141, 74, 3, "enum_LAST_WRITE"], [172, 118, 2, "enum_LAST_READ"], [172, 2, 3, "enum_LAST_WRITE"], [176, 172, 2, "enum_LAST_READ"], [176, 2, 3, "enum_LAST_WRITE"], [180, 95, 2, "enum_LAST_READ"], [180, 65, 3, "enum_LAST_WRITE"], [184, 176, 2, "enum_LAST_READ"], [184, 2, 3, "enum_LAST_WRITE"], [165, 184, 2, "enum_LAST_READ"], [165, 2, 3, "enum_LAST_WRITE"], [169, 108, 2, "enum_LAST_READ"], [169, 74, 3, "enum_LAST_WRITE"], [194, 95, 2, "enum_LAST_READ"], [194, 180, 2, "enum_LAST_READ"], [194, 65, 3, "enum_LAST_WRITE"], [190, 137, 2, "enum_LAST_READ"], [190, 165, 2, "enum_LAST_READ"], [190, 2, 3, "enum_LAST_WRITE"], [198, 104, 2, "enum_LAST_READ"], [198, 190, 2, "enum_LAST_READ"], [198, 2, 3, "enum_LAST_WRITE"], [202, 108, 2, "enum_LAST_READ"], [202, 141, 2, "enum_LAST_READ"], [202, 169, 2, "enum_LAST_READ"], [202, 74, 3, "enum_LAST_WRITE"], [214, 2, 3, "enum_LAST_WRITE"], [219, 57, 2, "enum_LAST_READ"], [219, 21, 3, "enum_LAST_WRITE"], [219, 4, 3, "enum_LAST_WRITE"], [226, 214, 2, "enum_LAST_READ"], [226, 2, 3, "enum_LAST_WRITE"], [230, 226, 2, "enum_LAST_READ"], [230, 2, 3, "enum_LAST_WRITE"], [241, 230, 2, "enum_LAST_READ"], [241, 2, 3, "enum_LAST_WRITE"], [251, 245, 2, "enum_LAST_READ"], [253, 210, 3, "enum_LAST_WRITE"], [236, 222, 3, "enum_LAST_WRITE"], [261, 241, 2, "enum_LAST_READ"], [261, 2, 3, "enum_LAST_WRITE"], [265, 245, 2, "enum_LAST_READ"], [265, 251, 3, "enum_LAST_WRITE"], [268, 265, 2, "enum_LAST_READ"], [268, 251, 3, "enum_LAST_WRITE"], [270, 253, 2, "enum_LAST_READ"], [270, 210, 3, "enum_LAST_WRITE"], [256, 236, 2, "enum_LAST_READ"], [256, 222, 3, "enum_LAST_WRITE"], [283, 230, 2, "enum_LAST_READ"], [283, 2, 3, "enum_LAST_WRITE"], [290, 287, 2, "enum_LAST_READ"], [292, 210, 3, "enum_LAST_WRITE"], [278, 222, 3, "enum_LAST_WRITE"], [302, 270, 2, "enum_LAST_READ"], [302, 292, 2, "enum_LAST_READ"], [302, 210, 3, "enum_LAST_WRITE"], [296, 256, 2, "enum_LAST_READ"], [296, 278, 2, "enum_LAST_READ"], [296, 222, 3, "enum_LAST_WRITE"], [306, 261, 2, "enum_LAST_READ"], [306, 283, 2, "enum_LAST_READ"], [306, 2, 3, "enum_LAST_WRITE"], [314, 306, 2, "enum_LAST_READ"], [314, 2, 3, "enum_LAST_WRITE"], [318, 302, 2, "enum_LAST_READ"], [318, 210, 3, "enum_LAST_WRITE"], [327, 318, 2, "enum_LAST_READ"], [327, 210, 3, "enum_LAST_WRITE"], [331, 314, 2, "enum_LAST_READ"], [331, 2, 3, "enum_LAST_WRITE"], [323, 296, 2, "enum_LAST_READ"], [323, 222, 3, "enum_LAST_WRITE"], [344, 331, 2, "enum_LAST_READ"], [344, 2, 3, "enum_LAST_WRITE"], [336, 323, 2, "enum_LAST_READ"], [336, 222, 3, "enum_LAST_WRITE"], [354, 296, 2, "enum_LAST_READ"], [354, 222, 3, "enum_LAST_WRITE"], [379, 306, 2, "enum_LAST_READ"], [379, 2, 3, "enum_LAST_WRITE"], [383, 302, 2, "enum_LAST_READ"], [383, 210, 3, "enum_LAST_WRITE"], [375, 296, 2, "enum_LAST_READ"], [375, 222, 3, "enum_LAST_WRITE"], [388, 336, 2, "enum_LAST_READ"], [388, 354, 2, "enum_LAST_READ"], [388, 375, 2, "enum_LAST_READ"], [388, 222, 3, "enum_LAST_WRITE"], [21, 23, 4, "enum_COMPUTED_FROM"], [65, 71, 4, "enum_COMPUTED_FROM"], [65, 67, 4, "enum_COMPUTED_FROM"], [74, 77, 4, "enum_COMPUTED_FROM"], [74, 79, 4, "enum_COMPUTED_FROM"], [74, 81, 4, "enum_COMPUTED_FROM"], [210, 219, 4, "enum_COMPUTED_FROM"], [210, 212, 4, "enum_COMPUTED_FROM"], [210, 214, 4, "enum_COMPUTED_FROM"], [222, 224, 4, "enum_COMPUTED_FROM"], [222, 226, 4, "enum_COMPUTED_FROM"], [297, 300, 4, "enum_COMPUTED_FROM"], [297, 302, 4, "enum_COMPUTED_FROM"], [191, 194, 4, "enum_COMPUTED_FROM"], [237, 251, 4, "enum_COMPUTED_FROM"], [237, 253, 4, "enum_COMPUTED_FROM"], [237, 245, 4, "enum_COMPUTED_FROM"], [237, 241, 4, "enum_COMPUTED_FROM"], [257, 265, 4, "enum_COMPUTED_FROM"], [257, 268, 4, "enum_COMPUTED_FROM"], [257, 270, 4, "enum_COMPUTED_FROM"], [257, 261, 4, "enum_COMPUTED_FROM"], [279, 287, 4, "enum_COMPUTED_FROM"], [279, 290, 4, "enum_COMPUTED_FROM"], [279, 292, 4, "enum_COMPUTED_FROM"], [279, 283, 4, "enum_COMPUTED_FROM"], [376, 383, 4, "enum_COMPUTED_FROM"], [376, 379, 4, "enum_COMPUTED_FROM"], [126, 134, 4, "enum_COMPUTED_FROM"], [126, 130, 4, "enum_COMPUTED_FROM"], [140, 148, 4, "enum_COMPUTED_FROM"], [140, 144, 4, "enum_COMPUTED_FROM"], [140, 152, 4, "enum_COMPUTED_FROM"], [140, 155, 4, "enum_COMPUTED_FROM"], [168, 172, 4, "enum_COMPUTED_FROM"], [168, 180, 4, "enum_COMPUTED_FROM"], [168, 176, 4, "enum_COMPUTED_FROM"], [168, 184, 4, "enum_COMPUTED_FROM"], [324, 327, 4, "enum_COMPUTED_FROM"], [324, 331, 4, "enum_COMPUTED_FROM"], [337, 340, 4, "enum_COMPUTED_FROM"], [337, 344, 4, "enum_COMPUTED_FROM"], [355, 358, 4, "enum_COMPUTED_FROM"], [355, 366, 4, "enum_COMPUTED_FROM"]], "error_location": 134, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/scikit-image/scikit-image.git", "old_path": "skimage/io/collection.py", "hash": "4bdde3d2aef2dd184e0b907983a15167326aec55", "code": "def __getitem__(self, n: Union[int, slice]) -> Union[np.ndarray, 'ImageCollection']:\n    \"\"\"Return selected image(s) in the collection.\n\n    Loading is done on demand.\n\n    Parameters\n    ----------\n    n : int or slice\n        The image number to be returned, or a slice selecting the images\n        and ordering to be returned in a new ImageCollection.\n\n    Returns\n    -------\n    img : ndarray or ImageCollection.\n        The `n`-th image in the collection, or a new ImageCollection with\n        the selected images.\n\n    \"\"\"\n    if hasattr(n, '__index__'):\n        n = n.__index__()\n\n    if type(n) not in [int, slice]:\n        raise TypeError('slicing must be with an int or slice object')\n\n    if type(n) is int:\n        n: int = self._check_imgnum(n)\n        idx: int = n % len(self.data)\n\n        if ((self.conserve_memory and n != self._cached) or\n                (self.data[idx] is None)):\n            if self._frame_index:\n                fname, img_num = self._frame_index[idx]\n                self.data[idx] = self.load_func(fname, img_num=img_num,\n                                                **self.load_func_kwargs)\n            else:\n                self.data[idx] = self.load_func(self.files[n],\n                                                **self.load_func_kwargs)\n            self._cached = n\n\n        return self.data[idx]\n    else:\n        # A slice object was provided, so create a new ImageCollection\n        # object. Any loaded image data in the original ImageCollection\n        # will be copied by reference to the new object.  Image data\n        # loaded after this creation is not linked.\n        fidx: range = range(self._numframes)[n]\n        new_ic: \"ImageCollection\" = copy(self)\n\n        if self._frame_index:\n            new_ic._files = [self._frame_index[i][0] for i in fidx]\n            new_ic._frame_index = [self._frame_index[i] for i in fidx]\n        else:\n            new_ic._files = [self._files[i] for i in fidx]\n\n        new_ic._numframes = len(fidx)\n\n        if self.conserve_memory:\n            if self._cached in fidx:\n                new_ic._cached = fidx.index(self._cached)\n                new_ic.data = np.copy(self.data)\n            else:\n                new_ic.data = np.empty(1, dtype=object)\n        else:\n            new_ic.data = self.data[fidx]\n        return new_ic\n", "rewrite": "ReplaceText(target='n' @(257,55)->(257,58))", "error_line": 31, "has_bug": true, "code_full": "from copy import copy\nfrom typing import Callable, Dict, List, Tuple, Union\n\nimport numpy as np\n\n\nclass ImageCollection:\n    _files: List\n    files: List\n    data: np.ndarray\n    _numframes: int\n    _frame_index: List[Tuple[str, int]]\n    _cached: int\n    conserve_memory: bool\n    load_func_kwargs: Dict\n\n    def _check_imgnum(self, n: int) -> int:\n        return 0\n\n    def load_func(self, fname: str, img_num: int, **kwargs) -> np.ndarray:\n        return np.zeros(1)\n\n    def __getitem__(self, n: Union[int, slice]) -> Union[np.ndarray, 'ImageCollection']:\n        \"\"\"Return selected image(s) in the collection.\n\n        Loading is done on demand.\n\n        Parameters\n        ----------\n        n : int or slice\n            The image number to be returned, or a slice selecting the images\n            and ordering to be returned in a new ImageCollection.\n\n        Returns\n        -------\n        img : ndarray or ImageCollection.\n            The `n`-th image in the collection, or a new ImageCollection with\n            the selected images.\n\n        \"\"\"\n        if hasattr(n, '__index__'):\n            n = n.__index__()\n\n        if type(n) not in [int, slice]:\n            raise TypeError('slicing must be with an int or slice object')\n\n        if type(n) is int:\n            n: int = self._check_imgnum(n)\n            idx: int = n % len(self.data)\n\n            if ((self.conserve_memory and n != self._cached) or\n                    (self.data[idx] is None)):\n                if self._frame_index:\n                    fname, img_num = self._frame_index[idx]\n                    self.data[idx] = self.load_func(fname, img_num=img_num,\n                                                    **self.load_func_kwargs)\n                else:\n                    self.data[idx] = self.load_func(self.files[n],\n                                                    **self.load_func_kwargs)\n                self._cached = n\n\n            return self.data[idx]\n        else:\n            # A slice object was provided, so create a new ImageCollection\n            # object. Any loaded image data in the original ImageCollection\n            # will be copied by reference to the new object.  Image data\n            # loaded after this creation is not linked.\n            fidx: range = range(self._numframes)[n]\n            new_ic: \"ImageCollection\" = copy(self)\n\n            if self._frame_index:\n                new_ic._files = [self._frame_index[i][0] for i in fidx]\n                new_ic._frame_index = [self._frame_index[i] for i in fidx]\n            else:\n                new_ic._files = [self._files[i] for i in fidx]\n\n            new_ic._numframes = len(fidx)\n\n            if self.conserve_memory:\n                if self._cached in fidx:\n                    new_ic._cached = fidx.index(self._cached)\n                    new_ic.data = np.copy(self.data)\n                else:\n                    new_ic.data = np.empty(1, dtype=object)\n            else:\n                new_ic.data = self.data[fidx]\n            return new_ic\n", "error_location_char": [986, 989], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def timed_import(", "module_name", ")", ":", "#NEWLINE#", "#INDENT#", "'Imports `module_name` and log how long it took to import it'", "#NEWLINE#", "start", "=", "time", ".", "time", "(", ")", "#NEWLINE#", "module", "=", "importlib", ".", "import_module", "(", "module_name", ")", "#NEWLINE#", "logger", ".", "info", "(", "'Imported %s in %.3f seconds'", ",", "module", ",", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "#NEWLINE#", "return", "module"], "edges": [[6, 7, 7, "enum_FIELD"], [8, 14, 7, "enum_FIELD"], [16, 22, 7, "enum_FIELD"], [25, 31, 7, "enum_FIELD"], [45, 46, 7, "enum_FIELD"], [14, 12, 7, "enum_FIELD"], [22, 20, 7, "enum_FIELD"], [31, 27, 7, "enum_FIELD"], [12, 11, 7, "enum_FIELD"], [20, 19, 7, "enum_FIELD"], [27, 26, 7, "enum_FIELD"], [40, 38, 7, "enum_FIELD"], [40, 41, 7, "enum_FIELD"], [38, 36, 7, "enum_FIELD"], [36, 35, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [23, 2, 10, "enum_LAST_LEXICAL_USE"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [32, 17, 10, "enum_LAST_LEXICAL_USE"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [35, 11, 10, "enum_LAST_LEXICAL_USE"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [41, 9, 10, "enum_LAST_LEXICAL_USE"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 45, 9, "enum_NEXT_SYNTAX"], [46, 32, 10, "enum_LAST_LEXICAL_USE"], [45, 46, 9, "enum_NEXT_SYNTAX"], [6, 8, 1, "enum_CFG_NEXT"], [8, 16, 1, "enum_CFG_NEXT"], [16, 25, 1, "enum_CFG_NEXT"], [25, 45, 1, "enum_CFG_NEXT"], [23, 2, 3, "enum_LAST_WRITE"], [32, 17, 3, "enum_LAST_WRITE"], [35, 11, 2, "enum_LAST_READ"], [41, 9, 3, "enum_LAST_WRITE"], [46, 32, 2, "enum_LAST_READ"], [46, 17, 3, "enum_LAST_WRITE"], [9, 11, 4, "enum_COMPUTED_FROM"], [17, 23, 4, "enum_COMPUTED_FROM"], [17, 19, 4, "enum_COMPUTED_FROM"]], "error_location": 32, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/ICRAR/daliuge.git", "old_path": "dlg/utils.py", "hash": "ca615527deef8c147aaad3c64755b5f3d89b65b8", "code": "def timed_import(module_name: str) -> ModuleType:\n    \"\"\"Imports `module_name` and log how long it took to import it\"\"\"\n    start: float = time.time()\n    module: ModuleType = importlib.import_module(module_name)\n    logger.info('Imported %s in %.3f seconds', module, time.time() - start)\n    return module\n", "rewrite": "ReplaceText(target='module_name' @(59,47)->(59,53))", "error_line": 4, "has_bug": true, "code_full": "import importlib\nimport logging\nimport time\nfrom types import ModuleType\n\nlogger = logging.getLogger(__name__)\n\n\ndef timed_import(module_name: str) -> ModuleType:\n    \"\"\"Imports `module_name` and log how long it took to import it\"\"\"\n    start: float = time.time()\n    module: ModuleType = importlib.import_module(module_name)\n    logger.info('Imported %s in %.3f seconds', module, time.time() - start)\n    return module\n", "error_location_char": [260, 266], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def find_storage_directories(", ")", ":", "#NEWLINE#", "#INDENT#", "home_dir", "=", "pathlib", ".", "Path", "(", "os", ".", "environ", "[", "'HOME'", "]", ")", "#NEWLINE#", "candidates", "=", "[", "]", "#NEWLINE#", "firefox_dir", "=", "(", "(", "home_dir", "/", "'.mozilla'", ")", "/", "'firefox'", ")", "#NEWLINE#", "if", "firefox_dir", ".", "exists", "(", ")", ":", "#NEWLINE#", "#INDENT#", "candidates", ".", "append", "(", "firefox_dir", ".", "iterdir", "(", ")", ")", "#NEWLINE#", "#UNINDENT#", "zotero_dir", "=", "(", "home_dir", "/", "'.zotero'", ")", "#NEWLINE#", "if", "zotero_dir", ".", "exists", "(", ")", ":", "#NEWLINE#", "#INDENT#", "candidates", ".", "append", "(", "zotero_dir", ".", "iterdir", "(", ")", ")", "#NEWLINE#", "#UNINDENT#", "zotero5_dir", "=", "(", "home_dir", "/", "'Zotero/storage'", ")", "#NEWLINE#", "if", "zotero_dir", ".", "exists", "(", ")", ":", "#NEWLINE#", "#INDENT#", "(", "yield", "(", "'default'", ",", "zotero5_dir", ")", ")", "#NEWLINE#", "#UNINDENT#", "candidate_iter", "=", "itertools", ".", "chain", ".", "from_iterable", "(", "candidates", ")", "#NEWLINE#", "for", "fpath", "in", "candidate_iter", ":", "#NEWLINE#", "#INDENT#", "if", "(", "not", "fpath", ".", "is_dir", "(", ")", ")", ":", "#NEWLINE#", "#INDENT#", "continue", "#NEWLINE#", "#UNINDENT#", "match", "=", "PROFILE_PAT", ".", "match", "(", "fpath", ".", "name", ")", "#NEWLINE#", "if", "match", ":", "#NEWLINE#", "#INDENT#", "storage_path", "=", "(", "(", "fpath", "/", "'zotero'", ")", "/", "'storage'", ")", "#NEWLINE#", "if", "storage_path", ".", "exists", "(", ")", ":", "#NEWLINE#", "#INDENT#", "(", "yield", "(", "match", ".", "group", "(", "2", ")", ",", "storage_path", ")", ")"], "edges": [[5, 11, 7, "enum_FIELD"], [19, 22, 7, "enum_FIELD"], [24, 33, 7, "enum_FIELD"], [37, 41, 7, "enum_FIELD"], [57, 62, 7, "enum_FIELD"], [66, 70, 7, "enum_FIELD"], [86, 91, 7, "enum_FIELD"], [95, 99, 7, "enum_FIELD"], [113, 121, 7, "enum_FIELD"], [127, 126, 7, "enum_FIELD"], [127, 128, 7, "enum_FIELD"], [11, 9, 7, "enum_FIELD"], [33, 30, 7, "enum_FIELD"], [33, 34, 7, "enum_FIELD"], [41, 39, 7, "enum_FIELD"], [45, 49, 7, "enum_FIELD"], [62, 61, 7, "enum_FIELD"], [62, 63, 7, "enum_FIELD"], [70, 68, 7, "enum_FIELD"], [74, 78, 7, "enum_FIELD"], [91, 90, 7, "enum_FIELD"], [91, 92, 7, "enum_FIELD"], [99, 97, 7, "enum_FIELD"], [103, 105, 7, "enum_FIELD"], [121, 119, 7, "enum_FIELD"], [132, 134, 7, "enum_FIELD"], [146, 152, 7, "enum_FIELD"], [158, 159, 7, "enum_FIELD"], [9, 8, 7, "enum_FIELD"], [15, 13, 7, "enum_FIELD"], [15, 16, 7, "enum_FIELD"], [30, 29, 7, "enum_FIELD"], [30, 31, 7, "enum_FIELD"], [39, 38, 7, "enum_FIELD"], [49, 47, 7, "enum_FIELD"], [68, 67, 7, "enum_FIELD"], [78, 76, 7, "enum_FIELD"], [97, 96, 7, "enum_FIELD"], [105, 108, 7, "enum_FIELD"], [119, 117, 7, "enum_FIELD"], [134, 138, 7, "enum_FIELD"], [152, 150, 7, "enum_FIELD"], [162, 171, 7, "enum_FIELD"], [175, 179, 7, "enum_FIELD"], [13, 12, 7, "enum_FIELD"], [47, 46, 7, "enum_FIELD"], [53, 51, 7, "enum_FIELD"], [76, 75, 7, "enum_FIELD"], [82, 80, 7, "enum_FIELD"], [117, 116, 7, "enum_FIELD"], [138, 136, 7, "enum_FIELD"], [150, 149, 7, "enum_FIELD"], [154, 153, 7, "enum_FIELD"], [171, 168, 7, "enum_FIELD"], [171, 172, 7, "enum_FIELD"], [179, 177, 7, "enum_FIELD"], [183, 185, 7, "enum_FIELD"], [51, 50, 7, "enum_FIELD"], [80, 79, 7, "enum_FIELD"], [136, 135, 7, "enum_FIELD"], [168, 167, 7, "enum_FIELD"], [168, 169, 7, "enum_FIELD"], [177, 176, 7, "enum_FIELD"], [185, 193, 7, "enum_FIELD"], [190, 188, 7, "enum_FIELD"], [188, 187, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [29, 6, 10, "enum_LAST_LEXICAL_USE"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 37, 9, "enum_NEXT_SYNTAX"], [38, 25, 10, "enum_LAST_LEXICAL_USE"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 45, 9, "enum_NEXT_SYNTAX"], [46, 20, 10, "enum_LAST_LEXICAL_USE"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [50, 38, 10, "enum_LAST_LEXICAL_USE"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [61, 29, 10, "enum_LAST_LEXICAL_USE"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 66, 9, "enum_NEXT_SYNTAX"], [67, 58, 10, "enum_LAST_LEXICAL_USE"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 74, 9, "enum_NEXT_SYNTAX"], [75, 46, 10, "enum_LAST_LEXICAL_USE"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [79, 67, 10, "enum_LAST_LEXICAL_USE"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [90, 61, 10, "enum_LAST_LEXICAL_USE"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 95, 9, "enum_NEXT_SYNTAX"], [96, 79, 10, "enum_LAST_LEXICAL_USE"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [109, 87, 10, "enum_LAST_LEXICAL_USE"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [122, 75, 10, "enum_LAST_LEXICAL_USE"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [128, 114, 10, "enum_LAST_LEXICAL_USE"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [135, 126, 10, "enum_LAST_LEXICAL_USE"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 144, 9, "enum_NEXT_SYNTAX"], [144, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [153, 135, 10, "enum_LAST_LEXICAL_USE"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 158, 9, "enum_NEXT_SYNTAX"], [159, 147, 10, "enum_LAST_LEXICAL_USE"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [167, 153, 10, "enum_LAST_LEXICAL_USE"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 175, 9, "enum_NEXT_SYNTAX"], [176, 163, 10, "enum_LAST_LEXICAL_USE"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 183, 9, "enum_NEXT_SYNTAX"], [183, 184, 9, "enum_NEXT_SYNTAX"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [187, 159, 10, "enum_LAST_LEXICAL_USE"], [186, 187, 9, "enum_NEXT_SYNTAX"], [187, 188, 9, "enum_NEXT_SYNTAX"], [188, 189, 9, "enum_NEXT_SYNTAX"], [189, 190, 9, "enum_NEXT_SYNTAX"], [190, 191, 9, "enum_NEXT_SYNTAX"], [191, 192, 9, "enum_NEXT_SYNTAX"], [192, 193, 9, "enum_NEXT_SYNTAX"], [194, 176, 10, "enum_LAST_LEXICAL_USE"], [193, 194, 9, "enum_NEXT_SYNTAX"], [194, 195, 9, "enum_NEXT_SYNTAX"], [195, 196, 9, "enum_NEXT_SYNTAX"], [5, 19, 1, "enum_CFG_NEXT"], [19, 24, 1, "enum_CFG_NEXT"], [24, 41, 1, "enum_CFG_NEXT"], [41, 45, 1, "enum_CFG_NEXT"], [41, 57, 1, "enum_CFG_NEXT"], [45, 57, 1, "enum_CFG_NEXT"], [57, 70, 1, "enum_CFG_NEXT"], [70, 86, 1, "enum_CFG_NEXT"], [70, 74, 1, "enum_CFG_NEXT"], [74, 86, 1, "enum_CFG_NEXT"], [86, 99, 1, "enum_CFG_NEXT"], [99, 103, 1, "enum_CFG_NEXT"], [99, 113, 1, "enum_CFG_NEXT"], [103, 113, 1, "enum_CFG_NEXT"], [113, 128, 1, "enum_CFG_NEXT"], [128, 126, 1, "enum_CFG_NEXT"], [126, 134, 1, "enum_CFG_NEXT"], [134, 146, 1, "enum_CFG_NEXT"], [134, 126, 1, "enum_CFG_NEXT"], [146, 159, 1, "enum_CFG_NEXT"], [159, 162, 1, "enum_CFG_NEXT"], [159, 126, 1, "enum_CFG_NEXT"], [162, 179, 1, "enum_CFG_NEXT"], [179, 183, 1, "enum_CFG_NEXT"], [179, 126, 1, "enum_CFG_NEXT"], [183, 126, 1, "enum_CFG_NEXT"], [29, 6, 3, "enum_LAST_WRITE"], [38, 25, 3, "enum_LAST_WRITE"], [46, 20, 3, "enum_LAST_WRITE"], [50, 38, 2, "enum_LAST_READ"], [50, 25, 3, "enum_LAST_WRITE"], [61, 29, 2, "enum_LAST_READ"], [61, 6, 3, "enum_LAST_WRITE"], [67, 58, 3, "enum_LAST_WRITE"], [75, 46, 2, "enum_LAST_READ"], [75, 20, 3, "enum_LAST_WRITE"], [79, 67, 2, "enum_LAST_READ"], [79, 58, 3, "enum_LAST_WRITE"], [90, 61, 2, "enum_LAST_READ"], [90, 6, 3, "enum_LAST_WRITE"], [96, 67, 2, "enum_LAST_READ"], [96, 79, 2, "enum_LAST_READ"], [96, 58, 3, "enum_LAST_WRITE"], [109, 87, 3, "enum_LAST_WRITE"], [122, 75, 2, "enum_LAST_READ"], [122, 46, 2, "enum_LAST_READ"], [122, 20, 3, "enum_LAST_WRITE"], [128, 114, 3, "enum_LAST_WRITE"], [126, 153, 2, "enum_LAST_READ"], [126, 135, 2, "enum_LAST_READ"], [126, 167, 2, "enum_LAST_READ"], [126, 126, 3, "enum_LAST_WRITE"], [135, 153, 2, "enum_LAST_READ"], [135, 135, 2, "enum_LAST_READ"], [135, 167, 2, "enum_LAST_READ"], [135, 126, 3, "enum_LAST_WRITE"], [149, 149, 2, "enum_LAST_READ"], [153, 135, 2, "enum_LAST_READ"], [153, 126, 3, "enum_LAST_WRITE"], [147, 159, 2, "enum_LAST_READ"], [147, 187, 2, "enum_LAST_READ"], [147, 147, 3, "enum_LAST_WRITE"], [159, 159, 2, "enum_LAST_READ"], [159, 187, 2, "enum_LAST_READ"], [159, 147, 3, "enum_LAST_WRITE"], [167, 153, 2, "enum_LAST_READ"], [167, 126, 3, "enum_LAST_WRITE"], [163, 194, 2, "enum_LAST_READ"], [163, 176, 2, "enum_LAST_READ"], [163, 163, 3, "enum_LAST_WRITE"], [176, 194, 2, "enum_LAST_READ"], [176, 176, 2, "enum_LAST_READ"], [176, 163, 3, "enum_LAST_WRITE"], [187, 159, 2, "enum_LAST_READ"], [187, 147, 3, "enum_LAST_WRITE"], [194, 176, 2, "enum_LAST_READ"], [194, 163, 3, "enum_LAST_WRITE"], [6, 8, 4, "enum_COMPUTED_FROM"], [6, 12, 4, "enum_COMPUTED_FROM"], [25, 29, 4, "enum_COMPUTED_FROM"], [58, 61, 4, "enum_COMPUTED_FROM"], [87, 90, 4, "enum_COMPUTED_FROM"], [114, 122, 4, "enum_COMPUTED_FROM"], [114, 116, 4, "enum_COMPUTED_FROM"], [147, 149, 4, "enum_COMPUTED_FROM"], [147, 153, 4, "enum_COMPUTED_FROM"], [163, 167, 4, "enum_COMPUTED_FROM"]], "error_location": 96, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/jbaiter/zotero-cli.git", "old_path": "zotero_cli/cli.py", "hash": "4e1f926aa016e5a081609e24b8498d94139949ad", "code": "def find_storage_directories() -> Generator[Tuple[str, pathlib.Path], None, None]:\n    home_dir: pathlib.Path = pathlib.Path(os.environ['HOME'])\n    candidates: List[Generator[pathlib.Path, None, None]] = []\n    firefox_dir: pathlib.Path = home_dir/\".mozilla\"/\"firefox\"\n    if firefox_dir.exists():\n        candidates.append(firefox_dir.iterdir())\n    zotero_dir: pathlib.Path = home_dir/\".zotero\"\n    if zotero_dir.exists():\n        candidates.append(zotero_dir.iterdir())\n    zotero5_dir: pathlib.Path = home_dir/\"Zotero/storage\"\n    if zotero_dir.exists():\n        yield ('default', zotero5_dir)\n    candidate_iter: Iterator = itertools.chain.from_iterable(candidates)\n    for fpath in candidate_iter:\n        if not fpath.is_dir():\n            continue\n        match: Optional[re.Match] = PROFILE_PAT.match(fpath.name)\n        if match:\n            storage_path: pathlib.Path = fpath/\"zotero\"/\"storage\"\n            if storage_path.exists():\n                yield (match.group(2), storage_path)\n", "rewrite": "ReplaceText(target='zotero5_dir' @(48,7)->(48,17))", "error_line": 10, "has_bug": true, "code_full": "import itertools\nimport os\nimport pathlib\nimport re\nfrom typing import Generator, Iterator, List, Optional, Tuple\n\nPROFILE_PAT: re.Pattern = re.compile(r'')\n\n\ndef find_storage_directories() -> Generator[Tuple[str, pathlib.Path], None, None]:\n    home_dir: pathlib.Path = pathlib.Path(os.environ['HOME'])\n    candidates: List[Generator[pathlib.Path, None, None]] = []\n    firefox_dir: pathlib.Path = home_dir/\".mozilla\"/\"firefox\"\n    if firefox_dir.exists():\n        candidates.append(firefox_dir.iterdir())\n    zotero_dir: pathlib.Path = home_dir/\".zotero\"\n    if zotero_dir.exists():\n        candidates.append(zotero_dir.iterdir())\n    zotero5_dir: pathlib.Path = home_dir/\"Zotero/storage\"\n    if zotero_dir.exists():\n        yield ('default', zotero5_dir)\n    candidate_iter: Iterator = itertools.chain.from_iterable(candidates)\n    for fpath in candidate_iter:\n        if not fpath.is_dir():\n            continue\n        match: Optional[re.Match] = PROFILE_PAT.match(fpath.name)\n        if match:\n            storage_path: pathlib.Path = fpath/\"zotero\"/\"storage\"\n            if storage_path.exists():\n                yield (match.group(2), storage_path)\n", "error_location_char": [539, 549], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def _poll(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "for", "item", "in", "self", ".", "coins", ":", "#NEWLINE#", "#INDENT#", "value", "=", "self", ".", "wrapper", ".", "handle", "(", "dict", "(", "self", ".", "config", ".", "items", "(", "item", ")", ")", ")", "#NEWLINE#", "if", "value", ":", "#NEWLINE#", "#INDENT#", "setattr", "(", "self", ",", "item", ",", "value", ")", "#NEWLINE#", "self", ".", "fields", ".", "add", "(", "value", ")"], "edges": [[9, 8, 7, "enum_FIELD"], [9, 11, 7, "enum_FIELD"], [11, 10, 7, "enum_FIELD"], [15, 23, 7, "enum_FIELD"], [37, 38, 7, "enum_FIELD"], [23, 21, 7, "enum_FIELD"], [41, 45, 7, "enum_FIELD"], [50, 56, 7, "enum_FIELD"], [21, 19, 7, "enum_FIELD"], [25, 24, 7, "enum_FIELD"], [45, 42, 7, "enum_FIELD"], [56, 54, 7, "enum_FIELD"], [19, 18, 7, "enum_FIELD"], [31, 29, 7, "enum_FIELD"], [54, 52, 7, "enum_FIELD"], [29, 27, 7, "enum_FIELD"], [52, 51, 7, "enum_FIELD"], [27, 26, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [10, 2, 10, "enum_LAST_LEXICAL_USE"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [18, 10, 10, "enum_LAST_LEXICAL_USE"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [26, 18, 10, "enum_LAST_LEXICAL_USE"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [32, 8, 10, "enum_LAST_LEXICAL_USE"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 37, 9, "enum_NEXT_SYNTAX"], [38, 16, 10, "enum_LAST_LEXICAL_USE"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [44, 26, 10, "enum_LAST_LEXICAL_USE"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [46, 32, 10, "enum_LAST_LEXICAL_USE"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [48, 38, 10, "enum_LAST_LEXICAL_USE"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [51, 44, 10, "enum_LAST_LEXICAL_USE"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [57, 48, 10, "enum_LAST_LEXICAL_USE"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [11, 8, 1, "enum_CFG_NEXT"], [8, 15, 1, "enum_CFG_NEXT"], [15, 38, 1, "enum_CFG_NEXT"], [38, 8, 1, "enum_CFG_NEXT"], [38, 41, 1, "enum_CFG_NEXT"], [41, 50, 1, "enum_CFG_NEXT"], [50, 8, 1, "enum_CFG_NEXT"], [10, 2, 3, "enum_LAST_WRITE"], [8, 32, 2, "enum_LAST_READ"], [8, 46, 2, "enum_LAST_READ"], [8, 8, 3, "enum_LAST_WRITE"], [18, 10, 2, "enum_LAST_READ"], [18, 26, 2, "enum_LAST_READ"], [18, 51, 2, "enum_LAST_READ"], [18, 2, 3, "enum_LAST_WRITE"], [24, 24, 2, "enum_LAST_READ"], [26, 18, 2, "enum_LAST_READ"], [26, 2, 3, "enum_LAST_WRITE"], [32, 32, 2, "enum_LAST_READ"], [32, 46, 2, "enum_LAST_READ"], [32, 8, 3, "enum_LAST_WRITE"], [16, 57, 2, "enum_LAST_READ"], [16, 38, 2, "enum_LAST_READ"], [16, 16, 3, "enum_LAST_WRITE"], [38, 57, 2, "enum_LAST_READ"], [38, 38, 2, "enum_LAST_READ"], [38, 16, 3, "enum_LAST_WRITE"], [42, 42, 2, "enum_LAST_READ"], [44, 26, 2, "enum_LAST_READ"], [44, 2, 3, "enum_LAST_WRITE"], [46, 32, 2, "enum_LAST_READ"], [46, 8, 3, "enum_LAST_WRITE"], [48, 38, 2, "enum_LAST_READ"], [48, 16, 3, "enum_LAST_WRITE"], [51, 44, 2, "enum_LAST_READ"], [51, 2, 3, "enum_LAST_WRITE"], [57, 48, 2, "enum_LAST_READ"], [57, 16, 3, "enum_LAST_WRITE"], [16, 24, 4, "enum_COMPUTED_FROM"], [16, 18, 4, "enum_COMPUTED_FROM"], [16, 32, 4, "enum_COMPUTED_FROM"], [16, 26, 4, "enum_COMPUTED_FROM"]], "error_location": 57, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/c00w/btcnet_info.git", "old_path": "difficulty_sites.py", "hash": "2501fff74e5c798da1bf15ebf40006198d1f1198", "code": "def _poll(self):\n    for item in self.coins:\n        value: Any = self.wrapper.handle(dict(self.config.items(item)))\n        if value:\n            setattr(self, item, value)\n            self.fields.add(value)\n", "rewrite": "ReplaceText(target='item' @(49,32)->(49,37))", "error_line": 5, "has_bug": true, "code_full": "from typing import Any, Dict, Set\n\n\nclass Config:\n    def items(self, item: str) -> Dict[str, Any]:\n        return {}\n\n\nclass Wrapper:\n    def handle(self, config: Dict[str, Any]) -> Any:\n        return None\n\n\nclass Site:\n    coins: Set[Any]\n    fields: Set[str]\n    wrapper: Wrapper\n    config: Config\n\n    def _poll(self):\n        for item in self.coins:\n            value: Any = self.wrapper.handle(dict(self.config.items(item)))\n            if value:\n                setattr(self, item, value)\n                self.fields.add(value)\n", "error_location_char": [202, 207], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def __setitem__(", "self", ",", "key", ",", "value", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "not", "isinstance", "(", "key", ",", "str", ")", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "KeyError", "(", "'Key must be a string'", ")", "#NEWLINE#", "#UNINDENT#", "if", "(", "key", "in", "self", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "KeyError", "(", "'Key already exists'", ")", "#NEWLINE#", "#UNINDENT#", "super", "(", ")", ".", "__setitem__", "(", "key", ",", "(", "len", "(", "key", ")", ",", "value", ")", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [11, 13, 7, "enum_FIELD"], [31, 34, 7, "enum_FIELD"], [46, 54, 7, "enum_FIELD"], [13, 17, 7, "enum_FIELD"], [24, 26, 7, "enum_FIELD"], [34, 33, 7, "enum_FIELD"], [40, 42, 7, "enum_FIELD"], [54, 50, 7, "enum_FIELD"], [17, 14, 7, "enum_FIELD"], [26, 25, 7, "enum_FIELD"], [42, 41, 7, "enum_FIELD"], [50, 48, 7, "enum_FIELD"], [48, 47, 7, "enum_FIELD"], [57, 56, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [16, 4, 10, "enum_LAST_LEXICAL_USE"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [33, 16, 10, "enum_LAST_LEXICAL_USE"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [35, 2, 10, "enum_LAST_LEXICAL_USE"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 40, 9, "enum_NEXT_SYNTAX"], [41, 25, 10, "enum_LAST_LEXICAL_USE"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [53, 33, 10, "enum_LAST_LEXICAL_USE"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [58, 53, 10, "enum_LAST_LEXICAL_USE"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [61, 6, 10, "enum_LAST_LEXICAL_USE"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [3, 13, 1, "enum_CFG_NEXT"], [13, 34, 1, "enum_CFG_NEXT"], [13, 24, 1, "enum_CFG_NEXT"], [34, 40, 1, "enum_CFG_NEXT"], [34, 46, 1, "enum_CFG_NEXT"], [16, 4, 3, "enum_LAST_WRITE"], [33, 16, 2, "enum_LAST_READ"], [33, 4, 3, "enum_LAST_WRITE"], [35, 2, 3, "enum_LAST_WRITE"], [53, 33, 2, "enum_LAST_READ"], [53, 4, 3, "enum_LAST_WRITE"], [58, 53, 2, "enum_LAST_READ"], [58, 4, 3, "enum_LAST_WRITE"], [61, 6, 3, "enum_LAST_WRITE"]], "error_location": 58, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/drakantas/Ryoken.git", "old_path": "ryoken/collections.py", "hash": "fb88049c62556d929525509f5e9c192ae2fc6f3b", "code": "def __setitem__(self, key: str, value: Any):\n    if not isinstance(key, str):\n        raise KeyError('Key must be a string')\n\n    if key in self:\n        raise KeyError('Key already exists')\n\n    super().__setitem__(key, (len(key), value))\n", "rewrite": "ReplaceText(target='value' @(32,38)->(32,41))", "error_line": 7, "has_bug": true, "code_full": "from typing import Any\n\n\nclass StrLengthDict(dict):\n    def __setitem__(self, key: str, value: Any):\n        if not isinstance(key, str):\n            raise KeyError('Key must be a string')\n\n        if key in self:\n            raise KeyError('Key already exists')\n\n        super().__setitem__(key, (len(key), value))\n", "error_location_char": [226, 229], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def typeify_templates(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "' Assign atom types to atom names in templates '", "#NEWLINE#", "from", "parmed.modeller", "import", "ResidueTemplateContainer", ",", "ResidueTemplate", "#NEWLINE#", "for", "(", "name", ",", "residue", ")", "in", "iteritems", "(", "self", ".", "residues", ")", ":", "#NEWLINE#", "#INDENT#", "if", "isinstance", "(", "residue", ",", "ResidueTemplateContainer", ")", ":", "#NEWLINE#", "#INDENT#", "for", "res", "in", "residue", ":", "#NEWLINE#", "#INDENT#", "for", "atom", "in", "residue", ":", "#NEWLINE#", "#INDENT#", "atom", ".", "atom_type", "=", "self", ".", "atom_types", "[", "atom", ".", "type", "]", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "assert", "isinstance", "(", "residue", ",", "ResidueTemplate", ")", ",", "'Wrong type!'", "#NEWLINE#", "for", "atom", "in", "residue", ":", "#NEWLINE#", "#INDENT#", "atom", ".", "atom_type", "=", "self", ".", "atom_types", "[", "atom", ".", "type", "]"], "edges": [[6, 7, 7, "enum_FIELD"], [22, 19, 7, "enum_FIELD"], [22, 24, 7, "enum_FIELD"], [24, 23, 7, "enum_FIELD"], [39, 36, 7, "enum_FIELD"], [26, 25, 7, "enum_FIELD"], [36, 33, 7, "enum_FIELD"], [44, 43, 7, "enum_FIELD"], [44, 45, 7, "enum_FIELD"], [76, 80, 7, "enum_FIELD"], [76, 84, 7, "enum_FIELD"], [88, 87, 7, "enum_FIELD"], [88, 89, 7, "enum_FIELD"], [51, 50, 7, "enum_FIELD"], [51, 52, 7, "enum_FIELD"], [80, 77, 7, "enum_FIELD"], [92, 100, 7, "enum_FIELD"], [55, 63, 7, "enum_FIELD"], [94, 93, 7, "enum_FIELD"], [100, 98, 7, "enum_FIELD"], [100, 102, 7, "enum_FIELD"], [57, 56, 7, "enum_FIELD"], [63, 61, 7, "enum_FIELD"], [63, 65, 7, "enum_FIELD"], [98, 97, 7, "enum_FIELD"], [102, 101, 7, "enum_FIELD"], [61, 60, 7, "enum_FIELD"], [65, 64, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [25, 2, 10, "enum_LAST_LEXICAL_USE"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [35, 20, 10, "enum_LAST_LEXICAL_USE"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [45, 35, 10, "enum_LAST_LEXICAL_USE"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [52, 45, 10, "enum_LAST_LEXICAL_USE"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 55, 9, "enum_NEXT_SYNTAX"], [56, 50, 10, "enum_LAST_LEXICAL_USE"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [60, 25, 10, "enum_LAST_LEXICAL_USE"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [64, 56, 10, "enum_LAST_LEXICAL_USE"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 76, 9, "enum_NEXT_SYNTAX"], [77, 33, 10, "enum_LAST_LEXICAL_USE"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [79, 52, 10, "enum_LAST_LEXICAL_USE"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 86, 9, "enum_NEXT_SYNTAX"], [87, 64, 10, "enum_LAST_LEXICAL_USE"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [89, 79, 10, "enum_LAST_LEXICAL_USE"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 92, 9, "enum_NEXT_SYNTAX"], [93, 87, 10, "enum_LAST_LEXICAL_USE"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [97, 60, 10, "enum_LAST_LEXICAL_USE"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [101, 93, 10, "enum_LAST_LEXICAL_USE"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [6, 10, 1, "enum_CFG_NEXT"], [10, 24, 1, "enum_CFG_NEXT"], [24, 19, 1, "enum_CFG_NEXT"], [19, 36, 1, "enum_CFG_NEXT"], [36, 76, 1, "enum_CFG_NEXT"], [36, 45, 1, "enum_CFG_NEXT"], [45, 43, 1, "enum_CFG_NEXT"], [43, 19, 1, "enum_CFG_NEXT"], [43, 52, 1, "enum_CFG_NEXT"], [52, 50, 1, "enum_CFG_NEXT"], [50, 43, 1, "enum_CFG_NEXT"], [50, 55, 1, "enum_CFG_NEXT"], [55, 50, 1, "enum_CFG_NEXT"], [76, 89, 1, "enum_CFG_NEXT"], [89, 87, 1, "enum_CFG_NEXT"], [87, 19, 1, "enum_CFG_NEXT"], [87, 92, 1, "enum_CFG_NEXT"], [92, 87, 1, "enum_CFG_NEXT"], [25, 2, 3, "enum_LAST_WRITE"], [18, 18, 3, "enum_LAST_WRITE"], [20, 45, 2, "enum_LAST_READ"], [20, 52, 2, "enum_LAST_READ"], [20, 89, 2, "enum_LAST_READ"], [20, 20, 3, "enum_LAST_WRITE"], [33, 77, 2, "enum_LAST_READ"], [33, 33, 2, "enum_LAST_READ"], [35, 45, 2, "enum_LAST_READ"], [35, 52, 2, "enum_LAST_READ"], [35, 89, 2, "enum_LAST_READ"], [35, 20, 3, "enum_LAST_WRITE"], [37, 37, 2, "enum_LAST_READ"], [45, 35, 2, "enum_LAST_READ"], [45, 20, 3, "enum_LAST_WRITE"], [43, 43, 3, "enum_LAST_WRITE"], [52, 45, 2, "enum_LAST_READ"], [52, 52, 2, "enum_LAST_READ"], [52, 20, 3, "enum_LAST_WRITE"], [50, 56, 2, "enum_LAST_READ"], [50, 93, 2, "enum_LAST_READ"], [50, 50, 3, "enum_LAST_WRITE"], [50, 87, 3, "enum_LAST_WRITE"], [60, 60, 2, "enum_LAST_READ"], [60, 25, 2, "enum_LAST_READ"], [60, 97, 2, "enum_LAST_READ"], [60, 2, 3, "enum_LAST_WRITE"], [64, 56, 2, "enum_LAST_READ"], [64, 93, 2, "enum_LAST_READ"], [64, 50, 3, "enum_LAST_WRITE"], [56, 64, 2, "enum_LAST_READ"], [56, 50, 3, "enum_LAST_WRITE"], [77, 33, 2, "enum_LAST_READ"], [79, 35, 2, "enum_LAST_READ"], [79, 20, 3, "enum_LAST_WRITE"], [81, 81, 2, "enum_LAST_READ"], [89, 79, 2, "enum_LAST_READ"], [89, 20, 3, "enum_LAST_WRITE"], [87, 56, 2, "enum_LAST_READ"], [87, 93, 2, "enum_LAST_READ"], [87, 50, 3, "enum_LAST_WRITE"], [87, 87, 3, "enum_LAST_WRITE"], [97, 97, 2, "enum_LAST_READ"], [97, 60, 2, "enum_LAST_READ"], [97, 25, 2, "enum_LAST_READ"], [97, 2, 3, "enum_LAST_WRITE"], [101, 56, 2, "enum_LAST_READ"], [101, 93, 2, "enum_LAST_READ"], [101, 87, 3, "enum_LAST_WRITE"], [93, 101, 2, "enum_LAST_READ"], [93, 87, 3, "enum_LAST_WRITE"], [94, 97, 4, "enum_COMPUTED_FROM"], [94, 101, 4, "enum_COMPUTED_FROM"], [57, 60, 4, "enum_COMPUTED_FROM"], [57, 64, 4, "enum_COMPUTED_FROM"]], "error_location": 52, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/parmed/ParmEd.git", "old_path": "parmed/parameters.py", "hash": "8f1dc98d485ea57e4046494ad1e6f84cfbd17f4f", "code": "def typeify_templates(self):\n    \"\"\" Assign atom types to atom names in templates \"\"\"\n    from parmed.modeller import ResidueTemplate, ResidueTemplateContainer\n    for name, residue in iteritems(self.residues):\n        if isinstance(residue, ResidueTemplateContainer):\n            for res in residue:\n                for atom in residue:\n                    atom.atom_type = self.atom_types[atom.type]\n        else:\n            assert isinstance(residue, ResidueTemplate), 'Wrong type!'\n            for atom in residue:\n                atom.atom_type = self.atom_types[atom.type]\n", "rewrite": "ReplaceText(target='res' @(452,32)->(452,39))", "error_line": 6, "has_bug": true, "code_full": "from typing import Any, Dict, List, Tuple, Union\n\n\ndef iteritems(d: Dict) -> List[Tuple]:\n    return []\n\nclass ParameterSet:\n    residues: Dict\n    atom_types: Dict\n    \n    def typeify_templates(self):\n        \"\"\" Assign atom types to atom names in templates \"\"\"\n        from parmed.modeller import ResidueTemplate, ResidueTemplateContainer\n        for name, residue in iteritems(self.residues):\n            if isinstance(residue, ResidueTemplateContainer):\n                for res in residue:\n                    for atom in residue:\n                        atom.atom_type = self.atom_types[atom.type]\n            else:\n                assert isinstance(residue, ResidueTemplate), 'Wrong type!'\n                for atom in residue:\n                    atom.atom_type = self.atom_types[atom.type]\n", "error_location_char": [329, 336], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def get_points(", "areas", ",", "sections", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Parameters\\n    ----------\\n    areas : string or list\\n        Brain areas to find\\n\\n    sections : list (optional)\\n        Sections in which to find areas\\n\\n\\n    Returns\\n    -------\\n    pts : dict or list\\n        list of points if areas was a string\\n        dict with keys = areas and values = lists of points\\n    '", "#NEWLINE#", "if", "isinstance", "(", "areas", ",", "str", ")", ":", "#NEWLINE#", "#INDENT#", "areas", "=", "[", "areas", "]", "#NEWLINE#", "#UNINDENT#", "if", "(", "sections", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "sections", "=", "[", "section", ".", "load", "(", "si", ",", "areas", "=", "areas", ")", "for", "si", "in", "default_indices", "]", "#NEWLINE#", "#UNINDENT#", "pts", "=", "{", "}", "#NEWLINE#", "for", "area", "in", "areas", ":", "#NEWLINE#", "#INDENT#", "pts", "[", "area", "]", "=", "[", "]", "#NEWLINE#", "for", "s", "in", "sections", ":", "#NEWLINE#", "#INDENT#", "pts", "[", "area", "]", "+=", "[", "[", "p", ".", "x", ",", "p", ".", "y", ",", "s", ".", "get_ap", "(", ")", "]", "for", "p", "in", "s", ".", "find_area", "(", "area", ",", "'skull'", ")", "]", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "if", "(", "len", "(", "areas", ")", "==", "1", ")", ":", "#NEWLINE#", "#INDENT#", "return", "pts", "[", "area", "[", "0", "]", "]", "#NEWLINE#", "#UNINDENT#", "return", "pts"], "edges": [[1, 3, 7, "enum_FIELD"], [10, 11, 7, "enum_FIELD"], [13, 17, 7, "enum_FIELD"], [30, 33, 7, "enum_FIELD"], [58, 61, 7, "enum_FIELD"], [66, 65, 7, "enum_FIELD"], [66, 67, 7, "enum_FIELD"], [122, 128, 7, "enum_FIELD"], [144, 145, 7, "enum_FIELD"], [17, 14, 7, "enum_FIELD"], [22, 25, 7, "enum_FIELD"], [33, 32, 7, "enum_FIELD"], [38, 41, 7, "enum_FIELD"], [70, 76, 7, "enum_FIELD"], [81, 80, 7, "enum_FIELD"], [81, 82, 7, "enum_FIELD"], [128, 125, 7, "enum_FIELD"], [134, 136, 7, "enum_FIELD"], [41, 47, 7, "enum_FIELD"], [72, 71, 7, "enum_FIELD"], [72, 73, 7, "enum_FIELD"], [85, 87, 7, "enum_FIELD"], [85, 91, 7, "enum_FIELD"], [125, 124, 7, "enum_FIELD"], [136, 135, 7, "enum_FIELD"], [136, 138, 7, "enum_FIELD"], [47, 43, 7, "enum_FIELD"], [52, 53, 7, "enum_FIELD"], [52, 55, 7, "enum_FIELD"], [87, 86, 7, "enum_FIELD"], [87, 88, 7, "enum_FIELD"], [91, 96, 7, "enum_FIELD"], [138, 137, 7, "enum_FIELD"], [138, 139, 7, "enum_FIELD"], [43, 42, 7, "enum_FIELD"], [48, 50, 7, "enum_FIELD"], [107, 108, 7, "enum_FIELD"], [107, 115, 7, "enum_FIELD"], [94, 93, 7, "enum_FIELD"], [98, 97, 7, "enum_FIELD"], [104, 102, 7, "enum_FIELD"], [115, 111, 7, "enum_FIELD"], [102, 101, 7, "enum_FIELD"], [111, 110, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [16, 2, 10, "enum_LAST_LEXICAL_USE"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 22, 9, "enum_NEXT_SYNTAX"], [23, 16, 10, "enum_LAST_LEXICAL_USE"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [26, 23, 10, "enum_LAST_LEXICAL_USE"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [32, 4, 10, "enum_LAST_LEXICAL_USE"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 38, 9, "enum_NEXT_SYNTAX"], [39, 32, 10, "enum_LAST_LEXICAL_USE"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [50, 26, 10, "enum_LAST_LEXICAL_USE"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [53, 46, 10, "enum_LAST_LEXICAL_USE"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [67, 50, 10, "enum_LAST_LEXICAL_USE"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 70, 9, "enum_NEXT_SYNTAX"], [71, 59, 10, "enum_LAST_LEXICAL_USE"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [73, 65, 10, "enum_LAST_LEXICAL_USE"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [82, 39, 10, "enum_LAST_LEXICAL_USE"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 85, 9, "enum_NEXT_SYNTAX"], [86, 71, 10, "enum_LAST_LEXICAL_USE"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [88, 73, 10, "enum_LAST_LEXICAL_USE"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [97, 93, 10, "enum_LAST_LEXICAL_USE"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [101, 80, 10, "enum_LAST_LEXICAL_USE"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [108, 97, 10, "enum_LAST_LEXICAL_USE"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [110, 101, 10, "enum_LAST_LEXICAL_USE"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [114, 88, 10, "enum_LAST_LEXICAL_USE"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [126, 67, 10, "enum_LAST_LEXICAL_USE"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 134, 9, "enum_NEXT_SYNTAX"], [135, 86, 10, "enum_LAST_LEXICAL_USE"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [137, 114, 10, "enum_LAST_LEXICAL_USE"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 144, 9, "enum_NEXT_SYNTAX"], [145, 135, 10, "enum_LAST_LEXICAL_USE"], [144, 145, 9, "enum_NEXT_SYNTAX"], [6, 1, 1, "enum_CFG_NEXT"], [3, 10, 1, "enum_CFG_NEXT"], [10, 17, 1, "enum_CFG_NEXT"], [17, 33, 1, "enum_CFG_NEXT"], [17, 22, 1, "enum_CFG_NEXT"], [22, 33, 1, "enum_CFG_NEXT"], [33, 58, 1, "enum_CFG_NEXT"], [33, 38, 1, "enum_CFG_NEXT"], [38, 58, 1, "enum_CFG_NEXT"], [58, 67, 1, "enum_CFG_NEXT"], [67, 65, 1, "enum_CFG_NEXT"], [65, 70, 1, "enum_CFG_NEXT"], [65, 128, 1, "enum_CFG_NEXT"], [70, 82, 1, "enum_CFG_NEXT"], [82, 80, 1, "enum_CFG_NEXT"], [80, 65, 1, "enum_CFG_NEXT"], [80, 85, 1, "enum_CFG_NEXT"], [85, 80, 1, "enum_CFG_NEXT"], [128, 144, 1, "enum_CFG_NEXT"], [128, 134, 1, "enum_CFG_NEXT"], [16, 2, 3, "enum_LAST_WRITE"], [26, 16, 2, "enum_LAST_READ"], [26, 2, 3, "enum_LAST_WRITE"], [23, 26, 2, "enum_LAST_READ"], [23, 2, 3, "enum_LAST_WRITE"], [32, 4, 3, "enum_LAST_WRITE"], [50, 16, 2, "enum_LAST_READ"], [50, 26, 2, "enum_LAST_READ"], [50, 2, 3, "enum_LAST_WRITE"], [50, 23, 3, "enum_LAST_WRITE"], [53, 46, 2, "enum_LAST_READ"], [39, 32, 2, "enum_LAST_READ"], [39, 4, 3, "enum_LAST_WRITE"], [67, 50, 2, "enum_LAST_READ"], [67, 16, 2, "enum_LAST_READ"], [67, 26, 2, "enum_LAST_READ"], [67, 2, 3, "enum_LAST_WRITE"], [67, 23, 3, "enum_LAST_WRITE"], [65, 73, 2, "enum_LAST_READ"], [65, 88, 2, "enum_LAST_READ"], [65, 65, 3, "enum_LAST_WRITE"], [71, 71, 2, "enum_LAST_READ"], [71, 86, 2, "enum_LAST_READ"], [71, 59, 3, "enum_LAST_WRITE"], [73, 73, 2, "enum_LAST_READ"], [73, 88, 2, "enum_LAST_READ"], [73, 65, 3, "enum_LAST_WRITE"], [82, 32, 2, "enum_LAST_READ"], [82, 82, 2, "enum_LAST_READ"], [82, 39, 3, "enum_LAST_WRITE"], [82, 4, 3, "enum_LAST_WRITE"], [80, 110, 2, "enum_LAST_READ"], [80, 80, 3, "enum_LAST_WRITE"], [93, 97, 2, "enum_LAST_READ"], [93, 108, 3, "enum_LAST_WRITE"], [97, 93, 2, "enum_LAST_READ"], [97, 108, 3, "enum_LAST_WRITE"], [101, 110, 2, "enum_LAST_READ"], [101, 80, 3, "enum_LAST_WRITE"], [108, 97, 2, "enum_LAST_READ"], [108, 108, 3, "enum_LAST_WRITE"], [110, 101, 2, "enum_LAST_READ"], [110, 80, 3, "enum_LAST_WRITE"], [114, 73, 2, "enum_LAST_READ"], [114, 88, 2, "enum_LAST_READ"], [114, 65, 3, "enum_LAST_WRITE"], [86, 71, 2, "enum_LAST_READ"], [86, 86, 2, "enum_LAST_READ"], [86, 59, 3, "enum_LAST_WRITE"], [88, 114, 2, "enum_LAST_READ"], [88, 65, 3, "enum_LAST_WRITE"], [126, 67, 2, "enum_LAST_READ"], [126, 2, 3, "enum_LAST_WRITE"], [126, 23, 3, "enum_LAST_WRITE"], [135, 71, 2, "enum_LAST_READ"], [135, 86, 2, "enum_LAST_READ"], [135, 59, 3, "enum_LAST_WRITE"], [137, 73, 2, "enum_LAST_READ"], [137, 88, 2, "enum_LAST_READ"], [137, 65, 3, "enum_LAST_WRITE"], [145, 71, 2, "enum_LAST_READ"], [145, 86, 2, "enum_LAST_READ"], [145, 59, 3, "enum_LAST_WRITE"], [23, 26, 4, "enum_COMPUTED_FROM"], [39, 46, 4, "enum_COMPUTED_FROM"], [39, 53, 4, "enum_COMPUTED_FROM"], [39, 55, 4, "enum_COMPUTED_FROM"], [39, 42, 4, "enum_COMPUTED_FROM"], [39, 50, 4, "enum_COMPUTED_FROM"]], "error_location": 137, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/braingram/atlas_to_mesh.git", "old_path": "atlas/construct.py", "hash": "a1cd9960c1191eeccef56a60465f67730ab026fc", "code": "def get_points(areas: Union[str, List[str]], sections: Optional[List[Any]]=None) -> Union[Dict[str, List[List[float]]], List[List[float]]]:\n    \"\"\"\n    Parameters\n    ----------\n    areas : string or list\n        Brain areas to find\n\n    sections : list (optional)\n        Sections in which to find areas\n\n\n    Returns\n    -------\n    pts : dict or list\n        list of points if areas was a string\n        dict with keys = areas and values = lists of points\n    \"\"\"\n    if isinstance(areas, str):\n        areas: List[str] = [areas]\n    if sections is None:\n        sections: List[section] = [section.load(si, areas=areas) for si in default_indices]\n    pts: Dict[str, List[List[float]]] = {}\n    for area in areas:\n        pts[area] = []\n        for s in sections:\n            pts[area] += [[p.x, p.y, s.get_ap()] for p                     in s.find_area(area, 'skull')]\n    if len(areas) == 1:\n        return pts[area[0]]\n    return pts\n", "rewrite": "ReplaceText(target='areas' @(43,19)->(43,23))", "error_line": 28, "has_bug": true, "code_full": "from typing import Any, Dict, List, Optional, Union\n\ndefault_indices: List[int] = []\n\n\nclass section:\n    @staticmethod\n    def load(index: int, areas: List[str]) -> \"section\":\n        return section()\n    \n    def find_area(self, area: str, skull: str) -> List[Any]:\n        return []\n    \n    def get_ap(self) -> float:\n        return 0.0\n\n\ndef get_points(areas: Union[str, List[str]], sections: Optional[List[Any]]=None) -> Union[Dict[str, List[List[float]]], List[List[float]]]:\n    \"\"\"\n    Parameters\n    ----------\n    areas : string or list\n        Brain areas to find\n\n    sections : list (optional)\n        Sections in which to find areas\n\n\n    Returns\n    -------\n    pts : dict or list\n        list of points if areas was a string\n        dict with keys = areas and values = lists of points\n    \"\"\"\n    if isinstance(areas, str):\n        areas: List[str] = [areas]\n    if sections is None:\n        sections: List[section] = [section.load(si, areas=areas) for si in default_indices]\n    pts: Dict[str, List[List[float]]] = {}\n    for area in areas:\n        pts[area] = []\n        for s in sections:\n            pts[area] += [[p.x, p.y, s.get_ap()] for p                     in s.find_area(area, 'skull')]\n    if len(areas) == 1:\n        return pts[area[0]]\n    return pts\n", "error_location_char": [915, 919], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def process_exception(", "self", ",", "request", ",", "exception", ")", ":", "#NEWLINE#", "#INDENT#", "strategy", "=", "getattr", "(", "request", ",", "'social_strategy'", ",", "None", ")", "#NEWLINE#", "if", "(", "(", "strategy", "is", "None", ")", "or", "self", ".", "raise_exception", "(", "request", ",", "exception", ")", ")", ":", "#NEWLINE#", "#INDENT#", "return", "#NEWLINE#", "#UNINDENT#", "if", "isinstance", "(", "exception", ",", "SocialAuthBaseException", ")", ":", "#NEWLINE#", "#INDENT#", "backend_name", "=", "strategy", ".", "backend", ".", "name", "#NEWLINE#", "message", "=", "self", ".", "get_message", "(", "request", ",", "exception", ")", "#NEWLINE#", "url", "=", "self", ".", "get_redirect_uri", "(", "request", ",", "exception", ")", "#NEWLINE#", "try", ":", "#NEWLINE#", "#INDENT#", "messages", ".", "error", "(", "request", ",", "message", ",", "extra_tags", "=", "(", "'social-auth '", "+", "backend_name", ")", ")", "#NEWLINE#", "#UNINDENT#", "except", "MessageFailure", ":", "#NEWLINE#", "#INDENT#", "url", "+=", "(", "(", "(", "(", "'?'", "in", "url", ")", "and", "'&'", ")", "or", "'?'", ")", "+", "'message={0}&backend={1}'", ".", "format", "(", "urlquote", "(", "message", ")", ",", "backend_name", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "redirect", "(", "url", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [10, 16, 7, "enum_FIELD"], [22, 29, 7, "enum_FIELD"], [45, 49, 7, "enum_FIELD"], [16, 13, 7, "enum_FIELD"], [49, 46, 7, "enum_FIELD"], [54, 60, 7, "enum_FIELD"], [62, 70, 7, "enum_FIELD"], [73, 81, 7, "enum_FIELD"], [143, 145, 7, "enum_FIELD"], [26, 25, 7, "enum_FIELD"], [35, 31, 7, "enum_FIELD"], [60, 58, 7, "enum_FIELD"], [70, 66, 7, "enum_FIELD"], [81, 77, 7, "enum_FIELD"], [88, 94, 7, "enum_FIELD"], [107, 108, 7, "enum_FIELD"], [145, 144, 7, "enum_FIELD"], [31, 30, 7, "enum_FIELD"], [58, 57, 7, "enum_FIELD"], [66, 65, 7, "enum_FIELD"], [77, 76, 7, "enum_FIELD"], [94, 90, 7, "enum_FIELD"], [111, 112, 7, "enum_FIELD"], [111, 128, 7, "enum_FIELD"], [90, 89, 7, "enum_FIELD"], [97, 101, 7, "enum_FIELD"], [128, 125, 7, "enum_FIELD"], [128, 137, 7, "enum_FIELD"], [101, 100, 7, "enum_FIELD"], [101, 102, 7, "enum_FIELD"], [137, 130, 7, "enum_FIELD"], [130, 129, 7, "enum_FIELD"], [134, 133, 7, "enum_FIELD"], [119, 118, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [15, 4, 10, "enum_LAST_LEXICAL_USE"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [25, 11, 10, "enum_LAST_LEXICAL_USE"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [30, 2, 10, "enum_LAST_LEXICAL_USE"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [34, 15, 10, "enum_LAST_LEXICAL_USE"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [36, 6, 10, "enum_LAST_LEXICAL_USE"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 42, 9, "enum_NEXT_SYNTAX"], [42, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [48, 36, 10, "enum_LAST_LEXICAL_USE"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [57, 25, 10, "enum_LAST_LEXICAL_USE"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [65, 30, 10, "enum_LAST_LEXICAL_USE"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [69, 34, 10, "enum_LAST_LEXICAL_USE"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [71, 48, 10, "enum_LAST_LEXICAL_USE"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [76, 65, 10, "enum_LAST_LEXICAL_USE"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [80, 69, 10, "enum_LAST_LEXICAL_USE"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [82, 71, 10, "enum_LAST_LEXICAL_USE"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [93, 80, 10, "enum_LAST_LEXICAL_USE"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [95, 63, 10, "enum_LAST_LEXICAL_USE"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [102, 55, 10, "enum_LAST_LEXICAL_USE"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 111, 9, "enum_NEXT_SYNTAX"], [112, 74, 10, "enum_LAST_LEXICAL_USE"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [120, 112, 10, "enum_LAST_LEXICAL_USE"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [135, 95, 10, "enum_LAST_LEXICAL_USE"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [138, 102, 10, "enum_LAST_LEXICAL_USE"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [146, 120, 10, "enum_LAST_LEXICAL_USE"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [3, 10, 1, "enum_CFG_NEXT"], [10, 29, 1, "enum_CFG_NEXT"], [29, 42, 1, "enum_CFG_NEXT"], [29, 49, 1, "enum_CFG_NEXT"], [49, 54, 1, "enum_CFG_NEXT"], [54, 62, 1, "enum_CFG_NEXT"], [62, 73, 1, "enum_CFG_NEXT"], [73, 88, 1, "enum_CFG_NEXT"], [88, 108, 1, "enum_CFG_NEXT"], [88, 143, 1, "enum_CFG_NEXT"], [108, 111, 1, "enum_CFG_NEXT"], [111, 143, 1, "enum_CFG_NEXT"], [15, 4, 3, "enum_LAST_WRITE"], [25, 11, 3, "enum_LAST_WRITE"], [30, 2, 3, "enum_LAST_WRITE"], [34, 15, 2, "enum_LAST_READ"], [34, 4, 3, "enum_LAST_WRITE"], [36, 6, 3, "enum_LAST_WRITE"], [48, 36, 2, "enum_LAST_READ"], [48, 6, 3, "enum_LAST_WRITE"], [57, 25, 2, "enum_LAST_READ"], [57, 11, 3, "enum_LAST_WRITE"], [65, 30, 2, "enum_LAST_READ"], [65, 2, 3, "enum_LAST_WRITE"], [69, 34, 2, "enum_LAST_READ"], [69, 4, 3, "enum_LAST_WRITE"], [71, 48, 2, "enum_LAST_READ"], [71, 6, 3, "enum_LAST_WRITE"], [76, 65, 2, "enum_LAST_READ"], [76, 2, 3, "enum_LAST_WRITE"], [80, 69, 2, "enum_LAST_READ"], [80, 4, 3, "enum_LAST_WRITE"], [82, 71, 2, "enum_LAST_READ"], [82, 6, 3, "enum_LAST_WRITE"], [93, 80, 2, "enum_LAST_READ"], [93, 4, 3, "enum_LAST_WRITE"], [95, 63, 3, "enum_LAST_WRITE"], [102, 55, 3, "enum_LAST_WRITE"], [120, 74, 3, "enum_LAST_WRITE"], [135, 95, 2, "enum_LAST_READ"], [135, 63, 3, "enum_LAST_WRITE"], [138, 102, 2, "enum_LAST_READ"], [138, 55, 3, "enum_LAST_WRITE"], [112, 120, 2, "enum_LAST_READ"], [112, 74, 3, "enum_LAST_WRITE"], [112, 112, 2, "enum_LAST_READ"], [112, 74, 3, "enum_LAST_WRITE"], [146, 112, 2, "enum_LAST_READ"], [146, 74, 3, "enum_LAST_WRITE"], [146, 112, 3, "enum_LAST_WRITE"], [11, 13, 4, "enum_COMPUTED_FROM"], [11, 15, 4, "enum_COMPUTED_FROM"], [55, 57, 4, "enum_COMPUTED_FROM"], [63, 69, 4, "enum_COMPUTED_FROM"], [63, 71, 4, "enum_COMPUTED_FROM"], [63, 65, 4, "enum_COMPUTED_FROM"], [74, 80, 4, "enum_COMPUTED_FROM"], [74, 82, 4, "enum_COMPUTED_FROM"], [74, 76, 4, "enum_COMPUTED_FROM"]], "error_location": 57, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/rafalp/misago-social-app-django.git", "old_path": "social/apps/django_app/middleware.py", "hash": "d53529b57f0a4992889ad490e5314a2244155afa", "code": "def process_exception(self, request: HttpRequest, exception: Union[SocialAuthBaseException, Exception]) -> Optional[HttpResponse]:\n    strategy: Optional[Strategy] = getattr(request, 'social_strategy', None)\n    if strategy is None or self.raise_exception(request, exception):\n        return\n\n    if isinstance(exception, SocialAuthBaseException):\n        backend_name = strategy.backend.name\n        message: str = self.get_message(request, exception)\n        url: str = self.get_redirect_uri(request, exception)\n        try:\n            messages.error(request, message,\n                        extra_tags='social-auth ' + backend_name)\n        except MessageFailure:\n            url += ('?' in url and '&' or '?') +                 'message={0}&backend={1}'.format(urlquote(message),\n                                                    backend_name)\n        return redirect(url)\n", "rewrite": "ReplaceText(target='request' @(30,27)->(30,35))", "error_line": 6, "has_bug": true, "code_full": "from typing import Optional, Union\n\nfrom django.contrib import messages\nfrom django.core.exceptions import MessageFailure\nfrom django.http import HttpRequest, HttpResponse\nfrom django.shortcuts import redirect\nfrom django.utils.http import urlquote\n\n\nclass SocialAuthBaseException(Exception):\n    pass\n\n\nclass Strategy:\n    pass\n\n\nclass Class:\n    def raise_exception(self, request: HttpRequest, exception: Exception) -> bool:\n        return False\n    \n    def get_message(self, request: HttpRequest, exception: Exception) -> str:\n        return \"\"\n\n    def get_redirect_uri(self, request: HttpRequest, exception: Exception) -> str:\n        return \"\"\n\n    def process_exception(self, request: HttpRequest, exception: Union[SocialAuthBaseException, Exception]) -> Optional[HttpResponse]:\n        strategy: Optional[Strategy] = getattr(request, 'social_strategy', None)\n        if strategy is None or self.raise_exception(request, exception):\n            return\n\n        if isinstance(exception, SocialAuthBaseException):\n            backend_name = strategy.backend.name\n            message: str = self.get_message(request, exception)\n            url: str = self.get_redirect_uri(request, exception)\n            try:\n                messages.error(request, message,\n                            extra_tags='social-auth ' + backend_name)\n            except MessageFailure:\n                url += ('?' in url and '&' or '?') +                     'message={0}&backend={1}'.format(urlquote(message),\n                                                        backend_name)\n            return redirect(url)\n", "error_location_char": [371, 379], "type_checked_pytype": false, "type_error_label": "attribute-error", "type_checked_mypy": false}
{"source_tokens": ["#NEWLINE#", "def list_compute_policies(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'List VdcComputePolicy references.\\n\\n    :return: list of VdcComputePolicyReference XML elements each of which\\n    refers to VcdComputePolicy.\\n\\n    :rtype: list of lxml.objectify.StringElement\\n    :raises: OperationNotSupportedException: if the api version is not\\n    supported.\\n    '", "#NEWLINE#", "if", "(", "float", "(", "self", ".", "client", ".", "get_api_version", "(", ")", ")", "<", "float", "(", "ApiVersion", ".", "VERSION_32", ".", "value", ")", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "OperationNotSupportedException", "(", "'Unsupported API version'", ")", "#NEWLINE#", "#UNINDENT#", "policy_references", "=", "self", ".", "_fetch_compute_policies", "(", ")", "#NEWLINE#", "policy_list", "=", "[", "]", "#NEWLINE#", "for", "policy_reference", "in", "policy_references", ".", "VdcComputePolicyReference", ":", "#NEWLINE#", "#INDENT#", "policy_list", ".", "append", "(", "policy_reference", ")", "#NEWLINE#", "#UNINDENT#", "return", "policy_reference"], "edges": [[6, 7, 7, "enum_FIELD"], [9, 21, 7, "enum_FIELD"], [40, 46, 7, "enum_FIELD"], [48, 51, 7, "enum_FIELD"], [56, 55, 7, "enum_FIELD"], [56, 58, 7, "enum_FIELD"], [71, 72, 7, "enum_FIELD"], [21, 12, 7, "enum_FIELD"], [34, 36, 7, "enum_FIELD"], [46, 44, 7, "enum_FIELD"], [58, 57, 7, "enum_FIELD"], [62, 66, 7, "enum_FIELD"], [12, 11, 7, "enum_FIELD"], [23, 22, 7, "enum_FIELD"], [36, 35, 7, "enum_FIELD"], [44, 43, 7, "enum_FIELD"], [66, 64, 7, "enum_FIELD"], [18, 16, 7, "enum_FIELD"], [27, 25, 7, "enum_FIELD"], [64, 63, 7, "enum_FIELD"], [16, 14, 7, "enum_FIELD"], [25, 24, 7, "enum_FIELD"], [14, 13, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [13, 2, 10, "enum_LAST_LEXICAL_USE"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [22, 11, 10, "enum_LAST_LEXICAL_USE"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [43, 13, 10, "enum_LAST_LEXICAL_USE"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [57, 41, 10, "enum_LAST_LEXICAL_USE"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 62, 9, "enum_NEXT_SYNTAX"], [63, 49, 10, "enum_LAST_LEXICAL_USE"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [67, 55, 10, "enum_LAST_LEXICAL_USE"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 71, 9, "enum_NEXT_SYNTAX"], [72, 67, 10, "enum_LAST_LEXICAL_USE"], [71, 72, 9, "enum_NEXT_SYNTAX"], [6, 21, 1, "enum_CFG_NEXT"], [21, 34, 1, "enum_CFG_NEXT"], [21, 40, 1, "enum_CFG_NEXT"], [40, 48, 1, "enum_CFG_NEXT"], [48, 58, 1, "enum_CFG_NEXT"], [58, 55, 1, "enum_CFG_NEXT"], [55, 71, 1, "enum_CFG_NEXT"], [55, 62, 1, "enum_CFG_NEXT"], [62, 55, 1, "enum_CFG_NEXT"], [13, 2, 3, "enum_LAST_WRITE"], [22, 11, 2, "enum_LAST_READ"], [43, 13, 2, "enum_LAST_READ"], [43, 2, 3, "enum_LAST_WRITE"], [57, 41, 3, "enum_LAST_WRITE"], [55, 67, 2, "enum_LAST_READ"], [55, 55, 3, "enum_LAST_WRITE"], [63, 63, 2, "enum_LAST_READ"], [63, 49, 3, "enum_LAST_WRITE"], [67, 67, 2, "enum_LAST_READ"], [67, 55, 3, "enum_LAST_WRITE"], [72, 67, 2, "enum_LAST_READ"], [72, 55, 3, "enum_LAST_WRITE"], [41, 43, 4, "enum_COMPUTED_FROM"]], "error_location": 72, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/vmware/pyvcloud.git", "old_path": "pyvcloud/vcd/vdc.py", "hash": "0b7926b141b58afbf94168ac95f1ab3f00f14e71", "code": "def list_compute_policies(self) -> List[VdcComputePolicyReference]:\n    \"\"\"List VdcComputePolicy references.\n\n    :return: list of VdcComputePolicyReference XML elements each of which\n    refers to VcdComputePolicy.\n\n    :rtype: list of lxml.objectify.StringElement\n    :raises: OperationNotSupportedException: if the api version is not\n    supported.\n    \"\"\"\n    if float(self.client.get_api_version()) <             float(ApiVersion.VERSION_32.value):\n        raise OperationNotSupportedException(\"Unsupported API version\")\n\n    policy_references = self._fetch_compute_policies()\n    policy_list: List[VdcComputePolicyReference] = []\n    for policy_reference in policy_references.VdcComputePolicyReference:\n        policy_list.append(policy_reference)\n    return policy_reference \n", "rewrite": "ReplaceText(target='policy_list' @(2132,15)->(2132,31))", "error_line": 18, "has_bug": true, "code_full": "from typing import Any, List\n\nfrom lxml.objectify import StringElement\n\n\nclass OperationNotSupportedException(Exception):\n    pass\n\n\nclass ApiVersion:\n    class VERSION_32:\n        value: str = \"\"\n\n\nclass VdcComputePolicyReference:\n    pass\n\n\nclass PolicyReference:\n    VdcComputePolicyReference: List[VdcComputePolicyReference]\n\n\nclass VDC:\n    client: Any\n\n    def _fetch_compute_policies(self) -> PolicyReference:\n        return PolicyReference()\n\n    def list_compute_policies(self) -> List[VdcComputePolicyReference]:\n        \"\"\"List VdcComputePolicy references.\n\n        :return: list of VdcComputePolicyReference XML elements each of which\n        refers to VcdComputePolicy.\n\n        :rtype: list of lxml.objectify.StringElement\n        :raises: OperationNotSupportedException: if the api version is not\n        supported.\n        \"\"\"\n        if float(self.client.get_api_version()) <                 float(ApiVersion.VERSION_32.value):\n            raise OperationNotSupportedException(\"Unsupported API version\")\n\n        policy_references = self._fetch_compute_policies()\n        policy_list: List[VdcComputePolicyReference] = []\n        for policy_reference in policy_references.VdcComputePolicyReference:\n            policy_list.append(policy_reference)\n        return policy_reference \n", "error_location_char": [765, 781], "type_checked_pytype": false, "type_error_label": "bad-return-type", "type_checked_mypy": false}
{"source_tokens": ["#NEWLINE#", "def handleForever(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Delegates user input to the handling function when activated.\\n    '", "#NEWLINE#", "self", ".", "_logger", ".", "info", "(", "\"Starting to handle conversation with keyword '%s'.\"", ",", "self", ".", "persona", ")", "#NEWLINE#", "while", "True", ":", "#NEWLINE#", "#INDENT#", "'notifications = self.notifier.get_all_notifications()\\n        for notif in notifications:\\n            self._logger.info(\"Received notification: \\'%s\\'\", str(notif))'", "#NEWLINE#", "input", "=", "self", ".", "mic", ".", "listen", "(", ")", "#NEWLINE#", "if", "input", ":", "#NEWLINE#", "#INDENT#", "(", "plugin", ",", "text", ")", "=", "self", ".", "brain", ".", "query", "(", "input", ")", "#NEWLINE#", "if", "(", "plugin", "and", "text", ")", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "plugin", ".", "handle", "(", "input", ",", "self", ".", "mic", ")", "#NEWLINE#", "#UNINDENT#", "except", "Exception", ":", "#NEWLINE#", "#INDENT#", "self", ".", "_logger", ".", "error", "(", "'Failed to execute module'", ",", "exc_info", "=", "True", ")", "#NEWLINE#", "self", ".", "mic", ".", "say", "(", "(", "\"I'm sorry. I had some trouble with \"", "+", "'that operation. Please try again later.'", ")", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "self", ".", "_logger", ".", "debug", "(", "(", "\"Handling of phrase '%s' by \"", "+", "\"module '%s' completed\"", ")", ",", "text", ",", "plugin", ".", "info", ".", "name", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "self", ".", "mic", ".", "say", "(", "'Pardon?'", ")"], "edges": [[6, 7, 7, "enum_FIELD"], [8, 16, 7, "enum_FIELD"], [22, 23, 7, "enum_FIELD"], [16, 12, 7, "enum_FIELD"], [26, 27, 7, "enum_FIELD"], [28, 36, 7, "enum_FIELD"], [41, 40, 7, "enum_FIELD"], [12, 10, 7, "enum_FIELD"], [18, 17, 7, "enum_FIELD"], [36, 34, 7, "enum_FIELD"], [43, 55, 7, "enum_FIELD"], [59, 62, 7, "enum_FIELD"], [147, 153, 7, "enum_FIELD"], [10, 9, 7, "enum_FIELD"], [34, 32, 7, "enum_FIELD"], [55, 53, 7, "enum_FIELD"], [153, 151, 7, "enum_FIELD"], [32, 31, 7, "enum_FIELD"], [53, 51, 7, "enum_FIELD"], [71, 77, 7, "enum_FIELD"], [84, 85, 7, "enum_FIELD"], [119, 131, 7, "enum_FIELD"], [151, 149, 7, "enum_FIELD"], [51, 50, 7, "enum_FIELD"], [77, 73, 7, "enum_FIELD"], [88, 96, 7, "enum_FIELD"], [101, 107, 7, "enum_FIELD"], [131, 123, 7, "enum_FIELD"], [149, 148, 7, "enum_FIELD"], [73, 72, 7, "enum_FIELD"], [79, 78, 7, "enum_FIELD"], [96, 92, 7, "enum_FIELD"], [107, 105, 7, "enum_FIELD"], [123, 121, 7, "enum_FIELD"], [128, 127, 7, "enum_FIELD"], [128, 129, 7, "enum_FIELD"], [137, 135, 7, "enum_FIELD"], [92, 90, 7, "enum_FIELD"], [97, 99, 7, "enum_FIELD"], [105, 103, 7, "enum_FIELD"], [110, 109, 7, "enum_FIELD"], [110, 111, 7, "enum_FIELD"], [121, 120, 7, "enum_FIELD"], [135, 134, 7, "enum_FIELD"], [90, 89, 7, "enum_FIELD"], [103, 102, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [9, 2, 10, "enum_LAST_LEXICAL_USE"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [17, 9, 10, "enum_LAST_LEXICAL_USE"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [31, 17, 10, "enum_LAST_LEXICAL_USE"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 39, 9, "enum_NEXT_SYNTAX"], [40, 29, 10, "enum_LAST_LEXICAL_USE"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [50, 31, 10, "enum_LAST_LEXICAL_USE"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [56, 40, 10, "enum_LAST_LEXICAL_USE"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [61, 45, 10, "enum_LAST_LEXICAL_USE"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [63, 47, 10, "enum_LAST_LEXICAL_USE"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 71, 9, "enum_NEXT_SYNTAX"], [72, 61, 10, "enum_LAST_LEXICAL_USE"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [76, 56, 10, "enum_LAST_LEXICAL_USE"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [78, 50, 10, "enum_LAST_LEXICAL_USE"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 88, 9, "enum_NEXT_SYNTAX"], [89, 78, 10, "enum_LAST_LEXICAL_USE"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [102, 89, 10, "enum_LAST_LEXICAL_USE"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 119, 9, "enum_NEXT_SYNTAX"], [120, 102, 10, "enum_LAST_LEXICAL_USE"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [132, 63, 10, "enum_LAST_LEXICAL_USE"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [134, 72, 10, "enum_LAST_LEXICAL_USE"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 147, 9, "enum_NEXT_SYNTAX"], [148, 120, 10, "enum_LAST_LEXICAL_USE"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [6, 8, 1, "enum_CFG_NEXT"], [8, 23, 1, "enum_CFG_NEXT"], [23, 26, 1, "enum_CFG_NEXT"], [26, 28, 1, "enum_CFG_NEXT"], [28, 40, 1, "enum_CFG_NEXT"], [40, 43, 1, "enum_CFG_NEXT"], [40, 147, 1, "enum_CFG_NEXT"], [43, 62, 1, "enum_CFG_NEXT"], [62, 71, 1, "enum_CFG_NEXT"], [62, 23, 1, "enum_CFG_NEXT"], [71, 119, 1, "enum_CFG_NEXT"], [71, 85, 1, "enum_CFG_NEXT"], [85, 88, 1, "enum_CFG_NEXT"], [88, 101, 1, "enum_CFG_NEXT"], [101, 23, 1, "enum_CFG_NEXT"], [119, 23, 1, "enum_CFG_NEXT"], [147, 23, 1, "enum_CFG_NEXT"], [9, 2, 3, "enum_LAST_WRITE"], [17, 9, 2, "enum_LAST_READ"], [17, 2, 3, "enum_LAST_WRITE"], [31, 17, 2, "enum_LAST_READ"], [31, 50, 2, "enum_LAST_READ"], [31, 148, 2, "enum_LAST_READ"], [31, 120, 2, "enum_LAST_READ"], [31, 102, 2, "enum_LAST_READ"], [31, 2, 3, "enum_LAST_WRITE"], [29, 76, 2, "enum_LAST_READ"], [29, 56, 2, "enum_LAST_READ"], [29, 40, 2, "enum_LAST_READ"], [29, 29, 3, "enum_LAST_WRITE"], [40, 76, 2, "enum_LAST_READ"], [40, 56, 2, "enum_LAST_READ"], [40, 40, 2, "enum_LAST_READ"], [40, 29, 3, "enum_LAST_WRITE"], [50, 31, 2, "enum_LAST_READ"], [50, 2, 3, "enum_LAST_WRITE"], [56, 40, 2, "enum_LAST_READ"], [56, 29, 3, "enum_LAST_WRITE"], [45, 134, 2, "enum_LAST_READ"], [45, 61, 2, "enum_LAST_READ"], [45, 72, 2, "enum_LAST_READ"], [45, 45, 3, "enum_LAST_WRITE"], [47, 63, 2, "enum_LAST_READ"], [47, 132, 2, "enum_LAST_READ"], [47, 47, 3, "enum_LAST_WRITE"], [61, 134, 2, "enum_LAST_READ"], [61, 61, 2, "enum_LAST_READ"], [61, 72, 2, "enum_LAST_READ"], [61, 45, 3, "enum_LAST_WRITE"], [63, 63, 2, "enum_LAST_READ"], [63, 132, 2, "enum_LAST_READ"], [63, 47, 3, "enum_LAST_WRITE"], [72, 61, 2, "enum_LAST_READ"], [72, 45, 3, "enum_LAST_WRITE"], [76, 56, 2, "enum_LAST_READ"], [76, 29, 3, "enum_LAST_WRITE"], [78, 50, 2, "enum_LAST_READ"], [78, 2, 3, "enum_LAST_WRITE"], [85, 85, 2, "enum_LAST_READ"], [89, 78, 2, "enum_LAST_READ"], [89, 2, 3, "enum_LAST_WRITE"], [102, 89, 2, "enum_LAST_READ"], [102, 2, 3, "enum_LAST_WRITE"], [120, 78, 2, "enum_LAST_READ"], [120, 2, 3, "enum_LAST_WRITE"], [132, 63, 2, "enum_LAST_READ"], [132, 47, 3, "enum_LAST_WRITE"], [134, 72, 2, "enum_LAST_READ"], [134, 45, 3, "enum_LAST_WRITE"], [148, 31, 2, "enum_LAST_READ"], [148, 2, 3, "enum_LAST_WRITE"], [29, 31, 4, "enum_COMPUTED_FROM"], [46, 56, 4, "enum_COMPUTED_FROM"], [46, 50, 4, "enum_COMPUTED_FROM"]], "error_location": 76, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/narfman0/jeeves.git", "old_path": "client/conversation.py", "hash": "a4e0401053c41d7d584d316d05845ec75d79c9a8", "code": "def handleForever(self):\n    \"\"\"\n    Delegates user input to the handling function when activated.\n    \"\"\"\n    self._logger.info(\"Starting to handle conversation with keyword '%s'.\",\n                    self.persona)\n    while True:\n        # Print notifications until empty\n        \"\"\"notifications = self.notifier.get_all_notifications()\n        for notif in notifications:\n            self._logger.info(\"Received notification: '%s'\", str(notif))\"\"\"\n\n        input: str = self.mic.listen()\n\n        if input:\n            plugin, text = self.brain.query(input)\n            if plugin and text:\n                try:\n                    plugin.handle(input, self.mic)\n                except Exception:\n                    self._logger.error('Failed to execute module',\n                                    exc_info=True)\n                    self.mic.say(\"I'm sorry. I had some trouble with \" +\n                                \"that operation. Please try again later.\")\n                else:\n                    self._logger.debug(\"Handling of phrase '%s' by \" +\n                                    \"module '%s' completed\", text,\n                                    plugin.info.name)\n        else:\n            self.mic.say(\"Pardon?\")\n", "rewrite": "ReplaceText(target='text' @(33,38)->(33,43))", "error_line": 18, "has_bug": true, "code_full": "from typing import Optional, Tuple\n\n\nclass Logger:\n    def info(self, message: str, *args, **kwargs):\n        pass\n\n    def debug(self, message: str, *args, **kwargs):\n        pass\n\n    def error(self, message: str, *args, **kwargs):\n        pass\n\n\nclass Microphone:\n    def listen(self) -> str:\n        return \"\"\n\n    def say(self, message: str):\n        pass\n\n\nclass PluginInfo:\n    name: str\n\n\nclass Plugin:\n    info: PluginInfo\n\n    def handle(self, input: str, mic: Microphone):\n        pass\n\n\nclass Brain:\n    def query(self, input: str) -> Tuple[Optional[Plugin], Optional[str]]:\n        return None, None\n\n\nclass Conversation:\n    _logger: Logger\n    persona: str\n    mic: Microphone\n    brain: Brain\n    \n    def handleForever(self):\n        \"\"\"\n        Delegates user input to the handling function when activated.\n        \"\"\"\n        self._logger.info(\"Starting to handle conversation with keyword '%s'.\",\n                        self.persona)\n        while True:\n            # Print notifications until empty\n            \"\"\"notifications = self.notifier.get_all_notifications()\n            for notif in notifications:\n                self._logger.info(\"Received notification: '%s'\", str(notif))\"\"\"\n\n            input: str = self.mic.listen()\n\n            if input:\n                plugin, text = self.brain.query(input)\n                if plugin and text:\n                    try:\n                        plugin.handle(input, self.mic)\n                    except Exception:\n                        self._logger.error('Failed to execute module',\n                                        exc_info=True)\n                        self.mic.say(\"I'm sorry. I had some trouble with \" +\n                                    \"that operation. Please try again later.\")\n                    else:\n                        self._logger.debug(\"Handling of phrase '%s' by \" +\n                                        \"module '%s' completed\", text,\n                                        plugin.info.name)\n            else:\n                self.mic.say(\"Pardon?\")\n", "error_location_char": [649, 654], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def cli(", "filter_level", ",", "max_unknowns", ",", "c_deviations", ",", "s_deviations", ",", "m_deviations", ",", "dry_run", ",", "species", ",", "path", ")", ":", "#NEWLINE#", "#INDENT#", "if", "species", ":", "#NEWLINE#", "#INDENT#", "from", "genbankqc", "import", "Species", "#NEWLINE#", "try", ":", "#NEWLINE#", "#INDENT#", "s", "=", "Species", "(", "path", ",", "max_unknowns", ",", "c_deviations", ",", "s_deviations", ",", "m_deviations", ")", "#NEWLINE#", "s", ".", "qc", "(", ")", "#NEWLINE#", "print", "(", "'Completed '", ",", "s", ".", "species", ")", "#NEWLINE#", "print", "(", "s", ")", "#NEWLINE#", "#UNINDENT#", "except", "Exception", ":", "#NEWLINE#", "#INDENT#", "print", "(", "'Failed '", ",", "species", ".", "species", ")", "#NEWLINE#", "traceback", ".", "print_exc", "(", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "from", "genbankqc", "import", "Genbank", "#NEWLINE#", "genbank", "=", "Genbank", "(", "path", ")", "#NEWLINE#", "genbank", ".", "qc", "(", ")"], "edges": [[1, 9, 7, "enum_FIELD"], [23, 22, 7, "enum_FIELD"], [101, 105, 7, "enum_FIELD"], [108, 112, 7, "enum_FIELD"], [34, 42, 7, "enum_FIELD"], [49, 53, 7, "enum_FIELD"], [55, 59, 7, "enum_FIELD"], [64, 66, 7, "enum_FIELD"], [71, 72, 7, "enum_FIELD"], [105, 104, 7, "enum_FIELD"], [112, 110, 7, "enum_FIELD"], [42, 37, 7, "enum_FIELD"], [53, 51, 7, "enum_FIELD"], [59, 56, 7, "enum_FIELD"], [66, 65, 7, "enum_FIELD"], [75, 79, 7, "enum_FIELD"], [84, 88, 7, "enum_FIELD"], [110, 109, 7, "enum_FIELD"], [51, 50, 7, "enum_FIELD"], [61, 60, 7, "enum_FIELD"], [79, 76, 7, "enum_FIELD"], [88, 86, 7, "enum_FIELD"], [81, 80, 7, "enum_FIELD"], [86, 85, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 21, 9, "enum_NEXT_SYNTAX"], [22, 14, 10, "enum_LAST_LEXICAL_USE"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [39, 16, 10, "enum_LAST_LEXICAL_USE"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [41, 4, 10, "enum_LAST_LEXICAL_USE"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [43, 6, 10, "enum_LAST_LEXICAL_USE"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [45, 8, 10, "enum_LAST_LEXICAL_USE"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [47, 10, 10, "enum_LAST_LEXICAL_USE"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [50, 35, 10, "enum_LAST_LEXICAL_USE"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [60, 50, 10, "enum_LAST_LEXICAL_USE"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [65, 56, 10, "enum_LAST_LEXICAL_USE"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [67, 60, 10, "enum_LAST_LEXICAL_USE"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 75, 9, "enum_NEXT_SYNTAX"], [76, 65, 10, "enum_LAST_LEXICAL_USE"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [80, 22, 10, "enum_LAST_LEXICAL_USE"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [106, 39, 10, "enum_LAST_LEXICAL_USE"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [109, 102, 10, "enum_LAST_LEXICAL_USE"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [9, 22, 1, "enum_CFG_NEXT"], [22, 98, 1, "enum_CFG_NEXT"], [22, 27, 1, "enum_CFG_NEXT"], [27, 34, 1, "enum_CFG_NEXT"], [34, 49, 1, "enum_CFG_NEXT"], [49, 55, 1, "enum_CFG_NEXT"], [55, 64, 1, "enum_CFG_NEXT"], [64, 72, 1, "enum_CFG_NEXT"], [72, 75, 1, "enum_CFG_NEXT"], [75, 84, 1, "enum_CFG_NEXT"], [98, 101, 1, "enum_CFG_NEXT"], [101, 108, 1, "enum_CFG_NEXT"], [22, 14, 3, "enum_LAST_WRITE"], [39, 16, 3, "enum_LAST_WRITE"], [41, 4, 3, "enum_LAST_WRITE"], [43, 6, 3, "enum_LAST_WRITE"], [45, 8, 3, "enum_LAST_WRITE"], [47, 10, 3, "enum_LAST_WRITE"], [50, 35, 3, "enum_LAST_WRITE"], [60, 50, 2, "enum_LAST_READ"], [60, 35, 3, "enum_LAST_WRITE"], [65, 56, 2, "enum_LAST_READ"], [67, 60, 2, "enum_LAST_READ"], [67, 35, 3, "enum_LAST_WRITE"], [76, 65, 2, "enum_LAST_READ"], [80, 22, 2, "enum_LAST_READ"], [80, 14, 3, "enum_LAST_WRITE"], [106, 16, 3, "enum_LAST_WRITE"], [109, 102, 3, "enum_LAST_WRITE"], [102, 104, 4, "enum_COMPUTED_FROM"], [102, 106, 4, "enum_COMPUTED_FROM"], [35, 37, 4, "enum_COMPUTED_FROM"], [35, 39, 4, "enum_COMPUTED_FROM"], [35, 41, 4, "enum_COMPUTED_FROM"], [35, 43, 4, "enum_COMPUTED_FROM"], [35, 45, 4, "enum_COMPUTED_FROM"], [35, 47, 4, "enum_COMPUTED_FROM"]], "error_location": 80, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/andrewsanchez/genbank-qc.git", "old_path": "genbankqc/__main__.py", "hash": "2aa87a49e09fefbbe7fe2cba2e6074bba157322b", "code": "def cli(filter_level: float, max_unknowns: int, c_deviations: float, s_deviations: float, m_deviations: float,\n        dry_run: float, species: bool, path: str):\n    if species:\n        from genbankqc import Species\n        try:\n            s: Species = Species(path, max_unknowns, c_deviations, s_deviations,\n                        m_deviations)\n            s.qc()\n            print(\"Completed \", s.species)\n            print(s)\n        except Exception:\n            print('Failed ', species.species)\n            traceback.print_exc()\n    else:\n        from genbankqc import Genbank\n        genbank: Genbank = Genbank(path)\n        genbank.qc()\n", "rewrite": "ReplaceText(target='s' @(41,29)->(41,36))", "error_line": 11, "has_bug": true, "code_full": "import traceback\nfrom typing import Any, Optional\n\n\ndef cli(filter_level: float, max_unknowns: int, c_deviations: float, s_deviations: float, m_deviations: float,\n        dry_run: float, species: bool, path: str):\n    if species:\n        from genbankqc import Species\n        try:\n            s: Species = Species(path, max_unknowns, c_deviations, s_deviations,\n                        m_deviations)\n            s.qc()\n            print(\"Completed \", s.species)\n            print(s)\n        except Exception:\n            print('Failed ', species.species)\n            traceback.print_exc()\n    else:\n        from genbankqc import Genbank\n        genbank: Genbank = Genbank(path)\n        genbank.qc()\n", "error_location_char": [486, 493], "type_checked_pytype": false, "type_error_label": "attribute-error", "type_checked_mypy": false}
{"source_tokens": ["#NEWLINE#", "def array_split(", "ary", ",", "indices_or_sections", ",", "axis", "=", "0", ")", ":", "#NEWLINE#", "#INDENT#", "'Splits an array into multiple sub arrays along a given axis.\\n\\n    This function is almost equivalent to :func:`cupy.split`. The only\\n    difference is that this function allows an integer sections that does not\\n    evenly divide the axis.\\n\\n    .. seealso:: :func:`cupy.split` for more detail, :func:`numpy.array_split`\\n\\n    '", "#NEWLINE#", "if", "(", "ary", ".", "ndim", "<=", "axis", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "IndexError", "(", "'Axis exceeds ndim'", ")", "#NEWLINE#", "#UNINDENT#", "size", "=", "ary", ".", "shape", "[", "axis", "]", "#NEWLINE#", "if", "numpy", ".", "isscalar", "(", "indices_or_sections", ")", ":", "#NEWLINE#", "#INDENT#", "each_size", "=", "(", "(", "(", "size", "-", "1", ")", "//", "indices_or_sections", ")", "+", "1", ")", "#NEWLINE#", "indices", "=", "[", "(", "i", "*", "each_size", ")", "for", "i", "in", "six", ".", "moves", ".", "range", "(", "1", ",", "indices_or_sections", ")", "]", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "indices", "=", "indices_or_sections", "#NEWLINE#", "#UNINDENT#", "if", "(", "len", "(", "indices", ")", "==", "0", ")", ":", "#NEWLINE#", "#INDENT#", "return", "[", "ary", "]", "#NEWLINE#", "#UNINDENT#", "skip", "=", "(", "(", "slice", "(", "None", ")", ",", ")", "*", "axis", ")", "#NEWLINE#", "ret", "=", "[", "]", "#NEWLINE#", "i", "=", "0", "#NEWLINE#", "for", "index", "in", "indices", ":", "#NEWLINE#", "#INDENT#", "ret", ".", "append", "(", "ary", "[", "(", "skip", "+", "(", "slice", "(", "i", ",", "index", ")", ",", ")", ")", "]", ")", "#NEWLINE#", "i", "=", "index", "#NEWLINE#", "#UNINDENT#", "ret", ".", "append", "(", "ary", "[", "(", "skip", "+", "(", "slice", "(", "index", ",", "size", ")", ",", ")", ")", "]", ")", "#NEWLINE#", "return", "ret"], "edges": [[1, 5, 7, "enum_FIELD"], [12, 13, 7, "enum_FIELD"], [15, 20, 7, "enum_FIELD"], [32, 38, 7, "enum_FIELD"], [49, 46, 7, "enum_FIELD"], [101, 107, 7, "enum_FIELD"], [118, 129, 7, "enum_FIELD"], [132, 135, 7, "enum_FIELD"], [137, 140, 7, "enum_FIELD"], [144, 143, 7, "enum_FIELD"], [144, 145, 7, "enum_FIELD"], [175, 179, 7, "enum_FIELD"], [198, 199, 7, "enum_FIELD"], [20, 18, 7, "enum_FIELD"], [26, 28, 7, "enum_FIELD"], [38, 36, 7, "enum_FIELD"], [38, 39, 7, "enum_FIELD"], [46, 44, 7, "enum_FIELD"], [51, 64, 7, "enum_FIELD"], [67, 70, 7, "enum_FIELD"], [95, 98, 7, "enum_FIELD"], [107, 104, 7, "enum_FIELD"], [113, 114, 7, "enum_FIELD"], [129, 127, 7, "enum_FIELD"], [129, 130, 7, "enum_FIELD"], [148, 152, 7, "enum_FIELD"], [170, 173, 7, "enum_FIELD"], [179, 177, 7, "enum_FIELD"], [18, 17, 7, "enum_FIELD"], [28, 27, 7, "enum_FIELD"], [36, 35, 7, "enum_FIELD"], [44, 43, 7, "enum_FIELD"], [64, 61, 7, "enum_FIELD"], [64, 65, 7, "enum_FIELD"], [70, 73, 7, "enum_FIELD"], [104, 103, 7, "enum_FIELD"], [152, 150, 7, "enum_FIELD"], [177, 176, 7, "enum_FIELD"], [181, 180, 7, "enum_FIELD"], [181, 184, 7, "enum_FIELD"], [61, 58, 7, "enum_FIELD"], [61, 62, 7, "enum_FIELD"], [73, 72, 7, "enum_FIELD"], [73, 74, 7, "enum_FIELD"], [76, 77, 7, "enum_FIELD"], [76, 86, 7, "enum_FIELD"], [124, 123, 7, "enum_FIELD"], [150, 149, 7, "enum_FIELD"], [154, 153, 7, "enum_FIELD"], [154, 157, 7, "enum_FIELD"], [184, 183, 7, "enum_FIELD"], [184, 192, 7, "enum_FIELD"], [58, 57, 7, "enum_FIELD"], [58, 59, 7, "enum_FIELD"], [86, 82, 7, "enum_FIELD"], [157, 156, 7, "enum_FIELD"], [157, 165, 7, "enum_FIELD"], [82, 80, 7, "enum_FIELD"], [189, 186, 7, "enum_FIELD"], [80, 79, 7, "enum_FIELD"], [162, 159, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [17, 2, 10, "enum_LAST_LEXICAL_USE"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [21, 6, 10, "enum_LAST_LEXICAL_USE"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [35, 17, 10, "enum_LAST_LEXICAL_USE"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [39, 21, 10, "enum_LAST_LEXICAL_USE"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [47, 4, 10, "enum_LAST_LEXICAL_USE"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [57, 33, 10, "enum_LAST_LEXICAL_USE"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [62, 47, 10, "enum_LAST_LEXICAL_USE"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [74, 52, 10, "enum_LAST_LEXICAL_USE"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [77, 72, 10, "enum_LAST_LEXICAL_USE"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [87, 62, 10, "enum_LAST_LEXICAL_USE"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 95, 9, "enum_NEXT_SYNTAX"], [96, 68, 10, "enum_LAST_LEXICAL_USE"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [98, 87, 10, "enum_LAST_LEXICAL_USE"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [105, 96, 10, "enum_LAST_LEXICAL_USE"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [115, 35, 10, "enum_LAST_LEXICAL_USE"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [130, 39, 10, "enum_LAST_LEXICAL_USE"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [138, 77, 10, "enum_LAST_LEXICAL_USE"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [145, 105, 10, "enum_LAST_LEXICAL_USE"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 148, 9, "enum_NEXT_SYNTAX"], [149, 133, 10, "enum_LAST_LEXICAL_USE"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [153, 115, 10, "enum_LAST_LEXICAL_USE"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [156, 119, 10, "enum_LAST_LEXICAL_USE"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [159, 123, 10, "enum_LAST_LEXICAL_USE"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [161, 138, 10, "enum_LAST_LEXICAL_USE"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [163, 143, 10, "enum_LAST_LEXICAL_USE"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [171, 161, 10, "enum_LAST_LEXICAL_USE"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [173, 163, 10, "enum_LAST_LEXICAL_USE"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 175, 9, "enum_NEXT_SYNTAX"], [176, 149, 10, "enum_LAST_LEXICAL_USE"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [180, 153, 10, "enum_LAST_LEXICAL_USE"], [179, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [183, 156, 10, "enum_LAST_LEXICAL_USE"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 184, 9, "enum_NEXT_SYNTAX"], [184, 185, 9, "enum_NEXT_SYNTAX"], [186, 159, 10, "enum_LAST_LEXICAL_USE"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [188, 173, 10, "enum_LAST_LEXICAL_USE"], [187, 188, 9, "enum_NEXT_SYNTAX"], [188, 189, 9, "enum_NEXT_SYNTAX"], [190, 57, 10, "enum_LAST_LEXICAL_USE"], [189, 190, 9, "enum_NEXT_SYNTAX"], [190, 191, 9, "enum_NEXT_SYNTAX"], [191, 192, 9, "enum_NEXT_SYNTAX"], [192, 193, 9, "enum_NEXT_SYNTAX"], [193, 194, 9, "enum_NEXT_SYNTAX"], [194, 195, 9, "enum_NEXT_SYNTAX"], [195, 196, 9, "enum_NEXT_SYNTAX"], [196, 198, 9, "enum_NEXT_SYNTAX"], [199, 176, 10, "enum_LAST_LEXICAL_USE"], [198, 199, 9, "enum_NEXT_SYNTAX"], [8, 1, 1, "enum_CFG_NEXT"], [5, 12, 1, "enum_CFG_NEXT"], [12, 20, 1, "enum_CFG_NEXT"], [20, 26, 1, "enum_CFG_NEXT"], [20, 32, 1, "enum_CFG_NEXT"], [32, 46, 1, "enum_CFG_NEXT"], [46, 95, 1, "enum_CFG_NEXT"], [46, 51, 1, "enum_CFG_NEXT"], [51, 67, 1, "enum_CFG_NEXT"], [67, 107, 1, "enum_CFG_NEXT"], [95, 107, 1, "enum_CFG_NEXT"], [107, 113, 1, "enum_CFG_NEXT"], [107, 118, 1, "enum_CFG_NEXT"], [118, 132, 1, "enum_CFG_NEXT"], [132, 137, 1, "enum_CFG_NEXT"], [137, 145, 1, "enum_CFG_NEXT"], [145, 143, 1, "enum_CFG_NEXT"], [143, 175, 1, "enum_CFG_NEXT"], [143, 148, 1, "enum_CFG_NEXT"], [148, 170, 1, "enum_CFG_NEXT"], [170, 143, 1, "enum_CFG_NEXT"], [175, 198, 1, "enum_CFG_NEXT"], [17, 2, 3, "enum_LAST_WRITE"], [21, 6, 3, "enum_LAST_WRITE"], [35, 17, 2, "enum_LAST_READ"], [35, 2, 3, "enum_LAST_WRITE"], [39, 21, 2, "enum_LAST_READ"], [39, 6, 3, "enum_LAST_WRITE"], [47, 4, 3, "enum_LAST_WRITE"], [57, 33, 3, "enum_LAST_WRITE"], [62, 47, 2, "enum_LAST_READ"], [62, 4, 3, "enum_LAST_WRITE"], [74, 52, 3, "enum_LAST_WRITE"], [77, 72, 2, "enum_LAST_READ"], [87, 62, 2, "enum_LAST_READ"], [87, 4, 3, "enum_LAST_WRITE"], [98, 47, 2, "enum_LAST_READ"], [98, 4, 3, "enum_LAST_WRITE"], [105, 68, 3, "enum_LAST_WRITE"], [105, 96, 3, "enum_LAST_WRITE"], [115, 35, 2, "enum_LAST_READ"], [115, 2, 3, "enum_LAST_WRITE"], [130, 39, 2, "enum_LAST_READ"], [130, 6, 3, "enum_LAST_WRITE"], [138, 72, 2, "enum_LAST_READ"], [138, 77, 3, "enum_LAST_WRITE"], [145, 105, 2, "enum_LAST_READ"], [145, 68, 3, "enum_LAST_WRITE"], [145, 96, 3, "enum_LAST_WRITE"], [143, 173, 2, "enum_LAST_READ"], [143, 143, 3, "enum_LAST_WRITE"], [149, 149, 2, "enum_LAST_READ"], [149, 133, 3, "enum_LAST_WRITE"], [153, 153, 2, "enum_LAST_READ"], [153, 35, 2, "enum_LAST_READ"], [153, 2, 3, "enum_LAST_WRITE"], [156, 156, 2, "enum_LAST_READ"], [156, 119, 3, "enum_LAST_WRITE"], [159, 123, 2, "enum_LAST_READ"], [159, 159, 2, "enum_LAST_READ"], [161, 72, 2, "enum_LAST_READ"], [161, 161, 2, "enum_LAST_READ"], [161, 171, 3, "enum_LAST_WRITE"], [161, 138, 3, "enum_LAST_WRITE"], [163, 173, 2, "enum_LAST_READ"], [163, 143, 3, "enum_LAST_WRITE"], [173, 163, 2, "enum_LAST_READ"], [173, 143, 3, "enum_LAST_WRITE"], [171, 161, 2, "enum_LAST_READ"], [171, 171, 3, "enum_LAST_WRITE"], [171, 138, 3, "enum_LAST_WRITE"], [176, 149, 2, "enum_LAST_READ"], [176, 133, 3, "enum_LAST_WRITE"], [180, 153, 2, "enum_LAST_READ"], [180, 35, 2, "enum_LAST_READ"], [180, 2, 3, "enum_LAST_WRITE"], [183, 156, 2, "enum_LAST_READ"], [183, 119, 3, "enum_LAST_WRITE"], [186, 123, 2, "enum_LAST_READ"], [186, 159, 2, "enum_LAST_READ"], [188, 173, 2, "enum_LAST_READ"], [188, 143, 3, "enum_LAST_WRITE"], [190, 57, 2, "enum_LAST_READ"], [190, 33, 3, "enum_LAST_WRITE"], [199, 176, 2, "enum_LAST_READ"], [199, 133, 3, "enum_LAST_WRITE"], [33, 39, 4, "enum_COMPUTED_FROM"], [33, 35, 4, "enum_COMPUTED_FROM"], [119, 130, 4, "enum_COMPUTED_FROM"], [119, 123, 4, "enum_COMPUTED_FROM"], [52, 62, 4, "enum_COMPUTED_FROM"], [52, 57, 4, "enum_COMPUTED_FROM"], [68, 72, 4, "enum_COMPUTED_FROM"], [68, 74, 4, "enum_COMPUTED_FROM"], [68, 77, 4, "enum_COMPUTED_FROM"], [68, 87, 4, "enum_COMPUTED_FROM"], [68, 79, 4, "enum_COMPUTED_FROM"], [96, 98, 4, "enum_COMPUTED_FROM"], [171, 173, 4, "enum_COMPUTED_FROM"]], "error_location": 188, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/fixstars/clpy.git", "old_path": "cupy/manipulation/split.py", "hash": "1f29bf157ef8289a6a16cfc19ea8737473623a7e", "code": "def array_split(ary: numpy.ndarray, indices_or_sections: Union[int, List[int]], axis: int = 0) -> List[numpy.ndarray]:\n    \"\"\"Splits an array into multiple sub arrays along a given axis.\n\n    This function is almost equivalent to :func:`cupy.split`. The only\n    difference is that this function allows an integer sections that does not\n    evenly divide the axis.\n\n    .. seealso:: :func:`cupy.split` for more detail, :func:`numpy.array_split`\n\n    \"\"\"\n    if ary.ndim <= axis:\n        raise IndexError('Axis exceeds ndim')\n    size: int = ary.shape[axis]\n\n    if numpy.isscalar(indices_or_sections):\n        each_size: int = (size - 1) // indices_or_sections + 1\n        indices: List[int] = [i * each_size\n                   for i in six.moves.range(1, indices_or_sections)]\n    else:\n        indices: List[int] = indices_or_sections\n\n    if len(indices) == 0:\n        return [ary]\n\n    skip: Tuple[slice, ...] = (slice(None),) * axis\n    ret: List[numpy.ndarray] = []\n    i: int = 0\n    for index in indices:\n        ret.append(ary[skip + (slice(i, index),)])\n        i = index\n    ret.append(ary[skip + (slice(index, size),)])\n\n    return ret\n", "rewrite": "ReplaceText(target='i' @(35,33)->(35,38))", "error_line": 30, "has_bug": true, "code_full": "from typing import List, Tuple, Union\n\nimport numpy\nimport six\n\n\ndef array_split(ary: numpy.ndarray, indices_or_sections: Union[int, List[int]], axis: int = 0) -> List[numpy.ndarray]:\n    \"\"\"Splits an array into multiple sub arrays along a given axis.\n\n    This function is almost equivalent to :func:`cupy.split`. The only\n    difference is that this function allows an integer sections that does not\n    evenly divide the axis.\n\n    .. seealso:: :func:`cupy.split` for more detail, :func:`numpy.array_split`\n\n    \"\"\"\n    if ary.ndim <= axis:\n        raise IndexError('Axis exceeds ndim')\n    size: int = ary.shape[axis]\n\n    if numpy.isscalar(indices_or_sections):\n        each_size: int = (size - 1) // indices_or_sections + 1\n        indices: List[int] = [i * each_size\n                   for i in six.moves.range(1, indices_or_sections)]\n    else:\n        indices: List[int] = indices_or_sections\n\n    if len(indices) == 0:\n        return [ary]\n\n    skip: Tuple[slice, ...] = (slice(None),) * axis\n    ret: List[numpy.ndarray] = []\n    i: int = 0\n    for index in indices:\n        ret.append(ary[skip + (slice(i, index),)])\n        i = index\n    ret.append(ary[skip + (slice(index, size),)])\n\n    return ret\n", "error_location_char": [1115, 1120], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def specscan_to_document_stream(", "scan", ",", "validate", "=", "False", ",", "check_in_broker", "=", "False", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n    Turn a single spec scan into a document stream\\n\\n    Parameters\\n    ----------\\n    scan : Specscan\\n    validate : bool\\n        True/False: Do/Don't validate the documents against their json schema\\n                    as defined in `event_model`\\n    check_in_broker : bool\\n        True/False: Do/Don't check to see if the documents already exist in\\n                    metadatastore\\n\\n    Yields\\n    -------\\n    document_name : {event_model.DocumentNames}\\n        One of the values of the `DocumentNames` enum\\n    document_dict : doct.Document\\n        A document that is identical to one that would come from the\\n        metadatastore find_* functions. It may or may not already exist in\\n        metadatastore.  You will need to call find_* yourself to determine\\n        if it does exist\\n    \"", "#NEWLINE#", "if", "(", "(", "mdsc", "is", "None", ")", "and", "validate", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "NotImplementedError", "(", "'It is not possible to use the `check_in_broker=True` unless you have metadatastore installed. Please re-run this function with `check_in_broker=False` or install metadatastore.'", ")", "#NEWLINE#", "#UNINDENT#", "kw", "=", "{", "'validate'", ":", "validate", ",", "'check_in_broker'", ":", "check_in_broker", "}", "#NEWLINE#", "(", "document_name", ",", "document", ")", "=", "next", "(", "to_run_start", "(", "scan", ",", "**", "kw", ")", ")", "#NEWLINE#", "start_uid", "=", "document", "[", "'uid'", "]", "#NEWLINE#", "(", "yield", "(", "document_name", ",", "document", ")", ")", "#NEWLINE#", "for", "(", "document_name", ",", "document", ")", "in", "to_baseline", "(", "scan", ",", "start_uid", ",", "**", "kw", ")", ":", "#NEWLINE#", "#INDENT#", "(", "yield", "(", "document_name", ",", "document", ")", ")", "#NEWLINE#", "#UNINDENT#", "for", "(", "document_name", ",", "document", ")", "in", "to_events", "(", "scan", ",", "start_uid", ",", "**", "kw", ")", ":", "#NEWLINE#", "#INDENT#", "(", "yield", "(", "document_name", ",", "document", ")", ")", "#NEWLINE#", "#UNINDENT#", "gen", "=", "to_stop", "(", "scan", ",", "start_uid", ",", "**", "kw", ")", "#NEWLINE#", "(", "document_name", ",", "document", ")", "=", "next", "(", "gen", ")", "#NEWLINE#", "(", "yield", "(", "document_name", ",", "document", ")", ")"], "edges": [[1, 5, 7, "enum_FIELD"], [14, 15, 7, "enum_FIELD"], [17, 24, 7, "enum_FIELD"], [36, 43, 7, "enum_FIELD"], [48, 56, 7, "enum_FIELD"], [65, 69, 7, "enum_FIELD"], [72, 74, 7, "enum_FIELD"], [88, 85, 7, "enum_FIELD"], [88, 92, 7, "enum_FIELD"], [117, 114, 7, "enum_FIELD"], [117, 121, 7, "enum_FIELD"], [139, 145, 7, "enum_FIELD"], [151, 159, 7, "enum_FIELD"], [162, 164, 7, "enum_FIELD"], [30, 32, 7, "enum_FIELD"], [56, 55, 7, "enum_FIELD"], [69, 68, 7, "enum_FIELD"], [69, 70, 7, "enum_FIELD"], [74, 77, 7, "enum_FIELD"], [92, 89, 7, "enum_FIELD"], [100, 102, 7, "enum_FIELD"], [121, 118, 7, "enum_FIELD"], [129, 131, 7, "enum_FIELD"], [145, 142, 7, "enum_FIELD"], [159, 158, 7, "enum_FIELD"], [164, 167, 7, "enum_FIELD"], [21, 20, 7, "enum_FIELD"], [32, 31, 7, "enum_FIELD"], [60, 57, 7, "enum_FIELD"], [95, 96, 7, "enum_FIELD"], [102, 105, 7, "enum_FIELD"], [124, 125, 7, "enum_FIELD"], [131, 134, 7, "enum_FIELD"], [148, 149, 7, "enum_FIELD"], [61, 62, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [25, 4, 10, "enum_LAST_LEXICAL_USE"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [42, 25, 10, "enum_LAST_LEXICAL_USE"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [46, 8, 10, "enum_LAST_LEXICAL_USE"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [59, 2, 10, "enum_LAST_LEXICAL_USE"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [62, 37, 10, "enum_LAST_LEXICAL_USE"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [68, 52, 10, "enum_LAST_LEXICAL_USE"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [76, 50, 10, "enum_LAST_LEXICAL_USE"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [78, 68, 10, "enum_LAST_LEXICAL_USE"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [84, 76, 10, "enum_LAST_LEXICAL_USE"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [86, 78, 10, "enum_LAST_LEXICAL_USE"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [91, 59, 10, "enum_LAST_LEXICAL_USE"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [93, 66, 10, "enum_LAST_LEXICAL_USE"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [96, 62, 10, "enum_LAST_LEXICAL_USE"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [104, 84, 10, "enum_LAST_LEXICAL_USE"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [106, 86, 10, "enum_LAST_LEXICAL_USE"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [113, 104, 10, "enum_LAST_LEXICAL_USE"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [115, 106, 10, "enum_LAST_LEXICAL_USE"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [120, 91, 10, "enum_LAST_LEXICAL_USE"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [122, 93, 10, "enum_LAST_LEXICAL_USE"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [125, 96, 10, "enum_LAST_LEXICAL_USE"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [133, 113, 10, "enum_LAST_LEXICAL_USE"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [135, 115, 10, "enum_LAST_LEXICAL_USE"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [144, 120, 10, "enum_LAST_LEXICAL_USE"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [146, 122, 10, "enum_LAST_LEXICAL_USE"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [149, 125, 10, "enum_LAST_LEXICAL_USE"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [153, 133, 10, "enum_LAST_LEXICAL_USE"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [155, 135, 10, "enum_LAST_LEXICAL_USE"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [158, 55, 10, "enum_LAST_LEXICAL_USE"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [160, 140, 10, "enum_LAST_LEXICAL_USE"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [166, 153, 10, "enum_LAST_LEXICAL_USE"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [168, 155, 10, "enum_LAST_LEXICAL_USE"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [6, 10, 1, "enum_CFG_NEXT"], [10, 1, 1, "enum_CFG_NEXT"], [5, 14, 1, "enum_CFG_NEXT"], [14, 24, 1, "enum_CFG_NEXT"], [24, 30, 1, "enum_CFG_NEXT"], [24, 36, 1, "enum_CFG_NEXT"], [36, 48, 1, "enum_CFG_NEXT"], [48, 65, 1, "enum_CFG_NEXT"], [65, 72, 1, "enum_CFG_NEXT"], [72, 92, 1, "enum_CFG_NEXT"], [92, 85, 1, "enum_CFG_NEXT"], [85, 121, 1, "enum_CFG_NEXT"], [85, 100, 1, "enum_CFG_NEXT"], [100, 85, 1, "enum_CFG_NEXT"], [121, 114, 1, "enum_CFG_NEXT"], [114, 129, 1, "enum_CFG_NEXT"], [114, 139, 1, "enum_CFG_NEXT"], [129, 114, 1, "enum_CFG_NEXT"], [139, 151, 1, "enum_CFG_NEXT"], [151, 162, 1, "enum_CFG_NEXT"], [25, 4, 3, "enum_LAST_WRITE"], [42, 25, 2, "enum_LAST_READ"], [42, 4, 3, "enum_LAST_WRITE"], [46, 8, 3, "enum_LAST_WRITE"], [59, 2, 3, "enum_LAST_WRITE"], [62, 37, 3, "enum_LAST_WRITE"], [68, 52, 3, "enum_LAST_WRITE"], [76, 50, 3, "enum_LAST_WRITE"], [78, 68, 2, "enum_LAST_READ"], [78, 52, 3, "enum_LAST_WRITE"], [91, 59, 2, "enum_LAST_READ"], [91, 2, 3, "enum_LAST_WRITE"], [93, 66, 3, "enum_LAST_WRITE"], [96, 62, 2, "enum_LAST_READ"], [96, 37, 3, "enum_LAST_WRITE"], [84, 104, 2, "enum_LAST_READ"], [84, 76, 2, "enum_LAST_READ"], [84, 50, 3, "enum_LAST_WRITE"], [84, 84, 3, "enum_LAST_WRITE"], [86, 106, 2, "enum_LAST_READ"], [86, 78, 2, "enum_LAST_READ"], [86, 52, 3, "enum_LAST_WRITE"], [86, 86, 3, "enum_LAST_WRITE"], [104, 104, 2, "enum_LAST_READ"], [104, 76, 2, "enum_LAST_READ"], [104, 84, 3, "enum_LAST_WRITE"], [106, 106, 2, "enum_LAST_READ"], [106, 78, 2, "enum_LAST_READ"], [106, 86, 3, "enum_LAST_WRITE"], [120, 91, 2, "enum_LAST_READ"], [120, 2, 3, "enum_LAST_WRITE"], [122, 93, 2, "enum_LAST_READ"], [122, 66, 3, "enum_LAST_WRITE"], [125, 96, 2, "enum_LAST_READ"], [125, 37, 3, "enum_LAST_WRITE"], [113, 133, 2, "enum_LAST_READ"], [113, 104, 2, "enum_LAST_READ"], [113, 76, 2, "enum_LAST_READ"], [113, 113, 3, "enum_LAST_WRITE"], [113, 84, 3, "enum_LAST_WRITE"], [115, 135, 2, "enum_LAST_READ"], [115, 106, 2, "enum_LAST_READ"], [115, 78, 2, "enum_LAST_READ"], [115, 86, 3, "enum_LAST_WRITE"], [115, 115, 3, "enum_LAST_WRITE"], [133, 133, 2, "enum_LAST_READ"], [133, 104, 2, "enum_LAST_READ"], [133, 76, 2, "enum_LAST_READ"], [133, 113, 3, "enum_LAST_WRITE"], [135, 135, 2, "enum_LAST_READ"], [135, 106, 2, "enum_LAST_READ"], [135, 78, 2, "enum_LAST_READ"], [135, 115, 3, "enum_LAST_WRITE"], [144, 120, 2, "enum_LAST_READ"], [144, 2, 3, "enum_LAST_WRITE"], [146, 122, 2, "enum_LAST_READ"], [146, 66, 3, "enum_LAST_WRITE"], [149, 125, 2, "enum_LAST_READ"], [149, 37, 3, "enum_LAST_WRITE"], [158, 55, 2, "enum_LAST_READ"], [160, 140, 3, "enum_LAST_WRITE"], [153, 133, 2, "enum_LAST_READ"], [153, 104, 2, "enum_LAST_READ"], [153, 76, 2, "enum_LAST_READ"], [153, 113, 3, "enum_LAST_WRITE"], [155, 135, 2, "enum_LAST_READ"], [155, 106, 2, "enum_LAST_READ"], [155, 78, 2, "enum_LAST_READ"], [155, 115, 3, "enum_LAST_WRITE"], [166, 133, 2, "enum_LAST_READ"], [166, 104, 2, "enum_LAST_READ"], [166, 76, 2, "enum_LAST_READ"], [166, 153, 3, "enum_LAST_WRITE"], [168, 135, 2, "enum_LAST_READ"], [168, 106, 2, "enum_LAST_READ"], [168, 78, 2, "enum_LAST_READ"], [168, 155, 3, "enum_LAST_WRITE"], [37, 42, 4, "enum_COMPUTED_FROM"], [37, 46, 4, "enum_COMPUTED_FROM"], [51, 55, 4, "enum_COMPUTED_FROM"], [51, 57, 4, "enum_COMPUTED_FROM"], [51, 59, 4, "enum_COMPUTED_FROM"], [51, 62, 4, "enum_COMPUTED_FROM"], [66, 68, 4, "enum_COMPUTED_FROM"], [140, 142, 4, "enum_COMPUTED_FROM"], [140, 144, 4, "enum_COMPUTED_FROM"], [140, 146, 4, "enum_COMPUTED_FROM"], [140, 149, 4, "enum_COMPUTED_FROM"], [154, 158, 4, "enum_COMPUTED_FROM"], [154, 160, 4, "enum_COMPUTED_FROM"]], "error_location": 25, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/NSLS-II/suitcase.git", "old_path": "suitcase/spec.py", "hash": "6ac4a42ce3699009318c55a18145eb8edfaaad48", "code": "def specscan_to_document_stream(scan: Specscan, validate: bool=False, check_in_broker: bool=False) -> Generator[Tuple[event_model.DocumentNames, doct.Document], None, None]:\n    \"\"\"\n    Turn a single spec scan into a document stream\n\n    Parameters\n    ----------\n    scan : Specscan\n    validate : bool\n        True/False: Do/Don't validate the documents against their json schema\n                    as defined in `event_model`\n    check_in_broker : bool\n        True/False: Do/Don't check to see if the documents already exist in\n                    metadatastore\n\n    Yields\n    -------\n    document_name : {event_model.DocumentNames}\n        One of the values of the `DocumentNames` enum\n    document_dict : doct.Document\n        A document that is identical to one that would come from the\n        metadatastore find_* functions. It may or may not already exist in\n        metadatastore.  You will need to call find_* yourself to determine\n        if it does exist\n    \"\"\"\n    if mdsc is None and validate:\n        raise NotImplementedError(\n            \"It is not possible to use the `check_in_broker=True` unless you \"\n            \"have metadatastore installed. Please re-run this function with \"\n            \"`check_in_broker=False` or install metadatastore.\"\n        )\n    # do the conversion!\n    kw = {'validate': validate, 'check_in_broker': check_in_broker}\n    document_name, document = next(to_run_start(scan, **kw))\n    start_uid = document['uid']\n    # yield the start document\n    yield document_name, document\n    # yield the baseline descriptor and its event\n    for document_name, document in to_baseline(scan, start_uid, **kw):\n        yield document_name, document\n    for document_name, document in to_events(scan, start_uid, **kw):\n        # yield the descriptor and events\n        yield document_name, document\n    # make sure the run was finished before it was stopped\n    # yield the stop document\n    gen = to_stop(scan, start_uid, **kw)\n    document_name, document = next(gen)\n    yield document_name, document\n", "rewrite": "ReplaceText(target='check_in_broker' @(515,24)->(515,32))", "error_line": 24, "has_bug": true, "code_full": "from typing import Any, Dict, Generator, Tuple\n\nmdsc: Any = None\n\n\nclass Specscan:\n    pass\n\n\nclass event_model:\n    class DocumentNames:\n        pass\n\nclass doct:\n    class Document(Dict):\n        pass\n\ndef to_run_start(scan: Specscan, validate: bool=False, check_in_broker: bool=False) -> Generator[Tuple[event_model.DocumentNames, doct.Document], None, None]:\n    yield event_model.DocumentNames(), doct.Document()\n\n\ndef to_baseline(scan: Specscan, start_uid: str, validate: bool=False, check_in_broker: bool=False) -> Generator[Tuple[event_model.DocumentNames, doct.Document], None, None]:\n    yield event_model.DocumentNames(), doct.Document()\n\n\ndef to_events(scan: Specscan, start_uid: str, validate: bool=False, check_in_broker: bool=False) -> Generator[Tuple[event_model.DocumentNames, doct.Document], None, None]:\n    yield event_model.DocumentNames(), doct.Document()\n\n\ndef to_stop(scan: Specscan, start_uid: str, validate: bool=False, check_in_broker: bool=False) -> Generator[Tuple[event_model.DocumentNames, doct.Document], None, None]:\n    yield event_model.DocumentNames(), doct.Document()\n\n\ndef specscan_to_document_stream(scan: Specscan, validate: bool=False, check_in_broker: bool=False) -> Generator[Tuple[event_model.DocumentNames, doct.Document], None, None]:\n    \"\"\"\n    Turn a single spec scan into a document stream\n\n    Parameters\n    ----------\n    scan : Specscan\n    validate : bool\n        True/False: Do/Don't validate the documents against their json schema\n                    as defined in `event_model`\n    check_in_broker : bool\n        True/False: Do/Don't check to see if the documents already exist in\n                    metadatastore\n\n    Yields\n    -------\n    document_name : {event_model.DocumentNames}\n        One of the values of the `DocumentNames` enum\n    document_dict : doct.Document\n        A document that is identical to one that would come from the\n        metadatastore find_* functions. It may or may not already exist in\n        metadatastore.  You will need to call find_* yourself to determine\n        if it does exist\n    \"\"\"\n    if mdsc is None and validate:\n        raise NotImplementedError(\n            \"It is not possible to use the `check_in_broker=True` unless you \"\n            \"have metadatastore installed. Please re-run this function with \"\n            \"`check_in_broker=False` or install metadatastore.\"\n        )\n    # do the conversion!\n    kw = {'validate': validate, 'check_in_broker': check_in_broker}\n    document_name, document = next(to_run_start(scan, **kw))\n    start_uid = document['uid']\n    # yield the start document\n    yield document_name, document\n    # yield the baseline descriptor and its event\n    for document_name, document in to_baseline(scan, start_uid, **kw):\n        yield document_name, document\n    for document_name, document in to_events(scan, start_uid, **kw):\n        # yield the descriptor and events\n        yield document_name, document\n    # make sure the run was finished before it was stopped\n    # yield the stop document\n    gen = to_stop(scan, start_uid, **kw)\n    document_name, document = next(gen)\n    yield document_name, document\n", "error_location_char": [1003, 1011], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def translate_doc(", "row", ",", "translation_names", ",", "default_values", ")", "->", "dict", ":", "#NEWLINE#", "#INDENT#", "def translate(", "key", ",", "value", ")", ":", "#NEWLINE#", "#INDENT#", "translated_key", "=", "_translate_key", "(", "key", ",", "translation_names", ")", "#NEWLINE#", "translated_value", "=", "(", "value", "[", "0", "]", "if", "(", "type", "(", "value", ")", "is", "list", ")", "else", "value", ")", "#NEWLINE#", "if", "(", "'.'", "in", "translated_key", ")", ":", "#NEWLINE#", "#INDENT#", "translated_value", "=", "reduce", "(", "(", "lambda", "i", ",", "acc", ":", "(", "acc", ",", "i", ")", ")", ",", "reversed", "(", "(", "translated_key", ".", "split", "(", "'.'", ")", "[", "1", ":", "]", "+", "[", "value", "]", ")", ")", ")", "#NEWLINE#", "translated_key", "=", "translated_key", ".", "split", "(", "'.'", ")", "[", "0", "]", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "translated_key", "==", "'_id'", ")", ":", "#NEWLINE#", "#INDENT#", "return", "(", "key", ",", "value", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "return", "(", "translated_key", ",", "translated_value", ")", "#NEWLINE#", "#UNINDENT#", "defaults", "=", "default_values", ".", "copy", "(", ")", "#NEWLINE#", "defaults", ".", "update", "(", "row", ")", "#NEWLINE#", "translated", "=", "tuple", "(", "(", "translate", "(", "k", ",", "v", ")", "for", "(", "k", ",", "v", ")", "in", "defaults", ".", "items", "(", ")", ")", ")", "#NEWLINE#", "return", "_tuples_to_dict", "(", "translated", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [1, 9, 7, "enum_FIELD"], [17, 15, 7, "enum_FIELD"], [139, 145, 7, "enum_FIELD"], [147, 151, 7, "enum_FIELD"], [154, 158, 7, "enum_FIELD"], [181, 183, 7, "enum_FIELD"], [20, 26, 7, "enum_FIELD"], [29, 37, 7, "enum_FIELD"], [56, 53, 7, "enum_FIELD"], [132, 135, 7, "enum_FIELD"], [145, 143, 7, "enum_FIELD"], [151, 149, 7, "enum_FIELD"], [158, 157, 7, "enum_FIELD"], [183, 182, 7, "enum_FIELD"], [26, 23, 7, "enum_FIELD"], [37, 43, 7, "enum_FIELD"], [37, 34, 7, "enum_FIELD"], [37, 47, 7, "enum_FIELD"], [53, 52, 7, "enum_FIELD"], [58, 75, 7, "enum_FIELD"], [96, 105, 7, "enum_FIELD"], [114, 117, 7, "enum_FIELD"], [143, 142, 7, "enum_FIELD"], [149, 148, 7, "enum_FIELD"], [159, 163, 7, "enum_FIELD"], [43, 40, 7, "enum_FIELD"], [34, 33, 7, "enum_FIELD"], [34, 35, 7, "enum_FIELD"], [75, 61, 7, "enum_FIELD"], [105, 102, 7, "enum_FIELD"], [105, 106, 7, "enum_FIELD"], [117, 116, 7, "enum_FIELD"], [123, 126, 7, "enum_FIELD"], [163, 160, 7, "enum_FIELD"], [166, 169, 7, "enum_FIELD"], [166, 176, 7, "enum_FIELD"], [40, 39, 7, "enum_FIELD"], [64, 66, 7, "enum_FIELD"], [64, 71, 7, "enum_FIELD"], [77, 76, 7, "enum_FIELD"], [102, 100, 7, "enum_FIELD"], [176, 174, 7, "enum_FIELD"], [89, 85, 7, "enum_FIELD"], [89, 90, 7, "enum_FIELD"], [100, 99, 7, "enum_FIELD"], [174, 173, 7, "enum_FIELD"], [85, 82, 7, "enum_FIELD"], [85, 87, 7, "enum_FIELD"], [82, 80, 7, "enum_FIELD"], [87, 86, 7, "enum_FIELD"], [80, 79, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [25, 14, 10, "enum_LAST_LEXICAL_USE"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [27, 4, 10, "enum_LAST_LEXICAL_USE"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [33, 16, 10, "enum_LAST_LEXICAL_USE"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [41, 33, 10, "enum_LAST_LEXICAL_USE"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [47, 41, 10, "enum_LAST_LEXICAL_USE"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [54, 21, 10, "enum_LAST_LEXICAL_USE"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 58, 9, "enum_NEXT_SYNTAX"], [59, 30, 10, "enum_LAST_LEXICAL_USE"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [70, 67, 10, "enum_LAST_LEXICAL_USE"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [72, 65, 10, "enum_LAST_LEXICAL_USE"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [79, 54, 10, "enum_LAST_LEXICAL_USE"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [91, 47, 10, "enum_LAST_LEXICAL_USE"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [97, 79, 10, "enum_LAST_LEXICAL_USE"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [99, 97, 10, "enum_LAST_LEXICAL_USE"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [116, 99, 10, "enum_LAST_LEXICAL_USE"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [125, 25, 10, "enum_LAST_LEXICAL_USE"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [127, 91, 10, "enum_LAST_LEXICAL_USE"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [134, 116, 10, "enum_LAST_LEXICAL_USE"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [136, 59, 10, "enum_LAST_LEXICAL_USE"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [142, 6, 10, "enum_LAST_LEXICAL_USE"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [148, 140, 10, "enum_LAST_LEXICAL_USE"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [152, 2, 10, "enum_LAST_LEXICAL_USE"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [168, 162, 10, "enum_LAST_LEXICAL_USE"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [170, 164, 10, "enum_LAST_LEXICAL_USE"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [173, 148, 10, "enum_LAST_LEXICAL_USE"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [184, 155, 10, "enum_LAST_LEXICAL_USE"], [183, 184, 9, "enum_NEXT_SYNTAX"], [184, 185, 9, "enum_NEXT_SYNTAX"], [3, 17, 1, "enum_CFG_NEXT"], [17, 139, 1, "enum_CFG_NEXT"], [15, 20, 1, "enum_CFG_NEXT"], [20, 29, 1, "enum_CFG_NEXT"], [29, 53, 1, "enum_CFG_NEXT"], [53, 117, 1, "enum_CFG_NEXT"], [53, 58, 1, "enum_CFG_NEXT"], [58, 96, 1, "enum_CFG_NEXT"], [96, 132, 1, "enum_CFG_NEXT"], [117, 123, 1, "enum_CFG_NEXT"], [117, 132, 1, "enum_CFG_NEXT"], [139, 147, 1, "enum_CFG_NEXT"], [147, 154, 1, "enum_CFG_NEXT"], [154, 181, 1, "enum_CFG_NEXT"], [25, 14, 3, "enum_LAST_WRITE"], [41, 16, 3, "enum_LAST_WRITE"], [33, 41, 2, "enum_LAST_READ"], [33, 16, 3, "enum_LAST_WRITE"], [47, 33, 2, "enum_LAST_READ"], [47, 16, 3, "enum_LAST_WRITE"], [54, 21, 3, "enum_LAST_WRITE"], [70, 67, 3, "enum_LAST_WRITE"], [72, 65, 3, "enum_LAST_WRITE"], [79, 54, 2, "enum_LAST_READ"], [79, 21, 3, "enum_LAST_WRITE"], [91, 47, 2, "enum_LAST_READ"], [91, 16, 3, "enum_LAST_WRITE"], [59, 30, 3, "enum_LAST_WRITE"], [99, 79, 2, "enum_LAST_READ"], [99, 21, 3, "enum_LAST_WRITE"], [97, 99, 2, "enum_LAST_READ"], [97, 21, 3, "enum_LAST_WRITE"], [116, 54, 2, "enum_LAST_READ"], [116, 21, 3, "enum_LAST_WRITE"], [125, 25, 2, "enum_LAST_READ"], [125, 14, 3, "enum_LAST_WRITE"], [127, 47, 2, "enum_LAST_READ"], [127, 16, 3, "enum_LAST_WRITE"], [134, 99, 2, "enum_LAST_READ"], [134, 116, 2, "enum_LAST_READ"], [134, 21, 3, "enum_LAST_WRITE"], [134, 97, 3, "enum_LAST_WRITE"], [136, 30, 3, "enum_LAST_WRITE"], [136, 59, 3, "enum_LAST_WRITE"], [142, 6, 3, "enum_LAST_WRITE"], [148, 140, 3, "enum_LAST_WRITE"], [152, 2, 3, "enum_LAST_WRITE"], [160, 17, 3, "enum_LAST_WRITE"], [168, 162, 2, "enum_LAST_READ"], [170, 164, 2, "enum_LAST_READ"], [173, 148, 2, "enum_LAST_READ"], [173, 140, 3, "enum_LAST_WRITE"], [184, 155, 3, "enum_LAST_WRITE"], [140, 142, 4, "enum_COMPUTED_FROM"], [155, 157, 4, "enum_COMPUTED_FROM"], [155, 160, 4, "enum_COMPUTED_FROM"], [155, 162, 4, "enum_COMPUTED_FROM"], [155, 164, 4, "enum_COMPUTED_FROM"], [155, 168, 4, "enum_COMPUTED_FROM"], [155, 170, 4, "enum_COMPUTED_FROM"], [155, 173, 4, "enum_COMPUTED_FROM"], [21, 23, 4, "enum_COMPUTED_FROM"], [21, 25, 4, "enum_COMPUTED_FROM"], [21, 27, 4, "enum_COMPUTED_FROM"], [30, 47, 4, "enum_COMPUTED_FROM"], [30, 44, 4, "enum_COMPUTED_FROM"], [30, 33, 4, "enum_COMPUTED_FROM"], [30, 39, 4, "enum_COMPUTED_FROM"], [30, 41, 4, "enum_COMPUTED_FROM"], [59, 61, 4, "enum_COMPUTED_FROM"], [59, 76, 4, "enum_COMPUTED_FROM"], [59, 65, 4, "enum_COMPUTED_FROM"], [59, 67, 4, "enum_COMPUTED_FROM"], [59, 70, 4, "enum_COMPUTED_FROM"], [59, 72, 4, "enum_COMPUTED_FROM"], [59, 91, 4, "enum_COMPUTED_FROM"], [59, 79, 4, "enum_COMPUTED_FROM"], [97, 99, 4, "enum_COMPUTED_FROM"], [163, 17, 11, "enum_CALLS"], [132, 163, 5, "enum_RETURNS_TO"], [123, 163, 5, "enum_RETURNS_TO"], [162, 14, 6, "enum_FORMAL_ARG_NAME"], [164, 16, 6, "enum_FORMAL_ARG_NAME"]], "error_location": 91, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/ICIJ/solr2es.git", "old_path": "solr2es/__main__.py", "hash": "e4d9cad0605a2a3048b237167f8523b02a47fc22", "code": "def translate_doc(row: Dict[str, Any], translation_names: Dict[str, str], default_values: Dict[str, Any]) -> Dict[str, Any]:\n    def translate(key, value):\n        translated_key: str = _translate_key(key, translation_names)\n        translated_value: Any = value[0] if type(value) is list else value\n\n        if '.' in translated_key:\n            translated_value: Any = reduce(lambda i, acc: (acc, i), reversed(translated_key.split('.')[1:] + [value]))\n            translated_key: str = translated_key.split('.')[0]\n        elif translated_key == '_id':\n            return key, value\n        return translated_key, translated_value\n\n    defaults: Dict[str, Any] = default_values.copy()\n    defaults.update(row)\n    translated: Tuple[Tuple[str, Any], ...] = tuple(translate(k, v) for k, v in defaults.items())\n    return _tuples_to_dict(translated)\n", "rewrite": "ReplaceText(target='translated_value' @(161,105)->(161,110))", "error_line": 6, "has_bug": true, "code_full": "from functools import reduce\nfrom typing import Any, Dict, Tuple\n\n\ndef _translate_key(key: str, translation_names: Dict[str, str]) -> str:\n    return \"\"\n\n\ndef _tuples_to_dict(tuples: Tuple[Tuple[str, Any], ...]) -> Dict[str, Any]:\n    return {}\n\n\ndef translate_doc(row: Dict[str, Any], translation_names: Dict[str, str], default_values: Dict[str, Any]) -> Dict[str, Any]:\n    def translate(key, value):\n        translated_key: str = _translate_key(key, translation_names)\n        translated_value: Any = value[0] if type(value) is list else value\n\n        if '.' in translated_key:\n            translated_value: Any = reduce(lambda i, acc: (acc, i), reversed(translated_key.split('.')[1:] + [value]))\n            translated_key: str = translated_key.split('.')[0]\n        elif translated_key == '_id':\n            return key, value\n        return translated_key, translated_value\n\n    defaults: Dict[str, Any] = default_values.copy()\n    defaults.update(row)\n    translated: Tuple[Tuple[str, Any], ...] = tuple(translate(k, v) for k, v in defaults.items())\n    return _tuples_to_dict(translated)\n", "error_location_char": [445, 450], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def __init__(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "base_path", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", "#NEWLINE#", "jar_path", "=", "os", ".", "path", ".", "join", "(", "base_path", ",", "METEOR_JAR", ")", "#NEWLINE#", "gz_path", "=", "os", ".", "path", ".", "join", "(", "base_path", ",", "os", ".", "path", ".", "basename", "(", "METEOR_GZ_URL", ")", ")", "#NEWLINE#", "if", "(", "not", "os", ".", "path", ".", "isfile", "(", "jar_path", ")", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "not", "os", ".", "path", ".", "isfile", "(", "jar_path", ")", ")", ":", "#NEWLINE#", "#INDENT#", "download_from_url", "(", "METEOR_GZ_URL", ",", "gz_path", ")", "#NEWLINE#", "#UNINDENT#", "tar", "=", "tarfile", ".", "open", "(", "gz_path", ",", "'r'", ")", "#NEWLINE#", "tar", ".", "extractall", "(", "path", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", ")", "#NEWLINE#", "tar", ".", "close", "(", ")", "#NEWLINE#", "os", ".", "remove", "(", "gz_path", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "meteor_cmd", "=", "[", "'java'", ",", "'-jar'", ",", "'-Xmx2G'", ",", "METEOR_JAR", ",", "'-'", ",", "'-'", ",", "'-stdio'", ",", "'-l'", ",", "'en'", ",", "'-norm'", "]", "#NEWLINE#", "self", ".", "meteor_p", "=", "subprocess", ".", "Popen", "(", "self", ".", "meteor_cmd", ",", "cwd", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", ",", "stdin", "=", "subprocess", ".", "PIPE", ",", "stdout", "=", "subprocess", ".", "PIPE", ",", "stderr", "=", "subprocess", ".", "PIPE", ")", "#NEWLINE#", "self", ".", "lock", "=", "threading", ".", "Lock", "(", ")"], "edges": [[6, 14, 7, "enum_FIELD"], [24, 34, 7, "enum_FIELD"], [37, 47, 7, "enum_FIELD"], [58, 60, 7, "enum_FIELD"], [143, 158, 7, "enum_FIELD"], [169, 199, 7, "enum_FIELD"], [218, 226, 7, "enum_FIELD"], [14, 12, 7, "enum_FIELD"], [34, 30, 7, "enum_FIELD"], [47, 43, 7, "enum_FIELD"], [60, 66, 7, "enum_FIELD"], [73, 75, 7, "enum_FIELD"], [95, 103, 7, "enum_FIELD"], [106, 110, 7, "enum_FIELD"], [129, 133, 7, "enum_FIELD"], [135, 139, 7, "enum_FIELD"], [145, 144, 7, "enum_FIELD"], [171, 170, 7, "enum_FIELD"], [199, 175, 7, "enum_FIELD"], [220, 219, 7, "enum_FIELD"], [226, 224, 7, "enum_FIELD"], [12, 10, 7, "enum_FIELD"], [20, 18, 7, "enum_FIELD"], [30, 28, 7, "enum_FIELD"], [43, 41, 7, "enum_FIELD"], [53, 51, 7, "enum_FIELD"], [66, 64, 7, "enum_FIELD"], [75, 81, 7, "enum_FIELD"], [87, 91, 7, "enum_FIELD"], [103, 99, 7, "enum_FIELD"], [110, 108, 7, "enum_FIELD"], [133, 131, 7, "enum_FIELD"], [139, 137, 7, "enum_FIELD"], [175, 174, 7, "enum_FIELD"], [179, 178, 7, "enum_FIELD"], [182, 189, 7, "enum_FIELD"], [200, 203, 7, "enum_FIELD"], [206, 209, 7, "enum_FIELD"], [212, 215, 7, "enum_FIELD"], [224, 223, 7, "enum_FIELD"], [10, 9, 7, "enum_FIELD"], [18, 16, 7, "enum_FIELD"], [28, 27, 7, "enum_FIELD"], [41, 40, 7, "enum_FIELD"], [51, 49, 7, "enum_FIELD"], [64, 62, 7, "enum_FIELD"], [81, 79, 7, "enum_FIELD"], [91, 88, 7, "enum_FIELD"], [99, 98, 7, "enum_FIELD"], [108, 107, 7, "enum_FIELD"], [111, 118, 7, "enum_FIELD"], [131, 130, 7, "enum_FIELD"], [137, 136, 7, "enum_FIELD"], [189, 187, 7, "enum_FIELD"], [203, 202, 7, "enum_FIELD"], [209, 208, 7, "enum_FIELD"], [215, 214, 7, "enum_FIELD"], [16, 15, 7, "enum_FIELD"], [49, 48, 7, "enum_FIELD"], [62, 61, 7, "enum_FIELD"], [79, 77, 7, "enum_FIELD"], [118, 116, 7, "enum_FIELD"], [187, 185, 7, "enum_FIELD"], [195, 193, 7, "enum_FIELD"], [77, 76, 7, "enum_FIELD"], [116, 114, 7, "enum_FIELD"], [124, 122, 7, "enum_FIELD"], [185, 184, 7, "enum_FIELD"], [193, 191, 7, "enum_FIELD"], [114, 113, 7, "enum_FIELD"], [122, 120, 7, "enum_FIELD"], [191, 190, 7, "enum_FIELD"], [120, 119, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [15, 9, 10, "enum_LAST_LEXICAL_USE"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [27, 15, 10, "enum_LAST_LEXICAL_USE"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [33, 7, 10, "enum_LAST_LEXICAL_USE"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [40, 27, 10, "enum_LAST_LEXICAL_USE"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [46, 33, 10, "enum_LAST_LEXICAL_USE"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [48, 40, 10, "enum_LAST_LEXICAL_USE"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [61, 48, 10, "enum_LAST_LEXICAL_USE"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [67, 25, 10, "enum_LAST_LEXICAL_USE"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [76, 61, 10, "enum_LAST_LEXICAL_USE"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [82, 67, 10, "enum_LAST_LEXICAL_USE"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [90, 54, 10, "enum_LAST_LEXICAL_USE"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [92, 38, 10, "enum_LAST_LEXICAL_USE"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [102, 92, 10, "enum_LAST_LEXICAL_USE"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [107, 96, 10, "enum_LAST_LEXICAL_USE"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [113, 76, 10, "enum_LAST_LEXICAL_USE"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [119, 113, 10, "enum_LAST_LEXICAL_USE"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [125, 21, 10, "enum_LAST_LEXICAL_USE"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [130, 107, 10, "enum_LAST_LEXICAL_USE"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [136, 119, 10, "enum_LAST_LEXICAL_USE"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [140, 102, 10, "enum_LAST_LEXICAL_USE"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 143, 9, "enum_NEXT_SYNTAX"], [144, 2, 10, "enum_LAST_LEXICAL_USE"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [155, 35, 10, "enum_LAST_LEXICAL_USE"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [170, 144, 10, "enum_LAST_LEXICAL_USE"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [178, 170, 10, "enum_LAST_LEXICAL_USE"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [184, 136, 10, "enum_LAST_LEXICAL_USE"], [183, 184, 9, "enum_NEXT_SYNTAX"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [187, 188, 9, "enum_NEXT_SYNTAX"], [188, 189, 9, "enum_NEXT_SYNTAX"], [190, 184, 10, "enum_LAST_LEXICAL_USE"], [189, 190, 9, "enum_NEXT_SYNTAX"], [190, 191, 9, "enum_NEXT_SYNTAX"], [191, 192, 9, "enum_NEXT_SYNTAX"], [192, 193, 9, "enum_NEXT_SYNTAX"], [193, 194, 9, "enum_NEXT_SYNTAX"], [194, 195, 9, "enum_NEXT_SYNTAX"], [196, 125, 10, "enum_LAST_LEXICAL_USE"], [195, 196, 9, "enum_NEXT_SYNTAX"], [196, 197, 9, "enum_NEXT_SYNTAX"], [197, 198, 9, "enum_NEXT_SYNTAX"], [198, 199, 9, "enum_NEXT_SYNTAX"], [199, 200, 9, "enum_NEXT_SYNTAX"], [200, 201, 9, "enum_NEXT_SYNTAX"], [202, 174, 10, "enum_LAST_LEXICAL_USE"], [201, 202, 9, "enum_NEXT_SYNTAX"], [202, 203, 9, "enum_NEXT_SYNTAX"], [203, 204, 9, "enum_NEXT_SYNTAX"], [204, 205, 9, "enum_NEXT_SYNTAX"], [205, 206, 9, "enum_NEXT_SYNTAX"], [206, 207, 9, "enum_NEXT_SYNTAX"], [208, 202, 10, "enum_LAST_LEXICAL_USE"], [207, 208, 9, "enum_NEXT_SYNTAX"], [208, 209, 9, "enum_NEXT_SYNTAX"], [209, 210, 9, "enum_NEXT_SYNTAX"], [210, 211, 9, "enum_NEXT_SYNTAX"], [211, 212, 9, "enum_NEXT_SYNTAX"], [212, 213, 9, "enum_NEXT_SYNTAX"], [214, 208, 10, "enum_LAST_LEXICAL_USE"], [213, 214, 9, "enum_NEXT_SYNTAX"], [214, 215, 9, "enum_NEXT_SYNTAX"], [215, 216, 9, "enum_NEXT_SYNTAX"], [216, 217, 9, "enum_NEXT_SYNTAX"], [217, 218, 9, "enum_NEXT_SYNTAX"], [219, 178, 10, "enum_LAST_LEXICAL_USE"], [218, 219, 9, "enum_NEXT_SYNTAX"], [219, 220, 9, "enum_NEXT_SYNTAX"], [220, 221, 9, "enum_NEXT_SYNTAX"], [221, 222, 9, "enum_NEXT_SYNTAX"], [222, 223, 9, "enum_NEXT_SYNTAX"], [223, 224, 9, "enum_NEXT_SYNTAX"], [224, 225, 9, "enum_NEXT_SYNTAX"], [225, 226, 9, "enum_NEXT_SYNTAX"], [226, 227, 9, "enum_NEXT_SYNTAX"], [6, 24, 1, "enum_CFG_NEXT"], [24, 37, 1, "enum_CFG_NEXT"], [37, 60, 1, "enum_CFG_NEXT"], [60, 143, 1, "enum_CFG_NEXT"], [60, 75, 1, "enum_CFG_NEXT"], [75, 87, 1, "enum_CFG_NEXT"], [75, 95, 1, "enum_CFG_NEXT"], [87, 95, 1, "enum_CFG_NEXT"], [95, 106, 1, "enum_CFG_NEXT"], [106, 129, 1, "enum_CFG_NEXT"], [129, 135, 1, "enum_CFG_NEXT"], [135, 143, 1, "enum_CFG_NEXT"], [143, 169, 1, "enum_CFG_NEXT"], [169, 218, 1, "enum_CFG_NEXT"], [15, 9, 2, "enum_LAST_READ"], [27, 15, 2, "enum_LAST_READ"], [33, 7, 3, "enum_LAST_WRITE"], [40, 27, 2, "enum_LAST_READ"], [46, 33, 2, "enum_LAST_READ"], [46, 7, 3, "enum_LAST_WRITE"], [48, 40, 2, "enum_LAST_READ"], [61, 48, 2, "enum_LAST_READ"], [67, 25, 3, "enum_LAST_WRITE"], [76, 61, 2, "enum_LAST_READ"], [82, 67, 2, "enum_LAST_READ"], [82, 25, 3, "enum_LAST_WRITE"], [90, 54, 2, "enum_LAST_READ"], [92, 38, 3, "enum_LAST_WRITE"], [102, 92, 2, "enum_LAST_READ"], [102, 38, 3, "enum_LAST_WRITE"], [107, 96, 3, "enum_LAST_WRITE"], [113, 76, 2, "enum_LAST_READ"], [119, 113, 2, "enum_LAST_READ"], [125, 21, 2, "enum_LAST_READ"], [130, 107, 2, "enum_LAST_READ"], [130, 96, 3, "enum_LAST_WRITE"], [136, 119, 2, "enum_LAST_READ"], [140, 102, 2, "enum_LAST_READ"], [140, 38, 3, "enum_LAST_WRITE"], [155, 35, 2, "enum_LAST_READ"], [144, 2, 3, "enum_LAST_WRITE"], [178, 144, 2, "enum_LAST_READ"], [178, 2, 3, "enum_LAST_WRITE"], [184, 61, 2, "enum_LAST_READ"], [184, 136, 2, "enum_LAST_READ"], [190, 184, 2, "enum_LAST_READ"], [196, 21, 2, "enum_LAST_READ"], [196, 125, 2, "enum_LAST_READ"], [202, 174, 2, "enum_LAST_READ"], [208, 202, 2, "enum_LAST_READ"], [214, 208, 2, "enum_LAST_READ"], [170, 178, 2, "enum_LAST_READ"], [170, 2, 3, "enum_LAST_WRITE"], [219, 170, 2, "enum_LAST_READ"], [219, 2, 3, "enum_LAST_WRITE"], [7, 21, 4, "enum_COMPUTED_FROM"], [7, 9, 4, "enum_COMPUTED_FROM"], [7, 15, 4, "enum_COMPUTED_FROM"], [25, 33, 4, "enum_COMPUTED_FROM"], [25, 35, 4, "enum_COMPUTED_FROM"], [25, 27, 4, "enum_COMPUTED_FROM"], [38, 46, 4, "enum_COMPUTED_FROM"], [38, 54, 4, "enum_COMPUTED_FROM"], [38, 40, 4, "enum_COMPUTED_FROM"], [38, 48, 4, "enum_COMPUTED_FROM"], [145, 155, 4, "enum_COMPUTED_FROM"], [171, 174, 4, "enum_COMPUTED_FROM"], [171, 178, 4, "enum_COMPUTED_FROM"], [171, 202, 4, "enum_COMPUTED_FROM"], [171, 208, 4, "enum_COMPUTED_FROM"], [171, 214, 4, "enum_COMPUTED_FROM"], [171, 196, 4, "enum_COMPUTED_FROM"], [171, 184, 4, "enum_COMPUTED_FROM"], [171, 190, 4, "enum_COMPUTED_FROM"], [220, 223, 4, "enum_COMPUTED_FROM"], [96, 102, 4, "enum_COMPUTED_FROM"], [96, 98, 4, "enum_COMPUTED_FROM"]], "error_location": 82, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/aimagelab/speaksee.git", "old_path": "speaksee/evaluation/meteor/meteor.py", "hash": "895b3fd57b934b75ad683bfba2a77f76a54a9570", "code": "def __init__(self):\n    base_path: str = os.path.dirname(os.path.abspath(__file__))\n    jar_path: str = os.path.join(base_path, METEOR_JAR)\n    gz_path: str = os.path.join(base_path, os.path.basename(METEOR_GZ_URL))\n    if not os.path.isfile(jar_path):\n        if not os.path.isfile(jar_path):\n            download_from_url(METEOR_GZ_URL, gz_path)\n        tar: tarfile.TarFile = tarfile.open(gz_path, \"r\")\n        tar.extractall(path=os.path.dirname(os.path.abspath(__file__)))\n        tar.close()\n        os.remove(gz_path)\n\n    self.meteor_cmd = ['java', '-jar', '-Xmx2G', METEOR_JAR,             '-', '-', '-stdio', '-l', 'en', '-norm']\n    self.meteor_p = subprocess.Popen(self.meteor_cmd,             cwd=os.path.dirname(os.path.abspath(__file__)),             stdin=subprocess.PIPE,             stdout=subprocess.PIPE,             stderr=subprocess.PIPE)\n    # Used to guarantee thread safety\n    self.lock = threading.Lock()\n", "rewrite": "ReplaceText(target='gz_path' @(19,34)->(19,42))", "error_line": 5, "has_bug": true, "code_full": "import os\nimport subprocess\nimport tarfile\nimport threading\nfrom typing import List\n\n\ndef download_from_url(url: str, path: str):\n    pass\n\n\nMETEOR_GZ_URL: str = \"\"\nMETEOR_JAR: str = \"\"\n\n\nclass Meteor:\n    meteor_cmd: List[str]\n    meteor_p: subprocess.Popen\n    lock: threading.Lock\n\n    def __init__(self):\n        base_path: str = os.path.dirname(os.path.abspath(__file__))\n        jar_path: str = os.path.join(base_path, METEOR_JAR)\n        gz_path: str = os.path.join(base_path, os.path.basename(METEOR_GZ_URL))\n        if not os.path.isfile(jar_path):\n            if not os.path.isfile(jar_path):\n                download_from_url(METEOR_GZ_URL, gz_path)\n            tar: tarfile.TarFile = tarfile.open(gz_path, \"r\")\n            tar.extractall(path=os.path.dirname(os.path.abspath(__file__)))\n            tar.close()\n            os.remove(gz_path)\n\n        self.meteor_cmd = ['java', '-jar', '-Xmx2G', METEOR_JAR,                 '-', '-', '-stdio', '-l', 'en', '-norm']\n        self.meteor_p = subprocess.Popen(self.meteor_cmd,                 cwd=os.path.dirname(os.path.abspath(__file__)),                 stdin=subprocess.PIPE,                 stdout=subprocess.PIPE,                 stderr=subprocess.PIPE)\n        # Used to guarantee thread safety\n        self.lock = threading.Lock()\n", "error_location_char": [283, 291], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def get_message(", "self", ",", "code", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    \u83b7\u53d6\u9519\u8bef\u4ecb\u7ecd\\n    :param code: \u9519\u8bef\u7801\\n    :return:\\n    '", "#NEWLINE#", "resource_code", "=", "self", ".", "map", ".", "get", "(", "code", ")", "#NEWLINE#", "if", "(", "not", "resource_code", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "resource_code", "!=", "0", ")", ":", "#NEWLINE#", "#INDENT#", "warnings", ".", "warn", "(", "'\u672a\u77e5\u9519\u8bef\u7801'", ",", "DeprecationWarning", ")", "#NEWLINE#", "#UNINDENT#", "return", "''", "#NEWLINE#", "#UNINDENT#", "return", "resource_code", ".", "get_message", "(", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [8, 9, 7, "enum_FIELD"], [10, 18, 7, "enum_FIELD"], [22, 24, 7, "enum_FIELD"], [53, 57, 7, "enum_FIELD"], [18, 16, 7, "enum_FIELD"], [24, 25, 7, "enum_FIELD"], [30, 33, 7, "enum_FIELD"], [49, 50, 7, "enum_FIELD"], [57, 55, 7, "enum_FIELD"], [16, 14, 7, "enum_FIELD"], [33, 32, 7, "enum_FIELD"], [38, 44, 7, "enum_FIELD"], [55, 54, 7, "enum_FIELD"], [14, 13, 7, "enum_FIELD"], [44, 40, 7, "enum_FIELD"], [40, 39, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [13, 2, 10, "enum_LAST_LEXICAL_USE"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [19, 4, 10, "enum_LAST_LEXICAL_USE"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [25, 11, 10, "enum_LAST_LEXICAL_USE"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [32, 25, 10, "enum_LAST_LEXICAL_USE"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 53, 9, "enum_NEXT_SYNTAX"], [54, 32, 10, "enum_LAST_LEXICAL_USE"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [3, 8, 1, "enum_CFG_NEXT"], [8, 10, 1, "enum_CFG_NEXT"], [10, 24, 1, "enum_CFG_NEXT"], [24, 33, 1, "enum_CFG_NEXT"], [24, 53, 1, "enum_CFG_NEXT"], [33, 38, 1, "enum_CFG_NEXT"], [33, 49, 1, "enum_CFG_NEXT"], [38, 49, 1, "enum_CFG_NEXT"], [13, 2, 3, "enum_LAST_WRITE"], [19, 4, 3, "enum_LAST_WRITE"], [25, 11, 3, "enum_LAST_WRITE"], [32, 25, 2, "enum_LAST_READ"], [32, 11, 3, "enum_LAST_WRITE"], [54, 25, 2, "enum_LAST_READ"], [54, 11, 3, "enum_LAST_WRITE"], [11, 19, 4, "enum_COMPUTED_FROM"], [11, 13, 4, "enum_COMPUTED_FROM"]], "error_location": 32, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/wplct/yzs-work.git", "old_path": "yzs/tastypie_extend/response_code.py", "hash": "b7c79866bf15c8a7a30b242f80944e8853331048", "code": "def get_message(self, code) -> str:\n    \"\"\"\n    \u83b7\u53d6\u9519\u8bef\u4ecb\u7ecd\n    :param code: \u9519\u8bef\u7801\n    :return:\n    \"\"\"\n    resource_code: Optional[ResourceCode] = self.map.get(code)\n    if not resource_code:\n        if resource_code != 0:\n            warnings.warn('\u672a\u77e5\u9519\u8bef\u7801', DeprecationWarning)\n        return \"\"\n    return resource_code.get_message()\n", "rewrite": "ReplaceText(target='code' @(38,15)->(38,28))", "error_line": 8, "has_bug": true, "code_full": "import warnings\nfrom typing import Dict, Optional\n\n\nclass ResourceCode:\n    def get_message(self) -> str:\n        return \"\"\n\n\nclass ResourceCodeManage:\n    map: Dict[int, ResourceCode]\n\n    def get_message(self, code) -> str:\n        \"\"\"\n        \u83b7\u53d6\u9519\u8bef\u4ecb\u7ecd\n        :param code: \u9519\u8bef\u7801\n        :return:\n        \"\"\"\n        resource_code: Optional[ResourceCode] = self.map.get(code)\n        if not resource_code:\n            if resource_code != 0:\n                warnings.warn('\u672a\u77e5\u9519\u8bef\u7801', DeprecationWarning)\n            return \"\"\n        return resource_code.get_message()\n", "error_location_char": [197, 210], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def convert_all_validator(", "self", ",", "schema_node", ",", "validator", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    :type schema_node: colander.SchemaNode\\n    :type validator: colander.interfaces.Validator\\n    :rtype: dict\\n    '", "#NEWLINE#", "converted", "=", "None", "#NEWLINE#", "if", "isinstance", "(", "validator", ",", "colander", ".", "All", ")", ":", "#NEWLINE#", "#INDENT#", "converted", "=", "{", "}", "#NEWLINE#", "for", "v", "in", "validator", ".", "validators", ":", "#NEWLINE#", "#INDENT#", "ret", "=", "self", "(", "schema_node", ",", "validator", ")", "#NEWLINE#", "converted", ".", "update", "(", "ret", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "return", "converted"], "edges": [[1, 3, 7, "enum_FIELD"], [10, 11, 7, "enum_FIELD"], [12, 15, 7, "enum_FIELD"], [17, 21, 7, "enum_FIELD"], [61, 62, 7, "enum_FIELD"], [21, 18, 7, "enum_FIELD"], [28, 31, 7, "enum_FIELD"], [36, 35, 7, "enum_FIELD"], [36, 38, 7, "enum_FIELD"], [23, 22, 7, "enum_FIELD"], [38, 37, 7, "enum_FIELD"], [42, 48, 7, "enum_FIELD"], [51, 55, 7, "enum_FIELD"], [48, 45, 7, "enum_FIELD"], [55, 53, 7, "enum_FIELD"], [53, 52, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [20, 6, 10, "enum_LAST_LEXICAL_USE"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 28, 9, "enum_NEXT_SYNTAX"], [29, 13, 10, "enum_LAST_LEXICAL_USE"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [37, 20, 10, "enum_LAST_LEXICAL_USE"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [45, 2, 10, "enum_LAST_LEXICAL_USE"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [47, 4, 10, "enum_LAST_LEXICAL_USE"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [49, 37, 10, "enum_LAST_LEXICAL_USE"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [52, 29, 10, "enum_LAST_LEXICAL_USE"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [56, 43, 10, "enum_LAST_LEXICAL_USE"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 61, 9, "enum_NEXT_SYNTAX"], [62, 52, 10, "enum_LAST_LEXICAL_USE"], [61, 62, 9, "enum_NEXT_SYNTAX"], [3, 10, 1, "enum_CFG_NEXT"], [10, 12, 1, "enum_CFG_NEXT"], [12, 21, 1, "enum_CFG_NEXT"], [21, 28, 1, "enum_CFG_NEXT"], [21, 61, 1, "enum_CFG_NEXT"], [28, 38, 1, "enum_CFG_NEXT"], [38, 35, 1, "enum_CFG_NEXT"], [35, 42, 1, "enum_CFG_NEXT"], [35, 61, 1, "enum_CFG_NEXT"], [42, 51, 1, "enum_CFG_NEXT"], [51, 35, 1, "enum_CFG_NEXT"], [20, 6, 3, "enum_LAST_WRITE"], [29, 13, 3, "enum_LAST_WRITE"], [37, 20, 2, "enum_LAST_READ"], [37, 6, 3, "enum_LAST_WRITE"], [35, 35, 3, "enum_LAST_WRITE"], [45, 45, 2, "enum_LAST_READ"], [45, 2, 3, "enum_LAST_WRITE"], [47, 47, 2, "enum_LAST_READ"], [47, 4, 3, "enum_LAST_WRITE"], [49, 37, 2, "enum_LAST_READ"], [49, 49, 2, "enum_LAST_READ"], [49, 6, 3, "enum_LAST_WRITE"], [43, 56, 2, "enum_LAST_READ"], [43, 43, 3, "enum_LAST_WRITE"], [52, 52, 2, "enum_LAST_READ"], [52, 29, 3, "enum_LAST_WRITE"], [56, 56, 2, "enum_LAST_READ"], [56, 43, 3, "enum_LAST_WRITE"], [62, 52, 2, "enum_LAST_READ"], [62, 13, 3, "enum_LAST_WRITE"], [62, 29, 3, "enum_LAST_WRITE"], [43, 45, 4, "enum_COMPUTED_FROM"], [43, 47, 4, "enum_COMPUTED_FROM"], [43, 49, 4, "enum_COMPUTED_FROM"]], "error_location": 49, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/gjo/colander_jsonschema.git", "old_path": "colander_jsonschema/__init__.py", "hash": "14d7446b85b8faf56705047146a62f10981c0bf7", "code": "def convert_all_validator(self, schema_node: colander.SchemaNode, validator: colander.interfaces.Validator) -> Optional[Dict]:\n    \"\"\"\n    :type schema_node: colander.SchemaNode\n    :type validator: colander.interfaces.Validator\n    :rtype: dict\n    \"\"\"\n    converted: Optional[Dict] = None\n    if isinstance(validator, colander.All):\n        converted: Dict = {}\n        for v in validator.validators:\n            ret = self(schema_node, validator)\n            converted.update(ret)\n    return converted\n", "rewrite": "ReplaceText(target='v' @(127,40)->(127,49))", "error_line": 10, "has_bug": true, "code_full": "from typing import Any, Dict, Optional\n\n\nclass colander:\n    class SchemaNode:\n        pass\n\n    class interfaces:\n        class Validator:\n            pass\n\n    class All:\n        validators: Any\n\n\nclass ValidatorConverter:\n\n    def __call__(self, schema_node: colander.SchemaNode, validator: colander.interfaces.Validator) -> Dict:\n        return {}\n\n    def convert_all_validator(self, schema_node: colander.SchemaNode, validator: colander.interfaces.Validator) -> Optional[Dict]:\n        \"\"\"\n        :type schema_node: colander.SchemaNode\n        :type validator: colander.interfaces.Validator\n        :rtype: dict\n        \"\"\"\n        converted: Optional[Dict] = None\n        if isinstance(validator, colander.All):\n            converted: Dict = {}\n            for v in validator.validators:\n                ret = self(schema_node, validator)\n                converted.update(ret)\n        return converted\n", "error_location_char": [439, 448], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def update(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'Update state and attributes.'", "#NEWLINE#", "self", ".", "refresh_spotify_instance", "(", ")", "#NEWLINE#", "if", "self", ".", "_oauth", ".", "is_token_expired", "(", "self", ".", "_token_info", ")", ":", "#NEWLINE#", "#INDENT#", "_LOGGER", ".", "warning", "(", "'Spotify failed to update, token expired.'", ")", "#NEWLINE#", "return", "#NEWLINE#", "#UNINDENT#", "player_devices", "=", "self", ".", "_player", ".", "devices", "(", ")", "#NEWLINE#", "if", "(", "player_devices", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "devices", "=", "player_devices", ".", "get", "(", "'devices'", ")", "#NEWLINE#", "if", "(", "devices", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "old_devices", "=", "self", ".", "_devices", "#NEWLINE#", "self", ".", "_devices", "=", "{", "self", ".", "_aliases", ".", "get", "(", "device", ".", "get", "(", "'id'", ")", ",", "device", ".", "get", "(", "'name'", ")", ")", ":", "device", ".", "get", "(", "'id'", ")", "for", "device", "in", "devices", "}", "#NEWLINE#", "device_diff", "=", "{", "name", ":", "id", "for", "(", "name", ",", "id", ")", "in", "self", ".", "_devices", ".", "items", "(", ")", "if", "(", "old_devices", ".", "get", "(", "name", ",", "None", ")", "is", "None", ")", "}", "#NEWLINE#", "if", "device_diff", ":", "#NEWLINE#", "#INDENT#", "_LOGGER", ".", "info", "(", "'New Devices: %s'", ",", "str", "(", "device_diff", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "current", "=", "self", ".", "_player", ".", "current_playback", "(", ")", "#NEWLINE#", "if", "(", "current", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "_state", "=", "STATE_IDLE", "#NEWLINE#", "return", "#NEWLINE#", "#UNINDENT#", "item", "=", "current", ".", "get", "(", "'item'", ")", "#NEWLINE#", "if", "item", ":", "#NEWLINE#", "#INDENT#", "self", ".", "_album", "=", "item", ".", "get", "(", "'album'", ")", ".", "get", "(", "'name'", ")", "#NEWLINE#", "self", ".", "_title", "=", "item", ".", "get", "(", "'name'", ")", "#NEWLINE#", "self", ".", "_artist", "=", "', '", ".", "join", "(", "[", "artist", ".", "get", "(", "'name'", ")", "for", "artist", "in", "item", ".", "get", "(", "'artists'", ")", "]", ")", "#NEWLINE#", "self", ".", "_uri", "=", "current", ".", "get", "(", "'uri'", ")", "#NEWLINE#", "images", "=", "item", ".", "get", "(", "'album'", ")", ".", "get", "(", "'images'", ")", "#NEWLINE#", "self", ".", "_image_url", "=", "(", "images", "[", "0", "]", ".", "get", "(", "'url'", ")", "if", "images", "else", "None", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "_state", "=", "STATE_PAUSED", "#NEWLINE#", "if", "current", ".", "get", "(", "'is_playing'", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "_state", "=", "STATE_PLAYING", "#NEWLINE#", "#UNINDENT#", "self", ".", "_shuffle", "=", "current", ".", "get", "(", "'shuffle_state'", ")", "#NEWLINE#", "device", "=", "current", ".", "get", "(", "'device'", ")", "#NEWLINE#", "if", "(", "device", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "_state", "=", "STATE_IDLE", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "device", ".", "get", "(", "'volume_percent'", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "_volume", "=", "(", "device", ".", "get", "(", "'volume_percent'", ")", "/", "100", ")", "#NEWLINE#", "#UNINDENT#", "if", "device", ".", "get", "(", "'name'", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "_current_device", "=", "device", ".", "get", "(", "'name'", ")"], "edges": [[6, 7, 7, "enum_FIELD"], [8, 12, 7, "enum_FIELD"], [15, 21, 7, "enum_FIELD"], [38, 46, 7, "enum_FIELD"], [49, 52, 7, "enum_FIELD"], [174, 182, 7, "enum_FIELD"], [185, 188, 7, "enum_FIELD"], [202, 208, 7, "enum_FIELD"], [212, 213, 7, "enum_FIELD"], [316, 321, 7, "enum_FIELD"], [323, 327, 7, "enum_FIELD"], [339, 347, 7, "enum_FIELD"], [350, 356, 7, "enum_FIELD"], [366, 363, 7, "enum_FIELD"], [12, 10, 7, "enum_FIELD"], [21, 19, 7, "enum_FIELD"], [28, 32, 7, "enum_FIELD"], [46, 44, 7, "enum_FIELD"], [52, 51, 7, "enum_FIELD"], [57, 63, 7, "enum_FIELD"], [67, 70, 7, "enum_FIELD"], [182, 180, 7, "enum_FIELD"], [188, 187, 7, "enum_FIELD"], [193, 198, 7, "enum_FIELD"], [208, 206, 7, "enum_FIELD"], [216, 229, 7, "enum_FIELD"], [232, 240, 7, "enum_FIELD"], [243, 251, 7, "enum_FIELD"], [270, 278, 7, "enum_FIELD"], [281, 292, 7, "enum_FIELD"], [295, 310, 7, "enum_FIELD"], [318, 317, 7, "enum_FIELD"], [327, 325, 7, "enum_FIELD"], [332, 337, 7, "enum_FIELD"], [341, 340, 7, "enum_FIELD"], [347, 345, 7, "enum_FIELD"], [356, 354, 7, "enum_FIELD"], [363, 362, 7, "enum_FIELD"], [368, 373, 7, "enum_FIELD"], [380, 384, 7, "enum_FIELD"], [406, 410, 7, "enum_FIELD"], [10, 9, 7, "enum_FIELD"], [19, 17, 7, "enum_FIELD"], [23, 22, 7, "enum_FIELD"], [32, 30, 7, "enum_FIELD"], [44, 42, 7, "enum_FIELD"], [63, 61, 7, "enum_FIELD"], [70, 69, 7, "enum_FIELD"], [75, 79, 7, "enum_FIELD"], [81, 107, 7, "enum_FIELD"], [119, 124, 7, "enum_FIELD"], [155, 156, 7, "enum_FIELD"], [180, 178, 7, "enum_FIELD"], [195, 194, 7, "enum_FIELD"], [206, 205, 7, "enum_FIELD"], [218, 217, 7, "enum_FIELD"], [229, 227, 7, "enum_FIELD"], [234, 233, 7, "enum_FIELD"], [240, 238, 7, "enum_FIELD"], [245, 244, 7, "enum_FIELD"], [251, 249, 7, "enum_FIELD"], [272, 271, 7, "enum_FIELD"], [278, 276, 7, "enum_FIELD"], [292, 290, 7, "enum_FIELD"], [297, 296, 7, "enum_FIELD"], [310, 311, 7, "enum_FIELD"], [310, 307, 7, "enum_FIELD"], [310, 313, 7, "enum_FIELD"], [325, 324, 7, "enum_FIELD"], [334, 333, 7, "enum_FIELD"], [345, 344, 7, "enum_FIELD"], [354, 353, 7, "enum_FIELD"], [370, 369, 7, "enum_FIELD"], [384, 382, 7, "enum_FIELD"], [389, 401, 7, "enum_FIELD"], [410, 408, 7, "enum_FIELD"], [415, 423, 7, "enum_FIELD"], [17, 16, 7, "enum_FIELD"], [30, 29, 7, "enum_FIELD"], [42, 41, 7, "enum_FIELD"], [61, 60, 7, "enum_FIELD"], [79, 78, 7, "enum_FIELD"], [83, 82, 7, "enum_FIELD"], [107, 99, 7, "enum_FIELD"], [107, 111, 7, "enum_FIELD"], [124, 123, 7, "enum_FIELD"], [124, 125, 7, "enum_FIELD"], [159, 165, 7, "enum_FIELD"], [178, 177, 7, "enum_FIELD"], [227, 224, 7, "enum_FIELD"], [238, 237, 7, "enum_FIELD"], [249, 248, 7, "enum_FIELD"], [252, 256, 7, "enum_FIELD"], [276, 275, 7, "enum_FIELD"], [290, 287, 7, "enum_FIELD"], [307, 305, 7, "enum_FIELD"], [382, 381, 7, "enum_FIELD"], [391, 390, 7, "enum_FIELD"], [401, 398, 7, "enum_FIELD"], [401, 402, 7, "enum_FIELD"], [408, 407, 7, "enum_FIELD"], [417, 416, 7, "enum_FIELD"], [423, 421, 7, "enum_FIELD"], [99, 90, 7, "enum_FIELD"], [111, 109, 7, "enum_FIELD"], [114, 115, 7, "enum_FIELD"], [114, 117, 7, "enum_FIELD"], [132, 129, 7, "enum_FIELD"], [132, 138, 7, "enum_FIELD"], [165, 161, 7, "enum_FIELD"], [224, 222, 7, "enum_FIELD"], [256, 254, 7, "enum_FIELD"], [259, 260, 7, "enum_FIELD"], [259, 265, 7, "enum_FIELD"], [287, 285, 7, "enum_FIELD"], [305, 302, 7, "enum_FIELD"], [398, 396, 7, "enum_FIELD"], [421, 420, 7, "enum_FIELD"], [90, 88, 7, "enum_FIELD"], [96, 94, 7, "enum_FIELD"], [103, 101, 7, "enum_FIELD"], [109, 108, 7, "enum_FIELD"], [138, 136, 7, "enum_FIELD"], [150, 147, 7, "enum_FIELD"], [161, 160, 7, "enum_FIELD"], [167, 166, 7, "enum_FIELD"], [222, 221, 7, "enum_FIELD"], [254, 253, 7, "enum_FIELD"], [265, 263, 7, "enum_FIELD"], [285, 284, 7, "enum_FIELD"], [302, 301, 7, "enum_FIELD"], [302, 303, 7, "enum_FIELD"], [396, 395, 7, "enum_FIELD"], [88, 87, 7, "enum_FIELD"], [94, 93, 7, "enum_FIELD"], [101, 100, 7, "enum_FIELD"], [136, 134, 7, "enum_FIELD"], [147, 143, 7, "enum_FIELD"], [263, 262, 7, "enum_FIELD"], [134, 133, 7, "enum_FIELD"], [143, 142, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [9, 2, 10, "enum_LAST_LEXICAL_USE"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 15, 9, "enum_NEXT_SYNTAX"], [16, 9, 10, "enum_LAST_LEXICAL_USE"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [22, 16, 10, "enum_LAST_LEXICAL_USE"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 36, 9, "enum_NEXT_SYNTAX"], [36, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [41, 22, 10, "enum_LAST_LEXICAL_USE"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [51, 39, 10, "enum_LAST_LEXICAL_USE"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [60, 51, 10, "enum_LAST_LEXICAL_USE"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [69, 58, 10, "enum_LAST_LEXICAL_USE"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [78, 41, 10, "enum_LAST_LEXICAL_USE"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [82, 78, 10, "enum_LAST_LEXICAL_USE"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [87, 82, 10, "enum_LAST_LEXICAL_USE"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [100, 93, 10, "enum_LAST_LEXICAL_USE"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [108, 100, 10, "enum_LAST_LEXICAL_USE"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [115, 108, 10, "enum_LAST_LEXICAL_USE"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [117, 69, 10, "enum_LAST_LEXICAL_USE"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [128, 123, 10, "enum_LAST_LEXICAL_USE"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [130, 125, 10, "enum_LAST_LEXICAL_USE"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [133, 87, 10, "enum_LAST_LEXICAL_USE"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [142, 76, 10, "enum_LAST_LEXICAL_USE"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [146, 128, 10, "enum_LAST_LEXICAL_USE"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 155, 9, "enum_NEXT_SYNTAX"], [156, 120, 10, "enum_LAST_LEXICAL_USE"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 159, 9, "enum_NEXT_SYNTAX"], [160, 29, 10, "enum_LAST_LEXICAL_USE"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [168, 156, 10, "enum_LAST_LEXICAL_USE"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [175, 176, 9, "enum_NEXT_SYNTAX"], [177, 133, 10, "enum_LAST_LEXICAL_USE"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [187, 175, 10, "enum_LAST_LEXICAL_USE"], [186, 187, 9, "enum_NEXT_SYNTAX"], [187, 188, 9, "enum_NEXT_SYNTAX"], [188, 189, 9, "enum_NEXT_SYNTAX"], [189, 190, 9, "enum_NEXT_SYNTAX"], [190, 191, 9, "enum_NEXT_SYNTAX"], [191, 193, 9, "enum_NEXT_SYNTAX"], [194, 177, 10, "enum_LAST_LEXICAL_USE"], [193, 194, 9, "enum_NEXT_SYNTAX"], [194, 195, 9, "enum_NEXT_SYNTAX"], [195, 196, 9, "enum_NEXT_SYNTAX"], [196, 197, 9, "enum_NEXT_SYNTAX"], [197, 198, 9, "enum_NEXT_SYNTAX"], [198, 200, 9, "enum_NEXT_SYNTAX"], [200, 202, 9, "enum_NEXT_SYNTAX"], [202, 203, 9, "enum_NEXT_SYNTAX"], [203, 204, 9, "enum_NEXT_SYNTAX"], [205, 187, 10, "enum_LAST_LEXICAL_USE"], [204, 205, 9, "enum_NEXT_SYNTAX"], [205, 206, 9, "enum_NEXT_SYNTAX"], [206, 207, 9, "enum_NEXT_SYNTAX"], [207, 208, 9, "enum_NEXT_SYNTAX"], [208, 209, 9, "enum_NEXT_SYNTAX"], [209, 210, 9, "enum_NEXT_SYNTAX"], [210, 212, 9, "enum_NEXT_SYNTAX"], [213, 203, 10, "enum_LAST_LEXICAL_USE"], [212, 213, 9, "enum_NEXT_SYNTAX"], [213, 214, 9, "enum_NEXT_SYNTAX"], [214, 216, 9, "enum_NEXT_SYNTAX"], [217, 194, 10, "enum_LAST_LEXICAL_USE"], [216, 217, 9, "enum_NEXT_SYNTAX"], [217, 218, 9, "enum_NEXT_SYNTAX"], [218, 219, 9, "enum_NEXT_SYNTAX"], [219, 220, 9, "enum_NEXT_SYNTAX"], [221, 213, 10, "enum_LAST_LEXICAL_USE"], [220, 221, 9, "enum_NEXT_SYNTAX"], [221, 222, 9, "enum_NEXT_SYNTAX"], [222, 223, 9, "enum_NEXT_SYNTAX"], [223, 224, 9, "enum_NEXT_SYNTAX"], [224, 225, 9, "enum_NEXT_SYNTAX"], [225, 226, 9, "enum_NEXT_SYNTAX"], [226, 227, 9, "enum_NEXT_SYNTAX"], [227, 228, 9, "enum_NEXT_SYNTAX"], [228, 229, 9, "enum_NEXT_SYNTAX"], [229, 230, 9, "enum_NEXT_SYNTAX"], [230, 231, 9, "enum_NEXT_SYNTAX"], [231, 232, 9, "enum_NEXT_SYNTAX"], [233, 217, 10, "enum_LAST_LEXICAL_USE"], [232, 233, 9, "enum_NEXT_SYNTAX"], [233, 234, 9, "enum_NEXT_SYNTAX"], [234, 235, 9, "enum_NEXT_SYNTAX"], [235, 236, 9, "enum_NEXT_SYNTAX"], [237, 221, 10, "enum_LAST_LEXICAL_USE"], [236, 237, 9, "enum_NEXT_SYNTAX"], [237, 238, 9, "enum_NEXT_SYNTAX"], [238, 239, 9, "enum_NEXT_SYNTAX"], [239, 240, 9, "enum_NEXT_SYNTAX"], [240, 241, 9, "enum_NEXT_SYNTAX"], [241, 242, 9, "enum_NEXT_SYNTAX"], [242, 243, 9, "enum_NEXT_SYNTAX"], [244, 233, 10, "enum_LAST_LEXICAL_USE"], [243, 244, 9, "enum_NEXT_SYNTAX"], [244, 245, 9, "enum_NEXT_SYNTAX"], [245, 246, 9, "enum_NEXT_SYNTAX"], [246, 247, 9, "enum_NEXT_SYNTAX"], [247, 248, 9, "enum_NEXT_SYNTAX"], [248, 249, 9, "enum_NEXT_SYNTAX"], [249, 250, 9, "enum_NEXT_SYNTAX"], [250, 251, 9, "enum_NEXT_SYNTAX"], [251, 252, 9, "enum_NEXT_SYNTAX"], [252, 253, 9, "enum_NEXT_SYNTAX"], [253, 254, 9, "enum_NEXT_SYNTAX"], [254, 255, 9, "enum_NEXT_SYNTAX"], [255, 256, 9, "enum_NEXT_SYNTAX"], [256, 257, 9, "enum_NEXT_SYNTAX"], [257, 258, 9, "enum_NEXT_SYNTAX"], [258, 259, 9, "enum_NEXT_SYNTAX"], [260, 253, 10, "enum_LAST_LEXICAL_USE"], [259, 260, 9, "enum_NEXT_SYNTAX"], [260, 261, 9, "enum_NEXT_SYNTAX"], [262, 237, 10, "enum_LAST_LEXICAL_USE"], [261, 262, 9, "enum_NEXT_SYNTAX"], [262, 263, 9, "enum_NEXT_SYNTAX"], [263, 264, 9, "enum_NEXT_SYNTAX"], [264, 265, 9, "enum_NEXT_SYNTAX"], [265, 266, 9, "enum_NEXT_SYNTAX"], [266, 267, 9, "enum_NEXT_SYNTAX"], [267, 268, 9, "enum_NEXT_SYNTAX"], [268, 269, 9, "enum_NEXT_SYNTAX"], [269, 270, 9, "enum_NEXT_SYNTAX"], [271, 244, 10, "enum_LAST_LEXICAL_USE"], [270, 271, 9, "enum_NEXT_SYNTAX"], [271, 272, 9, "enum_NEXT_SYNTAX"], [272, 273, 9, "enum_NEXT_SYNTAX"], [273, 274, 9, "enum_NEXT_SYNTAX"], [275, 205, 10, "enum_LAST_LEXICAL_USE"], [274, 275, 9, "enum_NEXT_SYNTAX"], [275, 276, 9, "enum_NEXT_SYNTAX"], [276, 277, 9, "enum_NEXT_SYNTAX"], [277, 278, 9, "enum_NEXT_SYNTAX"], [278, 279, 9, "enum_NEXT_SYNTAX"], [279, 280, 9, "enum_NEXT_SYNTAX"], [280, 281, 9, "enum_NEXT_SYNTAX"], [281, 282, 9, "enum_NEXT_SYNTAX"], [282, 283, 9, "enum_NEXT_SYNTAX"], [284, 262, 10, "enum_LAST_LEXICAL_USE"], [283, 284, 9, "enum_NEXT_SYNTAX"], [284, 285, 9, "enum_NEXT_SYNTAX"], [285, 286, 9, "enum_NEXT_SYNTAX"], [286, 287, 9, "enum_NEXT_SYNTAX"], [287, 288, 9, "enum_NEXT_SYNTAX"], [288, 289, 9, "enum_NEXT_SYNTAX"], [289, 290, 9, "enum_NEXT_SYNTAX"], [290, 291, 9, "enum_NEXT_SYNTAX"], [291, 292, 9, "enum_NEXT_SYNTAX"], [292, 293, 9, "enum_NEXT_SYNTAX"], [293, 294, 9, "enum_NEXT_SYNTAX"], [294, 295, 9, "enum_NEXT_SYNTAX"], [296, 271, 10, "enum_LAST_LEXICAL_USE"], [295, 296, 9, "enum_NEXT_SYNTAX"], [296, 297, 9, "enum_NEXT_SYNTAX"], [297, 298, 9, "enum_NEXT_SYNTAX"], [298, 299, 9, "enum_NEXT_SYNTAX"], [299, 300, 9, "enum_NEXT_SYNTAX"], [301, 282, 10, "enum_LAST_LEXICAL_USE"], [300, 301, 9, "enum_NEXT_SYNTAX"], [301, 302, 9, "enum_NEXT_SYNTAX"], [302, 303, 9, "enum_NEXT_SYNTAX"], [303, 304, 9, "enum_NEXT_SYNTAX"], [304, 305, 9, "enum_NEXT_SYNTAX"], [305, 306, 9, "enum_NEXT_SYNTAX"], [306, 307, 9, "enum_NEXT_SYNTAX"], [307, 308, 9, "enum_NEXT_SYNTAX"], [308, 309, 9, "enum_NEXT_SYNTAX"], [309, 310, 9, "enum_NEXT_SYNTAX"], [311, 301, 10, "enum_LAST_LEXICAL_USE"], [310, 311, 9, "enum_NEXT_SYNTAX"], [311, 312, 9, "enum_NEXT_SYNTAX"], [312, 313, 9, "enum_NEXT_SYNTAX"], [313, 314, 9, "enum_NEXT_SYNTAX"], [314, 316, 9, "enum_NEXT_SYNTAX"], [317, 296, 10, "enum_LAST_LEXICAL_USE"], [316, 317, 9, "enum_NEXT_SYNTAX"], [317, 318, 9, "enum_NEXT_SYNTAX"], [318, 319, 9, "enum_NEXT_SYNTAX"], [319, 320, 9, "enum_NEXT_SYNTAX"], [320, 321, 9, "enum_NEXT_SYNTAX"], [321, 323, 9, "enum_NEXT_SYNTAX"], [324, 275, 10, "enum_LAST_LEXICAL_USE"], [323, 324, 9, "enum_NEXT_SYNTAX"], [324, 325, 9, "enum_NEXT_SYNTAX"], [325, 326, 9, "enum_NEXT_SYNTAX"], [326, 327, 9, "enum_NEXT_SYNTAX"], [327, 328, 9, "enum_NEXT_SYNTAX"], [328, 329, 9, "enum_NEXT_SYNTAX"], [329, 330, 9, "enum_NEXT_SYNTAX"], [330, 332, 9, "enum_NEXT_SYNTAX"], [333, 317, 10, "enum_LAST_LEXICAL_USE"], [332, 333, 9, "enum_NEXT_SYNTAX"], [333, 334, 9, "enum_NEXT_SYNTAX"], [334, 335, 9, "enum_NEXT_SYNTAX"], [335, 336, 9, "enum_NEXT_SYNTAX"], [336, 337, 9, "enum_NEXT_SYNTAX"], [337, 339, 9, "enum_NEXT_SYNTAX"], [340, 333, 10, "enum_LAST_LEXICAL_USE"], [339, 340, 9, "enum_NEXT_SYNTAX"], [340, 341, 9, "enum_NEXT_SYNTAX"], [341, 342, 9, "enum_NEXT_SYNTAX"], [342, 343, 9, "enum_NEXT_SYNTAX"], [344, 324, 10, "enum_LAST_LEXICAL_USE"], [343, 344, 9, "enum_NEXT_SYNTAX"], [344, 345, 9, "enum_NEXT_SYNTAX"], [345, 346, 9, "enum_NEXT_SYNTAX"], [346, 347, 9, "enum_NEXT_SYNTAX"], [347, 348, 9, "enum_NEXT_SYNTAX"], [348, 349, 9, "enum_NEXT_SYNTAX"], [349, 350, 9, "enum_NEXT_SYNTAX"], [351, 115, 10, "enum_LAST_LEXICAL_USE"], [350, 351, 9, "enum_NEXT_SYNTAX"], [351, 352, 9, "enum_NEXT_SYNTAX"], [353, 344, 10, "enum_LAST_LEXICAL_USE"], [352, 353, 9, "enum_NEXT_SYNTAX"], [353, 354, 9, "enum_NEXT_SYNTAX"], [354, 355, 9, "enum_NEXT_SYNTAX"], [355, 356, 9, "enum_NEXT_SYNTAX"], [356, 357, 9, "enum_NEXT_SYNTAX"], [357, 358, 9, "enum_NEXT_SYNTAX"], [358, 360, 9, "enum_NEXT_SYNTAX"], [360, 361, 9, "enum_NEXT_SYNTAX"], [362, 351, 10, "enum_LAST_LEXICAL_USE"], [361, 362, 9, "enum_NEXT_SYNTAX"], [362, 363, 9, "enum_NEXT_SYNTAX"], [363, 364, 9, "enum_NEXT_SYNTAX"], [364, 365, 9, "enum_NEXT_SYNTAX"], [365, 366, 9, "enum_NEXT_SYNTAX"], [366, 368, 9, "enum_NEXT_SYNTAX"], [369, 340, 10, "enum_LAST_LEXICAL_USE"], [368, 369, 9, "enum_NEXT_SYNTAX"], [369, 370, 9, "enum_NEXT_SYNTAX"], [370, 371, 9, "enum_NEXT_SYNTAX"], [371, 372, 9, "enum_NEXT_SYNTAX"], [373, 198, 10, "enum_LAST_LEXICAL_USE"], [372, 373, 9, "enum_NEXT_SYNTAX"], [373, 376, 9, "enum_NEXT_SYNTAX"], [376, 377, 9, "enum_NEXT_SYNTAX"], [377, 380, 9, "enum_NEXT_SYNTAX"], [381, 362, 10, "enum_LAST_LEXICAL_USE"], [380, 381, 9, "enum_NEXT_SYNTAX"], [381, 382, 9, "enum_NEXT_SYNTAX"], [382, 383, 9, "enum_NEXT_SYNTAX"], [383, 384, 9, "enum_NEXT_SYNTAX"], [384, 385, 9, "enum_NEXT_SYNTAX"], [385, 386, 9, "enum_NEXT_SYNTAX"], [386, 387, 9, "enum_NEXT_SYNTAX"], [387, 389, 9, "enum_NEXT_SYNTAX"], [390, 369, 10, "enum_LAST_LEXICAL_USE"], [389, 390, 9, "enum_NEXT_SYNTAX"], [390, 391, 9, "enum_NEXT_SYNTAX"], [391, 392, 9, "enum_NEXT_SYNTAX"], [392, 393, 9, "enum_NEXT_SYNTAX"], [393, 394, 9, "enum_NEXT_SYNTAX"], [395, 381, 10, "enum_LAST_LEXICAL_USE"], [394, 395, 9, "enum_NEXT_SYNTAX"], [395, 396, 9, "enum_NEXT_SYNTAX"], [396, 397, 9, "enum_NEXT_SYNTAX"], [397, 398, 9, "enum_NEXT_SYNTAX"], [398, 399, 9, "enum_NEXT_SYNTAX"], [399, 400, 9, "enum_NEXT_SYNTAX"], [400, 401, 9, "enum_NEXT_SYNTAX"], [401, 402, 9, "enum_NEXT_SYNTAX"], [402, 403, 9, "enum_NEXT_SYNTAX"], [403, 406, 9, "enum_NEXT_SYNTAX"], [407, 395, 10, "enum_LAST_LEXICAL_USE"], [406, 407, 9, "enum_NEXT_SYNTAX"], [407, 408, 9, "enum_NEXT_SYNTAX"], [408, 409, 9, "enum_NEXT_SYNTAX"], [409, 410, 9, "enum_NEXT_SYNTAX"], [410, 411, 9, "enum_NEXT_SYNTAX"], [411, 412, 9, "enum_NEXT_SYNTAX"], [412, 413, 9, "enum_NEXT_SYNTAX"], [413, 415, 9, "enum_NEXT_SYNTAX"], [416, 390, 10, "enum_LAST_LEXICAL_USE"], [415, 416, 9, "enum_NEXT_SYNTAX"], [416, 417, 9, "enum_NEXT_SYNTAX"], [417, 418, 9, "enum_NEXT_SYNTAX"], [418, 419, 9, "enum_NEXT_SYNTAX"], [420, 407, 10, "enum_LAST_LEXICAL_USE"], [419, 420, 9, "enum_NEXT_SYNTAX"], [420, 421, 9, "enum_NEXT_SYNTAX"], [421, 422, 9, "enum_NEXT_SYNTAX"], [422, 423, 9, "enum_NEXT_SYNTAX"], [423, 424, 9, "enum_NEXT_SYNTAX"], [424, 425, 9, "enum_NEXT_SYNTAX"], [6, 8, 1, "enum_CFG_NEXT"], [8, 21, 1, "enum_CFG_NEXT"], [21, 28, 1, "enum_CFG_NEXT"], [21, 38, 1, "enum_CFG_NEXT"], [28, 36, 1, "enum_CFG_NEXT"], [38, 52, 1, "enum_CFG_NEXT"], [52, 174, 1, "enum_CFG_NEXT"], [52, 57, 1, "enum_CFG_NEXT"], [57, 70, 1, "enum_CFG_NEXT"], [70, 174, 1, "enum_CFG_NEXT"], [70, 75, 1, "enum_CFG_NEXT"], [75, 81, 1, "enum_CFG_NEXT"], [81, 119, 1, "enum_CFG_NEXT"], [119, 156, 1, "enum_CFG_NEXT"], [156, 159, 1, "enum_CFG_NEXT"], [156, 174, 1, "enum_CFG_NEXT"], [159, 174, 1, "enum_CFG_NEXT"], [174, 188, 1, "enum_CFG_NEXT"], [188, 202, 1, "enum_CFG_NEXT"], [188, 193, 1, "enum_CFG_NEXT"], [193, 200, 1, "enum_CFG_NEXT"], [202, 213, 1, "enum_CFG_NEXT"], [213, 316, 1, "enum_CFG_NEXT"], [213, 216, 1, "enum_CFG_NEXT"], [216, 232, 1, "enum_CFG_NEXT"], [232, 243, 1, "enum_CFG_NEXT"], [243, 270, 1, "enum_CFG_NEXT"], [270, 281, 1, "enum_CFG_NEXT"], [281, 295, 1, "enum_CFG_NEXT"], [295, 316, 1, "enum_CFG_NEXT"], [316, 327, 1, "enum_CFG_NEXT"], [327, 339, 1, "enum_CFG_NEXT"], [327, 332, 1, "enum_CFG_NEXT"], [332, 339, 1, "enum_CFG_NEXT"], [339, 350, 1, "enum_CFG_NEXT"], [350, 363, 1, "enum_CFG_NEXT"], [363, 384, 1, "enum_CFG_NEXT"], [363, 368, 1, "enum_CFG_NEXT"], [384, 410, 1, "enum_CFG_NEXT"], [384, 389, 1, "enum_CFG_NEXT"], [389, 410, 1, "enum_CFG_NEXT"], [410, 415, 1, "enum_CFG_NEXT"], [9, 2, 3, "enum_LAST_WRITE"], [16, 9, 2, "enum_LAST_READ"], [16, 2, 3, "enum_LAST_WRITE"], [22, 16, 2, "enum_LAST_READ"], [22, 2, 3, "enum_LAST_WRITE"], [41, 22, 2, "enum_LAST_READ"], [41, 2, 3, "enum_LAST_WRITE"], [51, 39, 3, "enum_LAST_WRITE"], [60, 51, 2, "enum_LAST_READ"], [60, 39, 3, "enum_LAST_WRITE"], [69, 58, 3, "enum_LAST_WRITE"], [78, 41, 2, "enum_LAST_READ"], [78, 2, 3, "enum_LAST_WRITE"], [87, 78, 2, "enum_LAST_READ"], [87, 2, 3, "enum_LAST_WRITE"], [100, 93, 2, "enum_LAST_READ"], [108, 100, 2, "enum_LAST_READ"], [115, 108, 2, "enum_LAST_READ"], [117, 69, 2, "enum_LAST_READ"], [117, 58, 3, "enum_LAST_WRITE"], [82, 87, 2, "enum_LAST_READ"], [82, 2, 3, "enum_LAST_WRITE"], [128, 123, 2, "enum_LAST_READ"], [130, 125, 2, "enum_LAST_READ"], [133, 82, 2, "enum_LAST_READ"], [133, 2, 3, "enum_LAST_WRITE"], [142, 76, 3, "enum_LAST_WRITE"], [146, 123, 2, "enum_LAST_READ"], [146, 128, 3, "enum_LAST_WRITE"], [156, 120, 3, "enum_LAST_WRITE"], [168, 156, 2, "enum_LAST_READ"], [168, 120, 3, "enum_LAST_WRITE"], [177, 41, 2, "enum_LAST_READ"], [177, 133, 2, "enum_LAST_READ"], [177, 2, 3, "enum_LAST_WRITE"], [187, 175, 3, "enum_LAST_WRITE"], [194, 177, 2, "enum_LAST_READ"], [194, 2, 3, "enum_LAST_WRITE"], [205, 187, 2, "enum_LAST_READ"], [205, 175, 3, "enum_LAST_WRITE"], [213, 203, 3, "enum_LAST_WRITE"], [221, 213, 2, "enum_LAST_READ"], [221, 203, 3, "enum_LAST_WRITE"], [217, 177, 2, "enum_LAST_READ"], [217, 2, 3, "enum_LAST_WRITE"], [237, 221, 2, "enum_LAST_READ"], [237, 203, 3, "enum_LAST_WRITE"], [233, 217, 2, "enum_LAST_READ"], [233, 2, 3, "enum_LAST_WRITE"], [260, 253, 2, "enum_LAST_READ"], [262, 237, 2, "enum_LAST_READ"], [262, 203, 3, "enum_LAST_WRITE"], [244, 233, 2, "enum_LAST_READ"], [244, 2, 3, "enum_LAST_WRITE"], [275, 205, 2, "enum_LAST_READ"], [275, 175, 3, "enum_LAST_WRITE"], [271, 244, 2, "enum_LAST_READ"], [271, 2, 3, "enum_LAST_WRITE"], [284, 262, 2, "enum_LAST_READ"], [284, 203, 3, "enum_LAST_WRITE"], [311, 282, 3, "enum_LAST_WRITE"], [301, 311, 2, "enum_LAST_READ"], [301, 282, 3, "enum_LAST_WRITE"], [296, 271, 2, "enum_LAST_READ"], [296, 2, 3, "enum_LAST_WRITE"], [317, 177, 2, "enum_LAST_READ"], [317, 296, 2, "enum_LAST_READ"], [317, 2, 3, "enum_LAST_WRITE"], [324, 275, 2, "enum_LAST_READ"], [324, 205, 2, "enum_LAST_READ"], [324, 175, 3, "enum_LAST_WRITE"], [333, 317, 2, "enum_LAST_READ"], [333, 2, 3, "enum_LAST_WRITE"], [344, 324, 2, "enum_LAST_READ"], [344, 175, 3, "enum_LAST_WRITE"], [340, 317, 2, "enum_LAST_READ"], [340, 333, 2, "enum_LAST_READ"], [340, 2, 3, "enum_LAST_WRITE"], [353, 344, 2, "enum_LAST_READ"], [353, 175, 3, "enum_LAST_WRITE"], [351, 108, 2, "enum_LAST_READ"], [351, 115, 3, "enum_LAST_WRITE"], [362, 108, 2, "enum_LAST_READ"], [362, 351, 3, "enum_LAST_WRITE"], [369, 340, 2, "enum_LAST_READ"], [369, 2, 3, "enum_LAST_WRITE"], [381, 362, 2, "enum_LAST_READ"], [381, 351, 3, "enum_LAST_WRITE"], [395, 381, 2, "enum_LAST_READ"], [395, 351, 3, "enum_LAST_WRITE"], [390, 340, 2, "enum_LAST_READ"], [390, 2, 3, "enum_LAST_WRITE"], [407, 381, 2, "enum_LAST_READ"], [407, 395, 2, "enum_LAST_READ"], [407, 351, 3, "enum_LAST_WRITE"], [420, 407, 2, "enum_LAST_READ"], [420, 351, 3, "enum_LAST_WRITE"], [416, 340, 2, "enum_LAST_READ"], [416, 390, 2, "enum_LAST_READ"], [416, 2, 3, "enum_LAST_WRITE"], [39, 41, 4, "enum_COMPUTED_FROM"], [175, 177, 4, "enum_COMPUTED_FROM"], [203, 205, 4, "enum_COMPUTED_FROM"], [318, 321, 4, "enum_COMPUTED_FROM"], [341, 344, 4, "enum_COMPUTED_FROM"], [351, 353, 4, "enum_COMPUTED_FROM"], [58, 60, 4, "enum_COMPUTED_FROM"], [195, 198, 4, "enum_COMPUTED_FROM"], [218, 221, 4, "enum_COMPUTED_FROM"], [234, 237, 4, "enum_COMPUTED_FROM"], [245, 260, 4, "enum_COMPUTED_FROM"], [245, 253, 4, "enum_COMPUTED_FROM"], [245, 262, 4, "enum_COMPUTED_FROM"], [272, 275, 4, "enum_COMPUTED_FROM"], [282, 284, 4, "enum_COMPUTED_FROM"], [297, 311, 4, "enum_COMPUTED_FROM"], [297, 301, 4, "enum_COMPUTED_FROM"], [334, 337, 4, "enum_COMPUTED_FROM"], [370, 373, 4, "enum_COMPUTED_FROM"], [76, 78, 4, "enum_COMPUTED_FROM"], [83, 115, 4, "enum_COMPUTED_FROM"], [83, 117, 4, "enum_COMPUTED_FROM"], [83, 108, 4, "enum_COMPUTED_FROM"], [83, 87, 4, "enum_COMPUTED_FROM"], [83, 93, 4, "enum_COMPUTED_FROM"], [83, 100, 4, "enum_COMPUTED_FROM"], [120, 123, 4, "enum_COMPUTED_FROM"], [120, 125, 4, "enum_COMPUTED_FROM"], [120, 128, 4, "enum_COMPUTED_FROM"], [120, 130, 4, "enum_COMPUTED_FROM"], [120, 146, 4, "enum_COMPUTED_FROM"], [120, 133, 4, "enum_COMPUTED_FROM"], [120, 142, 4, "enum_COMPUTED_FROM"], [391, 395, 4, "enum_COMPUTED_FROM"], [417, 420, 4, "enum_COMPUTED_FROM"]], "error_location": 275, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/sviete/home-assistant.git", "old_path": "homeassistant/components/media_player/spotify.py", "hash": "74c249e57d16340ebd89fcd989942ff8b2fac26f", "code": "def update(self):\n    \"\"\"Update state and attributes.\"\"\"\n    self.refresh_spotify_instance()\n\n    # Don't true update when token is expired\n    if self._oauth.is_token_expired(self._token_info):\n        _LOGGER.warning(\"Spotify failed to update, token expired.\")\n        return\n\n    # Available devices\n    player_devices: Optional[Dict[str, Any]] = self._player.devices()\n    if player_devices is not None:\n        devices: Optional[List[Dict[str, Any]]] = player_devices.get('devices')\n        if devices is not None:\n            old_devices = self._devices\n            self._devices = {self._aliases.get(device.get('id'),\n                                            device.get('name')):\n                            device.get('id')\n                            for device in devices}\n            device_diff: Dict[str, Any] = {name: id for name, id in self._devices.items()\n                        if old_devices.get(name, None) is None}\n            if device_diff:\n                _LOGGER.info(\"New Devices: %s\", str(device_diff))\n    # Current playback state\n    current: Optional[Dict[str, Any]] = self._player.current_playback()\n    if current is None:\n        self._state = STATE_IDLE\n        return\n    # Track metadata\n    item: Optional[Dict[str, Any]] = current.get('item')\n    if item:\n        self._album = item.get('album').get('name')\n        self._title = item.get('name')\n        self._artist = ', '.join([artist.get('name')\n                                for artist in item.get('artists')])\n        self._uri = current.get('uri')\n        images = item.get('album').get('images')\n        self._image_url = images[0].get('url') if images else None\n    # Playing state\n    self._state = STATE_PAUSED\n    if current.get('is_playing'):\n        self._state = STATE_PLAYING\n    self._shuffle = current.get('shuffle_state')\n    device: Optional[Dict[str, Any]] = current.get('device')\n    if device is None:\n        self._state = STATE_IDLE\n    else:\n        if device.get('volume_percent'):\n            self._volume = device.get('volume_percent') / 100\n        if device.get('name'):\n            self._current_device = device.get('name')\n", "rewrite": "ReplaceText(target='item' @(197,24)->(197,31))", "error_line": 35, "has_bug": true, "code_full": "import logging\nfrom typing import Any, Dict, List, Optional\n\n_LOGGER = logging.getLogger(__name__)\n\nSTATE_IDLE: Any = None\nSTATE_PAUSED: Any = None\nSTATE_PLAYING: Any = None\n\n\nclass SpotifyMediaPlayer:\n    _oauth: Any = None\n    _token_info: Any = None\n    _player: Any = None\n    _devices: Any = None\n    _aliases: Any = None\n    _state: Any = None\n    _album: Any = None\n    _title: Any = None\n    _artist: Any = None\n    _uri: Any = None\n    _image_url: Any = None\n    _shuffle: Any = None\n    _volume: Any = None\n    _current_device: Any = None\n\n    def refresh_spotify_instance(self):\n        pass\n\n    def update(self):\n        \"\"\"Update state and attributes.\"\"\"\n        self.refresh_spotify_instance()\n\n        # Don't true update when token is expired\n        if self._oauth.is_token_expired(self._token_info):\n            _LOGGER.warning(\"Spotify failed to update, token expired.\")\n            return\n\n        # Available devices\n        player_devices: Optional[Dict[str, Any]] = self._player.devices()\n        if player_devices is not None:\n            devices: Optional[List[Dict[str, Any]]] = player_devices.get('devices')\n            if devices is not None:\n                old_devices = self._devices\n                self._devices = {self._aliases.get(device.get('id'),\n                                                device.get('name')):\n                                device.get('id')\n                                for device in devices}\n                device_diff: Dict[str, Any] = {name: id for name, id in self._devices.items()\n                            if old_devices.get(name, None) is None}\n                if device_diff:\n                    _LOGGER.info(\"New Devices: %s\", str(device_diff))\n        # Current playback state\n        current: Optional[Dict[str, Any]] = self._player.current_playback()\n        if current is None:\n            self._state = STATE_IDLE\n            return\n        # Track metadata\n        item: Optional[Dict[str, Any]] = current.get('item')\n        if item:\n            self._album = item.get('album').get('name')\n            self._title = item.get('name')\n            self._artist = ', '.join([artist.get('name')\n                                    for artist in item.get('artists')])\n            self._uri = current.get('uri')\n            images = item.get('album').get('images')\n            self._image_url = images[0].get('url') if images else None\n        # Playing state\n        self._state = STATE_PAUSED\n        if current.get('is_playing'):\n            self._state = STATE_PLAYING\n        self._shuffle = current.get('shuffle_state')\n        device: Optional[Dict[str, Any]] = current.get('device')\n        if device is None:\n            self._state = STATE_IDLE\n        else:\n            if device.get('volume_percent'):\n                self._volume = device.get('volume_percent') / 100\n            if device.get('name'):\n                self._current_device = device.get('name')\n", "error_location_char": [1530, 1537], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def is_subpath(", "base", ",", "path", ",", "sep", "=", "os", ".", "path", ".", "sep", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Check if the given path is a proper subpath of a base path.\\n    '", "#NEWLINE#", "if", "path", ".", "startswith", "(", "path", ")", ":", "#NEWLINE#", "#INDENT#", "trailing", "=", "base", "[", "len", "(", "base", ")", ":", "]", "#NEWLINE#", "return", "(", "(", "trailing", "==", "''", ")", "or", "(", "trailing", "[", "0", "]", "==", "sep", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "False"], "edges": [[1, 5, 7, "enum_FIELD"], [16, 17, 7, "enum_FIELD"], [19, 23, 7, "enum_FIELD"], [59, 60, 7, "enum_FIELD"], [11, 9, 7, "enum_FIELD"], [23, 21, 7, "enum_FIELD"], [28, 32, 7, "enum_FIELD"], [40, 47, 7, "enum_FIELD"], [9, 8, 7, "enum_FIELD"], [21, 20, 7, "enum_FIELD"], [32, 31, 7, "enum_FIELD"], [32, 37, 7, "enum_FIELD"], [37, 34, 7, "enum_FIELD"], [44, 43, 7, "enum_FIELD"], [53, 50, 7, "enum_FIELD"], [34, 33, 7, "enum_FIELD"], [50, 49, 7, "enum_FIELD"], [50, 51, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 19, 9, "enum_NEXT_SYNTAX"], [20, 4, 10, "enum_LAST_LEXICAL_USE"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [24, 20, 10, "enum_LAST_LEXICAL_USE"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [31, 2, 10, "enum_LAST_LEXICAL_USE"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [35, 31, 10, "enum_LAST_LEXICAL_USE"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [43, 29, 10, "enum_LAST_LEXICAL_USE"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [49, 43, 10, "enum_LAST_LEXICAL_USE"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [54, 6, 10, "enum_LAST_LEXICAL_USE"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [11, 1, 1, "enum_CFG_NEXT"], [5, 16, 1, "enum_CFG_NEXT"], [16, 23, 1, "enum_CFG_NEXT"], [23, 59, 1, "enum_CFG_NEXT"], [23, 28, 1, "enum_CFG_NEXT"], [28, 40, 1, "enum_CFG_NEXT"], [20, 4, 3, "enum_LAST_WRITE"], [24, 20, 2, "enum_LAST_READ"], [24, 4, 3, "enum_LAST_WRITE"], [31, 2, 3, "enum_LAST_WRITE"], [35, 31, 2, "enum_LAST_READ"], [35, 2, 3, "enum_LAST_WRITE"], [43, 29, 3, "enum_LAST_WRITE"], [49, 43, 2, "enum_LAST_READ"], [49, 29, 3, "enum_LAST_WRITE"], [54, 6, 3, "enum_LAST_WRITE"], [29, 31, 4, "enum_COMPUTED_FROM"], [29, 33, 4, "enum_COMPUTED_FROM"], [29, 35, 4, "enum_COMPUTED_FROM"]], "error_location": 24, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/kgaughan/imageproxy.git", "old_path": "imageproxy.py", "hash": "bfab82a641baf3ecfe4f616a9acad6b05178ff41", "code": "def is_subpath(base: str, path: str, sep: str=os.path.sep):\n    \"\"\"\n    Check if the given path is a proper subpath of a base path.\n    \"\"\"\n    if path.startswith(path):\n        trailing: str = base[len(base):]\n        return trailing == '' or trailing[0] == sep\n    return False\n", "rewrite": "ReplaceText(target='base' @(82,23)->(82,27))", "error_line": 4, "has_bug": true, "code_full": "import os\nfrom typing import Union\n\n\ndef is_subpath(base: str, path: str, sep: str=os.path.sep):\n    \"\"\"\n    Check if the given path is a proper subpath of a base path.\n    \"\"\"\n    if path.startswith(path):\n        trailing: str = base[len(base):]\n        return trailing == '' or trailing[0] == sep\n    return False\n", "error_location_char": [163, 167], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def test_core(", "model", "=", "None", ",", "stories", "=", "None", ",", "endpoints", "=", "None", ",", "output", "=", "DEFAULT_RESULTS_PATH", ",", "kwargs", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "import", "rasa.core.test", "#NEWLINE#", "import", "rasa.core.utils", "as core_utils", "#NEWLINE#", "from", "rasa.nlu", "import", "utils", "as nlu_utils", "#NEWLINE#", "from", "rasa.model", "import", "get_model", "#NEWLINE#", "from", "rasa.core.interpreter", "import", "NaturalLanguageInterpreter", "#NEWLINE#", "from", "rasa.core.agent", "import", "Agent", "#NEWLINE#", "_endpoints", "=", "core_utils", ".", "AvailableEndpoints", ".", "read_endpoints", "(", "endpoints", ")", "#NEWLINE#", "if", "(", "kwargs", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "kwargs", "=", "{", "}", "#NEWLINE#", "#UNINDENT#", "if", "output", ":", "#NEWLINE#", "#INDENT#", "nlu_utils", ".", "create_dir", "(", "output", ")", "#NEWLINE#", "#UNINDENT#", "loop", "=", "asyncio", ".", "get_event_loop", "(", ")", "#NEWLINE#", "model_path", "=", "get_model", "(", "model", ")", "#NEWLINE#", "(", "core_path", ",", "nlu_path", ")", "=", "get_model_subdirectories", "(", "model_path", ")", "#NEWLINE#", "if", "(", "os", ".", "path", ".", "exists", "(", "core_path", ")", "and", "os", ".", "path", ".", "exists", "(", "nlu_path", ")", ")", ":", "#NEWLINE#", "#INDENT#", "_interpreter", "=", "NaturalLanguageInterpreter", ".", "create", "(", "nlu_path", ",", "_endpoints", ".", "nlu", ")", "#NEWLINE#", "_agent", "=", "Agent", ".", "load", "(", "core_path", ",", "interpreter", "=", "_interpreter", ")", "#NEWLINE#", "kwargs", "=", "minimal_kwargs", "(", "kwargs", ",", "rasa", ".", "core", ".", "test", ",", "[", "'stories'", ",", "'agent'", "]", ")", "#NEWLINE#", "loop", ".", "run_until_complete", "(", "rasa", ".", "core", ".", "test", "(", "stories", ",", "_agent", ",", "out_directory", "=", "output", ",", "**", "kwargs", ")", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "logger", ".", "error", "(", "'Not able to test. Make sure both models, core and nlu, are available.'", ")"], "edges": [[1, 11, 7, "enum_FIELD"], [52, 60, 7, "enum_FIELD"], [64, 67, 7, "enum_FIELD"], [79, 80, 7, "enum_FIELD"], [91, 97, 7, "enum_FIELD"], [99, 103, 7, "enum_FIELD"], [106, 114, 7, "enum_FIELD"], [138, 128, 7, "enum_FIELD"], [60, 58, 7, "enum_FIELD"], [67, 66, 7, "enum_FIELD"], [72, 75, 7, "enum_FIELD"], [83, 87, 7, "enum_FIELD"], [97, 95, 7, "enum_FIELD"], [103, 102, 7, "enum_FIELD"], [114, 113, 7, "enum_FIELD"], [140, 148, 7, "enum_FIELD"], [153, 161, 7, "enum_FIELD"], [166, 172, 7, "enum_FIELD"], [185, 189, 7, "enum_FIELD"], [213, 217, 7, "enum_FIELD"], [58, 56, 7, "enum_FIELD"], [87, 85, 7, "enum_FIELD"], [95, 94, 7, "enum_FIELD"], [125, 123, 7, "enum_FIELD"], [134, 132, 7, "enum_FIELD"], [148, 144, 7, "enum_FIELD"], [161, 157, 7, "enum_FIELD"], [172, 169, 7, "enum_FIELD"], [189, 187, 7, "enum_FIELD"], [217, 215, 7, "enum_FIELD"], [56, 55, 7, "enum_FIELD"], [85, 84, 7, "enum_FIELD"], [123, 121, 7, "enum_FIELD"], [132, 130, 7, "enum_FIELD"], [144, 143, 7, "enum_FIELD"], [150, 149, 7, "enum_FIELD"], [157, 156, 7, "enum_FIELD"], [162, 164, 7, "enum_FIELD"], [176, 174, 7, "enum_FIELD"], [187, 186, 7, "enum_FIELD"], [199, 193, 7, "enum_FIELD"], [215, 214, 7, "enum_FIELD"], [121, 120, 7, "enum_FIELD"], [130, 129, 7, "enum_FIELD"], [174, 173, 7, "enum_FIELD"], [193, 191, 7, "enum_FIELD"], [200, 202, 7, "enum_FIELD"], [204, 205, 7, "enum_FIELD"], [191, 190, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [61, 10, 10, "enum_LAST_LEXICAL_USE"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [66, 18, 10, "enum_LAST_LEXICAL_USE"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 72, 9, "enum_NEXT_SYNTAX"], [73, 66, 10, "enum_LAST_LEXICAL_USE"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 79, 9, "enum_NEXT_SYNTAX"], [80, 14, 10, "enum_LAST_LEXICAL_USE"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [88, 80, 10, "enum_LAST_LEXICAL_USE"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [104, 2, 10, "enum_LAST_LEXICAL_USE"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [115, 100, 10, "enum_LAST_LEXICAL_USE"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [126, 108, 10, "enum_LAST_LEXICAL_USE"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [129, 120, 10, "enum_LAST_LEXICAL_USE"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [135, 110, 10, "enum_LAST_LEXICAL_USE"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [147, 135, 10, "enum_LAST_LEXICAL_USE"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [149, 53, 10, "enum_LAST_LEXICAL_USE"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [160, 126, 10, "enum_LAST_LEXICAL_USE"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [164, 141, 10, "enum_LAST_LEXICAL_USE"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [167, 73, 10, "enum_LAST_LEXICAL_USE"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [171, 167, 10, "enum_LAST_LEXICAL_USE"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 184, 9, "enum_NEXT_SYNTAX"], [184, 185, 9, "enum_NEXT_SYNTAX"], [186, 92, 10, "enum_LAST_LEXICAL_USE"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [187, 188, 9, "enum_NEXT_SYNTAX"], [188, 189, 9, "enum_NEXT_SYNTAX"], [190, 173, 10, "enum_LAST_LEXICAL_USE"], [189, 190, 9, "enum_NEXT_SYNTAX"], [190, 191, 9, "enum_NEXT_SYNTAX"], [191, 192, 9, "enum_NEXT_SYNTAX"], [192, 193, 9, "enum_NEXT_SYNTAX"], [193, 194, 9, "enum_NEXT_SYNTAX"], [194, 195, 9, "enum_NEXT_SYNTAX"], [196, 6, 10, "enum_LAST_LEXICAL_USE"], [195, 196, 9, "enum_NEXT_SYNTAX"], [196, 197, 9, "enum_NEXT_SYNTAX"], [198, 154, 10, "enum_LAST_LEXICAL_USE"], [197, 198, 9, "enum_NEXT_SYNTAX"], [198, 199, 9, "enum_NEXT_SYNTAX"], [199, 200, 9, "enum_NEXT_SYNTAX"], [200, 201, 9, "enum_NEXT_SYNTAX"], [202, 88, 10, "enum_LAST_LEXICAL_USE"], [201, 202, 9, "enum_NEXT_SYNTAX"], [202, 203, 9, "enum_NEXT_SYNTAX"], [203, 204, 9, "enum_NEXT_SYNTAX"], [205, 171, 10, "enum_LAST_LEXICAL_USE"], [204, 205, 9, "enum_NEXT_SYNTAX"], [205, 206, 9, "enum_NEXT_SYNTAX"], [206, 207, 9, "enum_NEXT_SYNTAX"], [207, 210, 9, "enum_NEXT_SYNTAX"], [210, 211, 9, "enum_NEXT_SYNTAX"], [211, 213, 9, "enum_NEXT_SYNTAX"], [213, 214, 9, "enum_NEXT_SYNTAX"], [214, 215, 9, "enum_NEXT_SYNTAX"], [215, 216, 9, "enum_NEXT_SYNTAX"], [216, 217, 9, "enum_NEXT_SYNTAX"], [217, 218, 9, "enum_NEXT_SYNTAX"], [218, 219, 9, "enum_NEXT_SYNTAX"], [4, 8, 1, "enum_CFG_NEXT"], [8, 12, 1, "enum_CFG_NEXT"], [12, 16, 1, "enum_CFG_NEXT"], [16, 20, 1, "enum_CFG_NEXT"], [20, 1, 1, "enum_CFG_NEXT"], [11, 25, 1, "enum_CFG_NEXT"], [25, 28, 1, "enum_CFG_NEXT"], [28, 33, 1, "enum_CFG_NEXT"], [33, 39, 1, "enum_CFG_NEXT"], [39, 44, 1, "enum_CFG_NEXT"], [44, 49, 1, "enum_CFG_NEXT"], [49, 52, 1, "enum_CFG_NEXT"], [52, 67, 1, "enum_CFG_NEXT"], [67, 80, 1, "enum_CFG_NEXT"], [67, 72, 1, "enum_CFG_NEXT"], [72, 80, 1, "enum_CFG_NEXT"], [80, 91, 1, "enum_CFG_NEXT"], [80, 83, 1, "enum_CFG_NEXT"], [83, 91, 1, "enum_CFG_NEXT"], [91, 99, 1, "enum_CFG_NEXT"], [99, 106, 1, "enum_CFG_NEXT"], [106, 128, 1, "enum_CFG_NEXT"], [128, 213, 1, "enum_CFG_NEXT"], [128, 140, 1, "enum_CFG_NEXT"], [140, 153, 1, "enum_CFG_NEXT"], [153, 166, 1, "enum_CFG_NEXT"], [166, 185, 1, "enum_CFG_NEXT"], [61, 10, 3, "enum_LAST_WRITE"], [66, 18, 3, "enum_LAST_WRITE"], [73, 66, 2, "enum_LAST_READ"], [73, 18, 3, "enum_LAST_WRITE"], [80, 14, 3, "enum_LAST_WRITE"], [88, 80, 2, "enum_LAST_READ"], [88, 14, 3, "enum_LAST_WRITE"], [104, 2, 3, "enum_LAST_WRITE"], [115, 100, 3, "enum_LAST_WRITE"], [126, 108, 3, "enum_LAST_WRITE"], [129, 120, 2, "enum_LAST_READ"], [135, 110, 3, "enum_LAST_WRITE"], [147, 135, 2, "enum_LAST_READ"], [147, 110, 3, "enum_LAST_WRITE"], [149, 53, 3, "enum_LAST_WRITE"], [160, 126, 2, "enum_LAST_READ"], [160, 108, 3, "enum_LAST_WRITE"], [164, 141, 3, "enum_LAST_WRITE"], [171, 66, 2, "enum_LAST_READ"], [171, 73, 3, "enum_LAST_WRITE"], [171, 18, 3, "enum_LAST_WRITE"], [167, 171, 2, "enum_LAST_READ"], [167, 73, 3, "enum_LAST_WRITE"], [167, 18, 3, "enum_LAST_WRITE"], [186, 92, 3, "enum_LAST_WRITE"], [190, 173, 2, "enum_LAST_READ"], [196, 6, 3, "enum_LAST_WRITE"], [198, 154, 3, "enum_LAST_WRITE"], [202, 88, 2, "enum_LAST_READ"], [202, 80, 2, "enum_LAST_READ"], [202, 14, 3, "enum_LAST_WRITE"], [205, 171, 2, "enum_LAST_READ"], [205, 167, 3, "enum_LAST_WRITE"], [53, 61, 4, "enum_COMPUTED_FROM"], [53, 55, 4, "enum_COMPUTED_FROM"], [92, 94, 4, "enum_COMPUTED_FROM"], [100, 102, 4, "enum_COMPUTED_FROM"], [100, 104, 4, "enum_COMPUTED_FROM"], [109, 113, 4, "enum_COMPUTED_FROM"], [109, 115, 4, "enum_COMPUTED_FROM"], [141, 147, 4, "enum_COMPUTED_FROM"], [141, 143, 4, "enum_COMPUTED_FROM"], [141, 149, 4, "enum_COMPUTED_FROM"], [154, 160, 4, "enum_COMPUTED_FROM"], [154, 156, 4, "enum_COMPUTED_FROM"], [154, 164, 4, "enum_COMPUTED_FROM"], [167, 169, 4, "enum_COMPUTED_FROM"], [167, 171, 4, "enum_COMPUTED_FROM"], [167, 173, 4, "enum_COMPUTED_FROM"]], "error_location": 160, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/RasaHQ/rasa.git", "old_path": "rasa/test.py", "hash": "e43636652c80d0e9d81dc01f6a83ebfc5444ee12", "code": "def test_core(\n    model: Optional[Text] = None,\n    stories: Optional[Text] = None,\n    endpoints: Optional[Text] = None,\n    output: Text = DEFAULT_RESULTS_PATH,\n    kwargs: Optional[Dict] = None,\n):\n    import rasa.core.test\n    import rasa.core.utils as core_utils\n    from rasa.core.agent import Agent\n    from rasa.core.interpreter import NaturalLanguageInterpreter\n    from rasa.model import get_model\n    from rasa.nlu import utils as nlu_utils\n\n    _endpoints = core_utils.AvailableEndpoints.read_endpoints(endpoints)\n\n    if kwargs is None:\n        kwargs = {}\n\n    if output:\n        nlu_utils.create_dir(output)\n\n    loop = asyncio.get_event_loop()\n    model_path = get_model(model)\n    core_path, nlu_path = get_model_subdirectories(model_path)\n\n    if os.path.exists(core_path) and os.path.exists(nlu_path):\n        _interpreter = NaturalLanguageInterpreter.create(nlu_path, _endpoints.nlu)\n\n        _agent = Agent.load(core_path, interpreter=_interpreter)\n\n        kwargs = minimal_kwargs(kwargs, rasa.core.test, [\"stories\", \"agent\"])\n\n        loop.run_until_complete(\n            rasa.core.test(stories, _agent, out_directory=output, **kwargs)\n        )\n    else:\n        logger.error(\n            \"Not able to test. Make sure both models, core and \" \"nlu, are available.\"\n        )\n", "rewrite": "ReplaceText(target='model_path' @(72,28)->(72,37))", "error_line": 29, "has_bug": true, "code_full": "import asyncio\nimport logging\nimport os\nfrom typing import Callable, Dict, List, Optional, Text, Tuple\n\nlogger = logging.getLogger(__name__)\nDEFAULT_RESULTS_PATH: str = \"\"\n\n\ndef get_model_subdirectories(model_path: Text) -> Tuple[Text, Text]:\n    return \"\", \"\"\n\n\ndef minimal_kwargs(kwargs: Dict, function: Callable, keys: List[Text]) -> Dict:\n    return {}\n\n\ndef test_core(\n    model: Optional[Text] = None,\n    stories: Optional[Text] = None,\n    endpoints: Optional[Text] = None,\n    output: Text = DEFAULT_RESULTS_PATH,\n    kwargs: Optional[Dict] = None,\n):\n    import rasa.core.test\n    import rasa.core.utils as core_utils\n    from rasa.core.agent import Agent\n    from rasa.core.interpreter import NaturalLanguageInterpreter\n    from rasa.model import get_model\n    from rasa.nlu import utils as nlu_utils\n\n    _endpoints = core_utils.AvailableEndpoints.read_endpoints(endpoints)\n\n    if kwargs is None:\n        kwargs = {}\n\n    if output:\n        nlu_utils.create_dir(output)\n\n    loop = asyncio.get_event_loop()\n    model_path = get_model(model)\n    core_path, nlu_path = get_model_subdirectories(model_path)\n\n    if os.path.exists(core_path) and os.path.exists(nlu_path):\n        _interpreter = NaturalLanguageInterpreter.create(nlu_path, _endpoints.nlu)\n\n        _agent = Agent.load(core_path, interpreter=_interpreter)\n\n        kwargs = minimal_kwargs(kwargs, rasa.core.test, [\"stories\", \"agent\"])\n\n        loop.run_until_complete(\n            rasa.core.test(stories, _agent, out_directory=output, **kwargs)\n        )\n    else:\n        logger.error(\n            \"Not able to test. Make sure both models, core and \" \"nlu, are available.\"\n        )\n", "error_location_char": [934, 943], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def _construct_instance(", "cls", ",", "names", ",", "values", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    method used to construct instances from query results\\n    this is where polymorphic deserialization occurs\\n    '", "#NEWLINE#", "field_dict", "=", "dict", "(", "(", "(", "cls", ".", "_db_map", ".", "get", "(", "k", ",", "k", ")", ",", "v", ")", "for", "(", "k", ",", "v", ")", "in", "zip", "(", "names", ",", "values", ")", ")", ")", "#NEWLINE#", "if", "cls", ".", "_is_polymorphic", ":", "#NEWLINE#", "#INDENT#", "poly_key", "=", "field_dict", ".", "get", "(", "cls", ".", "_polymorphic_column_name", ")", "#NEWLINE#", "if", "(", "poly_key", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "PolyMorphicModelException", "(", "'polymorphic key was not found in values'", ")", "#NEWLINE#", "#UNINDENT#", "poly_base", "=", "(", "cls", "if", "cls", ".", "_is_polymorphic_base", "else", "cls", ".", "_polymorphic_base", ")", "#NEWLINE#", "klass", "=", "poly_base", ".", "_get_model_by_polymorphic_key", "(", "poly_key", ")", "#NEWLINE#", "if", "(", "klass", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "poly_base", ".", "_discover_polymorphic_submodels", "(", ")", "#NEWLINE#", "klass", "=", "poly_base", ".", "_get_model_by_polymorphic_key", "(", "poly_key", ")", "#NEWLINE#", "if", "(", "klass", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "PolyMorphicModelException", "(", "'unrecognized polymorphic key {} for class {}'", ".", "format", "(", "poly_key", ",", "poly_base", ".", "__name__", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "if", "(", "not", "issubclass", "(", "klass", ",", "poly_base", ")", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "PolyMorphicModelException", "(", "'{} is not a subclass of {}'", ".", "format", "(", "klass", ".", "__name__", ",", "poly_base", ".", "__name__", ")", ")", "#NEWLINE#", "#UNINDENT#", "field_dict", "=", "{", "k", ":", "v", "for", "(", "k", ",", "v", ")", "in", "field_dict", ".", "items", "(", ")", "if", "(", "k", "in", "klass", ".", "_columns", ".", "keys", "(", ")", ")", "}", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "klass", "=", "cls", "#NEWLINE#", "#UNINDENT#", "instance", "=", "klass", "(", "**", "field_dict", ")", "#NEWLINE#", "instance", ".", "_is_persisted", "=", "True", "#NEWLINE#", "return", "instance"], "edges": [[1, 3, 7, "enum_FIELD"], [10, 11, 7, "enum_FIELD"], [12, 16, 7, "enum_FIELD"], [52, 50, 7, "enum_FIELD"], [227, 231, 7, "enum_FIELD"], [235, 240, 7, "enum_FIELD"], [242, 243, 7, "enum_FIELD"], [16, 15, 7, "enum_FIELD"], [50, 49, 7, "enum_FIELD"], [54, 60, 7, "enum_FIELD"], [66, 69, 7, "enum_FIELD"], [81, 86, 7, "enum_FIELD"], [95, 101, 7, "enum_FIELD"], [105, 108, 7, "enum_FIELD"], [155, 157, 7, "enum_FIELD"], [185, 190, 7, "enum_FIELD"], [222, 225, 7, "enum_FIELD"], [231, 230, 7, "enum_FIELD"], [237, 236, 7, "enum_FIELD"], [17, 29, 7, "enum_FIELD"], [60, 58, 7, "enum_FIELD"], [69, 68, 7, "enum_FIELD"], [75, 77, 7, "enum_FIELD"], [86, 88, 7, "enum_FIELD"], [86, 85, 7, "enum_FIELD"], [86, 92, 7, "enum_FIELD"], [101, 99, 7, "enum_FIELD"], [108, 107, 7, "enum_FIELD"], [113, 117, 7, "enum_FIELD"], [119, 125, 7, "enum_FIELD"], [129, 132, 7, "enum_FIELD"], [157, 161, 7, "enum_FIELD"], [168, 170, 7, "enum_FIELD"], [190, 189, 7, "enum_FIELD"], [190, 191, 7, "enum_FIELD"], [232, 233, 7, "enum_FIELD"], [32, 35, 7, "enum_FIELD"], [32, 42, 7, "enum_FIELD"], [58, 57, 7, "enum_FIELD"], [62, 61, 7, "enum_FIELD"], [77, 76, 7, "enum_FIELD"], [88, 87, 7, "enum_FIELD"], [92, 91, 7, "enum_FIELD"], [99, 98, 7, "enum_FIELD"], [117, 115, 7, "enum_FIELD"], [125, 123, 7, "enum_FIELD"], [132, 131, 7, "enum_FIELD"], [138, 140, 7, "enum_FIELD"], [161, 158, 7, "enum_FIELD"], [170, 169, 7, "enum_FIELD"], [198, 195, 7, "enum_FIELD"], [198, 202, 7, "enum_FIELD"], [26, 22, 7, "enum_FIELD"], [42, 39, 7, "enum_FIELD"], [115, 114, 7, "enum_FIELD"], [123, 122, 7, "enum_FIELD"], [140, 139, 7, "enum_FIELD"], [178, 172, 7, "enum_FIELD"], [202, 200, 7, "enum_FIELD"], [207, 206, 7, "enum_FIELD"], [22, 20, 7, "enum_FIELD"], [146, 142, 7, "enum_FIELD"], [172, 171, 7, "enum_FIELD"], [176, 175, 7, "enum_FIELD"], [180, 179, 7, "enum_FIELD"], [200, 199, 7, "enum_FIELD"], [213, 211, 7, "enum_FIELD"], [20, 19, 7, "enum_FIELD"], [142, 141, 7, "enum_FIELD"], [148, 147, 7, "enum_FIELD"], [211, 209, 7, "enum_FIELD"], [209, 208, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [19, 2, 10, "enum_LAST_LEXICAL_USE"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [27, 25, 10, "enum_LAST_LEXICAL_USE"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [34, 27, 10, "enum_LAST_LEXICAL_USE"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [36, 30, 10, "enum_LAST_LEXICAL_USE"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [41, 4, 10, "enum_LAST_LEXICAL_USE"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [43, 6, 10, "enum_LAST_LEXICAL_USE"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 48, 9, "enum_NEXT_SYNTAX"], [49, 19, 10, "enum_LAST_LEXICAL_USE"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [57, 13, 10, "enum_LAST_LEXICAL_USE"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [61, 49, 10, "enum_LAST_LEXICAL_USE"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [68, 55, 10, "enum_LAST_LEXICAL_USE"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [85, 61, 10, "enum_LAST_LEXICAL_USE"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [87, 85, 10, "enum_LAST_LEXICAL_USE"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [91, 87, 10, "enum_LAST_LEXICAL_USE"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [98, 82, 10, "enum_LAST_LEXICAL_USE"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [102, 68, 10, "enum_LAST_LEXICAL_USE"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [107, 96, 10, "enum_LAST_LEXICAL_USE"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 113, 9, "enum_NEXT_SYNTAX"], [114, 98, 10, "enum_LAST_LEXICAL_USE"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [120, 107, 10, "enum_LAST_LEXICAL_USE"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [122, 114, 10, "enum_LAST_LEXICAL_USE"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [126, 102, 10, "enum_LAST_LEXICAL_USE"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [131, 120, 10, "enum_LAST_LEXICAL_USE"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 138, 9, "enum_NEXT_SYNTAX"], [139, 76, 10, "enum_LAST_LEXICAL_USE"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [145, 126, 10, "enum_LAST_LEXICAL_USE"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [147, 122, 10, "enum_LAST_LEXICAL_USE"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [160, 131, 10, "enum_LAST_LEXICAL_USE"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [162, 147, 10, "enum_LAST_LEXICAL_USE"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 168, 9, "enum_NEXT_SYNTAX"], [169, 139, 10, "enum_LAST_LEXICAL_USE"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [175, 160, 10, "enum_LAST_LEXICAL_USE"], [174, 175, 9, "enum_NEXT_SYNTAX"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 178, 9, "enum_NEXT_SYNTAX"], [179, 162, 10, "enum_LAST_LEXICAL_USE"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 185, 9, "enum_NEXT_SYNTAX"], [186, 57, 10, "enum_LAST_LEXICAL_USE"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [187, 188, 9, "enum_NEXT_SYNTAX"], [189, 34, 10, "enum_LAST_LEXICAL_USE"], [188, 189, 9, "enum_NEXT_SYNTAX"], [189, 190, 9, "enum_NEXT_SYNTAX"], [191, 36, 10, "enum_LAST_LEXICAL_USE"], [190, 191, 9, "enum_NEXT_SYNTAX"], [191, 192, 9, "enum_NEXT_SYNTAX"], [192, 193, 9, "enum_NEXT_SYNTAX"], [194, 189, 10, "enum_LAST_LEXICAL_USE"], [193, 194, 9, "enum_NEXT_SYNTAX"], [194, 195, 9, "enum_NEXT_SYNTAX"], [196, 191, 10, "enum_LAST_LEXICAL_USE"], [195, 196, 9, "enum_NEXT_SYNTAX"], [196, 197, 9, "enum_NEXT_SYNTAX"], [197, 198, 9, "enum_NEXT_SYNTAX"], [199, 186, 10, "enum_LAST_LEXICAL_USE"], [198, 199, 9, "enum_NEXT_SYNTAX"], [199, 200, 9, "enum_NEXT_SYNTAX"], [200, 201, 9, "enum_NEXT_SYNTAX"], [201, 202, 9, "enum_NEXT_SYNTAX"], [202, 203, 9, "enum_NEXT_SYNTAX"], [203, 204, 9, "enum_NEXT_SYNTAX"], [204, 205, 9, "enum_NEXT_SYNTAX"], [206, 194, 10, "enum_LAST_LEXICAL_USE"], [205, 206, 9, "enum_NEXT_SYNTAX"], [206, 207, 9, "enum_NEXT_SYNTAX"], [208, 175, 10, "enum_LAST_LEXICAL_USE"], [207, 208, 9, "enum_NEXT_SYNTAX"], [208, 209, 9, "enum_NEXT_SYNTAX"], [209, 210, 9, "enum_NEXT_SYNTAX"], [210, 211, 9, "enum_NEXT_SYNTAX"], [211, 212, 9, "enum_NEXT_SYNTAX"], [212, 213, 9, "enum_NEXT_SYNTAX"], [213, 214, 9, "enum_NEXT_SYNTAX"], [214, 215, 9, "enum_NEXT_SYNTAX"], [215, 216, 9, "enum_NEXT_SYNTAX"], [216, 219, 9, "enum_NEXT_SYNTAX"], [219, 220, 9, "enum_NEXT_SYNTAX"], [220, 222, 9, "enum_NEXT_SYNTAX"], [223, 208, 10, "enum_LAST_LEXICAL_USE"], [222, 223, 9, "enum_NEXT_SYNTAX"], [223, 224, 9, "enum_NEXT_SYNTAX"], [225, 91, 10, "enum_LAST_LEXICAL_USE"], [224, 225, 9, "enum_NEXT_SYNTAX"], [225, 227, 9, "enum_NEXT_SYNTAX"], [227, 228, 9, "enum_NEXT_SYNTAX"], [228, 229, 9, "enum_NEXT_SYNTAX"], [230, 223, 10, "enum_LAST_LEXICAL_USE"], [229, 230, 9, "enum_NEXT_SYNTAX"], [230, 231, 9, "enum_NEXT_SYNTAX"], [231, 232, 9, "enum_NEXT_SYNTAX"], [233, 199, 10, "enum_LAST_LEXICAL_USE"], [232, 233, 9, "enum_NEXT_SYNTAX"], [233, 234, 9, "enum_NEXT_SYNTAX"], [234, 235, 9, "enum_NEXT_SYNTAX"], [236, 228, 10, "enum_LAST_LEXICAL_USE"], [235, 236, 9, "enum_NEXT_SYNTAX"], [236, 237, 9, "enum_NEXT_SYNTAX"], [237, 238, 9, "enum_NEXT_SYNTAX"], [238, 239, 9, "enum_NEXT_SYNTAX"], [239, 240, 9, "enum_NEXT_SYNTAX"], [240, 242, 9, "enum_NEXT_SYNTAX"], [243, 236, 10, "enum_LAST_LEXICAL_USE"], [242, 243, 9, "enum_NEXT_SYNTAX"], [3, 10, 1, "enum_CFG_NEXT"], [10, 12, 1, "enum_CFG_NEXT"], [12, 50, 1, "enum_CFG_NEXT"], [50, 54, 1, "enum_CFG_NEXT"], [50, 222, 1, "enum_CFG_NEXT"], [54, 69, 1, "enum_CFG_NEXT"], [69, 81, 1, "enum_CFG_NEXT"], [69, 75, 1, "enum_CFG_NEXT"], [81, 95, 1, "enum_CFG_NEXT"], [95, 108, 1, "enum_CFG_NEXT"], [108, 113, 1, "enum_CFG_NEXT"], [108, 157, 1, "enum_CFG_NEXT"], [113, 119, 1, "enum_CFG_NEXT"], [119, 132, 1, "enum_CFG_NEXT"], [132, 157, 1, "enum_CFG_NEXT"], [132, 138, 1, "enum_CFG_NEXT"], [157, 168, 1, "enum_CFG_NEXT"], [157, 185, 1, "enum_CFG_NEXT"], [185, 227, 1, "enum_CFG_NEXT"], [222, 227, 1, "enum_CFG_NEXT"], [227, 235, 1, "enum_CFG_NEXT"], [235, 242, 1, "enum_CFG_NEXT"], [19, 2, 3, "enum_LAST_WRITE"], [27, 25, 2, "enum_LAST_READ"], [34, 27, 2, "enum_LAST_READ"], [36, 30, 2, "enum_LAST_READ"], [41, 4, 3, "enum_LAST_WRITE"], [43, 6, 3, "enum_LAST_WRITE"], [49, 19, 2, "enum_LAST_READ"], [49, 2, 3, "enum_LAST_WRITE"], [57, 13, 3, "enum_LAST_WRITE"], [61, 49, 2, "enum_LAST_READ"], [61, 2, 3, "enum_LAST_WRITE"], [68, 55, 3, "enum_LAST_WRITE"], [87, 61, 2, "enum_LAST_READ"], [87, 2, 3, "enum_LAST_WRITE"], [85, 87, 2, "enum_LAST_READ"], [85, 2, 3, "enum_LAST_WRITE"], [91, 85, 2, "enum_LAST_READ"], [91, 2, 3, "enum_LAST_WRITE"], [98, 82, 3, "enum_LAST_WRITE"], [102, 68, 2, "enum_LAST_READ"], [102, 55, 3, "enum_LAST_WRITE"], [107, 96, 3, "enum_LAST_WRITE"], [114, 98, 2, "enum_LAST_READ"], [114, 82, 3, "enum_LAST_WRITE"], [122, 114, 2, "enum_LAST_READ"], [122, 82, 3, "enum_LAST_WRITE"], [126, 102, 2, "enum_LAST_READ"], [126, 55, 3, "enum_LAST_WRITE"], [120, 107, 2, "enum_LAST_READ"], [120, 96, 3, "enum_LAST_WRITE"], [131, 107, 2, "enum_LAST_READ"], [131, 120, 3, "enum_LAST_WRITE"], [145, 126, 2, "enum_LAST_READ"], [145, 55, 3, "enum_LAST_WRITE"], [147, 122, 2, "enum_LAST_READ"], [147, 82, 3, "enum_LAST_WRITE"], [160, 131, 2, "enum_LAST_READ"], [160, 107, 2, "enum_LAST_READ"], [160, 96, 3, "enum_LAST_WRITE"], [160, 120, 3, "enum_LAST_WRITE"], [162, 98, 2, "enum_LAST_READ"], [162, 122, 2, "enum_LAST_READ"], [162, 82, 3, "enum_LAST_WRITE"], [175, 160, 2, "enum_LAST_READ"], [175, 96, 3, "enum_LAST_WRITE"], [175, 120, 3, "enum_LAST_WRITE"], [179, 162, 2, "enum_LAST_READ"], [179, 82, 3, "enum_LAST_WRITE"], [189, 27, 2, "enum_LAST_READ"], [189, 34, 3, "enum_LAST_WRITE"], [191, 30, 2, "enum_LAST_READ"], [191, 36, 3, "enum_LAST_WRITE"], [194, 189, 2, "enum_LAST_READ"], [194, 34, 3, "enum_LAST_WRITE"], [196, 191, 2, "enum_LAST_READ"], [196, 36, 3, "enum_LAST_WRITE"], [199, 57, 2, "enum_LAST_READ"], [199, 13, 3, "enum_LAST_WRITE"], [206, 189, 2, "enum_LAST_READ"], [206, 194, 3, "enum_LAST_WRITE"], [208, 160, 2, "enum_LAST_READ"], [208, 96, 3, "enum_LAST_WRITE"], [208, 120, 3, "enum_LAST_WRITE"], [186, 199, 2, "enum_LAST_READ"], [186, 13, 3, "enum_LAST_WRITE"], [225, 49, 2, "enum_LAST_READ"], [225, 2, 3, "enum_LAST_WRITE"], [230, 208, 2, "enum_LAST_READ"], [230, 223, 3, "enum_LAST_WRITE"], [230, 120, 3, "enum_LAST_WRITE"], [230, 96, 3, "enum_LAST_WRITE"], [233, 199, 2, "enum_LAST_READ"], [233, 186, 3, "enum_LAST_WRITE"], [233, 13, 3, "enum_LAST_WRITE"], [236, 228, 3, "enum_LAST_WRITE"], [243, 236, 2, "enum_LAST_READ"], [243, 228, 3, "enum_LAST_WRITE"], [13, 15, 4, "enum_COMPUTED_FROM"], [13, 30, 4, "enum_COMPUTED_FROM"], [13, 25, 4, "enum_COMPUTED_FROM"], [13, 27, 4, "enum_COMPUTED_FROM"], [13, 34, 4, "enum_COMPUTED_FROM"], [13, 36, 4, "enum_COMPUTED_FROM"], [13, 39, 4, "enum_COMPUTED_FROM"], [13, 41, 4, "enum_COMPUTED_FROM"], [13, 43, 4, "enum_COMPUTED_FROM"], [13, 19, 4, "enum_COMPUTED_FROM"], [228, 230, 4, "enum_COMPUTED_FROM"], [228, 233, 4, "enum_COMPUTED_FROM"], [55, 57, 4, "enum_COMPUTED_FROM"], [55, 61, 4, "enum_COMPUTED_FROM"], [82, 85, 4, "enum_COMPUTED_FROM"], [82, 87, 4, "enum_COMPUTED_FROM"], [82, 91, 4, "enum_COMPUTED_FROM"], [96, 102, 4, "enum_COMPUTED_FROM"], [96, 98, 4, "enum_COMPUTED_FROM"], [186, 189, 4, "enum_COMPUTED_FROM"], [186, 191, 4, "enum_COMPUTED_FROM"], [186, 194, 4, "enum_COMPUTED_FROM"], [186, 196, 4, "enum_COMPUTED_FROM"], [186, 206, 4, "enum_COMPUTED_FROM"], [186, 199, 4, "enum_COMPUTED_FROM"], [186, 208, 4, "enum_COMPUTED_FROM"], [223, 225, 4, "enum_COMPUTED_FROM"], [120, 126, 4, "enum_COMPUTED_FROM"], [120, 122, 4, "enum_COMPUTED_FROM"]], "error_location": 162, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/ArunTejCh/python-driver.git", "old_path": "cqlengine/models.py", "hash": "2984ba71634e5c3d4b23bb42a977401ca60ffc01", "code": "def _construct_instance(cls, names: List[str], values: List[Any]) -> \"BaseClass\":\n    \"\"\"\n    method used to construct instances from query results\n    this is where polymorphic deserialization occurs\n    \"\"\"\n    field_dict: Dict[str, Any] = dict((cls._db_map.get(k, k), v) for k, v in zip(names, values))\n    if cls._is_polymorphic:\n        poly_key: Optional[str] = field_dict.get(cls._polymorphic_column_name)\n\n        if poly_key is None:\n            raise PolyMorphicModelException('polymorphic key was not found in values')\n\n        poly_base: Type[BaseClass] = cls if cls._is_polymorphic_base else cls._polymorphic_base\n\n        klass: Optional[Type[BaseClass]] = poly_base._get_model_by_polymorphic_key(poly_key)\n        if klass is None:\n            poly_base._discover_polymorphic_submodels()\n            klass: Optional[Type[BaseClass]] = poly_base._get_model_by_polymorphic_key(poly_key)\n            if klass is None:\n                raise PolyMorphicModelException(\n                    'unrecognized polymorphic key {} for class {}'.format(poly_key, poly_base.__name__)\n                )\n\n        if not issubclass(klass, poly_base):\n            raise PolyMorphicModelException(\n                '{} is not a subclass of {}'.format(klass.__name__, poly_base.__name__)\n            )\n\n        field_dict: Dict[str, Any] = {k: v for k, v in field_dict.items() if k in klass._columns.keys()}\n\n    else:\n        klass = cls\n\n    instance: BaseClass = klass(**field_dict)\n    instance._is_persisted = True\n    return instance\n", "rewrite": "ReplaceText(target='cls' @(233,37)->(233,46))", "error_line": 23, "has_bug": true, "code_full": "from typing import Any, Dict, List, Optional, Type\n\n\nclass PolyMorphicModelException(Exception):\n    pass\n\n\nclass BaseClass:\n    _db_map: Dict[str, str]\n    _columns: Dict[str, Any]\n    _is_polymorphic: bool\n    _is_polymorphic_base: bool\n    _polymorphic_column_name: str\n    _polymorphic_base: Type[\"BaseClass\"]\n    _is_persisted: bool\n\n    @classmethod\n    def _get_model_by_polymorphic_key(cls, key: str) -> Optional[Type[\"BaseClass\"]]:\n        return None\n\n    @classmethod\n    def _discover_polymorphic_submodels(cls) -> None:\n        pass\n\n    @classmethod\n    def _construct_instance(cls, names: List[str], values: List[Any]) -> \"BaseClass\":\n        \"\"\"\n        method used to construct instances from query results\n        this is where polymorphic deserialization occurs\n        \"\"\"\n        field_dict: Dict[str, Any] = dict((cls._db_map.get(k, k), v) for k, v in zip(names, values))\n        if cls._is_polymorphic:\n            poly_key: Optional[str] = field_dict.get(cls._polymorphic_column_name)\n\n            if poly_key is None:\n                raise PolyMorphicModelException('polymorphic key was not found in values')\n\n            poly_base: Type[BaseClass] = cls if cls._is_polymorphic_base else cls._polymorphic_base\n\n            klass: Optional[Type[BaseClass]] = poly_base._get_model_by_polymorphic_key(poly_key)\n            if klass is None:\n                poly_base._discover_polymorphic_submodels()\n                klass: Optional[Type[BaseClass]] = poly_base._get_model_by_polymorphic_key(poly_key)\n                if klass is None:\n                    raise PolyMorphicModelException(\n                        'unrecognized polymorphic key {} for class {}'.format(poly_key, poly_base.__name__)\n                    )\n\n            if not issubclass(klass, poly_base):\n                raise PolyMorphicModelException(\n                    '{} is not a subclass of {}'.format(klass.__name__, poly_base.__name__)\n                )\n\n            field_dict: Dict[str, Any] = {k: v for k, v in field_dict.items() if k in klass._columns.keys()}\n\n        else:\n            klass = cls\n\n        instance: BaseClass = klass(**field_dict)\n        instance._is_persisted = True\n        return instance\n", "error_location_char": [1135, 1144], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def main(", "_", ")", ":", "#NEWLINE#", "#INDENT#", "flags", ".", "mark_flags_as_required", "(", "[", "'task'", "]", ")", "#NEWLINE#", "if", "FLAGS", ".", "module_import", ":", "#NEWLINE#", "#INDENT#", "import_modules", "(", "FLAGS", ".", "module_import", ")", "#NEWLINE#", "#UNINDENT#", "gin", ".", "parse_config_files_and_bindings", "(", "FLAGS", ".", "gin_file", ",", "FLAGS", ".", "gin_param", ")", "#NEWLINE#", "total_examples", "=", "0", "#NEWLINE#", "tf", ".", "enable_eager_execution", "(", ")", "#NEWLINE#", "task", "=", "t5", ".", "data", ".", "TaskRegistry", ".", "get", "(", "FLAGS", ".", "task", ")", "#NEWLINE#", "files", "=", "task", ".", "tfds_dataset", ".", "files", "(", "FLAGS", ".", "split", ")", "#NEWLINE#", "def _example_to_string(", "ex", ")", ":", "#NEWLINE#", "#INDENT#", "key_to_string", "=", "{", "}", "#NEWLINE#", "for", "k", "in", "(", "'inputs'", ",", "'targets'", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "k", "in", "ex", ")", ":", "#NEWLINE#", "#INDENT#", "v", "=", "ex", "[", "k", "]", ".", "numpy", "(", ")", "#NEWLINE#", "key_to_string", "[", "k", "]", "=", "(", "' '", ".", "join", "(", "(", "str", "(", "i", ")", "for", "i", "in", "v", ")", ")", "if", "FLAGS", ".", "tokenize", "else", "v", ".", "decode", "(", "'utf-8'", ")", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "v", "[", "k", "]", "=", "''", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "return", "FLAGS", ".", "format_string", ".", "format", "(", "**", "key_to_string", ")", "#NEWLINE#", "#UNINDENT#", "for", "shard_path", "in", "files", ":", "#NEWLINE#", "#INDENT#", "logging", ".", "info", "(", "'Processing shard: %s'", ",", "shard_path", ")", "#NEWLINE#", "ds", "=", "task", ".", "tfds_dataset", ".", "load_shard", "(", "shard_path", ")", "#NEWLINE#", "ds", "=", "task", ".", "preprocess_text", "(", "ds", ")", "#NEWLINE#", "if", "FLAGS", ".", "tokenize", ":", "#NEWLINE#", "#INDENT#", "ds", "=", "t5", ".", "data", ".", "encode_string_features", "(", "ds", ",", "task", ".", "output_features", ",", "keys", "=", "task", ".", "output_features", ",", "copy_plaintext", "=", "True", ")", "#NEWLINE#", "ds", "=", "task", ".", "preprocess_tokens", "(", "ds", ",", "sequence_length", "(", ")", ")", "#NEWLINE#", "#UNINDENT#", "for", "ex", "in", "ds", ":", "#NEWLINE#", "#INDENT#", "print", "(", "_example_to_string", "(", "ex", ")", ")", "#NEWLINE#", "total_examples", "+=", "1", "#NEWLINE#", "if", "(", "total_examples", "==", "FLAGS", ".", "max_examples", ")", ":", "#NEWLINE#", "#INDENT#", "return"], "edges": [[6, 10, 7, "enum_FIELD"], [16, 18, 7, "enum_FIELD"], [30, 38, 7, "enum_FIELD"], [43, 46, 7, "enum_FIELD"], [47, 51, 7, "enum_FIELD"], [53, 63, 7, "enum_FIELD"], [68, 76, 7, "enum_FIELD"], [186, 185, 7, "enum_FIELD"], [186, 187, 7, "enum_FIELD"], [10, 8, 7, "enum_FIELD"], [18, 17, 7, "enum_FIELD"], [22, 24, 7, "enum_FIELD"], [38, 32, 7, "enum_FIELD"], [51, 49, 7, "enum_FIELD"], [63, 61, 7, "enum_FIELD"], [76, 74, 7, "enum_FIELD"], [87, 90, 7, "enum_FIELD"], [95, 94, 7, "enum_FIELD"], [95, 98, 7, "enum_FIELD"], [172, 178, 7, "enum_FIELD"], [190, 196, 7, "enum_FIELD"], [199, 207, 7, "enum_FIELD"], [210, 216, 7, "enum_FIELD"], [220, 222, 7, "enum_FIELD"], [268, 267, 7, "enum_FIELD"], [268, 269, 7, "enum_FIELD"], [8, 7, 7, "enum_FIELD"], [24, 23, 7, "enum_FIELD"], [32, 31, 7, "enum_FIELD"], [36, 35, 7, "enum_FIELD"], [40, 39, 7, "enum_FIELD"], [49, 48, 7, "enum_FIELD"], [61, 59, 7, "enum_FIELD"], [65, 64, 7, "enum_FIELD"], [74, 72, 7, "enum_FIELD"], [78, 77, 7, "enum_FIELD"], [110, 107, 7, "enum_FIELD"], [178, 176, 7, "enum_FIELD"], [196, 192, 7, "enum_FIELD"], [207, 205, 7, "enum_FIELD"], [216, 214, 7, "enum_FIELD"], [222, 221, 7, "enum_FIELD"], [226, 240, 7, "enum_FIELD"], [251, 259, 7, "enum_FIELD"], [272, 274, 7, "enum_FIELD"], [280, 281, 7, "enum_FIELD"], [280, 283, 7, "enum_FIELD"], [285, 288, 7, "enum_FIELD"], [26, 25, 7, "enum_FIELD"], [59, 57, 7, "enum_FIELD"], [72, 71, 7, "enum_FIELD"], [107, 106, 7, "enum_FIELD"], [112, 121, 7, "enum_FIELD"], [123, 145, 7, "enum_FIELD"], [162, 168, 7, "enum_FIELD"], [176, 174, 7, "enum_FIELD"], [179, 180, 7, "enum_FIELD"], [192, 191, 7, "enum_FIELD"], [205, 203, 7, "enum_FIELD"], [214, 213, 7, "enum_FIELD"], [240, 232, 7, "enum_FIELD"], [259, 255, 7, "enum_FIELD"], [274, 273, 7, "enum_FIELD"], [288, 287, 7, "enum_FIELD"], [57, 56, 7, "enum_FIELD"], [121, 119, 7, "enum_FIELD"], [125, 124, 7, "enum_FIELD"], [125, 126, 7, "enum_FIELD"], [145, 147, 7, "enum_FIELD"], [145, 133, 7, "enum_FIELD"], [145, 153, 7, "enum_FIELD"], [164, 163, 7, "enum_FIELD"], [164, 165, 7, "enum_FIELD"], [174, 173, 7, "enum_FIELD"], [203, 202, 7, "enum_FIELD"], [232, 230, 7, "enum_FIELD"], [238, 237, 7, "enum_FIELD"], [241, 244, 7, "enum_FIELD"], [247, 249, 7, "enum_FIELD"], [255, 254, 7, "enum_FIELD"], [261, 260, 7, "enum_FIELD"], [276, 275, 7, "enum_FIELD"], [290, 289, 7, "enum_FIELD"], [119, 116, 7, "enum_FIELD"], [147, 146, 7, "enum_FIELD"], [133, 131, 7, "enum_FIELD"], [153, 151, 7, "enum_FIELD"], [230, 229, 7, "enum_FIELD"], [244, 243, 7, "enum_FIELD"], [116, 115, 7, "enum_FIELD"], [116, 117, 7, "enum_FIELD"], [131, 130, 7, "enum_FIELD"], [134, 136, 7, "enum_FIELD"], [151, 150, 7, "enum_FIELD"], [136, 135, 7, "enum_FIELD"], [139, 140, 7, "enum_FIELD"], [139, 142, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [25, 17, 10, "enum_LAST_LEXICAL_USE"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [35, 25, 10, "enum_LAST_LEXICAL_USE"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [39, 35, 10, "enum_LAST_LEXICAL_USE"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [64, 39, 10, "enum_LAST_LEXICAL_USE"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [71, 54, 10, "enum_LAST_LEXICAL_USE"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [77, 64, 10, "enum_LAST_LEXICAL_USE"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [106, 94, 10, "enum_LAST_LEXICAL_USE"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [108, 83, 10, "enum_LAST_LEXICAL_USE"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [115, 108, 10, "enum_LAST_LEXICAL_USE"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [117, 106, 10, "enum_LAST_LEXICAL_USE"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [124, 88, 10, "enum_LAST_LEXICAL_USE"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [126, 117, 10, "enum_LAST_LEXICAL_USE"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [140, 137, 10, "enum_LAST_LEXICAL_USE"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [142, 113, 10, "enum_LAST_LEXICAL_USE"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [146, 77, 10, "enum_LAST_LEXICAL_USE"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [150, 142, 10, "enum_LAST_LEXICAL_USE"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 162, 9, "enum_NEXT_SYNTAX"], [163, 150, 10, "enum_LAST_LEXICAL_USE"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [165, 126, 10, "enum_LAST_LEXICAL_USE"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 172, 9, "enum_NEXT_SYNTAX"], [173, 146, 10, "enum_LAST_LEXICAL_USE"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [180, 124, 10, "enum_LAST_LEXICAL_USE"], [179, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 184, 9, "enum_NEXT_SYNTAX"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [187, 69, 10, "enum_LAST_LEXICAL_USE"], [186, 187, 9, "enum_NEXT_SYNTAX"], [187, 188, 9, "enum_NEXT_SYNTAX"], [188, 190, 9, "enum_NEXT_SYNTAX"], [190, 191, 9, "enum_NEXT_SYNTAX"], [191, 192, 9, "enum_NEXT_SYNTAX"], [192, 193, 9, "enum_NEXT_SYNTAX"], [193, 194, 9, "enum_NEXT_SYNTAX"], [194, 195, 9, "enum_NEXT_SYNTAX"], [195, 196, 9, "enum_NEXT_SYNTAX"], [197, 185, 10, "enum_LAST_LEXICAL_USE"], [196, 197, 9, "enum_NEXT_SYNTAX"], [197, 198, 9, "enum_NEXT_SYNTAX"], [198, 199, 9, "enum_NEXT_SYNTAX"], [199, 200, 9, "enum_NEXT_SYNTAX"], [200, 201, 9, "enum_NEXT_SYNTAX"], [202, 71, 10, "enum_LAST_LEXICAL_USE"], [201, 202, 9, "enum_NEXT_SYNTAX"], [202, 203, 9, "enum_NEXT_SYNTAX"], [203, 204, 9, "enum_NEXT_SYNTAX"], [204, 205, 9, "enum_NEXT_SYNTAX"], [205, 206, 9, "enum_NEXT_SYNTAX"], [206, 207, 9, "enum_NEXT_SYNTAX"], [208, 197, 10, "enum_LAST_LEXICAL_USE"], [207, 208, 9, "enum_NEXT_SYNTAX"], [208, 209, 9, "enum_NEXT_SYNTAX"], [209, 210, 9, "enum_NEXT_SYNTAX"], [211, 200, 10, "enum_LAST_LEXICAL_USE"], [210, 211, 9, "enum_NEXT_SYNTAX"], [211, 212, 9, "enum_NEXT_SYNTAX"], [213, 202, 10, "enum_LAST_LEXICAL_USE"], [212, 213, 9, "enum_NEXT_SYNTAX"], [213, 214, 9, "enum_NEXT_SYNTAX"], [214, 215, 9, "enum_NEXT_SYNTAX"], [215, 216, 9, "enum_NEXT_SYNTAX"], [217, 211, 10, "enum_LAST_LEXICAL_USE"], [216, 217, 9, "enum_NEXT_SYNTAX"], [217, 218, 9, "enum_NEXT_SYNTAX"], [218, 220, 9, "enum_NEXT_SYNTAX"], [221, 173, 10, "enum_LAST_LEXICAL_USE"], [220, 221, 9, "enum_NEXT_SYNTAX"], [221, 222, 9, "enum_NEXT_SYNTAX"], [222, 223, 9, "enum_NEXT_SYNTAX"], [223, 224, 9, "enum_NEXT_SYNTAX"], [224, 226, 9, "enum_NEXT_SYNTAX"], [227, 217, 10, "enum_LAST_LEXICAL_USE"], [226, 227, 9, "enum_NEXT_SYNTAX"], [227, 228, 9, "enum_NEXT_SYNTAX"], [229, 56, 10, "enum_LAST_LEXICAL_USE"], [228, 229, 9, "enum_NEXT_SYNTAX"], [229, 230, 9, "enum_NEXT_SYNTAX"], [230, 231, 9, "enum_NEXT_SYNTAX"], [231, 232, 9, "enum_NEXT_SYNTAX"], [232, 233, 9, "enum_NEXT_SYNTAX"], [233, 234, 9, "enum_NEXT_SYNTAX"], [235, 227, 10, "enum_LAST_LEXICAL_USE"], [234, 235, 9, "enum_NEXT_SYNTAX"], [235, 236, 9, "enum_NEXT_SYNTAX"], [237, 213, 10, "enum_LAST_LEXICAL_USE"], [236, 237, 9, "enum_NEXT_SYNTAX"], [237, 238, 9, "enum_NEXT_SYNTAX"], [238, 239, 9, "enum_NEXT_SYNTAX"], [239, 240, 9, "enum_NEXT_SYNTAX"], [240, 241, 9, "enum_NEXT_SYNTAX"], [241, 242, 9, "enum_NEXT_SYNTAX"], [243, 237, 10, "enum_LAST_LEXICAL_USE"], [242, 243, 9, "enum_NEXT_SYNTAX"], [243, 244, 9, "enum_NEXT_SYNTAX"], [244, 245, 9, "enum_NEXT_SYNTAX"], [245, 246, 9, "enum_NEXT_SYNTAX"], [246, 247, 9, "enum_NEXT_SYNTAX"], [247, 248, 9, "enum_NEXT_SYNTAX"], [248, 249, 9, "enum_NEXT_SYNTAX"], [249, 250, 9, "enum_NEXT_SYNTAX"], [250, 251, 9, "enum_NEXT_SYNTAX"], [252, 235, 10, "enum_LAST_LEXICAL_USE"], [251, 252, 9, "enum_NEXT_SYNTAX"], [252, 253, 9, "enum_NEXT_SYNTAX"], [254, 243, 10, "enum_LAST_LEXICAL_USE"], [253, 254, 9, "enum_NEXT_SYNTAX"], [254, 255, 9, "enum_NEXT_SYNTAX"], [255, 256, 9, "enum_NEXT_SYNTAX"], [256, 257, 9, "enum_NEXT_SYNTAX"], [258, 252, 10, "enum_LAST_LEXICAL_USE"], [257, 258, 9, "enum_NEXT_SYNTAX"], [258, 259, 9, "enum_NEXT_SYNTAX"], [259, 260, 9, "enum_NEXT_SYNTAX"], [260, 261, 9, "enum_NEXT_SYNTAX"], [261, 262, 9, "enum_NEXT_SYNTAX"], [262, 263, 9, "enum_NEXT_SYNTAX"], [263, 266, 9, "enum_NEXT_SYNTAX"], [267, 115, 10, "enum_LAST_LEXICAL_USE"], [266, 267, 9, "enum_NEXT_SYNTAX"], [267, 268, 9, "enum_NEXT_SYNTAX"], [269, 258, 10, "enum_LAST_LEXICAL_USE"], [268, 269, 9, "enum_NEXT_SYNTAX"], [269, 270, 9, "enum_NEXT_SYNTAX"], [270, 272, 9, "enum_NEXT_SYNTAX"], [272, 273, 9, "enum_NEXT_SYNTAX"], [273, 274, 9, "enum_NEXT_SYNTAX"], [274, 275, 9, "enum_NEXT_SYNTAX"], [275, 276, 9, "enum_NEXT_SYNTAX"], [277, 267, 10, "enum_LAST_LEXICAL_USE"], [276, 277, 9, "enum_NEXT_SYNTAX"], [277, 278, 9, "enum_NEXT_SYNTAX"], [278, 279, 9, "enum_NEXT_SYNTAX"], [279, 280, 9, "enum_NEXT_SYNTAX"], [281, 44, 10, "enum_LAST_LEXICAL_USE"], [280, 281, 9, "enum_NEXT_SYNTAX"], [281, 282, 9, "enum_NEXT_SYNTAX"], [282, 283, 9, "enum_NEXT_SYNTAX"], [283, 285, 9, "enum_NEXT_SYNTAX"], [285, 286, 9, "enum_NEXT_SYNTAX"], [287, 281, 10, "enum_LAST_LEXICAL_USE"], [286, 287, 9, "enum_NEXT_SYNTAX"], [287, 288, 9, "enum_NEXT_SYNTAX"], [289, 221, 10, "enum_LAST_LEXICAL_USE"], [288, 289, 9, "enum_NEXT_SYNTAX"], [289, 290, 9, "enum_NEXT_SYNTAX"], [290, 291, 9, "enum_NEXT_SYNTAX"], [291, 292, 9, "enum_NEXT_SYNTAX"], [292, 293, 9, "enum_NEXT_SYNTAX"], [293, 296, 9, "enum_NEXT_SYNTAX"], [6, 18, 1, "enum_CFG_NEXT"], [18, 30, 1, "enum_CFG_NEXT"], [18, 22, 1, "enum_CFG_NEXT"], [22, 30, 1, "enum_CFG_NEXT"], [30, 43, 1, "enum_CFG_NEXT"], [43, 47, 1, "enum_CFG_NEXT"], [47, 53, 1, "enum_CFG_NEXT"], [53, 68, 1, "enum_CFG_NEXT"], [68, 84, 1, "enum_CFG_NEXT"], [84, 187, 1, "enum_CFG_NEXT"], [87, 98, 1, "enum_CFG_NEXT"], [98, 94, 1, "enum_CFG_NEXT"], [94, 107, 1, "enum_CFG_NEXT"], [94, 172, 1, "enum_CFG_NEXT"], [107, 112, 1, "enum_CFG_NEXT"], [107, 162, 1, "enum_CFG_NEXT"], [112, 123, 1, "enum_CFG_NEXT"], [123, 94, 1, "enum_CFG_NEXT"], [162, 94, 1, "enum_CFG_NEXT"], [187, 185, 1, "enum_CFG_NEXT"], [185, 190, 1, "enum_CFG_NEXT"], [190, 199, 1, "enum_CFG_NEXT"], [199, 210, 1, "enum_CFG_NEXT"], [210, 222, 1, "enum_CFG_NEXT"], [222, 269, 1, "enum_CFG_NEXT"], [222, 226, 1, "enum_CFG_NEXT"], [226, 251, 1, "enum_CFG_NEXT"], [251, 269, 1, "enum_CFG_NEXT"], [269, 267, 1, "enum_CFG_NEXT"], [267, 185, 1, "enum_CFG_NEXT"], [267, 272, 1, "enum_CFG_NEXT"], [272, 280, 1, "enum_CFG_NEXT"], [280, 288, 1, "enum_CFG_NEXT"], [288, 267, 1, "enum_CFG_NEXT"], [288, 296, 1, "enum_CFG_NEXT"], [25, 17, 2, "enum_LAST_READ"], [35, 25, 2, "enum_LAST_READ"], [35, 17, 2, "enum_LAST_READ"], [39, 35, 2, "enum_LAST_READ"], [64, 39, 2, "enum_LAST_READ"], [71, 54, 3, "enum_LAST_WRITE"], [77, 64, 2, "enum_LAST_READ"], [94, 165, 2, "enum_LAST_READ"], [94, 126, 2, "enum_LAST_READ"], [94, 94, 3, "enum_LAST_WRITE"], [106, 165, 2, "enum_LAST_READ"], [106, 126, 2, "enum_LAST_READ"], [106, 94, 3, "enum_LAST_WRITE"], [108, 115, 2, "enum_LAST_READ"], [108, 108, 2, "enum_LAST_READ"], [108, 83, 3, "enum_LAST_WRITE"], [115, 108, 2, "enum_LAST_READ"], [115, 83, 3, "enum_LAST_WRITE"], [117, 106, 2, "enum_LAST_READ"], [117, 94, 3, "enum_LAST_WRITE"], [113, 163, 2, "enum_LAST_READ"], [113, 150, 2, "enum_LAST_READ"], [113, 113, 3, "enum_LAST_WRITE"], [146, 146, 2, "enum_LAST_READ"], [135, 135, 2, "enum_LAST_READ"], [137, 137, 2, "enum_LAST_READ"], [137, 140, 3, "enum_LAST_WRITE"], [140, 137, 2, "enum_LAST_READ"], [140, 140, 3, "enum_LAST_WRITE"], [142, 163, 2, "enum_LAST_READ"], [142, 150, 2, "enum_LAST_READ"], [142, 113, 3, "enum_LAST_WRITE"], [150, 142, 2, "enum_LAST_READ"], [150, 113, 3, "enum_LAST_WRITE"], [124, 124, 2, "enum_LAST_READ"], [124, 88, 3, "enum_LAST_WRITE"], [126, 117, 2, "enum_LAST_READ"], [126, 94, 3, "enum_LAST_WRITE"], [163, 163, 2, "enum_LAST_READ"], [163, 150, 2, "enum_LAST_READ"], [163, 113, 3, "enum_LAST_WRITE"], [165, 106, 2, "enum_LAST_READ"], [165, 94, 3, "enum_LAST_WRITE"], [173, 146, 2, "enum_LAST_READ"], [180, 124, 2, "enum_LAST_READ"], [180, 88, 3, "enum_LAST_WRITE"], [187, 69, 3, "enum_LAST_WRITE"], [185, 208, 2, "enum_LAST_READ"], [185, 185, 3, "enum_LAST_WRITE"], [191, 191, 2, "enum_LAST_READ"], [197, 208, 2, "enum_LAST_READ"], [197, 185, 3, "enum_LAST_WRITE"], [202, 71, 2, "enum_LAST_READ"], [202, 254, 2, "enum_LAST_READ"], [202, 213, 2, "enum_LAST_READ"], [202, 54, 3, "enum_LAST_WRITE"], [208, 197, 2, "enum_LAST_READ"], [208, 185, 3, "enum_LAST_WRITE"], [200, 269, 2, "enum_LAST_READ"], [200, 252, 3, "enum_LAST_WRITE"], [200, 211, 3, "enum_LAST_WRITE"], [213, 202, 2, "enum_LAST_READ"], [213, 54, 3, "enum_LAST_WRITE"], [217, 269, 2, "enum_LAST_READ"], [217, 200, 3, "enum_LAST_WRITE"], [211, 217, 2, "enum_LAST_READ"], [211, 200, 3, "enum_LAST_WRITE"], [221, 289, 2, "enum_LAST_READ"], [221, 77, 2, "enum_LAST_READ"], [221, 221, 2, "enum_LAST_READ"], [229, 229, 2, "enum_LAST_READ"], [229, 56, 2, "enum_LAST_READ"], [235, 217, 2, "enum_LAST_READ"], [235, 211, 3, "enum_LAST_WRITE"], [237, 213, 2, "enum_LAST_READ"], [237, 54, 3, "enum_LAST_WRITE"], [243, 237, 2, "enum_LAST_READ"], [243, 54, 3, "enum_LAST_WRITE"], [227, 235, 2, "enum_LAST_READ"], [227, 211, 3, "enum_LAST_WRITE"], [254, 243, 2, "enum_LAST_READ"], [254, 54, 3, "enum_LAST_WRITE"], [258, 235, 2, "enum_LAST_READ"], [258, 227, 3, "enum_LAST_WRITE"], [260, 260, 2, "enum_LAST_READ"], [252, 258, 2, "enum_LAST_READ"], [252, 227, 3, "enum_LAST_WRITE"], [269, 258, 2, "enum_LAST_READ"], [269, 217, 2, "enum_LAST_READ"], [269, 252, 3, "enum_LAST_WRITE"], [269, 211, 3, "enum_LAST_WRITE"], [267, 277, 2, "enum_LAST_READ"], [267, 267, 3, "enum_LAST_WRITE"], [273, 273, 2, "enum_LAST_READ"], [275, 275, 2, "enum_LAST_READ"], [275, 84, 3, "enum_LAST_WRITE"], [277, 277, 2, "enum_LAST_READ"], [277, 267, 3, "enum_LAST_WRITE"], [281, 287, 2, "enum_LAST_READ"], [281, 281, 3, "enum_LAST_WRITE"], [281, 44, 3, "enum_LAST_WRITE"], [281, 281, 2, "enum_LAST_READ"], [281, 281, 3, "enum_LAST_WRITE"], [281, 44, 3, "enum_LAST_WRITE"], [287, 281, 2, "enum_LAST_READ"], [287, 281, 3, "enum_LAST_WRITE"], [289, 289, 2, "enum_LAST_READ"], [289, 221, 2, "enum_LAST_READ"], [54, 64, 4, "enum_COMPUTED_FROM"], [54, 56, 4, "enum_COMPUTED_FROM"], [69, 77, 4, "enum_COMPUTED_FROM"], [69, 71, 4, "enum_COMPUTED_FROM"], [200, 208, 4, "enum_COMPUTED_FROM"], [200, 202, 4, "enum_COMPUTED_FROM"], [211, 217, 4, "enum_COMPUTED_FROM"], [211, 213, 4, "enum_COMPUTED_FROM"], [227, 235, 4, "enum_COMPUTED_FROM"], [227, 237, 4, "enum_COMPUTED_FROM"], [227, 229, 4, "enum_COMPUTED_FROM"], [227, 243, 4, "enum_COMPUTED_FROM"], [252, 258, 4, "enum_COMPUTED_FROM"], [252, 254, 4, "enum_COMPUTED_FROM"], [252, 260, 4, "enum_COMPUTED_FROM"], [113, 115, 4, "enum_COMPUTED_FROM"], [113, 117, 4, "enum_COMPUTED_FROM"], [125, 146, 4, "enum_COMPUTED_FROM"], [125, 150, 4, "enum_COMPUTED_FROM"], [125, 135, 4, "enum_COMPUTED_FROM"], [125, 137, 4, "enum_COMPUTED_FROM"], [125, 140, 4, "enum_COMPUTED_FROM"], [125, 142, 4, "enum_COMPUTED_FROM"], [276, 84, 11, "enum_CALLS"], [172, 276, 5, "enum_RETURNS_TO"], [277, 83, 6, "enum_FORMAL_ARG_NAME"]], "error_location": 163, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/google-research/text-to-text-transfer-transformer.git", "old_path": "t5/scripts/dump_task.py", "hash": "d2c010b48b702f22fb665d2e5723c7baaf4f6a1c", "code": "def main(_):\n    flags.mark_flags_as_required([\"task\"])\n\n    if FLAGS.module_import:\n        import_modules(FLAGS.module_import)\n\n    gin.parse_config_files_and_bindings(FLAGS.gin_file, FLAGS.gin_param)\n\n    total_examples = 0\n    tf.enable_eager_execution()\n    task = t5.data.TaskRegistry.get(FLAGS.task)\n    files = task.tfds_dataset.files(FLAGS.split)\n\n    def _example_to_string(ex: Dict[str, Any]) -> str:\n        key_to_string: Dict[str, str] = {}\n        for k in (\"inputs\", \"targets\"):\n            k: str\n            if k in ex:\n                v: bytes = ex[k].numpy()\n                key_to_string[k] = (\n                    \" \".join(str(i) for i in v) if FLAGS.tokenize else v.decode(\"utf-8\")\n                )\n            else:\n                v[k] = \"\"\n        return FLAGS.format_string.format(**key_to_string)\n\n    for shard_path in files:\n        logging.info(\"Processing shard: %s\", shard_path)\n        ds = task.tfds_dataset.load_shard(shard_path)\n        ds = task.preprocess_text(ds)\n        if FLAGS.tokenize:\n            ds = t5.data.encode_string_features(\n                ds, task.output_features, keys=task.output_features, copy_plaintext=True\n            )\n            ds = task.preprocess_tokens(ds, sequence_length())\n\n        for ex in ds:\n            print(_example_to_string(ex))\n            total_examples += 1\n            if total_examples == FLAGS.max_examples:\n                return\n", "rewrite": "ReplaceText(target='key_to_string' @(101,8)->(101,9))", "error_line": 21, "has_bug": true, "code_full": "import logging\nfrom typing import Any, Dict, List, Optional\n\nimport gin\nimport numpy as np\nimport t5\nimport tensorflow as tf\nfrom absl import flags\n\nFLAGS = flags.FLAGS\n\n\ndef sequence_length() -> Dict[str, int]:\n    return {}\n\n\ndef import_modules(modules: List[str]):\n    pass\n\n\ndef main(_):\n    flags.mark_flags_as_required([\"task\"])\n\n    if FLAGS.module_import:\n        import_modules(FLAGS.module_import)\n\n    gin.parse_config_files_and_bindings(FLAGS.gin_file, FLAGS.gin_param)\n\n    total_examples = 0\n    tf.enable_eager_execution()\n    task = t5.data.TaskRegistry.get(FLAGS.task)\n    files = task.tfds_dataset.files(FLAGS.split)\n\n    def _example_to_string(ex: Dict[str, Any]) -> str:\n        key_to_string: Dict[str, str] = {}\n        for k in (\"inputs\", \"targets\"):\n            k: str\n            if k in ex:\n                v: bytes = ex[k].numpy()\n                key_to_string[k] = (\n                    \" \".join(str(i) for i in v) if FLAGS.tokenize else v.decode(\"utf-8\")\n                )\n            else:\n                v[k] = \"\"\n        return FLAGS.format_string.format(**key_to_string)\n\n    for shard_path in files:\n        logging.info(\"Processing shard: %s\", shard_path)\n        ds = task.tfds_dataset.load_shard(shard_path)\n        ds = task.preprocess_text(ds)\n        if FLAGS.tokenize:\n            ds = t5.data.encode_string_features(\n                ds, task.output_features, keys=task.output_features, copy_plaintext=True\n            )\n            ds = task.preprocess_tokens(ds, sequence_length())\n\n        for ex in ds:\n            print(_example_to_string(ex))\n            total_examples += 1\n            if total_examples == FLAGS.max_examples:\n                return\n", "error_location_char": [757, 758], "type_checked_pytype": false, "type_error_label": "unsupported-operands", "type_checked_mypy": false}
{"source_tokens": ["#NEWLINE#", "def check_password(", "password", ",", "encoded", ",", "setter", "=", "None", ",", "preferred", "=", "'default'", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n    Returns a boolean of whether the raw password matches the three\\n    part encoded digest.\\n\\n    If setter is specified, it'll be called when you need to\\n    regenerate the password.\\n    \"", "#NEWLINE#", "if", "(", "(", "password", "is", "None", ")", "or", "(", "not", "is_password_usable", "(", "encoded", ")", ")", ")", ":", "#NEWLINE#", "#INDENT#", "return", "False", "#NEWLINE#", "#UNINDENT#", "preferred", "=", "get_hasher", "(", "preferred", ")", "#NEWLINE#", "hasher", "=", "identify_hasher", "(", "encoded", ")", "#NEWLINE#", "must_update", "=", "(", "hasher", ".", "algorithm", "!=", "preferred", ".", "algorithm", ")", "#NEWLINE#", "if", "(", "not", "must_update", ")", ":", "#NEWLINE#", "#INDENT#", "must_update", "=", "hasher", ".", "must_update", "(", "encoded", ")", "#NEWLINE#", "#UNINDENT#", "is_correct", "=", "hasher", ".", "verify", "(", "password", ",", "encoded", ")", "#NEWLINE#", "if", "(", "setter", "and", "is_correct", "and", "must_update", ")", ":", "#NEWLINE#", "#INDENT#", "setter", "(", "password", ")", "#NEWLINE#", "#UNINDENT#", "return", "is_correct"], "edges": [[1, 7, 7, "enum_FIELD"], [16, 17, 7, "enum_FIELD"], [19, 26, 7, "enum_FIELD"], [41, 45, 7, "enum_FIELD"], [48, 52, 7, "enum_FIELD"], [55, 62, 7, "enum_FIELD"], [68, 70, 7, "enum_FIELD"], [85, 93, 7, "enum_FIELD"], [97, 100, 7, "enum_FIELD"], [114, 115, 7, "enum_FIELD"], [38, 39, 7, "enum_FIELD"], [45, 44, 7, "enum_FIELD"], [52, 51, 7, "enum_FIELD"], [62, 60, 7, "enum_FIELD"], [70, 71, 7, "enum_FIELD"], [75, 81, 7, "enum_FIELD"], [93, 89, 7, "enum_FIELD"], [107, 109, 7, "enum_FIELD"], [23, 22, 7, "enum_FIELD"], [28, 30, 7, "enum_FIELD"], [60, 59, 7, "enum_FIELD"], [64, 63, 7, "enum_FIELD"], [81, 79, 7, "enum_FIELD"], [89, 88, 7, "enum_FIELD"], [109, 108, 7, "enum_FIELD"], [30, 29, 7, "enum_FIELD"], [79, 78, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [22, 2, 10, "enum_LAST_LEXICAL_USE"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [31, 4, 10, "enum_LAST_LEXICAL_USE"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 41, 9, "enum_NEXT_SYNTAX"], [42, 10, 10, "enum_LAST_LEXICAL_USE"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [46, 42, 10, "enum_LAST_LEXICAL_USE"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [53, 31, 10, "enum_LAST_LEXICAL_USE"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [59, 49, 10, "enum_LAST_LEXICAL_USE"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [63, 46, 10, "enum_LAST_LEXICAL_USE"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [71, 56, 10, "enum_LAST_LEXICAL_USE"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 75, 9, "enum_NEXT_SYNTAX"], [76, 71, 10, "enum_LAST_LEXICAL_USE"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [78, 59, 10, "enum_LAST_LEXICAL_USE"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [82, 53, 10, "enum_LAST_LEXICAL_USE"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [88, 78, 10, "enum_LAST_LEXICAL_USE"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [92, 22, 10, "enum_LAST_LEXICAL_USE"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [94, 82, 10, "enum_LAST_LEXICAL_USE"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [99, 6, 10, "enum_LAST_LEXICAL_USE"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [101, 86, 10, "enum_LAST_LEXICAL_USE"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [103, 76, 10, "enum_LAST_LEXICAL_USE"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 107, 9, "enum_NEXT_SYNTAX"], [108, 99, 10, "enum_LAST_LEXICAL_USE"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [110, 92, 10, "enum_LAST_LEXICAL_USE"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 114, 9, "enum_NEXT_SYNTAX"], [115, 101, 10, "enum_LAST_LEXICAL_USE"], [114, 115, 9, "enum_NEXT_SYNTAX"], [8, 12, 1, "enum_CFG_NEXT"], [12, 1, 1, "enum_CFG_NEXT"], [7, 16, 1, "enum_CFG_NEXT"], [16, 26, 1, "enum_CFG_NEXT"], [26, 41, 1, "enum_CFG_NEXT"], [26, 38, 1, "enum_CFG_NEXT"], [41, 48, 1, "enum_CFG_NEXT"], [48, 55, 1, "enum_CFG_NEXT"], [55, 70, 1, "enum_CFG_NEXT"], [70, 85, 1, "enum_CFG_NEXT"], [70, 75, 1, "enum_CFG_NEXT"], [75, 85, 1, "enum_CFG_NEXT"], [85, 100, 1, "enum_CFG_NEXT"], [100, 107, 1, "enum_CFG_NEXT"], [100, 114, 1, "enum_CFG_NEXT"], [107, 114, 1, "enum_CFG_NEXT"], [22, 2, 3, "enum_LAST_WRITE"], [31, 4, 3, "enum_LAST_WRITE"], [46, 10, 3, "enum_LAST_WRITE"], [42, 46, 2, "enum_LAST_READ"], [42, 10, 3, "enum_LAST_WRITE"], [53, 31, 2, "enum_LAST_READ"], [53, 4, 3, "enum_LAST_WRITE"], [59, 49, 3, "enum_LAST_WRITE"], [63, 46, 2, "enum_LAST_READ"], [63, 42, 3, "enum_LAST_WRITE"], [71, 56, 3, "enum_LAST_WRITE"], [78, 59, 2, "enum_LAST_READ"], [78, 49, 3, "enum_LAST_WRITE"], [82, 53, 2, "enum_LAST_READ"], [82, 4, 3, "enum_LAST_WRITE"], [76, 71, 2, "enum_LAST_READ"], [76, 56, 3, "enum_LAST_WRITE"], [88, 59, 2, "enum_LAST_READ"], [88, 78, 2, "enum_LAST_READ"], [88, 49, 3, "enum_LAST_WRITE"], [92, 22, 2, "enum_LAST_READ"], [92, 2, 3, "enum_LAST_WRITE"], [94, 82, 2, "enum_LAST_READ"], [94, 53, 2, "enum_LAST_READ"], [94, 4, 3, "enum_LAST_WRITE"], [99, 6, 3, "enum_LAST_WRITE"], [101, 86, 3, "enum_LAST_WRITE"], [103, 71, 2, "enum_LAST_READ"], [103, 56, 3, "enum_LAST_WRITE"], [103, 76, 3, "enum_LAST_WRITE"], [108, 99, 2, "enum_LAST_READ"], [108, 6, 3, "enum_LAST_WRITE"], [110, 92, 2, "enum_LAST_READ"], [110, 2, 3, "enum_LAST_WRITE"], [115, 101, 2, "enum_LAST_READ"], [115, 86, 3, "enum_LAST_WRITE"], [42, 44, 4, "enum_COMPUTED_FROM"], [42, 46, 4, "enum_COMPUTED_FROM"], [49, 51, 4, "enum_COMPUTED_FROM"], [49, 53, 4, "enum_COMPUTED_FROM"], [56, 59, 4, "enum_COMPUTED_FROM"], [56, 63, 4, "enum_COMPUTED_FROM"], [86, 92, 4, "enum_COMPUTED_FROM"], [86, 94, 4, "enum_COMPUTED_FROM"], [86, 88, 4, "enum_COMPUTED_FROM"], [76, 82, 4, "enum_COMPUTED_FROM"], [76, 78, 4, "enum_COMPUTED_FROM"]], "error_location": 78, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/iMerica/dj-models.git", "old_path": "django/contrib/auth/hashers.py", "hash": "fddb0131d37109c809ec391e1a134ef1d9e442a7", "code": "def check_password(password: Optional[str], encoded: str, setter: Optional[Callable[[str], None]]=None, preferred: str='default') -> bool:\n    \"\"\"\n    Returns a boolean of whether the raw password matches the three\n    part encoded digest.\n\n    If setter is specified, it'll be called when you need to\n    regenerate the password.\n    \"\"\"\n    if password is None or not is_password_usable(encoded):\n        return False\n\n    preferred: BasePasswordHasher = get_hasher(preferred)\n    hasher: BasePasswordHasher = identify_hasher(encoded)\n\n    must_update: bool = hasher.algorithm != preferred.algorithm\n    if not must_update:\n        must_update = hasher.must_update(encoded)\n    is_correct: bool = hasher.verify(password, encoded)\n    if setter and is_correct and must_update:\n        setter(password)\n    return is_correct\n", "rewrite": "ReplaceText(target='preferred' @(60,22)->(60,28))", "error_line": 16, "has_bug": true, "code_full": "from typing import Any, Callable, Optional\n\n\nclass BasePasswordHasher:\n    algorithm: Any\n\n    def must_update(self, encoded: str) -> bool:\n        return False\n    \n    def verify(self, password: str, encoded: str) -> bool:\n        return False\n\ndef is_password_usable(encoded: str) -> bool:\n    return True\n\ndef get_hasher(algorithm: str) -> BasePasswordHasher:\n    return BasePasswordHasher()\n\ndef identify_hasher(encoded: str) -> BasePasswordHasher:\n    return BasePasswordHasher()\n\n\ndef check_password(password: Optional[str], encoded: str, setter: Optional[Callable[[str], None]]=None, preferred: str='default') -> bool:\n    \"\"\"\n    Returns a boolean of whether the raw password matches the three\n    part encoded digest.\n\n    If setter is specified, it'll be called when you need to\n    regenerate the password.\n    \"\"\"\n    if password is None or not is_password_usable(encoded):\n        return False\n\n    preferred: BasePasswordHasher = get_hasher(preferred)\n    hasher: BasePasswordHasher = identify_hasher(encoded)\n\n    must_update: bool = hasher.algorithm != preferred.algorithm\n    if not must_update:\n        must_update = hasher.must_update(encoded)\n    is_correct: bool = hasher.verify(password, encoded)\n    if setter and is_correct and must_update:\n        setter(password)\n    return is_correct\n    \n", "error_location_char": [648, 654], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def assert_timestamp_and_datetime_equal(", "result", ",", "expected", ",", "path", "=", "(", ")", ",", "msg", "=", "''", ",", "allow_datetime_coercions", "=", "False", ",", "compare_nat_equal", "=", "True", ",", "**kwargs", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Branch for comparing python datetime (which includes pandas Timestamp) and\\n    np.datetime64 as equal.\\n\\n    Returns raises unless ``allow_datetime_coercions`` is passed as True.\\n    '", "#NEWLINE#", "assert", "(", "allow_datetime_coercions", "or", "(", "type", "(", "result", ")", "==", "type", "(", "expected", ")", ")", ")", ",", "(", "\"%sdatetime types (%s, %s) don't match and allow_datetime_coercions was not set.\\n%s\"", "%", "(", "_fmt_msg", "(", "msg", ")", ",", "type", "(", "result", ")", ",", "type", "(", "expected", ")", ",", "_fmt_path", "(", "path", ")", ")", ")", "#NEWLINE#", "result", "=", "pd", ".", "Timestamp", "(", "result", ")", "#NEWLINE#", "expected", "=", "pd", ".", "Timestamp", "(", "result", ")", "#NEWLINE#", "if", "(", "compare_nat_equal", "and", "pd", ".", "isnull", "(", "result", ")", "and", "pd", ".", "isnull", "(", "expected", ")", ")", ":", "#NEWLINE#", "#INDENT#", "return", "#NEWLINE#", "#UNINDENT#", "assert_equal", ".", "dispatch", "(", "object", ",", "object", ")", "(", "result", ",", "expected", ",", "path", "=", "path", ",", "**", "kwargs", ")"], "edges": [[1, 14, 7, "enum_FIELD"], [27, 28, 7, "enum_FIELD"], [30, 33, 7, "enum_FIELD"], [30, 49, 7, "enum_FIELD"], [72, 78, 7, "enum_FIELD"], [81, 87, 7, "enum_FIELD"], [91, 94, 7, "enum_FIELD"], [114, 127, 7, "enum_FIELD"], [49, 48, 7, "enum_FIELD"], [49, 60, 7, "enum_FIELD"], [78, 76, 7, "enum_FIELD"], [87, 85, 7, "enum_FIELD"], [127, 120, 7, "enum_FIELD"], [39, 36, 7, "enum_FIELD"], [76, 75, 7, "enum_FIELD"], [85, 84, 7, "enum_FIELD"], [98, 96, 7, "enum_FIELD"], [105, 103, 7, "enum_FIELD"], [120, 116, 7, "enum_FIELD"], [128, 130, 7, "enum_FIELD"], [132, 133, 7, "enum_FIELD"], [36, 35, 7, "enum_FIELD"], [41, 40, 7, "enum_FIELD"], [52, 51, 7, "enum_FIELD"], [57, 56, 7, "enum_FIELD"], [62, 61, 7, "enum_FIELD"], [67, 66, 7, "enum_FIELD"], [96, 95, 7, "enum_FIELD"], [103, 102, 7, "enum_FIELD"], [116, 115, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [32, 15, 10, "enum_LAST_LEXICAL_USE"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [37, 2, 10, "enum_LAST_LEXICAL_USE"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [40, 35, 10, "enum_LAST_LEXICAL_USE"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [42, 4, 10, "enum_LAST_LEXICAL_USE"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [53, 11, 10, "enum_LAST_LEXICAL_USE"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [56, 40, 10, "enum_LAST_LEXICAL_USE"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [58, 37, 10, "enum_LAST_LEXICAL_USE"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [61, 56, 10, "enum_LAST_LEXICAL_USE"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [63, 42, 10, "enum_LAST_LEXICAL_USE"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [68, 6, 10, "enum_LAST_LEXICAL_USE"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [73, 58, 10, "enum_LAST_LEXICAL_USE"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [79, 73, 10, "enum_LAST_LEXICAL_USE"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [82, 63, 10, "enum_LAST_LEXICAL_USE"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [84, 75, 10, "enum_LAST_LEXICAL_USE"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [88, 79, 10, "enum_LAST_LEXICAL_USE"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [93, 19, 10, "enum_LAST_LEXICAL_USE"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [95, 84, 10, "enum_LAST_LEXICAL_USE"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [99, 88, 10, "enum_LAST_LEXICAL_USE"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [102, 95, 10, "enum_LAST_LEXICAL_USE"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [106, 82, 10, "enum_LAST_LEXICAL_USE"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 112, 9, "enum_NEXT_SYNTAX"], [112, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [121, 119, 10, "enum_LAST_LEXICAL_USE"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [124, 99, 10, "enum_LAST_LEXICAL_USE"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [126, 106, 10, "enum_LAST_LEXICAL_USE"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [130, 68, 10, "enum_LAST_LEXICAL_USE"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [8, 13, 1, "enum_CFG_NEXT"], [13, 17, 1, "enum_CFG_NEXT"], [17, 21, 1, "enum_CFG_NEXT"], [21, 1, 1, "enum_CFG_NEXT"], [14, 27, 1, "enum_CFG_NEXT"], [27, 30, 1, "enum_CFG_NEXT"], [30, 72, 1, "enum_CFG_NEXT"], [72, 81, 1, "enum_CFG_NEXT"], [81, 94, 1, "enum_CFG_NEXT"], [94, 112, 1, "enum_CFG_NEXT"], [94, 114, 1, "enum_CFG_NEXT"], [32, 15, 3, "enum_LAST_WRITE"], [37, 2, 3, "enum_LAST_WRITE"], [40, 35, 2, "enum_LAST_READ"], [42, 4, 3, "enum_LAST_WRITE"], [53, 11, 3, "enum_LAST_WRITE"], [56, 40, 2, "enum_LAST_READ"], [58, 37, 2, "enum_LAST_READ"], [58, 2, 3, "enum_LAST_WRITE"], [61, 56, 2, "enum_LAST_READ"], [63, 42, 2, "enum_LAST_READ"], [63, 4, 3, "enum_LAST_WRITE"], [68, 6, 3, "enum_LAST_WRITE"], [79, 58, 2, "enum_LAST_READ"], [79, 2, 3, "enum_LAST_WRITE"], [73, 79, 2, "enum_LAST_READ"], [73, 2, 3, "enum_LAST_WRITE"], [84, 75, 2, "enum_LAST_READ"], [88, 79, 2, "enum_LAST_READ"], [88, 73, 3, "enum_LAST_WRITE"], [82, 63, 2, "enum_LAST_READ"], [82, 4, 3, "enum_LAST_WRITE"], [93, 19, 3, "enum_LAST_WRITE"], [95, 84, 2, "enum_LAST_READ"], [99, 88, 2, "enum_LAST_READ"], [99, 73, 3, "enum_LAST_WRITE"], [102, 95, 2, "enum_LAST_READ"], [106, 63, 2, "enum_LAST_READ"], [106, 82, 3, "enum_LAST_WRITE"], [121, 119, 2, "enum_LAST_READ"], [124, 99, 2, "enum_LAST_READ"], [124, 73, 3, "enum_LAST_WRITE"], [126, 106, 2, "enum_LAST_READ"], [126, 82, 3, "enum_LAST_WRITE"], [130, 68, 2, "enum_LAST_READ"], [130, 6, 3, "enum_LAST_WRITE"], [73, 79, 4, "enum_COMPUTED_FROM"], [73, 75, 4, "enum_COMPUTED_FROM"], [82, 88, 4, "enum_COMPUTED_FROM"], [82, 84, 4, "enum_COMPUTED_FROM"]], "error_location": 88, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/shlomikushchi/zipline-live2.git", "old_path": "zipline/testing/predicates.py", "hash": "03782fdfd3e49af0407b15e796adb89268997dd1", "code": "def assert_timestamp_and_datetime_equal(result: Any,\n                                        expected: Any,\n                                        path: Tuple=(),\n                                        msg: str='',\n                                        allow_datetime_coercions: bool=False,\n                                        compare_nat_equal: bool=True,\n                                        **kwargs):\n    \"\"\"\n    Branch for comparing python datetime (which includes pandas Timestamp) and\n    np.datetime64 as equal.\n\n    Returns raises unless ``allow_datetime_coercions`` is passed as True.\n    \"\"\"\n    assert allow_datetime_coercions or type(result) == type(expected), (\n        \"%sdatetime types (%s, %s) don't match and \"\n        \"allow_datetime_coercions was not set.\n%s\" % (\n            _fmt_msg(msg),\n            type(result),\n            type(expected),\n            _fmt_path(path),\n        )\n    )\n\n    result = pd.Timestamp(result)\n    expected = pd.Timestamp(result)\n    if compare_nat_equal and pd.isnull(result) and pd.isnull(expected):\n        return\n\n    assert_equal.dispatch(object, object)(\n        result,\n        expected,\n        path=path,\n        **kwargs\n    )\n", "rewrite": "ReplaceText(target='expected' @(553,28)->(553,34))", "error_line": 24, "has_bug": true, "code_full": "from typing import Any, Tuple\n\nimport numpy as np\nimport pandas as pd\n\n\nclass AssertEquals:\n    def dispatch(self, *args) -> Any:\n        pass\n\n\nassert_equal = AssertEquals()\n\n\ndef _fmt_msg(msg: str) -> str:\n    return \"\"\n\n\ndef _fmt_path(path: Tuple) -> str:\n    return \"\"\n\n\ndef assert_timestamp_and_datetime_equal(result: Any,\n                                        expected: Any,\n                                        path: Tuple=(),\n                                        msg: str='',\n                                        allow_datetime_coercions: bool=False,\n                                        compare_nat_equal: bool=True,\n                                        **kwargs):\n    \"\"\"\n    Branch for comparing python datetime (which includes pandas Timestamp) and\n    np.datetime64 as equal.\n\n    Returns raises unless ``allow_datetime_coercions`` is passed as True.\n    \"\"\"\n    assert allow_datetime_coercions or type(result) == type(expected), (\n        \"%sdatetime types (%s, %s) don't match and \"\n        \"allow_datetime_coercions was not set.\n%s\" % (\n            _fmt_msg(msg),\n            type(result),\n            type(expected),\n            _fmt_path(path),\n        )\n    )\n\n    result = pd.Timestamp(result)\n    expected = pd.Timestamp(result)\n    if compare_nat_equal and pd.isnull(result) and pd.isnull(expected):\n        return\n\n    assert_equal.dispatch(object, object)(\n        result,\n        expected,\n        path=path,\n        **kwargs\n    )\n", "error_location_char": [984, 990], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def as_sql(", "self", ",", "compiler", ",", "connection", ")", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "lhs_output", "=", "self", ".", "lhs", ".", "output_field", "#NEWLINE#", "#UNINDENT#", "except", "FieldError", ":", "#NEWLINE#", "#INDENT#", "lhs_output", "=", "None", "#NEWLINE#", "#UNINDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "rhs_output", "=", "self", ".", "rhs", ".", "output_field", "#NEWLINE#", "#UNINDENT#", "except", "FieldError", ":", "#NEWLINE#", "#INDENT#", "rhs_output", "=", "None", "#NEWLINE#", "#UNINDENT#", "if", "(", "(", "not", "connection", ".", "features", ".", "has_native_duration_field", ")", "and", "(", "(", "lhs_output", "and", "(", "lhs_output", ".", "get_internal_type", "(", ")", "==", "'DurationField'", ")", ")", "or", "(", "rhs_output", "and", "(", "rhs_output", ".", "get_internal_type", "(", ")", "==", "'DurationField'", ")", ")", ")", ")", ":", "#NEWLINE#", "#INDENT#", "return", "DurationExpression", "(", "self", ".", "lhs", ",", "self", ".", "connector", ",", "self", ".", "rhs", ")", ".", "as_sql", "(", "compiler", ",", "connection", ")", "#NEWLINE#", "#UNINDENT#", "if", "(", "lhs_output", "and", "rhs_output", "and", "(", "self", ".", "connector", "==", "self", ".", "SUB", ")", "and", "(", "lhs_output", ".", "get_internal_type", "(", ")", "in", "{", "'DateField'", ",", "'DateTimeField'", ",", "'TimeField'", "}", ")", "and", "(", "lhs_output", ".", "get_internal_type", "(", ")", "==", "lhs_output", ".", "get_internal_type", "(", ")", ")", ")", ":", "#NEWLINE#", "#INDENT#", "return", "TemporalSubtraction", "(", "self", ".", "lhs", ",", "self", ".", "rhs", ")", ".", "as_sql", "(", "compiler", ",", "connection", ")", "#NEWLINE#", "#UNINDENT#", "expressions", "=", "[", "]", "#NEWLINE#", "expression_params", "=", "[", "]", "#NEWLINE#", "(", "sql", ",", "params", ")", "=", "compiler", ".", "compile", "(", "self", ".", "lhs", ")", "#NEWLINE#", "expressions", ".", "append", "(", "sql", ")", "#NEWLINE#", "expression_params", ".", "extend", "(", "params", ")", "#NEWLINE#", "(", "sql", ",", "params", ")", "=", "compiler", ".", "compile", "(", "self", ".", "rhs", ")", "#NEWLINE#", "expressions", ".", "append", "(", "sql", ")", "#NEWLINE#", "expression_params", ".", "extend", "(", "params", ")", "#NEWLINE#", "expression_wrapper", "=", "'(%s)'", "#NEWLINE#", "sql", "=", "connection", ".", "ops", ".", "combine_expression", "(", "self", ".", "connector", ",", "expressions", ")", "#NEWLINE#", "return", "(", "(", "expression_wrapper", "%", "sql", ")", ",", "expression_params", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [57, 67, 7, "enum_FIELD"], [125, 130, 7, "enum_FIELD"], [193, 196, 7, "enum_FIELD"], [198, 201, 7, "enum_FIELD"], [203, 213, 7, "enum_FIELD"], [218, 222, 7, "enum_FIELD"], [225, 229, 7, "enum_FIELD"], [232, 242, 7, "enum_FIELD"], [247, 251, 7, "enum_FIELD"], [254, 258, 7, "enum_FIELD"], [261, 264, 7, "enum_FIELD"], [265, 277, 7, "enum_FIELD"], [281, 288, 7, "enum_FIELD"], [14, 20, 7, "enum_FIELD"], [24, 25, 7, "enum_FIELD"], [37, 43, 7, "enum_FIELD"], [47, 48, 7, "enum_FIELD"], [101, 120, 7, "enum_FIELD"], [174, 189, 7, "enum_FIELD"], [213, 211, 7, "enum_FIELD"], [222, 220, 7, "enum_FIELD"], [229, 227, 7, "enum_FIELD"], [242, 240, 7, "enum_FIELD"], [251, 249, 7, "enum_FIELD"], [258, 256, 7, "enum_FIELD"], [277, 271, 7, "enum_FIELD"], [20, 18, 7, "enum_FIELD"], [28, 31, 7, "enum_FIELD"], [43, 41, 7, "enum_FIELD"], [51, 54, 7, "enum_FIELD"], [60, 64, 7, "enum_FIELD"], [120, 116, 7, "enum_FIELD"], [135, 133, 7, "enum_FIELD"], [147, 145, 7, "enum_FIELD"], [163, 161, 7, "enum_FIELD"], [189, 185, 7, "enum_FIELD"], [211, 210, 7, "enum_FIELD"], [215, 214, 7, "enum_FIELD"], [220, 219, 7, "enum_FIELD"], [227, 226, 7, "enum_FIELD"], [240, 239, 7, "enum_FIELD"], [244, 243, 7, "enum_FIELD"], [249, 248, 7, "enum_FIELD"], [256, 255, 7, "enum_FIELD"], [271, 269, 7, "enum_FIELD"], [275, 274, 7, "enum_FIELD"], [285, 284, 7, "enum_FIELD"], [285, 286, 7, "enum_FIELD"], [18, 17, 7, "enum_FIELD"], [41, 40, 7, "enum_FIELD"], [64, 62, 7, "enum_FIELD"], [116, 107, 7, "enum_FIELD"], [133, 132, 7, "enum_FIELD"], [137, 136, 7, "enum_FIELD"], [145, 143, 7, "enum_FIELD"], [161, 159, 7, "enum_FIELD"], [167, 165, 7, "enum_FIELD"], [185, 180, 7, "enum_FIELD"], [269, 268, 7, "enum_FIELD"], [62, 61, 7, "enum_FIELD"], [78, 76, 7, "enum_FIELD"], [92, 90, 7, "enum_FIELD"], [107, 102, 7, "enum_FIELD"], [143, 142, 7, "enum_FIELD"], [159, 158, 7, "enum_FIELD"], [165, 164, 7, "enum_FIELD"], [180, 175, 7, "enum_FIELD"], [76, 74, 7, "enum_FIELD"], [90, 88, 7, "enum_FIELD"], [105, 104, 7, "enum_FIELD"], [109, 108, 7, "enum_FIELD"], [113, 112, 7, "enum_FIELD"], [178, 177, 7, "enum_FIELD"], [182, 181, 7, "enum_FIELD"], [74, 73, 7, "enum_FIELD"], [88, 87, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [17, 2, 10, "enum_LAST_LEXICAL_USE"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 28, 9, "enum_NEXT_SYNTAX"], [29, 15, 10, "enum_LAST_LEXICAL_USE"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [40, 17, 10, "enum_LAST_LEXICAL_USE"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 47, 9, "enum_NEXT_SYNTAX"], [48, 25, 10, "enum_LAST_LEXICAL_USE"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 51, 9, "enum_NEXT_SYNTAX"], [52, 38, 10, "enum_LAST_LEXICAL_USE"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [61, 6, 10, "enum_LAST_LEXICAL_USE"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [70, 29, 10, "enum_LAST_LEXICAL_USE"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [73, 70, 10, "enum_LAST_LEXICAL_USE"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [84, 52, 10, "enum_LAST_LEXICAL_USE"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [87, 84, 10, "enum_LAST_LEXICAL_USE"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [104, 40, 10, "enum_LAST_LEXICAL_USE"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [108, 104, 10, "enum_LAST_LEXICAL_USE"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [112, 108, 10, "enum_LAST_LEXICAL_USE"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [119, 4, 10, "enum_LAST_LEXICAL_USE"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [121, 61, 10, "enum_LAST_LEXICAL_USE"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [127, 73, 10, "enum_LAST_LEXICAL_USE"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [129, 87, 10, "enum_LAST_LEXICAL_USE"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [132, 112, 10, "enum_LAST_LEXICAL_USE"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [136, 132, 10, "enum_LAST_LEXICAL_USE"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [142, 127, 10, "enum_LAST_LEXICAL_USE"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [158, 142, 10, "enum_LAST_LEXICAL_USE"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [164, 158, 10, "enum_LAST_LEXICAL_USE"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [175, 176, 9, "enum_NEXT_SYNTAX"], [177, 136, 10, "enum_LAST_LEXICAL_USE"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 180, 9, "enum_NEXT_SYNTAX"], [181, 177, 10, "enum_LAST_LEXICAL_USE"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 184, 9, "enum_NEXT_SYNTAX"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [188, 119, 10, "enum_LAST_LEXICAL_USE"], [187, 188, 9, "enum_NEXT_SYNTAX"], [188, 189, 9, "enum_NEXT_SYNTAX"], [190, 121, 10, "enum_LAST_LEXICAL_USE"], [189, 190, 9, "enum_NEXT_SYNTAX"], [190, 191, 9, "enum_NEXT_SYNTAX"], [191, 193, 9, "enum_NEXT_SYNTAX"], [193, 194, 9, "enum_NEXT_SYNTAX"], [194, 195, 9, "enum_NEXT_SYNTAX"], [195, 196, 9, "enum_NEXT_SYNTAX"], [196, 197, 9, "enum_NEXT_SYNTAX"], [197, 198, 9, "enum_NEXT_SYNTAX"], [198, 199, 9, "enum_NEXT_SYNTAX"], [199, 200, 9, "enum_NEXT_SYNTAX"], [200, 201, 9, "enum_NEXT_SYNTAX"], [201, 202, 9, "enum_NEXT_SYNTAX"], [202, 203, 9, "enum_NEXT_SYNTAX"], [203, 204, 9, "enum_NEXT_SYNTAX"], [204, 205, 9, "enum_NEXT_SYNTAX"], [205, 206, 9, "enum_NEXT_SYNTAX"], [206, 207, 9, "enum_NEXT_SYNTAX"], [207, 208, 9, "enum_NEXT_SYNTAX"], [208, 209, 9, "enum_NEXT_SYNTAX"], [210, 188, 10, "enum_LAST_LEXICAL_USE"], [209, 210, 9, "enum_NEXT_SYNTAX"], [210, 211, 9, "enum_NEXT_SYNTAX"], [211, 212, 9, "enum_NEXT_SYNTAX"], [212, 213, 9, "enum_NEXT_SYNTAX"], [214, 181, 10, "enum_LAST_LEXICAL_USE"], [213, 214, 9, "enum_NEXT_SYNTAX"], [214, 215, 9, "enum_NEXT_SYNTAX"], [215, 216, 9, "enum_NEXT_SYNTAX"], [216, 217, 9, "enum_NEXT_SYNTAX"], [217, 218, 9, "enum_NEXT_SYNTAX"], [219, 194, 10, "enum_LAST_LEXICAL_USE"], [218, 219, 9, "enum_NEXT_SYNTAX"], [219, 220, 9, "enum_NEXT_SYNTAX"], [220, 221, 9, "enum_NEXT_SYNTAX"], [221, 222, 9, "enum_NEXT_SYNTAX"], [223, 205, 10, "enum_LAST_LEXICAL_USE"], [222, 223, 9, "enum_NEXT_SYNTAX"], [223, 224, 9, "enum_NEXT_SYNTAX"], [224, 225, 9, "enum_NEXT_SYNTAX"], [226, 199, 10, "enum_LAST_LEXICAL_USE"], [225, 226, 9, "enum_NEXT_SYNTAX"], [226, 227, 9, "enum_NEXT_SYNTAX"], [227, 228, 9, "enum_NEXT_SYNTAX"], [228, 229, 9, "enum_NEXT_SYNTAX"], [230, 207, 10, "enum_LAST_LEXICAL_USE"], [229, 230, 9, "enum_NEXT_SYNTAX"], [230, 231, 9, "enum_NEXT_SYNTAX"], [231, 232, 9, "enum_NEXT_SYNTAX"], [232, 233, 9, "enum_NEXT_SYNTAX"], [234, 223, 10, "enum_LAST_LEXICAL_USE"], [233, 234, 9, "enum_NEXT_SYNTAX"], [234, 235, 9, "enum_NEXT_SYNTAX"], [236, 230, 10, "enum_LAST_LEXICAL_USE"], [235, 236, 9, "enum_NEXT_SYNTAX"], [236, 237, 9, "enum_NEXT_SYNTAX"], [237, 238, 9, "enum_NEXT_SYNTAX"], [239, 210, 10, "enum_LAST_LEXICAL_USE"], [238, 239, 9, "enum_NEXT_SYNTAX"], [239, 240, 9, "enum_NEXT_SYNTAX"], [240, 241, 9, "enum_NEXT_SYNTAX"], [241, 242, 9, "enum_NEXT_SYNTAX"], [243, 214, 10, "enum_LAST_LEXICAL_USE"], [242, 243, 9, "enum_NEXT_SYNTAX"], [243, 244, 9, "enum_NEXT_SYNTAX"], [244, 245, 9, "enum_NEXT_SYNTAX"], [245, 246, 9, "enum_NEXT_SYNTAX"], [246, 247, 9, "enum_NEXT_SYNTAX"], [248, 219, 10, "enum_LAST_LEXICAL_USE"], [247, 248, 9, "enum_NEXT_SYNTAX"], [248, 249, 9, "enum_NEXT_SYNTAX"], [249, 250, 9, "enum_NEXT_SYNTAX"], [250, 251, 9, "enum_NEXT_SYNTAX"], [252, 234, 10, "enum_LAST_LEXICAL_USE"], [251, 252, 9, "enum_NEXT_SYNTAX"], [252, 253, 9, "enum_NEXT_SYNTAX"], [253, 254, 9, "enum_NEXT_SYNTAX"], [255, 226, 10, "enum_LAST_LEXICAL_USE"], [254, 255, 9, "enum_NEXT_SYNTAX"], [255, 256, 9, "enum_NEXT_SYNTAX"], [256, 257, 9, "enum_NEXT_SYNTAX"], [257, 258, 9, "enum_NEXT_SYNTAX"], [259, 236, 10, "enum_LAST_LEXICAL_USE"], [258, 259, 9, "enum_NEXT_SYNTAX"], [259, 260, 9, "enum_NEXT_SYNTAX"], [260, 261, 9, "enum_NEXT_SYNTAX"], [261, 262, 9, "enum_NEXT_SYNTAX"], [262, 263, 9, "enum_NEXT_SYNTAX"], [263, 264, 9, "enum_NEXT_SYNTAX"], [264, 265, 9, "enum_NEXT_SYNTAX"], [266, 252, 10, "enum_LAST_LEXICAL_USE"], [265, 266, 9, "enum_NEXT_SYNTAX"], [266, 267, 9, "enum_NEXT_SYNTAX"], [268, 190, 10, "enum_LAST_LEXICAL_USE"], [267, 268, 9, "enum_NEXT_SYNTAX"], [268, 269, 9, "enum_NEXT_SYNTAX"], [269, 270, 9, "enum_NEXT_SYNTAX"], [270, 271, 9, "enum_NEXT_SYNTAX"], [271, 272, 9, "enum_NEXT_SYNTAX"], [272, 273, 9, "enum_NEXT_SYNTAX"], [274, 243, 10, "enum_LAST_LEXICAL_USE"], [273, 274, 9, "enum_NEXT_SYNTAX"], [274, 275, 9, "enum_NEXT_SYNTAX"], [275, 276, 9, "enum_NEXT_SYNTAX"], [276, 277, 9, "enum_NEXT_SYNTAX"], [278, 248, 10, "enum_LAST_LEXICAL_USE"], [277, 278, 9, "enum_NEXT_SYNTAX"], [278, 279, 9, "enum_NEXT_SYNTAX"], [279, 281, 9, "enum_NEXT_SYNTAX"], [281, 282, 9, "enum_NEXT_SYNTAX"], [282, 283, 9, "enum_NEXT_SYNTAX"], [284, 262, 10, "enum_LAST_LEXICAL_USE"], [283, 284, 9, "enum_NEXT_SYNTAX"], [284, 285, 9, "enum_NEXT_SYNTAX"], [286, 266, 10, "enum_LAST_LEXICAL_USE"], [285, 286, 9, "enum_NEXT_SYNTAX"], [286, 287, 9, "enum_NEXT_SYNTAX"], [287, 288, 9, "enum_NEXT_SYNTAX"], [289, 255, 10, "enum_LAST_LEXICAL_USE"], [288, 289, 9, "enum_NEXT_SYNTAX"], [289, 290, 9, "enum_NEXT_SYNTAX"], [3, 14, 1, "enum_CFG_NEXT"], [14, 25, 1, "enum_CFG_NEXT"], [14, 37, 1, "enum_CFG_NEXT"], [25, 28, 1, "enum_CFG_NEXT"], [28, 37, 1, "enum_CFG_NEXT"], [37, 67, 1, "enum_CFG_NEXT"], [37, 48, 1, "enum_CFG_NEXT"], [48, 51, 1, "enum_CFG_NEXT"], [51, 67, 1, "enum_CFG_NEXT"], [67, 101, 1, "enum_CFG_NEXT"], [67, 130, 1, "enum_CFG_NEXT"], [130, 193, 1, "enum_CFG_NEXT"], [130, 174, 1, "enum_CFG_NEXT"], [193, 198, 1, "enum_CFG_NEXT"], [198, 203, 1, "enum_CFG_NEXT"], [203, 218, 1, "enum_CFG_NEXT"], [218, 225, 1, "enum_CFG_NEXT"], [225, 232, 1, "enum_CFG_NEXT"], [232, 247, 1, "enum_CFG_NEXT"], [247, 254, 1, "enum_CFG_NEXT"], [254, 261, 1, "enum_CFG_NEXT"], [261, 265, 1, "enum_CFG_NEXT"], [265, 281, 1, "enum_CFG_NEXT"], [17, 2, 3, "enum_LAST_WRITE"], [29, 15, 3, "enum_LAST_WRITE"], [40, 17, 2, "enum_LAST_READ"], [40, 2, 3, "enum_LAST_WRITE"], [48, 25, 2, "enum_LAST_READ"], [52, 38, 3, "enum_LAST_WRITE"], [61, 6, 3, "enum_LAST_WRITE"], [70, 15, 3, "enum_LAST_WRITE"], [70, 29, 3, "enum_LAST_WRITE"], [73, 70, 2, "enum_LAST_READ"], [73, 15, 3, "enum_LAST_WRITE"], [73, 29, 3, "enum_LAST_WRITE"], [84, 38, 3, "enum_LAST_WRITE"], [84, 52, 3, "enum_LAST_WRITE"], [87, 84, 2, "enum_LAST_READ"], [87, 38, 3, "enum_LAST_WRITE"], [87, 52, 3, "enum_LAST_WRITE"], [104, 40, 2, "enum_LAST_READ"], [104, 2, 3, "enum_LAST_WRITE"], [108, 104, 2, "enum_LAST_READ"], [108, 2, 3, "enum_LAST_WRITE"], [112, 108, 2, "enum_LAST_READ"], [112, 2, 3, "enum_LAST_WRITE"], [119, 4, 3, "enum_LAST_WRITE"], [121, 61, 2, "enum_LAST_READ"], [121, 6, 3, "enum_LAST_WRITE"], [127, 73, 2, "enum_LAST_READ"], [127, 15, 3, "enum_LAST_WRITE"], [127, 29, 3, "enum_LAST_WRITE"], [129, 87, 2, "enum_LAST_READ"], [129, 38, 3, "enum_LAST_WRITE"], [129, 52, 3, "enum_LAST_WRITE"], [132, 40, 2, "enum_LAST_READ"], [132, 2, 3, "enum_LAST_WRITE"], [136, 132, 2, "enum_LAST_READ"], [136, 2, 3, "enum_LAST_WRITE"], [142, 127, 2, "enum_LAST_READ"], [142, 15, 3, "enum_LAST_WRITE"], [142, 29, 3, "enum_LAST_WRITE"], [158, 142, 2, "enum_LAST_READ"], [158, 15, 3, "enum_LAST_WRITE"], [158, 29, 3, "enum_LAST_WRITE"], [164, 158, 2, "enum_LAST_READ"], [164, 15, 3, "enum_LAST_WRITE"], [164, 29, 3, "enum_LAST_WRITE"], [177, 136, 2, "enum_LAST_READ"], [177, 2, 3, "enum_LAST_WRITE"], [181, 177, 2, "enum_LAST_READ"], [181, 2, 3, "enum_LAST_WRITE"], [188, 4, 3, "enum_LAST_WRITE"], [190, 61, 2, "enum_LAST_READ"], [190, 6, 3, "enum_LAST_WRITE"], [210, 4, 3, "enum_LAST_WRITE"], [214, 136, 2, "enum_LAST_READ"], [214, 2, 3, "enum_LAST_WRITE"], [219, 194, 3, "enum_LAST_WRITE"], [223, 205, 3, "enum_LAST_WRITE"], [226, 199, 3, "enum_LAST_WRITE"], [230, 207, 3, "enum_LAST_WRITE"], [239, 210, 2, "enum_LAST_READ"], [239, 4, 3, "enum_LAST_WRITE"], [243, 214, 2, "enum_LAST_READ"], [243, 2, 3, "enum_LAST_WRITE"], [234, 223, 2, "enum_LAST_READ"], [234, 205, 3, "enum_LAST_WRITE"], [236, 230, 2, "enum_LAST_READ"], [236, 207, 3, "enum_LAST_WRITE"], [248, 219, 2, "enum_LAST_READ"], [248, 194, 3, "enum_LAST_WRITE"], [252, 223, 2, "enum_LAST_READ"], [252, 234, 3, "enum_LAST_WRITE"], [255, 226, 2, "enum_LAST_READ"], [255, 199, 3, "enum_LAST_WRITE"], [259, 230, 2, "enum_LAST_READ"], [259, 236, 3, "enum_LAST_WRITE"], [268, 61, 2, "enum_LAST_READ"], [268, 6, 3, "enum_LAST_WRITE"], [274, 243, 2, "enum_LAST_READ"], [274, 2, 3, "enum_LAST_WRITE"], [278, 248, 2, "enum_LAST_READ"], [278, 194, 3, "enum_LAST_WRITE"], [266, 252, 2, "enum_LAST_READ"], [266, 234, 3, "enum_LAST_WRITE"], [284, 262, 3, "enum_LAST_WRITE"], [286, 252, 2, "enum_LAST_READ"], [286, 266, 3, "enum_LAST_WRITE"], [289, 255, 2, "enum_LAST_READ"], [289, 199, 3, "enum_LAST_WRITE"], [206, 210, 4, "enum_COMPUTED_FROM"], [206, 214, 4, "enum_COMPUTED_FROM"], [235, 239, 4, "enum_COMPUTED_FROM"], [235, 243, 4, "enum_COMPUTED_FROM"], [266, 278, 4, "enum_COMPUTED_FROM"], [266, 274, 4, "enum_COMPUTED_FROM"], [266, 268, 4, "enum_COMPUTED_FROM"], [15, 17, 4, "enum_COMPUTED_FROM"], [38, 40, 4, "enum_COMPUTED_FROM"]], "error_location": 164, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/iMerica/dj-models.git", "old_path": "django/db/models/expressions.py", "hash": "d5088f838d837fc9e3109c828f18511055f20bea", "code": "def as_sql(self, compiler: Any, connection: Any) -> Tuple[str, List]:\n    try:\n        lhs_output: Field = self.lhs.output_field\n    except FieldError:\n        lhs_output = None\n    try:\n        rhs_output: Field = self.rhs.output_field\n    except FieldError:\n        rhs_output = None\n    if (not connection.features.has_native_duration_field and\n            ((lhs_output and lhs_output.get_internal_type() == 'DurationField') or\n            (rhs_output and rhs_output.get_internal_type() == 'DurationField'))):\n        return DurationExpression(self.lhs, self.connector, self.rhs).as_sql(compiler, connection)\n    if (lhs_output and rhs_output and self.connector == self.SUB and\n        lhs_output.get_internal_type() in {'DateField', 'DateTimeField', 'TimeField'} and\n            lhs_output.get_internal_type() == lhs_output.get_internal_type()):\n        return TemporalSubtraction(self.lhs, self.rhs).as_sql(compiler, connection)\n    expressions: List = []\n    expression_params: List = []\n    sql, params = compiler.compile(self.lhs)\n    expressions.append(sql)\n    expression_params.extend(params)\n    sql, params = compiler.compile(self.rhs)\n    expressions.append(sql)\n    expression_params.extend(params)\n    # order of precedence\n    expression_wrapper: str = '(%s)'\n    sql: Any = connection.ops.combine_expression(self.connector, expressions)\n    return expression_wrapper % sql, expression_params\n", "rewrite": "ReplaceText(target='rhs_output' @(386,50)->(386,60))", "error_line": 15, "has_bug": true, "code_full": "from typing import Any, List, Tuple\n\nfrom django.core.exceptions import FieldError\nfrom django.db.models import Expression, Field\n\n\nclass DurationExpression(Expression):\n    def as_sql(self, compiler: Any, connection: Any) -> Tuple[str, List]:\n        return \"\", []\n    \n\nclass TemporalSubtraction(Expression):\n    def as_sql(self, compiler: Any, connection: Any) -> Tuple[str, List]:\n        return \"\", []\n\n\nclass CombinedExpression(Expression):\n    lhs: Expression\n    rhs: Expression\n    connector: str\n\n    def as_sql(self, compiler: Any, connection: Any) -> Tuple[str, List]:\n        try:\n            lhs_output: Field = self.lhs.output_field\n        except FieldError:\n            lhs_output = None\n        try:\n            rhs_output: Field = self.rhs.output_field\n        except FieldError:\n            rhs_output = None\n        if (not connection.features.has_native_duration_field and\n                ((lhs_output and lhs_output.get_internal_type() == 'DurationField') or\n                (rhs_output and rhs_output.get_internal_type() == 'DurationField'))):\n            return DurationExpression(self.lhs, self.connector, self.rhs).as_sql(compiler, connection)\n        if (lhs_output and rhs_output and self.connector == self.SUB and\n            lhs_output.get_internal_type() in {'DateField', 'DateTimeField', 'TimeField'} and\n                lhs_output.get_internal_type() == lhs_output.get_internal_type()):\n            return TemporalSubtraction(self.lhs, self.rhs).as_sql(compiler, connection)\n        expressions: List = []\n        expression_params: List = []\n        sql, params = compiler.compile(self.lhs)\n        expressions.append(sql)\n        expression_params.extend(params)\n        sql, params = compiler.compile(self.rhs)\n        expressions.append(sql)\n        expression_params.extend(params)\n        # order of precedence\n        expression_wrapper: str = '(%s)'\n        sql: Any = connection.ops.combine_expression(self.connector, expressions)\n        return expression_wrapper % sql, expression_params\n", "error_location_char": [817, 827], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def compute_metrics(", "metrics", ",", "inputs", ",", "outputs", ",", "labels", ",", "additional_data", ")", "->", "dict", ":", "#NEWLINE#", "#INDENT#", "'\\n    AUTHORS;\\n    --------\\n\\n    :author: Alix Leroy\\n\\n    DESCRIPTION:\\n    ------------\\n\\n    Compute the metrics using the corresponding method arguments\\n\\n    PARAMETERS:\\n    -----------\\n\\n    :param metrics: dict: The metrics to compute\\n    :param inputs: Union[tensor, list]: The inputs\\n    :param outputs: Union[tensor, list]: Outputs of the network\\n    :param labels: Union[tensor, list]: Labels\\n    :param additional_data: Union[tensor, list]: Additional data\\n\\n    RETURN:\\n    -------\\n\\n    :return->dict: A dictionary containing the associations (key, output) of the metrics\\n    '", "#NEWLINE#", "result_metrics", "=", "{", "}", "#NEWLINE#", "temp_metric_result", "=", "None", "#NEWLINE#", "for", "(", "key", ",", "metric", ")", "in", "vars", "(", "metrics", ")", ".", "items", "(", ")", ":", "#NEWLINE#", "#INDENT#", "metric_args", "=", "metric", ".", "get_arguments", "(", ")", "#NEWLINE#", "metric_method", "=", "metric", ".", "get_method", "(", ")", "#NEWLINE#", "if", "(", "DEEP_ENTRY_INPUT", "in", "metric_args", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "DEEP_ENTRY_LABEL", "in", "metric_args", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "DEEP_ENTRY_ADDITIONAL_DATA", "in", "metric_args", ")", ":", "#NEWLINE#", "#INDENT#", "temp_metric_result", "=", "metric_method", "(", "inputs", ",", "outputs", ",", "labels", ",", "additional_data", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "temp_metric_result", "=", "metric_method", "(", "outputs", ",", "labels", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "DEEP_ENTRY_ADDITIONAL_DATA", "in", "metric_args", ")", ":", "#NEWLINE#", "#INDENT#", "temp_metric_result", "=", "metric_method", "(", "inputs", ",", "outputs", ",", "additional_data", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "temp_metric_result", "=", "metric_method", "(", "inputs", ",", "outputs", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "DEEP_ENTRY_LABEL", "in", "metric_args", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "DEEP_ENTRY_ADDITIONAL_DATA", "in", "metric_args", ")", ":", "#NEWLINE#", "#INDENT#", "temp_metric_result", "=", "metric_method", "(", "outputs", ",", "labels", ",", "additional_data", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "temp_metric_result", "=", "metric_method", "(", "outputs", ",", "labels", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "DEEP_ENTRY_ADDITIONAL_DATA", "in", "metric_args", ")", ":", "#NEWLINE#", "#INDENT#", "temp_metric_result", "=", "metric_method", "(", "outputs", ",", "additional_data", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "temp_metric_result", "=", "metric_method", "(", "outputs", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "if", "(", "metric", ".", "is_loss", "(", ")", "is", "True", ")", ":", "#NEWLINE#", "#INDENT#", "result_metrics", "[", "metric", ".", "get_name", "(", ")", "]", "=", "temp_metric_result", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "isinstance", "(", "temp_metric_result", ",", "torch", ".", "nn", ".", "Module", ")", ":", "#NEWLINE#", "#INDENT#", "temp_metric_result", "=", "temp_metric_result", ".", "detach", "(", ")", "#NEWLINE#", "#UNINDENT#", "result_metrics", "[", "metric", ".", "get_name", "(", ")", "]", "=", "temp_metric_result", ".", "item", "(", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "return", "result_metrics"], "edges": [[1, 5, 7, "enum_FIELD"], [1, 13, 7, "enum_FIELD"], [16, 17, 7, "enum_FIELD"], [18, 21, 7, "enum_FIELD"], [23, 26, 7, "enum_FIELD"], [34, 31, 7, "enum_FIELD"], [34, 41, 7, "enum_FIELD"], [314, 315, 7, "enum_FIELD"], [41, 39, 7, "enum_FIELD"], [45, 51, 7, "enum_FIELD"], [53, 59, 7, "enum_FIELD"], [68, 65, 7, "enum_FIELD"], [255, 252, 7, "enum_FIELD"], [39, 36, 7, "enum_FIELD"], [51, 49, 7, "enum_FIELD"], [59, 57, 7, "enum_FIELD"], [65, 64, 7, "enum_FIELD"], [77, 74, 7, "enum_FIELD"], [169, 166, 7, "enum_FIELD"], [252, 250, 7, "enum_FIELD"], [257, 267, 7, "enum_FIELD"], [274, 278, 7, "enum_FIELD"], [296, 309, 7, "enum_FIELD"], [36, 35, 7, "enum_FIELD"], [49, 48, 7, "enum_FIELD"], [57, 56, 7, "enum_FIELD"], [74, 73, 7, "enum_FIELD"], [86, 83, 7, "enum_FIELD"], [128, 125, 7, "enum_FIELD"], [166, 165, 7, "enum_FIELD"], [178, 175, 7, "enum_FIELD"], [218, 215, 7, "enum_FIELD"], [250, 248, 7, "enum_FIELD"], [259, 258, 7, "enum_FIELD"], [259, 263, 7, "enum_FIELD"], [278, 275, 7, "enum_FIELD"], [287, 293, 7, "enum_FIELD"], [298, 297, 7, "enum_FIELD"], [298, 302, 7, "enum_FIELD"], [309, 307, 7, "enum_FIELD"], [83, 82, 7, "enum_FIELD"], [88, 96, 7, "enum_FIELD"], [106, 112, 7, "enum_FIELD"], [125, 124, 7, "enum_FIELD"], [130, 136, 7, "enum_FIELD"], [146, 152, 7, "enum_FIELD"], [175, 174, 7, "enum_FIELD"], [180, 186, 7, "enum_FIELD"], [196, 202, 7, "enum_FIELD"], [215, 214, 7, "enum_FIELD"], [220, 226, 7, "enum_FIELD"], [234, 238, 7, "enum_FIELD"], [248, 247, 7, "enum_FIELD"], [263, 261, 7, "enum_FIELD"], [282, 280, 7, "enum_FIELD"], [293, 291, 7, "enum_FIELD"], [302, 300, 7, "enum_FIELD"], [307, 306, 7, "enum_FIELD"], [96, 91, 7, "enum_FIELD"], [112, 109, 7, "enum_FIELD"], [136, 133, 7, "enum_FIELD"], [152, 149, 7, "enum_FIELD"], [186, 183, 7, "enum_FIELD"], [202, 199, 7, "enum_FIELD"], [226, 223, 7, "enum_FIELD"], [238, 237, 7, "enum_FIELD"], [261, 260, 7, "enum_FIELD"], [280, 279, 7, "enum_FIELD"], [291, 290, 7, "enum_FIELD"], [300, 299, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [37, 2, 10, "enum_LAST_LEXICAL_USE"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [48, 32, 10, "enum_LAST_LEXICAL_USE"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [56, 48, 10, "enum_LAST_LEXICAL_USE"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [66, 46, 10, "enum_LAST_LEXICAL_USE"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [75, 66, 10, "enum_LAST_LEXICAL_USE"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [84, 75, 10, "enum_LAST_LEXICAL_USE"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 88, 9, "enum_NEXT_SYNTAX"], [89, 24, 10, "enum_LAST_LEXICAL_USE"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [91, 54, 10, "enum_LAST_LEXICAL_USE"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [93, 4, 10, "enum_LAST_LEXICAL_USE"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [95, 6, 10, "enum_LAST_LEXICAL_USE"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [97, 8, 10, "enum_LAST_LEXICAL_USE"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [99, 10, 10, "enum_LAST_LEXICAL_USE"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 106, 9, "enum_NEXT_SYNTAX"], [107, 89, 10, "enum_LAST_LEXICAL_USE"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [109, 91, 10, "enum_LAST_LEXICAL_USE"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [111, 95, 10, "enum_LAST_LEXICAL_USE"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [113, 97, 10, "enum_LAST_LEXICAL_USE"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [124, 82, 10, "enum_LAST_LEXICAL_USE"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [126, 84, 10, "enum_LAST_LEXICAL_USE"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 130, 9, "enum_NEXT_SYNTAX"], [131, 107, 10, "enum_LAST_LEXICAL_USE"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [133, 109, 10, "enum_LAST_LEXICAL_USE"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [135, 93, 10, "enum_LAST_LEXICAL_USE"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [137, 111, 10, "enum_LAST_LEXICAL_USE"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [139, 99, 10, "enum_LAST_LEXICAL_USE"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 146, 9, "enum_NEXT_SYNTAX"], [147, 131, 10, "enum_LAST_LEXICAL_USE"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [149, 133, 10, "enum_LAST_LEXICAL_USE"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [151, 135, 10, "enum_LAST_LEXICAL_USE"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [153, 137, 10, "enum_LAST_LEXICAL_USE"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [165, 73, 10, "enum_LAST_LEXICAL_USE"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [167, 126, 10, "enum_LAST_LEXICAL_USE"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [174, 124, 10, "enum_LAST_LEXICAL_USE"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [176, 167, 10, "enum_LAST_LEXICAL_USE"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 180, 9, "enum_NEXT_SYNTAX"], [181, 147, 10, "enum_LAST_LEXICAL_USE"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [183, 149, 10, "enum_LAST_LEXICAL_USE"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 184, 9, "enum_NEXT_SYNTAX"], [185, 153, 10, "enum_LAST_LEXICAL_USE"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [187, 113, 10, "enum_LAST_LEXICAL_USE"], [186, 187, 9, "enum_NEXT_SYNTAX"], [187, 188, 9, "enum_NEXT_SYNTAX"], [189, 139, 10, "enum_LAST_LEXICAL_USE"], [188, 189, 9, "enum_NEXT_SYNTAX"], [189, 190, 9, "enum_NEXT_SYNTAX"], [190, 193, 9, "enum_NEXT_SYNTAX"], [193, 194, 9, "enum_NEXT_SYNTAX"], [194, 196, 9, "enum_NEXT_SYNTAX"], [197, 181, 10, "enum_LAST_LEXICAL_USE"], [196, 197, 9, "enum_NEXT_SYNTAX"], [197, 198, 9, "enum_NEXT_SYNTAX"], [199, 183, 10, "enum_LAST_LEXICAL_USE"], [198, 199, 9, "enum_NEXT_SYNTAX"], [199, 200, 9, "enum_NEXT_SYNTAX"], [201, 185, 10, "enum_LAST_LEXICAL_USE"], [200, 201, 9, "enum_NEXT_SYNTAX"], [201, 202, 9, "enum_NEXT_SYNTAX"], [203, 187, 10, "enum_LAST_LEXICAL_USE"], [202, 203, 9, "enum_NEXT_SYNTAX"], [203, 204, 9, "enum_NEXT_SYNTAX"], [204, 208, 9, "enum_NEXT_SYNTAX"], [208, 209, 9, "enum_NEXT_SYNTAX"], [209, 212, 9, "enum_NEXT_SYNTAX"], [212, 213, 9, "enum_NEXT_SYNTAX"], [214, 174, 10, "enum_LAST_LEXICAL_USE"], [213, 214, 9, "enum_NEXT_SYNTAX"], [214, 215, 9, "enum_NEXT_SYNTAX"], [216, 176, 10, "enum_LAST_LEXICAL_USE"], [215, 216, 9, "enum_NEXT_SYNTAX"], [216, 217, 9, "enum_NEXT_SYNTAX"], [217, 218, 9, "enum_NEXT_SYNTAX"], [218, 220, 9, "enum_NEXT_SYNTAX"], [221, 197, 10, "enum_LAST_LEXICAL_USE"], [220, 221, 9, "enum_NEXT_SYNTAX"], [221, 222, 9, "enum_NEXT_SYNTAX"], [223, 199, 10, "enum_LAST_LEXICAL_USE"], [222, 223, 9, "enum_NEXT_SYNTAX"], [223, 224, 9, "enum_NEXT_SYNTAX"], [225, 201, 10, "enum_LAST_LEXICAL_USE"], [224, 225, 9, "enum_NEXT_SYNTAX"], [225, 226, 9, "enum_NEXT_SYNTAX"], [227, 189, 10, "enum_LAST_LEXICAL_USE"], [226, 227, 9, "enum_NEXT_SYNTAX"], [227, 228, 9, "enum_NEXT_SYNTAX"], [228, 231, 9, "enum_NEXT_SYNTAX"], [231, 232, 9, "enum_NEXT_SYNTAX"], [232, 234, 9, "enum_NEXT_SYNTAX"], [235, 221, 10, "enum_LAST_LEXICAL_USE"], [234, 235, 9, "enum_NEXT_SYNTAX"], [235, 236, 9, "enum_NEXT_SYNTAX"], [237, 223, 10, "enum_LAST_LEXICAL_USE"], [236, 237, 9, "enum_NEXT_SYNTAX"], [237, 238, 9, "enum_NEXT_SYNTAX"], [239, 225, 10, "enum_LAST_LEXICAL_USE"], [238, 239, 9, "enum_NEXT_SYNTAX"], [239, 240, 9, "enum_NEXT_SYNTAX"], [240, 245, 9, "enum_NEXT_SYNTAX"], [245, 246, 9, "enum_NEXT_SYNTAX"], [247, 56, 10, "enum_LAST_LEXICAL_USE"], [246, 247, 9, "enum_NEXT_SYNTAX"], [247, 248, 9, "enum_NEXT_SYNTAX"], [248, 249, 9, "enum_NEXT_SYNTAX"], [249, 250, 9, "enum_NEXT_SYNTAX"], [250, 251, 9, "enum_NEXT_SYNTAX"], [251, 252, 9, "enum_NEXT_SYNTAX"], [252, 253, 9, "enum_NEXT_SYNTAX"], [253, 254, 9, "enum_NEXT_SYNTAX"], [254, 255, 9, "enum_NEXT_SYNTAX"], [255, 257, 9, "enum_NEXT_SYNTAX"], [258, 19, 10, "enum_LAST_LEXICAL_USE"], [257, 258, 9, "enum_NEXT_SYNTAX"], [258, 259, 9, "enum_NEXT_SYNTAX"], [260, 247, 10, "enum_LAST_LEXICAL_USE"], [259, 260, 9, "enum_NEXT_SYNTAX"], [260, 261, 9, "enum_NEXT_SYNTAX"], [261, 262, 9, "enum_NEXT_SYNTAX"], [262, 263, 9, "enum_NEXT_SYNTAX"], [263, 264, 9, "enum_NEXT_SYNTAX"], [264, 265, 9, "enum_NEXT_SYNTAX"], [265, 266, 9, "enum_NEXT_SYNTAX"], [267, 235, 10, "enum_LAST_LEXICAL_USE"], [266, 267, 9, "enum_NEXT_SYNTAX"], [267, 270, 9, "enum_NEXT_SYNTAX"], [270, 271, 9, "enum_NEXT_SYNTAX"], [271, 274, 9, "enum_NEXT_SYNTAX"], [274, 275, 9, "enum_NEXT_SYNTAX"], [275, 276, 9, "enum_NEXT_SYNTAX"], [277, 267, 10, "enum_LAST_LEXICAL_USE"], [276, 277, 9, "enum_NEXT_SYNTAX"], [277, 278, 9, "enum_NEXT_SYNTAX"], [278, 279, 9, "enum_NEXT_SYNTAX"], [279, 280, 9, "enum_NEXT_SYNTAX"], [280, 281, 9, "enum_NEXT_SYNTAX"], [281, 282, 9, "enum_NEXT_SYNTAX"], [282, 283, 9, "enum_NEXT_SYNTAX"], [283, 284, 9, "enum_NEXT_SYNTAX"], [284, 285, 9, "enum_NEXT_SYNTAX"], [285, 287, 9, "enum_NEXT_SYNTAX"], [288, 277, 10, "enum_LAST_LEXICAL_USE"], [287, 288, 9, "enum_NEXT_SYNTAX"], [288, 289, 9, "enum_NEXT_SYNTAX"], [290, 288, 10, "enum_LAST_LEXICAL_USE"], [289, 290, 9, "enum_NEXT_SYNTAX"], [290, 291, 9, "enum_NEXT_SYNTAX"], [291, 292, 9, "enum_NEXT_SYNTAX"], [292, 293, 9, "enum_NEXT_SYNTAX"], [293, 294, 9, "enum_NEXT_SYNTAX"], [294, 296, 9, "enum_NEXT_SYNTAX"], [297, 258, 10, "enum_LAST_LEXICAL_USE"], [296, 297, 9, "enum_NEXT_SYNTAX"], [297, 298, 9, "enum_NEXT_SYNTAX"], [299, 260, 10, "enum_LAST_LEXICAL_USE"], [298, 299, 9, "enum_NEXT_SYNTAX"], [299, 300, 9, "enum_NEXT_SYNTAX"], [300, 301, 9, "enum_NEXT_SYNTAX"], [301, 302, 9, "enum_NEXT_SYNTAX"], [302, 303, 9, "enum_NEXT_SYNTAX"], [303, 304, 9, "enum_NEXT_SYNTAX"], [304, 305, 9, "enum_NEXT_SYNTAX"], [306, 290, 10, "enum_LAST_LEXICAL_USE"], [305, 306, 9, "enum_NEXT_SYNTAX"], [306, 307, 9, "enum_NEXT_SYNTAX"], [307, 308, 9, "enum_NEXT_SYNTAX"], [308, 309, 9, "enum_NEXT_SYNTAX"], [309, 310, 9, "enum_NEXT_SYNTAX"], [310, 314, 9, "enum_NEXT_SYNTAX"], [315, 297, 10, "enum_LAST_LEXICAL_USE"], [314, 315, 9, "enum_NEXT_SYNTAX"], [5, 16, 1, "enum_CFG_NEXT"], [16, 18, 1, "enum_CFG_NEXT"], [18, 23, 1, "enum_CFG_NEXT"], [23, 41, 1, "enum_CFG_NEXT"], [41, 31, 1, "enum_CFG_NEXT"], [31, 314, 1, "enum_CFG_NEXT"], [31, 45, 1, "enum_CFG_NEXT"], [45, 53, 1, "enum_CFG_NEXT"], [53, 65, 1, "enum_CFG_NEXT"], [65, 74, 1, "enum_CFG_NEXT"], [65, 166, 1, "enum_CFG_NEXT"], [74, 83, 1, "enum_CFG_NEXT"], [74, 125, 1, "enum_CFG_NEXT"], [83, 88, 1, "enum_CFG_NEXT"], [83, 106, 1, "enum_CFG_NEXT"], [88, 252, 1, "enum_CFG_NEXT"], [106, 252, 1, "enum_CFG_NEXT"], [125, 146, 1, "enum_CFG_NEXT"], [125, 130, 1, "enum_CFG_NEXT"], [130, 252, 1, "enum_CFG_NEXT"], [146, 252, 1, "enum_CFG_NEXT"], [166, 215, 1, "enum_CFG_NEXT"], [166, 175, 1, "enum_CFG_NEXT"], [175, 196, 1, "enum_CFG_NEXT"], [175, 180, 1, "enum_CFG_NEXT"], [180, 252, 1, "enum_CFG_NEXT"], [196, 252, 1, "enum_CFG_NEXT"], [215, 234, 1, "enum_CFG_NEXT"], [215, 220, 1, "enum_CFG_NEXT"], [220, 252, 1, "enum_CFG_NEXT"], [234, 252, 1, "enum_CFG_NEXT"], [252, 278, 1, "enum_CFG_NEXT"], [252, 257, 1, "enum_CFG_NEXT"], [257, 31, 1, "enum_CFG_NEXT"], [278, 287, 1, "enum_CFG_NEXT"], [278, 296, 1, "enum_CFG_NEXT"], [287, 296, 1, "enum_CFG_NEXT"], [296, 31, 1, "enum_CFG_NEXT"], [37, 2, 3, "enum_LAST_WRITE"], [30, 30, 3, "enum_LAST_WRITE"], [32, 260, 2, "enum_LAST_READ"], [32, 299, 2, "enum_LAST_READ"], [32, 32, 3, "enum_LAST_WRITE"], [48, 260, 2, "enum_LAST_READ"], [48, 299, 2, "enum_LAST_READ"], [48, 32, 3, "enum_LAST_WRITE"], [46, 84, 2, "enum_LAST_READ"], [46, 126, 2, "enum_LAST_READ"], [46, 216, 2, "enum_LAST_READ"], [46, 176, 2, "enum_LAST_READ"], [46, 46, 3, "enum_LAST_WRITE"], [56, 48, 2, "enum_LAST_READ"], [56, 32, 3, "enum_LAST_WRITE"], [54, 91, 2, "enum_LAST_READ"], [54, 183, 2, "enum_LAST_READ"], [54, 199, 2, "enum_LAST_READ"], [54, 109, 2, "enum_LAST_READ"], [54, 133, 2, "enum_LAST_READ"], [54, 149, 2, "enum_LAST_READ"], [54, 237, 2, "enum_LAST_READ"], [54, 223, 2, "enum_LAST_READ"], [54, 54, 3, "enum_LAST_WRITE"], [64, 64, 2, "enum_LAST_READ"], [66, 84, 2, "enum_LAST_READ"], [66, 126, 2, "enum_LAST_READ"], [66, 216, 2, "enum_LAST_READ"], [66, 176, 2, "enum_LAST_READ"], [66, 46, 3, "enum_LAST_WRITE"], [73, 73, 2, "enum_LAST_READ"], [73, 165, 2, "enum_LAST_READ"], [75, 66, 2, "enum_LAST_READ"], [75, 46, 3, "enum_LAST_WRITE"], [82, 82, 2, "enum_LAST_READ"], [82, 174, 2, "enum_LAST_READ"], [82, 124, 2, "enum_LAST_READ"], [82, 214, 2, "enum_LAST_READ"], [84, 75, 2, "enum_LAST_READ"], [84, 46, 3, "enum_LAST_WRITE"], [91, 91, 2, "enum_LAST_READ"], [91, 183, 2, "enum_LAST_READ"], [91, 199, 2, "enum_LAST_READ"], [91, 109, 2, "enum_LAST_READ"], [91, 133, 2, "enum_LAST_READ"], [91, 149, 2, "enum_LAST_READ"], [91, 237, 2, "enum_LAST_READ"], [91, 223, 2, "enum_LAST_READ"], [91, 54, 3, "enum_LAST_WRITE"], [93, 151, 2, "enum_LAST_READ"], [93, 135, 2, "enum_LAST_READ"], [93, 93, 2, "enum_LAST_READ"], [93, 4, 3, "enum_LAST_WRITE"], [95, 137, 2, "enum_LAST_READ"], [95, 153, 2, "enum_LAST_READ"], [95, 225, 2, "enum_LAST_READ"], [95, 185, 2, "enum_LAST_READ"], [95, 239, 2, "enum_LAST_READ"], [95, 111, 2, "enum_LAST_READ"], [95, 201, 2, "enum_LAST_READ"], [95, 95, 2, "enum_LAST_READ"], [95, 6, 3, "enum_LAST_WRITE"], [97, 113, 2, "enum_LAST_READ"], [97, 203, 2, "enum_LAST_READ"], [97, 97, 2, "enum_LAST_READ"], [97, 187, 2, "enum_LAST_READ"], [97, 8, 3, "enum_LAST_WRITE"], [99, 189, 2, "enum_LAST_READ"], [99, 139, 2, "enum_LAST_READ"], [99, 227, 2, "enum_LAST_READ"], [99, 99, 2, "enum_LAST_READ"], [99, 10, 3, "enum_LAST_WRITE"], [89, 306, 2, "enum_LAST_READ"], [89, 267, 2, "enum_LAST_READ"], [89, 181, 3, "enum_LAST_WRITE"], [89, 24, 3, "enum_LAST_WRITE"], [89, 131, 3, "enum_LAST_WRITE"], [89, 107, 3, "enum_LAST_WRITE"], [89, 235, 3, "enum_LAST_WRITE"], [89, 197, 3, "enum_LAST_WRITE"], [89, 288, 3, "enum_LAST_WRITE"], [89, 147, 3, "enum_LAST_WRITE"], [89, 89, 3, "enum_LAST_WRITE"], [89, 221, 3, "enum_LAST_WRITE"], [109, 91, 2, "enum_LAST_READ"], [109, 183, 2, "enum_LAST_READ"], [109, 199, 2, "enum_LAST_READ"], [109, 109, 2, "enum_LAST_READ"], [109, 133, 2, "enum_LAST_READ"], [109, 149, 2, "enum_LAST_READ"], [109, 237, 2, "enum_LAST_READ"], [109, 223, 2, "enum_LAST_READ"], [109, 54, 3, "enum_LAST_WRITE"], [111, 137, 2, "enum_LAST_READ"], [111, 153, 2, "enum_LAST_READ"], [111, 225, 2, "enum_LAST_READ"], [111, 185, 2, "enum_LAST_READ"], [111, 239, 2, "enum_LAST_READ"], [111, 111, 2, "enum_LAST_READ"], [111, 201, 2, "enum_LAST_READ"], [111, 95, 2, "enum_LAST_READ"], [111, 6, 3, "enum_LAST_WRITE"], [113, 113, 2, "enum_LAST_READ"], [113, 203, 2, "enum_LAST_READ"], [113, 97, 2, "enum_LAST_READ"], [113, 187, 2, "enum_LAST_READ"], [113, 8, 3, "enum_LAST_WRITE"], [107, 306, 2, "enum_LAST_READ"], [107, 267, 2, "enum_LAST_READ"], [107, 181, 3, "enum_LAST_WRITE"], [107, 24, 3, "enum_LAST_WRITE"], [107, 131, 3, "enum_LAST_WRITE"], [107, 107, 3, "enum_LAST_WRITE"], [107, 235, 3, "enum_LAST_WRITE"], [107, 197, 3, "enum_LAST_WRITE"], [107, 288, 3, "enum_LAST_WRITE"], [107, 147, 3, "enum_LAST_WRITE"], [107, 89, 3, "enum_LAST_WRITE"], [107, 221, 3, "enum_LAST_WRITE"], [124, 82, 2, "enum_LAST_READ"], [124, 174, 2, "enum_LAST_READ"], [124, 124, 2, "enum_LAST_READ"], [124, 214, 2, "enum_LAST_READ"], [126, 75, 2, "enum_LAST_READ"], [126, 46, 3, "enum_LAST_WRITE"], [133, 91, 2, "enum_LAST_READ"], [133, 183, 2, "enum_LAST_READ"], [133, 199, 2, "enum_LAST_READ"], [133, 109, 2, "enum_LAST_READ"], [133, 133, 2, "enum_LAST_READ"], [133, 149, 2, "enum_LAST_READ"], [133, 237, 2, "enum_LAST_READ"], [133, 223, 2, "enum_LAST_READ"], [133, 54, 3, "enum_LAST_WRITE"], [135, 151, 2, "enum_LAST_READ"], [135, 135, 2, "enum_LAST_READ"], [135, 93, 2, "enum_LAST_READ"], [135, 4, 3, "enum_LAST_WRITE"], [137, 137, 2, "enum_LAST_READ"], [137, 153, 2, "enum_LAST_READ"], [137, 225, 2, "enum_LAST_READ"], [137, 185, 2, "enum_LAST_READ"], [137, 239, 2, "enum_LAST_READ"], [137, 111, 2, "enum_LAST_READ"], [137, 201, 2, "enum_LAST_READ"], [137, 95, 2, "enum_LAST_READ"], [137, 6, 3, "enum_LAST_WRITE"], [139, 189, 2, "enum_LAST_READ"], [139, 139, 2, "enum_LAST_READ"], [139, 227, 2, "enum_LAST_READ"], [139, 99, 2, "enum_LAST_READ"], [139, 10, 3, "enum_LAST_WRITE"], [131, 306, 2, "enum_LAST_READ"], [131, 267, 2, "enum_LAST_READ"], [131, 181, 3, "enum_LAST_WRITE"], [131, 24, 3, "enum_LAST_WRITE"], [131, 131, 3, "enum_LAST_WRITE"], [131, 107, 3, "enum_LAST_WRITE"], [131, 235, 3, "enum_LAST_WRITE"], [131, 197, 3, "enum_LAST_WRITE"], [131, 288, 3, "enum_LAST_WRITE"], [131, 147, 3, "enum_LAST_WRITE"], [131, 89, 3, "enum_LAST_WRITE"], [131, 221, 3, "enum_LAST_WRITE"], [149, 91, 2, "enum_LAST_READ"], [149, 183, 2, "enum_LAST_READ"], [149, 199, 2, "enum_LAST_READ"], [149, 109, 2, "enum_LAST_READ"], [149, 133, 2, "enum_LAST_READ"], [149, 149, 2, "enum_LAST_READ"], [149, 237, 2, "enum_LAST_READ"], [149, 223, 2, "enum_LAST_READ"], [149, 54, 3, "enum_LAST_WRITE"], [151, 151, 2, "enum_LAST_READ"], [151, 135, 2, "enum_LAST_READ"], [151, 93, 2, "enum_LAST_READ"], [151, 4, 3, "enum_LAST_WRITE"], [153, 137, 2, "enum_LAST_READ"], [153, 153, 2, "enum_LAST_READ"], [153, 225, 2, "enum_LAST_READ"], [153, 185, 2, "enum_LAST_READ"], [153, 239, 2, "enum_LAST_READ"], [153, 111, 2, "enum_LAST_READ"], [153, 201, 2, "enum_LAST_READ"], [153, 95, 2, "enum_LAST_READ"], [153, 6, 3, "enum_LAST_WRITE"], [147, 306, 2, "enum_LAST_READ"], [147, 267, 2, "enum_LAST_READ"], [147, 181, 3, "enum_LAST_WRITE"], [147, 24, 3, "enum_LAST_WRITE"], [147, 131, 3, "enum_LAST_WRITE"], [147, 107, 3, "enum_LAST_WRITE"], [147, 235, 3, "enum_LAST_WRITE"], [147, 197, 3, "enum_LAST_WRITE"], [147, 288, 3, "enum_LAST_WRITE"], [147, 147, 3, "enum_LAST_WRITE"], [147, 89, 3, "enum_LAST_WRITE"], [147, 221, 3, "enum_LAST_WRITE"], [165, 73, 2, "enum_LAST_READ"], [165, 165, 2, "enum_LAST_READ"], [167, 66, 2, "enum_LAST_READ"], [167, 46, 3, "enum_LAST_WRITE"], [174, 82, 2, "enum_LAST_READ"], [174, 174, 2, "enum_LAST_READ"], [174, 124, 2, "enum_LAST_READ"], [174, 214, 2, "enum_LAST_READ"], [176, 167, 2, "enum_LAST_READ"], [176, 46, 3, "enum_LAST_WRITE"], [183, 91, 2, "enum_LAST_READ"], [183, 183, 2, "enum_LAST_READ"], [183, 199, 2, "enum_LAST_READ"], [183, 109, 2, "enum_LAST_READ"], [183, 133, 2, "enum_LAST_READ"], [183, 149, 2, "enum_LAST_READ"], [183, 237, 2, "enum_LAST_READ"], [183, 223, 2, "enum_LAST_READ"], [183, 54, 3, "enum_LAST_WRITE"], [185, 137, 2, "enum_LAST_READ"], [185, 153, 2, "enum_LAST_READ"], [185, 225, 2, "enum_LAST_READ"], [185, 185, 2, "enum_LAST_READ"], [185, 239, 2, "enum_LAST_READ"], [185, 111, 2, "enum_LAST_READ"], [185, 201, 2, "enum_LAST_READ"], [185, 95, 2, "enum_LAST_READ"], [185, 6, 3, "enum_LAST_WRITE"], [187, 113, 2, "enum_LAST_READ"], [187, 203, 2, "enum_LAST_READ"], [187, 97, 2, "enum_LAST_READ"], [187, 187, 2, "enum_LAST_READ"], [187, 8, 3, "enum_LAST_WRITE"], [189, 189, 2, "enum_LAST_READ"], [189, 139, 2, "enum_LAST_READ"], [189, 227, 2, "enum_LAST_READ"], [189, 99, 2, "enum_LAST_READ"], [189, 10, 3, "enum_LAST_WRITE"], [181, 306, 2, "enum_LAST_READ"], [181, 267, 2, "enum_LAST_READ"], [181, 181, 3, "enum_LAST_WRITE"], [181, 24, 3, "enum_LAST_WRITE"], [181, 131, 3, "enum_LAST_WRITE"], [181, 107, 3, "enum_LAST_WRITE"], [181, 235, 3, "enum_LAST_WRITE"], [181, 197, 3, "enum_LAST_WRITE"], [181, 288, 3, "enum_LAST_WRITE"], [181, 147, 3, "enum_LAST_WRITE"], [181, 89, 3, "enum_LAST_WRITE"], [181, 221, 3, "enum_LAST_WRITE"], [199, 91, 2, "enum_LAST_READ"], [199, 183, 2, "enum_LAST_READ"], [199, 199, 2, "enum_LAST_READ"], [199, 109, 2, "enum_LAST_READ"], [199, 133, 2, "enum_LAST_READ"], [199, 149, 2, "enum_LAST_READ"], [199, 237, 2, "enum_LAST_READ"], [199, 223, 2, "enum_LAST_READ"], [199, 54, 3, "enum_LAST_WRITE"], [201, 137, 2, "enum_LAST_READ"], [201, 153, 2, "enum_LAST_READ"], [201, 225, 2, "enum_LAST_READ"], [201, 185, 2, "enum_LAST_READ"], [201, 239, 2, "enum_LAST_READ"], [201, 111, 2, "enum_LAST_READ"], [201, 201, 2, "enum_LAST_READ"], [201, 95, 2, "enum_LAST_READ"], [201, 6, 3, "enum_LAST_WRITE"], [203, 113, 2, "enum_LAST_READ"], [203, 203, 2, "enum_LAST_READ"], [203, 97, 2, "enum_LAST_READ"], [203, 187, 2, "enum_LAST_READ"], [203, 8, 3, "enum_LAST_WRITE"], [197, 306, 2, "enum_LAST_READ"], [197, 267, 2, "enum_LAST_READ"], [197, 181, 3, "enum_LAST_WRITE"], [197, 24, 3, "enum_LAST_WRITE"], [197, 131, 3, "enum_LAST_WRITE"], [197, 107, 3, "enum_LAST_WRITE"], [197, 235, 3, "enum_LAST_WRITE"], [197, 197, 3, "enum_LAST_WRITE"], [197, 288, 3, "enum_LAST_WRITE"], [197, 147, 3, "enum_LAST_WRITE"], [197, 89, 3, "enum_LAST_WRITE"], [197, 221, 3, "enum_LAST_WRITE"], [214, 82, 2, "enum_LAST_READ"], [214, 174, 2, "enum_LAST_READ"], [214, 124, 2, "enum_LAST_READ"], [214, 214, 2, "enum_LAST_READ"], [216, 167, 2, "enum_LAST_READ"], [216, 46, 3, "enum_LAST_WRITE"], [223, 91, 2, "enum_LAST_READ"], [223, 183, 2, "enum_LAST_READ"], [223, 199, 2, "enum_LAST_READ"], [223, 109, 2, "enum_LAST_READ"], [223, 133, 2, "enum_LAST_READ"], [223, 149, 2, "enum_LAST_READ"], [223, 237, 2, "enum_LAST_READ"], [223, 223, 2, "enum_LAST_READ"], [223, 54, 3, "enum_LAST_WRITE"], [225, 137, 2, "enum_LAST_READ"], [225, 153, 2, "enum_LAST_READ"], [225, 225, 2, "enum_LAST_READ"], [225, 185, 2, "enum_LAST_READ"], [225, 239, 2, "enum_LAST_READ"], [225, 111, 2, "enum_LAST_READ"], [225, 201, 2, "enum_LAST_READ"], [225, 95, 2, "enum_LAST_READ"], [225, 6, 3, "enum_LAST_WRITE"], [227, 189, 2, "enum_LAST_READ"], [227, 139, 2, "enum_LAST_READ"], [227, 227, 2, "enum_LAST_READ"], [227, 99, 2, "enum_LAST_READ"], [227, 10, 3, "enum_LAST_WRITE"], [221, 306, 2, "enum_LAST_READ"], [221, 267, 2, "enum_LAST_READ"], [221, 181, 3, "enum_LAST_WRITE"], [221, 24, 3, "enum_LAST_WRITE"], [221, 131, 3, "enum_LAST_WRITE"], [221, 107, 3, "enum_LAST_WRITE"], [221, 235, 3, "enum_LAST_WRITE"], [221, 197, 3, "enum_LAST_WRITE"], [221, 288, 3, "enum_LAST_WRITE"], [221, 147, 3, "enum_LAST_WRITE"], [221, 89, 3, "enum_LAST_WRITE"], [221, 221, 3, "enum_LAST_WRITE"], [237, 91, 2, "enum_LAST_READ"], [237, 183, 2, "enum_LAST_READ"], [237, 199, 2, "enum_LAST_READ"], [237, 109, 2, "enum_LAST_READ"], [237, 133, 2, "enum_LAST_READ"], [237, 149, 2, "enum_LAST_READ"], [237, 237, 2, "enum_LAST_READ"], [237, 223, 2, "enum_LAST_READ"], [237, 54, 3, "enum_LAST_WRITE"], [239, 137, 2, "enum_LAST_READ"], [239, 153, 2, "enum_LAST_READ"], [239, 225, 2, "enum_LAST_READ"], [239, 185, 2, "enum_LAST_READ"], [239, 239, 2, "enum_LAST_READ"], [239, 111, 2, "enum_LAST_READ"], [239, 201, 2, "enum_LAST_READ"], [239, 95, 2, "enum_LAST_READ"], [239, 6, 3, "enum_LAST_WRITE"], [235, 306, 2, "enum_LAST_READ"], [235, 267, 2, "enum_LAST_READ"], [235, 181, 3, "enum_LAST_WRITE"], [235, 24, 3, "enum_LAST_WRITE"], [235, 131, 3, "enum_LAST_WRITE"], [235, 107, 3, "enum_LAST_WRITE"], [235, 235, 3, "enum_LAST_WRITE"], [235, 197, 3, "enum_LAST_WRITE"], [235, 288, 3, "enum_LAST_WRITE"], [235, 147, 3, "enum_LAST_WRITE"], [235, 89, 3, "enum_LAST_WRITE"], [235, 221, 3, "enum_LAST_WRITE"], [247, 56, 2, "enum_LAST_READ"], [247, 32, 3, "enum_LAST_WRITE"], [267, 306, 2, "enum_LAST_READ"], [267, 267, 2, "enum_LAST_READ"], [267, 181, 3, "enum_LAST_WRITE"], [267, 131, 3, "enum_LAST_WRITE"], [267, 107, 3, "enum_LAST_WRITE"], [267, 235, 3, "enum_LAST_WRITE"], [267, 197, 3, "enum_LAST_WRITE"], [267, 147, 3, "enum_LAST_WRITE"], [267, 89, 3, "enum_LAST_WRITE"], [267, 221, 3, "enum_LAST_WRITE"], [258, 258, 2, "enum_LAST_READ"], [258, 297, 2, "enum_LAST_READ"], [258, 19, 3, "enum_LAST_WRITE"], [260, 247, 2, "enum_LAST_READ"], [260, 32, 3, "enum_LAST_WRITE"], [275, 275, 2, "enum_LAST_READ"], [277, 306, 2, "enum_LAST_READ"], [277, 267, 2, "enum_LAST_READ"], [277, 181, 3, "enum_LAST_WRITE"], [277, 131, 3, "enum_LAST_WRITE"], [277, 107, 3, "enum_LAST_WRITE"], [277, 235, 3, "enum_LAST_WRITE"], [277, 197, 3, "enum_LAST_WRITE"], [277, 147, 3, "enum_LAST_WRITE"], [277, 89, 3, "enum_LAST_WRITE"], [277, 221, 3, "enum_LAST_WRITE"], [279, 279, 2, "enum_LAST_READ"], [290, 277, 2, "enum_LAST_READ"], [290, 181, 3, "enum_LAST_WRITE"], [290, 131, 3, "enum_LAST_WRITE"], [290, 107, 3, "enum_LAST_WRITE"], [290, 235, 3, "enum_LAST_WRITE"], [290, 197, 3, "enum_LAST_WRITE"], [290, 147, 3, "enum_LAST_WRITE"], [290, 89, 3, "enum_LAST_WRITE"], [290, 221, 3, "enum_LAST_WRITE"], [288, 290, 2, "enum_LAST_READ"], [288, 181, 3, "enum_LAST_WRITE"], [288, 131, 3, "enum_LAST_WRITE"], [288, 107, 3, "enum_LAST_WRITE"], [288, 235, 3, "enum_LAST_WRITE"], [288, 197, 3, "enum_LAST_WRITE"], [288, 147, 3, "enum_LAST_WRITE"], [288, 89, 3, "enum_LAST_WRITE"], [288, 221, 3, "enum_LAST_WRITE"], [306, 277, 2, "enum_LAST_READ"], [306, 290, 2, "enum_LAST_READ"], [306, 181, 3, "enum_LAST_WRITE"], [306, 131, 3, "enum_LAST_WRITE"], [306, 107, 3, "enum_LAST_WRITE"], [306, 235, 3, "enum_LAST_WRITE"], [306, 288, 3, "enum_LAST_WRITE"], [306, 197, 3, "enum_LAST_WRITE"], [306, 147, 3, "enum_LAST_WRITE"], [306, 89, 3, "enum_LAST_WRITE"], [306, 221, 3, "enum_LAST_WRITE"], [297, 258, 2, "enum_LAST_READ"], [297, 297, 2, "enum_LAST_READ"], [297, 19, 3, "enum_LAST_WRITE"], [299, 247, 2, "enum_LAST_READ"], [299, 32, 3, "enum_LAST_WRITE"], [315, 258, 2, "enum_LAST_READ"], [315, 297, 2, "enum_LAST_READ"], [315, 19, 3, "enum_LAST_WRITE"], [46, 48, 4, "enum_COMPUTED_FROM"], [54, 56, 4, "enum_COMPUTED_FROM"], [259, 267, 4, "enum_COMPUTED_FROM"], [298, 306, 4, "enum_COMPUTED_FROM"], [288, 290, 4, "enum_COMPUTED_FROM"], [89, 91, 4, "enum_COMPUTED_FROM"], [89, 93, 4, "enum_COMPUTED_FROM"], [89, 95, 4, "enum_COMPUTED_FROM"], [89, 97, 4, "enum_COMPUTED_FROM"], [89, 99, 4, "enum_COMPUTED_FROM"], [107, 109, 4, "enum_COMPUTED_FROM"], [107, 111, 4, "enum_COMPUTED_FROM"], [107, 113, 4, "enum_COMPUTED_FROM"], [131, 133, 4, "enum_COMPUTED_FROM"], [131, 135, 4, "enum_COMPUTED_FROM"], [131, 137, 4, "enum_COMPUTED_FROM"], [131, 139, 4, "enum_COMPUTED_FROM"], [147, 149, 4, "enum_COMPUTED_FROM"], [147, 151, 4, "enum_COMPUTED_FROM"], [147, 153, 4, "enum_COMPUTED_FROM"], [181, 183, 4, "enum_COMPUTED_FROM"], [181, 185, 4, "enum_COMPUTED_FROM"], [181, 187, 4, "enum_COMPUTED_FROM"], [181, 189, 4, "enum_COMPUTED_FROM"], [197, 199, 4, "enum_COMPUTED_FROM"], [197, 201, 4, "enum_COMPUTED_FROM"], [197, 203, 4, "enum_COMPUTED_FROM"], [221, 223, 4, "enum_COMPUTED_FROM"], [221, 225, 4, "enum_COMPUTED_FROM"], [221, 227, 4, "enum_COMPUTED_FROM"], [235, 237, 4, "enum_COMPUTED_FROM"], [235, 239, 4, "enum_COMPUTED_FROM"]], "error_location": 111, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/Deeplodocus/deeplodocus.git", "old_path": "deeplodocus/core/inference/generic_evaluator.py", "hash": "2c3e93e9faa91aa4b0c992409d3423300402e039", "code": "def compute_metrics(metrics: Dict[str, Any],\n                    inputs: Union[torch.Tensor, List[torch.Tensor]],\n                    outputs: Union[torch.Tensor, List[torch.Tensor]],\n                    labels: Union[torch.Tensor, List[torch.Tensor]],\n                    additional_data: Union[torch.Tensor, List[torch.Tensor]]) -> Dict[str, Any]:\n    \"\"\"\n    AUTHORS;\n    --------\n\n    :author: Alix Leroy\n\n    DESCRIPTION:\n    ------------\n\n    Compute the metrics using the corresponding method arguments\n\n    PARAMETERS:\n    -----------\n\n    :param metrics: dict: The metrics to compute\n    :param inputs: Union[tensor, list]: The inputs\n    :param outputs: Union[tensor, list]: Outputs of the network\n    :param labels: Union[tensor, list]: Labels\n    :param additional_data: Union[tensor, list]: Additional data\n\n    RETURN:\n    -------\n\n    :return->dict: A dictionary containing the associations (key, output) of the metrics\n    \"\"\"\n\n    result_metrics: Dict[str, Any] = {}\n\n    # Temporary variable for saving the output\n    temp_metric_result: Any = None\n\n    for key, metric in vars(metrics).items():\n        metric_args: List = metric.get_arguments()\n        metric_method: Callable = metric.get_method()\n\n        # TODO : Check the number of arguments before compute the metric\n        #if metric.is_loss() is True:\n        #   num_required_args = len(inspect.getfullargspec(metric_method.forward)[0])\n        #   num_given_args = len(metric_args + 1)\n        #else:\n        #   num_required_args = len(inspect.getfullargspec(metric_method)[0])\n        #if num_required_args != num_given_args:\n        #    Notification(DEEP_NOTIF_FATAL, \"The metric %s takes %i positional arguments but %i were given\" %(metric_method, len(num_required_args), len(metric_args)))\n\n        #\n        # Select the good type of input\n        #\n        if DEEP_ENTRY_INPUT in metric_args:\n            if DEEP_ENTRY_LABEL in metric_args:\n                if DEEP_ENTRY_ADDITIONAL_DATA in metric_args:\n                    temp_metric_result = metric_method(inputs, outputs, labels, additional_data)\n                else:\n                    temp_metric_result = metric_method(outputs, labels)\n            else:\n                if DEEP_ENTRY_ADDITIONAL_DATA in metric_args:\n                    temp_metric_result = metric_method(inputs, outputs, additional_data)\n                else:\n                    temp_metric_result = metric_method(inputs, outputs)\n        else:\n            if DEEP_ENTRY_LABEL in metric_args:\n                if DEEP_ENTRY_ADDITIONAL_DATA in metric_args:\n                    temp_metric_result = metric_method(outputs, labels, additional_data)\n                else:\n                    temp_metric_result = metric_method(outputs, labels)\n            else:\n                if DEEP_ENTRY_ADDITIONAL_DATA in metric_args:\n                    temp_metric_result = metric_method(outputs, additional_data)\n                else:\n                    temp_metric_result = metric_method(outputs)\n\n        #\n        # Add the metric to the dictionary\n        #\n\n        # Check if the the metric is a Metric instance or a Loss instance\n        if metric.is_loss() is True:\n            # Do not call \".item()\" in order to be able to achieve back propagation on the total_loss\n            result_metrics[metric.get_name()] = temp_metric_result\n        else:\n            # If it is a Loss function we detach the tensor from the graph\n            if isinstance(temp_metric_result, torch.nn.Module):\n                temp_metric_result = temp_metric_result.detach()\n            result_metrics[metric.get_name()] = temp_metric_result.item()\n    return result_metrics\n", "rewrite": "ReplaceText(target='inputs' @(141,59)->(141,66))", "error_line": 57, "has_bug": true, "code_full": "from typing import Any, Callable, Dict, List, Union\n\nimport torch\n\nDEEP_ENTRY_INPUT: str = \"\"\nDEEP_ENTRY_LABEL: str = \"\"\nDEEP_ENTRY_ADDITIONAL_DATA: str = \"\"\n\n\ndef compute_metrics(metrics: Dict[str, Any],\n                    inputs: Union[torch.Tensor, List[torch.Tensor]],\n                    outputs: Union[torch.Tensor, List[torch.Tensor]],\n                    labels: Union[torch.Tensor, List[torch.Tensor]],\n                    additional_data: Union[torch.Tensor, List[torch.Tensor]]) -> Dict[str, Any]:\n    \"\"\"\n    AUTHORS;\n    --------\n\n    :author: Alix Leroy\n\n    DESCRIPTION:\n    ------------\n\n    Compute the metrics using the corresponding method arguments\n\n    PARAMETERS:\n    -----------\n\n    :param metrics: dict: The metrics to compute\n    :param inputs: Union[tensor, list]: The inputs\n    :param outputs: Union[tensor, list]: Outputs of the network\n    :param labels: Union[tensor, list]: Labels\n    :param additional_data: Union[tensor, list]: Additional data\n\n    RETURN:\n    -------\n\n    :return->dict: A dictionary containing the associations (key, output) of the metrics\n    \"\"\"\n\n    result_metrics: Dict[str, Any] = {}\n\n    # Temporary variable for saving the output\n    temp_metric_result: Any = None\n\n    for key, metric in vars(metrics).items():\n        metric_args: List = metric.get_arguments()\n        metric_method: Callable = metric.get_method()\n\n        # TODO : Check the number of arguments before compute the metric\n        #if metric.is_loss() is True:\n        #   num_required_args = len(inspect.getfullargspec(metric_method.forward)[0])\n        #   num_given_args = len(metric_args + 1)\n        #else:\n        #   num_required_args = len(inspect.getfullargspec(metric_method)[0])\n        #if num_required_args != num_given_args:\n        #    Notification(DEEP_NOTIF_FATAL, \"The metric %s takes %i positional arguments but %i were given\" %(metric_method, len(num_required_args), len(metric_args)))\n\n        #\n        # Select the good type of input\n        #\n        if DEEP_ENTRY_INPUT in metric_args:\n            if DEEP_ENTRY_LABEL in metric_args:\n                if DEEP_ENTRY_ADDITIONAL_DATA in metric_args:\n                    temp_metric_result = metric_method(inputs, outputs, labels, additional_data)\n                else:\n                    temp_metric_result = metric_method(outputs, labels)\n            else:\n                if DEEP_ENTRY_ADDITIONAL_DATA in metric_args:\n                    temp_metric_result = metric_method(inputs, outputs, additional_data)\n                else:\n                    temp_metric_result = metric_method(inputs, outputs)\n        else:\n            if DEEP_ENTRY_LABEL in metric_args:\n                if DEEP_ENTRY_ADDITIONAL_DATA in metric_args:\n                    temp_metric_result = metric_method(outputs, labels, additional_data)\n                else:\n                    temp_metric_result = metric_method(outputs, labels)\n            else:\n                if DEEP_ENTRY_ADDITIONAL_DATA in metric_args:\n                    temp_metric_result = metric_method(outputs, additional_data)\n                else:\n                    temp_metric_result = metric_method(outputs)\n\n        #\n        # Add the metric to the dictionary\n        #\n\n        # Check if the the metric is a Metric instance or a Loss instance\n        if metric.is_loss() is True:\n            # Do not call \".item()\" in order to be able to achieve back propagation on the total_loss\n            result_metrics[metric.get_name()] = temp_metric_result\n        else:\n            # If it is a Loss function we detach the tensor from the graph\n            if isinstance(temp_metric_result, torch.nn.Module):\n                temp_metric_result = temp_metric_result.detach()\n            result_metrics[metric.get_name()] = temp_metric_result.item()\n    return result_metrics\n", "error_location_char": [2736, 2743], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def validate_array(", "schema", ",", "data", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "(", "schema", ".", "get", "(", "'type'", ")", "!=", "'array'", ")", "or", "(", "not", "schema", ".", "get", "(", "'items'", ")", ")", ")", ":", "#NEWLINE#", "#INDENT#", "return", "#NEWLINE#", "#UNINDENT#", "col_map", "=", "{", "'csv'", ":", "','", ",", "'ssv'", ":", "' '", ",", "'tsv'", ":", "'\\t'", ",", "'pipes'", ":", "'|'", ",", "'multi'", ":", "'&'", "}", "#NEWLINE#", "col_fmt", "=", "schema", ".", "get", "(", "'collectionFormat'", ",", "'csv'", ")", "#NEWLINE#", "delimiter", "=", "col_map", ".", "get", "(", "col_fmt", ")", "#NEWLINE#", "if", "(", "not", "delimiter", ")", ":", "#NEWLINE#", "#INDENT#", "logger", ".", "error", "(", "'Unrecognized collectionFormat, cannot validate: %s'", ",", "col_fmt", ")", "#NEWLINE#", "return", "#NEWLINE#", "#UNINDENT#", "if", "(", "col_fmt", "==", "'multi'", ")", ":", "#NEWLINE#", "#INDENT#", "logger", ".", "debug", "(", "\"collectionFormat 'multi' is not validated by Connexion\"", ")", "#NEWLINE#", "return", "#NEWLINE#", "#UNINDENT#", "subschema", "=", "schema", ".", "get", "(", "'items'", ")", "#NEWLINE#", "items", "=", "data", ".", "split", "(", "delimiter", ")", "#NEWLINE#", "for", "subval", "in", "items", ":", "#NEWLINE#", "#INDENT#", "(", "converted_value", ",", "error", ")", "=", "validate_type", "(", "subschema", ",", "subval", ",", "schema", "[", "'in'", "]", ",", "schema", "[", "'name'", "]", ")", "#NEWLINE#", "if", "error", ":", "#NEWLINE#", "#INDENT#", "return", "error", "#NEWLINE#", "#UNINDENT#", "for", "func", "in", "VALIDATORS", ":", "#NEWLINE#", "#INDENT#", "error", "=", "func", "(", "subschema", ",", "subval", ")", "#NEWLINE#", "if", "error", ":", "#NEWLINE#", "#INDENT#", "return", "error"], "edges": [[1, 3, 7, "enum_FIELD"], [9, 21, 7, "enum_FIELD"], [37, 50, 7, "enum_FIELD"], [61, 69, 7, "enum_FIELD"], [72, 78, 7, "enum_FIELD"], [82, 84, 7, "enum_FIELD"], [102, 105, 7, "enum_FIELD"], [120, 126, 7, "enum_FIELD"], [129, 135, 7, "enum_FIELD"], [141, 140, 7, "enum_FIELD"], [141, 142, 7, "enum_FIELD"], [69, 65, 7, "enum_FIELD"], [78, 76, 7, "enum_FIELD"], [84, 85, 7, "enum_FIELD"], [89, 95, 7, "enum_FIELD"], [105, 104, 7, "enum_FIELD"], [110, 114, 7, "enum_FIELD"], [126, 124, 7, "enum_FIELD"], [135, 133, 7, "enum_FIELD"], [145, 157, 7, "enum_FIELD"], [169, 170, 7, "enum_FIELD"], [180, 179, 7, "enum_FIELD"], [180, 181, 7, "enum_FIELD"], [18, 15, 7, "enum_FIELD"], [23, 27, 7, "enum_FIELD"], [65, 64, 7, "enum_FIELD"], [76, 75, 7, "enum_FIELD"], [95, 91, 7, "enum_FIELD"], [114, 112, 7, "enum_FIELD"], [124, 123, 7, "enum_FIELD"], [133, 132, 7, "enum_FIELD"], [157, 152, 7, "enum_FIELD"], [174, 175, 7, "enum_FIELD"], [184, 190, 7, "enum_FIELD"], [194, 195, 7, "enum_FIELD"], [15, 13, 7, "enum_FIELD"], [27, 25, 7, "enum_FIELD"], [91, 90, 7, "enum_FIELD"], [112, 111, 7, "enum_FIELD"], [159, 158, 7, "enum_FIELD"], [159, 160, 7, "enum_FIELD"], [164, 163, 7, "enum_FIELD"], [164, 165, 7, "enum_FIELD"], [190, 187, 7, "enum_FIELD"], [199, 200, 7, "enum_FIELD"], [13, 12, 7, "enum_FIELD"], [25, 24, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [12, 2, 10, "enum_LAST_LEXICAL_USE"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [24, 12, 10, "enum_LAST_LEXICAL_USE"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 35, 9, "enum_NEXT_SYNTAX"], [35, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [64, 24, 10, "enum_LAST_LEXICAL_USE"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [75, 38, 10, "enum_LAST_LEXICAL_USE"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [79, 62, 10, "enum_LAST_LEXICAL_USE"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [85, 73, 10, "enum_LAST_LEXICAL_USE"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [96, 79, 10, "enum_LAST_LEXICAL_USE"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 99, 9, "enum_NEXT_SYNTAX"], [99, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [104, 96, 10, "enum_LAST_LEXICAL_USE"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 110, 9, "enum_NEXT_SYNTAX"], [111, 90, 10, "enum_LAST_LEXICAL_USE"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 118, 9, "enum_NEXT_SYNTAX"], [118, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [123, 64, 10, "enum_LAST_LEXICAL_USE"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [132, 4, 10, "enum_LAST_LEXICAL_USE"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [136, 85, 10, "enum_LAST_LEXICAL_USE"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [142, 130, 10, "enum_LAST_LEXICAL_USE"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [154, 121, 10, "enum_LAST_LEXICAL_USE"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [156, 140, 10, "enum_LAST_LEXICAL_USE"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [158, 123, 10, "enum_LAST_LEXICAL_USE"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [163, 158, 10, "enum_LAST_LEXICAL_USE"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 169, 9, "enum_NEXT_SYNTAX"], [170, 149, 10, "enum_LAST_LEXICAL_USE"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 174, 9, "enum_NEXT_SYNTAX"], [175, 170, 10, "enum_LAST_LEXICAL_USE"], [174, 175, 9, "enum_NEXT_SYNTAX"], [175, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 184, 9, "enum_NEXT_SYNTAX"], [185, 175, 10, "enum_LAST_LEXICAL_USE"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [187, 179, 10, "enum_LAST_LEXICAL_USE"], [186, 187, 9, "enum_NEXT_SYNTAX"], [187, 188, 9, "enum_NEXT_SYNTAX"], [189, 154, 10, "enum_LAST_LEXICAL_USE"], [188, 189, 9, "enum_NEXT_SYNTAX"], [189, 190, 9, "enum_NEXT_SYNTAX"], [191, 156, 10, "enum_LAST_LEXICAL_USE"], [190, 191, 9, "enum_NEXT_SYNTAX"], [191, 192, 9, "enum_NEXT_SYNTAX"], [192, 194, 9, "enum_NEXT_SYNTAX"], [195, 185, 10, "enum_LAST_LEXICAL_USE"], [194, 195, 9, "enum_NEXT_SYNTAX"], [195, 196, 9, "enum_NEXT_SYNTAX"], [196, 199, 9, "enum_NEXT_SYNTAX"], [200, 195, 10, "enum_LAST_LEXICAL_USE"], [199, 200, 9, "enum_NEXT_SYNTAX"], [3, 21, 1, "enum_CFG_NEXT"], [21, 37, 1, "enum_CFG_NEXT"], [21, 35, 1, "enum_CFG_NEXT"], [37, 61, 1, "enum_CFG_NEXT"], [61, 72, 1, "enum_CFG_NEXT"], [72, 84, 1, "enum_CFG_NEXT"], [84, 89, 1, "enum_CFG_NEXT"], [84, 105, 1, "enum_CFG_NEXT"], [89, 99, 1, "enum_CFG_NEXT"], [105, 120, 1, "enum_CFG_NEXT"], [105, 110, 1, "enum_CFG_NEXT"], [110, 118, 1, "enum_CFG_NEXT"], [120, 129, 1, "enum_CFG_NEXT"], [129, 142, 1, "enum_CFG_NEXT"], [142, 140, 1, "enum_CFG_NEXT"], [140, 145, 1, "enum_CFG_NEXT"], [145, 170, 1, "enum_CFG_NEXT"], [170, 174, 1, "enum_CFG_NEXT"], [170, 181, 1, "enum_CFG_NEXT"], [181, 179, 1, "enum_CFG_NEXT"], [179, 140, 1, "enum_CFG_NEXT"], [179, 184, 1, "enum_CFG_NEXT"], [184, 195, 1, "enum_CFG_NEXT"], [195, 179, 1, "enum_CFG_NEXT"], [195, 199, 1, "enum_CFG_NEXT"], [12, 2, 3, "enum_LAST_WRITE"], [24, 12, 2, "enum_LAST_READ"], [24, 2, 3, "enum_LAST_WRITE"], [64, 24, 2, "enum_LAST_READ"], [64, 2, 3, "enum_LAST_WRITE"], [75, 38, 3, "enum_LAST_WRITE"], [79, 62, 3, "enum_LAST_WRITE"], [85, 73, 3, "enum_LAST_WRITE"], [96, 79, 2, "enum_LAST_READ"], [96, 62, 3, "enum_LAST_WRITE"], [104, 79, 2, "enum_LAST_READ"], [104, 62, 3, "enum_LAST_WRITE"], [123, 64, 2, "enum_LAST_READ"], [123, 2, 3, "enum_LAST_WRITE"], [132, 4, 3, "enum_LAST_WRITE"], [136, 85, 2, "enum_LAST_READ"], [136, 73, 3, "enum_LAST_WRITE"], [142, 130, 3, "enum_LAST_WRITE"], [140, 191, 2, "enum_LAST_READ"], [140, 156, 2, "enum_LAST_READ"], [140, 140, 3, "enum_LAST_WRITE"], [152, 152, 2, "enum_LAST_READ"], [154, 189, 2, "enum_LAST_READ"], [154, 154, 2, "enum_LAST_READ"], [154, 121, 3, "enum_LAST_WRITE"], [156, 191, 2, "enum_LAST_READ"], [156, 156, 2, "enum_LAST_READ"], [156, 140, 3, "enum_LAST_WRITE"], [158, 163, 2, "enum_LAST_READ"], [158, 123, 2, "enum_LAST_READ"], [158, 2, 3, "enum_LAST_WRITE"], [163, 158, 2, "enum_LAST_READ"], [163, 2, 3, "enum_LAST_WRITE"], [147, 147, 3, "enum_LAST_WRITE"], [149, 170, 2, "enum_LAST_READ"], [149, 195, 2, "enum_LAST_READ"], [149, 185, 3, "enum_LAST_WRITE"], [149, 149, 3, "enum_LAST_WRITE"], [170, 170, 2, "enum_LAST_READ"], [170, 195, 2, "enum_LAST_READ"], [170, 149, 3, "enum_LAST_WRITE"], [175, 170, 2, "enum_LAST_READ"], [175, 149, 3, "enum_LAST_WRITE"], [181, 181, 2, "enum_LAST_READ"], [179, 187, 2, "enum_LAST_READ"], [179, 179, 3, "enum_LAST_WRITE"], [187, 187, 2, "enum_LAST_READ"], [187, 179, 3, "enum_LAST_WRITE"], [189, 189, 2, "enum_LAST_READ"], [189, 154, 2, "enum_LAST_READ"], [189, 121, 3, "enum_LAST_WRITE"], [191, 191, 2, "enum_LAST_READ"], [191, 156, 2, "enum_LAST_READ"], [191, 140, 3, "enum_LAST_WRITE"], [185, 170, 2, "enum_LAST_READ"], [185, 195, 2, "enum_LAST_READ"], [185, 185, 3, "enum_LAST_WRITE"], [185, 149, 3, "enum_LAST_WRITE"], [195, 170, 2, "enum_LAST_READ"], [195, 195, 2, "enum_LAST_READ"], [195, 185, 3, "enum_LAST_WRITE"], [200, 195, 2, "enum_LAST_READ"], [200, 185, 3, "enum_LAST_WRITE"], [62, 64, 4, "enum_COMPUTED_FROM"], [73, 79, 4, "enum_COMPUTED_FROM"], [73, 75, 4, "enum_COMPUTED_FROM"], [121, 123, 4, "enum_COMPUTED_FROM"], [130, 136, 4, "enum_COMPUTED_FROM"], [130, 132, 4, "enum_COMPUTED_FROM"], [148, 152, 4, "enum_COMPUTED_FROM"], [148, 154, 4, "enum_COMPUTED_FROM"], [148, 156, 4, "enum_COMPUTED_FROM"], [148, 158, 4, "enum_COMPUTED_FROM"], [148, 163, 4, "enum_COMPUTED_FROM"], [185, 187, 4, "enum_COMPUTED_FROM"], [185, 189, 4, "enum_COMPUTED_FROM"], [185, 191, 4, "enum_COMPUTED_FROM"]], "error_location": 191, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/dtkav/specific.git", "old_path": "connexion/decorators/validation.py", "hash": "44fc513eaa8f8746eafce36749b8564a0a03a0e8", "code": "def validate_array(schema: Dict[str, Any], data: str) -> Optional[str]:\n    if schema.get('type') != 'array' or not schema.get('items'):\n        return\n    col_map: Dict[str, str] = {'csv':   ',',\n               'ssv':   ' ',\n               'tsv':   '\t',\n               'pipes': '|',\n               'multi': '&'}\n    col_fmt: str = schema.get('collectionFormat', 'csv')\n    delimiter: Optional[str] = col_map.get(col_fmt)\n    if not delimiter:\n        logger.error(\"Unrecognized collectionFormat, cannot validate: %s\", col_fmt)\n        return\n    if col_fmt == 'multi':\n        logger.debug(\"collectionFormat 'multi' is not validated by Connexion\")\n        return\n    subschema: Optional[Dict[str, Any]] = schema.get('items')\n    items: List[str] = data.split(delimiter)\n    for subval in items:\n        converted_value, error = validate_type(subschema, subval, schema['in'], schema['name'])\n        if error:\n            return error\n        # Run each sub-item through the list of validators.\n        for func in VALIDATORS:\n            error: Optional[str] = func(subschema, subval)\n            if error:\n                return error\n", "rewrite": "ReplaceText(target='converted_value' @(130,36)->(130,42))", "error_line": 24, "has_bug": true, "code_full": "import logging\nfrom typing import Any, Callable, Dict, List, Optional, Tuple\n\nlogger = logging.getLogger(__name__)\n\n\nVALIDATORS: List[Callable[[Optional[Dict[str, Any]], Any], Optional[str]]] = []\n\n\ndef validate_type(schema: Optional[Dict[str, Any]], subval: Any, param_in: str, param_name: str) -> Tuple[Any, Optional[str]]:\n    return subval, None\n\n\ndef validate_array(schema: Dict[str, Any], data: str) -> Optional[str]:\n    if schema.get('type') != 'array' or not schema.get('items'):\n        return\n    col_map: Dict[str, str] = {'csv':   ',',\n               'ssv':   ' ',\n               'tsv':   '\t',\n               'pipes': '|',\n               'multi': '&'}\n    col_fmt: str = schema.get('collectionFormat', 'csv')\n    delimiter: Optional[str] = col_map.get(col_fmt)\n    if not delimiter:\n        logger.error(\"Unrecognized collectionFormat, cannot validate: %s\", col_fmt)\n        return\n    if col_fmt == 'multi':\n        logger.debug(\"collectionFormat 'multi' is not validated by Connexion\")\n        return\n    subschema: Optional[Dict[str, Any]] = schema.get('items')\n    items: List[str] = data.split(delimiter)\n    for subval in items:\n        converted_value, error = validate_type(subschema, subval, schema['in'], schema['name'])\n        if error:\n            return error\n        # Run each sub-item through the list of validators.\n        for func in VALIDATORS:\n            error: Optional[str] = func(subschema, subval)\n            if error:\n                return error\n", "error_location_char": [1078, 1084], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def request(", "self", ",", "resource", ",", "url", ",", "*", "args", ")", ":", "#NEWLINE#", "#INDENT#", "options", "=", "self", ".", "prepare_request", "(", "resource", ",", "url", ",", "*", "args", ")", "#NEWLINE#", "raw", "=", "self", ".", "patchboard", ".", "session", ".", "request", "(", "self", ".", "method", ",", "url", ",", "args", ")", "#NEWLINE#", "response", "=", "Response", "(", "raw", ")", "#NEWLINE#", "if", "(", "response", ".", "status", "!=", "self", ".", "success_status", ")", ":", "#NEWLINE#", "#INDENT#", "err_msg", "=", "(", "(", "(", "'Unexpected response status: '", "+", "response", ".", "status", ")", "+", "' - '", ")", "+", "response", ".", "body", ")", "#NEWLINE#", "raise", "PatchboardError", "(", "err_msg", ")", "#NEWLINE#", "#UNINDENT#", "out", "=", "self", ".", "api", ".", "decorate", "(", "resource", ".", "context", ",", "self", ".", "response_schema", ",", "response", ".", "data", ")", "#NEWLINE#", "out", ".", "response", "=", "response", "#NEWLINE#", "return", "out"], "edges": [[1, 5, 7, "enum_FIELD"], [5, 9, 7, "enum_FIELD"], [13, 21, 7, "enum_FIELD"], [27, 41, 7, "enum_FIELD"], [46, 50, 7, "enum_FIELD"], [54, 59, 7, "enum_FIELD"], [93, 105, 7, "enum_FIELD"], [114, 119, 7, "enum_FIELD"], [121, 122, 7, "enum_FIELD"], [21, 17, 7, "enum_FIELD"], [41, 35, 7, "enum_FIELD"], [50, 49, 7, "enum_FIELD"], [59, 57, 7, "enum_FIELD"], [66, 81, 7, "enum_FIELD"], [87, 89, 7, "enum_FIELD"], [105, 99, 7, "enum_FIELD"], [116, 115, 7, "enum_FIELD"], [17, 16, 7, "enum_FIELD"], [24, 25, 7, "enum_FIELD"], [35, 33, 7, "enum_FIELD"], [39, 38, 7, "enum_FIELD"], [57, 56, 7, "enum_FIELD"], [61, 60, 7, "enum_FIELD"], [81, 78, 7, "enum_FIELD"], [81, 83, 7, "enum_FIELD"], [89, 88, 7, "enum_FIELD"], [99, 97, 7, "enum_FIELD"], [103, 102, 7, "enum_FIELD"], [107, 106, 7, "enum_FIELD"], [111, 110, 7, "enum_FIELD"], [33, 31, 7, "enum_FIELD"], [78, 73, 7, "enum_FIELD"], [78, 79, 7, "enum_FIELD"], [83, 82, 7, "enum_FIELD"], [97, 96, 7, "enum_FIELD"], [31, 30, 7, "enum_FIELD"], [73, 72, 7, "enum_FIELD"], [73, 75, 7, "enum_FIELD"], [75, 74, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [16, 2, 10, "enum_LAST_LEXICAL_USE"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [20, 4, 10, "enum_LAST_LEXICAL_USE"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [22, 6, 10, "enum_LAST_LEXICAL_USE"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [25, 9, 10, "enum_LAST_LEXICAL_USE"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [30, 16, 10, "enum_LAST_LEXICAL_USE"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [38, 30, 10, "enum_LAST_LEXICAL_USE"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [42, 22, 10, "enum_LAST_LEXICAL_USE"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [44, 25, 10, "enum_LAST_LEXICAL_USE"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [51, 28, 10, "enum_LAST_LEXICAL_USE"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [56, 47, 10, "enum_LAST_LEXICAL_USE"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [60, 38, 10, "enum_LAST_LEXICAL_USE"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [74, 56, 10, "enum_LAST_LEXICAL_USE"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [82, 74, 10, "enum_LAST_LEXICAL_USE"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [90, 67, 10, "enum_LAST_LEXICAL_USE"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [96, 60, 10, "enum_LAST_LEXICAL_USE"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [102, 20, 10, "enum_LAST_LEXICAL_USE"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [106, 96, 10, "enum_LAST_LEXICAL_USE"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [110, 82, 10, "enum_LAST_LEXICAL_USE"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [115, 94, 10, "enum_LAST_LEXICAL_USE"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [119, 110, 10, "enum_LAST_LEXICAL_USE"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 121, 9, "enum_NEXT_SYNTAX"], [122, 115, 10, "enum_LAST_LEXICAL_USE"], [121, 122, 9, "enum_NEXT_SYNTAX"], [5, 13, 1, "enum_CFG_NEXT"], [13, 27, 1, "enum_CFG_NEXT"], [27, 46, 1, "enum_CFG_NEXT"], [46, 59, 1, "enum_CFG_NEXT"], [59, 66, 1, "enum_CFG_NEXT"], [59, 93, 1, "enum_CFG_NEXT"], [66, 87, 1, "enum_CFG_NEXT"], [93, 114, 1, "enum_CFG_NEXT"], [114, 121, 1, "enum_CFG_NEXT"], [16, 2, 3, "enum_LAST_WRITE"], [20, 4, 3, "enum_LAST_WRITE"], [22, 6, 3, "enum_LAST_WRITE"], [25, 9, 3, "enum_LAST_WRITE"], [30, 16, 2, "enum_LAST_READ"], [30, 2, 3, "enum_LAST_WRITE"], [38, 30, 2, "enum_LAST_READ"], [38, 2, 3, "enum_LAST_WRITE"], [42, 22, 2, "enum_LAST_READ"], [42, 6, 3, "enum_LAST_WRITE"], [44, 25, 2, "enum_LAST_READ"], [44, 9, 3, "enum_LAST_WRITE"], [51, 28, 3, "enum_LAST_WRITE"], [56, 47, 3, "enum_LAST_WRITE"], [60, 38, 2, "enum_LAST_READ"], [60, 2, 3, "enum_LAST_WRITE"], [74, 56, 2, "enum_LAST_READ"], [74, 47, 3, "enum_LAST_WRITE"], [82, 74, 2, "enum_LAST_READ"], [82, 47, 3, "enum_LAST_WRITE"], [90, 67, 3, "enum_LAST_WRITE"], [96, 60, 2, "enum_LAST_READ"], [96, 2, 3, "enum_LAST_WRITE"], [102, 20, 2, "enum_LAST_READ"], [102, 4, 3, "enum_LAST_WRITE"], [106, 96, 2, "enum_LAST_READ"], [106, 2, 3, "enum_LAST_WRITE"], [110, 56, 2, "enum_LAST_READ"], [110, 47, 3, "enum_LAST_WRITE"], [119, 110, 2, "enum_LAST_READ"], [119, 47, 3, "enum_LAST_WRITE"], [115, 94, 3, "enum_LAST_WRITE"], [122, 115, 2, "enum_LAST_READ"], [122, 94, 3, "enum_LAST_WRITE"], [14, 20, 4, "enum_COMPUTED_FROM"], [14, 22, 4, "enum_COMPUTED_FROM"], [14, 16, 4, "enum_COMPUTED_FROM"], [14, 25, 4, "enum_COMPUTED_FROM"], [28, 42, 4, "enum_COMPUTED_FROM"], [28, 44, 4, "enum_COMPUTED_FROM"], [28, 38, 4, "enum_COMPUTED_FROM"], [28, 30, 4, "enum_COMPUTED_FROM"], [47, 49, 4, "enum_COMPUTED_FROM"], [47, 51, 4, "enum_COMPUTED_FROM"], [94, 102, 4, "enum_COMPUTED_FROM"], [94, 106, 4, "enum_COMPUTED_FROM"], [94, 110, 4, "enum_COMPUTED_FROM"], [94, 96, 4, "enum_COMPUTED_FROM"], [116, 119, 4, "enum_COMPUTED_FROM"], [67, 82, 4, "enum_COMPUTED_FROM"], [67, 74, 4, "enum_COMPUTED_FROM"]], "error_location": 44, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/patchboard/patchboard-py.git", "old_path": "patchboard/action.py", "hash": "0bd7da5b765f2b87bf92404b3c56c411790b3daa", "code": "def request(self, resource: Any, url: str, *args) -> Any:\n    options: Dict[str, Any] = self.prepare_request(resource, url, *args)\n    raw: requests.Response = self.patchboard.session.request(\n        self.method,\n        url,\n        args\n    )\n    response = Response(raw)\n    if response.status != self.success_status:\n        err_msg: str = (\"Unexpected response status: \" + response.status +\n                \" - \" + response.body)\n        raise PatchboardError(err_msg)\n\n    out: Any = self.api.decorate(resource.context,\n                            self.response_schema,\n                            response.data)\n    out.response = response\n    return out\n", "rewrite": "ReplaceText(target='options' @(55,12)->(55,16))", "error_line": 6, "has_bug": true, "code_full": "from typing import Any, Dict\n\nimport requests\n\n\nclass PatchboardError(Exception):\n    pass\n\n\nclass Response:\n    def __init__(self, raw: requests.Response):\n        self.raw = raw\n        self.status = raw.status_code\n        self.body = raw.text\n        self.data = raw.json()\n\n\nclass PatchboardSession:\n    def request(self, method: str, url: str, kwargs: Dict[str, Any]) -> requests.Response:\n        return requests.request(method, url, **kwargs)\n\n\nclass Patchboard:\n    session: PatchboardSession\n\n\nclass API:\n    def decorate(self, context: Dict[str, Any], schema: Dict[str, Any], data: Dict[str, Any]) -> Any:\n        pass\n\n\nclass Action:\n    patchboard: Patchboard\n    api: API\n    method: str\n    success_status: int\n    response_schema: Dict[str, Any]\n\n    def prepare_request(self, resource: Any, url: str, *args) -> Dict[str, Any]:\n        return {}\n\n    def request(self, resource: Any, url: str, *args) -> Any:\n        options: Dict[str, Any] = self.prepare_request(resource, url, *args)\n        raw: requests.Response = self.patchboard.session.request(\n            self.method,\n            url,\n            args\n        )\n        response = Response(raw)\n        if response.status != self.success_status:\n            err_msg: str = (\"Unexpected response status: \" + response.status +\n                    \" - \" + response.body)\n            raise PatchboardError(err_msg)\n\n        out: Any = self.api.decorate(resource.context,\n                                self.response_schema,\n                                response.data)\n        out.response = response\n        return out\n", "error_location_char": [235, 239], "type_checked_pytype": false, "type_error_label": "wrong-arg-types", "type_checked_mypy": false}
{"source_tokens": ["#NEWLINE#", "def create_argument_parser(", ")", ":", "#NEWLINE#", "#INDENT#", "'Create argument parser for the evaluate script.'", "#NEWLINE#", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'evaluates a dialogue model'", ")", "#NEWLINE#", "parent_parser", "=", "argparse", ".", "ArgumentParser", "(", "add_help", "=", "False", ")", "#NEWLINE#", "add_args_to_parser", "(", "parent_parser", ")", "#NEWLINE#", "cli", ".", "arguments", ".", "add_model_and_story_group", "(", "parser", ",", "allow_pretrained_model", "=", "False", ")", "#NEWLINE#", "utils", ".", "add_logging_option_arguments", "(", "parent_parser", ")", "#NEWLINE#", "subparsers", "=", "parser", ".", "add_subparsers", "(", "help", "=", "'mode'", ",", "dest", "=", "'mode'", ")", "#NEWLINE#", "subparsers", ".", "add_parser", "(", "'default'", ",", "help", "=", "'default mode: evaluate a dialogue model'", ",", "parents", "=", "[", "parent_parser", "]", ")", "#NEWLINE#", "subparsers", ".", "add_parser", "(", "'compare'", ",", "help", "=", "'compare mode: evaluate multiple dialogue models to compare policies'", ",", "parents", "=", "[", "parent_parser", "]", ")", "#NEWLINE#", "return", "parser"], "edges": [[5, 6, 7, "enum_FIELD"], [7, 13, 7, "enum_FIELD"], [18, 24, 7, "enum_FIELD"], [29, 31, 7, "enum_FIELD"], [34, 42, 7, "enum_FIELD"], [47, 51, 7, "enum_FIELD"], [54, 64, 7, "enum_FIELD"], [69, 75, 7, "enum_FIELD"], [86, 92, 7, "enum_FIELD"], [104, 105, 7, "enum_FIELD"], [13, 11, 7, "enum_FIELD"], [24, 22, 7, "enum_FIELD"], [31, 30, 7, "enum_FIELD"], [42, 38, 7, "enum_FIELD"], [51, 49, 7, "enum_FIELD"], [64, 58, 7, "enum_FIELD"], [75, 71, 7, "enum_FIELD"], [92, 88, 7, "enum_FIELD"], [11, 10, 7, "enum_FIELD"], [14, 16, 7, "enum_FIELD"], [22, 21, 7, "enum_FIELD"], [25, 27, 7, "enum_FIELD"], [38, 36, 7, "enum_FIELD"], [43, 45, 7, "enum_FIELD"], [49, 48, 7, "enum_FIELD"], [58, 57, 7, "enum_FIELD"], [61, 63, 7, "enum_FIELD"], [65, 67, 7, "enum_FIELD"], [71, 70, 7, "enum_FIELD"], [76, 78, 7, "enum_FIELD"], [80, 82, 7, "enum_FIELD"], [88, 87, 7, "enum_FIELD"], [93, 95, 7, "enum_FIELD"], [97, 99, 7, "enum_FIELD"], [36, 35, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [21, 10, 10, "enum_LAST_LEXICAL_USE"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [32, 19, 10, "enum_LAST_LEXICAL_USE"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [41, 8, 10, "enum_LAST_LEXICAL_USE"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [52, 32, 10, "enum_LAST_LEXICAL_USE"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [57, 41, 10, "enum_LAST_LEXICAL_USE"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [70, 55, 10, "enum_LAST_LEXICAL_USE"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [83, 52, 10, "enum_LAST_LEXICAL_USE"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [87, 70, 10, "enum_LAST_LEXICAL_USE"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [100, 83, 10, "enum_LAST_LEXICAL_USE"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 104, 9, "enum_NEXT_SYNTAX"], [105, 57, 10, "enum_LAST_LEXICAL_USE"], [104, 105, 9, "enum_NEXT_SYNTAX"], [5, 7, 1, "enum_CFG_NEXT"], [7, 18, 1, "enum_CFG_NEXT"], [18, 29, 1, "enum_CFG_NEXT"], [29, 34, 1, "enum_CFG_NEXT"], [34, 47, 1, "enum_CFG_NEXT"], [47, 54, 1, "enum_CFG_NEXT"], [54, 69, 1, "enum_CFG_NEXT"], [69, 86, 1, "enum_CFG_NEXT"], [86, 104, 1, "enum_CFG_NEXT"], [21, 10, 2, "enum_LAST_READ"], [32, 19, 3, "enum_LAST_WRITE"], [41, 8, 3, "enum_LAST_WRITE"], [52, 32, 2, "enum_LAST_READ"], [52, 19, 3, "enum_LAST_WRITE"], [57, 41, 2, "enum_LAST_READ"], [57, 8, 3, "enum_LAST_WRITE"], [70, 55, 3, "enum_LAST_WRITE"], [83, 52, 2, "enum_LAST_READ"], [83, 19, 3, "enum_LAST_WRITE"], [87, 70, 2, "enum_LAST_READ"], [87, 55, 3, "enum_LAST_WRITE"], [100, 83, 2, "enum_LAST_READ"], [100, 19, 3, "enum_LAST_WRITE"], [105, 57, 2, "enum_LAST_READ"], [105, 8, 3, "enum_LAST_WRITE"], [8, 10, 4, "enum_COMPUTED_FROM"], [19, 21, 4, "enum_COMPUTED_FROM"], [55, 57, 4, "enum_COMPUTED_FROM"]], "error_location": 41, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/RasaHQ/rasa.git", "old_path": "rasa_core/evaluate.py", "hash": "2d92ef4002144ec4b3d66bd911c26642e5ab698f", "code": "def create_argument_parser() -> argparse.ArgumentParser:\n    \"\"\"Create argument parser for the evaluate script.\"\"\"\n\n    parser: argparse.ArgumentParser = argparse.ArgumentParser(\n        description='evaluates a dialogue model')\n    parent_parser: argparse.ArgumentParser = argparse.ArgumentParser(add_help=False)\n    add_args_to_parser(parent_parser)\n    cli.arguments.add_model_and_story_group(parser,\n                                            allow_pretrained_model=False)\n    utils.add_logging_option_arguments(parent_parser)\n    subparsers: argparse._SubParsersAction[argparse.ArgumentParser] = parser.add_subparsers(help='mode', dest='mode')\n    subparsers.add_parser('default',\n                          help='default mode: evaluate a dialogue'\n                               ' model',\n                          parents=[parent_parser])\n    subparsers.add_parser('compare',\n                          help='compare mode: evaluate multiple'\n                               ' dialogue models to compare '\n                               'policies',\n                          parents=[parent_parser])\n\n    return parser\n", "rewrite": "ReplaceText(target='parent_parser' @(45,44)->(45,50))", "error_line": 7, "has_bug": true, "code_full": "import argparse\n\n\ndef add_args_to_parser(parser: argparse.ArgumentParser) -> None:\n    pass\n\nclass cli:\n    class arguments:\n        @staticmethod\n        def add_model_and_story_group(parser: argparse.ArgumentParser, allow_pretrained_model: bool) -> None:\n            pass\n\nclass utils:\n    @staticmethod\n    def add_logging_option_arguments(parser: argparse.ArgumentParser) -> None:\n        pass\n\n\ndef create_argument_parser() -> argparse.ArgumentParser:\n    \"\"\"Create argument parser for the evaluate script.\"\"\"\n\n    parser: argparse.ArgumentParser = argparse.ArgumentParser(\n        description='evaluates a dialogue model')\n    parent_parser: argparse.ArgumentParser = argparse.ArgumentParser(add_help=False)\n    add_args_to_parser(parent_parser)\n    cli.arguments.add_model_and_story_group(parser,\n                                            allow_pretrained_model=False)\n    utils.add_logging_option_arguments(parent_parser)\n    subparsers: argparse._SubParsersAction[argparse.ArgumentParser] = parser.add_subparsers(help='mode', dest='mode')\n    subparsers.add_parser('default',\n                          help='default mode: evaluate a dialogue'\n                               ' model',\n                          parents=[parent_parser])\n    subparsers.add_parser('compare',\n                          help='compare mode: evaluate multiple'\n                               ' dialogue models to compare '\n                               'policies',\n                          parents=[parent_parser])\n\n    return parser\n", "error_location_char": [396, 402], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def clean_boolean(", "self", ",", "raw", ",", "ktype", ",", "kname", "=", "None", ",", "defval", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n        Clean and convert input value to requested boolean type\\n        :param raw: raw input data\\n        :param ktype: variable type to which result should be casted\\n        :param defval: default value to be used in case of cast error\\n    '", "#NEWLINE#", "if", "isinstance", "(", "raw", ",", "ktype", ")", ":", "#NEWLINE#", "#INDENT#", "return", "raw", "#NEWLINE#", "#UNINDENT#", "val", "=", "str", "(", "raw", ")", ".", "strip", "(", ")", ".", "lower", "(", ")", "#NEWLINE#", "allowed_values", "=", "[", "''", ",", "'none'", ",", "'true'", ",", "'false'", ",", "'yes'", ",", "'no'", ",", "'1'", ",", "'0'", "]", "#NEWLINE#", "if", "(", "val", "not in", "allowed_values", ")", ":", "#NEWLINE#", "#INDENT#", "logger", ".", "warning", "(", "(", "'failed to convert data for key=%s, raw=%s to type=%s'", "%", "(", "kname", ",", "raw", ",", "ktype", ")", ")", ")", "#NEWLINE#", "return", "defval", "#NEWLINE#", "#UNINDENT#", "return", "(", "raw", ".", "lower", "(", ")", "in", "[", "'1'", ",", "'true'", ",", "'yes'", "]", ")"], "edges": [[1, 7, 7, "enum_FIELD"], [18, 19, 7, "enum_FIELD"], [21, 25, 7, "enum_FIELD"], [34, 47, 7, "enum_FIELD"], [49, 60, 7, "enum_FIELD"], [70, 73, 7, "enum_FIELD"], [100, 107, 7, "enum_FIELD"], [25, 22, 7, "enum_FIELD"], [31, 32, 7, "enum_FIELD"], [47, 45, 7, "enum_FIELD"], [73, 72, 7, "enum_FIELD"], [78, 82, 7, "enum_FIELD"], [96, 97, 7, "enum_FIELD"], [107, 105, 7, "enum_FIELD"], [45, 43, 7, "enum_FIELD"], [82, 80, 7, "enum_FIELD"], [105, 103, 7, "enum_FIELD"], [43, 41, 7, "enum_FIELD"], [80, 79, 7, "enum_FIELD"], [85, 84, 7, "enum_FIELD"], [85, 88, 7, "enum_FIELD"], [103, 102, 7, "enum_FIELD"], [41, 38, 7, "enum_FIELD"], [38, 37, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [24, 4, 10, "enum_LAST_LEXICAL_USE"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [26, 6, 10, "enum_LAST_LEXICAL_USE"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 31, 9, "enum_NEXT_SYNTAX"], [32, 24, 10, "enum_LAST_LEXICAL_USE"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [39, 32, 10, "enum_LAST_LEXICAL_USE"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [72, 35, 10, "enum_LAST_LEXICAL_USE"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [74, 50, 10, "enum_LAST_LEXICAL_USE"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [87, 8, 10, "enum_LAST_LEXICAL_USE"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [89, 39, 10, "enum_LAST_LEXICAL_USE"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [91, 26, 10, "enum_LAST_LEXICAL_USE"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 96, 9, "enum_NEXT_SYNTAX"], [97, 12, 10, "enum_LAST_LEXICAL_USE"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [102, 89, 10, "enum_LAST_LEXICAL_USE"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [10, 14, 1, "enum_CFG_NEXT"], [14, 1, 1, "enum_CFG_NEXT"], [7, 18, 1, "enum_CFG_NEXT"], [18, 25, 1, "enum_CFG_NEXT"], [25, 31, 1, "enum_CFG_NEXT"], [25, 34, 1, "enum_CFG_NEXT"], [34, 49, 1, "enum_CFG_NEXT"], [49, 73, 1, "enum_CFG_NEXT"], [73, 100, 1, "enum_CFG_NEXT"], [73, 78, 1, "enum_CFG_NEXT"], [78, 96, 1, "enum_CFG_NEXT"], [24, 4, 3, "enum_LAST_WRITE"], [26, 6, 3, "enum_LAST_WRITE"], [32, 24, 2, "enum_LAST_READ"], [32, 4, 3, "enum_LAST_WRITE"], [39, 24, 2, "enum_LAST_READ"], [39, 4, 3, "enum_LAST_WRITE"], [72, 35, 3, "enum_LAST_WRITE"], [74, 50, 3, "enum_LAST_WRITE"], [87, 8, 3, "enum_LAST_WRITE"], [89, 39, 2, "enum_LAST_READ"], [89, 4, 3, "enum_LAST_WRITE"], [91, 26, 2, "enum_LAST_READ"], [91, 6, 3, "enum_LAST_WRITE"], [97, 12, 3, "enum_LAST_WRITE"], [102, 39, 2, "enum_LAST_READ"], [102, 4, 3, "enum_LAST_WRITE"], [35, 37, 4, "enum_COMPUTED_FROM"], [35, 39, 4, "enum_COMPUTED_FROM"]], "error_location": 102, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/PanDAWMS/pilot2.git", "old_path": "pilot/info/basedata.py", "hash": "d501b7defb163d213b08e69100e1b4ddc30b68f0", "code": "def clean_boolean(self, raw: Any, ktype: Type[bool], kname: Optional[str] = None, defval: Optional[bool] = None) -> Optional[bool]:\n    \"\"\"\n        Clean and convert input value to requested boolean type\n        :param raw: raw input data\n        :param ktype: variable type to which result should be casted\n        :param defval: default value to be used in case of cast error\n    \"\"\"\n\n    if isinstance(raw, ktype):\n        return raw\n\n    val: str = str(raw).strip().lower()\n    allowed_values = ['', 'none', 'true', 'false', 'yes', 'no', '1', '0']\n\n    if val not in allowed_values:\n        logger.warning('failed to convert data for key=%s, raw=%s to type=%s' % (kname, raw, ktype))\n        return defval\n\n    return raw.lower() in ['1', 'true', 'yes']\n", "rewrite": "ReplaceText(target='val' @(157,15)->(157,18))", "error_line": 18, "has_bug": true, "code_full": "import logging\nfrom typing import Any, Optional, Type\n\nlogger = logging.getLogger(__name__)\n\n\ndef clean_boolean(self, raw: Any, ktype: Type[bool], kname: Optional[str] = None, defval: Optional[bool] = None) -> Optional[bool]:\n    \"\"\"\n        Clean and convert input value to requested boolean type\n        :param raw: raw input data\n        :param ktype: variable type to which result should be casted\n        :param defval: default value to be used in case of cast error\n    \"\"\"\n\n    if isinstance(raw, ktype):\n        return raw\n\n    val: str = str(raw).strip().lower()\n    allowed_values = ['', 'none', 'true', 'false', 'yes', 'no', '1', '0']\n\n    if val not in allowed_values:\n        logger.warning('failed to convert data for key=%s, raw=%s to type=%s' % (kname, raw, ktype))\n        return defval\n\n    return raw.lower() in ['1', 'true', 'yes']\n", "error_location_char": [722, 725], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def _construct_instance(", "cls", ",", "names", ",", "values", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    method used to construct instances from query results\\n    this is where polymorphic deserialization occurs\\n    '", "#NEWLINE#", "field_dict", "=", "dict", "(", "(", "(", "cls", ".", "_db_map", ".", "get", "(", "k", ",", "k", ")", ",", "v", ")", "for", "(", "k", ",", "v", ")", "in", "zip", "(", "names", ",", "values", ")", ")", ")", "#NEWLINE#", "if", "cls", ".", "_is_polymorphic", ":", "#NEWLINE#", "#INDENT#", "poly_key", "=", "field_dict", ".", "get", "(", "cls", ".", "_polymorphic_column_name", ")", "#NEWLINE#", "if", "(", "poly_key", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "PolyMorphicModelException", "(", "'polymorphic key was not found in values'", ")", "#NEWLINE#", "#UNINDENT#", "poly_base", "=", "(", "cls", "if", "cls", ".", "_is_polymorphic_base", "else", "cls", ".", "_polymorphic_base", ")", "#NEWLINE#", "klass", "=", "poly_base", ".", "_get_model_by_polymorphic_key", "(", "poly_key", ")", "#NEWLINE#", "if", "(", "klass", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "poly_base", ".", "_discover_polymorphic_submodels", "(", ")", "#NEWLINE#", "klass", "=", "poly_base", ".", "_get_model_by_polymorphic_key", "(", "poly_key", ")", "#NEWLINE#", "if", "(", "klass", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "PolyMorphicModelException", "(", "'unrecognized polymorphic key {} for class {}'", ".", "format", "(", "poly_key", ",", "poly_base", ".", "__name__", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "if", "(", "not", "issubclass", "(", "klass", ",", "cls", ")", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "PolyMorphicModelException", "(", "'{} is not a subclass of {}'", ".", "format", "(", "klass", ".", "__name__", ",", "poly_base", ".", "__name__", ")", ")", "#NEWLINE#", "#UNINDENT#", "field_dict", "=", "{", "k", ":", "v", "for", "(", "k", ",", "v", ")", "in", "field_dict", ".", "items", "(", ")", "if", "(", "k", "in", "klass", ".", "_columns", ".", "keys", "(", ")", ")", "}", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "klass", "=", "cls", "#NEWLINE#", "#UNINDENT#", "instance", "=", "klass", "(", "**", "field_dict", ")", "#NEWLINE#", "instance", ".", "_is_persisted", "=", "True", "#NEWLINE#", "return", "instance"], "edges": [[1, 3, 7, "enum_FIELD"], [10, 11, 7, "enum_FIELD"], [12, 16, 7, "enum_FIELD"], [52, 50, 7, "enum_FIELD"], [227, 231, 7, "enum_FIELD"], [235, 240, 7, "enum_FIELD"], [242, 243, 7, "enum_FIELD"], [16, 15, 7, "enum_FIELD"], [50, 49, 7, "enum_FIELD"], [54, 60, 7, "enum_FIELD"], [66, 69, 7, "enum_FIELD"], [81, 86, 7, "enum_FIELD"], [95, 101, 7, "enum_FIELD"], [105, 108, 7, "enum_FIELD"], [155, 157, 7, "enum_FIELD"], [185, 190, 7, "enum_FIELD"], [222, 225, 7, "enum_FIELD"], [231, 230, 7, "enum_FIELD"], [237, 236, 7, "enum_FIELD"], [17, 29, 7, "enum_FIELD"], [60, 58, 7, "enum_FIELD"], [69, 68, 7, "enum_FIELD"], [75, 77, 7, "enum_FIELD"], [86, 88, 7, "enum_FIELD"], [86, 85, 7, "enum_FIELD"], [86, 92, 7, "enum_FIELD"], [101, 99, 7, "enum_FIELD"], [108, 107, 7, "enum_FIELD"], [113, 117, 7, "enum_FIELD"], [119, 125, 7, "enum_FIELD"], [129, 132, 7, "enum_FIELD"], [157, 161, 7, "enum_FIELD"], [168, 170, 7, "enum_FIELD"], [190, 189, 7, "enum_FIELD"], [190, 191, 7, "enum_FIELD"], [232, 233, 7, "enum_FIELD"], [32, 35, 7, "enum_FIELD"], [32, 42, 7, "enum_FIELD"], [58, 57, 7, "enum_FIELD"], [62, 61, 7, "enum_FIELD"], [77, 76, 7, "enum_FIELD"], [88, 87, 7, "enum_FIELD"], [92, 91, 7, "enum_FIELD"], [99, 98, 7, "enum_FIELD"], [117, 115, 7, "enum_FIELD"], [125, 123, 7, "enum_FIELD"], [132, 131, 7, "enum_FIELD"], [138, 140, 7, "enum_FIELD"], [161, 158, 7, "enum_FIELD"], [170, 169, 7, "enum_FIELD"], [198, 195, 7, "enum_FIELD"], [198, 202, 7, "enum_FIELD"], [26, 22, 7, "enum_FIELD"], [42, 39, 7, "enum_FIELD"], [115, 114, 7, "enum_FIELD"], [123, 122, 7, "enum_FIELD"], [140, 139, 7, "enum_FIELD"], [178, 172, 7, "enum_FIELD"], [202, 200, 7, "enum_FIELD"], [207, 206, 7, "enum_FIELD"], [22, 20, 7, "enum_FIELD"], [146, 142, 7, "enum_FIELD"], [172, 171, 7, "enum_FIELD"], [176, 175, 7, "enum_FIELD"], [180, 179, 7, "enum_FIELD"], [200, 199, 7, "enum_FIELD"], [213, 211, 7, "enum_FIELD"], [20, 19, 7, "enum_FIELD"], [142, 141, 7, "enum_FIELD"], [148, 147, 7, "enum_FIELD"], [211, 209, 7, "enum_FIELD"], [209, 208, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [19, 2, 10, "enum_LAST_LEXICAL_USE"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [27, 25, 10, "enum_LAST_LEXICAL_USE"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [34, 27, 10, "enum_LAST_LEXICAL_USE"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [36, 30, 10, "enum_LAST_LEXICAL_USE"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [41, 4, 10, "enum_LAST_LEXICAL_USE"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [43, 6, 10, "enum_LAST_LEXICAL_USE"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 48, 9, "enum_NEXT_SYNTAX"], [49, 19, 10, "enum_LAST_LEXICAL_USE"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [57, 13, 10, "enum_LAST_LEXICAL_USE"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [61, 49, 10, "enum_LAST_LEXICAL_USE"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [68, 55, 10, "enum_LAST_LEXICAL_USE"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [85, 61, 10, "enum_LAST_LEXICAL_USE"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [87, 85, 10, "enum_LAST_LEXICAL_USE"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [91, 87, 10, "enum_LAST_LEXICAL_USE"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [98, 82, 10, "enum_LAST_LEXICAL_USE"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [102, 68, 10, "enum_LAST_LEXICAL_USE"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [107, 96, 10, "enum_LAST_LEXICAL_USE"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 113, 9, "enum_NEXT_SYNTAX"], [114, 98, 10, "enum_LAST_LEXICAL_USE"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [120, 107, 10, "enum_LAST_LEXICAL_USE"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [122, 114, 10, "enum_LAST_LEXICAL_USE"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [126, 102, 10, "enum_LAST_LEXICAL_USE"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [131, 120, 10, "enum_LAST_LEXICAL_USE"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 138, 9, "enum_NEXT_SYNTAX"], [139, 76, 10, "enum_LAST_LEXICAL_USE"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [145, 126, 10, "enum_LAST_LEXICAL_USE"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [147, 122, 10, "enum_LAST_LEXICAL_USE"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [160, 131, 10, "enum_LAST_LEXICAL_USE"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [162, 91, 10, "enum_LAST_LEXICAL_USE"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 168, 9, "enum_NEXT_SYNTAX"], [169, 139, 10, "enum_LAST_LEXICAL_USE"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [175, 160, 10, "enum_LAST_LEXICAL_USE"], [174, 175, 9, "enum_NEXT_SYNTAX"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 178, 9, "enum_NEXT_SYNTAX"], [179, 147, 10, "enum_LAST_LEXICAL_USE"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 185, 9, "enum_NEXT_SYNTAX"], [186, 57, 10, "enum_LAST_LEXICAL_USE"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [187, 188, 9, "enum_NEXT_SYNTAX"], [189, 34, 10, "enum_LAST_LEXICAL_USE"], [188, 189, 9, "enum_NEXT_SYNTAX"], [189, 190, 9, "enum_NEXT_SYNTAX"], [191, 36, 10, "enum_LAST_LEXICAL_USE"], [190, 191, 9, "enum_NEXT_SYNTAX"], [191, 192, 9, "enum_NEXT_SYNTAX"], [192, 193, 9, "enum_NEXT_SYNTAX"], [194, 189, 10, "enum_LAST_LEXICAL_USE"], [193, 194, 9, "enum_NEXT_SYNTAX"], [194, 195, 9, "enum_NEXT_SYNTAX"], [196, 191, 10, "enum_LAST_LEXICAL_USE"], [195, 196, 9, "enum_NEXT_SYNTAX"], [196, 197, 9, "enum_NEXT_SYNTAX"], [197, 198, 9, "enum_NEXT_SYNTAX"], [199, 186, 10, "enum_LAST_LEXICAL_USE"], [198, 199, 9, "enum_NEXT_SYNTAX"], [199, 200, 9, "enum_NEXT_SYNTAX"], [200, 201, 9, "enum_NEXT_SYNTAX"], [201, 202, 9, "enum_NEXT_SYNTAX"], [202, 203, 9, "enum_NEXT_SYNTAX"], [203, 204, 9, "enum_NEXT_SYNTAX"], [204, 205, 9, "enum_NEXT_SYNTAX"], [206, 194, 10, "enum_LAST_LEXICAL_USE"], [205, 206, 9, "enum_NEXT_SYNTAX"], [206, 207, 9, "enum_NEXT_SYNTAX"], [208, 175, 10, "enum_LAST_LEXICAL_USE"], [207, 208, 9, "enum_NEXT_SYNTAX"], [208, 209, 9, "enum_NEXT_SYNTAX"], [209, 210, 9, "enum_NEXT_SYNTAX"], [210, 211, 9, "enum_NEXT_SYNTAX"], [211, 212, 9, "enum_NEXT_SYNTAX"], [212, 213, 9, "enum_NEXT_SYNTAX"], [213, 214, 9, "enum_NEXT_SYNTAX"], [214, 215, 9, "enum_NEXT_SYNTAX"], [215, 216, 9, "enum_NEXT_SYNTAX"], [216, 219, 9, "enum_NEXT_SYNTAX"], [219, 220, 9, "enum_NEXT_SYNTAX"], [220, 222, 9, "enum_NEXT_SYNTAX"], [223, 208, 10, "enum_LAST_LEXICAL_USE"], [222, 223, 9, "enum_NEXT_SYNTAX"], [223, 224, 9, "enum_NEXT_SYNTAX"], [225, 162, 10, "enum_LAST_LEXICAL_USE"], [224, 225, 9, "enum_NEXT_SYNTAX"], [225, 227, 9, "enum_NEXT_SYNTAX"], [227, 228, 9, "enum_NEXT_SYNTAX"], [228, 229, 9, "enum_NEXT_SYNTAX"], [230, 223, 10, "enum_LAST_LEXICAL_USE"], [229, 230, 9, "enum_NEXT_SYNTAX"], [230, 231, 9, "enum_NEXT_SYNTAX"], [231, 232, 9, "enum_NEXT_SYNTAX"], [233, 199, 10, "enum_LAST_LEXICAL_USE"], [232, 233, 9, "enum_NEXT_SYNTAX"], [233, 234, 9, "enum_NEXT_SYNTAX"], [234, 235, 9, "enum_NEXT_SYNTAX"], [236, 228, 10, "enum_LAST_LEXICAL_USE"], [235, 236, 9, "enum_NEXT_SYNTAX"], [236, 237, 9, "enum_NEXT_SYNTAX"], [237, 238, 9, "enum_NEXT_SYNTAX"], [238, 239, 9, "enum_NEXT_SYNTAX"], [239, 240, 9, "enum_NEXT_SYNTAX"], [240, 242, 9, "enum_NEXT_SYNTAX"], [243, 236, 10, "enum_LAST_LEXICAL_USE"], [242, 243, 9, "enum_NEXT_SYNTAX"], [3, 10, 1, "enum_CFG_NEXT"], [10, 12, 1, "enum_CFG_NEXT"], [12, 50, 1, "enum_CFG_NEXT"], [50, 54, 1, "enum_CFG_NEXT"], [50, 222, 1, "enum_CFG_NEXT"], [54, 69, 1, "enum_CFG_NEXT"], [69, 81, 1, "enum_CFG_NEXT"], [69, 75, 1, "enum_CFG_NEXT"], [81, 95, 1, "enum_CFG_NEXT"], [95, 108, 1, "enum_CFG_NEXT"], [108, 157, 1, "enum_CFG_NEXT"], [108, 113, 1, "enum_CFG_NEXT"], [113, 119, 1, "enum_CFG_NEXT"], [119, 132, 1, "enum_CFG_NEXT"], [132, 157, 1, "enum_CFG_NEXT"], [132, 138, 1, "enum_CFG_NEXT"], [157, 185, 1, "enum_CFG_NEXT"], [157, 168, 1, "enum_CFG_NEXT"], [185, 227, 1, "enum_CFG_NEXT"], [222, 227, 1, "enum_CFG_NEXT"], [227, 235, 1, "enum_CFG_NEXT"], [235, 242, 1, "enum_CFG_NEXT"], [19, 2, 3, "enum_LAST_WRITE"], [27, 25, 2, "enum_LAST_READ"], [34, 27, 2, "enum_LAST_READ"], [36, 30, 2, "enum_LAST_READ"], [41, 4, 3, "enum_LAST_WRITE"], [43, 6, 3, "enum_LAST_WRITE"], [49, 19, 2, "enum_LAST_READ"], [49, 2, 3, "enum_LAST_WRITE"], [57, 13, 3, "enum_LAST_WRITE"], [61, 49, 2, "enum_LAST_READ"], [61, 2, 3, "enum_LAST_WRITE"], [68, 55, 3, "enum_LAST_WRITE"], [87, 61, 2, "enum_LAST_READ"], [87, 2, 3, "enum_LAST_WRITE"], [85, 87, 2, "enum_LAST_READ"], [85, 2, 3, "enum_LAST_WRITE"], [91, 85, 2, "enum_LAST_READ"], [91, 2, 3, "enum_LAST_WRITE"], [98, 82, 3, "enum_LAST_WRITE"], [102, 68, 2, "enum_LAST_READ"], [102, 55, 3, "enum_LAST_WRITE"], [107, 96, 3, "enum_LAST_WRITE"], [114, 98, 2, "enum_LAST_READ"], [114, 82, 3, "enum_LAST_WRITE"], [122, 114, 2, "enum_LAST_READ"], [122, 82, 3, "enum_LAST_WRITE"], [126, 102, 2, "enum_LAST_READ"], [126, 55, 3, "enum_LAST_WRITE"], [120, 107, 2, "enum_LAST_READ"], [120, 96, 3, "enum_LAST_WRITE"], [131, 107, 2, "enum_LAST_READ"], [131, 120, 3, "enum_LAST_WRITE"], [145, 126, 2, "enum_LAST_READ"], [145, 55, 3, "enum_LAST_WRITE"], [147, 122, 2, "enum_LAST_READ"], [147, 82, 3, "enum_LAST_WRITE"], [160, 107, 2, "enum_LAST_READ"], [160, 131, 2, "enum_LAST_READ"], [160, 120, 3, "enum_LAST_WRITE"], [160, 96, 3, "enum_LAST_WRITE"], [162, 91, 2, "enum_LAST_READ"], [162, 2, 3, "enum_LAST_WRITE"], [175, 160, 2, "enum_LAST_READ"], [175, 120, 3, "enum_LAST_WRITE"], [175, 96, 3, "enum_LAST_WRITE"], [179, 122, 2, "enum_LAST_READ"], [179, 98, 2, "enum_LAST_READ"], [179, 82, 3, "enum_LAST_WRITE"], [189, 27, 2, "enum_LAST_READ"], [189, 34, 3, "enum_LAST_WRITE"], [191, 30, 2, "enum_LAST_READ"], [191, 36, 3, "enum_LAST_WRITE"], [194, 189, 2, "enum_LAST_READ"], [194, 34, 3, "enum_LAST_WRITE"], [196, 191, 2, "enum_LAST_READ"], [196, 36, 3, "enum_LAST_WRITE"], [199, 57, 2, "enum_LAST_READ"], [199, 13, 3, "enum_LAST_WRITE"], [206, 189, 2, "enum_LAST_READ"], [206, 194, 3, "enum_LAST_WRITE"], [208, 160, 2, "enum_LAST_READ"], [208, 120, 3, "enum_LAST_WRITE"], [208, 96, 3, "enum_LAST_WRITE"], [186, 199, 2, "enum_LAST_READ"], [186, 13, 3, "enum_LAST_WRITE"], [225, 49, 2, "enum_LAST_READ"], [225, 2, 3, "enum_LAST_WRITE"], [230, 208, 2, "enum_LAST_READ"], [230, 223, 3, "enum_LAST_WRITE"], [230, 120, 3, "enum_LAST_WRITE"], [230, 96, 3, "enum_LAST_WRITE"], [233, 199, 2, "enum_LAST_READ"], [233, 13, 3, "enum_LAST_WRITE"], [233, 186, 3, "enum_LAST_WRITE"], [236, 228, 3, "enum_LAST_WRITE"], [243, 236, 2, "enum_LAST_READ"], [243, 228, 3, "enum_LAST_WRITE"], [13, 15, 4, "enum_COMPUTED_FROM"], [13, 30, 4, "enum_COMPUTED_FROM"], [13, 25, 4, "enum_COMPUTED_FROM"], [13, 27, 4, "enum_COMPUTED_FROM"], [13, 34, 4, "enum_COMPUTED_FROM"], [13, 36, 4, "enum_COMPUTED_FROM"], [13, 39, 4, "enum_COMPUTED_FROM"], [13, 41, 4, "enum_COMPUTED_FROM"], [13, 43, 4, "enum_COMPUTED_FROM"], [13, 19, 4, "enum_COMPUTED_FROM"], [228, 230, 4, "enum_COMPUTED_FROM"], [228, 233, 4, "enum_COMPUTED_FROM"], [55, 57, 4, "enum_COMPUTED_FROM"], [55, 61, 4, "enum_COMPUTED_FROM"], [82, 85, 4, "enum_COMPUTED_FROM"], [82, 87, 4, "enum_COMPUTED_FROM"], [82, 91, 4, "enum_COMPUTED_FROM"], [96, 102, 4, "enum_COMPUTED_FROM"], [96, 98, 4, "enum_COMPUTED_FROM"], [186, 189, 4, "enum_COMPUTED_FROM"], [186, 191, 4, "enum_COMPUTED_FROM"], [186, 194, 4, "enum_COMPUTED_FROM"], [186, 196, 4, "enum_COMPUTED_FROM"], [186, 206, 4, "enum_COMPUTED_FROM"], [186, 199, 4, "enum_COMPUTED_FROM"], [186, 208, 4, "enum_COMPUTED_FROM"], [223, 225, 4, "enum_COMPUTED_FROM"], [120, 126, 4, "enum_COMPUTED_FROM"], [120, 122, 4, "enum_COMPUTED_FROM"]], "error_location": 179, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/YugaByte/cassandra-python-driver.git", "old_path": "cqlengine/models.py", "hash": "5dc9e971267c2072c60ae9271c6e230813f72e15", "code": "def _construct_instance(cls, names: List[str], values: List[Any]) -> 'BaseModel':\n    \"\"\"\n    method used to construct instances from query results\n    this is where polymorphic deserialization occurs\n    \"\"\"\n    field_dict: Dict[str, Any] = dict((cls._db_map.get(k, k), v) for k, v in zip(names, values))\n    if cls._is_polymorphic:\n        poly_key: Any = field_dict.get(cls._polymorphic_column_name)\n\n        if poly_key is None:\n            raise PolyMorphicModelException('polymorphic key was not found in values')\n\n        poly_base: Type[BaseModel] = cls if cls._is_polymorphic_base else cls._polymorphic_base\n\n        klass: Optional[Type[BaseModel]] = poly_base._get_model_by_polymorphic_key(poly_key)\n        if klass is None:\n            poly_base._discover_polymorphic_submodels()\n            klass = poly_base._get_model_by_polymorphic_key(poly_key)\n            if klass is None:\n                raise PolyMorphicModelException(\n                    'unrecognized polymorphic key {} for class {}'.format(poly_key, poly_base.__name__)\n                )\n\n        if not issubclass(klass, cls):\n            raise PolyMorphicModelException(\n                '{} is not a subclass of {}'.format(klass.__name__, poly_base.__name__)\n            )\n\n        field_dict = {k: v for k, v in field_dict.items() if k in klass._columns.keys()}\n\n    else:\n        klass = cls\n\n    instance: BaseModel = klass(**field_dict)\n    instance._is_persisted = True\n    return instance\n", "rewrite": "ReplaceText(target='cls' @(235,72)->(235,81))", "error_line": 25, "has_bug": true, "code_full": "from typing import Any, Dict, List, Optional, Type\n\n\nclass PolyMorphicModelException(Exception):\n    pass\n\n\nclass BaseModel:\n    _db_map: Dict[str, str]\n    _columns: Dict[str, Any]\n    _is_polymorphic: bool\n    _is_polymorphic_base: bool\n    _polymorphic_column_name: str\n    _polymorphic_base: Type['BaseModel']\n    _is_persisted: bool\n\n    @classmethod\n    def _get_model_by_polymorphic_key(cls, key: str) -> Optional[Type['BaseModel']]:\n        return cls._polymorphic_base\n    \n    @classmethod\n    def _discover_polymorphic_submodels(cls):\n        pass\n\n\n    @classmethod\n    def _construct_instance(cls, names: List[str], values: List[Any]) -> 'BaseModel':\n        \"\"\"\n        method used to construct instances from query results\n        this is where polymorphic deserialization occurs\n        \"\"\"\n        field_dict: Dict[str, Any] = dict((cls._db_map.get(k, k), v) for k, v in zip(names, values))\n        if cls._is_polymorphic:\n            poly_key: Any = field_dict.get(cls._polymorphic_column_name)\n\n            if poly_key is None:\n                raise PolyMorphicModelException('polymorphic key was not found in values')\n\n            poly_base: Type[BaseModel] = cls if cls._is_polymorphic_base else cls._polymorphic_base\n\n            klass: Optional[Type[BaseModel]] = poly_base._get_model_by_polymorphic_key(poly_key)\n            if klass is None:\n                poly_base._discover_polymorphic_submodels()\n                klass = poly_base._get_model_by_polymorphic_key(poly_key)\n                if klass is None:\n                    raise PolyMorphicModelException(\n                        'unrecognized polymorphic key {} for class {}'.format(poly_key, poly_base.__name__)\n                    )\n\n            if not issubclass(klass, cls):\n                raise PolyMorphicModelException(\n                    '{} is not a subclass of {}'.format(klass.__name__, poly_base.__name__)\n                )\n\n            field_dict = {k: v for k, v in field_dict.items() if k in klass._columns.keys()}\n\n        else:\n            klass = cls\n\n        instance: BaseModel = klass(**field_dict)\n        instance._is_persisted = True\n        return instance\n", "error_location_char": [1217, 1226], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def plot_overlay(", "fixed_image", ",", "moving_image", ",", "transform", ",", "downsample", "=", "True", ",", "downsample_target", "=", "5", ",", "continuous_update", "=", "False", ",", "img", "=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "rotated_image", "=", "sitk", ".", "Resample", "(", "moving_image", ",", "fixed_image", ",", "transform", ",", "sitk", ".", "sitkLinear", ",", "0.0", ",", "moving_image", ".", "GetPixelIDValue", "(", ")", ")", "#NEWLINE#", "meta", ".", "copy_relevant_metadata", "(", "rotated_image", ",", "moving_image", ")", "#NEWLINE#", "if", "downsample", ":", "#NEWLINE#", "#INDENT#", "fixed_shrunk", "=", "trans", ".", "resize_image", "(", "fixed_image", ",", "fixed_image", ".", "GetSpacing", "(", ")", "[", "0", "]", ",", "downsample_target", ")", "#NEWLINE#", "rotated_shrunk", "=", "trans", ".", "resize_image", "(", "rotated_image", ",", "moving_image", ".", "GetSpacing", "(", ")", "[", "0", "]", ",", "downsample_target", ")", "#NEWLINE#", "spacing", "=", "fixed_shrunk", ".", "GetSpacing", "(", ")", "#NEWLINE#", "overlay_array", "=", "overlay_images", "(", "fixed_shrunk", ",", "rotated_shrunk", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "spacing", "=", "fixed_image", ".", "GetSpacing", "(", ")", "#NEWLINE#", "overlay_array", "=", "overlay_images", "(", "fixed_image", ",", "rotated_image", ")", "#NEWLINE#", "#UNINDENT#", "shape", "=", "np", ".", "shape", "(", "overlay_array", ")", "#NEWLINE#", "extent", "=", "[", "0", ",", "(", "shape", "[", "1", "]", "*", "spacing", "[", "1", "]", ")", ",", "(", "shape", "[", "0", "]", "*", "spacing", "[", "0", "]", ")", ",", "0", "]", "#NEWLINE#", "if", "(", "img", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "(", "fig", ",", "ax", ")", "=", "plt", ".", "subplots", "(", ")", "#NEWLINE#", "ax", ".", "imshow", "(", "overlay_array", ",", "extent", "=", "extent", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "fig", "=", "plt", ".", "gcf", "(", ")", "#NEWLINE#", "img", ".", "set_data", "(", "overlay_array", ")", "#NEWLINE#", "img", ".", "set_extent", "(", "extent", ")", "#NEWLINE#", "#UNINDENT#", "if", "continuous_update", ":", "#NEWLINE#", "#INDENT#", "fig", ".", "canvas", ".", "draw", "(", ")", "#NEWLINE#", "fig", ".", "canvas", ".", "flush_events", "(", ")", "#NEWLINE#", "plt", ".", "pause", "(", "0.01", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "plt", ".", "show", "(", ")"], "edges": [[1, 11, 7, "enum_FIELD"], [26, 38, 7, "enum_FIELD"], [51, 57, 7, "enum_FIELD"], [63, 62, 7, "enum_FIELD"], [145, 151, 7, "enum_FIELD"], [154, 171, 7, "enum_FIELD"], [193, 190, 7, "enum_FIELD"], [249, 248, 7, "enum_FIELD"], [38, 30, 7, "enum_FIELD"], [57, 53, 7, "enum_FIELD"], [65, 73, 7, "enum_FIELD"], [85, 93, 7, "enum_FIELD"], [105, 111, 7, "enum_FIELD"], [113, 119, 7, "enum_FIELD"], [127, 133, 7, "enum_FIELD"], [135, 141, 7, "enum_FIELD"], [151, 149, 7, "enum_FIELD"], [190, 189, 7, "enum_FIELD"], [195, 205, 7, "enum_FIELD"], [207, 213, 7, "enum_FIELD"], [223, 229, 7, "enum_FIELD"], [231, 235, 7, "enum_FIELD"], [238, 242, 7, "enum_FIELD"], [251, 257, 7, "enum_FIELD"], [259, 265, 7, "enum_FIELD"], [267, 271, 7, "enum_FIELD"], [279, 283, 7, "enum_FIELD"], [30, 29, 7, "enum_FIELD"], [40, 39, 7, "enum_FIELD"], [48, 46, 7, "enum_FIELD"], [53, 52, 7, "enum_FIELD"], [73, 69, 7, "enum_FIELD"], [93, 89, 7, "enum_FIELD"], [111, 109, 7, "enum_FIELD"], [119, 116, 7, "enum_FIELD"], [133, 131, 7, "enum_FIELD"], [141, 138, 7, "enum_FIELD"], [149, 148, 7, "enum_FIELD"], [165, 162, 7, "enum_FIELD"], [165, 167, 7, "enum_FIELD"], [177, 174, 7, "enum_FIELD"], [177, 179, 7, "enum_FIELD"], [205, 203, 7, "enum_FIELD"], [213, 209, 7, "enum_FIELD"], [229, 227, 7, "enum_FIELD"], [235, 233, 7, "enum_FIELD"], [242, 240, 7, "enum_FIELD"], [257, 255, 7, "enum_FIELD"], [265, 263, 7, "enum_FIELD"], [271, 269, 7, "enum_FIELD"], [283, 281, 7, "enum_FIELD"], [46, 45, 7, "enum_FIELD"], [69, 68, 7, "enum_FIELD"], [79, 77, 7, "enum_FIELD"], [79, 80, 7, "enum_FIELD"], [89, 88, 7, "enum_FIELD"], [99, 97, 7, "enum_FIELD"], [99, 100, 7, "enum_FIELD"], [109, 108, 7, "enum_FIELD"], [131, 130, 7, "enum_FIELD"], [162, 161, 7, "enum_FIELD"], [162, 163, 7, "enum_FIELD"], [167, 166, 7, "enum_FIELD"], [167, 168, 7, "enum_FIELD"], [174, 173, 7, "enum_FIELD"], [174, 175, 7, "enum_FIELD"], [179, 178, 7, "enum_FIELD"], [179, 180, 7, "enum_FIELD"], [203, 202, 7, "enum_FIELD"], [209, 208, 7, "enum_FIELD"], [214, 216, 7, "enum_FIELD"], [227, 226, 7, "enum_FIELD"], [233, 232, 7, "enum_FIELD"], [240, 239, 7, "enum_FIELD"], [255, 253, 7, "enum_FIELD"], [263, 261, 7, "enum_FIELD"], [269, 268, 7, "enum_FIELD"], [281, 280, 7, "enum_FIELD"], [77, 75, 7, "enum_FIELD"], [97, 95, 7, "enum_FIELD"], [253, 252, 7, "enum_FIELD"], [261, 260, 7, "enum_FIELD"], [75, 74, 7, "enum_FIELD"], [95, 94, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [33, 4, 10, "enum_LAST_LEXICAL_USE"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [35, 2, 10, "enum_LAST_LEXICAL_USE"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [37, 6, 10, "enum_LAST_LEXICAL_USE"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [39, 29, 10, "enum_LAST_LEXICAL_USE"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [45, 33, 10, "enum_LAST_LEXICAL_USE"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [56, 27, 10, "enum_LAST_LEXICAL_USE"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [58, 45, 10, "enum_LAST_LEXICAL_USE"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 61, 9, "enum_NEXT_SYNTAX"], [62, 8, 10, "enum_LAST_LEXICAL_USE"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [72, 35, 10, "enum_LAST_LEXICAL_USE"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [74, 72, 10, "enum_LAST_LEXICAL_USE"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [83, 12, 10, "enum_LAST_LEXICAL_USE"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [88, 68, 10, "enum_LAST_LEXICAL_USE"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [92, 56, 10, "enum_LAST_LEXICAL_USE"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [94, 58, 10, "enum_LAST_LEXICAL_USE"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [103, 83, 10, "enum_LAST_LEXICAL_USE"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [108, 66, 10, "enum_LAST_LEXICAL_USE"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [118, 108, 10, "enum_LAST_LEXICAL_USE"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [120, 86, 10, "enum_LAST_LEXICAL_USE"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 127, 9, "enum_NEXT_SYNTAX"], [128, 106, 10, "enum_LAST_LEXICAL_USE"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [130, 74, 10, "enum_LAST_LEXICAL_USE"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [136, 114, 10, "enum_LAST_LEXICAL_USE"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [138, 116, 10, "enum_LAST_LEXICAL_USE"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [140, 130, 10, "enum_LAST_LEXICAL_USE"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [142, 92, 10, "enum_LAST_LEXICAL_USE"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [152, 136, 10, "enum_LAST_LEXICAL_USE"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [161, 146, 10, "enum_LAST_LEXICAL_USE"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [166, 128, 10, "enum_LAST_LEXICAL_USE"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [173, 161, 10, "enum_LAST_LEXICAL_USE"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [178, 166, 10, "enum_LAST_LEXICAL_USE"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 184, 9, "enum_NEXT_SYNTAX"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 187, 9, "enum_NEXT_SYNTAX"], [187, 188, 9, "enum_NEXT_SYNTAX"], [189, 20, 10, "enum_LAST_LEXICAL_USE"], [188, 189, 9, "enum_NEXT_SYNTAX"], [189, 190, 9, "enum_NEXT_SYNTAX"], [190, 191, 9, "enum_NEXT_SYNTAX"], [191, 192, 9, "enum_NEXT_SYNTAX"], [192, 193, 9, "enum_NEXT_SYNTAX"], [193, 195, 9, "enum_NEXT_SYNTAX"], [195, 196, 9, "enum_NEXT_SYNTAX"], [196, 197, 9, "enum_NEXT_SYNTAX"], [197, 198, 9, "enum_NEXT_SYNTAX"], [198, 199, 9, "enum_NEXT_SYNTAX"], [199, 200, 9, "enum_NEXT_SYNTAX"], [200, 201, 9, "enum_NEXT_SYNTAX"], [201, 202, 9, "enum_NEXT_SYNTAX"], [202, 203, 9, "enum_NEXT_SYNTAX"], [203, 204, 9, "enum_NEXT_SYNTAX"], [204, 205, 9, "enum_NEXT_SYNTAX"], [205, 206, 9, "enum_NEXT_SYNTAX"], [206, 207, 9, "enum_NEXT_SYNTAX"], [208, 199, 10, "enum_LAST_LEXICAL_USE"], [207, 208, 9, "enum_NEXT_SYNTAX"], [208, 209, 9, "enum_NEXT_SYNTAX"], [209, 210, 9, "enum_NEXT_SYNTAX"], [210, 211, 9, "enum_NEXT_SYNTAX"], [212, 152, 10, "enum_LAST_LEXICAL_USE"], [211, 212, 9, "enum_NEXT_SYNTAX"], [212, 213, 9, "enum_NEXT_SYNTAX"], [213, 214, 9, "enum_NEXT_SYNTAX"], [214, 215, 9, "enum_NEXT_SYNTAX"], [216, 155, 10, "enum_LAST_LEXICAL_USE"], [215, 216, 9, "enum_NEXT_SYNTAX"], [216, 217, 9, "enum_NEXT_SYNTAX"], [217, 220, 9, "enum_NEXT_SYNTAX"], [220, 221, 9, "enum_NEXT_SYNTAX"], [221, 223, 9, "enum_NEXT_SYNTAX"], [224, 197, 10, "enum_LAST_LEXICAL_USE"], [223, 224, 9, "enum_NEXT_SYNTAX"], [224, 225, 9, "enum_NEXT_SYNTAX"], [226, 202, 10, "enum_LAST_LEXICAL_USE"], [225, 226, 9, "enum_NEXT_SYNTAX"], [226, 227, 9, "enum_NEXT_SYNTAX"], [227, 228, 9, "enum_NEXT_SYNTAX"], [228, 229, 9, "enum_NEXT_SYNTAX"], [229, 230, 9, "enum_NEXT_SYNTAX"], [230, 231, 9, "enum_NEXT_SYNTAX"], [232, 189, 10, "enum_LAST_LEXICAL_USE"], [231, 232, 9, "enum_NEXT_SYNTAX"], [232, 233, 9, "enum_NEXT_SYNTAX"], [233, 234, 9, "enum_NEXT_SYNTAX"], [234, 235, 9, "enum_NEXT_SYNTAX"], [236, 212, 10, "enum_LAST_LEXICAL_USE"], [235, 236, 9, "enum_NEXT_SYNTAX"], [236, 237, 9, "enum_NEXT_SYNTAX"], [237, 238, 9, "enum_NEXT_SYNTAX"], [239, 232, 10, "enum_LAST_LEXICAL_USE"], [238, 239, 9, "enum_NEXT_SYNTAX"], [239, 240, 9, "enum_NEXT_SYNTAX"], [240, 241, 9, "enum_NEXT_SYNTAX"], [241, 242, 9, "enum_NEXT_SYNTAX"], [243, 216, 10, "enum_LAST_LEXICAL_USE"], [242, 243, 9, "enum_NEXT_SYNTAX"], [243, 244, 9, "enum_NEXT_SYNTAX"], [244, 247, 9, "enum_NEXT_SYNTAX"], [248, 16, 10, "enum_LAST_LEXICAL_USE"], [247, 248, 9, "enum_NEXT_SYNTAX"], [248, 249, 9, "enum_NEXT_SYNTAX"], [249, 251, 9, "enum_NEXT_SYNTAX"], [252, 224, 10, "enum_LAST_LEXICAL_USE"], [251, 252, 9, "enum_NEXT_SYNTAX"], [252, 253, 9, "enum_NEXT_SYNTAX"], [253, 254, 9, "enum_NEXT_SYNTAX"], [254, 255, 9, "enum_NEXT_SYNTAX"], [255, 256, 9, "enum_NEXT_SYNTAX"], [256, 257, 9, "enum_NEXT_SYNTAX"], [257, 258, 9, "enum_NEXT_SYNTAX"], [258, 259, 9, "enum_NEXT_SYNTAX"], [260, 252, 10, "enum_LAST_LEXICAL_USE"], [259, 260, 9, "enum_NEXT_SYNTAX"], [260, 261, 9, "enum_NEXT_SYNTAX"], [261, 262, 9, "enum_NEXT_SYNTAX"], [262, 263, 9, "enum_NEXT_SYNTAX"], [263, 264, 9, "enum_NEXT_SYNTAX"], [264, 265, 9, "enum_NEXT_SYNTAX"], [265, 266, 9, "enum_NEXT_SYNTAX"], [266, 267, 9, "enum_NEXT_SYNTAX"], [268, 226, 10, "enum_LAST_LEXICAL_USE"], [267, 268, 9, "enum_NEXT_SYNTAX"], [268, 269, 9, "enum_NEXT_SYNTAX"], [269, 270, 9, "enum_NEXT_SYNTAX"], [270, 271, 9, "enum_NEXT_SYNTAX"], [271, 272, 9, "enum_NEXT_SYNTAX"], [272, 273, 9, "enum_NEXT_SYNTAX"], [273, 276, 9, "enum_NEXT_SYNTAX"], [276, 277, 9, "enum_NEXT_SYNTAX"], [277, 279, 9, "enum_NEXT_SYNTAX"], [280, 268, 10, "enum_LAST_LEXICAL_USE"], [279, 280, 9, "enum_NEXT_SYNTAX"], [280, 281, 9, "enum_NEXT_SYNTAX"], [281, 282, 9, "enum_NEXT_SYNTAX"], [282, 283, 9, "enum_NEXT_SYNTAX"], [283, 284, 9, "enum_NEXT_SYNTAX"], [10, 14, 1, "enum_CFG_NEXT"], [14, 18, 1, "enum_CFG_NEXT"], [18, 22, 1, "enum_CFG_NEXT"], [22, 1, 1, "enum_CFG_NEXT"], [11, 26, 1, "enum_CFG_NEXT"], [26, 51, 1, "enum_CFG_NEXT"], [51, 62, 1, "enum_CFG_NEXT"], [62, 65, 1, "enum_CFG_NEXT"], [62, 127, 1, "enum_CFG_NEXT"], [65, 85, 1, "enum_CFG_NEXT"], [85, 105, 1, "enum_CFG_NEXT"], [105, 113, 1, "enum_CFG_NEXT"], [113, 145, 1, "enum_CFG_NEXT"], [127, 135, 1, "enum_CFG_NEXT"], [135, 145, 1, "enum_CFG_NEXT"], [145, 154, 1, "enum_CFG_NEXT"], [154, 190, 1, "enum_CFG_NEXT"], [190, 223, 1, "enum_CFG_NEXT"], [190, 195, 1, "enum_CFG_NEXT"], [195, 207, 1, "enum_CFG_NEXT"], [207, 248, 1, "enum_CFG_NEXT"], [223, 231, 1, "enum_CFG_NEXT"], [231, 238, 1, "enum_CFG_NEXT"], [238, 248, 1, "enum_CFG_NEXT"], [248, 251, 1, "enum_CFG_NEXT"], [248, 279, 1, "enum_CFG_NEXT"], [251, 259, 1, "enum_CFG_NEXT"], [259, 267, 1, "enum_CFG_NEXT"], [33, 4, 3, "enum_LAST_WRITE"], [35, 2, 3, "enum_LAST_WRITE"], [37, 6, 3, "enum_LAST_WRITE"], [39, 29, 2, "enum_LAST_READ"], [45, 33, 2, "enum_LAST_READ"], [45, 4, 3, "enum_LAST_WRITE"], [56, 27, 3, "enum_LAST_WRITE"], [58, 45, 2, "enum_LAST_READ"], [58, 4, 3, "enum_LAST_WRITE"], [62, 8, 3, "enum_LAST_WRITE"], [72, 35, 2, "enum_LAST_READ"], [72, 2, 3, "enum_LAST_WRITE"], [74, 72, 2, "enum_LAST_READ"], [74, 2, 3, "enum_LAST_WRITE"], [83, 12, 3, "enum_LAST_WRITE"], [88, 68, 2, "enum_LAST_READ"], [92, 56, 2, "enum_LAST_READ"], [92, 27, 3, "enum_LAST_WRITE"], [94, 58, 2, "enum_LAST_READ"], [94, 4, 3, "enum_LAST_WRITE"], [103, 83, 2, "enum_LAST_READ"], [103, 12, 3, "enum_LAST_WRITE"], [108, 66, 3, "enum_LAST_WRITE"], [118, 108, 2, "enum_LAST_READ"], [118, 66, 3, "enum_LAST_WRITE"], [120, 86, 3, "enum_LAST_WRITE"], [130, 35, 2, "enum_LAST_READ"], [130, 2, 3, "enum_LAST_WRITE"], [140, 130, 2, "enum_LAST_READ"], [140, 2, 3, "enum_LAST_WRITE"], [142, 56, 2, "enum_LAST_READ"], [142, 27, 3, "enum_LAST_WRITE"], [152, 136, 3, "enum_LAST_WRITE"], [152, 114, 3, "enum_LAST_WRITE"], [161, 146, 3, "enum_LAST_WRITE"], [166, 128, 3, "enum_LAST_WRITE"], [166, 106, 3, "enum_LAST_WRITE"], [173, 161, 2, "enum_LAST_READ"], [173, 146, 3, "enum_LAST_WRITE"], [178, 166, 2, "enum_LAST_READ"], [178, 128, 3, "enum_LAST_WRITE"], [178, 106, 3, "enum_LAST_WRITE"], [189, 20, 3, "enum_LAST_WRITE"], [208, 199, 3, "enum_LAST_WRITE"], [212, 152, 2, "enum_LAST_READ"], [212, 136, 3, "enum_LAST_WRITE"], [212, 114, 3, "enum_LAST_WRITE"], [216, 155, 3, "enum_LAST_WRITE"], [232, 189, 2, "enum_LAST_READ"], [232, 20, 3, "enum_LAST_WRITE"], [236, 152, 2, "enum_LAST_READ"], [236, 136, 3, "enum_LAST_WRITE"], [236, 114, 3, "enum_LAST_WRITE"], [239, 232, 2, "enum_LAST_READ"], [239, 20, 3, "enum_LAST_WRITE"], [243, 155, 3, "enum_LAST_WRITE"], [248, 16, 3, "enum_LAST_WRITE"], [252, 224, 3, "enum_LAST_WRITE"], [252, 197, 3, "enum_LAST_WRITE"], [260, 252, 2, "enum_LAST_READ"], [260, 224, 3, "enum_LAST_WRITE"], [260, 197, 3, "enum_LAST_WRITE"], [268, 202, 2, "enum_LAST_READ"], [268, 226, 2, "enum_LAST_READ"], [280, 202, 2, "enum_LAST_READ"], [280, 226, 2, "enum_LAST_READ"], [27, 33, 4, "enum_COMPUTED_FROM"], [27, 35, 4, "enum_COMPUTED_FROM"], [27, 37, 4, "enum_COMPUTED_FROM"], [27, 29, 4, "enum_COMPUTED_FROM"], [27, 39, 4, "enum_COMPUTED_FROM"], [27, 45, 4, "enum_COMPUTED_FROM"], [146, 152, 4, "enum_COMPUTED_FROM"], [146, 148, 4, "enum_COMPUTED_FROM"], [155, 161, 4, "enum_COMPUTED_FROM"], [155, 166, 4, "enum_COMPUTED_FROM"], [155, 173, 4, "enum_COMPUTED_FROM"], [155, 178, 4, "enum_COMPUTED_FROM"], [66, 72, 4, "enum_COMPUTED_FROM"], [66, 83, 4, "enum_COMPUTED_FROM"], [66, 68, 4, "enum_COMPUTED_FROM"], [66, 74, 4, "enum_COMPUTED_FROM"], [86, 92, 4, "enum_COMPUTED_FROM"], [86, 103, 4, "enum_COMPUTED_FROM"], [86, 88, 4, "enum_COMPUTED_FROM"], [86, 94, 4, "enum_COMPUTED_FROM"], [106, 108, 4, "enum_COMPUTED_FROM"], [114, 116, 4, "enum_COMPUTED_FROM"], [114, 118, 4, "enum_COMPUTED_FROM"], [114, 120, 4, "enum_COMPUTED_FROM"], [128, 130, 4, "enum_COMPUTED_FROM"], [136, 138, 4, "enum_COMPUTED_FROM"], [136, 140, 4, "enum_COMPUTED_FROM"], [136, 142, 4, "enum_COMPUTED_FROM"], [198, 202, 4, "enum_COMPUTED_FROM"], [224, 226, 4, "enum_COMPUTED_FROM"]], "error_location": 94, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/uw-loci/multiscale.git", "old_path": "multiscale/itk/itk_plotting.py", "hash": "1b703cd8f176c289d52c195094a7f2035ebf0a15", "code": "def plot_overlay(\n    fixed_image: sitk.Image,\n    moving_image: sitk.Image,\n    transform: sitk.Transform,\n    downsample: bool=True,\n    downsample_target: int=5,\n    continuous_update: bool=False,\n    img: Optional[plt.imshow] = None,\n):\n\n    rotated_image = sitk.Resample(\n        moving_image,\n        fixed_image,\n        transform,\n        sitk.sitkLinear,\n        0.0,\n        moving_image.GetPixelIDValue(),\n    )\n    meta.copy_relevant_metadata(rotated_image, moving_image)\n\n    if downsample:\n        fixed_shrunk: sitk.Image = trans.resize_image(\n            fixed_image, fixed_image.GetSpacing()[0], downsample_target\n        )\n        rotated_shrunk: sitk.Image = trans.resize_image(\n            rotated_image, moving_image.GetSpacing()[0], downsample_target\n        )\n        spacing: Tuple[float, float] = fixed_shrunk.GetSpacing()\n\n        overlay_array: np.ndarray = overlay_images(fixed_shrunk, rotated_shrunk)\n    else:\n        spacing = fixed_image.GetSpacing()\n        overlay_array = overlay_images(fixed_image, rotated_image)\n\n    shape = np.shape(overlay_array)\n    extent: list[float] = [0, shape[1] * spacing[1], shape[0] * spacing[0], 0]\n\n    if img is None:\n        fig, ax = plt.subplots()\n        ax.imshow(overlay_array, extent=extent)\n    else:\n        fig = plt.gcf()\n        img.set_data(overlay_array)\n        img.set_extent(extent)\n\n    # todo: print tranform parameters to title?\n\n    if continuous_update:\n        fig.canvas.draw()\n        fig.canvas.flush_events()\n        plt.pause(0.01)\n    else:\n        plt.show()\n", "rewrite": "ReplaceText(target='fixed_image' @(81,67)->(81,79))", "error_line": 9, "has_bug": true, "code_full": "from typing import Any, Optional, Tuple\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\nclass sitk:\n    class Image:\n        def GetSpacing(self) -> Tuple[float, float]:\n            return (1.0, 1.0)\n        \n        def GetPixelIDValue(self) -> int:\n            return 0\n\n    class Resample:\n        def __init__(self, *args, **kwargs):\n            pass\n\n    class Transform:\n        pass\n\n    sitkLinear: Any\n\n\nmeta: Any = None\ntrans: Any = None\n\n\ndef overlay_images(fixed_image: Any, moving_image: Any) -> np.ndarray:\n    return np.zeros((10, 10))\n\n\ndef plot_overlay(\n    fixed_image: sitk.Image,\n    moving_image: sitk.Image,\n    transform: sitk.Transform,\n    downsample: bool=True,\n    downsample_target: int=5,\n    continuous_update: bool=False,\n    img: Optional[plt.imshow] = None,\n):\n\n    rotated_image = sitk.Resample(\n        moving_image,\n        fixed_image,\n        transform,\n        sitk.sitkLinear,\n        0.0,\n        moving_image.GetPixelIDValue(),\n    )\n    meta.copy_relevant_metadata(rotated_image, moving_image)\n\n    if downsample:\n        fixed_shrunk: sitk.Image = trans.resize_image(\n            fixed_image, fixed_image.GetSpacing()[0], downsample_target\n        )\n        rotated_shrunk: sitk.Image = trans.resize_image(\n            rotated_image, moving_image.GetSpacing()[0], downsample_target\n        )\n        spacing: Tuple[float, float] = fixed_shrunk.GetSpacing()\n\n        overlay_array: np.ndarray = overlay_images(fixed_shrunk, rotated_shrunk)\n    else:\n        spacing = fixed_image.GetSpacing()\n        overlay_array = overlay_images(fixed_image, rotated_image)\n\n    shape = np.shape(overlay_array)\n    extent: list[float] = [0, shape[1] * spacing[1], shape[0] * spacing[0], 0]\n\n    if img is None:\n        fig, ax = plt.subplots()\n        ax.imshow(overlay_array, extent=extent)\n    else:\n        fig = plt.gcf()\n        img.set_data(overlay_array)\n        img.set_extent(extent)\n\n    # todo: print tranform parameters to title?\n\n    if continuous_update:\n        fig.canvas.draw()\n        fig.canvas.flush_events()\n        plt.pause(0.01)\n    else:\n        plt.show()\n", "error_location_char": [725, 737], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def chi2(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Return the chi2 of the fit.\\n\\n    :raises NotDefined: exception thrown if fit is not defined.\\n    :return: chi2 (float).\\n    '", "#NEWLINE#", "intersect", "=", "None", "#NEWLINE#", "if", "self", ".", "_fit", ":", "#NEWLINE#", "#INDENT#", "x2", "=", "self", ".", "_fit", ".", "chi2", "(", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "raise", "NotDefined", "(", "'Fit has not been defined'", ")", "#NEWLINE#", "#UNINDENT#", "return", "intersect"], "edges": [[6, 7, 7, "enum_FIELD"], [8, 11, 7, "enum_FIELD"], [17, 15, 7, "enum_FIELD"], [42, 43, 7, "enum_FIELD"], [15, 14, 7, "enum_FIELD"], [19, 27, 7, "enum_FIELD"], [35, 37, 7, "enum_FIELD"], [27, 25, 7, "enum_FIELD"], [37, 36, 7, "enum_FIELD"], [25, 23, 7, "enum_FIELD"], [23, 22, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 13, 9, "enum_NEXT_SYNTAX"], [14, 2, 10, "enum_LAST_LEXICAL_USE"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [22, 14, 10, "enum_LAST_LEXICAL_USE"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 42, 9, "enum_NEXT_SYNTAX"], [43, 9, 10, "enum_LAST_LEXICAL_USE"], [42, 43, 9, "enum_NEXT_SYNTAX"], [6, 8, 1, "enum_CFG_NEXT"], [8, 15, 1, "enum_CFG_NEXT"], [15, 35, 1, "enum_CFG_NEXT"], [15, 19, 1, "enum_CFG_NEXT"], [19, 42, 1, "enum_CFG_NEXT"], [14, 2, 3, "enum_LAST_WRITE"], [22, 14, 2, "enum_LAST_READ"], [22, 2, 3, "enum_LAST_WRITE"], [43, 9, 3, "enum_LAST_WRITE"], [20, 22, 4, "enum_COMPUTED_FROM"]], "error_location": 43, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/PanDAWMS/pilot2.git", "old_path": "pilot/api/analytics.py", "hash": "11ef7369f5f48c183709c3f4143deef9c8d9335a", "code": "def chi2(self) -> float:\n    \"\"\"\n    Return the chi2 of the fit.\n\n    :raises NotDefined: exception thrown if fit is not defined.\n    :return: chi2 (float).\n    \"\"\"\n\n    intersect: Optional[Any] = None\n\n    if self._fit:\n        x2 = self._fit.chi2()\n    else:\n        raise NotDefined('Fit has not been defined')\n\n    return intersect\n", "rewrite": "ReplaceText(target='x2' @(104,15)->(104,24))", "error_line": 15, "has_bug": true, "code_full": "from typing import Any, Optional\n\n\nclass NotDefined(Exception):\n    pass\n\n\nclass Fit:\n    def chi2(self) -> float:\n        # Placeholder implementation\n        return 0.0\n\n\nclass Analytics:\n    _fit: Optional[Fit] = None\n\n    def chi2(self) -> float:\n        \"\"\"\n        Return the chi2 of the fit.\n\n        :raises NotDefined: exception thrown if fit is not defined.\n        :return: chi2 (float).\n        \"\"\"\n\n        intersect: Optional[Any] = None\n\n        if self._fit:\n            x2 = self._fit.chi2()\n        else:\n            raise NotDefined('Fit has not been defined')\n\n        return intersect\n", "error_location_char": [326, 335], "type_checked_pytype": false, "type_error_label": "bad-return-type", "type_checked_mypy": false}
{"source_tokens": ["#NEWLINE#", "def on_canvas_slave__point_pair_selected(", "self", ",", "slave", ",", "data", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "(", "not", "self", ".", "transform_slave", ".", "modify", ")", "or", "(", "not", "self", ".", "canvas_slave", ".", "enabled", ")", ")", ":", "#NEWLINE#", "#INDENT#", "return", "#NEWLINE#", "#UNINDENT#", "start_xy", "=", "[", "getattr", "(", "data", "[", "'start_event'", "]", ",", "k", ")", "for", "k", "in", "'xy'", "]", "#NEWLINE#", "end_xy", "=", "[", "getattr", "(", "data", "[", "'end_event'", "]", ",", "k", ")", "for", "k", "in", "'xy'", "]", "#NEWLINE#", "logger", ".", "debug", "(", "'[View] point pair selected: %s, %s'", ",", "start_xy", ",", "end_xy", ")", "#NEWLINE#", "slave", "=", "self", ".", "canvas_slave", "#NEWLINE#", "frame_point_i", "=", "cv2", ".", "perspectiveTransform", "(", "np", ".", "array", "(", "[", "[", "start_xy", "]", "]", ",", "dtype", "=", "float", ")", ",", "slave", ".", "canvas_to_frame_map", ")", ".", "ravel", "(", ")", "#NEWLINE#", "frame_corner_i", "=", "find_closest", "(", "slave", ".", "df_frame_corners", ",", "frame_point_i", ")", "#NEWLINE#", "canvas_corner_i", "=", "find_closest", "(", "slave", ".", "df_canvas_corners", ",", "end_xy", ")", "#NEWLINE#", "corners_state", "=", "{", "'df_frame_corners'", ":", "self", ".", "canvas_slave", ".", "df_frame_corners", ".", "copy", "(", ")", ",", "'df_canvas_corners'", ":", "self", ".", "canvas_slave", ".", "df_canvas_corners", ".", "copy", "(", ")", "}", "#NEWLINE#", "self", ".", "modify_corners_undo", ".", "append", "(", "corners_state", ")", "#NEWLINE#", "self", ".", "modify_corners_redo", "=", "[", "]", "#NEWLINE#", "slave", ".", "df_frame_corners", ".", "iloc", "[", "frame_corner_i", ".", "name", "]", "=", "frame_point_i", "#NEWLINE#", "slave", ".", "df_canvas_corners", ".", "iloc", "[", "canvas_corner_i", ".", "name", "]", "=", "end_xy", "#NEWLINE#", "slave", ".", "update_transforms", "(", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [11, 21, 7, "enum_FIELD"], [36, 39, 7, "enum_FIELD"], [54, 57, 7, "enum_FIELD"], [72, 78, 7, "enum_FIELD"], [83, 87, 7, "enum_FIELD"], [89, 117, 7, "enum_FIELD"], [119, 127, 7, "enum_FIELD"], [130, 138, 7, "enum_FIELD"], [141, 156, 7, "enum_FIELD"], [169, 175, 7, "enum_FIELD"], [178, 183, 7, "enum_FIELD"], [185, 197, 7, "enum_FIELD"], [198, 210, 7, "enum_FIELD"], [211, 215, 7, "enum_FIELD"], [39, 46, 7, "enum_FIELD"], [57, 64, 7, "enum_FIELD"], [78, 74, 7, "enum_FIELD"], [87, 86, 7, "enum_FIELD"], [117, 115, 7, "enum_FIELD"], [127, 122, 7, "enum_FIELD"], [138, 133, 7, "enum_FIELD"], [175, 173, 7, "enum_FIELD"], [180, 179, 7, "enum_FIELD"], [191, 189, 7, "enum_FIELD"], [191, 193, 7, "enum_FIELD"], [204, 202, 7, "enum_FIELD"], [204, 206, 7, "enum_FIELD"], [215, 213, 7, "enum_FIELD"], [14, 18, 7, "enum_FIELD"], [23, 27, 7, "enum_FIELD"], [46, 40, 7, "enum_FIELD"], [49, 50, 7, "enum_FIELD"], [49, 52, 7, "enum_FIELD"], [64, 58, 7, "enum_FIELD"], [67, 68, 7, "enum_FIELD"], [67, 70, 7, "enum_FIELD"], [74, 73, 7, "enum_FIELD"], [115, 110, 7, "enum_FIELD"], [125, 124, 7, "enum_FIELD"], [136, 135, 7, "enum_FIELD"], [154, 152, 7, "enum_FIELD"], [166, 164, 7, "enum_FIELD"], [173, 171, 7, "enum_FIELD"], [189, 187, 7, "enum_FIELD"], [193, 192, 7, "enum_FIELD"], [202, 200, 7, "enum_FIELD"], [206, 205, 7, "enum_FIELD"], [213, 212, 7, "enum_FIELD"], [18, 16, 7, "enum_FIELD"], [27, 25, 7, "enum_FIELD"], [43, 42, 7, "enum_FIELD"], [43, 44, 7, "enum_FIELD"], [61, 60, 7, "enum_FIELD"], [61, 62, 7, "enum_FIELD"], [110, 93, 7, "enum_FIELD"], [152, 150, 7, "enum_FIELD"], [164, 162, 7, "enum_FIELD"], [171, 170, 7, "enum_FIELD"], [187, 186, 7, "enum_FIELD"], [200, 199, 7, "enum_FIELD"], [16, 15, 7, "enum_FIELD"], [25, 24, 7, "enum_FIELD"], [93, 92, 7, "enum_FIELD"], [105, 97, 7, "enum_FIELD"], [112, 111, 7, "enum_FIELD"], [150, 148, 7, "enum_FIELD"], [162, 160, 7, "enum_FIELD"], [97, 96, 7, "enum_FIELD"], [106, 108, 7, "enum_FIELD"], [148, 147, 7, "enum_FIELD"], [160, 159, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [15, 2, 10, "enum_LAST_LEXICAL_USE"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [24, 15, 10, "enum_LAST_LEXICAL_USE"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 34, 9, "enum_NEXT_SYNTAX"], [34, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [42, 6, 10, "enum_LAST_LEXICAL_USE"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [50, 47, 10, "enum_LAST_LEXICAL_USE"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [58, 40, 10, "enum_LAST_LEXICAL_USE"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [60, 42, 10, "enum_LAST_LEXICAL_USE"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [65, 50, 10, "enum_LAST_LEXICAL_USE"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [68, 65, 10, "enum_LAST_LEXICAL_USE"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [79, 37, 10, "enum_LAST_LEXICAL_USE"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [81, 55, 10, "enum_LAST_LEXICAL_USE"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [84, 4, 10, "enum_LAST_LEXICAL_USE"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [86, 24, 10, "enum_LAST_LEXICAL_USE"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [102, 79, 10, "enum_LAST_LEXICAL_USE"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [111, 84, 10, "enum_LAST_LEXICAL_USE"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [124, 111, 10, "enum_LAST_LEXICAL_USE"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [128, 90, 10, "enum_LAST_LEXICAL_USE"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [133, 122, 10, "enum_LAST_LEXICAL_USE"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [135, 124, 10, "enum_LAST_LEXICAL_USE"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [139, 81, 10, "enum_LAST_LEXICAL_USE"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [147, 86, 10, "enum_LAST_LEXICAL_USE"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [159, 147, 10, "enum_LAST_LEXICAL_USE"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [170, 159, 10, "enum_LAST_LEXICAL_USE"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [176, 142, 10, "enum_LAST_LEXICAL_USE"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 178, 9, "enum_NEXT_SYNTAX"], [179, 170, 10, "enum_LAST_LEXICAL_USE"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 184, 9, "enum_NEXT_SYNTAX"], [184, 185, 9, "enum_NEXT_SYNTAX"], [186, 135, 10, "enum_LAST_LEXICAL_USE"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [187, 188, 9, "enum_NEXT_SYNTAX"], [188, 189, 9, "enum_NEXT_SYNTAX"], [189, 190, 9, "enum_NEXT_SYNTAX"], [190, 191, 9, "enum_NEXT_SYNTAX"], [192, 120, 10, "enum_LAST_LEXICAL_USE"], [191, 192, 9, "enum_NEXT_SYNTAX"], [192, 193, 9, "enum_NEXT_SYNTAX"], [193, 194, 9, "enum_NEXT_SYNTAX"], [194, 195, 9, "enum_NEXT_SYNTAX"], [195, 196, 9, "enum_NEXT_SYNTAX"], [197, 128, 10, "enum_LAST_LEXICAL_USE"], [196, 197, 9, "enum_NEXT_SYNTAX"], [197, 198, 9, "enum_NEXT_SYNTAX"], [199, 186, 10, "enum_LAST_LEXICAL_USE"], [198, 199, 9, "enum_NEXT_SYNTAX"], [199, 200, 9, "enum_NEXT_SYNTAX"], [200, 201, 9, "enum_NEXT_SYNTAX"], [201, 202, 9, "enum_NEXT_SYNTAX"], [202, 203, 9, "enum_NEXT_SYNTAX"], [203, 204, 9, "enum_NEXT_SYNTAX"], [205, 131, 10, "enum_LAST_LEXICAL_USE"], [204, 205, 9, "enum_NEXT_SYNTAX"], [205, 206, 9, "enum_NEXT_SYNTAX"], [206, 207, 9, "enum_NEXT_SYNTAX"], [207, 208, 9, "enum_NEXT_SYNTAX"], [208, 209, 9, "enum_NEXT_SYNTAX"], [210, 139, 10, "enum_LAST_LEXICAL_USE"], [209, 210, 9, "enum_NEXT_SYNTAX"], [210, 211, 9, "enum_NEXT_SYNTAX"], [212, 199, 10, "enum_LAST_LEXICAL_USE"], [211, 212, 9, "enum_NEXT_SYNTAX"], [212, 213, 9, "enum_NEXT_SYNTAX"], [213, 214, 9, "enum_NEXT_SYNTAX"], [214, 215, 9, "enum_NEXT_SYNTAX"], [215, 216, 9, "enum_NEXT_SYNTAX"], [3, 21, 1, "enum_CFG_NEXT"], [21, 36, 1, "enum_CFG_NEXT"], [21, 34, 1, "enum_CFG_NEXT"], [36, 54, 1, "enum_CFG_NEXT"], [54, 72, 1, "enum_CFG_NEXT"], [72, 83, 1, "enum_CFG_NEXT"], [83, 89, 1, "enum_CFG_NEXT"], [89, 119, 1, "enum_CFG_NEXT"], [119, 130, 1, "enum_CFG_NEXT"], [130, 141, 1, "enum_CFG_NEXT"], [141, 169, 1, "enum_CFG_NEXT"], [169, 178, 1, "enum_CFG_NEXT"], [178, 185, 1, "enum_CFG_NEXT"], [185, 198, 1, "enum_CFG_NEXT"], [198, 211, 1, "enum_CFG_NEXT"], [15, 2, 3, "enum_LAST_WRITE"], [24, 15, 2, "enum_LAST_READ"], [24, 2, 3, "enum_LAST_WRITE"], [42, 6, 3, "enum_LAST_WRITE"], [50, 47, 2, "enum_LAST_READ"], [58, 40, 2, "enum_LAST_READ"], [60, 42, 2, "enum_LAST_READ"], [60, 6, 3, "enum_LAST_WRITE"], [65, 47, 2, "enum_LAST_READ"], [65, 50, 3, "enum_LAST_WRITE"], [68, 65, 2, "enum_LAST_READ"], [68, 50, 3, "enum_LAST_WRITE"], [79, 37, 3, "enum_LAST_WRITE"], [81, 55, 3, "enum_LAST_WRITE"], [86, 24, 2, "enum_LAST_READ"], [86, 2, 3, "enum_LAST_WRITE"], [84, 4, 3, "enum_LAST_WRITE"], [102, 79, 2, "enum_LAST_READ"], [102, 37, 3, "enum_LAST_WRITE"], [111, 84, 3, "enum_LAST_WRITE"], [124, 111, 2, "enum_LAST_READ"], [124, 84, 3, "enum_LAST_WRITE"], [128, 90, 3, "enum_LAST_WRITE"], [133, 122, 2, "enum_LAST_READ"], [135, 124, 2, "enum_LAST_READ"], [135, 84, 3, "enum_LAST_WRITE"], [139, 81, 2, "enum_LAST_READ"], [139, 55, 3, "enum_LAST_WRITE"], [147, 86, 2, "enum_LAST_READ"], [147, 2, 3, "enum_LAST_WRITE"], [159, 147, 2, "enum_LAST_READ"], [159, 2, 3, "enum_LAST_WRITE"], [170, 159, 2, "enum_LAST_READ"], [170, 2, 3, "enum_LAST_WRITE"], [176, 142, 3, "enum_LAST_WRITE"], [179, 170, 2, "enum_LAST_READ"], [179, 2, 3, "enum_LAST_WRITE"], [197, 128, 2, "enum_LAST_READ"], [197, 90, 3, "enum_LAST_WRITE"], [186, 135, 2, "enum_LAST_READ"], [186, 84, 3, "enum_LAST_WRITE"], [192, 120, 3, "enum_LAST_WRITE"], [210, 139, 2, "enum_LAST_READ"], [210, 55, 3, "enum_LAST_WRITE"], [199, 186, 2, "enum_LAST_READ"], [199, 84, 3, "enum_LAST_WRITE"], [205, 131, 3, "enum_LAST_WRITE"], [212, 199, 2, "enum_LAST_READ"], [212, 84, 3, "enum_LAST_WRITE"], [37, 40, 4, "enum_COMPUTED_FROM"], [37, 47, 4, "enum_COMPUTED_FROM"], [37, 50, 4, "enum_COMPUTED_FROM"], [37, 42, 4, "enum_COMPUTED_FROM"], [55, 58, 4, "enum_COMPUTED_FROM"], [55, 65, 4, "enum_COMPUTED_FROM"], [55, 68, 4, "enum_COMPUTED_FROM"], [55, 60, 4, "enum_COMPUTED_FROM"], [84, 86, 4, "enum_COMPUTED_FROM"], [90, 92, 4, "enum_COMPUTED_FROM"], [90, 111, 4, "enum_COMPUTED_FROM"], [90, 96, 4, "enum_COMPUTED_FROM"], [90, 108, 4, "enum_COMPUTED_FROM"], [90, 102, 4, "enum_COMPUTED_FROM"], [120, 122, 4, "enum_COMPUTED_FROM"], [120, 128, 4, "enum_COMPUTED_FROM"], [120, 124, 4, "enum_COMPUTED_FROM"], [131, 133, 4, "enum_COMPUTED_FROM"], [131, 139, 4, "enum_COMPUTED_FROM"], [131, 135, 4, "enum_COMPUTED_FROM"], [142, 147, 4, "enum_COMPUTED_FROM"], [142, 159, 4, "enum_COMPUTED_FROM"], [191, 197, 4, "enum_COMPUTED_FROM"], [204, 210, 4, "enum_COMPUTED_FROM"]], "error_location": 139, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/wheeler-microfluidics/dmf-device-ui.git", "old_path": "dmf_device_ui/view.py", "hash": "2443e29f710e516ebb3df7fc56db4f7e56f75893", "code": "def on_canvas_slave__point_pair_selected(self, slave: Any, data: Dict[str, Any]) -> None:\n    if not self.transform_slave.modify or not self.canvas_slave.enabled:\n        return\n    start_xy: List[float] = [getattr(data['start_event'], k) for k in 'xy']\n    end_xy: List[float] = [getattr(data['end_event'], k) for k in 'xy']\n    logger.debug('[View] point pair selected: %s, %s', start_xy, end_xy)\n\n    slave = self.canvas_slave\n    # Map GTK event x/y coordinates to the video frame coordinate space.\n    frame_point_i =         cv2.perspectiveTransform(np.array([[start_xy]], dtype=float),\n                                slave.canvas_to_frame_map).ravel()\n    # Find the closest corner point in the frame to the starting point.\n    frame_corner_i = find_closest(slave.df_frame_corners, frame_point_i)\n    # Find the closest corner point in the canvas to the end point.\n    canvas_corner_i = find_closest(slave.df_canvas_corners, end_xy)\n\n    # Save current state of corners to allow undo.\n    corners_state = {'df_frame_corners':\n                    self.canvas_slave.df_frame_corners.copy(),\n                    'df_canvas_corners':\n                    self.canvas_slave.df_canvas_corners.copy()}\n    self.modify_corners_undo.append(corners_state)\n    # Clear redo queue to start new undo branch.\n    self.modify_corners_redo = []\n\n    # Replace the corresponding corner point coordinates with the\n    # respective new points.\n    slave.df_frame_corners.iloc[frame_corner_i.name] = frame_point_i\n    slave.df_canvas_corners.iloc[canvas_corner_i.name] = end_xy\n    slave.update_transforms()\n", "rewrite": "ReplaceText(target='start_xy' @(457,64)->(457,70))", "error_line": 15, "has_bug": true, "code_full": "import logging\nfrom typing import Any, Dict, List\n\nimport cv2\nimport numpy as np\nimport pandas as pd\n\nlogger = logging.getLogger(__name__)\n\n\ndef find_closest(df: pd.DataFrame, point: List[float]) -> pd.Series:\n    return pd.Series()\n\n\nclass DmfDeviceViewBase:\n    transform_slave: Any\n    canvas_slave: Any\n    modify_corners_redo: List[Any]\n    modify_corners_undo: List[Any]\n    \n    def on_canvas_slave__point_pair_selected(self, slave: Any, data: Dict[str, Any]) -> None:\n        if not self.transform_slave.modify or not self.canvas_slave.enabled:\n            return\n        start_xy: List[float] = [getattr(data['start_event'], k) for k in 'xy']\n        end_xy: List[float] = [getattr(data['end_event'], k) for k in 'xy']\n        logger.debug('[View] point pair selected: %s, %s', start_xy, end_xy)\n\n        slave = self.canvas_slave\n        # Map GTK event x/y coordinates to the video frame coordinate space.\n        frame_point_i =             cv2.perspectiveTransform(np.array([[start_xy]], dtype=float),\n                                    slave.canvas_to_frame_map).ravel()\n        # Find the closest corner point in the frame to the starting point.\n        frame_corner_i = find_closest(slave.df_frame_corners, frame_point_i)\n        # Find the closest corner point in the canvas to the end point.\n        canvas_corner_i = find_closest(slave.df_canvas_corners, end_xy)\n\n        # Save current state of corners to allow undo.\n        corners_state = {'df_frame_corners':\n                        self.canvas_slave.df_frame_corners.copy(),\n                        'df_canvas_corners':\n                        self.canvas_slave.df_canvas_corners.copy()}\n        self.modify_corners_undo.append(corners_state)\n        # Clear redo queue to start new undo branch.\n        self.modify_corners_redo = []\n\n        # Replace the corresponding corner point coordinates with the\n        # respective new points.\n        slave.df_frame_corners.iloc[frame_corner_i.name] = frame_point_i\n        slave.df_canvas_corners.iloc[canvas_corner_i.name] = end_xy\n        slave.update_transforms()\n", "error_location_char": [933, 939], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def measure(", "experiment", ",", "example", ",", "name", ",", "merging", ")", ":", "#NEWLINE#", "#INDENT#", "linnea", ".", "config", ".", "clear_all", "(", ")", "#NEWLINE#", "if", "hasattr", "(", "example", ",", "'init'", ")", ":", "#NEWLINE#", "#INDENT#", "example", ".", "init", "(", ")", "#NEWLINE#", "#UNINDENT#", "graph", "=", "DerivationGraph", "(", "example", ".", "eqns", ")", "#NEWLINE#", "trace", "=", "graph", ".", "derivation", "(", "time_limit", "=", "(", "30", "*", "60", ")", ",", "merging", "=", "merging", ",", "dead_ends", "=", "True", ")", "#NEWLINE#", "df_trace", "=", "pd", ".", "DataFrame", "(", "trace", ",", "columns", "=", "[", "'time'", ",", "'cost'", "]", ")", "#NEWLINE#", "t_start", "=", "time", ".", "perf_counter", "(", ")", "#NEWLINE#", "graph", ".", "write_output", "(", "code", "=", "True", ",", "derivation", "=", "False", ",", "output_name", "=", "name", ",", "experiment_code", "=", "False", ",", "algorithms_limit", "=", "1", ",", "graph", "=", "False", ",", "subdir_name", "=", "'time_generation'", ")", "#NEWLINE#", "t_end", "=", "time", ".", "perf_counter", "(", ")", "#NEWLINE#", "df_code_gen_time", "=", "pd", ".", "DataFrame", "(", "[", "(", "t_end", "-", "t_start", ")", "]", ",", "index", "=", "[", "example", "]", ",", "columns", "=", "[", "'time'", "]", ")", "#NEWLINE#", "if", "merging", ":", "#NEWLINE#", "#INDENT#", "subdir", "=", "'merging'", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "subdir", "=", "'no_merging'", "#NEWLINE#", "#UNINDENT#", "file_path", "=", "os", ".", "path", ".", "join", "(", "linnea", ".", "config", ".", "results_path", ",", "experiment", ",", "'generation'", ",", "subdir", ",", "(", "name", "+", "'_trace.csv'", ")", ")", "#NEWLINE#", "df_trace", ".", "to_csv", "(", "file_path", ")", "#NEWLINE#", "if", "(", "linnea", ".", "config", ".", "verbosity", ">=", "2", ")", ":", "#NEWLINE#", "#INDENT#", "print", "(", "'Generate trace file {}'", ".", "format", "(", "file_path", ")", ")", "#NEWLINE#", "#UNINDENT#", "file_path", "=", "os", ".", "path", ".", "join", "(", "linnea", ".", "config", ".", "results_path", ",", "experiment", ",", "'generation'", ",", "subdir", ",", "(", "name", "+", "'_code_gen_time.csv'", ")", ")", "#NEWLINE#", "df_code_gen_time", ".", "to_csv", "(", "file_path", ")", "#NEWLINE#", "if", "(", "linnea", ".", "config", ".", "verbosity", ">=", "2", ")", ":", "#NEWLINE#", "#INDENT#", "print", "(", "'Generate code gen time file {}'", ".", "format", "(", "file_path", ")", ")", "#NEWLINE#", "#UNINDENT#", "return"], "edges": [[1, 5, 7, "enum_FIELD"], [12, 18, 7, "enum_FIELD"], [21, 25, 7, "enum_FIELD"], [37, 41, 7, "enum_FIELD"], [46, 60, 7, "enum_FIELD"], [69, 77, 7, "enum_FIELD"], [86, 92, 7, "enum_FIELD"], [94, 110, 7, "enum_FIELD"], [127, 133, 7, "enum_FIELD"], [135, 149, 7, "enum_FIELD"], [165, 164, 7, "enum_FIELD"], [181, 197, 7, "enum_FIELD"], [208, 212, 7, "enum_FIELD"], [216, 223, 7, "enum_FIELD"], [239, 255, 7, "enum_FIELD"], [266, 270, 7, "enum_FIELD"], [274, 281, 7, "enum_FIELD"], [18, 16, 7, "enum_FIELD"], [25, 22, 7, "enum_FIELD"], [30, 34, 7, "enum_FIELD"], [41, 40, 7, "enum_FIELD"], [60, 50, 7, "enum_FIELD"], [77, 73, 7, "enum_FIELD"], [92, 90, 7, "enum_FIELD"], [110, 96, 7, "enum_FIELD"], [133, 131, 7, "enum_FIELD"], [149, 139, 7, "enum_FIELD"], [167, 170, 7, "enum_FIELD"], [176, 179, 7, "enum_FIELD"], [197, 187, 7, "enum_FIELD"], [212, 210, 7, "enum_FIELD"], [223, 221, 7, "enum_FIELD"], [228, 230, 7, "enum_FIELD"], [255, 245, 7, "enum_FIELD"], [270, 268, 7, "enum_FIELD"], [281, 279, 7, "enum_FIELD"], [286, 288, 7, "enum_FIELD"], [16, 14, 7, "enum_FIELD"], [34, 32, 7, "enum_FIELD"], [43, 42, 7, "enum_FIELD"], [50, 49, 7, "enum_FIELD"], [53, 57, 7, "enum_FIELD"], [61, 63, 7, "enum_FIELD"], [65, 67, 7, "enum_FIELD"], [73, 72, 7, "enum_FIELD"], [78, 82, 7, "enum_FIELD"], [90, 89, 7, "enum_FIELD"], [96, 95, 7, "enum_FIELD"], [99, 101, 7, "enum_FIELD"], [103, 105, 7, "enum_FIELD"], [107, 109, 7, "enum_FIELD"], [111, 113, 7, "enum_FIELD"], [115, 117, 7, "enum_FIELD"], [119, 121, 7, "enum_FIELD"], [123, 125, 7, "enum_FIELD"], [131, 130, 7, "enum_FIELD"], [139, 138, 7, "enum_FIELD"], [150, 152, 7, "enum_FIELD"], [156, 158, 7, "enum_FIELD"], [187, 185, 7, "enum_FIELD"], [193, 191, 7, "enum_FIELD"], [204, 203, 7, "enum_FIELD"], [204, 205, 7, "enum_FIELD"], [210, 209, 7, "enum_FIELD"], [221, 219, 7, "enum_FIELD"], [230, 229, 7, "enum_FIELD"], [245, 243, 7, "enum_FIELD"], [251, 249, 7, "enum_FIELD"], [262, 261, 7, "enum_FIELD"], [262, 263, 7, "enum_FIELD"], [268, 267, 7, "enum_FIELD"], [279, 277, 7, "enum_FIELD"], [288, 287, 7, "enum_FIELD"], [14, 13, 7, "enum_FIELD"], [32, 31, 7, "enum_FIELD"], [57, 56, 7, "enum_FIELD"], [57, 58, 7, "enum_FIELD"], [145, 144, 7, "enum_FIELD"], [145, 146, 7, "enum_FIELD"], [185, 184, 7, "enum_FIELD"], [191, 190, 7, "enum_FIELD"], [219, 218, 7, "enum_FIELD"], [234, 232, 7, "enum_FIELD"], [243, 242, 7, "enum_FIELD"], [249, 248, 7, "enum_FIELD"], [277, 276, 7, "enum_FIELD"], [292, 290, 7, "enum_FIELD"], [232, 231, 7, "enum_FIELD"], [290, 289, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [24, 4, 10, "enum_LAST_LEXICAL_USE"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 30, 9, "enum_NEXT_SYNTAX"], [31, 24, 10, "enum_LAST_LEXICAL_USE"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [42, 31, 10, "enum_LAST_LEXICAL_USE"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [49, 38, 10, "enum_LAST_LEXICAL_USE"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [63, 8, 10, "enum_LAST_LEXICAL_USE"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [76, 47, 10, "enum_LAST_LEXICAL_USE"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [95, 49, 10, "enum_LAST_LEXICAL_USE"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [109, 6, 10, "enum_LAST_LEXICAL_USE"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [130, 89, 10, "enum_LAST_LEXICAL_USE"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [138, 72, 10, "enum_LAST_LEXICAL_USE"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [144, 128, 10, "enum_LAST_LEXICAL_USE"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [146, 87, 10, "enum_LAST_LEXICAL_USE"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [153, 42, 10, "enum_LAST_LEXICAL_USE"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 163, 9, "enum_NEXT_SYNTAX"], [164, 63, 10, "enum_LAST_LEXICAL_USE"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 176, 9, "enum_NEXT_SYNTAX"], [177, 168, 10, "enum_LAST_LEXICAL_USE"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 184, 9, "enum_NEXT_SYNTAX"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [187, 188, 9, "enum_NEXT_SYNTAX"], [188, 189, 9, "enum_NEXT_SYNTAX"], [190, 13, 10, "enum_LAST_LEXICAL_USE"], [189, 190, 9, "enum_NEXT_SYNTAX"], [190, 191, 9, "enum_NEXT_SYNTAX"], [191, 192, 9, "enum_NEXT_SYNTAX"], [192, 193, 9, "enum_NEXT_SYNTAX"], [193, 194, 9, "enum_NEXT_SYNTAX"], [194, 195, 9, "enum_NEXT_SYNTAX"], [196, 2, 10, "enum_LAST_LEXICAL_USE"], [195, 196, 9, "enum_NEXT_SYNTAX"], [196, 197, 9, "enum_NEXT_SYNTAX"], [197, 198, 9, "enum_NEXT_SYNTAX"], [198, 199, 9, "enum_NEXT_SYNTAX"], [200, 177, 10, "enum_LAST_LEXICAL_USE"], [199, 200, 9, "enum_NEXT_SYNTAX"], [200, 201, 9, "enum_NEXT_SYNTAX"], [201, 202, 9, "enum_NEXT_SYNTAX"], [203, 109, 10, "enum_LAST_LEXICAL_USE"], [202, 203, 9, "enum_NEXT_SYNTAX"], [203, 204, 9, "enum_NEXT_SYNTAX"], [204, 205, 9, "enum_NEXT_SYNTAX"], [205, 206, 9, "enum_NEXT_SYNTAX"], [206, 207, 9, "enum_NEXT_SYNTAX"], [207, 208, 9, "enum_NEXT_SYNTAX"], [209, 70, 10, "enum_LAST_LEXICAL_USE"], [208, 209, 9, "enum_NEXT_SYNTAX"], [209, 210, 9, "enum_NEXT_SYNTAX"], [210, 211, 9, "enum_NEXT_SYNTAX"], [211, 212, 9, "enum_NEXT_SYNTAX"], [213, 182, 10, "enum_LAST_LEXICAL_USE"], [212, 213, 9, "enum_NEXT_SYNTAX"], [213, 214, 9, "enum_NEXT_SYNTAX"], [214, 216, 9, "enum_NEXT_SYNTAX"], [216, 217, 9, "enum_NEXT_SYNTAX"], [218, 190, 10, "enum_LAST_LEXICAL_USE"], [217, 218, 9, "enum_NEXT_SYNTAX"], [218, 219, 9, "enum_NEXT_SYNTAX"], [219, 220, 9, "enum_NEXT_SYNTAX"], [220, 221, 9, "enum_NEXT_SYNTAX"], [221, 222, 9, "enum_NEXT_SYNTAX"], [222, 223, 9, "enum_NEXT_SYNTAX"], [223, 224, 9, "enum_NEXT_SYNTAX"], [224, 225, 9, "enum_NEXT_SYNTAX"], [225, 226, 9, "enum_NEXT_SYNTAX"], [226, 228, 9, "enum_NEXT_SYNTAX"], [228, 229, 9, "enum_NEXT_SYNTAX"], [229, 230, 9, "enum_NEXT_SYNTAX"], [230, 231, 9, "enum_NEXT_SYNTAX"], [231, 232, 9, "enum_NEXT_SYNTAX"], [232, 233, 9, "enum_NEXT_SYNTAX"], [233, 234, 9, "enum_NEXT_SYNTAX"], [235, 213, 10, "enum_LAST_LEXICAL_USE"], [234, 235, 9, "enum_NEXT_SYNTAX"], [235, 236, 9, "enum_NEXT_SYNTAX"], [236, 237, 9, "enum_NEXT_SYNTAX"], [237, 239, 9, "enum_NEXT_SYNTAX"], [240, 235, 10, "enum_LAST_LEXICAL_USE"], [239, 240, 9, "enum_NEXT_SYNTAX"], [240, 241, 9, "enum_NEXT_SYNTAX"], [242, 184, 10, "enum_LAST_LEXICAL_USE"], [241, 242, 9, "enum_NEXT_SYNTAX"], [242, 243, 9, "enum_NEXT_SYNTAX"], [243, 244, 9, "enum_NEXT_SYNTAX"], [244, 245, 9, "enum_NEXT_SYNTAX"], [245, 246, 9, "enum_NEXT_SYNTAX"], [246, 247, 9, "enum_NEXT_SYNTAX"], [248, 218, 10, "enum_LAST_LEXICAL_USE"], [247, 248, 9, "enum_NEXT_SYNTAX"], [248, 249, 9, "enum_NEXT_SYNTAX"], [249, 250, 9, "enum_NEXT_SYNTAX"], [250, 251, 9, "enum_NEXT_SYNTAX"], [251, 252, 9, "enum_NEXT_SYNTAX"], [252, 253, 9, "enum_NEXT_SYNTAX"], [254, 196, 10, "enum_LAST_LEXICAL_USE"], [253, 254, 9, "enum_NEXT_SYNTAX"], [254, 255, 9, "enum_NEXT_SYNTAX"], [255, 256, 9, "enum_NEXT_SYNTAX"], [256, 257, 9, "enum_NEXT_SYNTAX"], [258, 200, 10, "enum_LAST_LEXICAL_USE"], [257, 258, 9, "enum_NEXT_SYNTAX"], [258, 259, 9, "enum_NEXT_SYNTAX"], [259, 260, 9, "enum_NEXT_SYNTAX"], [261, 203, 10, "enum_LAST_LEXICAL_USE"], [260, 261, 9, "enum_NEXT_SYNTAX"], [261, 262, 9, "enum_NEXT_SYNTAX"], [262, 263, 9, "enum_NEXT_SYNTAX"], [263, 264, 9, "enum_NEXT_SYNTAX"], [264, 265, 9, "enum_NEXT_SYNTAX"], [265, 266, 9, "enum_NEXT_SYNTAX"], [267, 136, 10, "enum_LAST_LEXICAL_USE"], [266, 267, 9, "enum_NEXT_SYNTAX"], [267, 268, 9, "enum_NEXT_SYNTAX"], [268, 269, 9, "enum_NEXT_SYNTAX"], [269, 270, 9, "enum_NEXT_SYNTAX"], [271, 240, 10, "enum_LAST_LEXICAL_USE"], [270, 271, 9, "enum_NEXT_SYNTAX"], [271, 272, 9, "enum_NEXT_SYNTAX"], [272, 274, 9, "enum_NEXT_SYNTAX"], [274, 275, 9, "enum_NEXT_SYNTAX"], [276, 248, 10, "enum_LAST_LEXICAL_USE"], [275, 276, 9, "enum_NEXT_SYNTAX"], [276, 277, 9, "enum_NEXT_SYNTAX"], [277, 278, 9, "enum_NEXT_SYNTAX"], [278, 279, 9, "enum_NEXT_SYNTAX"], [279, 280, 9, "enum_NEXT_SYNTAX"], [280, 281, 9, "enum_NEXT_SYNTAX"], [281, 282, 9, "enum_NEXT_SYNTAX"], [282, 283, 9, "enum_NEXT_SYNTAX"], [283, 284, 9, "enum_NEXT_SYNTAX"], [284, 286, 9, "enum_NEXT_SYNTAX"], [287, 229, 10, "enum_LAST_LEXICAL_USE"], [286, 287, 9, "enum_NEXT_SYNTAX"], [287, 288, 9, "enum_NEXT_SYNTAX"], [288, 289, 9, "enum_NEXT_SYNTAX"], [289, 290, 9, "enum_NEXT_SYNTAX"], [290, 291, 9, "enum_NEXT_SYNTAX"], [291, 292, 9, "enum_NEXT_SYNTAX"], [293, 271, 10, "enum_LAST_LEXICAL_USE"], [292, 293, 9, "enum_NEXT_SYNTAX"], [293, 294, 9, "enum_NEXT_SYNTAX"], [294, 295, 9, "enum_NEXT_SYNTAX"], [295, 298, 9, "enum_NEXT_SYNTAX"], [5, 12, 1, "enum_CFG_NEXT"], [12, 25, 1, "enum_CFG_NEXT"], [25, 37, 1, "enum_CFG_NEXT"], [25, 30, 1, "enum_CFG_NEXT"], [30, 37, 1, "enum_CFG_NEXT"], [37, 46, 1, "enum_CFG_NEXT"], [46, 69, 1, "enum_CFG_NEXT"], [69, 86, 1, "enum_CFG_NEXT"], [86, 94, 1, "enum_CFG_NEXT"], [94, 127, 1, "enum_CFG_NEXT"], [127, 135, 1, "enum_CFG_NEXT"], [135, 164, 1, "enum_CFG_NEXT"], [164, 167, 1, "enum_CFG_NEXT"], [164, 176, 1, "enum_CFG_NEXT"], [167, 181, 1, "enum_CFG_NEXT"], [176, 181, 1, "enum_CFG_NEXT"], [181, 208, 1, "enum_CFG_NEXT"], [208, 223, 1, "enum_CFG_NEXT"], [223, 228, 1, "enum_CFG_NEXT"], [223, 239, 1, "enum_CFG_NEXT"], [228, 239, 1, "enum_CFG_NEXT"], [239, 266, 1, "enum_CFG_NEXT"], [266, 281, 1, "enum_CFG_NEXT"], [281, 298, 1, "enum_CFG_NEXT"], [281, 286, 1, "enum_CFG_NEXT"], [286, 298, 1, "enum_CFG_NEXT"], [24, 4, 3, "enum_LAST_WRITE"], [31, 24, 2, "enum_LAST_READ"], [31, 4, 3, "enum_LAST_WRITE"], [42, 24, 2, "enum_LAST_READ"], [42, 31, 2, "enum_LAST_READ"], [42, 4, 3, "enum_LAST_WRITE"], [49, 38, 3, "enum_LAST_WRITE"], [63, 8, 3, "enum_LAST_WRITE"], [76, 47, 3, "enum_LAST_WRITE"], [95, 49, 2, "enum_LAST_READ"], [95, 38, 3, "enum_LAST_WRITE"], [109, 6, 3, "enum_LAST_WRITE"], [130, 89, 2, "enum_LAST_READ"], [138, 72, 2, "enum_LAST_READ"], [144, 128, 3, "enum_LAST_WRITE"], [146, 87, 3, "enum_LAST_WRITE"], [153, 42, 2, "enum_LAST_READ"], [153, 4, 3, "enum_LAST_WRITE"], [164, 63, 2, "enum_LAST_READ"], [164, 8, 3, "enum_LAST_WRITE"], [190, 13, 2, "enum_LAST_READ"], [196, 2, 3, "enum_LAST_WRITE"], [200, 168, 3, "enum_LAST_WRITE"], [200, 177, 3, "enum_LAST_WRITE"], [203, 109, 2, "enum_LAST_READ"], [203, 6, 3, "enum_LAST_WRITE"], [209, 70, 3, "enum_LAST_WRITE"], [213, 182, 3, "enum_LAST_WRITE"], [218, 190, 2, "enum_LAST_READ"], [235, 213, 2, "enum_LAST_READ"], [235, 182, 3, "enum_LAST_WRITE"], [242, 184, 2, "enum_LAST_READ"], [248, 218, 2, "enum_LAST_READ"], [254, 196, 2, "enum_LAST_READ"], [254, 2, 3, "enum_LAST_WRITE"], [258, 200, 2, "enum_LAST_READ"], [258, 168, 3, "enum_LAST_WRITE"], [258, 177, 3, "enum_LAST_WRITE"], [261, 203, 2, "enum_LAST_READ"], [261, 6, 3, "enum_LAST_WRITE"], [240, 213, 2, "enum_LAST_READ"], [240, 235, 2, "enum_LAST_READ"], [240, 182, 3, "enum_LAST_WRITE"], [267, 136, 3, "enum_LAST_WRITE"], [271, 213, 2, "enum_LAST_READ"], [271, 235, 2, "enum_LAST_READ"], [271, 240, 3, "enum_LAST_WRITE"], [276, 248, 2, "enum_LAST_READ"], [287, 229, 2, "enum_LAST_READ"], [293, 271, 2, "enum_LAST_READ"], [293, 240, 3, "enum_LAST_WRITE"], [38, 40, 4, "enum_COMPUTED_FROM"], [38, 42, 4, "enum_COMPUTED_FROM"], [47, 49, 4, "enum_COMPUTED_FROM"], [47, 63, 4, "enum_COMPUTED_FROM"], [70, 76, 4, "enum_COMPUTED_FROM"], [70, 72, 4, "enum_COMPUTED_FROM"], [87, 89, 4, "enum_COMPUTED_FROM"], [128, 130, 4, "enum_COMPUTED_FROM"], [136, 138, 4, "enum_COMPUTED_FROM"], [136, 144, 4, "enum_COMPUTED_FROM"], [136, 146, 4, "enum_COMPUTED_FROM"], [136, 153, 4, "enum_COMPUTED_FROM"], [182, 196, 4, "enum_COMPUTED_FROM"], [182, 200, 4, "enum_COMPUTED_FROM"], [182, 203, 4, "enum_COMPUTED_FROM"], [182, 184, 4, "enum_COMPUTED_FROM"], [182, 190, 4, "enum_COMPUTED_FROM"], [240, 254, 4, "enum_COMPUTED_FROM"], [240, 258, 4, "enum_COMPUTED_FROM"], [240, 261, 4, "enum_COMPUTED_FROM"], [240, 242, 4, "enum_COMPUTED_FROM"], [240, 248, 4, "enum_COMPUTED_FROM"]], "error_location": 153, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/HPAC/linnea.git", "old_path": "experiments/experiments.py", "hash": "55a7820be6ca6194fbdcf3a2f93db212c59d2958", "code": "def measure(experiment: str, example: Example, name: str, merging: bool):\n\n    linnea.config.clear_all()\n    if hasattr(example, \"init\"):\n        # calls initialization that have to be done before each repetition\n        example.init()\n\n    graph = DerivationGraph(example.eqns)\n    trace: List[Tuple[float, float]] = graph.derivation(\n                        time_limit=30*60,\n                        merging=merging,\n                        dead_ends=True)\n\n    df_trace: pd.DataFrame = pd.DataFrame(trace, columns=[\"time\", \"cost\"])\n\n    t_start: float = time.perf_counter()\n    graph.write_output(code=True,\n                       derivation=False,\n                       output_name=name,\n                       experiment_code=False,\n                       algorithms_limit=1,\n                       graph=False,\n                       subdir_name=\"time_generation\")\n    t_end: float = time.perf_counter()\n\n    df_code_gen_time: pd.DataFrame = pd.DataFrame([t_end-t_start], index=[example], columns=[\"time\"])\n    \n    if merging:\n        subdir: str = \"merging\"\n    else:\n        subdir: str = \"no_merging\"\n\n    file_path: str = os.path.join(linnea.config.results_path, experiment, \"generation\", subdir, name + \"_trace.csv\")\n    df_trace.to_csv(file_path)\n    if linnea.config.verbosity >= 2:\n        print(\"Generate trace file {}\".format(file_path))\n\n    file_path = os.path.join(linnea.config.results_path, experiment, \"generation\", subdir, name + \"_code_gen_time.csv\")\n    df_code_gen_time.to_csv(file_path)\n    if linnea.config.verbosity >= 2:\n        print(\"Generate code gen time file {}\".format(file_path))\n\n    return\n", "rewrite": "ReplaceText(target='name' @(52,60)->(52,67))", "error_line": 25, "has_bug": true, "code_full": "import os\nimport time\nfrom typing import Any, List, Tuple\n\nimport pandas as pd\n\nlinnea: Any = None\n\n\nclass DerivationGraph:\n    def __init__(self, eqns: Any):\n        self.eqns = eqns\n\n    def derivation(self, time_limit: int, merging: bool, dead_ends: bool) -> List[Tuple[float, float]]:\n        return []\n    \n    def write_output(self, code: bool, derivation: bool, output_name: str, experiment_code: bool, algorithms_limit: int, graph: bool, subdir_name: str):\n        pass\n\n\nclass Example:\n    eqns: Any\n\n    def init(self):\n        pass\n\n\ndef measure(experiment: str, example: Example, name: str, merging: bool):\n\n    linnea.config.clear_all()\n    if hasattr(example, \"init\"):\n        # calls initialization that have to be done before each repetition\n        example.init()\n\n    graph = DerivationGraph(example.eqns)\n    trace: List[Tuple[float, float]] = graph.derivation(\n                        time_limit=30*60,\n                        merging=merging,\n                        dead_ends=True)\n\n    df_trace: pd.DataFrame = pd.DataFrame(trace, columns=[\"time\", \"cost\"])\n\n    t_start: float = time.perf_counter()\n    graph.write_output(code=True,\n                       derivation=False,\n                       output_name=name,\n                       experiment_code=False,\n                       algorithms_limit=1,\n                       graph=False,\n                       subdir_name=\"time_generation\")\n    t_end: float = time.perf_counter()\n\n    df_code_gen_time: pd.DataFrame = pd.DataFrame([t_end-t_start], index=[example], columns=[\"time\"])\n    \n    if merging:\n        subdir: str = \"merging\"\n    else:\n        subdir: str = \"no_merging\"\n\n    file_path: str = os.path.join(linnea.config.results_path, experiment, \"generation\", subdir, name + \"_trace.csv\")\n    df_trace.to_csv(file_path)\n    if linnea.config.verbosity >= 2:\n        print(\"Generate trace file {}\".format(file_path))\n\n    file_path = os.path.join(linnea.config.results_path, experiment, \"generation\", subdir, name + \"_code_gen_time.csv\")\n    df_code_gen_time.to_csv(file_path)\n    if linnea.config.verbosity >= 2:\n        print(\"Generate code gen time file {}\".format(file_path))\n\n    return\n", "error_location_char": [986, 993], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def handle_word(", "word", ")", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "API_KEY", "=", "load_api_key", "(", ")", "#NEWLINE#", "#UNINDENT#", "except", "ConfigFileError", ":", "#NEWLINE#", "#INDENT#", "click", ".", "echo", "(", "'API key is missing. Kindly provide an API key by registering via:\\n\\n$ familiarize --init'", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "word_object", "=", "fetch_word", "(", "word", ")", "#NEWLINE#", "click", ".", "echo_via_pager", "(", "word_object", ".", "stringify", "(", ")", ")", "#NEWLINE#", "word_save_status", "=", "save_word", "(", "word", ")", "#NEWLINE#", "if", "word_save_status", ":", "#NEWLINE#", "#INDENT#", "click", ".", "echo", "(", "'{} has been added to your personal dictionary.'", ".", "format", "(", "word", ")", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "click", ".", "echo", "(", "'{} could not be added to your dictionary'", ".", "format", "(", "word", ")", ")"], "edges": [[10, 14, 7, "enum_FIELD"], [18, 19, 7, "enum_FIELD"], [34, 38, 7, "enum_FIELD"], [41, 45, 7, "enum_FIELD"], [52, 56, 7, "enum_FIELD"], [62, 61, 7, "enum_FIELD"], [14, 13, 7, "enum_FIELD"], [22, 26, 7, "enum_FIELD"], [38, 37, 7, "enum_FIELD"], [45, 43, 7, "enum_FIELD"], [56, 55, 7, "enum_FIELD"], [64, 68, 7, "enum_FIELD"], [81, 85, 7, "enum_FIELD"], [26, 24, 7, "enum_FIELD"], [43, 42, 7, "enum_FIELD"], [49, 47, 7, "enum_FIELD"], [68, 66, 7, "enum_FIELD"], [85, 83, 7, "enum_FIELD"], [24, 23, 7, "enum_FIELD"], [47, 46, 7, "enum_FIELD"], [66, 65, 7, "enum_FIELD"], [72, 70, 7, "enum_FIELD"], [83, 82, 7, "enum_FIELD"], [89, 87, 7, "enum_FIELD"], [70, 69, 7, "enum_FIELD"], [87, 86, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [39, 2, 10, "enum_LAST_LEXICAL_USE"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [42, 23, 10, "enum_LAST_LEXICAL_USE"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [46, 35, 10, "enum_LAST_LEXICAL_USE"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [57, 39, 10, "enum_LAST_LEXICAL_USE"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 60, 9, "enum_NEXT_SYNTAX"], [61, 53, 10, "enum_LAST_LEXICAL_USE"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 64, 9, "enum_NEXT_SYNTAX"], [65, 42, 10, "enum_LAST_LEXICAL_USE"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [73, 57, 10, "enum_LAST_LEXICAL_USE"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 81, 9, "enum_NEXT_SYNTAX"], [82, 65, 10, "enum_LAST_LEXICAL_USE"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [90, 73, 10, "enum_LAST_LEXICAL_USE"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [10, 34, 1, "enum_CFG_NEXT"], [10, 19, 1, "enum_CFG_NEXT"], [19, 22, 1, "enum_CFG_NEXT"], [34, 41, 1, "enum_CFG_NEXT"], [41, 52, 1, "enum_CFG_NEXT"], [52, 61, 1, "enum_CFG_NEXT"], [61, 81, 1, "enum_CFG_NEXT"], [61, 64, 1, "enum_CFG_NEXT"], [39, 2, 3, "enum_LAST_WRITE"], [46, 35, 3, "enum_LAST_WRITE"], [57, 39, 2, "enum_LAST_READ"], [57, 2, 3, "enum_LAST_WRITE"], [61, 53, 3, "enum_LAST_WRITE"], [65, 42, 2, "enum_LAST_READ"], [73, 57, 2, "enum_LAST_READ"], [73, 2, 3, "enum_LAST_WRITE"], [82, 42, 2, "enum_LAST_READ"], [90, 57, 2, "enum_LAST_READ"], [90, 2, 3, "enum_LAST_WRITE"], [11, 13, 4, "enum_COMPUTED_FROM"], [35, 37, 4, "enum_COMPUTED_FROM"], [35, 39, 4, "enum_COMPUTED_FROM"], [53, 55, 4, "enum_COMPUTED_FROM"], [53, 57, 4, "enum_COMPUTED_FROM"]], "error_location": 57, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/kshitij10496/lexico.git", "old_path": "familiarize/cli.py", "hash": "a47f45857e2c389833e3f4d3f151b44973520714", "code": "def handle_word(word: str):\n    #click.echo('Word received by new(): {}'.format(word))\n    try:\n        API_KEY = load_api_key()\n        #print('API_KEY:', API_KEY)\n    except ConfigFileError:\n        click.echo('API key is missing. Kindly provide an API key by registering via:$ familiarize --init')\n    else:\n        word_object: Word = fetch_word(word)\n        click.echo_via_pager(word_object.stringify())\n        word_save_status: bool = save_word(word)\n        if word_save_status:\n            click.echo('{} has been added to your personal dictionary.'.format(word))\n        else:\n            click.echo('{} could not be added to your dictionary'.format(word))\n", "rewrite": "ReplaceText(target='word_object' @(55,37)->(55,41))", "error_line": 10, "has_bug": true, "code_full": "from typing import Optional\n\nimport click\n\n\nclass ConfigFileError(Exception):\n    pass\n\n\nclass Word:\n    word: str\n\n    def stringify(self) -> str:\n        return self.word\n\n\ndef load_api_key() -> str:\n    return \"\"\n\n\ndef fetch_word(word: str) -> Word:\n    return Word()\n\n\ndef save_word(word: Word) -> bool:\n    return True\n\n\ndef handle_word(word: str):\n    #click.echo('Word received by new(): {}'.format(word))\n    try:\n        API_KEY = load_api_key()\n        #print('API_KEY:', API_KEY)\n    except ConfigFileError:\n        click.echo('API key is missing. Kindly provide an API key by registering via:$ familiarize --init')\n    else:\n        word_object: Word = fetch_word(word)\n        click.echo_via_pager(word_object.stringify())\n        word_save_status: bool = save_word(word)\n        if word_save_status:\n            click.echo('{} has been added to your personal dictionary.'.format(word))\n        else:\n            click.echo('{} could not be added to your dictionary'.format(word))\n", "error_location_char": [455, 459], "type_checked_pytype": false, "type_error_label": "wrong-arg-types", "type_checked_mypy": false}
{"source_tokens": ["#NEWLINE#", "def __init__(", "self", ",", "comp", ",", "comps", ")", ":", "#NEWLINE#", "#INDENT#", "super", "(", "ASTCompAndOr", ",", "self", ")", ".", "__init__", "(", "comp", ".", "token", ")", "#NEWLINE#", "self", ".", "comps", "=", "[", "comp", "]", "#NEWLINE#", "for", "c", "in", "comps", ":", "#NEWLINE#", "#INDENT#", "self", ".", "comps", ".", "append", "(", "comp", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [10, 19, 7, "enum_FIELD"], [24, 29, 7, "enum_FIELD"], [35, 34, 7, "enum_FIELD"], [35, 36, 7, "enum_FIELD"], [19, 17, 7, "enum_FIELD"], [26, 25, 7, "enum_FIELD"], [39, 45, 7, "enum_FIELD"], [17, 14, 7, "enum_FIELD"], [21, 20, 7, "enum_FIELD"], [45, 43, 7, "enum_FIELD"], [14, 11, 7, "enum_FIELD"], [43, 41, 7, "enum_FIELD"], [41, 40, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [15, 2, 10, "enum_LAST_LEXICAL_USE"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [20, 4, 10, "enum_LAST_LEXICAL_USE"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [25, 15, 10, "enum_LAST_LEXICAL_USE"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [30, 20, 10, "enum_LAST_LEXICAL_USE"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [36, 6, 10, "enum_LAST_LEXICAL_USE"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 39, 9, "enum_NEXT_SYNTAX"], [40, 25, 10, "enum_LAST_LEXICAL_USE"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [46, 30, 10, "enum_LAST_LEXICAL_USE"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [3, 10, 1, "enum_CFG_NEXT"], [10, 24, 1, "enum_CFG_NEXT"], [24, 36, 1, "enum_CFG_NEXT"], [36, 34, 1, "enum_CFG_NEXT"], [34, 39, 1, "enum_CFG_NEXT"], [39, 34, 1, "enum_CFG_NEXT"], [15, 2, 3, "enum_LAST_WRITE"], [20, 4, 3, "enum_LAST_WRITE"], [30, 20, 2, "enum_LAST_READ"], [30, 4, 3, "enum_LAST_WRITE"], [25, 15, 2, "enum_LAST_READ"], [25, 2, 3, "enum_LAST_WRITE"], [36, 6, 3, "enum_LAST_WRITE"], [34, 34, 3, "enum_LAST_WRITE"], [40, 40, 2, "enum_LAST_READ"], [40, 25, 2, "enum_LAST_READ"], [40, 2, 3, "enum_LAST_WRITE"], [46, 30, 2, "enum_LAST_READ"], [46, 46, 2, "enum_LAST_READ"], [46, 4, 3, "enum_LAST_WRITE"], [26, 30, 4, "enum_COMPUTED_FROM"]], "error_location": 46, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/jhuapl-boss/heaviside.git", "old_path": "heaviside/ast.py", "hash": "3adb4902a04dc3e1d9a325ab1752c4b2d856b677", "code": "def __init__(self, comp: Comp, comps: List[Comp]):\n    super(ASTCompAndOr, self).__init__(comp.token)\n    self.comps = [comp]\n    for c in comps:\n        self.comps.append(comp)\n", "rewrite": "ReplaceText(target='c' @(72,30)->(72,34))", "error_line": 4, "has_bug": true, "code_full": "from typing import List\n\n\nclass Comp:\n    token: str\n\n    def __init__(self, token: str):\n        self.token = token\n\n\nclass ASTCompAndOr(Comp):\n    comps: List[Comp]\n\n    def __init__(self, comp: Comp, comps: List[Comp]):\n        super(ASTCompAndOr, self).__init__(comp.token)\n        self.comps = [comp]\n        for c in comps:\n            self.comps.append(comp)\n", "error_location_char": [172, 176], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def read(", "self", ",", "aTableName", ")", ":", "#NEWLINE#", "#INDENT#", "if", "self", ".", "_objStore_flag", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "objPath", "=", "(", "(", "(", "self", ".", "_path", "+", "'/'", ")", "+", "aTableName", ")", "+", "'.enc'", ")", "#NEWLINE#", "self", ".", "_objStore", ".", "get_object", "(", "self", ".", "_admin_username", ",", "objPath", ")", "#NEWLINE#", "tableFile", "=", "(", "(", "(", "self", ".", "_path", "+", "'/'", ")", "+", "aTableName", ")", "+", "'.pq'", ")", "#NEWLINE#", "self", ".", "_decrypt", "(", "tableFile", ")", "#NEWLINE#", "dataframe", "=", "pq", ".", "read_table", "(", "tableFile", ")", ".", "to_pandas", "(", ")", "#NEWLINE#", "os", ".", "remove", "(", "tableFile", ")", "#NEWLINE#", "os", ".", "remove", "(", "objPath", ")", "#NEWLINE#", "return", "dataframe", "#NEWLINE#", "#UNINDENT#", "except", ":", "#NEWLINE#", "#INDENT#", "return", "\"File not found. Check bucket '{}' for object '{}'\"", ".", "format", "(", "self", ".", "_admin_username", ",", "objPath", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "tableFile", "=", "(", "(", "(", "self", ".", "_path", "+", "'/'", ")", "+", "aTableName", ")", "+", "'.pq'", ")", "#NEWLINE#", "tableFileEnc", "=", "(", "(", "(", "self", ".", "_path", "+", "'/'", ")", "+", "aTableName", ")", "+", "'.enc'", ")", "#NEWLINE#", "self", ".", "_decrypt", "(", "tableFileEnc", ")", "#NEWLINE#", "dataframe", "=", "pq", ".", "read_table", "(", "tableFile", ")", ".", "to_pandas", "(", ")", "#NEWLINE#", "os", ".", "remove", "(", "tableFile", ")", "#NEWLINE#", "return", "dataframe", "#NEWLINE#", "#UNINDENT#", "except", ":", "#NEWLINE#", "#INDENT#", "return", "\"File not found. Check path '{}' for file '{}'\"", ".", "format", "(", "self", ".", "_path", ",", "tableFile", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [13, 11, 7, "enum_FIELD"], [11, 10, 7, "enum_FIELD"], [19, 34, 7, "enum_FIELD"], [37, 47, 7, "enum_FIELD"], [50, 65, 7, "enum_FIELD"], [68, 72, 7, "enum_FIELD"], [75, 86, 7, "enum_FIELD"], [88, 92, 7, "enum_FIELD"], [95, 99, 7, "enum_FIELD"], [103, 104, 7, "enum_FIELD"], [132, 147, 7, "enum_FIELD"], [150, 165, 7, "enum_FIELD"], [168, 172, 7, "enum_FIELD"], [175, 186, 7, "enum_FIELD"], [188, 192, 7, "enum_FIELD"], [196, 197, 7, "enum_FIELD"], [34, 31, 7, "enum_FIELD"], [34, 35, 7, "enum_FIELD"], [47, 41, 7, "enum_FIELD"], [65, 62, 7, "enum_FIELD"], [65, 66, 7, "enum_FIELD"], [72, 70, 7, "enum_FIELD"], [86, 84, 7, "enum_FIELD"], [92, 90, 7, "enum_FIELD"], [99, 97, 7, "enum_FIELD"], [111, 119, 7, "enum_FIELD"], [147, 144, 7, "enum_FIELD"], [147, 148, 7, "enum_FIELD"], [165, 162, 7, "enum_FIELD"], [165, 166, 7, "enum_FIELD"], [172, 170, 7, "enum_FIELD"], [186, 184, 7, "enum_FIELD"], [192, 190, 7, "enum_FIELD"], [204, 212, 7, "enum_FIELD"], [31, 28, 7, "enum_FIELD"], [31, 32, 7, "enum_FIELD"], [41, 39, 7, "enum_FIELD"], [45, 44, 7, "enum_FIELD"], [62, 59, 7, "enum_FIELD"], [62, 63, 7, "enum_FIELD"], [70, 69, 7, "enum_FIELD"], [84, 81, 7, "enum_FIELD"], [90, 89, 7, "enum_FIELD"], [97, 96, 7, "enum_FIELD"], [119, 113, 7, "enum_FIELD"], [144, 141, 7, "enum_FIELD"], [144, 145, 7, "enum_FIELD"], [162, 159, 7, "enum_FIELD"], [162, 163, 7, "enum_FIELD"], [170, 169, 7, "enum_FIELD"], [184, 181, 7, "enum_FIELD"], [190, 189, 7, "enum_FIELD"], [212, 206, 7, "enum_FIELD"], [28, 26, 7, "enum_FIELD"], [28, 29, 7, "enum_FIELD"], [39, 38, 7, "enum_FIELD"], [59, 57, 7, "enum_FIELD"], [59, 60, 7, "enum_FIELD"], [81, 79, 7, "enum_FIELD"], [113, 112, 7, "enum_FIELD"], [117, 116, 7, "enum_FIELD"], [141, 139, 7, "enum_FIELD"], [141, 142, 7, "enum_FIELD"], [159, 157, 7, "enum_FIELD"], [159, 160, 7, "enum_FIELD"], [181, 179, 7, "enum_FIELD"], [206, 205, 7, "enum_FIELD"], [210, 209, 7, "enum_FIELD"], [26, 25, 7, "enum_FIELD"], [57, 56, 7, "enum_FIELD"], [79, 78, 7, "enum_FIELD"], [139, 138, 7, "enum_FIELD"], [157, 156, 7, "enum_FIELD"], [179, 178, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 9, 9, "enum_NEXT_SYNTAX"], [10, 2, 10, "enum_LAST_LEXICAL_USE"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [25, 10, 10, "enum_LAST_LEXICAL_USE"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [32, 4, 10, "enum_LAST_LEXICAL_USE"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [38, 25, 10, "enum_LAST_LEXICAL_USE"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [44, 38, 10, "enum_LAST_LEXICAL_USE"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [48, 20, 10, "enum_LAST_LEXICAL_USE"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [56, 44, 10, "enum_LAST_LEXICAL_USE"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [63, 32, 10, "enum_LAST_LEXICAL_USE"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [69, 56, 10, "enum_LAST_LEXICAL_USE"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [73, 51, 10, "enum_LAST_LEXICAL_USE"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [82, 73, 10, "enum_LAST_LEXICAL_USE"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [93, 82, 10, "enum_LAST_LEXICAL_USE"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [96, 89, 10, "enum_LAST_LEXICAL_USE"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [100, 48, 10, "enum_LAST_LEXICAL_USE"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 103, 9, "enum_NEXT_SYNTAX"], [104, 76, 10, "enum_LAST_LEXICAL_USE"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [116, 69, 10, "enum_LAST_LEXICAL_USE"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [120, 100, 10, "enum_LAST_LEXICAL_USE"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 132, 9, "enum_NEXT_SYNTAX"], [133, 93, 10, "enum_LAST_LEXICAL_USE"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [138, 116, 10, "enum_LAST_LEXICAL_USE"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [145, 63, 10, "enum_LAST_LEXICAL_USE"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [156, 138, 10, "enum_LAST_LEXICAL_USE"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [163, 145, 10, "enum_LAST_LEXICAL_USE"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [169, 156, 10, "enum_LAST_LEXICAL_USE"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [173, 151, 10, "enum_LAST_LEXICAL_USE"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [176, 104, 10, "enum_LAST_LEXICAL_USE"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [178, 78, 10, "enum_LAST_LEXICAL_USE"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [182, 133, 10, "enum_LAST_LEXICAL_USE"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 184, 9, "enum_NEXT_SYNTAX"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [187, 188, 9, "enum_NEXT_SYNTAX"], [189, 96, 10, "enum_LAST_LEXICAL_USE"], [188, 189, 9, "enum_NEXT_SYNTAX"], [189, 190, 9, "enum_NEXT_SYNTAX"], [190, 191, 9, "enum_NEXT_SYNTAX"], [191, 192, 9, "enum_NEXT_SYNTAX"], [193, 182, 10, "enum_LAST_LEXICAL_USE"], [192, 193, 9, "enum_NEXT_SYNTAX"], [193, 194, 9, "enum_NEXT_SYNTAX"], [194, 196, 9, "enum_NEXT_SYNTAX"], [197, 176, 10, "enum_LAST_LEXICAL_USE"], [196, 197, 9, "enum_NEXT_SYNTAX"], [197, 200, 9, "enum_NEXT_SYNTAX"], [200, 201, 9, "enum_NEXT_SYNTAX"], [201, 204, 9, "enum_NEXT_SYNTAX"], [204, 205, 9, "enum_NEXT_SYNTAX"], [205, 206, 9, "enum_NEXT_SYNTAX"], [206, 207, 9, "enum_NEXT_SYNTAX"], [207, 208, 9, "enum_NEXT_SYNTAX"], [209, 169, 10, "enum_LAST_LEXICAL_USE"], [208, 209, 9, "enum_NEXT_SYNTAX"], [209, 210, 9, "enum_NEXT_SYNTAX"], [210, 211, 9, "enum_NEXT_SYNTAX"], [211, 212, 9, "enum_NEXT_SYNTAX"], [213, 193, 10, "enum_LAST_LEXICAL_USE"], [212, 213, 9, "enum_NEXT_SYNTAX"], [213, 214, 9, "enum_NEXT_SYNTAX"], [3, 11, 1, "enum_CFG_NEXT"], [11, 19, 1, "enum_CFG_NEXT"], [11, 132, 1, "enum_CFG_NEXT"], [19, 37, 1, "enum_CFG_NEXT"], [37, 50, 1, "enum_CFG_NEXT"], [50, 68, 1, "enum_CFG_NEXT"], [68, 75, 1, "enum_CFG_NEXT"], [75, 88, 1, "enum_CFG_NEXT"], [88, 95, 1, "enum_CFG_NEXT"], [95, 103, 1, "enum_CFG_NEXT"], [103, 111, 1, "enum_CFG_NEXT"], [132, 150, 1, "enum_CFG_NEXT"], [150, 168, 1, "enum_CFG_NEXT"], [168, 175, 1, "enum_CFG_NEXT"], [175, 188, 1, "enum_CFG_NEXT"], [188, 196, 1, "enum_CFG_NEXT"], [196, 204, 1, "enum_CFG_NEXT"], [10, 2, 3, "enum_LAST_WRITE"], [25, 10, 2, "enum_LAST_READ"], [25, 2, 3, "enum_LAST_WRITE"], [32, 4, 3, "enum_LAST_WRITE"], [38, 25, 2, "enum_LAST_READ"], [38, 2, 3, "enum_LAST_WRITE"], [44, 38, 2, "enum_LAST_READ"], [44, 2, 3, "enum_LAST_WRITE"], [48, 20, 3, "enum_LAST_WRITE"], [56, 44, 2, "enum_LAST_READ"], [56, 2, 3, "enum_LAST_WRITE"], [63, 32, 2, "enum_LAST_READ"], [63, 4, 3, "enum_LAST_WRITE"], [69, 56, 2, "enum_LAST_READ"], [69, 2, 3, "enum_LAST_WRITE"], [73, 51, 3, "enum_LAST_WRITE"], [82, 73, 2, "enum_LAST_READ"], [82, 51, 3, "enum_LAST_WRITE"], [93, 82, 2, "enum_LAST_READ"], [93, 51, 3, "enum_LAST_WRITE"], [96, 89, 2, "enum_LAST_READ"], [100, 48, 2, "enum_LAST_READ"], [100, 20, 3, "enum_LAST_WRITE"], [104, 76, 3, "enum_LAST_WRITE"], [116, 69, 2, "enum_LAST_READ"], [116, 2, 3, "enum_LAST_WRITE"], [120, 100, 2, "enum_LAST_READ"], [120, 20, 3, "enum_LAST_WRITE"], [138, 10, 2, "enum_LAST_READ"], [138, 2, 3, "enum_LAST_WRITE"], [145, 4, 3, "enum_LAST_WRITE"], [156, 138, 2, "enum_LAST_READ"], [156, 2, 3, "enum_LAST_WRITE"], [163, 145, 2, "enum_LAST_READ"], [163, 4, 3, "enum_LAST_WRITE"], [169, 156, 2, "enum_LAST_READ"], [169, 2, 3, "enum_LAST_WRITE"], [173, 151, 3, "enum_LAST_WRITE"], [182, 133, 3, "enum_LAST_WRITE"], [193, 182, 2, "enum_LAST_READ"], [193, 133, 3, "enum_LAST_WRITE"], [197, 176, 3, "enum_LAST_WRITE"], [209, 169, 2, "enum_LAST_READ"], [209, 2, 3, "enum_LAST_WRITE"], [213, 193, 2, "enum_LAST_READ"], [213, 133, 3, "enum_LAST_WRITE"], [20, 32, 4, "enum_COMPUTED_FROM"], [20, 25, 4, "enum_COMPUTED_FROM"], [51, 63, 4, "enum_COMPUTED_FROM"], [51, 56, 4, "enum_COMPUTED_FROM"], [76, 82, 4, "enum_COMPUTED_FROM"], [76, 78, 4, "enum_COMPUTED_FROM"], [133, 145, 4, "enum_COMPUTED_FROM"], [133, 138, 4, "enum_COMPUTED_FROM"], [151, 163, 4, "enum_COMPUTED_FROM"], [151, 156, 4, "enum_COMPUTED_FROM"], [176, 182, 4, "enum_COMPUTED_FROM"], [176, 178, 4, "enum_COMPUTED_FROM"]], "error_location": 173, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/abrahamrhoffman/anaxdb.git", "old_path": "anaxdb/anaxdb.py", "hash": "0ff2588e2af89bb06d04834ad6bef887ed5ebb14", "code": "def read(self, aTableName) -> Union[str, pd.DataFrame]:\n    if self._objStore_flag:\n        try:\n            objPath: str = (self._path + \"/\" + aTableName + \".enc\")\n            self._objStore.get_object(self._admin_username, objPath)\n            tableFile: str = (self._path + \"/\" + aTableName + \".pq\")\n            self._decrypt(tableFile)\n            dataframe: pd.DataFrame = pq.read_table(tableFile).to_pandas()\n            os.remove(tableFile)\n            os.remove(objPath)\n            return dataframe\n        except:\n            return (\"File not found. Check bucket '{}' for object '{}'\"\n                    .format(self._admin_username, objPath))\n    else:\n        try:\n            tableFile: str = (self._path + \"/\" + aTableName + \".pq\")\n            tableFileEnc: str = (self._path + \"/\" + aTableName + \".enc\")\n            self._decrypt(tableFileEnc)\n            dataframe: pd.DataFrame = pq.read_table(tableFile).to_pandas()\n            os.remove(tableFile)\n            return dataframe\n        except:\n            return (\"File not found. Check path '{}' for file '{}'\"\n                    .format(self._path, tableFile))\n", "rewrite": "ReplaceText(target='tableFile' @(266,30)->(266,42))", "error_line": 18, "has_bug": true, "code_full": "import os\nfrom typing import Any, Union\n\nimport pandas as pd\nimport pyarrow.parquet as pq\n\n\nclass ObjectStore:\n    def get_object(self, aUsername: str, aPath: str) -> Any:\n        pass\n\n\n\nclass Database:\n    _objStore_flag: bool\n    _path: str\n    _admin_username: str\n    _objStore: ObjectStore\n\n    def _decrypt(self, aFile: str):\n        pass\n\n    def read(self, aTableName) -> Union[str, pd.DataFrame]:\n        if self._objStore_flag:\n            try:\n                objPath: str = (self._path + \"/\" + aTableName + \".enc\")\n                self._objStore.get_object(self._admin_username, objPath)\n                tableFile: str = (self._path + \"/\" + aTableName + \".pq\")\n                self._decrypt(tableFile)\n                dataframe: pd.DataFrame = pq.read_table(tableFile).to_pandas()\n                os.remove(tableFile)\n                os.remove(objPath)\n                return dataframe\n            except:\n                return (\"File not found. Check bucket '{}' for object '{}'\"\n                        .format(self._admin_username, objPath))\n        else:\n            try:\n                tableFile: str = (self._path + \"/\" + aTableName + \".pq\")\n                tableFileEnc: str = (self._path + \"/\" + aTableName + \".enc\")\n                self._decrypt(tableFileEnc)\n                dataframe: pd.DataFrame = pq.read_table(tableFile).to_pandas()\n                os.remove(tableFile)\n                return dataframe\n            except:\n                return (\"File not found. Check path '{}' for file '{}'\"\n                        .format(self._path, tableFile))\n", "error_location_char": [847, 859], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def __isub__(", "self", ",", "other", ")", ":", "#NEWLINE#", "#INDENT#", "'__isub__.\\n\\n    Same as the __sub__ method, but done in place.\\n\\n    Parameters\\n    ----------\\n    other : a DictArithmetic or dict object.\\n\\n    Returns\\n    -------\\n    d : a DictArithmetic object, self.\\n\\n    Examples\\n    --------\\n    >>> d = DictArithmetic({(0, 0): 1, (0, 1): -1})\\n    >>> g = {(0, 0): 2, (0, 1): 1}\\n    >>> d -= g\\n    >>> print(d)  # will print {(0, 0): -1}\\n\\n    '", "#NEWLINE#", "if", "isinstance", "(", "other", ",", "dict", ")", ":", "#NEWLINE#", "#INDENT#", "for", "(", "k", ",", "v", ")", "in", "other", ".", "items", "(", ")", ":", "#NEWLINE#", "#INDENT#", "self", "[", "k", "]", "-=", "v", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "self", "[", "(", ")", "]", "-=", "v", "#NEWLINE#", "#UNINDENT#", "return", "self"], "edges": [[1, 3, 7, "enum_FIELD"], [8, 9, 7, "enum_FIELD"], [18, 15, 7, "enum_FIELD"], [58, 59, 7, "enum_FIELD"], [15, 12, 7, "enum_FIELD"], [27, 24, 7, "enum_FIELD"], [27, 31, 7, "enum_FIELD"], [48, 50, 7, "enum_FIELD"], [48, 55, 7, "enum_FIELD"], [31, 29, 7, "enum_FIELD"], [35, 37, 7, "enum_FIELD"], [35, 41, 7, "enum_FIELD"], [50, 49, 7, "enum_FIELD"], [50, 51, 7, "enum_FIELD"], [29, 28, 7, "enum_FIELD"], [37, 36, 7, "enum_FIELD"], [37, 38, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [14, 4, 10, "enum_LAST_LEXICAL_USE"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [28, 14, 10, "enum_LAST_LEXICAL_USE"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 35, 9, "enum_NEXT_SYNTAX"], [36, 2, 10, "enum_LAST_LEXICAL_USE"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [38, 23, 10, "enum_LAST_LEXICAL_USE"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [41, 25, 10, "enum_LAST_LEXICAL_USE"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 48, 9, "enum_NEXT_SYNTAX"], [49, 36, 10, "enum_LAST_LEXICAL_USE"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [55, 41, 10, "enum_LAST_LEXICAL_USE"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 58, 9, "enum_NEXT_SYNTAX"], [59, 49, 10, "enum_LAST_LEXICAL_USE"], [58, 59, 9, "enum_NEXT_SYNTAX"], [3, 8, 1, "enum_CFG_NEXT"], [8, 15, 1, "enum_CFG_NEXT"], [15, 48, 1, "enum_CFG_NEXT"], [15, 31, 1, "enum_CFG_NEXT"], [31, 24, 1, "enum_CFG_NEXT"], [24, 35, 1, "enum_CFG_NEXT"], [24, 58, 1, "enum_CFG_NEXT"], [35, 24, 1, "enum_CFG_NEXT"], [48, 58, 1, "enum_CFG_NEXT"], [14, 4, 3, "enum_LAST_WRITE"], [28, 14, 2, "enum_LAST_READ"], [28, 4, 3, "enum_LAST_WRITE"], [23, 38, 2, "enum_LAST_READ"], [23, 23, 3, "enum_LAST_WRITE"], [25, 41, 2, "enum_LAST_READ"], [25, 25, 3, "enum_LAST_WRITE"], [41, 41, 2, "enum_LAST_READ"], [41, 25, 3, "enum_LAST_WRITE"], [36, 36, 2, "enum_LAST_READ"], [36, 2, 3, "enum_LAST_WRITE"], [38, 38, 2, "enum_LAST_READ"], [38, 23, 3, "enum_LAST_WRITE"], [49, 2, 3, "enum_LAST_WRITE"], [59, 49, 2, "enum_LAST_READ"], [59, 36, 2, "enum_LAST_READ"], [59, 2, 3, "enum_LAST_WRITE"]], "error_location": 55, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/jiosue/qubovert.git", "old_path": "qubovert/utils/_dict_arithmetic.py", "hash": "11782cc691038742a250ee53b863c413f28b6455", "code": "def __isub__(self, other: Union[Dict, Any]) -> \"DictArithmetic\":\n    \"\"\"__isub__.\n\n    Same as the __sub__ method, but done in place.\n\n    Parameters\n    ----------\n    other : a DictArithmetic or dict object.\n\n    Returns\n    -------\n    d : a DictArithmetic object, self.\n\n    Examples\n    --------\n    >>> d = DictArithmetic({(0, 0): 1, (0, 1): -1})\n    >>> g = {(0, 0): 2, (0, 1): 1}\n    >>> d -= g\n    >>> print(d)  # will print {(0, 0): -1}\n\n    \"\"\"\n    if isinstance(other, dict):\n        for k, v in other.items():\n            self[k] -= v\n    else:\n        self[()] -= v\n    return self\n", "rewrite": "ReplaceText(target='other' @(332,24)->(332,25))", "error_line": 25, "has_bug": true, "code_full": "from typing import Any, Dict, Union\n\n\nclass DictArithmetic(Dict):\n\n    def __isub__(self, other: Union[Dict, Any]) -> \"DictArithmetic\":\n        \"\"\"__isub__.\n\n        Same as the __sub__ method, but done in place.\n\n        Parameters\n        ----------\n        other : a DictArithmetic or dict object.\n\n        Returns\n        -------\n        d : a DictArithmetic object, self.\n\n        Examples\n        --------\n        >>> d = DictArithmetic({(0, 0): 1, (0, 1): -1})\n        >>> g = {(0, 0): 2, (0, 1): 1}\n        >>> d -= g\n        >>> print(d)  # will print {(0, 0): -1}\n\n        \"\"\"\n        if isinstance(other, dict):\n            for k, v in other.items():\n                self[k] -= v\n        else:\n            self[()] -= v\n        return self\n", "error_location_char": [578, 579], "type_checked_pytype": false, "type_error_label": "name-error", "type_checked_mypy": false}
{"source_tokens": ["#NEWLINE#", "def apres_match(", "self", ",", "game", ")", ":", "#NEWLINE#", "#INDENT#", "' Deal with updating of knockout stage '", "#NEWLINE#", "if", "(", "game", ".", "number", "==", "63", ")", ":", "#NEWLINE#", "#INDENT#", "print", "(", "'third place:'", ",", "game", ".", "winner", "(", ")", ")", "#NEWLINE#", "return", "#NEWLINE#", "#UNINDENT#", "if", "(", "game", ".", "number", "==", "64", ")", ":", "#NEWLINE#", "#INDENT#", "print", "(", "'Winner:'", ",", "game", ".", "winner", "(", ")", ")", "#NEWLINE#", "return", "#NEWLINE#", "#UNINDENT#", "if", "game", ".", "is_group", "(", ")", ":", "#NEWLINE#", "#INDENT#", "group", "=", "game", ".", "group", "#NEWLINE#", "group", ".", "played", "+=", "1", "#NEWLINE#", "key", "=", "game", ".", "label", ".", "lower", "(", ")", "#NEWLINE#", "(", "kgame", ",", "label", ")", "=", "self", ".", "winners", "[", "key", "]", "#NEWLINE#", "wteam", "=", "group", ".", "winner", "(", ")", "#NEWLINE#", "setattr", "(", "kgame", ",", "label", ",", "wteam", ")", "#NEWLINE#", "if", "group", ".", "is_finished", "(", ")", ":", "#NEWLINE#", "#INDENT#", "wteam", ".", "games", ".", "append", "(", "game", ")", "#NEWLINE#", "#UNINDENT#", "(", "kgame", ",", "label", ")", "=", "self", ".", "seconds", "[", "key", "]", "#NEWLINE#", "steam", "=", "group", ".", "second", "(", ")", "#NEWLINE#", "setattr", "(", "kgame", ",", "label", ",", "group", ".", "second", "(", ")", ")", "#NEWLINE#", "if", "group", ".", "is_finished", "(", ")", ":", "#NEWLINE#", "#INDENT#", "steam", ".", "games", ".", "append", "(", "game", ")", "#NEWLINE#", "for", "team", "in", "group", ".", "teams", ":", "#NEWLINE#", "#INDENT#", "out", "=", "Game", "(", "None", ",", "None", ",", "game", ".", "when", ",", "where", "=", "NorthPole", "(", ")", ")", "#NEWLINE#", "if", "(", "team", "not in", "(", "wteam", ",", "steam", ")", ")", ":", "#NEWLINE#", "#INDENT#", "print", "(", "'out'", ",", "team", ")", "#NEWLINE#", "team", ".", "games", ".", "append", "(", "out", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "(", "kgame", ",", "label", ")", "=", "self", ".", "winners", "[", "game", ".", "number", "]", "#NEWLINE#", "wteam", "=", "game", ".", "winner", "(", ")", "#NEWLINE#", "setattr", "(", "kgame", ",", "label", ",", "game", ".", "winner", "(", ")", ")", "#NEWLINE#", "wteam", ".", "games", ".", "append", "(", "kgame", ")", "#NEWLINE#", "if", "(", "game", ".", "number", "in", "self", ".", "seconds", ")", ":", "#NEWLINE#", "#INDENT#", "(", "kgame", ",", "label", ")", "=", "self", ".", "seconds", "[", "game", ".", "number", "]", "#NEWLINE#", "lteam", "=", "game", ".", "loser", "(", ")", "#NEWLINE#", "setattr", "(", "kgame", ",", "label", ",", "lteam", ")", "#NEWLINE#", "lteam", ".", "games", ".", "append", "(", "kgame", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "game", ".", "loser", "(", ")", ".", "go_home", "(", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [8, 9, 7, "enum_FIELD"], [11, 16, 7, "enum_FIELD"], [36, 41, 7, "enum_FIELD"], [67, 65, 7, "enum_FIELD"], [16, 14, 7, "enum_FIELD"], [21, 25, 7, "enum_FIELD"], [41, 39, 7, "enum_FIELD"], [46, 50, 7, "enum_FIELD"], [65, 63, 7, "enum_FIELD"], [69, 73, 7, "enum_FIELD"], [75, 77, 7, "enum_FIELD"], [75, 80, 7, "enum_FIELD"], [81, 89, 7, "enum_FIELD"], [91, 101, 7, "enum_FIELD"], [104, 110, 7, "enum_FIELD"], [112, 116, 7, "enum_FIELD"], [122, 126, 7, "enum_FIELD"], [140, 150, 7, "enum_FIELD"], [153, 159, 7, "enum_FIELD"], [161, 165, 7, "enum_FIELD"], [175, 179, 7, "enum_FIELD"], [257, 267, 7, "enum_FIELD"], [272, 278, 7, "enum_FIELD"], [280, 284, 7, "enum_FIELD"], [293, 299, 7, "enum_FIELD"], [313, 308, 7, "enum_FIELD"], [14, 13, 7, "enum_FIELD"], [25, 22, 7, "enum_FIELD"], [39, 38, 7, "enum_FIELD"], [50, 47, 7, "enum_FIELD"], [63, 62, 7, "enum_FIELD"], [73, 72, 7, "enum_FIELD"], [77, 76, 7, "enum_FIELD"], [89, 87, 7, "enum_FIELD"], [101, 99, 7, "enum_FIELD"], [101, 102, 7, "enum_FIELD"], [110, 108, 7, "enum_FIELD"], [116, 113, 7, "enum_FIELD"], [126, 124, 7, "enum_FIELD"], [130, 136, 7, "enum_FIELD"], [150, 148, 7, "enum_FIELD"], [150, 151, 7, "enum_FIELD"], [159, 157, 7, "enum_FIELD"], [165, 162, 7, "enum_FIELD"], [179, 177, 7, "enum_FIELD"], [183, 189, 7, "enum_FIELD"], [195, 194, 7, "enum_FIELD"], [195, 197, 7, "enum_FIELD"], [267, 265, 7, "enum_FIELD"], [267, 269, 7, "enum_FIELD"], [278, 276, 7, "enum_FIELD"], [284, 281, 7, "enum_FIELD"], [299, 297, 7, "enum_FIELD"], [308, 306, 7, "enum_FIELD"], [315, 325, 7, "enum_FIELD"], [330, 336, 7, "enum_FIELD"], [338, 342, 7, "enum_FIELD"], [347, 353, 7, "enum_FIELD"], [361, 369, 7, "enum_FIELD"], [29, 27, 7, "enum_FIELD"], [54, 52, 7, "enum_FIELD"], [87, 85, 7, "enum_FIELD"], [99, 98, 7, "enum_FIELD"], [108, 107, 7, "enum_FIELD"], [124, 123, 7, "enum_FIELD"], [136, 134, 7, "enum_FIELD"], [148, 147, 7, "enum_FIELD"], [157, 156, 7, "enum_FIELD"], [171, 169, 7, "enum_FIELD"], [177, 176, 7, "enum_FIELD"], [189, 187, 7, "enum_FIELD"], [197, 196, 7, "enum_FIELD"], [201, 209, 7, "enum_FIELD"], [221, 224, 7, "enum_FIELD"], [265, 264, 7, "enum_FIELD"], [269, 268, 7, "enum_FIELD"], [276, 275, 7, "enum_FIELD"], [290, 288, 7, "enum_FIELD"], [297, 295, 7, "enum_FIELD"], [306, 305, 7, "enum_FIELD"], [310, 309, 7, "enum_FIELD"], [325, 323, 7, "enum_FIELD"], [325, 327, 7, "enum_FIELD"], [336, 334, 7, "enum_FIELD"], [342, 339, 7, "enum_FIELD"], [353, 351, 7, "enum_FIELD"], [369, 367, 7, "enum_FIELD"], [27, 26, 7, "enum_FIELD"], [52, 51, 7, "enum_FIELD"], [85, 84, 7, "enum_FIELD"], [134, 132, 7, "enum_FIELD"], [169, 168, 7, "enum_FIELD"], [187, 185, 7, "enum_FIELD"], [209, 204, 7, "enum_FIELD"], [224, 223, 7, "enum_FIELD"], [233, 237, 7, "enum_FIELD"], [240, 246, 7, "enum_FIELD"], [288, 287, 7, "enum_FIELD"], [295, 294, 7, "enum_FIELD"], [323, 322, 7, "enum_FIELD"], [327, 326, 7, "enum_FIELD"], [334, 333, 7, "enum_FIELD"], [351, 349, 7, "enum_FIELD"], [367, 365, 7, "enum_FIELD"], [132, 131, 7, "enum_FIELD"], [185, 184, 7, "enum_FIELD"], [211, 210, 7, "enum_FIELD"], [214, 217, 7, "enum_FIELD"], [237, 234, 7, "enum_FIELD"], [246, 244, 7, "enum_FIELD"], [349, 348, 7, "enum_FIELD"], [365, 363, 7, "enum_FIELD"], [217, 216, 7, "enum_FIELD"], [244, 242, 7, "enum_FIELD"], [363, 362, 7, "enum_FIELD"], [242, 241, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [13, 4, 10, "enum_LAST_LEXICAL_USE"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [26, 13, 10, "enum_LAST_LEXICAL_USE"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 33, 9, "enum_NEXT_SYNTAX"], [33, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [38, 26, 10, "enum_LAST_LEXICAL_USE"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 46, 9, "enum_NEXT_SYNTAX"], [47, 22, 10, "enum_LAST_LEXICAL_USE"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [51, 38, 10, "enum_LAST_LEXICAL_USE"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 58, 9, "enum_NEXT_SYNTAX"], [58, 61, 9, "enum_NEXT_SYNTAX"], [62, 51, 10, "enum_LAST_LEXICAL_USE"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [72, 62, 10, "enum_LAST_LEXICAL_USE"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [76, 70, 10, "enum_LAST_LEXICAL_USE"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [84, 72, 10, "enum_LAST_LEXICAL_USE"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [98, 2, 10, "enum_LAST_LEXICAL_USE"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [102, 82, 10, "enum_LAST_LEXICAL_USE"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [107, 76, 10, "enum_LAST_LEXICAL_USE"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [115, 93, 10, "enum_LAST_LEXICAL_USE"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [117, 95, 10, "enum_LAST_LEXICAL_USE"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [119, 105, 10, "enum_LAST_LEXICAL_USE"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 122, 9, "enum_NEXT_SYNTAX"], [123, 107, 10, "enum_LAST_LEXICAL_USE"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 130, 9, "enum_NEXT_SYNTAX"], [131, 119, 10, "enum_LAST_LEXICAL_USE"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [137, 84, 10, "enum_LAST_LEXICAL_USE"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [142, 115, 10, "enum_LAST_LEXICAL_USE"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [144, 117, 10, "enum_LAST_LEXICAL_USE"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [147, 98, 10, "enum_LAST_LEXICAL_USE"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [151, 102, 10, "enum_LAST_LEXICAL_USE"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [156, 123, 10, "enum_LAST_LEXICAL_USE"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [162, 113, 10, "enum_LAST_LEXICAL_USE"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [164, 142, 10, "enum_LAST_LEXICAL_USE"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [166, 144, 10, "enum_LAST_LEXICAL_USE"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [168, 156, 10, "enum_LAST_LEXICAL_USE"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 175, 9, "enum_NEXT_SYNTAX"], [176, 168, 10, "enum_LAST_LEXICAL_USE"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 183, 9, "enum_NEXT_SYNTAX"], [184, 154, 10, "enum_LAST_LEXICAL_USE"], [183, 184, 9, "enum_NEXT_SYNTAX"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [187, 188, 9, "enum_NEXT_SYNTAX"], [188, 189, 9, "enum_NEXT_SYNTAX"], [190, 137, 10, "enum_LAST_LEXICAL_USE"], [189, 190, 9, "enum_NEXT_SYNTAX"], [190, 191, 9, "enum_NEXT_SYNTAX"], [191, 193, 9, "enum_NEXT_SYNTAX"], [193, 194, 9, "enum_NEXT_SYNTAX"], [194, 195, 9, "enum_NEXT_SYNTAX"], [196, 176, 10, "enum_LAST_LEXICAL_USE"], [195, 196, 9, "enum_NEXT_SYNTAX"], [196, 197, 9, "enum_NEXT_SYNTAX"], [197, 198, 9, "enum_NEXT_SYNTAX"], [198, 199, 9, "enum_NEXT_SYNTAX"], [199, 201, 9, "enum_NEXT_SYNTAX"], [201, 202, 9, "enum_NEXT_SYNTAX"], [202, 203, 9, "enum_NEXT_SYNTAX"], [203, 204, 9, "enum_NEXT_SYNTAX"], [204, 205, 9, "enum_NEXT_SYNTAX"], [205, 206, 9, "enum_NEXT_SYNTAX"], [206, 207, 9, "enum_NEXT_SYNTAX"], [207, 208, 9, "enum_NEXT_SYNTAX"], [208, 209, 9, "enum_NEXT_SYNTAX"], [210, 190, 10, "enum_LAST_LEXICAL_USE"], [209, 210, 9, "enum_NEXT_SYNTAX"], [210, 211, 9, "enum_NEXT_SYNTAX"], [211, 212, 9, "enum_NEXT_SYNTAX"], [212, 213, 9, "enum_NEXT_SYNTAX"], [213, 214, 9, "enum_NEXT_SYNTAX"], [214, 215, 9, "enum_NEXT_SYNTAX"], [215, 216, 9, "enum_NEXT_SYNTAX"], [216, 217, 9, "enum_NEXT_SYNTAX"], [217, 218, 9, "enum_NEXT_SYNTAX"], [218, 219, 9, "enum_NEXT_SYNTAX"], [219, 221, 9, "enum_NEXT_SYNTAX"], [221, 222, 9, "enum_NEXT_SYNTAX"], [223, 194, 10, "enum_LAST_LEXICAL_USE"], [222, 223, 9, "enum_NEXT_SYNTAX"], [223, 224, 9, "enum_NEXT_SYNTAX"], [224, 225, 9, "enum_NEXT_SYNTAX"], [226, 131, 10, "enum_LAST_LEXICAL_USE"], [225, 226, 9, "enum_NEXT_SYNTAX"], [226, 227, 9, "enum_NEXT_SYNTAX"], [228, 184, 10, "enum_LAST_LEXICAL_USE"], [227, 228, 9, "enum_NEXT_SYNTAX"], [228, 229, 9, "enum_NEXT_SYNTAX"], [229, 230, 9, "enum_NEXT_SYNTAX"], [230, 231, 9, "enum_NEXT_SYNTAX"], [231, 233, 9, "enum_NEXT_SYNTAX"], [234, 47, 10, "enum_LAST_LEXICAL_USE"], [233, 234, 9, "enum_NEXT_SYNTAX"], [234, 235, 9, "enum_NEXT_SYNTAX"], [235, 236, 9, "enum_NEXT_SYNTAX"], [236, 237, 9, "enum_NEXT_SYNTAX"], [238, 223, 10, "enum_LAST_LEXICAL_USE"], [237, 238, 9, "enum_NEXT_SYNTAX"], [238, 239, 9, "enum_NEXT_SYNTAX"], [239, 240, 9, "enum_NEXT_SYNTAX"], [241, 238, 10, "enum_LAST_LEXICAL_USE"], [240, 241, 9, "enum_NEXT_SYNTAX"], [241, 242, 9, "enum_NEXT_SYNTAX"], [242, 243, 9, "enum_NEXT_SYNTAX"], [243, 244, 9, "enum_NEXT_SYNTAX"], [244, 245, 9, "enum_NEXT_SYNTAX"], [245, 246, 9, "enum_NEXT_SYNTAX"], [247, 202, 10, "enum_LAST_LEXICAL_USE"], [246, 247, 9, "enum_NEXT_SYNTAX"], [247, 248, 9, "enum_NEXT_SYNTAX"], [248, 254, 9, "enum_NEXT_SYNTAX"], [254, 255, 9, "enum_NEXT_SYNTAX"], [255, 257, 9, "enum_NEXT_SYNTAX"], [257, 258, 9, "enum_NEXT_SYNTAX"], [259, 164, 10, "enum_LAST_LEXICAL_USE"], [258, 259, 9, "enum_NEXT_SYNTAX"], [259, 260, 9, "enum_NEXT_SYNTAX"], [261, 166, 10, "enum_LAST_LEXICAL_USE"], [260, 261, 9, "enum_NEXT_SYNTAX"], [261, 262, 9, "enum_NEXT_SYNTAX"], [262, 263, 9, "enum_NEXT_SYNTAX"], [264, 147, 10, "enum_LAST_LEXICAL_USE"], [263, 264, 9, "enum_NEXT_SYNTAX"], [264, 265, 9, "enum_NEXT_SYNTAX"], [265, 266, 9, "enum_NEXT_SYNTAX"], [266, 267, 9, "enum_NEXT_SYNTAX"], [268, 210, 10, "enum_LAST_LEXICAL_USE"], [267, 268, 9, "enum_NEXT_SYNTAX"], [268, 269, 9, "enum_NEXT_SYNTAX"], [269, 270, 9, "enum_NEXT_SYNTAX"], [270, 271, 9, "enum_NEXT_SYNTAX"], [271, 272, 9, "enum_NEXT_SYNTAX"], [273, 226, 10, "enum_LAST_LEXICAL_USE"], [272, 273, 9, "enum_NEXT_SYNTAX"], [273, 274, 9, "enum_NEXT_SYNTAX"], [275, 268, 10, "enum_LAST_LEXICAL_USE"], [274, 275, 9, "enum_NEXT_SYNTAX"], [275, 276, 9, "enum_NEXT_SYNTAX"], [276, 277, 9, "enum_NEXT_SYNTAX"], [277, 278, 9, "enum_NEXT_SYNTAX"], [278, 279, 9, "enum_NEXT_SYNTAX"], [279, 280, 9, "enum_NEXT_SYNTAX"], [281, 162, 10, "enum_LAST_LEXICAL_USE"], [280, 281, 9, "enum_NEXT_SYNTAX"], [281, 282, 9, "enum_NEXT_SYNTAX"], [283, 259, 10, "enum_LAST_LEXICAL_USE"], [282, 283, 9, "enum_NEXT_SYNTAX"], [283, 284, 9, "enum_NEXT_SYNTAX"], [285, 261, 10, "enum_LAST_LEXICAL_USE"], [284, 285, 9, "enum_NEXT_SYNTAX"], [285, 286, 9, "enum_NEXT_SYNTAX"], [287, 275, 10, "enum_LAST_LEXICAL_USE"], [286, 287, 9, "enum_NEXT_SYNTAX"], [287, 288, 9, "enum_NEXT_SYNTAX"], [288, 289, 9, "enum_NEXT_SYNTAX"], [289, 290, 9, "enum_NEXT_SYNTAX"], [290, 291, 9, "enum_NEXT_SYNTAX"], [291, 292, 9, "enum_NEXT_SYNTAX"], [292, 293, 9, "enum_NEXT_SYNTAX"], [294, 273, 10, "enum_LAST_LEXICAL_USE"], [293, 294, 9, "enum_NEXT_SYNTAX"], [294, 295, 9, "enum_NEXT_SYNTAX"], [295, 296, 9, "enum_NEXT_SYNTAX"], [296, 297, 9, "enum_NEXT_SYNTAX"], [297, 298, 9, "enum_NEXT_SYNTAX"], [298, 299, 9, "enum_NEXT_SYNTAX"], [300, 283, 10, "enum_LAST_LEXICAL_USE"], [299, 300, 9, "enum_NEXT_SYNTAX"], [300, 301, 9, "enum_NEXT_SYNTAX"], [301, 303, 9, "enum_NEXT_SYNTAX"], [303, 304, 9, "enum_NEXT_SYNTAX"], [305, 287, 10, "enum_LAST_LEXICAL_USE"], [304, 305, 9, "enum_NEXT_SYNTAX"], [305, 306, 9, "enum_NEXT_SYNTAX"], [306, 307, 9, "enum_NEXT_SYNTAX"], [307, 308, 9, "enum_NEXT_SYNTAX"], [309, 264, 10, "enum_LAST_LEXICAL_USE"], [308, 309, 9, "enum_NEXT_SYNTAX"], [309, 310, 9, "enum_NEXT_SYNTAX"], [310, 311, 9, "enum_NEXT_SYNTAX"], [311, 312, 9, "enum_NEXT_SYNTAX"], [312, 313, 9, "enum_NEXT_SYNTAX"], [313, 315, 9, "enum_NEXT_SYNTAX"], [315, 316, 9, "enum_NEXT_SYNTAX"], [317, 300, 10, "enum_LAST_LEXICAL_USE"], [316, 317, 9, "enum_NEXT_SYNTAX"], [317, 318, 9, "enum_NEXT_SYNTAX"], [319, 285, 10, "enum_LAST_LEXICAL_USE"], [318, 319, 9, "enum_NEXT_SYNTAX"], [319, 320, 9, "enum_NEXT_SYNTAX"], [320, 321, 9, "enum_NEXT_SYNTAX"], [322, 309, 10, "enum_LAST_LEXICAL_USE"], [321, 322, 9, "enum_NEXT_SYNTAX"], [322, 323, 9, "enum_NEXT_SYNTAX"], [323, 324, 9, "enum_NEXT_SYNTAX"], [324, 325, 9, "enum_NEXT_SYNTAX"], [326, 305, 10, "enum_LAST_LEXICAL_USE"], [325, 326, 9, "enum_NEXT_SYNTAX"], [326, 327, 9, "enum_NEXT_SYNTAX"], [327, 328, 9, "enum_NEXT_SYNTAX"], [328, 329, 9, "enum_NEXT_SYNTAX"], [329, 330, 9, "enum_NEXT_SYNTAX"], [330, 331, 9, "enum_NEXT_SYNTAX"], [331, 332, 9, "enum_NEXT_SYNTAX"], [333, 326, 10, "enum_LAST_LEXICAL_USE"], [332, 333, 9, "enum_NEXT_SYNTAX"], [333, 334, 9, "enum_NEXT_SYNTAX"], [334, 335, 9, "enum_NEXT_SYNTAX"], [335, 336, 9, "enum_NEXT_SYNTAX"], [336, 337, 9, "enum_NEXT_SYNTAX"], [337, 338, 9, "enum_NEXT_SYNTAX"], [339, 281, 10, "enum_LAST_LEXICAL_USE"], [338, 339, 9, "enum_NEXT_SYNTAX"], [339, 340, 9, "enum_NEXT_SYNTAX"], [341, 317, 10, "enum_LAST_LEXICAL_USE"], [340, 341, 9, "enum_NEXT_SYNTAX"], [341, 342, 9, "enum_NEXT_SYNTAX"], [343, 319, 10, "enum_LAST_LEXICAL_USE"], [342, 343, 9, "enum_NEXT_SYNTAX"], [343, 344, 9, "enum_NEXT_SYNTAX"], [345, 331, 10, "enum_LAST_LEXICAL_USE"], [344, 345, 9, "enum_NEXT_SYNTAX"], [345, 346, 9, "enum_NEXT_SYNTAX"], [346, 347, 9, "enum_NEXT_SYNTAX"], [348, 345, 10, "enum_LAST_LEXICAL_USE"], [347, 348, 9, "enum_NEXT_SYNTAX"], [348, 349, 9, "enum_NEXT_SYNTAX"], [349, 350, 9, "enum_NEXT_SYNTAX"], [350, 351, 9, "enum_NEXT_SYNTAX"], [351, 352, 9, "enum_NEXT_SYNTAX"], [352, 353, 9, "enum_NEXT_SYNTAX"], [354, 341, 10, "enum_LAST_LEXICAL_USE"], [353, 354, 9, "enum_NEXT_SYNTAX"], [354, 355, 9, "enum_NEXT_SYNTAX"], [355, 358, 9, "enum_NEXT_SYNTAX"], [358, 359, 9, "enum_NEXT_SYNTAX"], [359, 361, 9, "enum_NEXT_SYNTAX"], [362, 333, 10, "enum_LAST_LEXICAL_USE"], [361, 362, 9, "enum_NEXT_SYNTAX"], [362, 363, 9, "enum_NEXT_SYNTAX"], [363, 364, 9, "enum_NEXT_SYNTAX"], [364, 365, 9, "enum_NEXT_SYNTAX"], [365, 366, 9, "enum_NEXT_SYNTAX"], [366, 367, 9, "enum_NEXT_SYNTAX"], [367, 368, 9, "enum_NEXT_SYNTAX"], [368, 369, 9, "enum_NEXT_SYNTAX"], [369, 370, 9, "enum_NEXT_SYNTAX"], [3, 8, 1, "enum_CFG_NEXT"], [8, 16, 1, "enum_CFG_NEXT"], [16, 41, 1, "enum_CFG_NEXT"], [16, 21, 1, "enum_CFG_NEXT"], [21, 33, 1, "enum_CFG_NEXT"], [41, 65, 1, "enum_CFG_NEXT"], [41, 46, 1, "enum_CFG_NEXT"], [46, 58, 1, "enum_CFG_NEXT"], [65, 69, 1, "enum_CFG_NEXT"], [65, 257, 1, "enum_CFG_NEXT"], [69, 75, 1, "enum_CFG_NEXT"], [75, 81, 1, "enum_CFG_NEXT"], [81, 91, 1, "enum_CFG_NEXT"], [91, 104, 1, "enum_CFG_NEXT"], [104, 112, 1, "enum_CFG_NEXT"], [112, 126, 1, "enum_CFG_NEXT"], [126, 140, 1, "enum_CFG_NEXT"], [126, 130, 1, "enum_CFG_NEXT"], [130, 140, 1, "enum_CFG_NEXT"], [140, 153, 1, "enum_CFG_NEXT"], [153, 161, 1, "enum_CFG_NEXT"], [161, 179, 1, "enum_CFG_NEXT"], [179, 183, 1, "enum_CFG_NEXT"], [183, 197, 1, "enum_CFG_NEXT"], [197, 194, 1, "enum_CFG_NEXT"], [194, 201, 1, "enum_CFG_NEXT"], [201, 224, 1, "enum_CFG_NEXT"], [224, 233, 1, "enum_CFG_NEXT"], [224, 194, 1, "enum_CFG_NEXT"], [233, 240, 1, "enum_CFG_NEXT"], [240, 194, 1, "enum_CFG_NEXT"], [257, 272, 1, "enum_CFG_NEXT"], [272, 280, 1, "enum_CFG_NEXT"], [280, 293, 1, "enum_CFG_NEXT"], [293, 308, 1, "enum_CFG_NEXT"], [308, 361, 1, "enum_CFG_NEXT"], [308, 315, 1, "enum_CFG_NEXT"], [315, 330, 1, "enum_CFG_NEXT"], [330, 338, 1, "enum_CFG_NEXT"], [338, 347, 1, "enum_CFG_NEXT"], [13, 4, 3, "enum_LAST_WRITE"], [26, 13, 2, "enum_LAST_READ"], [26, 4, 3, "enum_LAST_WRITE"], [38, 13, 2, "enum_LAST_READ"], [38, 4, 3, "enum_LAST_WRITE"], [51, 38, 2, "enum_LAST_READ"], [51, 4, 3, "enum_LAST_WRITE"], [62, 38, 2, "enum_LAST_READ"], [62, 4, 3, "enum_LAST_WRITE"], [72, 62, 2, "enum_LAST_READ"], [72, 4, 3, "enum_LAST_WRITE"], [76, 70, 3, "enum_LAST_WRITE"], [84, 72, 2, "enum_LAST_READ"], [84, 4, 3, "enum_LAST_WRITE"], [98, 2, 3, "enum_LAST_WRITE"], [102, 82, 3, "enum_LAST_WRITE"], [107, 76, 2, "enum_LAST_READ"], [107, 70, 3, "enum_LAST_WRITE"], [115, 93, 3, "enum_LAST_WRITE"], [117, 95, 3, "enum_LAST_WRITE"], [119, 105, 3, "enum_LAST_WRITE"], [123, 107, 2, "enum_LAST_READ"], [123, 70, 3, "enum_LAST_WRITE"], [131, 119, 2, "enum_LAST_READ"], [131, 105, 3, "enum_LAST_WRITE"], [137, 84, 2, "enum_LAST_READ"], [137, 4, 3, "enum_LAST_WRITE"], [147, 98, 2, "enum_LAST_READ"], [147, 2, 3, "enum_LAST_WRITE"], [151, 102, 2, "enum_LAST_READ"], [151, 82, 3, "enum_LAST_WRITE"], [142, 115, 2, "enum_LAST_READ"], [142, 93, 3, "enum_LAST_WRITE"], [144, 117, 2, "enum_LAST_READ"], [144, 95, 3, "enum_LAST_WRITE"], [156, 123, 2, "enum_LAST_READ"], [156, 70, 3, "enum_LAST_WRITE"], [162, 113, 2, "enum_LAST_READ"], [164, 115, 2, "enum_LAST_READ"], [164, 142, 3, "enum_LAST_WRITE"], [166, 117, 2, "enum_LAST_READ"], [166, 144, 3, "enum_LAST_WRITE"], [168, 156, 2, "enum_LAST_READ"], [168, 70, 3, "enum_LAST_WRITE"], [176, 168, 2, "enum_LAST_READ"], [176, 70, 3, "enum_LAST_WRITE"], [184, 154, 3, "enum_LAST_WRITE"], [190, 137, 2, "enum_LAST_READ"], [190, 84, 2, "enum_LAST_READ"], [190, 4, 3, "enum_LAST_WRITE"], [196, 176, 2, "enum_LAST_READ"], [196, 70, 3, "enum_LAST_WRITE"], [194, 223, 2, "enum_LAST_READ"], [194, 241, 2, "enum_LAST_READ"], [194, 194, 3, "enum_LAST_WRITE"], [204, 204, 2, "enum_LAST_READ"], [210, 210, 2, "enum_LAST_READ"], [210, 190, 2, "enum_LAST_READ"], [210, 4, 3, "enum_LAST_WRITE"], [216, 216, 2, "enum_LAST_READ"], [202, 247, 2, "enum_LAST_READ"], [202, 202, 3, "enum_LAST_WRITE"], [223, 223, 2, "enum_LAST_READ"], [223, 241, 2, "enum_LAST_READ"], [223, 194, 3, "enum_LAST_WRITE"], [226, 119, 2, "enum_LAST_READ"], [226, 226, 2, "enum_LAST_READ"], [226, 131, 2, "enum_LAST_READ"], [226, 105, 3, "enum_LAST_WRITE"], [228, 184, 2, "enum_LAST_READ"], [228, 228, 2, "enum_LAST_READ"], [228, 154, 3, "enum_LAST_WRITE"], [234, 234, 2, "enum_LAST_READ"], [238, 223, 2, "enum_LAST_READ"], [238, 194, 3, "enum_LAST_WRITE"], [241, 238, 2, "enum_LAST_READ"], [241, 194, 3, "enum_LAST_WRITE"], [247, 247, 2, "enum_LAST_READ"], [247, 202, 3, "enum_LAST_WRITE"], [264, 2, 3, "enum_LAST_WRITE"], [268, 62, 2, "enum_LAST_READ"], [268, 4, 3, "enum_LAST_WRITE"], [275, 268, 2, "enum_LAST_READ"], [275, 4, 3, "enum_LAST_WRITE"], [283, 259, 3, "enum_LAST_WRITE"], [285, 261, 3, "enum_LAST_WRITE"], [287, 275, 2, "enum_LAST_READ"], [287, 4, 3, "enum_LAST_WRITE"], [294, 273, 3, "enum_LAST_WRITE"], [300, 283, 2, "enum_LAST_READ"], [300, 259, 3, "enum_LAST_WRITE"], [305, 287, 2, "enum_LAST_READ"], [305, 4, 3, "enum_LAST_WRITE"], [309, 264, 2, "enum_LAST_READ"], [309, 2, 3, "enum_LAST_WRITE"], [322, 309, 2, "enum_LAST_READ"], [322, 2, 3, "enum_LAST_WRITE"], [326, 305, 2, "enum_LAST_READ"], [326, 4, 3, "enum_LAST_WRITE"], [317, 300, 2, "enum_LAST_READ"], [317, 259, 3, "enum_LAST_WRITE"], [319, 285, 2, "enum_LAST_READ"], [319, 261, 3, "enum_LAST_WRITE"], [333, 326, 2, "enum_LAST_READ"], [333, 4, 3, "enum_LAST_WRITE"], [339, 281, 2, "enum_LAST_READ"], [341, 300, 2, "enum_LAST_READ"], [341, 317, 3, "enum_LAST_WRITE"], [343, 285, 2, "enum_LAST_READ"], [343, 319, 3, "enum_LAST_WRITE"], [345, 331, 3, "enum_LAST_WRITE"], [348, 345, 2, "enum_LAST_READ"], [348, 331, 3, "enum_LAST_WRITE"], [354, 341, 2, "enum_LAST_READ"], [354, 317, 3, "enum_LAST_WRITE"], [362, 305, 2, "enum_LAST_READ"], [362, 4, 3, "enum_LAST_WRITE"], [70, 72, 4, "enum_COMPUTED_FROM"], [82, 84, 4, "enum_COMPUTED_FROM"], [94, 102, 4, "enum_COMPUTED_FROM"], [94, 98, 4, "enum_COMPUTED_FROM"], [105, 107, 4, "enum_COMPUTED_FROM"], [143, 151, 4, "enum_COMPUTED_FROM"], [143, 147, 4, "enum_COMPUTED_FROM"], [154, 156, 4, "enum_COMPUTED_FROM"], [260, 264, 4, "enum_COMPUTED_FROM"], [260, 268, 4, "enum_COMPUTED_FROM"], [273, 275, 4, "enum_COMPUTED_FROM"], [318, 322, 4, "enum_COMPUTED_FROM"], [318, 326, 4, "enum_COMPUTED_FROM"], [331, 333, 4, "enum_COMPUTED_FROM"], [202, 204, 4, "enum_COMPUTED_FROM"], [202, 210, 4, "enum_COMPUTED_FROM"], [202, 216, 4, "enum_COMPUTED_FROM"]], "error_location": 137, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/swfiua/karmapi.git", "old_path": "karmapi/wc.py", "hash": "b0380f746dc68f7fec78d6ab0e425b6259336ce8", "code": "    def apres_match(self, game: Game):\n        \"\"\" Deal with updating of knockout stage \"\"\"\n\n        if game.number == 63:\n            print('third place:', game.winner())\n            return\n        if game.number == 64:\n            print('Winner:', game.winner())\n            return\n            \n        if game.is_group():\n            group: Group = game.group\n            group.played += 1\n            \n            key: str = game.label.lower()\n            kgame, label = self.winners[key]\n            wteam = group.winner()\n            setattr(kgame, label, wteam)\n            if group.is_finished():\n                wteam.games.append(game)\n                \n            kgame, label = self.seconds[key]\n            steam: Team = group.second()\n            setattr(kgame, label, group.second())\n            if group.is_finished():\n                steam.games.append(game)\n\n                for team in group.teams:\n                    out: Game = Game(None, None, game.when, where=NorthPole())\n                    if team not in (wteam, steam):\n                        print('out', team)\n                        team.games.append(out)\n\n        else:\n            kgame, label = self.winners[game.number]\n            wteam: Team = game.winner()\n            setattr(kgame, label, game.winner())\n            wteam.games.append(kgame)\n\n            if game.number in self.seconds:\n                kgame, label = self.seconds[game.number]\n                lteam: Team = game.loser()\n                setattr(kgame, label, lteam)\n                lteam.games.append(kgame)\n            else:\n                game.loser().go_home()\n", "rewrite": "ReplaceText(target='kgame' @(795,35)->(795,39))", "error_line": 19, "has_bug": true, "code_full": "from typing import Dict, List, Optional, Tuple, Union\n\n\nclass NorthPole:\n    pass\n\n\nclass Game:\n    number: int\n    label: str\n    group: \"Group\"\n    when: str\n\n    def __init__(self, number: Optional[int], label: Optional[str], when: str, where: NorthPole = NorthPole()):\n        pass\n\n    def winner(self) -> 'Team':\n        return Team()\n\n    def loser(self) -> 'Team':\n        return Team()\n\n    def is_group(self) -> bool:\n        return True\n\n\nclass Group:\n    played: int\n    teams: List['Team']\n\n    def winner(self) -> 'Team':\n        return Team()\n\n    def second(self) -> 'Team':\n        return Team()\n\n    def is_finished(self) -> bool:\n        return True\n\n\nclass Team:\n    games: List[Game]\n\n    def go_home(self):\n        pass\n\n\nclass NorthPole:\n    pass\n\n\nclass JeuxSansFrontieres:\n    winners: Dict[Union[str, int], Tuple[Game, str]]\n    seconds: Dict[Union[str, int], Tuple[Game, str]]\n\n    def apres_match(self, game: Game):\n        \"\"\" Deal with updating of knockout stage \"\"\"\n\n        if game.number == 63:\n            print('third place:', game.winner())\n            return\n        if game.number == 64:\n            print('Winner:', game.winner())\n            return\n            \n        if game.is_group():\n            group: Group = game.group\n            group.played += 1\n            \n            key: str = game.label.lower()\n            kgame, label = self.winners[key]\n            wteam = group.winner()\n            setattr(kgame, label, wteam)\n            if group.is_finished():\n                wteam.games.append(game)\n                \n            kgame, label = self.seconds[key]\n            steam: Team = group.second()\n            setattr(kgame, label, group.second())\n            if group.is_finished():\n                steam.games.append(game)\n\n                for team in group.teams:\n                    out: Game = Game(None, None, game.when, where=NorthPole())\n                    if team not in (wteam, steam):\n                        print('out', team)\n                        team.games.append(out)\n\n        else:\n            kgame, label = self.winners[game.number]\n            wteam: Team = game.winner()\n            setattr(kgame, label, game.winner())\n            wteam.games.append(kgame)\n\n            if game.number in self.seconds:\n                kgame, label = self.seconds[game.number]\n                lteam: Team = game.loser()\n                setattr(kgame, label, lteam)\n                lteam.games.append(kgame)\n            else:\n                game.loser().go_home()\n", "error_location_char": [640, 644], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def test_functional_bytes_info(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "linear", "=", "{", "'a'", ":", "(", "-", "1", ")", ",", "4", ":", "1", ",", "(", "'a'", ",", "'complex key'", ")", ":", "3", "}", "#NEWLINE#", "quadratic", "=", "{", "(", "'a'", ",", "'c'", ")", ":", "1.5", ",", "(", "'b'", ",", "'c'", ")", ":", "3.0", ",", "(", "'a'", ",", "3", ")", ":", "(", "-", "1", ")", "}", "#NEWLINE#", "bqm", "=", "dimod", ".", "BinaryQuadraticModel", "(", "linear", ",", "quadratic", ",", "3", ",", "dimod", ".", "SPIN", ",", "tag", "=", "5", ")", "#NEWLINE#", "new", "=", "dimod", ".", "BinaryQuadraticModel", ".", "from_serializable", "(", "bqm", ".", "to_serializable", "(", "use_bytes", "=", "True", ")", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "bqm", ",", "new", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "bqm", ".", "info", ",", "{", "'tag'", ":", "5", "}", ")"], "edges": [[6, 18, 7, "enum_FIELD"], [29, 46, 7, "enum_FIELD"], [60, 70, 7, "enum_FIELD"], [81, 89, 7, "enum_FIELD"], [99, 105, 7, "enum_FIELD"], [108, 116, 7, "enum_FIELD"], [70, 64, 7, "enum_FIELD"], [89, 87, 7, "enum_FIELD"], [105, 101, 7, "enum_FIELD"], [116, 110, 7, "enum_FIELD"], [13, 14, 7, "enum_FIELD"], [56, 57, 7, "enum_FIELD"], [64, 63, 7, "enum_FIELD"], [74, 73, 7, "enum_FIELD"], [77, 79, 7, "enum_FIELD"], [87, 85, 7, "enum_FIELD"], [93, 91, 7, "enum_FIELD"], [101, 100, 7, "enum_FIELD"], [110, 109, 7, "enum_FIELD"], [114, 113, 7, "enum_FIELD"], [85, 84, 7, "enum_FIELD"], [91, 90, 7, "enum_FIELD"], [94, 96, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [67, 7, 10, "enum_LAST_LEXICAL_USE"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [69, 30, 10, "enum_LAST_LEXICAL_USE"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [73, 63, 10, "enum_LAST_LEXICAL_USE"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [84, 73, 10, "enum_LAST_LEXICAL_USE"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [90, 61, 10, "enum_LAST_LEXICAL_USE"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [100, 2, 10, "enum_LAST_LEXICAL_USE"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [104, 90, 10, "enum_LAST_LEXICAL_USE"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [106, 82, 10, "enum_LAST_LEXICAL_USE"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [109, 100, 10, "enum_LAST_LEXICAL_USE"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [113, 104, 10, "enum_LAST_LEXICAL_USE"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [6, 29, 1, "enum_CFG_NEXT"], [29, 60, 1, "enum_CFG_NEXT"], [60, 81, 1, "enum_CFG_NEXT"], [81, 99, 1, "enum_CFG_NEXT"], [99, 108, 1, "enum_CFG_NEXT"], [67, 7, 3, "enum_LAST_WRITE"], [69, 30, 3, "enum_LAST_WRITE"], [73, 63, 2, "enum_LAST_READ"], [84, 73, 2, "enum_LAST_READ"], [90, 61, 3, "enum_LAST_WRITE"], [100, 2, 3, "enum_LAST_WRITE"], [104, 90, 2, "enum_LAST_READ"], [104, 61, 3, "enum_LAST_WRITE"], [106, 82, 3, "enum_LAST_WRITE"], [109, 100, 2, "enum_LAST_READ"], [109, 2, 3, "enum_LAST_WRITE"], [113, 104, 2, "enum_LAST_READ"], [113, 61, 3, "enum_LAST_WRITE"], [61, 67, 4, "enum_COMPUTED_FROM"], [61, 69, 4, "enum_COMPUTED_FROM"], [61, 63, 4, "enum_COMPUTED_FROM"], [61, 73, 4, "enum_COMPUTED_FROM"], [82, 84, 4, "enum_COMPUTED_FROM"], [82, 90, 4, "enum_COMPUTED_FROM"]], "error_location": 113, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/dwavesystems/dimod.git", "old_path": "tests/test_binary_quadratic_model.py", "hash": "c21ee99ab65a519b822689361fcfcc66ffb890f2", "code": "def test_functional_bytes_info(self):\n    linear = {'a': -1, 4: 1, ('a', \"complex key\"): 3}\n    quadratic = {('a', 'c'): 1.5, ('b', 'c'): 3., ('a', 3): -1}\n    bqm: dimod.BinaryQuadraticModel = dimod.BinaryQuadraticModel(linear, quadratic, 3, dimod.SPIN, tag=5)\n\n    new: dimod.BinaryQuadraticModel = dimod.BinaryQuadraticModel.from_serializable(bqm.to_serializable(use_bytes=True))\n\n    self.assertEqual(bqm, new)\n    self.assertEqual(bqm.info, {\"tag\": 5})\n", "rewrite": "ReplaceText(target='new' @(2149,25)->(2149,28))", "error_line": 8, "has_bug": true, "code_full": "import unittest\nfrom typing import Any, Dict, Tuple\n\n\nclass dimod:\n    SPIN: str\n\n    class BinaryQuadraticModel:\n        info: Dict[str, int]\n\n        def __init__(self, linea: Dict[Any, int], quadratic: Dict[Tuple, float], offset: int, vartype: str, tag: int):\n            pass\n\n        def to_serializable(self, use_bytes=False) -> Any:\n            pass\n\n        @classmethod\n        def from_serializable(cls, obj: Any):\n            return cls({}, {}, 0, 'SPIN', 0)\n\n\nclass TestSerialization(unittest.TestCase):\n    def test_functional_bytes_info(self):\n        linear = {'a': -1, 4: 1, ('a', \"complex key\"): 3}\n        quadratic = {('a', 'c'): 1.5, ('b', 'c'): 3., ('a', 3): -1}\n        bqm: dimod.BinaryQuadraticModel = dimod.BinaryQuadraticModel(linear, quadratic, 3, dimod.SPIN, tag=5)\n\n        new: dimod.BinaryQuadraticModel = dimod.BinaryQuadraticModel.from_serializable(bqm.to_serializable(use_bytes=True))\n\n        self.assertEqual(bqm, new)\n        self.assertEqual(bqm.info, {\"tag\": 5})\n", "error_location_char": [436, 439], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def select_all(", "self", ",", "*", "args", ")", ":", "#NEWLINE#", "#INDENT#", "top_directory", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "*", "args", ")", "#NEWLINE#", "result_filenames", "=", "[", "]", "#NEWLINE#", "for", "(", "dirpath", ",", "_", ",", "filenames", ")", "in", "os", ".", "walk", "(", "top_directory", ")", ":", "#NEWLINE#", "#INDENT#", "result_filenames", ".", "extend", "(", "[", "os", ".", "path", ".", "join", "(", "dirpath", ",", "p", ")", "for", "p", "in", "filenames", "]", ")", "#NEWLINE#", "#UNINDENT#", "results", "=", "[", "]", "#NEWLINE#", "for", "filename", "in", "result_filenames", ":", "#NEWLINE#", "#INDENT#", "result", "=", "self", ".", "read_result", "(", "filename", ")", "#NEWLINE#", "results", ".", "append", "(", "result", ")", "#NEWLINE#", "#UNINDENT#", "results_sorted", "=", "sorted", "(", "results", ",", "key", "=", "(", "lambda", "r", ":", "r", "[", "'ran_on'", "]", ")", ")", "#NEWLINE#", "return", "results"], "edges": [[1, 3, 7, "enum_FIELD"], [3, 5, 7, "enum_FIELD"], [9, 21, 7, "enum_FIELD"], [25, 28, 7, "enum_FIELD"], [39, 34, 7, "enum_FIELD"], [39, 43, 7, "enum_FIELD"], [71, 74, 7, "enum_FIELD"], [79, 78, 7, "enum_FIELD"], [79, 80, 7, "enum_FIELD"], [100, 106, 7, "enum_FIELD"], [120, 121, 7, "enum_FIELD"], [21, 15, 7, "enum_FIELD"], [43, 41, 7, "enum_FIELD"], [48, 52, 7, "enum_FIELD"], [83, 89, 7, "enum_FIELD"], [92, 96, 7, "enum_FIELD"], [106, 103, 7, "enum_FIELD"], [15, 13, 7, "enum_FIELD"], [19, 18, 7, "enum_FIELD"], [22, 23, 7, "enum_FIELD"], [41, 40, 7, "enum_FIELD"], [52, 50, 7, "enum_FIELD"], [89, 87, 7, "enum_FIELD"], [96, 94, 7, "enum_FIELD"], [107, 110, 7, "enum_FIELD"], [13, 12, 7, "enum_FIELD"], [50, 49, 7, "enum_FIELD"], [53, 61, 7, "enum_FIELD"], [87, 86, 7, "enum_FIELD"], [94, 93, 7, "enum_FIELD"], [110, 114, 7, "enum_FIELD"], [61, 57, 7, "enum_FIELD"], [64, 65, 7, "enum_FIELD"], [64, 67, 7, "enum_FIELD"], [114, 113, 7, "enum_FIELD"], [114, 115, 7, "enum_FIELD"], [57, 55, 7, "enum_FIELD"], [55, 54, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [18, 2, 10, "enum_LAST_LEXICAL_USE"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [23, 5, 10, "enum_LAST_LEXICAL_USE"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [40, 12, 10, "enum_LAST_LEXICAL_USE"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [44, 10, 10, "enum_LAST_LEXICAL_USE"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 48, 9, "enum_NEXT_SYNTAX"], [49, 26, 10, "enum_LAST_LEXICAL_USE"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [54, 40, 10, "enum_LAST_LEXICAL_USE"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [60, 33, 10, "enum_LAST_LEXICAL_USE"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [65, 62, 10, "enum_LAST_LEXICAL_USE"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [67, 37, 10, "enum_LAST_LEXICAL_USE"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [80, 49, 10, "enum_LAST_LEXICAL_USE"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [86, 18, 10, "enum_LAST_LEXICAL_USE"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [90, 78, 10, "enum_LAST_LEXICAL_USE"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [93, 72, 10, "enum_LAST_LEXICAL_USE"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [97, 84, 10, "enum_LAST_LEXICAL_USE"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [105, 93, 10, "enum_LAST_LEXICAL_USE"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [113, 111, 10, "enum_LAST_LEXICAL_USE"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 120, 9, "enum_NEXT_SYNTAX"], [121, 105, 10, "enum_LAST_LEXICAL_USE"], [120, 121, 9, "enum_NEXT_SYNTAX"], [3, 9, 1, "enum_CFG_NEXT"], [9, 25, 1, "enum_CFG_NEXT"], [25, 43, 1, "enum_CFG_NEXT"], [43, 34, 1, "enum_CFG_NEXT"], [34, 71, 1, "enum_CFG_NEXT"], [34, 48, 1, "enum_CFG_NEXT"], [48, 34, 1, "enum_CFG_NEXT"], [71, 80, 1, "enum_CFG_NEXT"], [80, 78, 1, "enum_CFG_NEXT"], [78, 100, 1, "enum_CFG_NEXT"], [78, 83, 1, "enum_CFG_NEXT"], [83, 92, 1, "enum_CFG_NEXT"], [92, 78, 1, "enum_CFG_NEXT"], [100, 120, 1, "enum_CFG_NEXT"], [18, 2, 3, "enum_LAST_WRITE"], [23, 5, 3, "enum_LAST_WRITE"], [40, 12, 2, "enum_LAST_READ"], [44, 10, 3, "enum_LAST_WRITE"], [33, 60, 2, "enum_LAST_READ"], [33, 33, 3, "enum_LAST_WRITE"], [35, 35, 3, "enum_LAST_WRITE"], [37, 67, 2, "enum_LAST_READ"], [37, 37, 3, "enum_LAST_WRITE"], [49, 49, 2, "enum_LAST_READ"], [49, 26, 3, "enum_LAST_WRITE"], [54, 54, 2, "enum_LAST_READ"], [54, 40, 2, "enum_LAST_READ"], [60, 60, 2, "enum_LAST_READ"], [60, 33, 3, "enum_LAST_WRITE"], [62, 62, 2, "enum_LAST_READ"], [62, 65, 3, "enum_LAST_WRITE"], [65, 62, 2, "enum_LAST_READ"], [65, 65, 3, "enum_LAST_WRITE"], [67, 67, 2, "enum_LAST_READ"], [67, 37, 3, "enum_LAST_WRITE"], [80, 49, 2, "enum_LAST_READ"], [80, 26, 3, "enum_LAST_WRITE"], [78, 90, 2, "enum_LAST_READ"], [78, 78, 3, "enum_LAST_WRITE"], [86, 18, 2, "enum_LAST_READ"], [86, 86, 2, "enum_LAST_READ"], [86, 2, 3, "enum_LAST_WRITE"], [90, 90, 2, "enum_LAST_READ"], [90, 78, 3, "enum_LAST_WRITE"], [84, 97, 2, "enum_LAST_READ"], [84, 84, 3, "enum_LAST_WRITE"], [93, 93, 2, "enum_LAST_READ"], [93, 72, 3, "enum_LAST_WRITE"], [97, 97, 2, "enum_LAST_READ"], [97, 84, 3, "enum_LAST_WRITE"], [105, 93, 2, "enum_LAST_READ"], [105, 72, 3, "enum_LAST_WRITE"], [113, 111, 3, "enum_LAST_WRITE"], [121, 105, 2, "enum_LAST_READ"], [121, 72, 3, "enum_LAST_WRITE"], [10, 18, 4, "enum_COMPUTED_FROM"], [10, 23, 4, "enum_COMPUTED_FROM"], [10, 12, 4, "enum_COMPUTED_FROM"], [101, 103, 4, "enum_COMPUTED_FROM"], [101, 105, 4, "enum_COMPUTED_FROM"], [101, 111, 4, "enum_COMPUTED_FROM"], [101, 113, 4, "enum_COMPUTED_FROM"], [84, 90, 4, "enum_COMPUTED_FROM"], [84, 86, 4, "enum_COMPUTED_FROM"]], "error_location": 121, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/innolitics/hdat.git", "old_path": "store.py", "hash": "536b4c0b60a57b2a0d7aa95bf3a8e0a484a2a0c2", "code": "def select_all(self, *args) -> List[Dict[str, Any]]:\n    top_directory: str = os.path.join(self.root, *args)\n\n    result_filenames: List[str] = []\n    for dirpath, _, filenames in os.walk(top_directory):\n        result_filenames.extend([os.path.join(dirpath, p) for p in filenames])\n\n    results: List[Dict[str, Any]] = []\n    for filename in result_filenames:\n        result: Dict[str, Any] = self.read_result(filename)\n        results.append(result)\n\n    results_sorted = sorted(results, key=lambda r: r['ran_on'])\n\n    return results\n", "rewrite": "ReplaceText(target='results_sorted' @(34,15)->(34,22))", "error_line": 14, "has_bug": true, "code_full": "import os\nfrom typing import Any, Dict, List\n\n\nclass Archive:\n    root: str\n\n    def read_result(self, filename: str) -> Dict[str, Any]:\n        return {}\n\n    def select_all(self, *args) -> List[Dict[str, Any]]:\n        top_directory: str = os.path.join(self.root, *args)\n\n        result_filenames: List[str] = []\n        for dirpath, _, filenames in os.walk(top_directory):\n            result_filenames.extend([os.path.join(dirpath, p) for p in filenames])\n\n        results: List[Dict[str, Any]] = []\n        for filename in result_filenames:\n            result: Dict[str, Any] = self.read_result(filename)\n            results.append(result)\n\n        results_sorted = sorted(results, key=lambda r: r['ran_on'])\n\n        return results\n", "error_location_char": [529, 536], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def persistent_uniform(", "H", ",", "persis_info", ",", "gen_specs", ",", "libE_info", ")", ":", "#NEWLINE#", "#INDENT#", "\"\\n    This generation function always enters into persistent mode and returns\\n    ``gen_specs['gen_batch_size']`` uniformly sampled points.\\n\\n    .. seealso::\\n        `test_6-hump_camel_persistent_uniform_sampling.py <https://github.com/Libensemble/libensemble/blob/develop/libensemble/tests/regression_tests/test_6-hump_camel_persistent_uniform_sampling.py>`_ # noqa\\n    \"", "#NEWLINE#", "ub", "=", "gen_specs", "[", "'user'", "]", "[", "'ub'", "]", "#NEWLINE#", "lb", "=", "gen_specs", "[", "'user'", "]", "[", "'lb'", "]", "#NEWLINE#", "n", "=", "len", "(", "lb", ")", "#NEWLINE#", "b", "=", "gen_specs", "[", "'user'", "]", "[", "'gen_batch_size'", "]", "#NEWLINE#", "tag", "=", "None", "#NEWLINE#", "while", "(", "tag", "not in", "[", "STOP_TAG", ",", "PERSIS_STOP", "]", ")", ":", "#NEWLINE#", "#INDENT#", "H_o", "=", "np", ".", "zeros", "(", "b", ",", "dtype", "=", "gen_specs", "[", "'out'", "]", ")", "#NEWLINE#", "H_o", "[", "'x'", "]", "=", "persis_info", "[", "'rand_stream'", "]", ".", "uniform", "(", "lb", ",", "ub", ",", "(", "b", ",", "n", ")", ")", "#NEWLINE#", "(", "tag", ",", "Work", ",", "calc_in", ")", "=", "sendrecv_mgr_worker_msg", "(", "libE_info", "[", "'comm'", "]", ",", "H_o", ")", "#NEWLINE#", "#UNINDENT#", "return", "(", "H_o", ",", "persis_info", ",", "tag", ")"], "edges": [[1, 5, 7, "enum_FIELD"], [12, 13, 7, "enum_FIELD"], [14, 21, 7, "enum_FIELD"], [24, 31, 7, "enum_FIELD"], [34, 38, 7, "enum_FIELD"], [41, 48, 7, "enum_FIELD"], [51, 54, 7, "enum_FIELD"], [56, 59, 7, "enum_FIELD"], [127, 130, 7, "enum_FIELD"], [21, 18, 7, "enum_FIELD"], [21, 22, 7, "enum_FIELD"], [31, 28, 7, "enum_FIELD"], [31, 32, 7, "enum_FIELD"], [38, 37, 7, "enum_FIELD"], [48, 45, 7, "enum_FIELD"], [48, 49, 7, "enum_FIELD"], [59, 58, 7, "enum_FIELD"], [68, 76, 7, "enum_FIELD"], [84, 98, 7, "enum_FIELD"], [107, 122, 7, "enum_FIELD"], [18, 17, 7, "enum_FIELD"], [18, 19, 7, "enum_FIELD"], [28, 27, 7, "enum_FIELD"], [28, 29, 7, "enum_FIELD"], [45, 44, 7, "enum_FIELD"], [45, 46, 7, "enum_FIELD"], [76, 72, 7, "enum_FIELD"], [86, 85, 7, "enum_FIELD"], [86, 87, 7, "enum_FIELD"], [98, 94, 7, "enum_FIELD"], [122, 116, 7, "enum_FIELD"], [72, 71, 7, "enum_FIELD"], [77, 80, 7, "enum_FIELD"], [94, 91, 7, "enum_FIELD"], [119, 118, 7, "enum_FIELD"], [119, 120, 7, "enum_FIELD"], [80, 79, 7, "enum_FIELD"], [80, 81, 7, "enum_FIELD"], [91, 90, 7, "enum_FIELD"], [91, 92, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [17, 6, 10, "enum_LAST_LEXICAL_USE"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [27, 17, 10, "enum_LAST_LEXICAL_USE"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [39, 25, 10, "enum_LAST_LEXICAL_USE"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [44, 27, 10, "enum_LAST_LEXICAL_USE"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [58, 52, 10, "enum_LAST_LEXICAL_USE"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [75, 42, 10, "enum_LAST_LEXICAL_USE"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [79, 44, 10, "enum_LAST_LEXICAL_USE"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [85, 69, 10, "enum_LAST_LEXICAL_USE"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [90, 4, 10, "enum_LAST_LEXICAL_USE"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [97, 39, 10, "enum_LAST_LEXICAL_USE"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [99, 15, 10, "enum_LAST_LEXICAL_USE"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [102, 75, 10, "enum_LAST_LEXICAL_USE"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [104, 35, 10, "enum_LAST_LEXICAL_USE"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [109, 58, 10, "enum_LAST_LEXICAL_USE"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [118, 8, 10, "enum_LAST_LEXICAL_USE"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [123, 85, 10, "enum_LAST_LEXICAL_USE"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [129, 123, 10, "enum_LAST_LEXICAL_USE"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [131, 90, 10, "enum_LAST_LEXICAL_USE"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [133, 109, 10, "enum_LAST_LEXICAL_USE"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [5, 12, 1, "enum_CFG_NEXT"], [12, 14, 1, "enum_CFG_NEXT"], [14, 24, 1, "enum_CFG_NEXT"], [24, 34, 1, "enum_CFG_NEXT"], [34, 41, 1, "enum_CFG_NEXT"], [41, 51, 1, "enum_CFG_NEXT"], [51, 59, 1, "enum_CFG_NEXT"], [59, 127, 1, "enum_CFG_NEXT"], [59, 68, 1, "enum_CFG_NEXT"], [68, 84, 1, "enum_CFG_NEXT"], [84, 107, 1, "enum_CFG_NEXT"], [107, 59, 1, "enum_CFG_NEXT"], [17, 6, 3, "enum_LAST_WRITE"], [27, 17, 2, "enum_LAST_READ"], [27, 6, 3, "enum_LAST_WRITE"], [39, 25, 3, "enum_LAST_WRITE"], [44, 27, 2, "enum_LAST_READ"], [44, 6, 3, "enum_LAST_WRITE"], [58, 58, 2, "enum_LAST_READ"], [58, 109, 3, "enum_LAST_WRITE"], [58, 52, 3, "enum_LAST_WRITE"], [61, 61, 2, "enum_LAST_READ"], [63, 63, 2, "enum_LAST_READ"], [71, 71, 2, "enum_LAST_READ"], [75, 102, 2, "enum_LAST_READ"], [75, 42, 3, "enum_LAST_WRITE"], [79, 44, 2, "enum_LAST_READ"], [79, 79, 2, "enum_LAST_READ"], [79, 6, 3, "enum_LAST_WRITE"], [69, 123, 2, "enum_LAST_READ"], [69, 69, 3, "enum_LAST_WRITE"], [90, 90, 2, "enum_LAST_READ"], [90, 4, 3, "enum_LAST_WRITE"], [97, 39, 2, "enum_LAST_READ"], [97, 97, 2, "enum_LAST_READ"], [97, 25, 3, "enum_LAST_WRITE"], [99, 99, 2, "enum_LAST_READ"], [99, 15, 3, "enum_LAST_WRITE"], [102, 75, 2, "enum_LAST_READ"], [102, 42, 3, "enum_LAST_WRITE"], [104, 104, 2, "enum_LAST_READ"], [104, 35, 3, "enum_LAST_WRITE"], [85, 123, 2, "enum_LAST_READ"], [85, 69, 3, "enum_LAST_WRITE"], [116, 116, 2, "enum_LAST_READ"], [118, 118, 2, "enum_LAST_READ"], [118, 8, 3, "enum_LAST_WRITE"], [123, 85, 2, "enum_LAST_READ"], [123, 69, 3, "enum_LAST_WRITE"], [109, 58, 2, "enum_LAST_READ"], [109, 109, 3, "enum_LAST_WRITE"], [109, 52, 3, "enum_LAST_WRITE"], [111, 111, 3, "enum_LAST_WRITE"], [113, 113, 3, "enum_LAST_WRITE"], [129, 123, 2, "enum_LAST_READ"], [129, 69, 3, "enum_LAST_WRITE"], [131, 90, 2, "enum_LAST_READ"], [131, 4, 3, "enum_LAST_WRITE"], [133, 58, 2, "enum_LAST_READ"], [133, 109, 3, "enum_LAST_WRITE"], [133, 52, 3, "enum_LAST_WRITE"], [15, 17, 4, "enum_COMPUTED_FROM"], [25, 27, 4, "enum_COMPUTED_FROM"], [35, 37, 4, "enum_COMPUTED_FROM"], [35, 39, 4, "enum_COMPUTED_FROM"], [42, 44, 4, "enum_COMPUTED_FROM"], [69, 75, 4, "enum_COMPUTED_FROM"], [69, 71, 4, "enum_COMPUTED_FROM"], [69, 79, 4, "enum_COMPUTED_FROM"], [86, 97, 4, "enum_COMPUTED_FROM"], [86, 99, 4, "enum_COMPUTED_FROM"], [86, 102, 4, "enum_COMPUTED_FROM"], [86, 104, 4, "enum_COMPUTED_FROM"], [86, 90, 4, "enum_COMPUTED_FROM"], [110, 116, 4, "enum_COMPUTED_FROM"], [110, 123, 4, "enum_COMPUTED_FROM"], [110, 118, 4, "enum_COMPUTED_FROM"]], "error_location": 133, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/Libensemble/libensemble.git", "old_path": "libensemble/gen_funcs/persistent_uniform_sampling.py", "hash": "c090514bb370c6960db4c8be2ae643534def8d2b", "code": "def persistent_uniform(H: Any, persis_info: Dict[str, Any], gen_specs: Dict[str, Any], libE_info: Dict[str, Any]) -> Tuple[np.ndarray, Dict[str, Any], int]:\n    \"\"\"\n    This generation function always enters into persistent mode and returns\n    ``gen_specs['gen_batch_size']`` uniformly sampled points.\n\n    .. seealso::\n        `test_6-hump_camel_persistent_uniform_sampling.py <https://github.com/Libensemble/libensemble/blob/develop/libensemble/tests/regression_tests/test_6-hump_camel_persistent_uniform_sampling.py>`_ # noqa\n    \"\"\"\n    ub: np.ndarray = gen_specs['user']['ub']\n    lb: np.ndarray = gen_specs['user']['lb']\n    n: int = len(lb)\n    b: np.ndarray = gen_specs['user']['gen_batch_size']\n\n    # Send batches until manager sends stop tag\n    tag: Optional[int] = None\n    while tag not in [STOP_TAG, PERSIS_STOP]:\n        H_o: np.ndarray = np.zeros(b, dtype=gen_specs['out'])\n        H_o['x'] = persis_info['rand_stream'].uniform(lb, ub, (b, n))\n        tag, Work, calc_in = sendrecv_mgr_worker_msg(libE_info['comm'], H_o)\n\n    return H_o, persis_info, tag\n", "rewrite": "ReplaceText(target='Work' @(27,29)->(27,32))", "error_line": 20, "has_bug": true, "code_full": "from typing import Any, Dict, Optional, Tuple\n\nimport numpy as np\n\nSTOP_TAG: int\nPERSIS_STOP: int\n\n\ndef sendrecv_mgr_worker_msg(comm: Any, H_o: np.ndarray) -> Tuple[int, int, Any]:\n    return 0, 0, None\n\n\ndef persistent_uniform(H: Any, persis_info: Dict[str, Any], gen_specs: Dict[str, Any], libE_info: Dict[str, Any]) -> Tuple[np.ndarray, Dict[str, Any], int]:\n    \"\"\"\n    This generation function always enters into persistent mode and returns\n    ``gen_specs['gen_batch_size']`` uniformly sampled points.\n\n    .. seealso::\n        `test_6-hump_camel_persistent_uniform_sampling.py <https://github.com/Libensemble/libensemble/blob/develop/libensemble/tests/regression_tests/test_6-hump_camel_persistent_uniform_sampling.py>`_ # noqa\n    \"\"\"\n    ub: np.ndarray = gen_specs['user']['ub']\n    lb: np.ndarray = gen_specs['user']['lb']\n    n: int = len(lb)\n    b: np.ndarray = gen_specs['user']['gen_batch_size']\n\n    # Send batches until manager sends stop tag\n    tag: Optional[int] = None\n    while tag not in [STOP_TAG, PERSIS_STOP]:\n        H_o: np.ndarray = np.zeros(b, dtype=gen_specs['out'])\n        H_o['x'] = persis_info['rand_stream'].uniform(lb, ub, (b, n))\n        tag, Work, calc_in = sendrecv_mgr_worker_msg(libE_info['comm'], H_o)\n\n    return H_o, persis_info, tag\n", "error_location_char": [1069, 1072], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def build_dataset_for_inference(", "self", ",", "src_tokens", ",", "src_lengths", ")", ":", "#NEWLINE#", "#INDENT#", "src_lang_id", "=", "self", ".", "source_dictionary", ".", "index", "(", "'[{}]'", ".", "format", "(", "self", ".", "args", ".", "source_lang", ")", ")", "#NEWLINE#", "source_tokens", "=", "[", "]", "#NEWLINE#", "for", "s_t", "in", "src_tokens", ":", "#NEWLINE#", "#INDENT#", "s_t", "=", "torch", ".", "cat", "(", "[", "s_t", ",", "s_t", ".", "new", "(", "1", ")", ".", "fill_", "(", "src_lang_id", ")", "]", ")", "#NEWLINE#", "source_tokens", ".", "append", "(", "s_t", ")", "#NEWLINE#", "#UNINDENT#", "dataset", "=", "LanguagePairDataset", "(", "src_tokens", ",", "src_lengths", ",", "self", ".", "source_dictionary", ")", "#NEWLINE#", "return", "dataset"], "edges": [[1, 3, 7, "enum_FIELD"], [10, 18, 7, "enum_FIELD"], [30, 33, 7, "enum_FIELD"], [38, 37, 7, "enum_FIELD"], [38, 39, 7, "enum_FIELD"], [73, 79, 7, "enum_FIELD"], [87, 88, 7, "enum_FIELD"], [18, 16, 7, "enum_FIELD"], [42, 48, 7, "enum_FIELD"], [65, 69, 7, "enum_FIELD"], [79, 76, 7, "enum_FIELD"], [16, 14, 7, "enum_FIELD"], [22, 20, 7, "enum_FIELD"], [48, 46, 7, "enum_FIELD"], [69, 67, 7, "enum_FIELD"], [83, 82, 7, "enum_FIELD"], [14, 13, 7, "enum_FIELD"], [20, 19, 7, "enum_FIELD"], [26, 24, 7, "enum_FIELD"], [46, 45, 7, "enum_FIELD"], [67, 66, 7, "enum_FIELD"], [24, 23, 7, "enum_FIELD"], [60, 58, 7, "enum_FIELD"], [58, 55, 7, "enum_FIELD"], [55, 53, 7, "enum_FIELD"], [53, 52, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [13, 2, 10, "enum_LAST_LEXICAL_USE"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [23, 13, 10, "enum_LAST_LEXICAL_USE"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [39, 4, 10, "enum_LAST_LEXICAL_USE"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 42, 9, "enum_NEXT_SYNTAX"], [43, 37, 10, "enum_LAST_LEXICAL_USE"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [50, 43, 10, "enum_LAST_LEXICAL_USE"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [52, 50, 10, "enum_LAST_LEXICAL_USE"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [61, 11, 10, "enum_LAST_LEXICAL_USE"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [66, 31, 10, "enum_LAST_LEXICAL_USE"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [70, 52, 10, "enum_LAST_LEXICAL_USE"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [78, 39, 10, "enum_LAST_LEXICAL_USE"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [80, 6, 10, "enum_LAST_LEXICAL_USE"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [82, 23, 10, "enum_LAST_LEXICAL_USE"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 87, 9, "enum_NEXT_SYNTAX"], [88, 74, 10, "enum_LAST_LEXICAL_USE"], [87, 88, 9, "enum_NEXT_SYNTAX"], [3, 10, 1, "enum_CFG_NEXT"], [10, 30, 1, "enum_CFG_NEXT"], [30, 39, 1, "enum_CFG_NEXT"], [39, 37, 1, "enum_CFG_NEXT"], [37, 73, 1, "enum_CFG_NEXT"], [37, 42, 1, "enum_CFG_NEXT"], [42, 65, 1, "enum_CFG_NEXT"], [65, 37, 1, "enum_CFG_NEXT"], [73, 87, 1, "enum_CFG_NEXT"], [13, 2, 3, "enum_LAST_WRITE"], [23, 13, 2, "enum_LAST_READ"], [23, 2, 3, "enum_LAST_WRITE"], [39, 4, 3, "enum_LAST_WRITE"], [37, 70, 2, "enum_LAST_READ"], [37, 43, 3, "enum_LAST_WRITE"], [45, 45, 2, "enum_LAST_READ"], [50, 70, 2, "enum_LAST_READ"], [50, 37, 3, "enum_LAST_WRITE"], [52, 50, 2, "enum_LAST_READ"], [52, 37, 3, "enum_LAST_WRITE"], [61, 61, 2, "enum_LAST_READ"], [61, 11, 3, "enum_LAST_WRITE"], [43, 52, 2, "enum_LAST_READ"], [43, 37, 3, "enum_LAST_WRITE"], [66, 66, 2, "enum_LAST_READ"], [66, 31, 3, "enum_LAST_WRITE"], [70, 52, 2, "enum_LAST_READ"], [70, 43, 3, "enum_LAST_WRITE"], [78, 39, 2, "enum_LAST_READ"], [78, 4, 3, "enum_LAST_WRITE"], [80, 6, 3, "enum_LAST_WRITE"], [82, 23, 2, "enum_LAST_READ"], [82, 2, 3, "enum_LAST_WRITE"], [88, 74, 3, "enum_LAST_WRITE"], [11, 13, 4, "enum_COMPUTED_FROM"], [11, 23, 4, "enum_COMPUTED_FROM"], [74, 76, 4, "enum_COMPUTED_FROM"], [74, 78, 4, "enum_COMPUTED_FROM"], [74, 80, 4, "enum_COMPUTED_FROM"], [74, 82, 4, "enum_COMPUTED_FROM"], [43, 45, 4, "enum_COMPUTED_FROM"], [43, 50, 4, "enum_COMPUTED_FROM"], [43, 61, 4, "enum_COMPUTED_FROM"], [43, 52, 4, "enum_COMPUTED_FROM"]], "error_location": 78, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/pytorch/fairseq.git", "old_path": "fairseq/tasks/translation_from_pretrained_bart.py", "hash": "9a718e29855713a51877237b2dcc25e39c234c82", "code": "def build_dataset_for_inference(self, src_tokens: List[torch.Tensor], src_lengths: List[int]) -> LanguagePairDataset:\n    src_lang_id: int = self.source_dictionary.index('[{}]'.format(self.args.source_lang))\n    source_tokens: List[torch.Tensor] = []\n    for s_t in src_tokens:\n        s_t = torch.cat([s_t, s_t.new(1).fill_(src_lang_id)])\n        source_tokens.append(s_t)\n    dataset = LanguagePairDataset(src_tokens, src_lengths, self.source_dictionary)\n    return dataset\n", "rewrite": "ReplaceText(target='source_tokens' @(113,38)->(113,48))", "error_line": 6, "has_bug": true, "code_full": "from typing import Any, List\n\nimport torch\n\n\nclass LanguagePairDataset:\n    def __init__(self, src_tokens: List[torch.Tensor], src_lengths: List[int], dictionary: torch.Dictionary):\n        pass\n\n\nclass TranslationFromPretrainedBARTTask:\n    args: Any\n    source_dictionary: torch.Dictionary\n    \n    def build_dataset_for_inference(self, src_tokens: List[torch.Tensor], src_lengths: List[int]) -> LanguagePairDataset:\n        src_lang_id: int = self.source_dictionary.index('[{}]'.format(self.args.source_lang))\n        source_tokens: List[torch.Tensor] = []\n        for s_t in src_tokens:\n            s_t = torch.cat([s_t, s_t.new(1).fill_(src_lang_id)])\n            source_tokens.append(s_t)\n        dataset = LanguagePairDataset(src_tokens, src_lengths, self.source_dictionary)\n        return dataset\n", "error_location_char": [408, 418], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def parse_template(", "self", ",", "template", ",", "**context", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    To parse a template and return all the blocks\\n    '", "#NEWLINE#", "required_blocks", "=", "[", "'subject'", ",", "'body'", "]", "#NEWLINE#", "optional_blocks", "=", "[", "'text_body'", ",", "'html_body'", ",", "'return_path'", ",", "'format'", "]", "#NEWLINE#", "if", "self", ".", "template_context", ":", "#NEWLINE#", "#INDENT#", "context", "=", "dict", "(", "(", "list", "(", "self", ".", "template_context", ".", "items", "(", ")", ")", "+", "list", "(", "context", ".", "items", "(", ")", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "blocks", "=", "self", ".", "template", ".", "render_blocks", "(", "template", ",", "**", "context", ")", "#NEWLINE#", "for", "rb", "in", "required_blocks", ":", "#NEWLINE#", "#INDENT#", "if", "(", "rb", "not in", "blocks", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "AttributeError", "(", "(", "\"Template error: block '%s' is missing from '%s'\"", "%", "(", "rb", ",", "template", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "mail_params", "=", "{", "'subject'", ":", "blocks", "[", "'subject'", "]", ".", "strip", "(", ")", ",", "'body'", ":", "blocks", "[", "'body'", "]", "}", "#NEWLINE#", "for", "ob", "in", "optional_blocks", ":", "#NEWLINE#", "#INDENT#", "if", "(", "ob", "in", "blocks", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "(", "ob", "==", "'format'", ")", "and", "(", "mail_params", "[", "ob", "]", ".", "lower", "(", ")", "not in", "[", "'html'", ",", "'text'", "]", ")", ")", ":", "#NEWLINE#", "#INDENT#", "continue", "#NEWLINE#", "#UNINDENT#", "mail_params", "[", "ob", "]", "=", "blocks", "[", "ob", "]", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "return", "mail_params"], "edges": [[1, 5, 7, "enum_FIELD"], [10, 11, 7, "enum_FIELD"], [12, 17, 7, "enum_FIELD"], [20, 27, 7, "enum_FIELD"], [33, 35, 7, "enum_FIELD"], [67, 77, 7, "enum_FIELD"], [84, 83, 7, "enum_FIELD"], [84, 85, 7, "enum_FIELD"], [113, 127, 7, "enum_FIELD"], [138, 137, 7, "enum_FIELD"], [138, 139, 7, "enum_FIELD"], [195, 196, 7, "enum_FIELD"], [35, 34, 7, "enum_FIELD"], [39, 43, 7, "enum_FIELD"], [77, 73, 7, "enum_FIELD"], [89, 92, 7, "enum_FIELD"], [143, 146, 7, "enum_FIELD"], [43, 42, 7, "enum_FIELD"], [73, 71, 7, "enum_FIELD"], [78, 79, 7, "enum_FIELD"], [92, 91, 7, "enum_FIELD"], [98, 100, 7, "enum_FIELD"], [125, 123, 7, "enum_FIELD"], [131, 130, 7, "enum_FIELD"], [131, 132, 7, "enum_FIELD"], [146, 145, 7, "enum_FIELD"], [152, 159, 7, "enum_FIELD"], [182, 189, 7, "enum_FIELD"], [55, 46, 7, "enum_FIELD"], [55, 57, 7, "enum_FIELD"], [71, 70, 7, "enum_FIELD"], [100, 99, 7, "enum_FIELD"], [123, 120, 7, "enum_FIELD"], [184, 183, 7, "enum_FIELD"], [184, 185, 7, "enum_FIELD"], [189, 188, 7, "enum_FIELD"], [189, 190, 7, "enum_FIELD"], [46, 45, 7, "enum_FIELD"], [57, 56, 7, "enum_FIELD"], [103, 102, 7, "enum_FIELD"], [103, 106, 7, "enum_FIELD"], [120, 119, 7, "enum_FIELD"], [120, 121, 7, "enum_FIELD"], [156, 155, 7, "enum_FIELD"], [169, 167, 7, "enum_FIELD"], [52, 50, 7, "enum_FIELD"], [61, 59, 7, "enum_FIELD"], [167, 165, 7, "enum_FIELD"], [50, 48, 7, "enum_FIELD"], [59, 58, 7, "enum_FIELD"], [165, 162, 7, "enum_FIELD"], [48, 47, 7, "enum_FIELD"], [162, 161, 7, "enum_FIELD"], [162, 163, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 33, 9, "enum_NEXT_SYNTAX"], [34, 2, 10, "enum_LAST_LEXICAL_USE"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [47, 34, 10, "enum_LAST_LEXICAL_USE"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [56, 45, 10, "enum_LAST_LEXICAL_USE"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [58, 40, 10, "enum_LAST_LEXICAL_USE"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [70, 47, 10, "enum_LAST_LEXICAL_USE"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [76, 4, 10, "enum_LAST_LEXICAL_USE"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [79, 58, 10, "enum_LAST_LEXICAL_USE"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [85, 13, 10, "enum_LAST_LEXICAL_USE"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [91, 83, 10, "enum_LAST_LEXICAL_USE"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [93, 68, 10, "enum_LAST_LEXICAL_USE"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [105, 91, 10, "enum_LAST_LEXICAL_USE"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [107, 76, 10, "enum_LAST_LEXICAL_USE"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [119, 93, 10, "enum_LAST_LEXICAL_USE"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [130, 119, 10, "enum_LAST_LEXICAL_USE"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [139, 21, 10, "enum_LAST_LEXICAL_USE"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [145, 137, 10, "enum_LAST_LEXICAL_USE"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [147, 130, 10, "enum_LAST_LEXICAL_USE"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [155, 145, 10, "enum_LAST_LEXICAL_USE"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [161, 114, 10, "enum_LAST_LEXICAL_USE"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [163, 155, 10, "enum_LAST_LEXICAL_USE"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 180, 9, "enum_NEXT_SYNTAX"], [180, 182, 9, "enum_NEXT_SYNTAX"], [183, 161, 10, "enum_LAST_LEXICAL_USE"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 184, 9, "enum_NEXT_SYNTAX"], [185, 163, 10, "enum_LAST_LEXICAL_USE"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [188, 147, 10, "enum_LAST_LEXICAL_USE"], [187, 188, 9, "enum_NEXT_SYNTAX"], [188, 189, 9, "enum_NEXT_SYNTAX"], [190, 185, 10, "enum_LAST_LEXICAL_USE"], [189, 190, 9, "enum_NEXT_SYNTAX"], [190, 191, 9, "enum_NEXT_SYNTAX"], [191, 195, 9, "enum_NEXT_SYNTAX"], [196, 183, 10, "enum_LAST_LEXICAL_USE"], [195, 196, 9, "enum_NEXT_SYNTAX"], [5, 10, 1, "enum_CFG_NEXT"], [10, 12, 1, "enum_CFG_NEXT"], [12, 20, 1, "enum_CFG_NEXT"], [20, 35, 1, "enum_CFG_NEXT"], [35, 67, 1, "enum_CFG_NEXT"], [35, 39, 1, "enum_CFG_NEXT"], [39, 67, 1, "enum_CFG_NEXT"], [67, 85, 1, "enum_CFG_NEXT"], [85, 83, 1, "enum_CFG_NEXT"], [83, 113, 1, "enum_CFG_NEXT"], [83, 92, 1, "enum_CFG_NEXT"], [92, 83, 1, "enum_CFG_NEXT"], [92, 98, 1, "enum_CFG_NEXT"], [113, 139, 1, "enum_CFG_NEXT"], [139, 137, 1, "enum_CFG_NEXT"], [137, 146, 1, "enum_CFG_NEXT"], [137, 195, 1, "enum_CFG_NEXT"], [146, 159, 1, "enum_CFG_NEXT"], [146, 137, 1, "enum_CFG_NEXT"], [159, 137, 1, "enum_CFG_NEXT"], [159, 182, 1, "enum_CFG_NEXT"], [182, 137, 1, "enum_CFG_NEXT"], [34, 2, 3, "enum_LAST_WRITE"], [47, 34, 2, "enum_LAST_READ"], [47, 2, 3, "enum_LAST_WRITE"], [56, 45, 2, "enum_LAST_READ"], [40, 58, 2, "enum_LAST_READ"], [70, 47, 2, "enum_LAST_READ"], [70, 34, 2, "enum_LAST_READ"], [70, 2, 3, "enum_LAST_WRITE"], [76, 4, 3, "enum_LAST_WRITE"], [79, 58, 2, "enum_LAST_READ"], [79, 40, 3, "enum_LAST_WRITE"], [85, 13, 3, "enum_LAST_WRITE"], [83, 91, 2, "enum_LAST_READ"], [83, 83, 3, "enum_LAST_WRITE"], [91, 91, 2, "enum_LAST_READ"], [91, 83, 3, "enum_LAST_WRITE"], [93, 93, 2, "enum_LAST_READ"], [93, 68, 3, "enum_LAST_WRITE"], [105, 91, 2, "enum_LAST_READ"], [105, 83, 3, "enum_LAST_WRITE"], [107, 76, 2, "enum_LAST_READ"], [107, 4, 3, "enum_LAST_WRITE"], [119, 93, 2, "enum_LAST_READ"], [119, 68, 3, "enum_LAST_WRITE"], [130, 119, 2, "enum_LAST_READ"], [130, 68, 3, "enum_LAST_WRITE"], [139, 21, 3, "enum_LAST_WRITE"], [137, 185, 2, "enum_LAST_READ"], [137, 163, 2, "enum_LAST_READ"], [137, 145, 2, "enum_LAST_READ"], [137, 137, 3, "enum_LAST_WRITE"], [145, 185, 2, "enum_LAST_READ"], [145, 163, 2, "enum_LAST_READ"], [145, 145, 2, "enum_LAST_READ"], [145, 137, 3, "enum_LAST_WRITE"], [147, 188, 2, "enum_LAST_READ"], [147, 147, 2, "enum_LAST_READ"], [147, 130, 2, "enum_LAST_READ"], [147, 68, 3, "enum_LAST_WRITE"], [155, 145, 2, "enum_LAST_READ"], [155, 137, 3, "enum_LAST_WRITE"], [161, 183, 2, "enum_LAST_READ"], [161, 161, 2, "enum_LAST_READ"], [161, 114, 3, "enum_LAST_WRITE"], [163, 155, 2, "enum_LAST_READ"], [163, 137, 3, "enum_LAST_WRITE"], [188, 147, 2, "enum_LAST_READ"], [188, 68, 3, "enum_LAST_WRITE"], [190, 163, 2, "enum_LAST_READ"], [190, 137, 3, "enum_LAST_WRITE"], [183, 161, 2, "enum_LAST_READ"], [183, 114, 3, "enum_LAST_WRITE"], [185, 190, 2, "enum_LAST_READ"], [185, 137, 3, "enum_LAST_WRITE"], [196, 183, 2, "enum_LAST_READ"], [196, 161, 2, "enum_LAST_READ"], [196, 114, 3, "enum_LAST_WRITE"], [68, 76, 4, "enum_COMPUTED_FROM"], [68, 79, 4, "enum_COMPUTED_FROM"], [68, 70, 4, "enum_COMPUTED_FROM"], [114, 130, 4, "enum_COMPUTED_FROM"], [114, 119, 4, "enum_COMPUTED_FROM"], [40, 42, 4, "enum_COMPUTED_FROM"], [40, 45, 4, "enum_COMPUTED_FROM"], [40, 56, 4, "enum_COMPUTED_FROM"], [40, 58, 4, "enum_COMPUTED_FROM"], [40, 47, 4, "enum_COMPUTED_FROM"], [184, 188, 4, "enum_COMPUTED_FROM"], [184, 190, 4, "enum_COMPUTED_FROM"]], "error_location": 161, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/MarSoft/ses-mailer-2.git", "old_path": "ses_mailer.py", "hash": "8c1b6aafc09412a6b6b2b1a69337ccbd99fc43f2", "code": "def parse_template(self, template: str, **context) -> Dict[str, str]:\n    \"\"\"\n    To parse a template and return all the blocks\n    \"\"\"\n    required_blocks: List[str] = [\"subject\", \"body\"]\n    optional_blocks: List[str] = [\"text_body\", \"html_body\", \"return_path\", \"format\"]\n\n    if self.template_context:\n        context: Dict = dict(list(self.template_context.items()) +\n                    list(context.items()))\n    blocks: Dict[str, str] = self.template.render_blocks(template, **context)\n\n    for rb in required_blocks:\n        if rb not in blocks:\n            raise AttributeError(\n                \"Template error: block '%s' is missing from '%s'\" %\n                (rb, template))\n\n    mail_params: Dict[str, str] = {\n        \"subject\": blocks[\"subject\"].strip(),\n        \"body\": blocks[\"body\"]\n    }\n    for ob in optional_blocks:\n        if ob in blocks:\n            if ob == \"format\" and                     mail_params[ob].lower() not in [\"html\", \"text\"]:\n                continue\n            mail_params[ob] = blocks[ob]\n    return mail_params\n", "rewrite": "ReplaceText(target='blocks' @(267,24)->(267,35))", "error_line": 25, "has_bug": true, "code_full": "from typing import Any, Dict, List\n\n\nclass TemplateEngine:\n    def render_blocks(self, template: str, **context: Dict[str, Any]) -> Dict[str, str]:\n        return {}\n    \n\nclass Mail:\n    template_context: Dict[str, Any]\n    template: TemplateEngine\n\n    def parse_template(self, template: str, **context) -> Dict[str, str]:\n        \"\"\"\n        To parse a template and return all the blocks\n        \"\"\"\n        required_blocks: List[str] = [\"subject\", \"body\"]\n        optional_blocks: List[str] = [\"text_body\", \"html_body\", \"return_path\", \"format\"]\n\n        if self.template_context:\n            context: Dict = dict(list(self.template_context.items()) +\n                        list(context.items()))\n        blocks: Dict[str, str] = self.template.render_blocks(template, **context)\n\n        for rb in required_blocks:\n            if rb not in blocks:\n                raise AttributeError(\n                    \"Template error: block '%s' is missing from '%s'\" %\n                    (rb, template))\n\n        mail_params: Dict[str, str] = {\n            \"subject\": blocks[\"subject\"].strip(),\n            \"body\": blocks[\"body\"]\n        }\n        for ob in optional_blocks:\n            if ob in blocks:\n                if ob == \"format\" and                         mail_params[ob].lower() not in [\"html\", \"text\"]:\n                    continue\n                mail_params[ob] = blocks[ob]\n        return mail_params\n", "error_location_char": [918, 929], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def formfield(", "self", ",", "**kwargs", ")", ":", "#NEWLINE#", "#INDENT#", "defaults", "=", "{", "'max_length'", ":", "self", ".", "max_length", ",", "'min_length'", ":", "self", ".", "min_length", "}", "#NEWLINE#", "defaults", ".", "update", "(", "kwargs", ")", "#NEWLINE#", "return", "super", "(", "RandomStringFieldBase", ",", "self", ")", ".", "formfield", "(", "**", "kwargs", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [8, 17, 7, "enum_FIELD"], [24, 28, 7, "enum_FIELD"], [32, 41, 7, "enum_FIELD"], [28, 26, 7, "enum_FIELD"], [41, 39, 7, "enum_FIELD"], [15, 14, 7, "enum_FIELD"], [21, 20, 7, "enum_FIELD"], [26, 25, 7, "enum_FIELD"], [39, 36, 7, "enum_FIELD"], [42, 43, 7, "enum_FIELD"], [36, 33, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [14, 2, 10, "enum_LAST_LEXICAL_USE"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [20, 14, 10, "enum_LAST_LEXICAL_USE"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [25, 9, 10, "enum_LAST_LEXICAL_USE"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [37, 20, 10, "enum_LAST_LEXICAL_USE"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [43, 29, 10, "enum_LAST_LEXICAL_USE"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [3, 8, 1, "enum_CFG_NEXT"], [8, 24, 1, "enum_CFG_NEXT"], [24, 32, 1, "enum_CFG_NEXT"], [14, 2, 3, "enum_LAST_WRITE"], [20, 14, 2, "enum_LAST_READ"], [20, 2, 3, "enum_LAST_WRITE"], [25, 9, 3, "enum_LAST_WRITE"], [37, 20, 2, "enum_LAST_READ"], [37, 2, 3, "enum_LAST_WRITE"], [43, 29, 2, "enum_LAST_READ"], [9, 14, 4, "enum_COMPUTED_FROM"], [9, 20, 4, "enum_COMPUTED_FROM"]], "error_location": 43, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/thenewguy/django-randomfields.git", "old_path": "randomfields/models/fields/string.py", "hash": "983d6a2940e17a42326137b6592e0ed3ea3de8bd", "code": "def formfield(self, **kwargs) -> Any:\n    defaults: Dict[str, int] = {\n        'max_length': self.max_length,\n        'min_length': self.min_length,\n    }\n    defaults.update(kwargs)\n    return super(RandomStringFieldBase, self).formfield(**kwargs)\n", "rewrite": "ReplaceText(target='defaults' @(52,62)->(52,68))", "error_line": 6, "has_bug": true, "code_full": "from typing import Any, Dict\n\n\nclass RandomFieldBase:\n    def formfield(self, **kwargs) -> Any:\n        pass\n\n\nclass RandomStringFieldBase(RandomFieldBase):\n    max_length: int\n    min_length: int\n\n    def formfield(self, **kwargs) -> Any:\n        defaults: Dict[str, int] = {\n            'max_length': self.max_length,\n            'min_length': self.min_length,\n        }\n        defaults.update(kwargs)\n        return super(RandomStringFieldBase, self).formfield(**kwargs)\n", "error_location_char": [241, 247], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def test_shrink_to_fit(", "self", ",", "cls", ")", ":", "#NEWLINE#", "#INDENT#", "bm1", "=", "BitMap", "(", ")", "#NEWLINE#", "size", "=", "1000", "#NEWLINE#", "for", "i", "in", "range", "(", "size", ")", ":", "#NEWLINE#", "#INDENT#", "bm1", ".", "add", "(", "i", ")", "#NEWLINE#", "#UNINDENT#", "bm2", "=", "cls", "(", "bm1", ",", "optimize", "=", "False", ")", "#NEWLINE#", "self", ".", "assertGreater", "(", "bm2", ".", "shrink_to_fit", "(", ")", ",", "0", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "bm2", ".", "shrink_to_fit", "(", ")", ",", "0", ")", "#NEWLINE#", "bm3", "=", "cls", "(", "bm1", ",", "optimize", "=", "True", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "bm2", ".", "shrink_to_fit", "(", ")", ",", "0", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [8, 12, 7, "enum_FIELD"], [14, 17, 7, "enum_FIELD"], [21, 20, 7, "enum_FIELD"], [21, 23, 7, "enum_FIELD"], [36, 42, 7, "enum_FIELD"], [47, 57, 7, "enum_FIELD"], [60, 70, 7, "enum_FIELD"], [73, 79, 7, "enum_FIELD"], [84, 94, 7, "enum_FIELD"], [12, 11, 7, "enum_FIELD"], [23, 22, 7, "enum_FIELD"], [28, 32, 7, "enum_FIELD"], [42, 39, 7, "enum_FIELD"], [57, 49, 7, "enum_FIELD"], [70, 62, 7, "enum_FIELD"], [79, 76, 7, "enum_FIELD"], [94, 86, 7, "enum_FIELD"], [32, 30, 7, "enum_FIELD"], [43, 45, 7, "enum_FIELD"], [49, 48, 7, "enum_FIELD"], [55, 53, 7, "enum_FIELD"], [62, 61, 7, "enum_FIELD"], [68, 66, 7, "enum_FIELD"], [80, 82, 7, "enum_FIELD"], [86, 85, 7, "enum_FIELD"], [92, 90, 7, "enum_FIELD"], [30, 29, 7, "enum_FIELD"], [53, 52, 7, "enum_FIELD"], [66, 65, 7, "enum_FIELD"], [90, 89, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [24, 15, 10, "enum_LAST_LEXICAL_USE"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 28, 9, "enum_NEXT_SYNTAX"], [29, 9, 10, "enum_LAST_LEXICAL_USE"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [33, 20, 10, "enum_LAST_LEXICAL_USE"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [39, 4, 10, "enum_LAST_LEXICAL_USE"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [41, 29, 10, "enum_LAST_LEXICAL_USE"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [48, 2, 10, "enum_LAST_LEXICAL_USE"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [52, 37, 10, "enum_LAST_LEXICAL_USE"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [61, 48, 10, "enum_LAST_LEXICAL_USE"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [65, 52, 10, "enum_LAST_LEXICAL_USE"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [76, 39, 10, "enum_LAST_LEXICAL_USE"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [78, 41, 10, "enum_LAST_LEXICAL_USE"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [85, 61, 10, "enum_LAST_LEXICAL_USE"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [89, 65, 10, "enum_LAST_LEXICAL_USE"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [3, 8, 1, "enum_CFG_NEXT"], [8, 14, 1, "enum_CFG_NEXT"], [14, 23, 1, "enum_CFG_NEXT"], [23, 20, 1, "enum_CFG_NEXT"], [20, 36, 1, "enum_CFG_NEXT"], [20, 28, 1, "enum_CFG_NEXT"], [28, 20, 1, "enum_CFG_NEXT"], [36, 47, 1, "enum_CFG_NEXT"], [47, 60, 1, "enum_CFG_NEXT"], [60, 73, 1, "enum_CFG_NEXT"], [73, 84, 1, "enum_CFG_NEXT"], [24, 15, 3, "enum_LAST_WRITE"], [20, 33, 2, "enum_LAST_READ"], [20, 20, 3, "enum_LAST_WRITE"], [29, 29, 2, "enum_LAST_READ"], [29, 9, 3, "enum_LAST_WRITE"], [33, 33, 2, "enum_LAST_READ"], [33, 20, 3, "enum_LAST_WRITE"], [39, 4, 3, "enum_LAST_WRITE"], [41, 29, 2, "enum_LAST_READ"], [41, 9, 3, "enum_LAST_WRITE"], [48, 2, 3, "enum_LAST_WRITE"], [52, 37, 3, "enum_LAST_WRITE"], [61, 48, 2, "enum_LAST_READ"], [61, 2, 3, "enum_LAST_WRITE"], [65, 52, 2, "enum_LAST_READ"], [65, 37, 3, "enum_LAST_WRITE"], [76, 39, 2, "enum_LAST_READ"], [76, 4, 3, "enum_LAST_WRITE"], [78, 41, 2, "enum_LAST_READ"], [78, 9, 3, "enum_LAST_WRITE"], [85, 61, 2, "enum_LAST_READ"], [85, 2, 3, "enum_LAST_WRITE"], [89, 65, 2, "enum_LAST_READ"], [89, 37, 3, "enum_LAST_WRITE"], [9, 11, 4, "enum_COMPUTED_FROM"], [37, 39, 4, "enum_COMPUTED_FROM"], [37, 41, 4, "enum_COMPUTED_FROM"], [74, 76, 4, "enum_COMPUTED_FROM"], [74, 78, 4, "enum_COMPUTED_FROM"]], "error_location": 89, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/Ezibenroc/PyRoaringBitMap.git", "old_path": "test.py", "hash": "7081ceba18ccaf2ee80d3c142e6e612cf77d17d2", "code": "def test_shrink_to_fit(self, cls: Type[BitMap]):\n    bm1: BitMap = BitMap()\n    size: int = 1000\n    for i in range(size):\n        bm1.add(i)\n    bm2: BitMap = cls(bm1, optimize=False)\n    self.assertGreater(bm2.shrink_to_fit(), 0)\n    self.assertEqual(bm2.shrink_to_fit(), 0)\n    bm3: BitMap = cls(bm1, optimize=True)\n    self.assertEqual(bm2.shrink_to_fit(), 0)\n", "rewrite": "ReplaceText(target='bm3' @(782,25)->(782,28))", "error_line": 9, "has_bug": true, "code_full": "import unittest\nfrom typing import Optional, Type\n\n\nclass BitMap:\n    def __init__(self, bm: Optional[\"BitMap\"] = None, optimize: bool = False):\n        pass\n\n    def add(self, item: int):\n        pass\n\n    def shrink_to_fit(self) -> int:\n        return 0\n\n\nclass OptimizationTest(unittest.TestCase):\n    def test_shrink_to_fit(self, cls: Type[BitMap]):\n        bm1: BitMap = BitMap()\n        size: int = 1000\n        for i in range(size):\n            bm1.add(i)\n        bm2: BitMap = cls(bm1, optimize=False)\n        self.assertGreater(bm2.shrink_to_fit(), 0)\n        self.assertEqual(bm2.shrink_to_fit(), 0)\n        bm3: BitMap = cls(bm1, optimize=True)\n        self.assertEqual(bm2.shrink_to_fit(), 0)\n", "error_location_char": [340, 343], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def render(", "self", ",", "orcname", ",", "fname", ",", "sr", "=", "48000", ",", "ksmps", "=", "1", ")", "->", "str", ":", "#NEWLINE#", "#INDENT#", "sconame", "=", "self", ".", "to_file", "(", "fname", ")", "#NEWLINE#", "outname", "=", "(", "fname", "+", "'.wav'", ")", "#NEWLINE#", "call", "(", "[", "'csound'", ",", "(", "'--sample-rate='", "+", "str", "(", "sr", ")", ")", ",", "(", "'--control-rate='", "+", "str", "(", "(", "sr", "/", "ksmps", ")", ")", ")", ",", "(", "(", "'--logfile='", "+", "fname", ")", "+", "'.log'", ")", ",", "'--format=wav'", ",", "(", "'--output='", "+", "outname", ")", ",", "'--format=24bit'", ",", "'--nodisplays'", ",", "orcname", ",", "sconame", "]", ")", "#NEWLINE#", "return", "fname"], "edges": [[1, 7, 7, "enum_FIELD"], [1, 17, 7, "enum_FIELD"], [20, 26, 7, "enum_FIELD"], [29, 34, 7, "enum_FIELD"], [37, 39, 7, "enum_FIELD"], [93, 94, 7, "enum_FIELD"], [26, 24, 7, "enum_FIELD"], [34, 33, 7, "enum_FIELD"], [34, 35, 7, "enum_FIELD"], [39, 38, 7, "enum_FIELD"], [24, 23, 7, "enum_FIELD"], [45, 44, 7, "enum_FIELD"], [45, 47, 7, "enum_FIELD"], [54, 53, 7, "enum_FIELD"], [54, 56, 7, "enum_FIELD"], [71, 68, 7, "enum_FIELD"], [71, 72, 7, "enum_FIELD"], [79, 78, 7, "enum_FIELD"], [79, 80, 7, "enum_FIELD"], [47, 46, 7, "enum_FIELD"], [56, 55, 7, "enum_FIELD"], [68, 67, 7, "enum_FIELD"], [68, 69, 7, "enum_FIELD"], [59, 58, 7, "enum_FIELD"], [59, 60, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [23, 2, 10, "enum_LAST_LEXICAL_USE"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [27, 6, 10, "enum_LAST_LEXICAL_USE"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [33, 27, 10, "enum_LAST_LEXICAL_USE"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [46, 17, 10, "enum_LAST_LEXICAL_USE"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [48, 8, 10, "enum_LAST_LEXICAL_USE"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [55, 46, 10, "enum_LAST_LEXICAL_USE"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [58, 48, 10, "enum_LAST_LEXICAL_USE"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [60, 12, 10, "enum_LAST_LEXICAL_USE"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [69, 33, 10, "enum_LAST_LEXICAL_USE"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [80, 30, 10, "enum_LAST_LEXICAL_USE"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [87, 4, 10, "enum_LAST_LEXICAL_USE"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [89, 21, 10, "enum_LAST_LEXICAL_USE"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 93, 9, "enum_NEXT_SYNTAX"], [94, 69, 10, "enum_LAST_LEXICAL_USE"], [93, 94, 9, "enum_NEXT_SYNTAX"], [10, 14, 1, "enum_CFG_NEXT"], [14, 1, 1, "enum_CFG_NEXT"], [7, 20, 1, "enum_CFG_NEXT"], [20, 29, 1, "enum_CFG_NEXT"], [29, 37, 1, "enum_CFG_NEXT"], [37, 93, 1, "enum_CFG_NEXT"], [23, 2, 3, "enum_LAST_WRITE"], [27, 6, 3, "enum_LAST_WRITE"], [33, 27, 2, "enum_LAST_READ"], [33, 6, 3, "enum_LAST_WRITE"], [48, 8, 3, "enum_LAST_WRITE"], [55, 46, 2, "enum_LAST_READ"], [58, 48, 2, "enum_LAST_READ"], [58, 8, 3, "enum_LAST_WRITE"], [60, 12, 3, "enum_LAST_WRITE"], [69, 33, 2, "enum_LAST_READ"], [69, 6, 3, "enum_LAST_WRITE"], [80, 30, 3, "enum_LAST_WRITE"], [87, 4, 3, "enum_LAST_WRITE"], [89, 21, 3, "enum_LAST_WRITE"], [94, 69, 2, "enum_LAST_READ"], [94, 6, 3, "enum_LAST_WRITE"], [21, 27, 4, "enum_COMPUTED_FROM"], [21, 23, 4, "enum_COMPUTED_FROM"], [30, 33, 4, "enum_COMPUTED_FROM"]], "error_location": 94, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/inkeye/cyscore.git", "old_path": "cyscore/score.py", "hash": "f7b659afcfa4dce73a8915e8fccd916a68248d83", "code": "def render(self, orcname: str, fname: str,\n        sr: int = 48000, ksmps: int = 1) -> str:\n    sconame: str = self.to_file(fname)\n    outname: str = fname + \".wav\"\n    call([\"csound\",\n        \"--sample-rate=\" + str(sr),\n        \"--control-rate=\" + str(sr / ksmps),\n        \"--logfile=\" + fname + \".log\",\n        \"--format=wav\",\n        \"--output=\" + outname,\n        \"--format=24bit\",\n        \"--nodisplays\",\n        orcname,\n        sconame])\n    return fname\n", "rewrite": "ReplaceText(target='outname' @(43,15)->(43,20))", "error_line": 14, "has_bug": true, "code_full": "from subprocess import call\nfrom typing import Any\n\n\nclass Score:\n    def to_file(self, fname: str) -> str:\n        return \"\"\n    \n    def render(self, orcname: str, fname: str,\n            sr: int = 48000, ksmps: int = 1) -> str:\n        sconame: str = self.to_file(fname)\n        outname: str = fname + \".wav\"\n        call([\"csound\",\n            \"--sample-rate=\" + str(sr),\n            \"--control-rate=\" + str(sr / ksmps),\n            \"--logfile=\" + fname + \".log\",\n            \"--format=wav\",\n            \"--output=\" + outname,\n            \"--format=24bit\",\n            \"--nodisplays\",\n            orcname,\n            sconame])\n        return fname\n", "error_location_char": [456, 461], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def calculate_anomaly_score(", "self", ",", "log", ")", ":", "#NEWLINE#", "#INDENT#", "'Compute a distance of a log entry to elements of SOM.'", "#NEWLINE#", "dist_smallest", "=", "np", ".", "inf", "#NEWLINE#", "for", "x", "in", "range", "(", "self", ".", "model", ".", "shape", "[", "0", "]", ")", ":", "#NEWLINE#", "#INDENT#", "for", "y", "in", "range", "(", "self", ".", "model", ".", "shape", "[", "1", "]", ")", ":", "#NEWLINE#", "#INDENT#", "dist", "=", "np", ".", "linalg", ".", "norm", "(", "(", "self", ".", "model", "[", "x", "]", "[", "y", "]", "-", "log", ")", ")", "#NEWLINE#", "if", "(", "dist", "<", "dist_smallest", ")", ":", "#NEWLINE#", "#INDENT#", "dist_smallest", "=", "dist", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "return", "dist"], "edges": [[1, 3, 7, "enum_FIELD"], [8, 9, 7, "enum_FIELD"], [10, 14, 7, "enum_FIELD"], [19, 18, 7, "enum_FIELD"], [19, 21, 7, "enum_FIELD"], [90, 91, 7, "enum_FIELD"], [14, 13, 7, "enum_FIELD"], [21, 20, 7, "enum_FIELD"], [36, 35, 7, "enum_FIELD"], [36, 38, 7, "enum_FIELD"], [27, 25, 7, "enum_FIELD"], [27, 28, 7, "enum_FIELD"], [38, 37, 7, "enum_FIELD"], [50, 58, 7, "enum_FIELD"], [74, 77, 7, "enum_FIELD"], [25, 23, 7, "enum_FIELD"], [44, 42, 7, "enum_FIELD"], [44, 45, 7, "enum_FIELD"], [58, 56, 7, "enum_FIELD"], [77, 76, 7, "enum_FIELD"], [82, 85, 7, "enum_FIELD"], [23, 22, 7, "enum_FIELD"], [42, 40, 7, "enum_FIELD"], [56, 54, 7, "enum_FIELD"], [69, 66, 7, "enum_FIELD"], [69, 70, 7, "enum_FIELD"], [40, 39, 7, "enum_FIELD"], [54, 53, 7, "enum_FIELD"], [66, 63, 7, "enum_FIELD"], [66, 67, 7, "enum_FIELD"], [63, 61, 7, "enum_FIELD"], [63, 64, 7, "enum_FIELD"], [61, 60, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [22, 2, 10, "enum_LAST_LEXICAL_USE"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [37, 20, 10, "enum_LAST_LEXICAL_USE"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [39, 22, 10, "enum_LAST_LEXICAL_USE"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [53, 13, 10, "enum_LAST_LEXICAL_USE"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [60, 39, 10, "enum_LAST_LEXICAL_USE"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [64, 18, 10, "enum_LAST_LEXICAL_USE"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [67, 35, 10, "enum_LAST_LEXICAL_USE"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [70, 4, 10, "enum_LAST_LEXICAL_USE"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [76, 51, 10, "enum_LAST_LEXICAL_USE"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [78, 11, 10, "enum_LAST_LEXICAL_USE"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 82, 9, "enum_NEXT_SYNTAX"], [83, 78, 10, "enum_LAST_LEXICAL_USE"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [85, 76, 10, "enum_LAST_LEXICAL_USE"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 90, 9, "enum_NEXT_SYNTAX"], [91, 85, 10, "enum_LAST_LEXICAL_USE"], [90, 91, 9, "enum_NEXT_SYNTAX"], [3, 8, 1, "enum_CFG_NEXT"], [8, 10, 1, "enum_CFG_NEXT"], [10, 21, 1, "enum_CFG_NEXT"], [21, 18, 1, "enum_CFG_NEXT"], [18, 90, 1, "enum_CFG_NEXT"], [18, 38, 1, "enum_CFG_NEXT"], [38, 35, 1, "enum_CFG_NEXT"], [35, 50, 1, "enum_CFG_NEXT"], [35, 18, 1, "enum_CFG_NEXT"], [50, 77, 1, "enum_CFG_NEXT"], [77, 35, 1, "enum_CFG_NEXT"], [77, 82, 1, "enum_CFG_NEXT"], [82, 35, 1, "enum_CFG_NEXT"], [22, 2, 3, "enum_LAST_WRITE"], [18, 64, 2, "enum_LAST_READ"], [18, 18, 3, "enum_LAST_WRITE"], [37, 37, 2, "enum_LAST_READ"], [37, 20, 2, "enum_LAST_READ"], [39, 60, 2, "enum_LAST_READ"], [39, 22, 2, "enum_LAST_READ"], [39, 39, 2, "enum_LAST_READ"], [39, 2, 3, "enum_LAST_WRITE"], [35, 67, 2, "enum_LAST_READ"], [35, 35, 3, "enum_LAST_WRITE"], [53, 13, 2, "enum_LAST_READ"], [53, 53, 2, "enum_LAST_READ"], [60, 60, 2, "enum_LAST_READ"], [60, 39, 2, "enum_LAST_READ"], [60, 2, 3, "enum_LAST_WRITE"], [64, 64, 2, "enum_LAST_READ"], [64, 18, 3, "enum_LAST_WRITE"], [67, 67, 2, "enum_LAST_READ"], [67, 35, 3, "enum_LAST_WRITE"], [70, 70, 2, "enum_LAST_READ"], [70, 4, 3, "enum_LAST_WRITE"], [51, 85, 2, "enum_LAST_READ"], [51, 76, 2, "enum_LAST_READ"], [51, 51, 3, "enum_LAST_WRITE"], [76, 85, 2, "enum_LAST_READ"], [76, 76, 2, "enum_LAST_READ"], [76, 51, 3, "enum_LAST_WRITE"], [78, 78, 2, "enum_LAST_READ"], [78, 11, 3, "enum_LAST_WRITE"], [78, 83, 3, "enum_LAST_WRITE"], [85, 76, 2, "enum_LAST_READ"], [85, 51, 3, "enum_LAST_WRITE"], [83, 78, 2, "enum_LAST_READ"], [83, 11, 3, "enum_LAST_WRITE"], [83, 83, 3, "enum_LAST_WRITE"], [91, 85, 2, "enum_LAST_READ"], [91, 76, 2, "enum_LAST_READ"], [91, 51, 3, "enum_LAST_WRITE"], [11, 13, 4, "enum_COMPUTED_FROM"], [51, 70, 4, "enum_COMPUTED_FROM"], [51, 53, 4, "enum_COMPUTED_FROM"], [51, 67, 4, "enum_COMPUTED_FROM"], [51, 64, 4, "enum_COMPUTED_FROM"], [51, 60, 4, "enum_COMPUTED_FROM"], [83, 85, 4, "enum_COMPUTED_FROM"]], "error_location": 91, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/AICoE/log-anomaly-detector.git", "old_path": "anomaly_detector/model/sompy_model.py", "hash": "cd462c169c77152ae10cf3b0b99adfa51d53c043", "code": "def calculate_anomaly_score(self, log: np.ndarray) -> np.floating:\n    \"\"\"Compute a distance of a log entry to elements of SOM.\"\"\"\n    # convert log into vector using same word2vec model (here just going to grab from existing)\n    dist_smallest = np.inf\n    for x in range(self.model.shape[0]):\n        for y in range(self.model.shape[1]):\n            dist: np.floating = np.linalg.norm(self.model[x][y] - log)\n            if dist < dist_smallest:\n                dist_smallest: np.floating = dist\n    return dist\n", "rewrite": "ReplaceText(target='dist_smallest' @(40,15)->(40,19))", "error_line": 9, "has_bug": true, "code_full": "import numpy as np\n\n\nclass SOMPYModel:\n    model: np.ndarray\n\n    def calculate_anomaly_score(self, log: np.ndarray) -> np.floating:\n        \"\"\"Compute a distance of a log entry to elements of SOM.\"\"\"\n        # convert log into vector using same word2vec model (here just going to grab from existing)\n        dist_smallest = np.inf\n        for x in range(self.model.shape[0]):\n            for y in range(self.model.shape[1]):\n                dist: np.floating = np.linalg.norm(self.model[x][y] - log)\n                if dist < dist_smallest:\n                    dist_smallest: np.floating = dist\n        return dist\n", "error_location_char": [509, 513], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def feature_command(", "tgen", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Run a command\\n    '", "#NEWLINE#", "cmd_dir", "=", "tgen", ".", "make_node", "(", "tgen", ".", "worch", ".", "command_dir", ")", "#NEWLINE#", "cmd_node", "=", "cmd_dir", ".", "make_node", "(", "tgen", ".", "worch", ".", "command_cmd", ")", "#NEWLINE#", "cmd_target", "=", "map", "(", "cmd_dir", ".", "make_node", ",", "tgen", ".", "to_list", "(", "tgen", ".", "worch", ".", "command_target", ")", ")", "#NEWLINE#", "cmd_rule", "=", "'{command_cmd_prefix}{command_cmd} {command_cmd_options} {command_cmd_postfix}'", "#NEWLINE#", "tgen", ".", "step", "(", "'command'", ",", "rule", "=", "tgen", ".", "worch", ".", "format", "(", "cmd_rule", ")", ",", "source", "=", "cmd_node", ",", "target", "=", "cmd_target", ",", "cwd", "=", "cmd_dir", ".", "abspath", "(", ")", ")", "#NEWLINE#", "return"], "edges": [[6, 7, 7, "enum_FIELD"], [8, 14, 7, "enum_FIELD"], [21, 27, 7, "enum_FIELD"], [34, 42, 7, "enum_FIELD"], [54, 57, 7, "enum_FIELD"], [58, 75, 7, "enum_FIELD"], [14, 12, 7, "enum_FIELD"], [27, 25, 7, "enum_FIELD"], [42, 37, 7, "enum_FIELD"], [75, 60, 7, "enum_FIELD"], [12, 11, 7, "enum_FIELD"], [18, 16, 7, "enum_FIELD"], [25, 24, 7, "enum_FIELD"], [31, 29, 7, "enum_FIELD"], [40, 39, 7, "enum_FIELD"], [46, 44, 7, "enum_FIELD"], [60, 59, 7, "enum_FIELD"], [65, 72, 7, "enum_FIELD"], [76, 78, 7, "enum_FIELD"], [80, 82, 7, "enum_FIELD"], [84, 89, 7, "enum_FIELD"], [16, 15, 7, "enum_FIELD"], [29, 28, 7, "enum_FIELD"], [44, 43, 7, "enum_FIELD"], [50, 48, 7, "enum_FIELD"], [72, 70, 7, "enum_FIELD"], [89, 87, 7, "enum_FIELD"], [48, 47, 7, "enum_FIELD"], [70, 68, 7, "enum_FIELD"], [87, 86, 7, "enum_FIELD"], [68, 67, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [11, 2, 10, "enum_LAST_LEXICAL_USE"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [15, 11, 10, "enum_LAST_LEXICAL_USE"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [24, 9, 10, "enum_LAST_LEXICAL_USE"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [28, 15, 10, "enum_LAST_LEXICAL_USE"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [39, 24, 10, "enum_LAST_LEXICAL_USE"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [43, 28, 10, "enum_LAST_LEXICAL_USE"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [47, 43, 10, "enum_LAST_LEXICAL_USE"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [59, 47, 10, "enum_LAST_LEXICAL_USE"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [67, 59, 10, "enum_LAST_LEXICAL_USE"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [73, 55, 10, "enum_LAST_LEXICAL_USE"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [78, 22, 10, "enum_LAST_LEXICAL_USE"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [82, 35, 10, "enum_LAST_LEXICAL_USE"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [86, 39, 10, "enum_LAST_LEXICAL_USE"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 93, 9, "enum_NEXT_SYNTAX"], [6, 8, 1, "enum_CFG_NEXT"], [8, 21, 1, "enum_CFG_NEXT"], [21, 34, 1, "enum_CFG_NEXT"], [34, 54, 1, "enum_CFG_NEXT"], [54, 58, 1, "enum_CFG_NEXT"], [58, 93, 1, "enum_CFG_NEXT"], [11, 2, 3, "enum_LAST_WRITE"], [15, 11, 2, "enum_LAST_READ"], [15, 2, 3, "enum_LAST_WRITE"], [24, 9, 3, "enum_LAST_WRITE"], [28, 15, 2, "enum_LAST_READ"], [28, 2, 3, "enum_LAST_WRITE"], [39, 24, 2, "enum_LAST_READ"], [39, 9, 3, "enum_LAST_WRITE"], [43, 28, 2, "enum_LAST_READ"], [43, 2, 3, "enum_LAST_WRITE"], [47, 43, 2, "enum_LAST_READ"], [47, 2, 3, "enum_LAST_WRITE"], [59, 47, 2, "enum_LAST_READ"], [59, 2, 3, "enum_LAST_WRITE"], [67, 59, 2, "enum_LAST_READ"], [67, 2, 3, "enum_LAST_WRITE"], [73, 55, 3, "enum_LAST_WRITE"], [78, 22, 3, "enum_LAST_WRITE"], [82, 35, 3, "enum_LAST_WRITE"], [86, 39, 2, "enum_LAST_READ"], [86, 9, 3, "enum_LAST_WRITE"], [9, 11, 4, "enum_COMPUTED_FROM"], [9, 15, 4, "enum_COMPUTED_FROM"], [22, 24, 4, "enum_COMPUTED_FROM"], [22, 28, 4, "enum_COMPUTED_FROM"], [35, 37, 4, "enum_COMPUTED_FROM"], [35, 39, 4, "enum_COMPUTED_FROM"], [35, 43, 4, "enum_COMPUTED_FROM"], [35, 47, 4, "enum_COMPUTED_FROM"]], "error_location": 39, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/brettviren/worch.git", "old_path": "orch/features/feature_command.py", "hash": "7941cffa22b2e9933e57139329e3c9d9cf555623", "code": "def feature_command(tgen: Tgen):\n    '''\n    Run a command\n    '''\n    cmd_dir: Node = tgen.make_node(tgen.worch.command_dir)\n    cmd_node: Node = cmd_dir.make_node(tgen.worch.command_cmd)\n    cmd_target: Iterable[Node] =         map(cmd_dir.make_node, tgen.to_list(tgen.worch.command_target))\n    cmd_rule: str = '{command_cmd_prefix}{command_cmd} {command_cmd_options} {command_cmd_postfix}'\n    tgen.step('command',\n              rule = tgen.worch.format(cmd_rule),\n              source = cmd_node,\n              target = cmd_target,\n              cwd = cmd_dir.abspath())\n\n    return\n", "rewrite": "ReplaceText(target='tgen' @(34,12)->(34,19))", "error_line": 7, "has_bug": true, "code_full": "from typing import Any, Iterable, List, Union\n\n\nclass Node:\n    path: str\n\n    def make_node(self, path: str) -> 'Node':\n        return Node()\n\n    def abspath(self) -> str:\n        return self.path\n\n\nclass Tgen:\n    worch: Any\n\n    def make_node(self, path: str) -> Node:\n        return Node()\n\n    def to_list(self, value: Union[str, List[str]]) -> List[str]:\n        return []\n\n    def step(self, name: str, rule: str, source: Node, target: Iterable[Node], cwd: str):\n        pass\n\n    def format(self, string: str) -> str:\n        return string\n\ndef feature_command(tgen: Tgen):\n    '''\n    Run a command\n    '''\n    cmd_dir: Node = tgen.make_node(tgen.worch.command_dir)\n    cmd_node: Node = cmd_dir.make_node(tgen.worch.command_cmd)\n    cmd_target: Iterable[Node] =         map(cmd_dir.make_node, tgen.to_list(tgen.worch.command_target))\n    cmd_rule: str = '{command_cmd_prefix}{command_cmd} {command_cmd_options} {command_cmd_postfix}'\n    tgen.step('command',\n              rule = tgen.worch.format(cmd_rule),\n              source = cmd_node,\n              target = cmd_target,\n              cwd = cmd_dir.abspath())\n\n    return\n", "error_location_char": [234, 241], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def satisfy(", "self", ",", "*", "requirements", ")", ":", "#NEWLINE#", "#INDENT#", "versions", "=", "[", "]", "#NEWLINE#", "for", "req_range", "in", "requirements", ":", "#NEWLINE#", "#INDENT#", "req", "=", "req_range", ".", "requirement", "#NEWLINE#", "local_name", "=", "self", ".", "map_req", "(", "req", ")", "#NEWLINE#", "try", ":", "#NEWLINE#", "#INDENT#", "version_names", "=", "self", ".", "_available", "[", "local_name", "]", "#NEWLINE#", "#UNINDENT#", "except", "KeyError", ":", "#NEWLINE#", "#INDENT#", "if", "self", ".", "_fail_on_missing", ":", "#NEWLINE#", "#INDENT#", "raise", "ArcanaRequirementNotFoundError", "(", "'Could not find module for {} ({})'", ".", "format", "(", "req", ".", "name", ",", "local_name", ")", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "logger", ".", "warning", "(", "'Did not find module for {} ({})'", ".", "format", "(", "req", ".", "name", ",", "local_name", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "avail_versions", "=", "[", "]", "#NEWLINE#", "for", "local_ver_name", "in", "version_names", ":", "#NEWLINE#", "#INDENT#", "ver_name", "=", "self", ".", "map_version", "(", "req_range", ",", "local_ver_name", ")", "#NEWLINE#", "try", ":", "#NEWLINE#", "#INDENT#", "avail_versions", ".", "append", "(", "req", ".", "v", "(", "ver_name", ",", "local_name", "=", "local_name", ",", "local_version", "=", "local_ver_name", ")", ")", "#NEWLINE#", "#UNINDENT#", "except", "ArcanaVersionNotDetectableError", ":", "#NEWLINE#", "#INDENT#", "if", "self", ".", "_ignore_unrecog", ":", "#NEWLINE#", "#INDENT#", "logger", ".", "warning", "(", "\"Ignoring unrecognised available version '{}' of {}\"", ".", "format", "(", "ver_name", ",", "req_range", ".", "name", ")", ")", "#NEWLINE#", "continue", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "raise", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "version", "=", "req_range", ".", "latest_within", "(", "avail_versions", ")", "#NEWLINE#", "if", "self", ".", "_detect_exact_versions", ":", "#NEWLINE#", "#INDENT#", "self", ".", "load", "(", "version", ")", "#NEWLINE#", "exact_version", "=", "req", ".", "detect_version", "(", "local_name", "=", "local_name", ",", "local_version", "=", "local_ver_name", ")", "#NEWLINE#", "self", ".", "unload", "(", "version", ")", "#NEWLINE#", "if", "(", "not", "req_range", ".", "within", "(", "exact_version", ")", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "ArcanaVersionError", "(", "'Version of {} specified by module {} does not match expected {} and is outside the acceptable range [{}]'", ".", "format", "(", "req", ".", "name", ",", "local_ver_name", ",", "str", "(", "version", ")", ",", "str", "(", "req_range", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "if", "(", "exact_version", "<", "version", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "ArcanaVersionError", "(", "'Version of {} specified by module {} is less than the expected {}'", ".", "format", "(", "req", ".", "name", ",", "local_ver_name", ",", "str", "(", "version", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "version", "=", "exact_version", "#NEWLINE#", "#UNINDENT#", "versions", ".", "append", "(", "version", ")", "#NEWLINE#", "#UNINDENT#", "return", "versions"], "edges": [[1, 3, 7, "enum_FIELD"], [3, 5, 7, "enum_FIELD"], [9, 12, 7, "enum_FIELD"], [17, 16, 7, "enum_FIELD"], [17, 18, 7, "enum_FIELD"], [316, 317, 7, "enum_FIELD"], [21, 25, 7, "enum_FIELD"], [27, 33, 7, "enum_FIELD"], [100, 103, 7, "enum_FIELD"], [108, 107, 7, "enum_FIELD"], [108, 109, 7, "enum_FIELD"], [188, 194, 7, "enum_FIELD"], [198, 200, 7, "enum_FIELD"], [307, 311, 7, "enum_FIELD"], [25, 24, 7, "enum_FIELD"], [33, 31, 7, "enum_FIELD"], [40, 46, 7, "enum_FIELD"], [51, 52, 7, "enum_FIELD"], [112, 120, 7, "enum_FIELD"], [194, 192, 7, "enum_FIELD"], [200, 199, 7, "enum_FIELD"], [204, 208, 7, "enum_FIELD"], [211, 221, 7, "enum_FIELD"], [226, 230, 7, "enum_FIELD"], [234, 236, 7, "enum_FIELD"], [273, 276, 7, "enum_FIELD"], [302, 305, 7, "enum_FIELD"], [311, 309, 7, "enum_FIELD"], [31, 30, 7, "enum_FIELD"], [46, 44, 7, "enum_FIELD"], [46, 47, 7, "enum_FIELD"], [60, 58, 7, "enum_FIELD"], [120, 116, 7, "enum_FIELD"], [127, 131, 7, "enum_FIELD"], [149, 150, 7, "enum_FIELD"], [192, 191, 7, "enum_FIELD"], [208, 206, 7, "enum_FIELD"], [221, 215, 7, "enum_FIELD"], [230, 228, 7, "enum_FIELD"], [236, 240, 7, "enum_FIELD"], [247, 249, 7, "enum_FIELD"], [276, 275, 7, "enum_FIELD"], [282, 284, 7, "enum_FIELD"], [309, 308, 7, "enum_FIELD"], [44, 43, 7, "enum_FIELD"], [58, 57, 7, "enum_FIELD"], [63, 65, 7, "enum_FIELD"], [82, 86, 7, "enum_FIELD"], [116, 115, 7, "enum_FIELD"], [131, 129, 7, "enum_FIELD"], [158, 156, 7, "enum_FIELD"], [206, 205, 7, "enum_FIELD"], [215, 214, 7, "enum_FIELD"], [218, 220, 7, "enum_FIELD"], [222, 224, 7, "enum_FIELD"], [228, 227, 7, "enum_FIELD"], [240, 238, 7, "enum_FIELD"], [249, 248, 7, "enum_FIELD"], [284, 283, 7, "enum_FIELD"], [65, 64, 7, "enum_FIELD"], [86, 84, 7, "enum_FIELD"], [129, 128, 7, "enum_FIELD"], [137, 133, 7, "enum_FIELD"], [156, 155, 7, "enum_FIELD"], [160, 164, 7, "enum_FIELD"], [238, 237, 7, "enum_FIELD"], [259, 251, 7, "enum_FIELD"], [292, 286, 7, "enum_FIELD"], [73, 67, 7, "enum_FIELD"], [84, 83, 7, "enum_FIELD"], [94, 88, 7, "enum_FIELD"], [133, 132, 7, "enum_FIELD"], [138, 140, 7, "enum_FIELD"], [142, 144, 7, "enum_FIELD"], [164, 162, 7, "enum_FIELD"], [251, 250, 7, "enum_FIELD"], [255, 254, 7, "enum_FIELD"], [261, 260, 7, "enum_FIELD"], [266, 265, 7, "enum_FIELD"], [286, 285, 7, "enum_FIELD"], [290, 289, 7, "enum_FIELD"], [296, 295, 7, "enum_FIELD"], [67, 66, 7, "enum_FIELD"], [71, 70, 7, "enum_FIELD"], [88, 87, 7, "enum_FIELD"], [92, 91, 7, "enum_FIELD"], [162, 161, 7, "enum_FIELD"], [170, 166, 7, "enum_FIELD"], [166, 165, 7, "enum_FIELD"], [172, 171, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [18, 5, 10, "enum_LAST_LEXICAL_USE"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [24, 16, 10, "enum_LAST_LEXICAL_USE"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [30, 2, 10, "enum_LAST_LEXICAL_USE"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [34, 22, 10, "enum_LAST_LEXICAL_USE"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [43, 30, 10, "enum_LAST_LEXICAL_USE"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [47, 28, 10, "enum_LAST_LEXICAL_USE"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 56, 9, "enum_NEXT_SYNTAX"], [57, 43, 10, "enum_LAST_LEXICAL_USE"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [70, 34, 10, "enum_LAST_LEXICAL_USE"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [74, 47, 10, "enum_LAST_LEXICAL_USE"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [91, 70, 10, "enum_LAST_LEXICAL_USE"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [95, 74, 10, "enum_LAST_LEXICAL_USE"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [109, 41, 10, "enum_LAST_LEXICAL_USE"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [115, 57, 10, "enum_LAST_LEXICAL_USE"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [119, 24, 10, "enum_LAST_LEXICAL_USE"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [121, 107, 10, "enum_LAST_LEXICAL_USE"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 127, 9, "enum_NEXT_SYNTAX"], [128, 101, 10, "enum_LAST_LEXICAL_USE"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [132, 91, 10, "enum_LAST_LEXICAL_USE"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [136, 113, 10, "enum_LAST_LEXICAL_USE"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [140, 95, 10, "enum_LAST_LEXICAL_USE"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [144, 121, 10, "enum_LAST_LEXICAL_USE"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 154, 9, "enum_NEXT_SYNTAX"], [155, 115, 10, "enum_LAST_LEXICAL_USE"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 160, 9, "enum_NEXT_SYNTAX"], [161, 83, 10, "enum_LAST_LEXICAL_USE"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [169, 136, 10, "enum_LAST_LEXICAL_USE"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [171, 119, 10, "enum_LAST_LEXICAL_USE"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [175, 177, 9, "enum_NEXT_SYNTAX"], [177, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 184, 9, "enum_NEXT_SYNTAX"], [184, 188, 9, "enum_NEXT_SYNTAX"], [188, 189, 9, "enum_NEXT_SYNTAX"], [189, 190, 9, "enum_NEXT_SYNTAX"], [191, 171, 10, "enum_LAST_LEXICAL_USE"], [190, 191, 9, "enum_NEXT_SYNTAX"], [191, 192, 9, "enum_NEXT_SYNTAX"], [192, 193, 9, "enum_NEXT_SYNTAX"], [193, 194, 9, "enum_NEXT_SYNTAX"], [195, 128, 10, "enum_LAST_LEXICAL_USE"], [194, 195, 9, "enum_NEXT_SYNTAX"], [195, 196, 9, "enum_NEXT_SYNTAX"], [196, 198, 9, "enum_NEXT_SYNTAX"], [199, 155, 10, "enum_LAST_LEXICAL_USE"], [198, 199, 9, "enum_NEXT_SYNTAX"], [199, 200, 9, "enum_NEXT_SYNTAX"], [200, 201, 9, "enum_NEXT_SYNTAX"], [201, 202, 9, "enum_NEXT_SYNTAX"], [202, 204, 9, "enum_NEXT_SYNTAX"], [205, 199, 10, "enum_LAST_LEXICAL_USE"], [204, 205, 9, "enum_NEXT_SYNTAX"], [205, 206, 9, "enum_NEXT_SYNTAX"], [206, 207, 9, "enum_NEXT_SYNTAX"], [207, 208, 9, "enum_NEXT_SYNTAX"], [209, 189, 10, "enum_LAST_LEXICAL_USE"], [208, 209, 9, "enum_NEXT_SYNTAX"], [209, 210, 9, "enum_NEXT_SYNTAX"], [210, 211, 9, "enum_NEXT_SYNTAX"], [211, 212, 9, "enum_NEXT_SYNTAX"], [212, 213, 9, "enum_NEXT_SYNTAX"], [214, 132, 10, "enum_LAST_LEXICAL_USE"], [213, 214, 9, "enum_NEXT_SYNTAX"], [214, 215, 9, "enum_NEXT_SYNTAX"], [215, 216, 9, "enum_NEXT_SYNTAX"], [216, 217, 9, "enum_NEXT_SYNTAX"], [217, 218, 9, "enum_NEXT_SYNTAX"], [218, 219, 9, "enum_NEXT_SYNTAX"], [220, 140, 10, "enum_LAST_LEXICAL_USE"], [219, 220, 9, "enum_NEXT_SYNTAX"], [220, 221, 9, "enum_NEXT_SYNTAX"], [221, 222, 9, "enum_NEXT_SYNTAX"], [222, 223, 9, "enum_NEXT_SYNTAX"], [224, 144, 10, "enum_LAST_LEXICAL_USE"], [223, 224, 9, "enum_NEXT_SYNTAX"], [224, 225, 9, "enum_NEXT_SYNTAX"], [225, 226, 9, "enum_NEXT_SYNTAX"], [227, 205, 10, "enum_LAST_LEXICAL_USE"], [226, 227, 9, "enum_NEXT_SYNTAX"], [227, 228, 9, "enum_NEXT_SYNTAX"], [228, 229, 9, "enum_NEXT_SYNTAX"], [229, 230, 9, "enum_NEXT_SYNTAX"], [231, 209, 10, "enum_LAST_LEXICAL_USE"], [230, 231, 9, "enum_NEXT_SYNTAX"], [231, 232, 9, "enum_NEXT_SYNTAX"], [232, 234, 9, "enum_NEXT_SYNTAX"], [234, 235, 9, "enum_NEXT_SYNTAX"], [235, 236, 9, "enum_NEXT_SYNTAX"], [237, 191, 10, "enum_LAST_LEXICAL_USE"], [236, 237, 9, "enum_NEXT_SYNTAX"], [237, 238, 9, "enum_NEXT_SYNTAX"], [238, 239, 9, "enum_NEXT_SYNTAX"], [239, 240, 9, "enum_NEXT_SYNTAX"], [241, 212, 10, "enum_LAST_LEXICAL_USE"], [240, 241, 9, "enum_NEXT_SYNTAX"], [241, 242, 9, "enum_NEXT_SYNTAX"], [242, 243, 9, "enum_NEXT_SYNTAX"], [243, 244, 9, "enum_NEXT_SYNTAX"], [244, 247, 9, "enum_NEXT_SYNTAX"], [247, 248, 9, "enum_NEXT_SYNTAX"], [248, 249, 9, "enum_NEXT_SYNTAX"], [249, 250, 9, "enum_NEXT_SYNTAX"], [250, 251, 9, "enum_NEXT_SYNTAX"], [251, 252, 9, "enum_NEXT_SYNTAX"], [252, 253, 9, "enum_NEXT_SYNTAX"], [254, 214, 10, "enum_LAST_LEXICAL_USE"], [253, 254, 9, "enum_NEXT_SYNTAX"], [254, 255, 9, "enum_NEXT_SYNTAX"], [255, 256, 9, "enum_NEXT_SYNTAX"], [256, 257, 9, "enum_NEXT_SYNTAX"], [258, 224, 10, "enum_LAST_LEXICAL_USE"], [257, 258, 9, "enum_NEXT_SYNTAX"], [258, 259, 9, "enum_NEXT_SYNTAX"], [259, 260, 9, "enum_NEXT_SYNTAX"], [260, 261, 9, "enum_NEXT_SYNTAX"], [262, 231, 10, "enum_LAST_LEXICAL_USE"], [261, 262, 9, "enum_NEXT_SYNTAX"], [262, 263, 9, "enum_NEXT_SYNTAX"], [263, 264, 9, "enum_NEXT_SYNTAX"], [265, 260, 10, "enum_LAST_LEXICAL_USE"], [264, 265, 9, "enum_NEXT_SYNTAX"], [265, 266, 9, "enum_NEXT_SYNTAX"], [267, 237, 10, "enum_LAST_LEXICAL_USE"], [266, 267, 9, "enum_NEXT_SYNTAX"], [267, 268, 9, "enum_NEXT_SYNTAX"], [268, 269, 9, "enum_NEXT_SYNTAX"], [269, 270, 9, "enum_NEXT_SYNTAX"], [270, 273, 9, "enum_NEXT_SYNTAX"], [273, 274, 9, "enum_NEXT_SYNTAX"], [275, 241, 10, "enum_LAST_LEXICAL_USE"], [274, 275, 9, "enum_NEXT_SYNTAX"], [275, 276, 9, "enum_NEXT_SYNTAX"], [277, 262, 10, "enum_LAST_LEXICAL_USE"], [276, 277, 9, "enum_NEXT_SYNTAX"], [277, 278, 9, "enum_NEXT_SYNTAX"], [278, 279, 9, "enum_NEXT_SYNTAX"], [279, 282, 9, "enum_NEXT_SYNTAX"], [283, 248, 10, "enum_LAST_LEXICAL_USE"], [282, 283, 9, "enum_NEXT_SYNTAX"], [283, 284, 9, "enum_NEXT_SYNTAX"], [284, 285, 9, "enum_NEXT_SYNTAX"], [285, 286, 9, "enum_NEXT_SYNTAX"], [286, 287, 9, "enum_NEXT_SYNTAX"], [287, 288, 9, "enum_NEXT_SYNTAX"], [289, 254, 10, "enum_LAST_LEXICAL_USE"], [288, 289, 9, "enum_NEXT_SYNTAX"], [289, 290, 9, "enum_NEXT_SYNTAX"], [290, 291, 9, "enum_NEXT_SYNTAX"], [291, 292, 9, "enum_NEXT_SYNTAX"], [293, 258, 10, "enum_LAST_LEXICAL_USE"], [292, 293, 9, "enum_NEXT_SYNTAX"], [293, 294, 9, "enum_NEXT_SYNTAX"], [295, 265, 10, "enum_LAST_LEXICAL_USE"], [294, 295, 9, "enum_NEXT_SYNTAX"], [295, 296, 9, "enum_NEXT_SYNTAX"], [297, 277, 10, "enum_LAST_LEXICAL_USE"], [296, 297, 9, "enum_NEXT_SYNTAX"], [297, 298, 9, "enum_NEXT_SYNTAX"], [298, 299, 9, "enum_NEXT_SYNTAX"], [299, 300, 9, "enum_NEXT_SYNTAX"], [300, 302, 9, "enum_NEXT_SYNTAX"], [303, 297, 10, "enum_LAST_LEXICAL_USE"], [302, 303, 9, "enum_NEXT_SYNTAX"], [303, 304, 9, "enum_NEXT_SYNTAX"], [305, 275, 10, "enum_LAST_LEXICAL_USE"], [304, 305, 9, "enum_NEXT_SYNTAX"], [305, 307, 9, "enum_NEXT_SYNTAX"], [308, 10, 10, "enum_LAST_LEXICAL_USE"], [307, 308, 9, "enum_NEXT_SYNTAX"], [308, 309, 9, "enum_NEXT_SYNTAX"], [309, 310, 9, "enum_NEXT_SYNTAX"], [310, 311, 9, "enum_NEXT_SYNTAX"], [312, 303, 10, "enum_LAST_LEXICAL_USE"], [311, 312, 9, "enum_NEXT_SYNTAX"], [312, 313, 9, "enum_NEXT_SYNTAX"], [313, 316, 9, "enum_NEXT_SYNTAX"], [317, 308, 10, "enum_LAST_LEXICAL_USE"], [316, 317, 9, "enum_NEXT_SYNTAX"], [3, 9, 1, "enum_CFG_NEXT"], [9, 18, 1, "enum_CFG_NEXT"], [18, 16, 1, "enum_CFG_NEXT"], [16, 316, 1, "enum_CFG_NEXT"], [16, 21, 1, "enum_CFG_NEXT"], [21, 27, 1, "enum_CFG_NEXT"], [27, 40, 1, "enum_CFG_NEXT"], [40, 100, 1, "enum_CFG_NEXT"], [40, 52, 1, "enum_CFG_NEXT"], [52, 58, 1, "enum_CFG_NEXT"], [58, 63, 1, "enum_CFG_NEXT"], [58, 82, 1, "enum_CFG_NEXT"], [82, 100, 1, "enum_CFG_NEXT"], [100, 109, 1, "enum_CFG_NEXT"], [109, 107, 1, "enum_CFG_NEXT"], [107, 112, 1, "enum_CFG_NEXT"], [107, 188, 1, "enum_CFG_NEXT"], [112, 127, 1, "enum_CFG_NEXT"], [127, 107, 1, "enum_CFG_NEXT"], [127, 150, 1, "enum_CFG_NEXT"], [150, 156, 1, "enum_CFG_NEXT"], [156, 160, 1, "enum_CFG_NEXT"], [156, 184, 1, "enum_CFG_NEXT"], [160, 107, 1, "enum_CFG_NEXT"], [188, 200, 1, "enum_CFG_NEXT"], [200, 307, 1, "enum_CFG_NEXT"], [200, 204, 1, "enum_CFG_NEXT"], [204, 211, 1, "enum_CFG_NEXT"], [211, 226, 1, "enum_CFG_NEXT"], [226, 236, 1, "enum_CFG_NEXT"], [236, 276, 1, "enum_CFG_NEXT"], [236, 247, 1, "enum_CFG_NEXT"], [276, 302, 1, "enum_CFG_NEXT"], [276, 282, 1, "enum_CFG_NEXT"], [302, 307, 1, "enum_CFG_NEXT"], [307, 16, 1, "enum_CFG_NEXT"], [18, 5, 3, "enum_LAST_WRITE"], [16, 237, 2, "enum_LAST_READ"], [16, 191, 2, "enum_LAST_READ"], [16, 16, 3, "enum_LAST_WRITE"], [24, 237, 2, "enum_LAST_READ"], [24, 191, 2, "enum_LAST_READ"], [24, 16, 3, "enum_LAST_WRITE"], [22, 214, 2, "enum_LAST_READ"], [22, 91, 2, "enum_LAST_READ"], [22, 34, 2, "enum_LAST_READ"], [22, 132, 2, "enum_LAST_READ"], [22, 22, 3, "enum_LAST_WRITE"], [30, 227, 2, "enum_LAST_READ"], [30, 199, 2, "enum_LAST_READ"], [30, 2, 3, "enum_LAST_WRITE"], [34, 214, 2, "enum_LAST_READ"], [34, 91, 2, "enum_LAST_READ"], [34, 34, 2, "enum_LAST_READ"], [34, 132, 2, "enum_LAST_READ"], [34, 22, 3, "enum_LAST_WRITE"], [28, 220, 2, "enum_LAST_READ"], [28, 47, 2, "enum_LAST_READ"], [28, 95, 2, "enum_LAST_READ"], [28, 140, 2, "enum_LAST_READ"], [28, 28, 3, "enum_LAST_WRITE"], [43, 30, 2, "enum_LAST_READ"], [43, 2, 3, "enum_LAST_WRITE"], [47, 220, 2, "enum_LAST_READ"], [47, 47, 2, "enum_LAST_READ"], [47, 95, 2, "enum_LAST_READ"], [47, 140, 2, "enum_LAST_READ"], [47, 28, 3, "enum_LAST_WRITE"], [41, 109, 2, "enum_LAST_READ"], [41, 41, 3, "enum_LAST_WRITE"], [52, 52, 2, "enum_LAST_READ"], [57, 43, 2, "enum_LAST_READ"], [57, 2, 3, "enum_LAST_WRITE"], [70, 34, 2, "enum_LAST_READ"], [70, 22, 3, "enum_LAST_WRITE"], [74, 47, 2, "enum_LAST_READ"], [74, 28, 3, "enum_LAST_WRITE"], [83, 83, 2, "enum_LAST_READ"], [83, 161, 2, "enum_LAST_READ"], [91, 34, 2, "enum_LAST_READ"], [91, 22, 3, "enum_LAST_WRITE"], [95, 47, 2, "enum_LAST_READ"], [95, 28, 3, "enum_LAST_WRITE"], [101, 195, 2, "enum_LAST_READ"], [101, 101, 3, "enum_LAST_WRITE"], [109, 109, 2, "enum_LAST_READ"], [109, 41, 3, "enum_LAST_WRITE"], [107, 224, 2, "enum_LAST_READ"], [107, 144, 2, "enum_LAST_READ"], [107, 107, 3, "enum_LAST_WRITE"], [115, 155, 2, "enum_LAST_READ"], [115, 43, 2, "enum_LAST_READ"], [115, 115, 2, "enum_LAST_READ"], [115, 57, 2, "enum_LAST_READ"], [115, 2, 3, "enum_LAST_WRITE"], [119, 119, 2, "enum_LAST_READ"], [119, 171, 2, "enum_LAST_READ"], [119, 24, 2, "enum_LAST_READ"], [119, 16, 3, "enum_LAST_WRITE"], [121, 224, 2, "enum_LAST_READ"], [121, 144, 2, "enum_LAST_READ"], [121, 107, 3, "enum_LAST_WRITE"], [113, 169, 2, "enum_LAST_READ"], [113, 136, 2, "enum_LAST_READ"], [113, 113, 3, "enum_LAST_WRITE"], [128, 195, 2, "enum_LAST_READ"], [128, 128, 2, "enum_LAST_READ"], [128, 101, 3, "enum_LAST_WRITE"], [132, 91, 2, "enum_LAST_READ"], [132, 34, 2, "enum_LAST_READ"], [132, 132, 2, "enum_LAST_READ"], [132, 22, 3, "enum_LAST_WRITE"], [136, 169, 2, "enum_LAST_READ"], [136, 136, 2, "enum_LAST_READ"], [136, 113, 3, "enum_LAST_WRITE"], [140, 47, 2, "enum_LAST_READ"], [140, 95, 2, "enum_LAST_READ"], [140, 140, 2, "enum_LAST_READ"], [140, 28, 3, "enum_LAST_WRITE"], [144, 121, 2, "enum_LAST_READ"], [144, 107, 3, "enum_LAST_WRITE"], [150, 150, 2, "enum_LAST_READ"], [155, 115, 2, "enum_LAST_READ"], [155, 2, 3, "enum_LAST_WRITE"], [161, 83, 2, "enum_LAST_READ"], [161, 161, 2, "enum_LAST_READ"], [169, 136, 2, "enum_LAST_READ"], [169, 113, 3, "enum_LAST_WRITE"], [171, 119, 2, "enum_LAST_READ"], [171, 16, 3, "enum_LAST_WRITE"], [191, 119, 2, "enum_LAST_READ"], [191, 171, 2, "enum_LAST_READ"], [191, 24, 2, "enum_LAST_READ"], [191, 16, 3, "enum_LAST_WRITE"], [195, 195, 2, "enum_LAST_READ"], [195, 128, 2, "enum_LAST_READ"], [195, 101, 3, "enum_LAST_WRITE"], [189, 312, 2, "enum_LAST_READ"], [189, 189, 3, "enum_LAST_WRITE"], [189, 303, 3, "enum_LAST_WRITE"], [199, 155, 2, "enum_LAST_READ"], [199, 43, 2, "enum_LAST_READ"], [199, 115, 2, "enum_LAST_READ"], [199, 57, 2, "enum_LAST_READ"], [199, 2, 3, "enum_LAST_WRITE"], [205, 199, 2, "enum_LAST_READ"], [205, 2, 3, "enum_LAST_WRITE"], [209, 312, 2, "enum_LAST_READ"], [209, 189, 3, "enum_LAST_WRITE"], [214, 91, 2, "enum_LAST_READ"], [214, 34, 2, "enum_LAST_READ"], [214, 132, 2, "enum_LAST_READ"], [214, 22, 3, "enum_LAST_WRITE"], [220, 47, 2, "enum_LAST_READ"], [220, 95, 2, "enum_LAST_READ"], [220, 140, 2, "enum_LAST_READ"], [220, 28, 3, "enum_LAST_WRITE"], [224, 224, 2, "enum_LAST_READ"], [224, 144, 2, "enum_LAST_READ"], [224, 107, 3, "enum_LAST_WRITE"], [212, 305, 2, "enum_LAST_READ"], [212, 212, 3, "enum_LAST_WRITE"], [227, 205, 2, "enum_LAST_READ"], [227, 2, 3, "enum_LAST_WRITE"], [231, 209, 2, "enum_LAST_READ"], [231, 189, 3, "enum_LAST_WRITE"], [237, 191, 2, "enum_LAST_READ"], [237, 16, 3, "enum_LAST_WRITE"], [241, 305, 2, "enum_LAST_READ"], [241, 212, 3, "enum_LAST_WRITE"], [254, 214, 2, "enum_LAST_READ"], [254, 22, 3, "enum_LAST_WRITE"], [258, 224, 2, "enum_LAST_READ"], [258, 107, 3, "enum_LAST_WRITE"], [262, 231, 2, "enum_LAST_READ"], [262, 189, 3, "enum_LAST_WRITE"], [265, 260, 2, "enum_LAST_READ"], [267, 237, 2, "enum_LAST_READ"], [267, 16, 3, "enum_LAST_WRITE"], [275, 241, 2, "enum_LAST_READ"], [275, 212, 3, "enum_LAST_WRITE"], [277, 231, 2, "enum_LAST_READ"], [277, 189, 3, "enum_LAST_WRITE"], [289, 214, 2, "enum_LAST_READ"], [289, 22, 3, "enum_LAST_WRITE"], [293, 224, 2, "enum_LAST_READ"], [293, 107, 3, "enum_LAST_WRITE"], [297, 277, 2, "enum_LAST_READ"], [297, 189, 3, "enum_LAST_WRITE"], [305, 275, 2, "enum_LAST_READ"], [305, 212, 3, "enum_LAST_WRITE"], [303, 277, 2, "enum_LAST_READ"], [303, 189, 3, "enum_LAST_WRITE"], [308, 308, 2, "enum_LAST_READ"], [308, 10, 3, "enum_LAST_WRITE"], [312, 277, 2, "enum_LAST_READ"], [312, 312, 2, "enum_LAST_READ"], [312, 303, 3, "enum_LAST_WRITE"], [312, 189, 3, "enum_LAST_WRITE"], [317, 308, 2, "enum_LAST_READ"], [317, 10, 3, "enum_LAST_WRITE"], [22, 24, 4, "enum_COMPUTED_FROM"], [28, 34, 4, "enum_COMPUTED_FROM"], [28, 30, 4, "enum_COMPUTED_FROM"], [189, 195, 4, "enum_COMPUTED_FROM"], [189, 191, 4, "enum_COMPUTED_FROM"], [41, 47, 4, "enum_COMPUTED_FROM"], [41, 43, 4, "enum_COMPUTED_FROM"], [113, 119, 4, "enum_COMPUTED_FROM"], [113, 121, 4, "enum_COMPUTED_FROM"], [113, 115, 4, "enum_COMPUTED_FROM"], [212, 214, 4, "enum_COMPUTED_FROM"], [212, 220, 4, "enum_COMPUTED_FROM"], [212, 224, 4, "enum_COMPUTED_FROM"], [303, 305, 4, "enum_COMPUTED_FROM"]], "error_location": 119, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/monashbiomedicalimaging/arcana.git", "old_path": "arcana/environment/modules.py", "hash": "21199db4a62a164140eef9c7a45966056c069541", "code": "def satisfy(self, *requirements: RequirementRange) -> List[Any]:\n    versions: List[Any] = []\n    for req_range in requirements:\n        req: Requirement = req_range.requirement\n        local_name: str = self.map_req(req)\n        try:\n            version_names: List[str] = self._available[local_name]\n        except KeyError:\n            if self._fail_on_missing:\n                raise ArcanaRequirementNotFoundError(\n                    \"Could not find module for {} ({})\".format(req.name,\n                                                            local_name))\n            else:\n                logger.warning(\"Did not find module for {} ({})\"\n                            .format(req.name, local_name))\n        avail_versions: List[Any] = []\n        for local_ver_name in version_names:\n            ver_name: str = self.map_version(req_range, local_ver_name)\n            try:\n                avail_versions.append(\n                    req.v(ver_name, local_name=local_name,\n                        local_version=local_ver_name))\n            except ArcanaVersionNotDetectableError:\n                if self._ignore_unrecog:\n                    logger.warning(\n                        \"Ignoring unrecognised available version '{}' of \"\n                        \"{}\".format(ver_name, req_range.name))\n                    continue\n                else:\n                    raise\n        version: Any = req_range.latest_within(avail_versions)\n        # To get the exact version (i.e. not just what the\n        # modules administrator has called it) we load the module\n        # detect the version and unload it again\n        if self._detect_exact_versions:\n            self.load(version)\n            exact_version: str = req.detect_version(\n                local_name=local_name, local_version=local_ver_name)\n            self.unload(version)\n            if not req_range.within(exact_version):\n                raise ArcanaVersionError(\n                    \"Version of {} specified by module {} does not match \"\n                    \"expected {} and is outside the acceptable range [{}]\"\n                    .format(req.name, local_ver_name, str(version),\n                            str(req_range)))\n            if exact_version < version:\n                raise ArcanaVersionError(\n                    \"Version of {} specified by module {} is less than \"\n                    \"the expected {}\"\n                    .format(req.name, local_ver_name, str(version)))\n            version = exact_version\n        # Get latest requirement from list of possible options\n        versions.append(version)\n    return versions\n", "rewrite": "ReplaceText(target='req' @(119,44)->(119,53))", "error_line": 17, "has_bug": true, "code_full": "import logging\nfrom typing import Any, Dict, List\n\nlogger = logging.getLogger('arcana')\n\nclass ArcanaRequirementNotFoundError(Exception):\n    pass\n\nclass ArcanaVersionError(Exception):\n    pass\n\nclass ArcanaVersionNotDetectableError(Exception):\n    pass\n\n\nclass Requirement:\n    name: str\n\n    def v(self, version: str, local_name: str, local_version: str) -> Any:\n        pass\n\n    def detect_version(self, local_name: str, local_version: str) -> str:\n        return \"\"\n    \n\nclass RequirementRange:\n    name: str\n    requirement: Requirement\n\n    def latest_within(self, versions: List[Any]) -> Any:\n        pass\n\n    def within(self, version: str) -> bool:\n        return False\n    \n\nclass ModulesEnvironment:\n    _available: Dict\n    _fail_on_missing: bool\n    _ignore_unrecog: bool\n    _detect_exact_versions: bool\n\n    def map_req(self, req: Requirement) -> str:\n        return \"\"\n    \n    def map_version(self, req_range: Requirement, local_version: str) -> str:\n        return \"\"\n    \n    def load(self, version: Any):\n        pass\n\n    def unload(self, version: Any):\n        pass\n\n    def satisfy(self, *requirements: RequirementRange) -> List[Any]:\n        versions: List[Any] = []\n        for req_range in requirements:\n            req: Requirement = req_range.requirement\n            local_name: str = self.map_req(req)\n            try:\n                version_names: List[str] = self._available[local_name]\n            except KeyError:\n                if self._fail_on_missing:\n                    raise ArcanaRequirementNotFoundError(\n                        \"Could not find module for {} ({})\".format(req.name,\n                                                                local_name))\n                else:\n                    logger.warning(\"Did not find module for {} ({})\"\n                                .format(req.name, local_name))\n            avail_versions: List[Any] = []\n            for local_ver_name in version_names:\n                ver_name: str = self.map_version(req_range, local_ver_name)\n                try:\n                    avail_versions.append(\n                        req.v(ver_name, local_name=local_name,\n                            local_version=local_ver_name))\n                except ArcanaVersionNotDetectableError:\n                    if self._ignore_unrecog:\n                        logger.warning(\n                            \"Ignoring unrecognised available version '{}' of \"\n                            \"{}\".format(ver_name, req_range.name))\n                        continue\n                    else:\n                        raise\n            version: Any = req_range.latest_within(avail_versions)\n            # To get the exact version (i.e. not just what the\n            # modules administrator has called it) we load the module\n            # detect the version and unload it again\n            if self._detect_exact_versions:\n                self.load(version)\n                exact_version: str = req.detect_version(\n                    local_name=local_name, local_version=local_ver_name)\n                self.unload(version)\n                if not req_range.within(exact_version):\n                    raise ArcanaVersionError(\n                        \"Version of {} specified by module {} does not match \"\n                        \"expected {} and is outside the acceptable range [{}]\"\n                        .format(req.name, local_ver_name, str(version),\n                                str(req_range)))\n                if exact_version < version:\n                    raise ArcanaVersionError(\n                        \"Version of {} specified by module {} is less than \"\n                        \"the expected {}\"\n                        .format(req.name, local_ver_name, str(version)))\n                version = exact_version\n            # Get latest requirement from list of possible options\n            versions.append(version)\n        return versions\n", "error_location_char": [836, 845], "type_checked_pytype": false, "type_error_label": "wrong-arg-types", "type_checked_mypy": false}
{"source_tokens": ["#NEWLINE#", "def apply_shape(", "cls", ",", "model_or_dict", ",", "field_converter", ",", "model_converter", ",", "gottago", ",", "allow_none", "=", "False", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    '", "#NEWLINE#", "model_dict", "=", "{", "}", "#NEWLINE#", "for", "truple", "in", "_reduce_loop", "(", "cls", ",", "model_or_dict", ",", "field_converter", ")", ":", "#NEWLINE#", "#INDENT#", "(", "field_name", ",", "field_instance", ",", "field_value", ")", "=", "truple", "#NEWLINE#", "serialized_name", "=", "field_name", "#NEWLINE#", "if", "field_instance", ".", "minimized_field_name", ":", "#NEWLINE#", "#INDENT#", "serialized_name", "=", "field_instance", ".", "minimized_field_name", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "field_instance", ".", "print_name", ":", "#NEWLINE#", "#INDENT#", "serialized_name", "=", "field_instance", ".", "print_name", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "if", "gottago", "(", "field_name", ",", "field_value", ")", ":", "#NEWLINE#", "#INDENT#", "continue", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "isinstance", "(", "field_value", ",", "Model", ")", ":", "#NEWLINE#", "#INDENT#", "model_dict", "[", "serialized_name", "]", "=", "model_converter", "(", "field_value", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "isinstance", "(", "field_name", ",", "list", ")", "and", "(", "len", "(", "field_value", ")", ">", "0", ")", ")", ":", "#NEWLINE#", "#INDENT#", "if", "isinstance", "(", "field_value", "[", "0", "]", ",", "Model", ")", ":", "#NEWLINE#", "#INDENT#", "model_dict", "[", "serialized_name", "]", "=", "[", "model_converter", "(", "vi", ")", "for", "vi", "in", "field_value", "]", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "(", "field_value", "is", "None", ")", "and", "allow_none", ")", ":", "#NEWLINE#", "#INDENT#", "model_dict", "[", "serialized_name", "]", "=", "None", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "model_dict", "[", "serialized_name", "]", "=", "field_converter", "(", "field_instance", ",", "field_value", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "return", "model_dict"], "edges": [[1, 7, 7, "enum_FIELD"], [18, 19, 7, "enum_FIELD"], [20, 23, 7, "enum_FIELD"], [28, 27, 7, "enum_FIELD"], [28, 32, 7, "enum_FIELD"], [227, 228, 7, "enum_FIELD"], [32, 29, 7, "enum_FIELD"], [39, 48, 7, "enum_FIELD"], [49, 52, 7, "enum_FIELD"], [58, 56, 7, "enum_FIELD"], [94, 91, 7, "enum_FIELD"], [56, 55, 7, "enum_FIELD"], [60, 64, 7, "enum_FIELD"], [72, 74, 7, "enum_FIELD"], [91, 88, 7, "enum_FIELD"], [111, 108, 7, "enum_FIELD"], [64, 63, 7, "enum_FIELD"], [74, 73, 7, "enum_FIELD"], [78, 82, 7, "enum_FIELD"], [108, 105, 7, "enum_FIELD"], [113, 120, 7, "enum_FIELD"], [147, 137, 7, "enum_FIELD"], [82, 81, 7, "enum_FIELD"], [115, 114, 7, "enum_FIELD"], [115, 116, 7, "enum_FIELD"], [120, 119, 7, "enum_FIELD"], [150, 157, 7, "enum_FIELD"], [195, 192, 7, "enum_FIELD"], [134, 131, 7, "enum_FIELD"], [143, 140, 7, "enum_FIELD"], [157, 151, 7, "enum_FIELD"], [162, 168, 7, "enum_FIELD"], [197, 203, 7, "enum_FIELD"], [209, 218, 7, "enum_FIELD"], [140, 139, 7, "enum_FIELD"], [154, 153, 7, "enum_FIELD"], [154, 155, 7, "enum_FIELD"], [164, 163, 7, "enum_FIELD"], [164, 165, 7, "enum_FIELD"], [168, 170, 7, "enum_FIELD"], [189, 188, 7, "enum_FIELD"], [199, 198, 7, "enum_FIELD"], [199, 200, 7, "enum_FIELD"], [211, 210, 7, "enum_FIELD"], [211, 212, 7, "enum_FIELD"], [218, 215, 7, "enum_FIELD"], [170, 169, 7, "enum_FIELD"], [173, 174, 7, "enum_FIELD"], [173, 176, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [31, 2, 10, "enum_LAST_LEXICAL_USE"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [33, 4, 10, "enum_LAST_LEXICAL_USE"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [35, 6, 10, "enum_LAST_LEXICAL_USE"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [48, 27, 10, "enum_LAST_LEXICAL_USE"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [52, 41, 10, "enum_LAST_LEXICAL_USE"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 54, 9, "enum_NEXT_SYNTAX"], [55, 43, 10, "enum_LAST_LEXICAL_USE"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 60, 9, "enum_NEXT_SYNTAX"], [61, 50, 10, "enum_LAST_LEXICAL_USE"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [63, 55, 10, "enum_LAST_LEXICAL_USE"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 72, 9, "enum_NEXT_SYNTAX"], [73, 63, 10, "enum_LAST_LEXICAL_USE"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 78, 9, "enum_NEXT_SYNTAX"], [79, 61, 10, "enum_LAST_LEXICAL_USE"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [81, 73, 10, "enum_LAST_LEXICAL_USE"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 87, 9, "enum_NEXT_SYNTAX"], [88, 10, 10, "enum_LAST_LEXICAL_USE"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [90, 52, 10, "enum_LAST_LEXICAL_USE"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [92, 45, 10, "enum_LAST_LEXICAL_USE"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 97, 9, "enum_NEXT_SYNTAX"], [97, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [107, 92, 10, "enum_LAST_LEXICAL_USE"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 113, 9, "enum_NEXT_SYNTAX"], [114, 21, 10, "enum_LAST_LEXICAL_USE"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [116, 79, 10, "enum_LAST_LEXICAL_USE"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [119, 8, 10, "enum_LAST_LEXICAL_USE"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [121, 107, 10, "enum_LAST_LEXICAL_USE"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [131, 105, 10, "enum_LAST_LEXICAL_USE"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [133, 90, 10, "enum_LAST_LEXICAL_USE"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [141, 121, 10, "enum_LAST_LEXICAL_USE"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 150, 9, "enum_NEXT_SYNTAX"], [151, 131, 10, "enum_LAST_LEXICAL_USE"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [153, 141, 10, "enum_LAST_LEXICAL_USE"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [158, 109, 10, "enum_LAST_LEXICAL_USE"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 162, 9, "enum_NEXT_SYNTAX"], [163, 114, 10, "enum_LAST_LEXICAL_USE"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [165, 116, 10, "enum_LAST_LEXICAL_USE"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [169, 119, 10, "enum_LAST_LEXICAL_USE"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [174, 171, 10, "enum_LAST_LEXICAL_USE"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [176, 153, 10, "enum_LAST_LEXICAL_USE"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [188, 176, 10, "enum_LAST_LEXICAL_USE"], [187, 188, 9, "enum_NEXT_SYNTAX"], [188, 189, 9, "enum_NEXT_SYNTAX"], [189, 190, 9, "enum_NEXT_SYNTAX"], [190, 191, 9, "enum_NEXT_SYNTAX"], [191, 192, 9, "enum_NEXT_SYNTAX"], [193, 12, 10, "enum_LAST_LEXICAL_USE"], [192, 193, 9, "enum_NEXT_SYNTAX"], [193, 194, 9, "enum_NEXT_SYNTAX"], [194, 195, 9, "enum_NEXT_SYNTAX"], [195, 197, 9, "enum_NEXT_SYNTAX"], [198, 163, 10, "enum_LAST_LEXICAL_USE"], [197, 198, 9, "enum_NEXT_SYNTAX"], [198, 199, 9, "enum_NEXT_SYNTAX"], [200, 165, 10, "enum_LAST_LEXICAL_USE"], [199, 200, 9, "enum_NEXT_SYNTAX"], [200, 201, 9, "enum_NEXT_SYNTAX"], [201, 202, 9, "enum_NEXT_SYNTAX"], [202, 203, 9, "enum_NEXT_SYNTAX"], [203, 206, 9, "enum_NEXT_SYNTAX"], [206, 207, 9, "enum_NEXT_SYNTAX"], [207, 209, 9, "enum_NEXT_SYNTAX"], [210, 198, 10, "enum_LAST_LEXICAL_USE"], [209, 210, 9, "enum_NEXT_SYNTAX"], [210, 211, 9, "enum_NEXT_SYNTAX"], [212, 200, 10, "enum_LAST_LEXICAL_USE"], [211, 212, 9, "enum_NEXT_SYNTAX"], [212, 213, 9, "enum_NEXT_SYNTAX"], [213, 214, 9, "enum_NEXT_SYNTAX"], [215, 35, 10, "enum_LAST_LEXICAL_USE"], [214, 215, 9, "enum_NEXT_SYNTAX"], [215, 216, 9, "enum_NEXT_SYNTAX"], [217, 81, 10, "enum_LAST_LEXICAL_USE"], [216, 217, 9, "enum_NEXT_SYNTAX"], [217, 218, 9, "enum_NEXT_SYNTAX"], [219, 188, 10, "enum_LAST_LEXICAL_USE"], [218, 219, 9, "enum_NEXT_SYNTAX"], [219, 220, 9, "enum_NEXT_SYNTAX"], [220, 227, 9, "enum_NEXT_SYNTAX"], [228, 210, 10, "enum_LAST_LEXICAL_USE"], [227, 228, 9, "enum_NEXT_SYNTAX"], [14, 1, 1, "enum_CFG_NEXT"], [7, 18, 1, "enum_CFG_NEXT"], [18, 20, 1, "enum_CFG_NEXT"], [20, 32, 1, "enum_CFG_NEXT"], [32, 27, 1, "enum_CFG_NEXT"], [27, 227, 1, "enum_CFG_NEXT"], [27, 39, 1, "enum_CFG_NEXT"], [39, 49, 1, "enum_CFG_NEXT"], [49, 56, 1, "enum_CFG_NEXT"], [56, 60, 1, "enum_CFG_NEXT"], [56, 74, 1, "enum_CFG_NEXT"], [60, 91, 1, "enum_CFG_NEXT"], [74, 78, 1, "enum_CFG_NEXT"], [74, 91, 1, "enum_CFG_NEXT"], [78, 91, 1, "enum_CFG_NEXT"], [91, 108, 1, "enum_CFG_NEXT"], [91, 27, 1, "enum_CFG_NEXT"], [108, 137, 1, "enum_CFG_NEXT"], [108, 113, 1, "enum_CFG_NEXT"], [113, 27, 1, "enum_CFG_NEXT"], [137, 192, 1, "enum_CFG_NEXT"], [137, 157, 1, "enum_CFG_NEXT"], [157, 162, 1, "enum_CFG_NEXT"], [157, 27, 1, "enum_CFG_NEXT"], [162, 27, 1, "enum_CFG_NEXT"], [192, 209, 1, "enum_CFG_NEXT"], [192, 197, 1, "enum_CFG_NEXT"], [197, 27, 1, "enum_CFG_NEXT"], [209, 27, 1, "enum_CFG_NEXT"], [31, 2, 3, "enum_LAST_WRITE"], [33, 4, 3, "enum_LAST_WRITE"], [35, 6, 3, "enum_LAST_WRITE"], [27, 48, 2, "enum_LAST_READ"], [27, 27, 3, "enum_LAST_WRITE"], [48, 48, 2, "enum_LAST_READ"], [48, 27, 3, "enum_LAST_WRITE"], [41, 133, 2, "enum_LAST_READ"], [41, 90, 2, "enum_LAST_READ"], [41, 41, 3, "enum_LAST_WRITE"], [43, 217, 2, "enum_LAST_READ"], [43, 73, 2, "enum_LAST_READ"], [43, 81, 2, "enum_LAST_READ"], [43, 63, 2, "enum_LAST_READ"], [43, 43, 3, "enum_LAST_WRITE"], [45, 153, 2, "enum_LAST_READ"], [45, 92, 2, "enum_LAST_READ"], [45, 121, 2, "enum_LAST_READ"], [45, 176, 2, "enum_LAST_READ"], [45, 188, 2, "enum_LAST_READ"], [45, 219, 2, "enum_LAST_READ"], [45, 45, 3, "enum_LAST_WRITE"], [52, 133, 2, "enum_LAST_READ"], [52, 90, 2, "enum_LAST_READ"], [52, 41, 3, "enum_LAST_WRITE"], [50, 212, 2, "enum_LAST_READ"], [50, 165, 2, "enum_LAST_READ"], [50, 116, 2, "enum_LAST_READ"], [50, 200, 2, "enum_LAST_READ"], [50, 61, 3, "enum_LAST_WRITE"], [50, 79, 3, "enum_LAST_WRITE"], [50, 50, 3, "enum_LAST_WRITE"], [55, 217, 2, "enum_LAST_READ"], [55, 73, 2, "enum_LAST_READ"], [55, 81, 2, "enum_LAST_READ"], [55, 63, 2, "enum_LAST_READ"], [55, 43, 3, "enum_LAST_WRITE"], [63, 55, 2, "enum_LAST_READ"], [63, 43, 3, "enum_LAST_WRITE"], [61, 212, 2, "enum_LAST_READ"], [61, 165, 2, "enum_LAST_READ"], [61, 116, 2, "enum_LAST_READ"], [61, 200, 2, "enum_LAST_READ"], [61, 50, 3, "enum_LAST_WRITE"], [73, 55, 2, "enum_LAST_READ"], [73, 43, 3, "enum_LAST_WRITE"], [81, 73, 2, "enum_LAST_READ"], [81, 43, 3, "enum_LAST_WRITE"], [79, 212, 2, "enum_LAST_READ"], [79, 165, 2, "enum_LAST_READ"], [79, 116, 2, "enum_LAST_READ"], [79, 200, 2, "enum_LAST_READ"], [79, 50, 3, "enum_LAST_WRITE"], [88, 88, 2, "enum_LAST_READ"], [88, 10, 3, "enum_LAST_WRITE"], [90, 52, 2, "enum_LAST_READ"], [90, 41, 3, "enum_LAST_WRITE"], [92, 121, 2, "enum_LAST_READ"], [92, 188, 2, "enum_LAST_READ"], [92, 219, 2, "enum_LAST_READ"], [92, 153, 2, "enum_LAST_READ"], [92, 92, 2, "enum_LAST_READ"], [92, 176, 2, "enum_LAST_READ"], [92, 45, 3, "enum_LAST_WRITE"], [105, 151, 2, "enum_LAST_READ"], [105, 131, 2, "enum_LAST_READ"], [105, 105, 2, "enum_LAST_READ"], [107, 92, 2, "enum_LAST_READ"], [107, 45, 3, "enum_LAST_WRITE"], [109, 158, 2, "enum_LAST_READ"], [109, 109, 2, "enum_LAST_READ"], [119, 119, 2, "enum_LAST_READ"], [119, 169, 2, "enum_LAST_READ"], [119, 8, 3, "enum_LAST_WRITE"], [121, 107, 2, "enum_LAST_READ"], [121, 45, 3, "enum_LAST_WRITE"], [114, 114, 2, "enum_LAST_READ"], [114, 163, 2, "enum_LAST_READ"], [114, 210, 2, "enum_LAST_READ"], [114, 198, 2, "enum_LAST_READ"], [114, 21, 3, "enum_LAST_WRITE"], [116, 212, 2, "enum_LAST_READ"], [116, 165, 2, "enum_LAST_READ"], [116, 116, 2, "enum_LAST_READ"], [116, 200, 2, "enum_LAST_READ"], [116, 61, 3, "enum_LAST_WRITE"], [116, 79, 3, "enum_LAST_WRITE"], [116, 50, 3, "enum_LAST_WRITE"], [131, 105, 2, "enum_LAST_READ"], [133, 90, 2, "enum_LAST_READ"], [133, 41, 3, "enum_LAST_WRITE"], [135, 135, 2, "enum_LAST_READ"], [139, 139, 2, "enum_LAST_READ"], [141, 107, 2, "enum_LAST_READ"], [141, 45, 3, "enum_LAST_WRITE"], [151, 131, 2, "enum_LAST_READ"], [153, 141, 2, "enum_LAST_READ"], [153, 45, 3, "enum_LAST_WRITE"], [158, 109, 2, "enum_LAST_READ"], [169, 119, 2, "enum_LAST_READ"], [169, 169, 2, "enum_LAST_READ"], [169, 8, 3, "enum_LAST_WRITE"], [171, 171, 2, "enum_LAST_READ"], [171, 174, 3, "enum_LAST_WRITE"], [174, 171, 2, "enum_LAST_READ"], [174, 174, 3, "enum_LAST_WRITE"], [176, 153, 2, "enum_LAST_READ"], [176, 45, 3, "enum_LAST_WRITE"], [163, 114, 2, "enum_LAST_READ"], [163, 163, 2, "enum_LAST_READ"], [163, 210, 2, "enum_LAST_READ"], [163, 198, 2, "enum_LAST_READ"], [163, 21, 3, "enum_LAST_WRITE"], [165, 212, 2, "enum_LAST_READ"], [165, 165, 2, "enum_LAST_READ"], [165, 116, 2, "enum_LAST_READ"], [165, 200, 2, "enum_LAST_READ"], [165, 61, 3, "enum_LAST_WRITE"], [165, 79, 3, "enum_LAST_WRITE"], [165, 50, 3, "enum_LAST_WRITE"], [188, 141, 2, "enum_LAST_READ"], [188, 45, 3, "enum_LAST_WRITE"], [193, 193, 2, "enum_LAST_READ"], [193, 12, 3, "enum_LAST_WRITE"], [198, 114, 2, "enum_LAST_READ"], [198, 163, 2, "enum_LAST_READ"], [198, 210, 2, "enum_LAST_READ"], [198, 198, 2, "enum_LAST_READ"], [198, 21, 3, "enum_LAST_WRITE"], [200, 212, 2, "enum_LAST_READ"], [200, 165, 2, "enum_LAST_READ"], [200, 116, 2, "enum_LAST_READ"], [200, 200, 2, "enum_LAST_READ"], [200, 61, 3, "enum_LAST_WRITE"], [200, 79, 3, "enum_LAST_WRITE"], [200, 50, 3, "enum_LAST_WRITE"], [215, 215, 2, "enum_LAST_READ"], [215, 35, 2, "enum_LAST_READ"], [215, 6, 3, "enum_LAST_WRITE"], [217, 73, 2, "enum_LAST_READ"], [217, 81, 2, "enum_LAST_READ"], [217, 63, 2, "enum_LAST_READ"], [217, 43, 3, "enum_LAST_WRITE"], [219, 188, 2, "enum_LAST_READ"], [219, 45, 3, "enum_LAST_WRITE"], [210, 114, 2, "enum_LAST_READ"], [210, 163, 2, "enum_LAST_READ"], [210, 210, 2, "enum_LAST_READ"], [210, 198, 2, "enum_LAST_READ"], [210, 21, 3, "enum_LAST_WRITE"], [212, 212, 2, "enum_LAST_READ"], [212, 165, 2, "enum_LAST_READ"], [212, 116, 2, "enum_LAST_READ"], [212, 200, 2, "enum_LAST_READ"], [212, 61, 3, "enum_LAST_WRITE"], [212, 79, 3, "enum_LAST_WRITE"], [212, 50, 3, "enum_LAST_WRITE"], [228, 114, 2, "enum_LAST_READ"], [228, 163, 2, "enum_LAST_READ"], [228, 210, 2, "enum_LAST_READ"], [228, 198, 2, "enum_LAST_READ"], [228, 21, 3, "enum_LAST_WRITE"], [42, 48, 4, "enum_COMPUTED_FROM"], [50, 52, 4, "enum_COMPUTED_FROM"], [61, 63, 4, "enum_COMPUTED_FROM"], [79, 81, 4, "enum_COMPUTED_FROM"], [115, 119, 4, "enum_COMPUTED_FROM"], [115, 121, 4, "enum_COMPUTED_FROM"], [164, 169, 4, "enum_COMPUTED_FROM"], [164, 171, 4, "enum_COMPUTED_FROM"], [164, 174, 4, "enum_COMPUTED_FROM"], [164, 176, 4, "enum_COMPUTED_FROM"], [211, 215, 4, "enum_COMPUTED_FROM"], [211, 217, 4, "enum_COMPUTED_FROM"], [211, 219, 4, "enum_COMPUTED_FROM"]], "error_location": 133, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/pombredanne/schematics.git", "old_path": "schematics/serialize.py", "hash": "8fad1ee655244b3e6cf24a4b4236d414075498ca", "code": "def apply_shape(cls: Any, model_or_dict: Union[Model, Dict[str, Any]], field_converter: Callable[[Field, Any], Any], model_converter: Callable[[Model], Any],\n                gottago: Callable[[str, Any], bool], allow_none: bool=False) -> Dict[str, Any]:\n    \"\"\"\n    \"\"\"\n    model_dict: Dict[str, Any] = {}\n\n    ### Loop over each field and either evict it or convert it\n    for truple in _reduce_loop(cls, model_or_dict, field_converter):\n        ### Break 3-tuple out\n        (field_name, field_instance, field_value) = truple\n\n        ### Use minimized field name if one exists\n        serialized_name: str = field_name\n        if field_instance.minimized_field_name:\n            serialized_name = field_instance.minimized_field_name\n        ### Use print name if one exists\n        elif field_instance.print_name:\n            serialized_name = field_instance.print_name\n\n        ### Evict field if it's gotta go\n        if gottago(field_name, field_value):\n            continue\n\n        ### Convert field as single model\n        elif isinstance(field_value, Model):\n            model_dict[serialized_name] = model_converter(field_value)\n            \n        ### Convert field as list of models\n        elif isinstance(field_name, list) and len(field_value) > 0:\n            if isinstance(field_value[0], Model):\n                model_dict[serialized_name] = [model_converter(vi)\n                                               for vi in field_value]\n                \n        ### Convert field as single field\n        else:\n            if field_value is None and allow_none:\n                model_dict[serialized_name] = None\n            else:\n                model_dict[serialized_name] = field_converter(field_instance,\n                                                              field_value)\n\n    return model_dict\n", "rewrite": "ReplaceText(target='field_value' @(50,24)->(50,34))", "error_line": 28, "has_bug": true, "code_full": "from typing import Any, Callable, Dict, List, Tuple, Union\n\n\nclass Field:\n    minimized_field_name: str\n    print_name: str\n\n\nclass Model:\n    pass\n\n\ndef _reduce_loop(cls: Any, model_or_dict: Union[Model, Dict[str, Any]], field_converter: Callable[[Field, Any], Any]) -> List[Tuple[str, Field, Any]]:\n    return []\n\n\ndef apply_shape(cls: Any, model_or_dict: Union[Model, Dict[str, Any]], field_converter: Callable[[Field, Any], Any], model_converter: Callable[[Model], Any],\n                gottago: Callable[[str, Any], bool], allow_none: bool=False) -> Dict[str, Any]:\n    \"\"\"\n    \"\"\"\n    model_dict: Dict[str, Any] = {}\n\n    ### Loop over each field and either evict it or convert it\n    for truple in _reduce_loop(cls, model_or_dict, field_converter):\n        ### Break 3-tuple out\n        (field_name, field_instance, field_value) = truple\n\n        ### Use minimized field name if one exists\n        serialized_name: str = field_name\n        if field_instance.minimized_field_name:\n            serialized_name = field_instance.minimized_field_name\n        ### Use print name if one exists\n        elif field_instance.print_name:\n            serialized_name = field_instance.print_name\n\n        ### Evict field if it's gotta go\n        if gottago(field_name, field_value):\n            continue\n\n        ### Convert field as single model\n        elif isinstance(field_value, Model):\n            model_dict[serialized_name] = model_converter(field_value)\n            \n        ### Convert field as list of models\n        elif isinstance(field_name, list) and len(field_value) > 0:\n            if isinstance(field_value[0], Model):\n                model_dict[serialized_name] = [model_converter(vi)\n                                               for vi in field_value]\n                \n        ### Convert field as single field\n        else:\n            if field_value is None and allow_none:\n                model_dict[serialized_name] = None\n            else:\n                model_dict[serialized_name] = field_converter(field_instance,\n                                                              field_value)\n\n    return model_dict\n", "error_location_char": [1221, 1231], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def from_data(", "cls", ",", "data", ")", ":", "#NEWLINE#", "#INDENT#", "if", "isinstance", "(", "data", ",", "dict", ")", ":", "#NEWLINE#", "#INDENT#", "return", "cls", "(", "data", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "isinstance", "(", "data", ",", "list", ")", ":", "#NEWLINE#", "#INDENT#", "topics", "=", "list", "(", ")", "#NEWLINE#", "for", "topic", "in", "data", ":", "#NEWLINE#", "#INDENT#", "topics", ".", "append", "(", "cls", "(", "topic", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "topic"], "edges": [[1, 3, 7, "enum_FIELD"], [16, 13, 7, "enum_FIELD"], [13, 10, 7, "enum_FIELD"], [19, 21, 7, "enum_FIELD"], [30, 34, 7, "enum_FIELD"], [21, 20, 7, "enum_FIELD"], [34, 31, 7, "enum_FIELD"], [39, 43, 7, "enum_FIELD"], [48, 47, 7, "enum_FIELD"], [48, 49, 7, "enum_FIELD"], [64, 65, 7, "enum_FIELD"], [43, 42, 7, "enum_FIELD"], [52, 56, 7, "enum_FIELD"], [56, 54, 7, "enum_FIELD"], [54, 53, 7, "enum_FIELD"], [58, 57, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [12, 4, 10, "enum_LAST_LEXICAL_USE"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 19, 9, "enum_NEXT_SYNTAX"], [20, 2, 10, "enum_LAST_LEXICAL_USE"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [22, 12, 10, "enum_LAST_LEXICAL_USE"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 30, 9, "enum_NEXT_SYNTAX"], [31, 10, 10, "enum_LAST_LEXICAL_USE"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [33, 22, 10, "enum_LAST_LEXICAL_USE"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [42, 35, 10, "enum_LAST_LEXICAL_USE"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [49, 33, 10, "enum_LAST_LEXICAL_USE"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 52, 9, "enum_NEXT_SYNTAX"], [53, 40, 10, "enum_LAST_LEXICAL_USE"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [57, 20, 10, "enum_LAST_LEXICAL_USE"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [59, 47, 10, "enum_LAST_LEXICAL_USE"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 64, 9, "enum_NEXT_SYNTAX"], [65, 59, 10, "enum_LAST_LEXICAL_USE"], [64, 65, 9, "enum_NEXT_SYNTAX"], [3, 13, 1, "enum_CFG_NEXT"], [13, 19, 1, "enum_CFG_NEXT"], [13, 34, 1, "enum_CFG_NEXT"], [34, 39, 1, "enum_CFG_NEXT"], [39, 49, 1, "enum_CFG_NEXT"], [49, 47, 1, "enum_CFG_NEXT"], [47, 52, 1, "enum_CFG_NEXT"], [47, 64, 1, "enum_CFG_NEXT"], [52, 47, 1, "enum_CFG_NEXT"], [12, 4, 3, "enum_LAST_WRITE"], [20, 2, 3, "enum_LAST_WRITE"], [22, 12, 2, "enum_LAST_READ"], [22, 4, 3, "enum_LAST_WRITE"], [31, 10, 2, "enum_LAST_READ"], [33, 12, 2, "enum_LAST_READ"], [33, 4, 3, "enum_LAST_WRITE"], [42, 35, 2, "enum_LAST_READ"], [49, 33, 2, "enum_LAST_READ"], [49, 4, 3, "enum_LAST_WRITE"], [47, 59, 2, "enum_LAST_READ"], [47, 47, 3, "enum_LAST_WRITE"], [53, 53, 2, "enum_LAST_READ"], [53, 40, 3, "enum_LAST_WRITE"], [57, 57, 2, "enum_LAST_READ"], [57, 2, 3, "enum_LAST_WRITE"], [59, 59, 2, "enum_LAST_READ"], [59, 47, 3, "enum_LAST_WRITE"], [65, 59, 2, "enum_LAST_READ"], [65, 47, 3, "enum_LAST_WRITE"], [40, 42, 4, "enum_COMPUTED_FROM"]], "error_location": 65, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/ShineyDev/github.py.git", "old_path": "github/objects/topic.py", "hash": "2dfbdd085dada2ec7bf898180514644b617e08b5", "code": "def from_data(cls, data: Union[Dict, List[Dict]]) -> Union['Topic', List['Topic']]:\n    if isinstance(data, dict):\n        return cls(data)\n    elif isinstance(data, list):\n        topics: List[Topic] = list()\n\n        for (topic) in data:\n            topics.append(cls(topic))\n\n        return topic\n", "rewrite": "ReplaceText(target='topics' @(50,19)->(50,24))", "error_line": 9, "has_bug": true, "code_full": "from typing import Dict, List, Union\n\n\nclass Topic:\n    def __init__(self, data: Dict):\n        pass\n\n    @classmethod\n    def from_data(cls, data: Union[Dict, List[Dict]]) -> Union['Topic', List['Topic']]:\n        if isinstance(data, dict):\n            return cls(data)\n        elif isinstance(data, list):\n            topics: List[Topic] = list()\n\n            for (topic) in data:\n                topics.append(cls(topic))\n\n            return topic\n", "error_location_char": [294, 299], "type_checked_pytype": false, "type_error_label": "bad-return-type", "type_checked_mypy": false}
{"source_tokens": ["#NEWLINE#", "def is_set_of(", "predicate", ")", ":", "#NEWLINE#", "#INDENT#", "predicate", "=", "is_iterable_of", "(", "predicate", ")", "#NEWLINE#", "def is_valid(", "data", ",", "explain", "=", "False", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "not", "explain", ")", ":", "#NEWLINE#", "#INDENT#", "return", "predicate", "(", "data", ")", "#NEWLINE#", "#UNINDENT#", "elems", "=", "list", "(", "data", ")", "#NEWLINE#", "(", "valid", ",", "explanation", ")", "=", "predicate", "(", "elems", ",", "explain", "=", "True", ")", "#NEWLINE#", "return", "(", "(", "True", ",", "explanation", ")", "if", "valid", "else", "(", "False", ",", "{", "elems", "[", "i", "]", ":", "value", "for", "(", "i", ",", "value", ")", "in", "explanation", ".", "items", "(", ")", "}", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "is_if", "(", "is_set", ",", "predicate", ",", "else_valid", "=", "False", ")"], "edges": [[6, 10, 7, "enum_FIELD"], [20, 16, 7, "enum_FIELD"], [98, 102, 7, "enum_FIELD"], [10, 9, 7, "enum_FIELD"], [24, 26, 7, "enum_FIELD"], [38, 42, 7, "enum_FIELD"], [45, 55, 7, "enum_FIELD"], [61, 68, 7, "enum_FIELD"], [102, 99, 7, "enum_FIELD"], [26, 27, 7, "enum_FIELD"], [32, 34, 7, "enum_FIELD"], [42, 41, 7, "enum_FIELD"], [55, 52, 7, "enum_FIELD"], [68, 69, 7, "enum_FIELD"], [68, 65, 7, "enum_FIELD"], [68, 73, 7, "enum_FIELD"], [105, 107, 7, "enum_FIELD"], [34, 33, 7, "enum_FIELD"], [56, 58, 7, "enum_FIELD"], [79, 76, 7, "enum_FIELD"], [79, 80, 7, "enum_FIELD"], [76, 75, 7, "enum_FIELD"], [76, 77, 7, "enum_FIELD"], [81, 84, 7, "enum_FIELD"], [81, 91, 7, "enum_FIELD"], [91, 89, 7, "enum_FIELD"], [89, 88, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [7, 2, 10, "enum_LAST_LEXICAL_USE"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [11, 7, 10, "enum_LAST_LEXICAL_USE"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [27, 17, 10, "enum_LAST_LEXICAL_USE"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 32, 9, "enum_NEXT_SYNTAX"], [33, 11, 10, "enum_LAST_LEXICAL_USE"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [35, 15, 10, "enum_LAST_LEXICAL_USE"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [43, 35, 10, "enum_LAST_LEXICAL_USE"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [52, 33, 10, "enum_LAST_LEXICAL_USE"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [54, 39, 10, "enum_LAST_LEXICAL_USE"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [66, 49, 10, "enum_LAST_LEXICAL_USE"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [69, 47, 10, "enum_LAST_LEXICAL_USE"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [75, 54, 10, "enum_LAST_LEXICAL_USE"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [83, 77, 10, "enum_LAST_LEXICAL_USE"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [85, 80, 10, "enum_LAST_LEXICAL_USE"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [88, 66, 10, "enum_LAST_LEXICAL_USE"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [103, 52, 10, "enum_LAST_LEXICAL_USE"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [6, 19, 1, "enum_CFG_NEXT"], [19, 20, 1, "enum_CFG_NEXT"], [20, 98, 1, "enum_CFG_NEXT"], [16, 26, 1, "enum_CFG_NEXT"], [26, 32, 1, "enum_CFG_NEXT"], [26, 38, 1, "enum_CFG_NEXT"], [38, 45, 1, "enum_CFG_NEXT"], [45, 61, 1, "enum_CFG_NEXT"], [11, 2, 3, "enum_LAST_WRITE"], [7, 11, 2, "enum_LAST_READ"], [7, 2, 3, "enum_LAST_WRITE"], [27, 17, 3, "enum_LAST_WRITE"], [35, 15, 3, "enum_LAST_WRITE"], [43, 15, 3, "enum_LAST_WRITE"], [54, 39, 3, "enum_LAST_WRITE"], [69, 47, 3, "enum_LAST_WRITE"], [66, 49, 3, "enum_LAST_WRITE"], [75, 54, 2, "enum_LAST_READ"], [75, 39, 3, "enum_LAST_WRITE"], [83, 77, 2, "enum_LAST_READ"], [85, 80, 2, "enum_LAST_READ"], [88, 66, 2, "enum_LAST_READ"], [88, 49, 3, "enum_LAST_WRITE"], [103, 11, 2, "enum_LAST_READ"], [103, 7, 3, "enum_LAST_WRITE"], [7, 9, 4, "enum_COMPUTED_FROM"], [7, 11, 4, "enum_COMPUTED_FROM"], [39, 41, 4, "enum_COMPUTED_FROM"], [39, 43, 4, "enum_COMPUTED_FROM"], [48, 52, 4, "enum_COMPUTED_FROM"], [48, 54, 4, "enum_COMPUTED_FROM"]], "error_location": 103, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/daanvdk/is_valid.git", "old_path": "is_valid/structure_predicates.py", "hash": "0c78bad8195b8c4b702b368e9d13d1ccaf573382", "code": "def is_set_of(predicate: Callable[[Any], Tuple[bool, Any]]) -> Callable[[Any], Tuple[bool, Any]]:\n    predicate = is_iterable_of(predicate)\n\n    def is_valid(data: Any, explain=False) -> Tuple[bool, Any]:\n        if not explain:\n            return predicate(data)\n        elems = list(data)\n        valid, explanation = predicate(elems, explain=True)\n        return (True, explanation) if valid else (False, {\n            elems[i]: value for i, value in explanation.items()\n        })\n    return is_if(is_set, predicate, else_valid=False)\n", "rewrite": "ReplaceText(target='is_valid' @(161,25)->(161,34))", "error_line": 11, "has_bug": true, "code_full": "from typing import Any, Callable, Tuple, Union\n\n\ndef is_iterable_of(predicate: Callable[[Any], Tuple[bool, Any]]) -> Callable[[Any], Tuple[bool, Any]]:\n    return lambda data: (True, None)\n\ndef is_set(data: Any) -> bool:\n    return True\n\ndef is_if(predicate: Callable[[Any], bool], then: Callable[[Any], Tuple[bool, Any]], else_valid: bool = True) -> Callable[[Any], Tuple[bool, Any]]:\n    return lambda data: (True, None)\n\ndef is_set_of(predicate: Callable[[Any], Tuple[bool, Any]]) -> Callable[[Any], Tuple[bool, Any]]:\n    predicate = is_iterable_of(predicate)\n\n    def is_valid(data: Any, explain=False) -> Tuple[bool, Any]:\n        if not explain:\n            return predicate(data)\n        elems = list(data)\n        valid, explanation = predicate(elems, explain=True)\n        return (True, explanation) if valid else (False, {\n            elems[i]: value for i, value in explanation.items()\n        })\n    return is_if(is_set, predicate, else_valid=False)\n", "error_location_char": [510, 519], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def classify(", "logits", ",", "true_label", "=", "None", ",", "*", ",", "num_classes", ",", "num_labels", "=", "None", ",", "key", "=", "None", ",", "predictions", "=", "{", "}", ",", "regularization_scale", "=", "1e-08", ")", ":", "#NEWLINE#", "#INDENT#", "assert", "isinstance", "(", "predictions", ",", "dict", ")", "#NEWLINE#", "if", "(", "num_labels", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "assert", "(", "true_label", "is not", "None", ")", "#NEWLINE#", "num_labels", "=", "_calc_num_labels", "(", "true_label", ")", "#NEWLINE#", "#UNINDENT#", "assert", "(", "static_rank", "(", "logits", ")", "in", "{", "1", ",", "2", "}", ")", "#NEWLINE#", "if", "(", "true_label", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "assert", "(", "static_rank", "(", "true_label", ")", "in", "{", "1", ",", "2", "}", ")", "#NEWLINE#", "assert", "(", "num_labels", "==", "_calc_num_labels", "(", "true_label", ")", ")", "#NEWLINE#", "#UNINDENT#", "assert", "(", "num_classes", ">=", "2", ")", "#NEWLINE#", "assert", "(", "num_labels", ">=", "1", ")", "#NEWLINE#", "(", "predicted_labels", ",", "loss", ")", "=", "(", "_classify_label", "if", "(", "num_labels", "==", "1", ")", "else", "functools", ".", "partial", "(", "_classify_labels", ",", "num_labels", "=", "num_labels", ")", ")", "(", "logits", ",", "true_label", ",", "num_classes", "=", "num_classes", ")", "#NEWLINE#", "predictions", "[", "'label'", "]", "=", "predicted_labels", "#NEWLINE#", "if", "(", "key", "is not", "None", ")", ":", "#NEWLINE#", "#INDENT#", "predictions", "[", "'key'", "]", "=", "key", "#NEWLINE#", "#UNINDENT#", "if", "(", "true_label", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "return", "predictions", "#NEWLINE#", "#UNINDENT#", "return", "(", "predictions", ",", "(", "loss", "+", "l2_regularization_loss", "(", "regularization_scale", ")", ")", ",", "train", ".", "minimize", "(", "loss", ")", ",", "_evaluate", "(", "predictions", ",", "true_label", ")", ")"], "edges": [[1, 13, 7, "enum_FIELD"], [32, 36, 7, "enum_FIELD"], [40, 43, 7, "enum_FIELD"], [64, 70, 7, "enum_FIELD"], [78, 81, 7, "enum_FIELD"], [112, 115, 7, "enum_FIELD"], [119, 122, 7, "enum_FIELD"], [125, 154, 7, "enum_FIELD"], [161, 167, 7, "enum_FIELD"], [169, 172, 7, "enum_FIELD"], [186, 189, 7, "enum_FIELD"], [199, 211, 7, "enum_FIELD"], [36, 33, 7, "enum_FIELD"], [43, 42, 7, "enum_FIELD"], [49, 52, 7, "enum_FIELD"], [55, 59, 7, "enum_FIELD"], [70, 67, 7, "enum_FIELD"], [81, 80, 7, "enum_FIELD"], [87, 93, 7, "enum_FIELD"], [101, 104, 7, "enum_FIELD"], [115, 114, 7, "enum_FIELD"], [122, 121, 7, "enum_FIELD"], [154, 134, 7, "enum_FIELD"], [163, 162, 7, "enum_FIELD"], [163, 164, 7, "enum_FIELD"], [172, 171, 7, "enum_FIELD"], [177, 183, 7, "enum_FIELD"], [189, 188, 7, "enum_FIELD"], [195, 196, 7, "enum_FIELD"], [52, 51, 7, "enum_FIELD"], [59, 58, 7, "enum_FIELD"], [67, 66, 7, "enum_FIELD"], [93, 90, 7, "enum_FIELD"], [104, 103, 7, "enum_FIELD"], [134, 137, 7, "enum_FIELD"], [134, 133, 7, "enum_FIELD"], [134, 146, 7, "enum_FIELD"], [157, 159, 7, "enum_FIELD"], [179, 178, 7, "enum_FIELD"], [179, 180, 7, "enum_FIELD"], [205, 204, 7, "enum_FIELD"], [205, 207, 7, "enum_FIELD"], [215, 213, 7, "enum_FIELD"], [222, 219, 7, "enum_FIELD"], [90, 89, 7, "enum_FIELD"], [106, 105, 7, "enum_FIELD"], [137, 136, 7, "enum_FIELD"], [146, 142, 7, "enum_FIELD"], [207, 206, 7, "enum_FIELD"], [213, 212, 7, "enum_FIELD"], [142, 141, 7, "enum_FIELD"], [147, 149, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [35, 20, 10, "enum_LAST_LEXICAL_USE"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [42, 12, 10, "enum_LAST_LEXICAL_USE"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [51, 4, 10, "enum_LAST_LEXICAL_USE"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [56, 42, 10, "enum_LAST_LEXICAL_USE"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [60, 51, 10, "enum_LAST_LEXICAL_USE"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [68, 2, 10, "enum_LAST_LEXICAL_USE"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [80, 60, 10, "enum_LAST_LEXICAL_USE"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [89, 66, 10, "enum_LAST_LEXICAL_USE"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [91, 80, 10, "enum_LAST_LEXICAL_USE"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [103, 56, 10, "enum_LAST_LEXICAL_USE"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [105, 58, 10, "enum_LAST_LEXICAL_USE"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [107, 91, 10, "enum_LAST_LEXICAL_USE"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [114, 10, 10, "enum_LAST_LEXICAL_USE"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [121, 103, 10, "enum_LAST_LEXICAL_USE"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [136, 121, 10, "enum_LAST_LEXICAL_USE"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [149, 136, 10, "enum_LAST_LEXICAL_USE"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [153, 68, 10, "enum_LAST_LEXICAL_USE"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [155, 107, 10, "enum_LAST_LEXICAL_USE"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [159, 114, 10, "enum_LAST_LEXICAL_USE"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [162, 35, 10, "enum_LAST_LEXICAL_USE"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [167, 127, 10, "enum_LAST_LEXICAL_USE"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [171, 16, 10, "enum_LAST_LEXICAL_USE"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [175, 177, 9, "enum_NEXT_SYNTAX"], [178, 162, 10, "enum_LAST_LEXICAL_USE"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [183, 171, 10, "enum_LAST_LEXICAL_USE"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [188, 155, 10, "enum_LAST_LEXICAL_USE"], [187, 188, 9, "enum_NEXT_SYNTAX"], [188, 189, 9, "enum_NEXT_SYNTAX"], [189, 190, 9, "enum_NEXT_SYNTAX"], [190, 191, 9, "enum_NEXT_SYNTAX"], [191, 192, 9, "enum_NEXT_SYNTAX"], [192, 195, 9, "enum_NEXT_SYNTAX"], [196, 178, 10, "enum_LAST_LEXICAL_USE"], [195, 196, 9, "enum_NEXT_SYNTAX"], [196, 199, 9, "enum_NEXT_SYNTAX"], [199, 200, 9, "enum_NEXT_SYNTAX"], [201, 196, 10, "enum_LAST_LEXICAL_USE"], [200, 201, 9, "enum_NEXT_SYNTAX"], [201, 202, 9, "enum_NEXT_SYNTAX"], [202, 203, 9, "enum_NEXT_SYNTAX"], [204, 129, 10, "enum_LAST_LEXICAL_USE"], [203, 204, 9, "enum_NEXT_SYNTAX"], [204, 205, 9, "enum_NEXT_SYNTAX"], [205, 206, 9, "enum_NEXT_SYNTAX"], [206, 207, 9, "enum_NEXT_SYNTAX"], [208, 25, 10, "enum_LAST_LEXICAL_USE"], [207, 208, 9, "enum_NEXT_SYNTAX"], [208, 209, 9, "enum_NEXT_SYNTAX"], [209, 210, 9, "enum_NEXT_SYNTAX"], [210, 211, 9, "enum_NEXT_SYNTAX"], [211, 212, 9, "enum_NEXT_SYNTAX"], [212, 213, 9, "enum_NEXT_SYNTAX"], [213, 214, 9, "enum_NEXT_SYNTAX"], [214, 215, 9, "enum_NEXT_SYNTAX"], [216, 204, 10, "enum_LAST_LEXICAL_USE"], [215, 216, 9, "enum_NEXT_SYNTAX"], [216, 217, 9, "enum_NEXT_SYNTAX"], [217, 218, 9, "enum_NEXT_SYNTAX"], [218, 219, 9, "enum_NEXT_SYNTAX"], [219, 220, 9, "enum_NEXT_SYNTAX"], [221, 201, 10, "enum_LAST_LEXICAL_USE"], [220, 221, 9, "enum_NEXT_SYNTAX"], [221, 222, 9, "enum_NEXT_SYNTAX"], [223, 188, 10, "enum_LAST_LEXICAL_USE"], [222, 223, 9, "enum_NEXT_SYNTAX"], [223, 224, 9, "enum_NEXT_SYNTAX"], [224, 225, 9, "enum_NEXT_SYNTAX"], [6, 14, 1, "enum_CFG_NEXT"], [14, 18, 1, "enum_CFG_NEXT"], [18, 22, 1, "enum_CFG_NEXT"], [22, 27, 1, "enum_CFG_NEXT"], [27, 1, 1, "enum_CFG_NEXT"], [13, 32, 1, "enum_CFG_NEXT"], [32, 43, 1, "enum_CFG_NEXT"], [43, 64, 1, "enum_CFG_NEXT"], [43, 49, 1, "enum_CFG_NEXT"], [49, 55, 1, "enum_CFG_NEXT"], [55, 64, 1, "enum_CFG_NEXT"], [64, 81, 1, "enum_CFG_NEXT"], [81, 112, 1, "enum_CFG_NEXT"], [81, 87, 1, "enum_CFG_NEXT"], [87, 101, 1, "enum_CFG_NEXT"], [101, 112, 1, "enum_CFG_NEXT"], [112, 119, 1, "enum_CFG_NEXT"], [119, 125, 1, "enum_CFG_NEXT"], [125, 161, 1, "enum_CFG_NEXT"], [161, 172, 1, "enum_CFG_NEXT"], [172, 189, 1, "enum_CFG_NEXT"], [172, 177, 1, "enum_CFG_NEXT"], [177, 189, 1, "enum_CFG_NEXT"], [189, 199, 1, "enum_CFG_NEXT"], [189, 195, 1, "enum_CFG_NEXT"], [35, 20, 3, "enum_LAST_WRITE"], [42, 12, 3, "enum_LAST_WRITE"], [51, 4, 3, "enum_LAST_WRITE"], [60, 51, 2, "enum_LAST_READ"], [60, 4, 3, "enum_LAST_WRITE"], [56, 42, 2, "enum_LAST_READ"], [56, 12, 3, "enum_LAST_WRITE"], [68, 2, 3, "enum_LAST_WRITE"], [80, 60, 2, "enum_LAST_READ"], [80, 4, 3, "enum_LAST_WRITE"], [89, 66, 2, "enum_LAST_READ"], [91, 80, 2, "enum_LAST_READ"], [91, 4, 3, "enum_LAST_WRITE"], [103, 42, 2, "enum_LAST_READ"], [103, 12, 3, "enum_LAST_WRITE"], [103, 56, 3, "enum_LAST_WRITE"], [105, 58, 2, "enum_LAST_READ"], [107, 91, 2, "enum_LAST_READ"], [107, 4, 3, "enum_LAST_WRITE"], [114, 10, 3, "enum_LAST_WRITE"], [121, 103, 2, "enum_LAST_READ"], [121, 42, 2, "enum_LAST_READ"], [121, 12, 3, "enum_LAST_WRITE"], [121, 56, 3, "enum_LAST_WRITE"], [136, 121, 2, "enum_LAST_READ"], [136, 12, 3, "enum_LAST_WRITE"], [136, 56, 3, "enum_LAST_WRITE"], [149, 136, 2, "enum_LAST_READ"], [149, 12, 3, "enum_LAST_WRITE"], [149, 56, 3, "enum_LAST_WRITE"], [153, 68, 2, "enum_LAST_READ"], [153, 2, 3, "enum_LAST_WRITE"], [155, 80, 2, "enum_LAST_READ"], [155, 107, 2, "enum_LAST_READ"], [155, 4, 3, "enum_LAST_WRITE"], [159, 114, 2, "enum_LAST_READ"], [159, 10, 3, "enum_LAST_WRITE"], [167, 127, 3, "enum_LAST_WRITE"], [162, 35, 2, "enum_LAST_READ"], [162, 20, 3, "enum_LAST_WRITE"], [171, 16, 3, "enum_LAST_WRITE"], [183, 171, 2, "enum_LAST_READ"], [183, 16, 3, "enum_LAST_WRITE"], [178, 162, 2, "enum_LAST_READ"], [178, 20, 3, "enum_LAST_WRITE"], [188, 155, 2, "enum_LAST_READ"], [188, 4, 3, "enum_LAST_WRITE"], [196, 178, 2, "enum_LAST_READ"], [196, 162, 2, "enum_LAST_READ"], [196, 20, 3, "enum_LAST_WRITE"], [201, 178, 2, "enum_LAST_READ"], [201, 162, 2, "enum_LAST_READ"], [201, 20, 3, "enum_LAST_WRITE"], [204, 129, 3, "enum_LAST_WRITE"], [208, 25, 3, "enum_LAST_WRITE"], [216, 204, 2, "enum_LAST_READ"], [216, 129, 3, "enum_LAST_WRITE"], [221, 201, 2, "enum_LAST_READ"], [221, 20, 3, "enum_LAST_WRITE"], [223, 188, 2, "enum_LAST_READ"], [223, 4, 3, "enum_LAST_WRITE"], [128, 153, 4, "enum_COMPUTED_FROM"], [128, 155, 4, "enum_COMPUTED_FROM"], [128, 133, 4, "enum_COMPUTED_FROM"], [128, 159, 4, "enum_COMPUTED_FROM"], [128, 136, 4, "enum_COMPUTED_FROM"], [128, 145, 4, "enum_COMPUTED_FROM"], [128, 141, 4, "enum_COMPUTED_FROM"], [128, 149, 4, "enum_COMPUTED_FROM"], [163, 167, 4, "enum_COMPUTED_FROM"], [56, 58, 4, "enum_COMPUTED_FROM"], [56, 60, 4, "enum_COMPUTED_FROM"], [179, 183, 4, "enum_COMPUTED_FROM"]], "error_location": 221, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/raviqqe/tensorflow-extenteten.git", "old_path": "extenteten/classification.py", "hash": "f34e283077d1899902e276dff397defed16537f7", "code": "def classify(logits: Any,\n             true_label: Optional[Any] = None,\n             *,\n             num_classes: int,\n             num_labels: Optional[int] = None,\n             key: Optional[Any] = None,\n             predictions: Dict[str, Any] = {},\n             regularization_scale: float = 1e-8) -> Union[Dict[str, Any], Tuple[Dict[str, Any], float, Any, Any]]:\n    assert isinstance(predictions, dict)\n\n    if num_labels is None:\n        assert true_label is not None\n        num_labels = _calc_num_labels(true_label)\n\n    assert static_rank(logits) in {1, 2}\n    if true_label is not None:\n        assert static_rank(true_label) in {1, 2}\n        assert num_labels == _calc_num_labels(true_label)\n    assert num_classes >= 2\n    assert num_labels >= 1\n\n    predicted_labels: Any\n    loss: float\n    predicted_labels, loss = (\n        (_classify_label\n         if num_labels == 1 else\n         functools.partial(_classify_labels, num_labels=num_labels))\n        (logits, true_label, num_classes=num_classes))\n\n    predictions['label'] = predicted_labels\n    if key is not None:\n        predictions['key'] = key\n\n    if true_label is None:\n        return predictions\n\n    return (predictions,\n            loss + l2_regularization_loss(regularization_scale),\n            train.minimize(loss),\n            _evaluate(predictions, true_label))\n", "rewrite": "ReplaceText(target='predicted_labels' @(63,22)->(63,33))", "error_line": 37, "has_bug": true, "code_full": "import functools\nfrom typing import Any, Dict, Optional, Tuple, Union\n\n\ndef _calc_num_labels(true_label: Any) -> int:\n    return 0\n\n\ndef static_rank(tensor: Any) -> int:\n    return 0\n\n\ndef _classify_label(logits: Any, true_label: Optional[Any], num_classes: int) -> Tuple[Any, float]:\n    return None, 0.0\n\n\ndef _classify_labels(logits: Any, true_label: Optional[Any], num_classes: int, num_labels: int) -> Tuple[Any, float]:\n    return None, 0.0\n\n\ndef l2_regularization_loss(regularization_scale: float) -> float:\n    return 0.0\n\n\ndef train_minimize(loss: float):\n    pass\n\n\ndef _evaluate(predictions: Dict[str, Any], true_label: Any) -> Any:\n    pass\n\ntrain: Any = None\n\ndef classify(logits: Any,\n             true_label: Optional[Any] = None,\n             *,\n             num_classes: int,\n             num_labels: Optional[int] = None,\n             key: Optional[Any] = None,\n             predictions: Dict[str, Any] = {},\n             regularization_scale: float = 1e-8) -> Union[Dict[str, Any], Tuple[Dict[str, Any], float, Any, Any]]:\n    assert isinstance(predictions, dict)\n\n    if num_labels is None:\n        assert true_label is not None\n        num_labels = _calc_num_labels(true_label)\n\n    assert static_rank(logits) in {1, 2}\n    if true_label is not None:\n        assert static_rank(true_label) in {1, 2}\n        assert num_labels == _calc_num_labels(true_label)\n    assert num_classes >= 2\n    assert num_labels >= 1\n\n    predicted_labels: Any\n    loss: float\n    predicted_labels, loss = (\n        (_classify_label\n         if num_labels == 1 else\n         functools.partial(_classify_labels, num_labels=num_labels))\n        (logits, true_label, num_classes=num_classes))\n\n    predictions['label'] = predicted_labels\n    if key is not None:\n        predictions['key'] = key\n\n    if true_label is None:\n        return predictions\n\n    return (predictions,\n            loss + l2_regularization_loss(regularization_scale),\n            train.minimize(loss),\n            _evaluate(predictions, true_label))\n", "error_location_char": [1321, 1332], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def stepDynamics(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "' Perform steam governor control'", "#NEWLINE#", "Pref", "=", "(", "self", ".", "Gen", ".", "Pe", "*", "self", ".", "R", ")", "#NEWLINE#", "delta_w", "=", "(", "self", ".", "mirror", ".", "c_f", "-", "1.0", ")", "#NEWLINE#", "PrefVec", "=", "np", ".", "array", "(", "(", "[", "Pref", "]", "*", "2", ")", ")", "#NEWLINE#", "dwVec", "=", "np", ".", "array", "(", "(", "[", "delta_w", "]", "*", "2", ")", ")", "#NEWLINE#", "uVector", "=", "(", "(", "PrefVec", "-", "dwVec", ")", "/", "self", ".", "R", ")", "#NEWLINE#", "(", "_", ",", "y1", ",", "self", ".", "x1", ")", "=", "sig", ".", "lsim", "(", "self", ".", "sys1", ",", "U", "=", "uVector", ",", "T", "=", "self", ".", "t", ",", "X0", "=", "self", ".", "r_x1", "[", "(", "self", ".", "mirror", ".", "c_dp", "-", "1", ")", "]", ")", "#NEWLINE#", "ys", "=", "y1", "#NEWLINE#", "for", "x", "in", "range", "(", "ys", ".", "size", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "ys", "[", "x", "]", ">", "self", ".", "y1HighLimit", ")", ":", "#NEWLINE#", "#INDENT#", "ys", "[", "x", "]", "=", "self", ".", "y1HighLimit", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "ys", "[", "x", "]", "<", "self", ".", "y1LowLimit", ")", ":", "#NEWLINE#", "#INDENT#", "ys", "[", "x", "]", "=", "self", ".", "y1LowLimit", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "(", "_", ",", "y2", ",", "self", ".", "x2", ")", "=", "sig", ".", "lsim", "(", "self", ".", "sys2", ",", "ys", ",", "T", "=", "self", ".", "t", ",", "X0", "=", "self", ".", "Gen", ".", "r_Pm", "[", "(", "self", ".", "mirror", ".", "c_dp", "-", "1", ")", "]", ")", "#NEWLINE#", "(", "_", ",", "y3", ",", "self", ".", "x3", ")", "=", "sig", ".", "lsim", "(", "self", ".", "sys3", ",", "U", "=", "uVector", ",", "T", "=", "self", ".", "t", ",", "X0", "=", "[", "self", ".", "r_x1", "[", "(", "self", ".", "mirror", ".", "c_dp", "-", "1", ")", "]", ",", "self", ".", "Gen", ".", "r_Pm", "[", "(", "self", ".", "mirror", ".", "c_dp", "-", "1", ")", "]", "]", ")", "#NEWLINE#", "Pmech", "=", "(", "y3", "-", "(", "dwVec", "*", "self", ".", "Dt", ")", ")", "#NEWLINE#", "self", ".", "Gen", ".", "Pm", "=", "float", "(", "Pmech", "[", "1", "]", ")"], "edges": [[6, 7, 7, "enum_FIELD"], [8, 17, 7, "enum_FIELD"], [22, 31, 7, "enum_FIELD"], [34, 40, 7, "enum_FIELD"], [49, 55, 7, "enum_FIELD"], [64, 73, 7, "enum_FIELD"], [78, 100, 7, "enum_FIELD"], [124, 127, 7, "enum_FIELD"], [131, 130, 7, "enum_FIELD"], [131, 133, 7, "enum_FIELD"], [194, 214, 7, "enum_FIELD"], [240, 262, 7, "enum_FIELD"], [305, 310, 7, "enum_FIELD"], [319, 327, 7, "enum_FIELD"], [17, 15, 7, "enum_FIELD"], [17, 19, 7, "enum_FIELD"], [31, 29, 7, "enum_FIELD"], [31, 32, 7, "enum_FIELD"], [40, 38, 7, "enum_FIELD"], [55, 53, 7, "enum_FIELD"], [73, 70, 7, "enum_FIELD"], [73, 75, 7, "enum_FIELD"], [100, 90, 7, "enum_FIELD"], [133, 132, 7, "enum_FIELD"], [152, 147, 7, "enum_FIELD"], [214, 206, 7, "enum_FIELD"], [262, 252, 7, "enum_FIELD"], [310, 309, 7, "enum_FIELD"], [310, 313, 7, "enum_FIELD"], [323, 321, 7, "enum_FIELD"], [327, 326, 7, "enum_FIELD"], [15, 13, 7, "enum_FIELD"], [19, 18, 7, "enum_FIELD"], [29, 27, 7, "enum_FIELD"], [38, 37, 7, "enum_FIELD"], [45, 42, 7, "enum_FIELD"], [45, 46, 7, "enum_FIELD"], [53, 52, 7, "enum_FIELD"], [60, 57, 7, "enum_FIELD"], [60, 61, 7, "enum_FIELD"], [70, 69, 7, "enum_FIELD"], [70, 71, 7, "enum_FIELD"], [75, 74, 7, "enum_FIELD"], [85, 84, 7, "enum_FIELD"], [90, 89, 7, "enum_FIELD"], [94, 93, 7, "enum_FIELD"], [97, 99, 7, "enum_FIELD"], [101, 104, 7, "enum_FIELD"], [107, 112, 7, "enum_FIELD"], [135, 134, 7, "enum_FIELD"], [147, 144, 7, "enum_FIELD"], [154, 161, 7, "enum_FIELD"], [169, 175, 7, "enum_FIELD"], [201, 200, 7, "enum_FIELD"], [206, 205, 7, "enum_FIELD"], [210, 209, 7, "enum_FIELD"], [215, 218, 7, "enum_FIELD"], [221, 228, 7, "enum_FIELD"], [247, 246, 7, "enum_FIELD"], [252, 251, 7, "enum_FIELD"], [256, 255, 7, "enum_FIELD"], [259, 261, 7, "enum_FIELD"], [263, 266, 7, "enum_FIELD"], [269, 286, 7, "enum_FIELD"], [313, 312, 7, "enum_FIELD"], [313, 315, 7, "enum_FIELD"], [321, 320, 7, "enum_FIELD"], [329, 328, 7, "enum_FIELD"], [329, 330, 7, "enum_FIELD"], [13, 12, 7, "enum_FIELD"], [27, 26, 7, "enum_FIELD"], [104, 103, 7, "enum_FIELD"], [112, 110, 7, "enum_FIELD"], [112, 119, 7, "enum_FIELD"], [144, 143, 7, "enum_FIELD"], [144, 145, 7, "enum_FIELD"], [149, 148, 7, "enum_FIELD"], [156, 155, 7, "enum_FIELD"], [156, 157, 7, "enum_FIELD"], [161, 160, 7, "enum_FIELD"], [175, 172, 7, "enum_FIELD"], [182, 189, 7, "enum_FIELD"], [218, 217, 7, "enum_FIELD"], [228, 226, 7, "enum_FIELD"], [228, 235, 7, "enum_FIELD"], [266, 265, 7, "enum_FIELD"], [315, 314, 7, "enum_FIELD"], [110, 109, 7, "enum_FIELD"], [119, 117, 7, "enum_FIELD"], [119, 120, 7, "enum_FIELD"], [172, 171, 7, "enum_FIELD"], [172, 173, 7, "enum_FIELD"], [177, 176, 7, "enum_FIELD"], [184, 183, 7, "enum_FIELD"], [184, 185, 7, "enum_FIELD"], [189, 188, 7, "enum_FIELD"], [226, 224, 7, "enum_FIELD"], [235, 233, 7, "enum_FIELD"], [235, 236, 7, "enum_FIELD"], [275, 273, 7, "enum_FIELD"], [275, 282, 7, "enum_FIELD"], [292, 290, 7, "enum_FIELD"], [292, 299, 7, "enum_FIELD"], [117, 115, 7, "enum_FIELD"], [224, 223, 7, "enum_FIELD"], [233, 231, 7, "enum_FIELD"], [273, 272, 7, "enum_FIELD"], [282, 280, 7, "enum_FIELD"], [282, 283, 7, "enum_FIELD"], [290, 288, 7, "enum_FIELD"], [299, 297, 7, "enum_FIELD"], [299, 300, 7, "enum_FIELD"], [115, 114, 7, "enum_FIELD"], [231, 230, 7, "enum_FIELD"], [280, 278, 7, "enum_FIELD"], [288, 287, 7, "enum_FIELD"], [297, 295, 7, "enum_FIELD"], [278, 277, 7, "enum_FIELD"], [295, 294, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [12, 2, 10, "enum_LAST_LEXICAL_USE"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [18, 12, 10, "enum_LAST_LEXICAL_USE"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [26, 18, 10, "enum_LAST_LEXICAL_USE"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [43, 9, 10, "enum_LAST_LEXICAL_USE"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [52, 37, 10, "enum_LAST_LEXICAL_USE"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [58, 23, 10, "enum_LAST_LEXICAL_USE"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [69, 35, 10, "enum_LAST_LEXICAL_USE"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [71, 50, 10, "enum_LAST_LEXICAL_USE"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [74, 26, 10, "enum_LAST_LEXICAL_USE"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [84, 74, 10, "enum_LAST_LEXICAL_USE"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [93, 84, 10, "enum_LAST_LEXICAL_USE"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [99, 65, 10, "enum_LAST_LEXICAL_USE"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [103, 93, 10, "enum_LAST_LEXICAL_USE"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [109, 103, 10, "enum_LAST_LEXICAL_USE"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [114, 109, 10, "enum_LAST_LEXICAL_USE"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [127, 82, 10, "enum_LAST_LEXICAL_USE"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [134, 125, 10, "enum_LAST_LEXICAL_USE"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [143, 134, 10, "enum_LAST_LEXICAL_USE"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [145, 130, 10, "enum_LAST_LEXICAL_USE"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [148, 114, 10, "enum_LAST_LEXICAL_USE"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 154, 9, "enum_NEXT_SYNTAX"], [155, 143, 10, "enum_LAST_LEXICAL_USE"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [157, 145, 10, "enum_LAST_LEXICAL_USE"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [160, 148, 10, "enum_LAST_LEXICAL_USE"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [171, 155, 10, "enum_LAST_LEXICAL_USE"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [173, 157, 10, "enum_LAST_LEXICAL_USE"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [176, 160, 10, "enum_LAST_LEXICAL_USE"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 180, 9, "enum_NEXT_SYNTAX"], [180, 182, 9, "enum_NEXT_SYNTAX"], [183, 171, 10, "enum_LAST_LEXICAL_USE"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 184, 9, "enum_NEXT_SYNTAX"], [185, 173, 10, "enum_LAST_LEXICAL_USE"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [188, 176, 10, "enum_LAST_LEXICAL_USE"], [187, 188, 9, "enum_NEXT_SYNTAX"], [188, 189, 9, "enum_NEXT_SYNTAX"], [189, 190, 9, "enum_NEXT_SYNTAX"], [190, 194, 9, "enum_NEXT_SYNTAX"], [194, 195, 9, "enum_NEXT_SYNTAX"], [196, 80, 10, "enum_LAST_LEXICAL_USE"], [195, 196, 9, "enum_NEXT_SYNTAX"], [196, 197, 9, "enum_NEXT_SYNTAX"], [197, 198, 9, "enum_NEXT_SYNTAX"], [198, 199, 9, "enum_NEXT_SYNTAX"], [200, 188, 10, "enum_LAST_LEXICAL_USE"], [199, 200, 9, "enum_NEXT_SYNTAX"], [200, 201, 9, "enum_NEXT_SYNTAX"], [201, 202, 9, "enum_NEXT_SYNTAX"], [202, 203, 9, "enum_NEXT_SYNTAX"], [203, 204, 9, "enum_NEXT_SYNTAX"], [205, 89, 10, "enum_LAST_LEXICAL_USE"], [204, 205, 9, "enum_NEXT_SYNTAX"], [205, 206, 9, "enum_NEXT_SYNTAX"], [206, 207, 9, "enum_NEXT_SYNTAX"], [207, 208, 9, "enum_NEXT_SYNTAX"], [209, 200, 10, "enum_LAST_LEXICAL_USE"], [208, 209, 9, "enum_NEXT_SYNTAX"], [209, 210, 9, "enum_NEXT_SYNTAX"], [210, 211, 9, "enum_NEXT_SYNTAX"], [211, 212, 9, "enum_NEXT_SYNTAX"], [213, 183, 10, "enum_LAST_LEXICAL_USE"], [212, 213, 9, "enum_NEXT_SYNTAX"], [213, 214, 9, "enum_NEXT_SYNTAX"], [214, 215, 9, "enum_NEXT_SYNTAX"], [215, 216, 9, "enum_NEXT_SYNTAX"], [217, 209, 10, "enum_LAST_LEXICAL_USE"], [216, 217, 9, "enum_NEXT_SYNTAX"], [217, 218, 9, "enum_NEXT_SYNTAX"], [218, 219, 9, "enum_NEXT_SYNTAX"], [219, 220, 9, "enum_NEXT_SYNTAX"], [220, 221, 9, "enum_NEXT_SYNTAX"], [221, 222, 9, "enum_NEXT_SYNTAX"], [223, 217, 10, "enum_LAST_LEXICAL_USE"], [222, 223, 9, "enum_NEXT_SYNTAX"], [223, 224, 9, "enum_NEXT_SYNTAX"], [224, 225, 9, "enum_NEXT_SYNTAX"], [225, 226, 9, "enum_NEXT_SYNTAX"], [226, 227, 9, "enum_NEXT_SYNTAX"], [227, 228, 9, "enum_NEXT_SYNTAX"], [228, 229, 9, "enum_NEXT_SYNTAX"], [230, 223, 10, "enum_LAST_LEXICAL_USE"], [229, 230, 9, "enum_NEXT_SYNTAX"], [230, 231, 9, "enum_NEXT_SYNTAX"], [231, 232, 9, "enum_NEXT_SYNTAX"], [232, 233, 9, "enum_NEXT_SYNTAX"], [233, 234, 9, "enum_NEXT_SYNTAX"], [234, 235, 9, "enum_NEXT_SYNTAX"], [235, 236, 9, "enum_NEXT_SYNTAX"], [236, 237, 9, "enum_NEXT_SYNTAX"], [237, 238, 9, "enum_NEXT_SYNTAX"], [238, 239, 9, "enum_NEXT_SYNTAX"], [239, 240, 9, "enum_NEXT_SYNTAX"], [240, 241, 9, "enum_NEXT_SYNTAX"], [242, 196, 10, "enum_LAST_LEXICAL_USE"], [241, 242, 9, "enum_NEXT_SYNTAX"], [242, 243, 9, "enum_NEXT_SYNTAX"], [243, 244, 9, "enum_NEXT_SYNTAX"], [244, 245, 9, "enum_NEXT_SYNTAX"], [246, 230, 10, "enum_LAST_LEXICAL_USE"], [245, 246, 9, "enum_NEXT_SYNTAX"], [246, 247, 9, "enum_NEXT_SYNTAX"], [247, 248, 9, "enum_NEXT_SYNTAX"], [248, 249, 9, "enum_NEXT_SYNTAX"], [249, 250, 9, "enum_NEXT_SYNTAX"], [251, 205, 10, "enum_LAST_LEXICAL_USE"], [250, 251, 9, "enum_NEXT_SYNTAX"], [251, 252, 9, "enum_NEXT_SYNTAX"], [252, 253, 9, "enum_NEXT_SYNTAX"], [253, 254, 9, "enum_NEXT_SYNTAX"], [255, 246, 10, "enum_LAST_LEXICAL_USE"], [254, 255, 9, "enum_NEXT_SYNTAX"], [255, 256, 9, "enum_NEXT_SYNTAX"], [256, 257, 9, "enum_NEXT_SYNTAX"], [257, 258, 9, "enum_NEXT_SYNTAX"], [258, 259, 9, "enum_NEXT_SYNTAX"], [259, 260, 9, "enum_NEXT_SYNTAX"], [261, 99, 10, "enum_LAST_LEXICAL_USE"], [260, 261, 9, "enum_NEXT_SYNTAX"], [261, 262, 9, "enum_NEXT_SYNTAX"], [262, 263, 9, "enum_NEXT_SYNTAX"], [263, 264, 9, "enum_NEXT_SYNTAX"], [265, 255, 10, "enum_LAST_LEXICAL_USE"], [264, 265, 9, "enum_NEXT_SYNTAX"], [265, 266, 9, "enum_NEXT_SYNTAX"], [266, 267, 9, "enum_NEXT_SYNTAX"], [267, 268, 9, "enum_NEXT_SYNTAX"], [268, 269, 9, "enum_NEXT_SYNTAX"], [269, 270, 9, "enum_NEXT_SYNTAX"], [270, 271, 9, "enum_NEXT_SYNTAX"], [272, 265, 10, "enum_LAST_LEXICAL_USE"], [271, 272, 9, "enum_NEXT_SYNTAX"], [272, 273, 9, "enum_NEXT_SYNTAX"], [273, 274, 9, "enum_NEXT_SYNTAX"], [274, 275, 9, "enum_NEXT_SYNTAX"], [275, 276, 9, "enum_NEXT_SYNTAX"], [277, 272, 10, "enum_LAST_LEXICAL_USE"], [276, 277, 9, "enum_NEXT_SYNTAX"], [277, 278, 9, "enum_NEXT_SYNTAX"], [278, 279, 9, "enum_NEXT_SYNTAX"], [279, 280, 9, "enum_NEXT_SYNTAX"], [280, 281, 9, "enum_NEXT_SYNTAX"], [281, 282, 9, "enum_NEXT_SYNTAX"], [282, 283, 9, "enum_NEXT_SYNTAX"], [283, 284, 9, "enum_NEXT_SYNTAX"], [284, 285, 9, "enum_NEXT_SYNTAX"], [285, 286, 9, "enum_NEXT_SYNTAX"], [287, 277, 10, "enum_LAST_LEXICAL_USE"], [286, 287, 9, "enum_NEXT_SYNTAX"], [287, 288, 9, "enum_NEXT_SYNTAX"], [288, 289, 9, "enum_NEXT_SYNTAX"], [289, 290, 9, "enum_NEXT_SYNTAX"], [290, 291, 9, "enum_NEXT_SYNTAX"], [291, 292, 9, "enum_NEXT_SYNTAX"], [292, 293, 9, "enum_NEXT_SYNTAX"], [294, 287, 10, "enum_LAST_LEXICAL_USE"], [293, 294, 9, "enum_NEXT_SYNTAX"], [294, 295, 9, "enum_NEXT_SYNTAX"], [295, 296, 9, "enum_NEXT_SYNTAX"], [296, 297, 9, "enum_NEXT_SYNTAX"], [297, 298, 9, "enum_NEXT_SYNTAX"], [298, 299, 9, "enum_NEXT_SYNTAX"], [299, 300, 9, "enum_NEXT_SYNTAX"], [300, 301, 9, "enum_NEXT_SYNTAX"], [301, 302, 9, "enum_NEXT_SYNTAX"], [302, 303, 9, "enum_NEXT_SYNTAX"], [303, 304, 9, "enum_NEXT_SYNTAX"], [304, 305, 9, "enum_NEXT_SYNTAX"], [305, 306, 9, "enum_NEXT_SYNTAX"], [306, 307, 9, "enum_NEXT_SYNTAX"], [307, 308, 9, "enum_NEXT_SYNTAX"], [309, 244, 10, "enum_LAST_LEXICAL_USE"], [308, 309, 9, "enum_NEXT_SYNTAX"], [309, 310, 9, "enum_NEXT_SYNTAX"], [310, 311, 9, "enum_NEXT_SYNTAX"], [312, 71, 10, "enum_LAST_LEXICAL_USE"], [311, 312, 9, "enum_NEXT_SYNTAX"], [312, 313, 9, "enum_NEXT_SYNTAX"], [314, 294, 10, "enum_LAST_LEXICAL_USE"], [313, 314, 9, "enum_NEXT_SYNTAX"], [314, 315, 9, "enum_NEXT_SYNTAX"], [315, 316, 9, "enum_NEXT_SYNTAX"], [316, 317, 9, "enum_NEXT_SYNTAX"], [317, 318, 9, "enum_NEXT_SYNTAX"], [318, 319, 9, "enum_NEXT_SYNTAX"], [320, 314, 10, "enum_LAST_LEXICAL_USE"], [319, 320, 9, "enum_NEXT_SYNTAX"], [320, 321, 9, "enum_NEXT_SYNTAX"], [321, 322, 9, "enum_NEXT_SYNTAX"], [322, 323, 9, "enum_NEXT_SYNTAX"], [323, 324, 9, "enum_NEXT_SYNTAX"], [324, 325, 9, "enum_NEXT_SYNTAX"], [325, 326, 9, "enum_NEXT_SYNTAX"], [326, 327, 9, "enum_NEXT_SYNTAX"], [328, 306, 10, "enum_LAST_LEXICAL_USE"], [327, 328, 9, "enum_NEXT_SYNTAX"], [328, 329, 9, "enum_NEXT_SYNTAX"], [329, 330, 9, "enum_NEXT_SYNTAX"], [330, 331, 9, "enum_NEXT_SYNTAX"], [331, 332, 9, "enum_NEXT_SYNTAX"], [6, 8, 1, "enum_CFG_NEXT"], [8, 22, 1, "enum_CFG_NEXT"], [22, 34, 1, "enum_CFG_NEXT"], [34, 49, 1, "enum_CFG_NEXT"], [49, 64, 1, "enum_CFG_NEXT"], [64, 78, 1, "enum_CFG_NEXT"], [78, 124, 1, "enum_CFG_NEXT"], [124, 133, 1, "enum_CFG_NEXT"], [133, 130, 1, "enum_CFG_NEXT"], [130, 147, 1, "enum_CFG_NEXT"], [130, 194, 1, "enum_CFG_NEXT"], [147, 175, 1, "enum_CFG_NEXT"], [147, 154, 1, "enum_CFG_NEXT"], [154, 130, 1, "enum_CFG_NEXT"], [175, 182, 1, "enum_CFG_NEXT"], [175, 130, 1, "enum_CFG_NEXT"], [182, 130, 1, "enum_CFG_NEXT"], [194, 240, 1, "enum_CFG_NEXT"], [240, 305, 1, "enum_CFG_NEXT"], [305, 319, 1, "enum_CFG_NEXT"], [12, 2, 3, "enum_LAST_WRITE"], [18, 12, 2, "enum_LAST_READ"], [18, 2, 3, "enum_LAST_WRITE"], [26, 18, 2, "enum_LAST_READ"], [26, 2, 3, "enum_LAST_WRITE"], [43, 9, 3, "enum_LAST_WRITE"], [52, 37, 2, "enum_LAST_READ"], [58, 23, 3, "enum_LAST_WRITE"], [69, 35, 3, "enum_LAST_WRITE"], [71, 50, 3, "enum_LAST_WRITE"], [74, 26, 2, "enum_LAST_READ"], [74, 2, 3, "enum_LAST_WRITE"], [93, 74, 2, "enum_LAST_READ"], [93, 2, 3, "enum_LAST_WRITE"], [99, 65, 3, "enum_LAST_WRITE"], [103, 93, 2, "enum_LAST_READ"], [103, 2, 3, "enum_LAST_WRITE"], [109, 103, 2, "enum_LAST_READ"], [109, 2, 3, "enum_LAST_WRITE"], [114, 109, 2, "enum_LAST_READ"], [114, 2, 3, "enum_LAST_WRITE"], [84, 114, 2, "enum_LAST_READ"], [84, 2, 3, "enum_LAST_WRITE"], [127, 82, 3, "enum_LAST_WRITE"], [134, 125, 3, "enum_LAST_WRITE"], [130, 157, 2, "enum_LAST_READ"], [130, 185, 2, "enum_LAST_READ"], [130, 173, 2, "enum_LAST_READ"], [130, 130, 3, "enum_LAST_WRITE"], [143, 171, 2, "enum_LAST_READ"], [143, 155, 2, "enum_LAST_READ"], [143, 134, 2, "enum_LAST_READ"], [143, 183, 2, "enum_LAST_READ"], [143, 125, 3, "enum_LAST_WRITE"], [145, 157, 2, "enum_LAST_READ"], [145, 185, 2, "enum_LAST_READ"], [145, 173, 2, "enum_LAST_READ"], [145, 130, 3, "enum_LAST_WRITE"], [148, 176, 2, "enum_LAST_READ"], [148, 160, 2, "enum_LAST_READ"], [148, 188, 2, "enum_LAST_READ"], [148, 84, 2, "enum_LAST_READ"], [148, 2, 3, "enum_LAST_WRITE"], [160, 148, 2, "enum_LAST_READ"], [160, 2, 3, "enum_LAST_WRITE"], [155, 143, 2, "enum_LAST_READ"], [155, 125, 3, "enum_LAST_WRITE"], [157, 145, 2, "enum_LAST_READ"], [157, 130, 3, "enum_LAST_WRITE"], [171, 143, 2, "enum_LAST_READ"], [171, 125, 3, "enum_LAST_WRITE"], [173, 145, 2, "enum_LAST_READ"], [173, 130, 3, "enum_LAST_WRITE"], [176, 148, 2, "enum_LAST_READ"], [176, 2, 3, "enum_LAST_WRITE"], [188, 176, 2, "enum_LAST_READ"], [188, 2, 3, "enum_LAST_WRITE"], [183, 171, 2, "enum_LAST_READ"], [183, 125, 3, "enum_LAST_WRITE"], [185, 173, 2, "enum_LAST_READ"], [185, 130, 3, "enum_LAST_WRITE"], [205, 89, 2, "enum_LAST_READ"], [209, 176, 2, "enum_LAST_READ"], [209, 160, 2, "enum_LAST_READ"], [209, 188, 2, "enum_LAST_READ"], [209, 84, 2, "enum_LAST_READ"], [209, 2, 3, "enum_LAST_WRITE"], [213, 171, 2, "enum_LAST_READ"], [213, 155, 2, "enum_LAST_READ"], [213, 134, 2, "enum_LAST_READ"], [213, 183, 2, "enum_LAST_READ"], [213, 125, 3, "enum_LAST_WRITE"], [217, 209, 2, "enum_LAST_READ"], [217, 2, 3, "enum_LAST_WRITE"], [223, 217, 2, "enum_LAST_READ"], [223, 2, 3, "enum_LAST_WRITE"], [230, 223, 2, "enum_LAST_READ"], [230, 2, 3, "enum_LAST_WRITE"], [196, 80, 3, "enum_LAST_WRITE"], [200, 230, 2, "enum_LAST_READ"], [200, 2, 3, "enum_LAST_WRITE"], [251, 205, 2, "enum_LAST_READ"], [255, 200, 2, "enum_LAST_READ"], [255, 2, 3, "enum_LAST_WRITE"], [261, 99, 2, "enum_LAST_READ"], [261, 65, 3, "enum_LAST_WRITE"], [265, 255, 2, "enum_LAST_READ"], [265, 2, 3, "enum_LAST_WRITE"], [272, 265, 2, "enum_LAST_READ"], [272, 2, 3, "enum_LAST_WRITE"], [277, 272, 2, "enum_LAST_READ"], [277, 2, 3, "enum_LAST_WRITE"], [287, 277, 2, "enum_LAST_READ"], [287, 2, 3, "enum_LAST_WRITE"], [294, 287, 2, "enum_LAST_READ"], [294, 2, 3, "enum_LAST_WRITE"], [242, 196, 3, "enum_LAST_WRITE"], [246, 294, 2, "enum_LAST_READ"], [246, 2, 3, "enum_LAST_WRITE"], [309, 244, 3, "enum_LAST_WRITE"], [312, 71, 2, "enum_LAST_READ"], [312, 50, 3, "enum_LAST_WRITE"], [314, 246, 2, "enum_LAST_READ"], [314, 2, 3, "enum_LAST_WRITE"], [328, 306, 3, "enum_LAST_WRITE"], [320, 314, 2, "enum_LAST_READ"], [320, 2, 3, "enum_LAST_WRITE"], [9, 18, 4, "enum_COMPUTED_FROM"], [9, 12, 4, "enum_COMPUTED_FROM"], [23, 26, 4, "enum_COMPUTED_FROM"], [35, 37, 4, "enum_COMPUTED_FROM"], [35, 43, 4, "enum_COMPUTED_FROM"], [50, 52, 4, "enum_COMPUTED_FROM"], [50, 58, 4, "enum_COMPUTED_FROM"], [65, 69, 4, "enum_COMPUTED_FROM"], [65, 71, 4, "enum_COMPUTED_FROM"], [65, 74, 4, "enum_COMPUTED_FROM"], [81, 89, 4, "enum_COMPUTED_FROM"], [81, 93, 4, "enum_COMPUTED_FROM"], [81, 99, 4, "enum_COMPUTED_FROM"], [81, 103, 4, "enum_COMPUTED_FROM"], [81, 109, 4, "enum_COMPUTED_FROM"], [81, 114, 4, "enum_COMPUTED_FROM"], [125, 127, 4, "enum_COMPUTED_FROM"], [197, 213, 4, "enum_COMPUTED_FROM"], [197, 205, 4, "enum_COMPUTED_FROM"], [197, 209, 4, "enum_COMPUTED_FROM"], [197, 217, 4, "enum_COMPUTED_FROM"], [197, 223, 4, "enum_COMPUTED_FROM"], [197, 230, 4, "enum_COMPUTED_FROM"], [243, 251, 4, "enum_COMPUTED_FROM"], [243, 255, 4, "enum_COMPUTED_FROM"], [243, 261, 4, "enum_COMPUTED_FROM"], [243, 265, 4, "enum_COMPUTED_FROM"], [243, 272, 4, "enum_COMPUTED_FROM"], [243, 287, 4, "enum_COMPUTED_FROM"], [243, 277, 4, "enum_COMPUTED_FROM"], [243, 294, 4, "enum_COMPUTED_FROM"], [306, 309, 4, "enum_COMPUTED_FROM"], [306, 312, 4, "enum_COMPUTED_FROM"], [306, 314, 4, "enum_COMPUTED_FROM"], [323, 326, 4, "enum_COMPUTED_FROM"], [323, 328, 4, "enum_COMPUTED_FROM"], [156, 160, 4, "enum_COMPUTED_FROM"], [184, 188, 4, "enum_COMPUTED_FROM"]], "error_location": 309, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/thadhaines/PSLTDSim.git", "old_path": "psltdsim/dynamicAgents/tgov1Agent.py", "hash": "5dc7e46a081628010935853d830aa82b98e2df69", "code": "def stepDynamics(self):\n    \"\"\" Perform steam governor control\"\"\"\n    \n    # Create system inputs\n    Pref: float = self.Gen.Pe * self.R\n    delta_w: float = (self.mirror.c_f - 1.0)\n\n    PrefVec: np.ndarray = np.array([Pref]*2)\n    dwVec: np.ndarray = np.array([delta_w]*2)\n\n    # Perform sum and first gain block\n    uVector: np.ndarray = (PrefVec-dwVec)/self.R\n\n    # First dynamic Block\n    _, y1, self.x1 = sig.lsim(self.sys1, U=uVector, T=self.t, \n                            X0=self.r_x1[self.mirror.c_dp-1]) # this intit value should be a histroy of x1\n    ys: np.ndarray = y1\n\n    # limit Valve position (i.e. Pm out)\n    for x in range(ys.size):\n        if ys[x]>self.y1HighLimit:\n            ys[x] = self.y1HighLimit\n        elif ys[x]<self.y1LowLimit:\n            ys[x] = self.y1LowLimit\n\n    # Second block\n    _, y2, self.x2 = sig.lsim(self.sys2, ys, T=self.t, \n                            X0=self.Gen.r_Pm[self.mirror.c_dp-1]) # this initial value should be okay...\n\n    # combination block # essentially ignore other blocks...\n    _, y3, self.x3 = sig.lsim(self.sys3, U=uVector, T=self.t, \n                            X0=[self.r_x1[self.mirror.c_dp-1],self.Gen.r_Pm[self.mirror.c_dp-1]])\n    # Addition of damping\n    Pmech: np.ndarray = y3 - dwVec*self.Dt # effectively removing the second block...\n\n    # Set Generator Mechanical Power\n    self.Gen.Pm = float(Pmech[1])\n", "rewrite": "ReplaceText(target='y2' @(79,16)->(79,18))", "error_line": 33, "has_bug": true, "code_full": "from typing import Any, List\n\nimport numpy as np\nimport scipy.signal as sig\n\n\nclass Mirror:\n    c_f: float\n    c_dp: int\n\n\nclass Generator:\n    Pe: float\n    Pm: float\n    r_Pm: list\n\nclass tgov1Agent:\n    Gen: Generator\n    mirror: Mirror\n    sys1: Any\n    sys2: Any\n    sys3: Any\n    t: np.ndarray\n    x1: np.ndarray\n    x2: np.ndarray\n    x3: np.ndarray\n    r_x1: List[float]\n    R: float\n    Dt: float\n    y1HighLimit: float\n    y1LowLimit: float\n    y2HighLimit: float\n\n    def stepDynamics(self):\n        \"\"\" Perform steam governor control\"\"\"\n        \n        # Create system inputs\n        Pref: float = self.Gen.Pe * self.R\n        delta_w: float = (self.mirror.c_f - 1.0)\n\n        PrefVec: np.ndarray = np.array([Pref]*2)\n        dwVec: np.ndarray = np.array([delta_w]*2)\n\n        # Perform sum and first gain block\n        uVector: np.ndarray = (PrefVec-dwVec)/self.R\n\n        # First dynamic Block\n        _, y1, self.x1 = sig.lsim(self.sys1, U=uVector, T=self.t, \n                                X0=self.r_x1[self.mirror.c_dp-1]) # this intit value should be a histroy of x1\n        ys: np.ndarray = y1\n\n        # limit Valve position (i.e. Pm out)\n        for x in range(ys.size):\n            if ys[x]>self.y1HighLimit:\n                ys[x] = self.y1HighLimit\n            elif ys[x]<self.y1LowLimit:\n                ys[x] = self.y1LowLimit\n\n        # Second block\n        _, y2, self.x2 = sig.lsim(self.sys2, ys, T=self.t, \n                                X0=self.Gen.r_Pm[self.mirror.c_dp-1]) # this initial value should be okay...\n\n        # combination block # essentially ignore other blocks...\n        _, y3, self.x3 = sig.lsim(self.sys3, U=uVector, T=self.t, \n                                X0=[self.r_x1[self.mirror.c_dp-1],self.Gen.r_Pm[self.mirror.c_dp-1]])\n        # Addition of damping\n        Pmech: np.ndarray = y3 - dwVec*self.Dt # effectively removing the second block...\n\n        # Set Generator Mechanical Power\n        self.Gen.Pm = float(Pmech[1])\n", "error_location_char": [1253, 1255], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def visit_BinOp(", "self", ",", "node", ")", ":", "#NEWLINE#", "#INDENT#", "node", "=", "self", ".", "generic_visit", "(", "node", ")", "#NEWLINE#", "left", "=", "node", ".", "left", "#NEWLINE#", "right", "=", "node", ".", "right", "#NEWLINE#", "if", "all", "(", "(", "isinstance", "(", "value", ",", "ast", ".", "Num", ")", "for", "value", "in", "(", "left", ",", "right", ")", ")", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "type", "(", "node", ".", "op", ")", "in", "self", ".", "_operators", ")", ":", "#NEWLINE#", "#INDENT#", "val", "=", "self", ".", "_operators", "[", "type", "(", "node", ".", "op", ")", "]", "(", "left", ".", "n", ",", "right", ".", "n", ")", "#NEWLINE#", "node", "=", "ast", ".", "copy_location", "(", "ast", ".", "Num", "(", "n", "=", "val", ")", ",", "node", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "all", "(", "(", "isinstance", "(", "value", ",", "ast", ".", "Str", ")", "for", "value", "in", "(", "left", ",", "right", ")", ")", ")", ":", "#NEWLINE#", "#INDENT#", "if", "isinstance", "(", "node", ".", "op", ",", "ast", ".", "Add", ")", ":", "#NEWLINE#", "#INDENT#", "val", "=", "(", "left", ".", "s", "+", "left", ".", "s", ")", "#NEWLINE#", "node", "=", "ast", ".", "copy_location", "(", "ast", ".", "Str", "(", "s", "=", "val", ")", ",", "node", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "return", "node"], "edges": [[1, 3, 7, "enum_FIELD"], [8, 14, 7, "enum_FIELD"], [17, 21, 7, "enum_FIELD"], [23, 27, 7, "enum_FIELD"], [52, 32, 7, "enum_FIELD"], [190, 191, 7, "enum_FIELD"], [14, 12, 7, "enum_FIELD"], [21, 20, 7, "enum_FIELD"], [27, 26, 7, "enum_FIELD"], [32, 31, 7, "enum_FIELD"], [55, 63, 7, "enum_FIELD"], [118, 120, 7, "enum_FIELD"], [12, 11, 7, "enum_FIELD"], [33, 37, 7, "enum_FIELD"], [63, 58, 7, "enum_FIELD"], [70, 88, 7, "enum_FIELD"], [93, 108, 7, "enum_FIELD"], [120, 119, 7, "enum_FIELD"], [143, 149, 7, "enum_FIELD"], [37, 34, 7, "enum_FIELD"], [42, 43, 7, "enum_FIELD"], [42, 47, 7, "enum_FIELD"], [58, 57, 7, "enum_FIELD"], [65, 64, 7, "enum_FIELD"], [88, 76, 7, "enum_FIELD"], [108, 97, 7, "enum_FIELD"], [121, 125, 7, "enum_FIELD"], [149, 144, 7, "enum_FIELD"], [156, 163, 7, "enum_FIELD"], [168, 183, 7, "enum_FIELD"], [39, 38, 7, "enum_FIELD"], [60, 59, 7, "enum_FIELD"], [76, 74, 7, "enum_FIELD"], [76, 78, 7, "enum_FIELD"], [86, 85, 7, "enum_FIELD"], [90, 89, 7, "enum_FIELD"], [97, 96, 7, "enum_FIELD"], [103, 101, 7, "enum_FIELD"], [125, 122, 7, "enum_FIELD"], [130, 131, 7, "enum_FIELD"], [130, 135, 7, "enum_FIELD"], [147, 146, 7, "enum_FIELD"], [151, 150, 7, "enum_FIELD"], [163, 161, 7, "enum_FIELD"], [163, 165, 7, "enum_FIELD"], [183, 172, 7, "enum_FIELD"], [74, 73, 7, "enum_FIELD"], [78, 77, 7, "enum_FIELD"], [101, 100, 7, "enum_FIELD"], [104, 106, 7, "enum_FIELD"], [127, 126, 7, "enum_FIELD"], [161, 160, 7, "enum_FIELD"], [165, 164, 7, "enum_FIELD"], [172, 171, 7, "enum_FIELD"], [178, 176, 7, "enum_FIELD"], [80, 79, 7, "enum_FIELD"], [176, 175, 7, "enum_FIELD"], [179, 181, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 8, 9, "enum_NEXT_SYNTAX"], [9, 4, 10, "enum_LAST_LEXICAL_USE"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [11, 2, 10, "enum_LAST_LEXICAL_USE"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [15, 9, 10, "enum_LAST_LEXICAL_USE"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [20, 15, 10, "enum_LAST_LEXICAL_USE"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [26, 20, 10, "enum_LAST_LEXICAL_USE"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [43, 36, 10, "enum_LAST_LEXICAL_USE"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [46, 18, 10, "enum_LAST_LEXICAL_USE"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [48, 24, 10, "enum_LAST_LEXICAL_USE"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [59, 26, 10, "enum_LAST_LEXICAL_USE"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [64, 11, 10, "enum_LAST_LEXICAL_USE"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [73, 64, 10, "enum_LAST_LEXICAL_USE"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [77, 57, 10, "enum_LAST_LEXICAL_USE"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [79, 59, 10, "enum_LAST_LEXICAL_USE"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [85, 46, 10, "enum_LAST_LEXICAL_USE"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [89, 48, 10, "enum_LAST_LEXICAL_USE"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [94, 79, 10, "enum_LAST_LEXICAL_USE"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [96, 38, 10, "enum_LAST_LEXICAL_USE"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [100, 96, 10, "enum_LAST_LEXICAL_USE"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [106, 71, 10, "enum_LAST_LEXICAL_USE"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [109, 94, 10, "enum_LAST_LEXICAL_USE"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 118, 9, "enum_NEXT_SYNTAX"], [119, 31, 10, "enum_LAST_LEXICAL_USE"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [122, 34, 10, "enum_LAST_LEXICAL_USE"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [124, 43, 10, "enum_LAST_LEXICAL_USE"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [126, 100, 10, "enum_LAST_LEXICAL_USE"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [131, 124, 10, "enum_LAST_LEXICAL_USE"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [134, 85, 10, "enum_LAST_LEXICAL_USE"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [136, 89, 10, "enum_LAST_LEXICAL_USE"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 143, 9, "enum_NEXT_SYNTAX"], [144, 122, 10, "enum_LAST_LEXICAL_USE"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [146, 109, 10, "enum_LAST_LEXICAL_USE"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [150, 126, 10, "enum_LAST_LEXICAL_USE"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 156, 9, "enum_NEXT_SYNTAX"], [157, 106, 10, "enum_LAST_LEXICAL_USE"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [160, 134, 10, "enum_LAST_LEXICAL_USE"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [164, 160, 10, "enum_LAST_LEXICAL_USE"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [169, 146, 10, "enum_LAST_LEXICAL_USE"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [171, 150, 10, "enum_LAST_LEXICAL_USE"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [175, 171, 10, "enum_LAST_LEXICAL_USE"], [174, 175, 9, "enum_NEXT_SYNTAX"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 180, 9, "enum_NEXT_SYNTAX"], [181, 157, 10, "enum_LAST_LEXICAL_USE"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [184, 169, 10, "enum_LAST_LEXICAL_USE"], [183, 184, 9, "enum_NEXT_SYNTAX"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 190, 9, "enum_NEXT_SYNTAX"], [191, 184, 10, "enum_LAST_LEXICAL_USE"], [190, 191, 9, "enum_NEXT_SYNTAX"], [3, 8, 1, "enum_CFG_NEXT"], [8, 17, 1, "enum_CFG_NEXT"], [17, 23, 1, "enum_CFG_NEXT"], [23, 32, 1, "enum_CFG_NEXT"], [32, 120, 1, "enum_CFG_NEXT"], [32, 63, 1, "enum_CFG_NEXT"], [63, 70, 1, "enum_CFG_NEXT"], [63, 190, 1, "enum_CFG_NEXT"], [70, 93, 1, "enum_CFG_NEXT"], [93, 190, 1, "enum_CFG_NEXT"], [120, 149, 1, "enum_CFG_NEXT"], [120, 190, 1, "enum_CFG_NEXT"], [149, 156, 1, "enum_CFG_NEXT"], [149, 190, 1, "enum_CFG_NEXT"], [156, 168, 1, "enum_CFG_NEXT"], [168, 190, 1, "enum_CFG_NEXT"], [11, 2, 3, "enum_LAST_WRITE"], [15, 4, 3, "enum_LAST_WRITE"], [9, 15, 2, "enum_LAST_READ"], [9, 4, 3, "enum_LAST_WRITE"], [20, 15, 2, "enum_LAST_READ"], [20, 9, 3, "enum_LAST_WRITE"], [26, 20, 2, "enum_LAST_READ"], [26, 9, 3, "enum_LAST_WRITE"], [43, 36, 2, "enum_LAST_READ"], [46, 18, 3, "enum_LAST_WRITE"], [48, 24, 3, "enum_LAST_WRITE"], [59, 26, 2, "enum_LAST_READ"], [59, 9, 3, "enum_LAST_WRITE"], [64, 11, 2, "enum_LAST_READ"], [64, 2, 3, "enum_LAST_WRITE"], [73, 64, 2, "enum_LAST_READ"], [73, 2, 3, "enum_LAST_WRITE"], [77, 57, 2, "enum_LAST_READ"], [79, 59, 2, "enum_LAST_READ"], [79, 9, 3, "enum_LAST_WRITE"], [85, 46, 2, "enum_LAST_READ"], [85, 18, 3, "enum_LAST_WRITE"], [89, 48, 2, "enum_LAST_READ"], [89, 24, 3, "enum_LAST_WRITE"], [96, 38, 2, "enum_LAST_READ"], [100, 96, 2, "enum_LAST_READ"], [106, 71, 3, "enum_LAST_WRITE"], [109, 79, 2, "enum_LAST_READ"], [109, 9, 3, "enum_LAST_WRITE"], [94, 109, 2, "enum_LAST_READ"], [94, 9, 3, "enum_LAST_WRITE"], [119, 31, 2, "enum_LAST_READ"], [122, 34, 2, "enum_LAST_READ"], [124, 36, 2, "enum_LAST_READ"], [124, 43, 3, "enum_LAST_WRITE"], [126, 38, 2, "enum_LAST_READ"], [131, 124, 2, "enum_LAST_READ"], [131, 43, 3, "enum_LAST_WRITE"], [134, 46, 2, "enum_LAST_READ"], [134, 18, 3, "enum_LAST_WRITE"], [136, 48, 2, "enum_LAST_READ"], [136, 24, 3, "enum_LAST_WRITE"], [144, 122, 2, "enum_LAST_READ"], [146, 26, 2, "enum_LAST_READ"], [146, 9, 3, "enum_LAST_WRITE"], [150, 126, 2, "enum_LAST_READ"], [160, 134, 2, "enum_LAST_READ"], [160, 18, 3, "enum_LAST_WRITE"], [164, 160, 2, "enum_LAST_READ"], [164, 18, 3, "enum_LAST_WRITE"], [171, 150, 2, "enum_LAST_READ"], [175, 171, 2, "enum_LAST_READ"], [181, 157, 3, "enum_LAST_WRITE"], [184, 146, 2, "enum_LAST_READ"], [184, 9, 3, "enum_LAST_WRITE"], [169, 184, 2, "enum_LAST_READ"], [169, 9, 3, "enum_LAST_WRITE"], [191, 59, 2, "enum_LAST_READ"], [191, 184, 2, "enum_LAST_READ"], [191, 26, 2, "enum_LAST_READ"], [191, 146, 2, "enum_LAST_READ"], [191, 109, 2, "enum_LAST_READ"], [191, 9, 3, "enum_LAST_WRITE"], [191, 169, 3, "enum_LAST_WRITE"], [191, 94, 3, "enum_LAST_WRITE"], [9, 15, 4, "enum_COMPUTED_FROM"], [9, 11, 4, "enum_COMPUTED_FROM"], [18, 20, 4, "enum_COMPUTED_FROM"], [24, 26, 4, "enum_COMPUTED_FROM"], [71, 85, 4, "enum_COMPUTED_FROM"], [71, 89, 4, "enum_COMPUTED_FROM"], [71, 73, 4, "enum_COMPUTED_FROM"], [71, 77, 4, "enum_COMPUTED_FROM"], [71, 79, 4, "enum_COMPUTED_FROM"], [94, 109, 4, "enum_COMPUTED_FROM"], [94, 96, 4, "enum_COMPUTED_FROM"], [94, 100, 4, "enum_COMPUTED_FROM"], [94, 106, 4, "enum_COMPUTED_FROM"], [157, 160, 4, "enum_COMPUTED_FROM"], [157, 164, 4, "enum_COMPUTED_FROM"], [169, 184, 4, "enum_COMPUTED_FROM"], [169, 171, 4, "enum_COMPUTED_FROM"], [169, 175, 4, "enum_COMPUTED_FROM"], [169, 181, 4, "enum_COMPUTED_FROM"]], "error_location": 164, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/Amper/opyum.git", "old_path": "opyum/optimizations/constant_folding.py", "hash": "444ce0427ba68f5a0d1f49dc039510476c978c2e", "code": "def visit_BinOp(self, node: ast.BinOp) -> Any:\n    node  = self.generic_visit(node)\n    left: ast.expr  = node.left\n    right: ast.expr = node.right\n    if all(isinstance(value, ast.Num) for value in (left, right)):\n        if type(node.op) in self._operators:\n            val: Any  = self._operators[type(node.op)](left.n, right.n)\n            node = ast.copy_location(ast.Num(n = val), node)\n    elif all(isinstance(value, ast.Str) for value in (left, right)):\n        if isinstance(node.op, ast.Add):\n                val  = left.s + left.s\n                node = ast.copy_location(ast.Str(s = val), node)\n    return node\n", "rewrite": "ReplaceText(target='right' @(50,32)->(50,36))", "error_line": 10, "has_bug": true, "code_full": "import ast\nfrom ast import NodeTransformer\nfrom typing import Any, Callable, Dict\n\n\nclass ConstantFolding:\n    _operators: Dict[type, Callable[[Any, Any], Any]]\n\n    def generic_visit(self, node: ast.AST) -> Any:\n        pass\n\n    def visit_BinOp(self, node: ast.BinOp) -> Any:\n        node  = self.generic_visit(node)\n        left: ast.expr  = node.left\n        right: ast.expr = node.right\n        if all(isinstance(value, ast.Num) for value in (left, right)):\n            if type(node.op) in self._operators:\n                val: Any  = self._operators[type(node.op)](left.n, right.n)\n                node = ast.copy_location(ast.Num(n = val), node)\n        elif all(isinstance(value, ast.Str) for value in (left, right)):\n            if isinstance(node.op, ast.Add):\n                    val  = left.s + left.s\n                    node = ast.copy_location(ast.Str(s = val), node)\n        return node\n", "error_location_char": [536, 540], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def __init__(", "self", ",", "obj_or_path", ")", ":", "#NEWLINE#", "#INDENT#", "'A convenient object that reads and makes sense of Par2 blocks.'", "#NEWLINE#", "self", ".", "path", "=", "None", "#NEWLINE#", "if", "isinstance", "(", "obj_or_path", ",", "basestring", ")", ":", "#NEWLINE#", "#INDENT#", "with", "open", "(", "obj_or_path", ")", "as", "f", ":", "#NEWLINE#", "#INDENT#", "self", ".", "contents", "=", "f", ".", "read", "(", ")", "#NEWLINE#", "self", ".", "path", "=", "obj_or_path", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "self", ".", "contents", "=", "obj_or_path", ".", "read", "(", ")", "#NEWLINE#", "if", "getattr", "(", "obj_or_path", ",", "'name'", ",", "None", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "path", "=", "f", ".", "name", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "self", ".", "packets", "=", "self", ".", "read_packets", "(", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [8, 9, 7, "enum_FIELD"], [10, 15, 7, "enum_FIELD"], [24, 21, 7, "enum_FIELD"], [90, 98, 7, "enum_FIELD"], [12, 11, 7, "enum_FIELD"], [21, 18, 7, "enum_FIELD"], [58, 66, 7, "enum_FIELD"], [69, 73, 7, "enum_FIELD"], [92, 91, 7, "enum_FIELD"], [98, 96, 7, "enum_FIELD"], [32, 29, 7, "enum_FIELD"], [32, 33, 7, "enum_FIELD"], [36, 44, 7, "enum_FIELD"], [46, 51, 7, "enum_FIELD"], [60, 59, 7, "enum_FIELD"], [66, 64, 7, "enum_FIELD"], [73, 70, 7, "enum_FIELD"], [80, 86, 7, "enum_FIELD"], [96, 95, 7, "enum_FIELD"], [29, 28, 7, "enum_FIELD"], [38, 37, 7, "enum_FIELD"], [44, 42, 7, "enum_FIELD"], [48, 47, 7, "enum_FIELD"], [64, 63, 7, "enum_FIELD"], [82, 81, 7, "enum_FIELD"], [86, 85, 7, "enum_FIELD"], [42, 41, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [11, 2, 10, "enum_LAST_LEXICAL_USE"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [20, 4, 10, "enum_LAST_LEXICAL_USE"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [30, 20, 10, "enum_LAST_LEXICAL_USE"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 36, 9, "enum_NEXT_SYNTAX"], [37, 11, 10, "enum_LAST_LEXICAL_USE"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [41, 33, 10, "enum_LAST_LEXICAL_USE"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [47, 37, 10, "enum_LAST_LEXICAL_USE"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [51, 30, 10, "enum_LAST_LEXICAL_USE"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 58, 9, "enum_NEXT_SYNTAX"], [59, 47, 10, "enum_LAST_LEXICAL_USE"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [63, 51, 10, "enum_LAST_LEXICAL_USE"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [72, 63, 10, "enum_LAST_LEXICAL_USE"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 80, 9, "enum_NEXT_SYNTAX"], [81, 59, 10, "enum_LAST_LEXICAL_USE"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [85, 41, 10, "enum_LAST_LEXICAL_USE"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 90, 9, "enum_NEXT_SYNTAX"], [91, 81, 10, "enum_LAST_LEXICAL_USE"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [95, 91, 10, "enum_LAST_LEXICAL_USE"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [3, 8, 1, "enum_CFG_NEXT"], [8, 10, 1, "enum_CFG_NEXT"], [10, 21, 1, "enum_CFG_NEXT"], [21, 58, 1, "enum_CFG_NEXT"], [21, 90, 1, "enum_CFG_NEXT"], [58, 73, 1, "enum_CFG_NEXT"], [73, 80, 1, "enum_CFG_NEXT"], [73, 90, 1, "enum_CFG_NEXT"], [80, 90, 1, "enum_CFG_NEXT"], [11, 2, 3, "enum_LAST_WRITE"], [20, 4, 3, "enum_LAST_WRITE"], [63, 20, 2, "enum_LAST_READ"], [63, 4, 3, "enum_LAST_WRITE"], [59, 11, 2, "enum_LAST_READ"], [59, 2, 3, "enum_LAST_WRITE"], [72, 63, 2, "enum_LAST_READ"], [72, 4, 3, "enum_LAST_WRITE"], [81, 59, 2, "enum_LAST_READ"], [81, 2, 3, "enum_LAST_WRITE"], [95, 81, 2, "enum_LAST_READ"], [95, 11, 2, "enum_LAST_READ"], [95, 59, 2, "enum_LAST_READ"], [95, 2, 3, "enum_LAST_WRITE"], [91, 95, 2, "enum_LAST_READ"], [91, 2, 3, "enum_LAST_WRITE"], [92, 95, 4, "enum_COMPUTED_FROM"], [60, 63, 4, "enum_COMPUTED_FROM"], [38, 41, 4, "enum_COMPUTED_FROM"], [48, 51, 4, "enum_COMPUTED_FROM"], [82, 85, 4, "enum_COMPUTED_FROM"]], "error_location": 85, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/jmoiron/par2ools.git", "old_path": "par2ools/par2.py", "hash": "74b8d8885c8ad90f5649a8eb8228c62a840c5f3a", "code": "def __init__(self, obj_or_path: Union[str, IO]):\n    \"\"\"A convenient object that reads and makes sense of Par2 blocks.\"\"\"\n    self.path = None\n    if isinstance(obj_or_path, basestring):\n        with open(obj_or_path) as f:\n            self.contents = f.read()\n            self.path = obj_or_path\n    else:\n        self.contents = obj_or_path.read()\n        if getattr(obj_or_path, 'name', None):\n            self.path = f.name\n    self.packets = self.read_packets()\n", "rewrite": "ReplaceText(target='obj_or_path' @(78,28)->(78,29))", "error_line": 10, "has_bug": true, "code_full": "from typing import IO, List, Optional, Union\n\nbasestring = str\n\n\nclass Par2File(object):\n    path: Optional[str]\n    contents: str\n    packets: list\n    \n    def read_packets(self) -> List:\n        return []\n\n    def __init__(self, obj_or_path: Union[str, IO]):\n        \"\"\"A convenient object that reads and makes sense of Par2 blocks.\"\"\"\n        self.path = None\n        if isinstance(obj_or_path, basestring):\n            with open(obj_or_path) as f:\n                self.contents = f.read()\n                self.path = obj_or_path\n        else:\n            self.contents = obj_or_path.read()\n            if getattr(obj_or_path, 'name', None):\n                self.path = f.name\n        self.packets = self.read_packets()\n", "error_location_char": [421, 422], "type_checked_pytype": false, "type_error_label": "name-error", "type_checked_mypy": false}
{"source_tokens": ["#NEWLINE#", "def generate_mock(", "mocked_module", ",", "mock_prototype", ")", ":", "#NEWLINE#", "#INDENT#", "' Generates the mock '", "#NEWLINE#", "mock_filename", "=", "'{0}_mock.cpp'", ".", "format", "(", "mocked_module", ")", "#NEWLINE#", "include_filename", "=", "'{0}.h'", ".", "format", "(", "mock_filename", ")", "#NEWLINE#", "logger", ".", "debug", "(", "'working directory: %s'", ",", "os", ".", "getcwd", "(", ")", ")", "#NEWLINE#", "logger", ".", "debug", "(", "'mock_filename: %s'", ",", "mock_filename", ")", "#NEWLINE#", "logger", ".", "debug", "(", "'include_filename: %s'", ",", "include_filename", ")", "#NEWLINE#", "logger", ".", "debug", "(", "'mock_prototype: %s'", ",", "mock_prototype", ")", "#NEWLINE#", "if", "os", ".", "path", ".", "exists", "(", "mock_filename", ")", ":", "#NEWLINE#", "#INDENT#", "logger", ".", "debug", "(", "'Mock file exists'", ")", "#NEWLINE#", "mock_file", "=", "open", "(", "mock_filename", ",", "'a'", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "logger", ".", "debug", "(", "'Creating mock file'", ")", "#NEWLINE#", "mock_file", "=", "open", "(", "mock_filename", ",", "'w'", ")", "#NEWLINE#", "write_header", "(", "mock_file", ",", "FILE_HEADER", ",", "include_filename", ")", "#NEWLINE#", "#UNINDENT#", "add_mock_function", "(", "mock_file", ",", "mock_prototype", ")", "#NEWLINE#", "mock_file", ".", "close", "(", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [8, 9, 7, "enum_FIELD"], [10, 16, 7, "enum_FIELD"], [19, 25, 7, "enum_FIELD"], [28, 34, 7, "enum_FIELD"], [41, 47, 7, "enum_FIELD"], [50, 56, 7, "enum_FIELD"], [59, 65, 7, "enum_FIELD"], [78, 75, 7, "enum_FIELD"], [127, 131, 7, "enum_FIELD"], [134, 138, 7, "enum_FIELD"], [16, 14, 7, "enum_FIELD"], [25, 23, 7, "enum_FIELD"], [34, 30, 7, "enum_FIELD"], [47, 43, 7, "enum_FIELD"], [56, 52, 7, "enum_FIELD"], [65, 61, 7, "enum_FIELD"], [75, 73, 7, "enum_FIELD"], [80, 84, 7, "enum_FIELD"], [87, 93, 7, "enum_FIELD"], [101, 105, 7, "enum_FIELD"], [108, 114, 7, "enum_FIELD"], [117, 121, 7, "enum_FIELD"], [131, 128, 7, "enum_FIELD"], [138, 136, 7, "enum_FIELD"], [14, 13, 7, "enum_FIELD"], [23, 22, 7, "enum_FIELD"], [30, 29, 7, "enum_FIELD"], [38, 36, 7, "enum_FIELD"], [43, 42, 7, "enum_FIELD"], [52, 51, 7, "enum_FIELD"], [61, 60, 7, "enum_FIELD"], [73, 71, 7, "enum_FIELD"], [84, 82, 7, "enum_FIELD"], [93, 90, 7, "enum_FIELD"], [105, 103, 7, "enum_FIELD"], [114, 111, 7, "enum_FIELD"], [121, 118, 7, "enum_FIELD"], [136, 135, 7, "enum_FIELD"], [36, 35, 7, "enum_FIELD"], [71, 70, 7, "enum_FIELD"], [82, 81, 7, "enum_FIELD"], [103, 102, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [17, 2, 10, "enum_LAST_LEXICAL_USE"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [26, 11, 10, "enum_LAST_LEXICAL_USE"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [42, 29, 10, "enum_LAST_LEXICAL_USE"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [48, 26, 10, "enum_LAST_LEXICAL_USE"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [51, 42, 10, "enum_LAST_LEXICAL_USE"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [57, 20, 10, "enum_LAST_LEXICAL_USE"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [60, 51, 10, "enum_LAST_LEXICAL_USE"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [66, 4, 10, "enum_LAST_LEXICAL_USE"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 69, 9, "enum_NEXT_SYNTAX"], [70, 35, 10, "enum_LAST_LEXICAL_USE"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [76, 48, 10, "enum_LAST_LEXICAL_USE"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 80, 9, "enum_NEXT_SYNTAX"], [81, 60, 10, "enum_LAST_LEXICAL_USE"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [92, 76, 10, "enum_LAST_LEXICAL_USE"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 101, 9, "enum_NEXT_SYNTAX"], [102, 81, 10, "enum_LAST_LEXICAL_USE"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [109, 88, 10, "enum_LAST_LEXICAL_USE"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [111, 90, 10, "enum_LAST_LEXICAL_USE"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [113, 92, 10, "enum_LAST_LEXICAL_USE"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [120, 109, 10, "enum_LAST_LEXICAL_USE"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [124, 57, 10, "enum_LAST_LEXICAL_USE"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [130, 120, 10, "enum_LAST_LEXICAL_USE"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [132, 66, 10, "enum_LAST_LEXICAL_USE"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [135, 130, 10, "enum_LAST_LEXICAL_USE"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [3, 8, 1, "enum_CFG_NEXT"], [8, 10, 1, "enum_CFG_NEXT"], [10, 19, 1, "enum_CFG_NEXT"], [19, 28, 1, "enum_CFG_NEXT"], [28, 41, 1, "enum_CFG_NEXT"], [41, 50, 1, "enum_CFG_NEXT"], [50, 59, 1, "enum_CFG_NEXT"], [59, 75, 1, "enum_CFG_NEXT"], [75, 80, 1, "enum_CFG_NEXT"], [75, 101, 1, "enum_CFG_NEXT"], [80, 87, 1, "enum_CFG_NEXT"], [87, 127, 1, "enum_CFG_NEXT"], [101, 108, 1, "enum_CFG_NEXT"], [108, 117, 1, "enum_CFG_NEXT"], [117, 127, 1, "enum_CFG_NEXT"], [127, 134, 1, "enum_CFG_NEXT"], [17, 2, 3, "enum_LAST_WRITE"], [26, 11, 3, "enum_LAST_WRITE"], [42, 29, 2, "enum_LAST_READ"], [48, 26, 2, "enum_LAST_READ"], [48, 11, 3, "enum_LAST_WRITE"], [51, 42, 2, "enum_LAST_READ"], [57, 20, 3, "enum_LAST_WRITE"], [60, 51, 2, "enum_LAST_READ"], [66, 4, 3, "enum_LAST_WRITE"], [70, 35, 2, "enum_LAST_READ"], [76, 48, 2, "enum_LAST_READ"], [76, 11, 3, "enum_LAST_WRITE"], [81, 60, 2, "enum_LAST_READ"], [92, 76, 2, "enum_LAST_READ"], [92, 11, 3, "enum_LAST_WRITE"], [102, 60, 2, "enum_LAST_READ"], [113, 76, 2, "enum_LAST_READ"], [113, 11, 3, "enum_LAST_WRITE"], [120, 109, 3, "enum_LAST_WRITE"], [124, 57, 2, "enum_LAST_READ"], [124, 20, 3, "enum_LAST_WRITE"], [130, 120, 2, "enum_LAST_READ"], [130, 109, 3, "enum_LAST_WRITE"], [130, 88, 3, "enum_LAST_WRITE"], [132, 66, 2, "enum_LAST_READ"], [132, 4, 3, "enum_LAST_WRITE"], [135, 130, 2, "enum_LAST_READ"], [135, 109, 3, "enum_LAST_WRITE"], [135, 88, 3, "enum_LAST_WRITE"], [11, 17, 4, "enum_COMPUTED_FROM"], [20, 26, 4, "enum_COMPUTED_FROM"], [88, 90, 4, "enum_COMPUTED_FROM"], [88, 92, 4, "enum_COMPUTED_FROM"], [109, 111, 4, "enum_COMPUTED_FROM"], [109, 113, 4, "enum_COMPUTED_FROM"]], "error_location": 26, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/spoorcc/cppumockify.git", "old_path": "cppumockify.py", "hash": "8b4f2089cda3cc3071cd8fb5d83a36c5f6b0552b", "code": "def generate_mock(mocked_module: str, mock_prototype: str):\n    ''' Generates the mock '''\n    mock_filename: str = \"{0}_mock.cpp\".format(mocked_module)\n    include_filename: str = \"{0}.h\".format(mock_filename)\n    logger.debug(\"working directory: %s\", os.getcwd())\n    logger.debug(\"mock_filename: %s\", mock_filename)\n    logger.debug(\"include_filename: %s\", include_filename)\n    logger.debug(\"mock_prototype: %s\", mock_prototype)\n    if os.path.exists(mock_filename):\n        logger.debug(\"Mock file exists\")\n        mock_file: IO = open(mock_filename, \"a\")\n    else:\n        logger.debug(\"Creating mock file\")\n        mock_file = open(mock_filename, \"w\")\n        write_header(mock_file, FILE_HEADER, include_filename)\n    add_mock_function(mock_file, mock_prototype)\n    mock_file.close()\n", "rewrite": "ReplaceText(target='mocked_module' @(85,38)->(85,51))", "error_line": 3, "has_bug": true, "code_full": "import logging\nimport os\nfrom typing import IO\n\nlogger = logging.getLogger(__name__)\n\n\nFILE_HEADER: str = \"\"\n\n\ndef write_header(file: IO, header: str, include_filename: str):\n    pass\n\n\ndef add_mock_function(file: IO, mock_prototype: str):\n    pass\n\n\ndef generate_mock(mocked_module: str, mock_prototype: str):\n    ''' Generates the mock '''\n    mock_filename: str = \"{0}_mock.cpp\".format(mocked_module)\n    include_filename: str = \"{0}.h\".format(mock_filename)\n    logger.debug(\"working directory: %s\", os.getcwd())\n    logger.debug(\"mock_filename: %s\", mock_filename)\n    logger.debug(\"include_filename: %s\", include_filename)\n    logger.debug(\"mock_prototype: %s\", mock_prototype)\n    if os.path.exists(mock_filename):\n        logger.debug(\"Mock file exists\")\n        mock_file: IO = open(mock_filename, \"a\")\n    else:\n        logger.debug(\"Creating mock file\")\n        mock_file = open(mock_filename, \"w\")\n        write_header(mock_file, FILE_HEADER, include_filename)\n    add_mock_function(mock_file, mock_prototype)\n    mock_file.close()\n", "error_location_char": [196, 209], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def post(", "self", ",", "dataset", ")", ":", "#NEWLINE#", "#INDENT#", "'Create a new badge for a given dataset'", "#NEWLINE#", "form", "=", "api", ".", "validate", "(", "BadgeForm", ")", "#NEWLINE#", "badge", "=", "DatasetBadge", "(", "created", "=", "datetime", ".", "now", "(", ")", ",", "created_by", "=", "current_user", ".", "id", ")", "#NEWLINE#", "form", ".", "populate_obj", "(", "badge", ")", "#NEWLINE#", "for", "existing_badge", "in", "dataset", ".", "badges", ":", "#NEWLINE#", "#INDENT#", "if", "(", "existing_badge", ".", "kind", "==", "badge", ".", "kind", ")", ":", "#NEWLINE#", "#INDENT#", "return", "badge", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "dataset", ".", "add_badge", "(", "badge", ")", "#NEWLINE#", "return", "(", "badge", ",", "201", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [8, 9, 7, "enum_FIELD"], [10, 16, 7, "enum_FIELD"], [19, 31, 7, "enum_FIELD"], [38, 42, 7, "enum_FIELD"], [48, 47, 7, "enum_FIELD"], [48, 50, 7, "enum_FIELD"], [72, 76, 7, "enum_FIELD"], [80, 83, 7, "enum_FIELD"], [16, 14, 7, "enum_FIELD"], [31, 22, 7, "enum_FIELD"], [42, 40, 7, "enum_FIELD"], [50, 49, 7, "enum_FIELD"], [55, 60, 7, "enum_FIELD"], [76, 74, 7, "enum_FIELD"], [14, 13, 7, "enum_FIELD"], [24, 29, 7, "enum_FIELD"], [32, 35, 7, "enum_FIELD"], [40, 39, 7, "enum_FIELD"], [60, 58, 7, "enum_FIELD"], [68, 69, 7, "enum_FIELD"], [74, 73, 7, "enum_FIELD"], [29, 27, 7, "enum_FIELD"], [35, 34, 7, "enum_FIELD"], [58, 57, 7, "enum_FIELD"], [62, 61, 7, "enum_FIELD"], [27, 26, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [39, 11, 10, "enum_LAST_LEXICAL_USE"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [43, 20, 10, "enum_LAST_LEXICAL_USE"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [49, 4, 10, "enum_LAST_LEXICAL_USE"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [57, 47, 10, "enum_LAST_LEXICAL_USE"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [61, 43, 10, "enum_LAST_LEXICAL_USE"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 68, 9, "enum_NEXT_SYNTAX"], [69, 61, 10, "enum_LAST_LEXICAL_USE"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 72, 9, "enum_NEXT_SYNTAX"], [73, 49, 10, "enum_LAST_LEXICAL_USE"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [77, 69, 10, "enum_LAST_LEXICAL_USE"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [82, 77, 10, "enum_LAST_LEXICAL_USE"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [3, 8, 1, "enum_CFG_NEXT"], [8, 10, 1, "enum_CFG_NEXT"], [10, 19, 1, "enum_CFG_NEXT"], [19, 38, 1, "enum_CFG_NEXT"], [38, 50, 1, "enum_CFG_NEXT"], [50, 47, 1, "enum_CFG_NEXT"], [47, 72, 1, "enum_CFG_NEXT"], [47, 60, 1, "enum_CFG_NEXT"], [60, 68, 1, "enum_CFG_NEXT"], [60, 47, 1, "enum_CFG_NEXT"], [72, 80, 1, "enum_CFG_NEXT"], [39, 11, 3, "enum_LAST_WRITE"], [43, 20, 3, "enum_LAST_WRITE"], [49, 4, 3, "enum_LAST_WRITE"], [47, 57, 2, "enum_LAST_READ"], [47, 47, 3, "enum_LAST_WRITE"], [57, 57, 2, "enum_LAST_READ"], [57, 47, 3, "enum_LAST_WRITE"], [61, 61, 2, "enum_LAST_READ"], [61, 43, 2, "enum_LAST_READ"], [61, 20, 3, "enum_LAST_WRITE"], [69, 61, 2, "enum_LAST_READ"], [69, 20, 3, "enum_LAST_WRITE"], [73, 49, 2, "enum_LAST_READ"], [73, 4, 3, "enum_LAST_WRITE"], [77, 61, 2, "enum_LAST_READ"], [77, 43, 2, "enum_LAST_READ"], [77, 20, 3, "enum_LAST_WRITE"], [82, 77, 2, "enum_LAST_READ"], [82, 20, 3, "enum_LAST_WRITE"], [11, 17, 4, "enum_COMPUTED_FROM"], [11, 13, 4, "enum_COMPUTED_FROM"], [20, 22, 4, "enum_COMPUTED_FROM"], [20, 34, 4, "enum_COMPUTED_FROM"], [20, 26, 4, "enum_COMPUTED_FROM"]], "error_location": 69, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/mayjolux/udata.git", "old_path": "udata/core/dataset/api.py", "hash": "e70455456fabb68859a47a6ef916bc4adb2ccddb", "code": "def post(self, dataset: Dataset) -> Union[Tuple[DatasetBadge, int], DatasetBadge]:\n    '''Create a new badge for a given dataset'''\n    form: BadgeForm = api.validate(BadgeForm)\n    badge: DatasetBadge = DatasetBadge(created=datetime.now(),\n                         created_by=current_user.id)\n    form.populate_obj(badge)\n    for existing_badge in dataset.badges:\n        if existing_badge.kind == badge.kind:\n            return badge\n    dataset.add_badge(badge)\n    return badge, 201\n", "rewrite": "ReplaceText(target='existing_badge' @(151,23)->(151,28))", "error_line": 8, "has_bug": true, "code_full": "from datetime import datetime\nfrom typing import List, Tuple, Type, Union\n\n\nclass User:\n    id: int\n\n\ncurrent_user = User()\n\n\nclass BadgeForm:\n    def populate_obj(self, obj: 'DatasetBadge'):\n        pass\n\n\nclass DatasetBadge:\n    created: datetime\n    created_by: int\n    kind: str\n\n    def __init__(self, created: datetime, created_by: int):\n        pass\n\n\nclass Dataset:\n    badges: List[DatasetBadge]\n\n    def add_badge(self, badge: DatasetBadge):\n        pass\n\n\nclass API:\n    def validate(self, form: Type[BadgeForm]) -> BadgeForm:\n        return BadgeForm()\n\n\napi = API()\n\n\ndef post(self, dataset: Dataset) -> Union[Tuple[DatasetBadge, int], DatasetBadge]:\n    '''Create a new badge for a given dataset'''\n    form: BadgeForm = api.validate(BadgeForm)\n    badge: DatasetBadge = DatasetBadge(created=datetime.now(),\n                         created_by=current_user.id)\n    form.populate_obj(badge)\n    for existing_badge in dataset.badges:\n        if existing_badge.kind == badge.kind:\n            return badge\n    dataset.add_badge(badge)\n    return badge, 201\n", "error_location_char": [430, 435], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def get_image(", "self", ",", "size", ",", "latitude_interval", ",", "longitude_interval", ",", "max_elevation", ",", "min_elevation", "=", "0", ",", "unknown_color", "=", "(", "255", ",", "255", ",", "255", ",", "255", ")", ",", "zero_color", "=", "(", "0", ",", "0", ",", "255", ",", "255", ")", ",", "min_color", "=", "(", "0", ",", "0", ",", "0", ",", "255", ")", ",", "max_color", "=", "(", "0", ",", "255", ",", "0", ",", "255", ")", ",", "mode", "=", "'image'", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Returns a numpy array or PIL image.\\n    '", "#NEWLINE#", "if", "(", "(", "not", "size", ")", "or", "(", "len", "(", "size", ")", "!=", "2", ")", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "Exception", "(", "(", "'Invalid size %s'", "%", "size", ")", ")", "#NEWLINE#", "#UNINDENT#", "if", "(", "(", "not", "latitude_interval", ")", "or", "(", "len", "(", "latitude_interval", ")", "!=", "2", ")", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "Exception", "(", "(", "'Invalid latitude interval %s'", "%", "latitude_interval", ")", ")", "#NEWLINE#", "#UNINDENT#", "if", "(", "(", "not", "longitude_interval", ")", "or", "(", "len", "(", "longitude_interval", ")", "!=", "2", ")", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "Exception", "(", "(", "'Invalid longitude interval %s'", "%", "longitude_interval", ")", ")", "#NEWLINE#", "#UNINDENT#", "(", "width", ",", "height", ")", "=", "size", "#NEWLINE#", "(", "width", ",", "height", ")", "=", "(", "int", "(", "width", ")", ",", "int", "(", "height", ")", ")", "#NEWLINE#", "(", "latitude_from", ",", "latitude_to", ")", "=", "latitude_interval", "#NEWLINE#", "(", "longitude_from", ",", "longitude_to", ")", "=", "longitude_interval", "#NEWLINE#", "if", "(", "mode", "==", "'array'", ")", ":", "#NEWLINE#", "#INDENT#", "import", "numpy", "as np", "#NEWLINE#", "array", "=", "np", ".", "empty", "(", "(", "height", ",", "width", ")", ")", "#NEWLINE#", "for", "row", "in", "range", "(", "height", ")", ":", "#NEWLINE#", "#INDENT#", "for", "column", "in", "range", "(", "width", ")", ":", "#NEWLINE#", "#INDENT#", "latitude", "=", "(", "latitude_from", "+", "(", "(", "float", "(", "row", ")", "/", "height", ")", "*", "(", "latitude_to", "-", "latitude_from", ")", ")", ")", "#NEWLINE#", "longitude", "=", "(", "longitude_from", "+", "(", "(", "float", "(", "column", ")", "/", "height", ")", "*", "(", "longitude_to", "-", "longitude_from", ")", ")", ")", "#NEWLINE#", "elevation", "=", "self", ".", "get_elevation", "(", "latitude", ",", "longitude", ")", "#NEWLINE#", "array", "[", "(", "row", ",", "column", ")", "]", "=", "elevation", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "return", "array", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "mode", "==", "'image'", ")", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "import", "Image", "as mod_image", "#NEWLINE#", "#UNINDENT#", "except", ":", "#NEWLINE#", "#INDENT#", "from", "PIL", "import", "Image", "as mod_image", "#NEWLINE#", "#UNINDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "import", "ImageDraw", "as mod_imagedraw", "#NEWLINE#", "#UNINDENT#", "except", ":", "#NEWLINE#", "#INDENT#", "from", "PIL", "import", "ImageDraw", "as mod_imagedraw", "#NEWLINE#", "#UNINDENT#", "image", "=", "mod_image", ".", "new", "(", "'RGBA'", ",", "(", "width", ",", "height", ")", ",", "(", "255", ",", "255", ",", "255", ",", "255", ")", ")", "#NEWLINE#", "draw", "=", "mod_imagedraw", ".", "Draw", "(", "image", ")", "#NEWLINE#", "max_elevation", "-=", "min_elevation", "#NEWLINE#", "for", "row", "in", "range", "(", "height", ")", ":", "#NEWLINE#", "#INDENT#", "for", "column", "in", "range", "(", "width", ")", ":", "#NEWLINE#", "#INDENT#", "latitude", "=", "(", "latitude_from", "+", "(", "(", "float", "(", "row", ")", "/", "height", ")", "*", "(", "latitude_to", "-", "latitude_from", ")", ")", ")", "#NEWLINE#", "longitude", "=", "(", "longitude_from", "+", "(", "(", "float", "(", "column", ")", "/", "height", ")", "*", "(", "longitude_to", "-", "longitude_from", ")", ")", ")", "#NEWLINE#", "elevation", "=", "self", ".", "get_elevation", "(", "latitude", ",", "longitude", ")", "#NEWLINE#", "if", "(", "elevation", "==", "None", ")", ":", "#NEWLINE#", "#INDENT#", "color", "=", "unknown_color", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "elevation_coef", "=", "(", "(", "elevation", "-", "min_elevation", ")", "/", "float", "(", "max_elevation", ")", ")", "#NEWLINE#", "if", "(", "elevation_coef", "<", "0", ")", ":", "#NEWLINE#", "#INDENT#", "elevation_coef", "=", "0", "#NEWLINE#", "#UNINDENT#", "if", "(", "elevation_coef", ">", "1", ")", ":", "#NEWLINE#", "#INDENT#", "elevation_coef", "=", "1", "#NEWLINE#", "#UNINDENT#", "color", "=", "mod_utils", ".", "get_color_between", "(", "min_color", ",", "max_color", ",", "elevation_coef", ")", "#NEWLINE#", "if", "(", "elevation", "<=", "0", ")", ":", "#NEWLINE#", "#INDENT#", "color", "=", "zero_color", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "draw", ".", "point", "(", "(", "column", ",", "(", "height", "-", "row", ")", ")", ",", "color", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "return", "image", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "raise", "Exception", "(", "(", "'Invalid mode '", "+", "mode", ")", ")"], "edges": [[1, 17, 7, "enum_FIELD"], [70, 71, 7, "enum_FIELD"], [73, 79, 7, "enum_FIELD"], [103, 109, 7, "enum_FIELD"], [133, 139, 7, "enum_FIELD"], [162, 169, 7, "enum_FIELD"], [170, 182, 7, "enum_FIELD"], [188, 195, 7, "enum_FIELD"], [196, 203, 7, "enum_FIELD"], [211, 208, 7, "enum_FIELD"], [92, 94, 7, "enum_FIELD"], [122, 124, 7, "enum_FIELD"], [152, 154, 7, "enum_FIELD"], [208, 207, 7, "enum_FIELD"], [217, 223, 7, "enum_FIELD"], [233, 232, 7, "enum_FIELD"], [233, 235, 7, "enum_FIELD"], [321, 322, 7, "enum_FIELD"], [335, 332, 7, "enum_FIELD"], [76, 77, 7, "enum_FIELD"], [85, 82, 7, "enum_FIELD"], [94, 93, 7, "enum_FIELD"], [106, 107, 7, "enum_FIELD"], [115, 112, 7, "enum_FIELD"], [124, 123, 7, "enum_FIELD"], [136, 137, 7, "enum_FIELD"], [145, 142, 7, "enum_FIELD"], [154, 153, 7, "enum_FIELD"], [179, 178, 7, "enum_FIELD"], [184, 183, 7, "enum_FIELD"], [223, 221, 7, "enum_FIELD"], [235, 234, 7, "enum_FIELD"], [243, 242, 7, "enum_FIELD"], [243, 245, 7, "enum_FIELD"], [332, 331, 7, "enum_FIELD"], [377, 385, 7, "enum_FIELD"], [402, 408, 7, "enum_FIELD"], [411, 412, 7, "enum_FIELD"], [411, 414, 7, "enum_FIELD"], [418, 417, 7, "enum_FIELD"], [418, 420, 7, "enum_FIELD"], [601, 602, 7, "enum_FIELD"], [609, 611, 7, "enum_FIELD"], [82, 81, 7, "enum_FIELD"], [97, 96, 7, "enum_FIELD"], [97, 98, 7, "enum_FIELD"], [112, 111, 7, "enum_FIELD"], [127, 126, 7, "enum_FIELD"], [127, 128, 7, "enum_FIELD"], [142, 141, 7, "enum_FIELD"], [157, 156, 7, "enum_FIELD"], [157, 158, 7, "enum_FIELD"], [221, 220, 7, "enum_FIELD"], [245, 244, 7, "enum_FIELD"], [250, 255, 7, "enum_FIELD"], [273, 278, 7, "enum_FIELD"], [296, 304, 7, "enum_FIELD"], [307, 317, 7, "enum_FIELD"], [385, 381, 7, "enum_FIELD"], [408, 406, 7, "enum_FIELD"], [420, 419, 7, "enum_FIELD"], [428, 427, 7, "enum_FIELD"], [428, 430, 7, "enum_FIELD"], [611, 610, 7, "enum_FIELD"], [255, 254, 7, "enum_FIELD"], [255, 265, 7, "enum_FIELD"], [278, 277, 7, "enum_FIELD"], [278, 288, 7, "enum_FIELD"], [304, 300, 7, "enum_FIELD"], [309, 308, 7, "enum_FIELD"], [309, 312, 7, "enum_FIELD"], [381, 380, 7, "enum_FIELD"], [406, 405, 7, "enum_FIELD"], [430, 429, 7, "enum_FIELD"], [435, 440, 7, "enum_FIELD"], [458, 463, 7, "enum_FIELD"], [481, 489, 7, "enum_FIELD"], [499, 496, 7, "enum_FIELD"], [581, 595, 7, "enum_FIELD"], [614, 613, 7, "enum_FIELD"], [614, 615, 7, "enum_FIELD"], [265, 262, 7, "enum_FIELD"], [265, 268, 7, "enum_FIELD"], [288, 285, 7, "enum_FIELD"], [288, 291, 7, "enum_FIELD"], [300, 299, 7, "enum_FIELD"], [440, 439, 7, "enum_FIELD"], [440, 450, 7, "enum_FIELD"], [463, 462, 7, "enum_FIELD"], [463, 473, 7, "enum_FIELD"], [489, 485, 7, "enum_FIELD"], [496, 495, 7, "enum_FIELD"], [501, 504, 7, "enum_FIELD"], [510, 519, 7, "enum_FIELD"], [526, 529, 7, "enum_FIELD"], [540, 543, 7, "enum_FIELD"], [553, 561, 7, "enum_FIELD"], [567, 570, 7, "enum_FIELD"], [595, 583, 7, "enum_FIELD"], [262, 259, 7, "enum_FIELD"], [262, 263, 7, "enum_FIELD"], [268, 267, 7, "enum_FIELD"], [268, 269, 7, "enum_FIELD"], [285, 282, 7, "enum_FIELD"], [285, 286, 7, "enum_FIELD"], [291, 290, 7, "enum_FIELD"], [291, 292, 7, "enum_FIELD"], [450, 447, 7, "enum_FIELD"], [450, 453, 7, "enum_FIELD"], [473, 470, 7, "enum_FIELD"], [473, 476, 7, "enum_FIELD"], [485, 484, 7, "enum_FIELD"], [519, 516, 7, "enum_FIELD"], [519, 521, 7, "enum_FIELD"], [529, 528, 7, "enum_FIELD"], [534, 537, 7, "enum_FIELD"], [543, 542, 7, "enum_FIELD"], [548, 551, 7, "enum_FIELD"], [561, 557, 7, "enum_FIELD"], [570, 569, 7, "enum_FIELD"], [575, 578, 7, "enum_FIELD"], [583, 582, 7, "enum_FIELD"], [259, 258, 7, "enum_FIELD"], [282, 281, 7, "enum_FIELD"], [447, 444, 7, "enum_FIELD"], [447, 448, 7, "enum_FIELD"], [453, 452, 7, "enum_FIELD"], [453, 454, 7, "enum_FIELD"], [470, 467, 7, "enum_FIELD"], [470, 471, 7, "enum_FIELD"], [476, 475, 7, "enum_FIELD"], [476, 477, 7, "enum_FIELD"], [516, 515, 7, "enum_FIELD"], [516, 517, 7, "enum_FIELD"], [521, 520, 7, "enum_FIELD"], [557, 556, 7, "enum_FIELD"], [591, 590, 7, "enum_FIELD"], [591, 592, 7, "enum_FIELD"], [444, 443, 7, "enum_FIELD"], [467, 466, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [77, 4, 10, "enum_LAST_LEXICAL_USE"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [83, 77, 10, "enum_LAST_LEXICAL_USE"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [98, 83, 10, "enum_LAST_LEXICAL_USE"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [107, 6, 10, "enum_LAST_LEXICAL_USE"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [111, 81, 10, "enum_LAST_LEXICAL_USE"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [113, 107, 10, "enum_LAST_LEXICAL_USE"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 122, 9, "enum_NEXT_SYNTAX"], [123, 93, 10, "enum_LAST_LEXICAL_USE"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [128, 113, 10, "enum_LAST_LEXICAL_USE"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [137, 8, 10, "enum_LAST_LEXICAL_USE"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [141, 111, 10, "enum_LAST_LEXICAL_USE"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [143, 137, 10, "enum_LAST_LEXICAL_USE"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 152, 9, "enum_NEXT_SYNTAX"], [153, 123, 10, "enum_LAST_LEXICAL_USE"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [158, 143, 10, "enum_LAST_LEXICAL_USE"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [169, 98, 10, "enum_LAST_LEXICAL_USE"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [172, 164, 10, "enum_LAST_LEXICAL_USE"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [174, 166, 10, "enum_LAST_LEXICAL_USE"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [180, 172, 10, "enum_LAST_LEXICAL_USE"], [179, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [183, 178, 10, "enum_LAST_LEXICAL_USE"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 184, 9, "enum_NEXT_SYNTAX"], [185, 174, 10, "enum_LAST_LEXICAL_USE"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [187, 188, 9, "enum_NEXT_SYNTAX"], [188, 189, 9, "enum_NEXT_SYNTAX"], [189, 190, 9, "enum_NEXT_SYNTAX"], [190, 191, 9, "enum_NEXT_SYNTAX"], [191, 192, 9, "enum_NEXT_SYNTAX"], [192, 193, 9, "enum_NEXT_SYNTAX"], [193, 194, 9, "enum_NEXT_SYNTAX"], [195, 128, 10, "enum_LAST_LEXICAL_USE"], [194, 195, 9, "enum_NEXT_SYNTAX"], [195, 196, 9, "enum_NEXT_SYNTAX"], [196, 197, 9, "enum_NEXT_SYNTAX"], [197, 198, 9, "enum_NEXT_SYNTAX"], [198, 199, 9, "enum_NEXT_SYNTAX"], [199, 200, 9, "enum_NEXT_SYNTAX"], [200, 201, 9, "enum_NEXT_SYNTAX"], [201, 202, 9, "enum_NEXT_SYNTAX"], [203, 158, 10, "enum_LAST_LEXICAL_USE"], [202, 203, 9, "enum_NEXT_SYNTAX"], [203, 205, 9, "enum_NEXT_SYNTAX"], [205, 206, 9, "enum_NEXT_SYNTAX"], [207, 64, 10, "enum_LAST_LEXICAL_USE"], [206, 207, 9, "enum_NEXT_SYNTAX"], [207, 208, 9, "enum_NEXT_SYNTAX"], [208, 209, 9, "enum_NEXT_SYNTAX"], [209, 210, 9, "enum_NEXT_SYNTAX"], [210, 211, 9, "enum_NEXT_SYNTAX"], [211, 214, 9, "enum_NEXT_SYNTAX"], [214, 215, 9, "enum_NEXT_SYNTAX"], [215, 216, 9, "enum_NEXT_SYNTAX"], [216, 217, 9, "enum_NEXT_SYNTAX"], [217, 218, 9, "enum_NEXT_SYNTAX"], [218, 219, 9, "enum_NEXT_SYNTAX"], [219, 220, 9, "enum_NEXT_SYNTAX"], [220, 221, 9, "enum_NEXT_SYNTAX"], [221, 222, 9, "enum_NEXT_SYNTAX"], [222, 223, 9, "enum_NEXT_SYNTAX"], [223, 224, 9, "enum_NEXT_SYNTAX"], [225, 185, 10, "enum_LAST_LEXICAL_USE"], [224, 225, 9, "enum_NEXT_SYNTAX"], [225, 226, 9, "enum_NEXT_SYNTAX"], [227, 180, 10, "enum_LAST_LEXICAL_USE"], [226, 227, 9, "enum_NEXT_SYNTAX"], [227, 228, 9, "enum_NEXT_SYNTAX"], [228, 229, 9, "enum_NEXT_SYNTAX"], [229, 231, 9, "enum_NEXT_SYNTAX"], [231, 232, 9, "enum_NEXT_SYNTAX"], [232, 233, 9, "enum_NEXT_SYNTAX"], [233, 234, 9, "enum_NEXT_SYNTAX"], [234, 235, 9, "enum_NEXT_SYNTAX"], [236, 225, 10, "enum_LAST_LEXICAL_USE"], [235, 236, 9, "enum_NEXT_SYNTAX"], [236, 237, 9, "enum_NEXT_SYNTAX"], [237, 238, 9, "enum_NEXT_SYNTAX"], [238, 241, 9, "enum_NEXT_SYNTAX"], [241, 242, 9, "enum_NEXT_SYNTAX"], [242, 243, 9, "enum_NEXT_SYNTAX"], [244, 234, 10, "enum_LAST_LEXICAL_USE"], [243, 244, 9, "enum_NEXT_SYNTAX"], [244, 245, 9, "enum_NEXT_SYNTAX"], [246, 227, 10, "enum_LAST_LEXICAL_USE"], [245, 246, 9, "enum_NEXT_SYNTAX"], [246, 247, 9, "enum_NEXT_SYNTAX"], [247, 248, 9, "enum_NEXT_SYNTAX"], [248, 250, 9, "enum_NEXT_SYNTAX"], [250, 251, 9, "enum_NEXT_SYNTAX"], [251, 252, 9, "enum_NEXT_SYNTAX"], [252, 253, 9, "enum_NEXT_SYNTAX"], [254, 190, 10, "enum_LAST_LEXICAL_USE"], [253, 254, 9, "enum_NEXT_SYNTAX"], [254, 255, 9, "enum_NEXT_SYNTAX"], [255, 256, 9, "enum_NEXT_SYNTAX"], [256, 257, 9, "enum_NEXT_SYNTAX"], [257, 258, 9, "enum_NEXT_SYNTAX"], [258, 259, 9, "enum_NEXT_SYNTAX"], [260, 232, 10, "enum_LAST_LEXICAL_USE"], [259, 260, 9, "enum_NEXT_SYNTAX"], [260, 261, 9, "enum_NEXT_SYNTAX"], [261, 262, 9, "enum_NEXT_SYNTAX"], [263, 236, 10, "enum_LAST_LEXICAL_USE"], [262, 263, 9, "enum_NEXT_SYNTAX"], [263, 264, 9, "enum_NEXT_SYNTAX"], [264, 265, 9, "enum_NEXT_SYNTAX"], [265, 266, 9, "enum_NEXT_SYNTAX"], [267, 192, 10, "enum_LAST_LEXICAL_USE"], [266, 267, 9, "enum_NEXT_SYNTAX"], [267, 268, 9, "enum_NEXT_SYNTAX"], [269, 254, 10, "enum_LAST_LEXICAL_USE"], [268, 269, 9, "enum_NEXT_SYNTAX"], [269, 270, 9, "enum_NEXT_SYNTAX"], [270, 271, 9, "enum_NEXT_SYNTAX"], [271, 272, 9, "enum_NEXT_SYNTAX"], [272, 273, 9, "enum_NEXT_SYNTAX"], [273, 274, 9, "enum_NEXT_SYNTAX"], [274, 275, 9, "enum_NEXT_SYNTAX"], [275, 276, 9, "enum_NEXT_SYNTAX"], [277, 198, 10, "enum_LAST_LEXICAL_USE"], [276, 277, 9, "enum_NEXT_SYNTAX"], [277, 278, 9, "enum_NEXT_SYNTAX"], [278, 279, 9, "enum_NEXT_SYNTAX"], [279, 280, 9, "enum_NEXT_SYNTAX"], [281, 258, 10, "enum_LAST_LEXICAL_USE"], [280, 281, 9, "enum_NEXT_SYNTAX"], [281, 282, 9, "enum_NEXT_SYNTAX"], [283, 242, 10, "enum_LAST_LEXICAL_USE"], [282, 283, 9, "enum_NEXT_SYNTAX"], [283, 284, 9, "enum_NEXT_SYNTAX"], [284, 285, 9, "enum_NEXT_SYNTAX"], [286, 263, 10, "enum_LAST_LEXICAL_USE"], [285, 286, 9, "enum_NEXT_SYNTAX"], [286, 287, 9, "enum_NEXT_SYNTAX"], [287, 288, 9, "enum_NEXT_SYNTAX"], [288, 289, 9, "enum_NEXT_SYNTAX"], [290, 200, 10, "enum_LAST_LEXICAL_USE"], [289, 290, 9, "enum_NEXT_SYNTAX"], [290, 291, 9, "enum_NEXT_SYNTAX"], [292, 277, 10, "enum_LAST_LEXICAL_USE"], [291, 292, 9, "enum_NEXT_SYNTAX"], [292, 293, 9, "enum_NEXT_SYNTAX"], [293, 294, 9, "enum_NEXT_SYNTAX"], [294, 295, 9, "enum_NEXT_SYNTAX"], [295, 296, 9, "enum_NEXT_SYNTAX"], [296, 297, 9, "enum_NEXT_SYNTAX"], [297, 298, 9, "enum_NEXT_SYNTAX"], [299, 2, 10, "enum_LAST_LEXICAL_USE"], [298, 299, 9, "enum_NEXT_SYNTAX"], [299, 300, 9, "enum_NEXT_SYNTAX"], [300, 301, 9, "enum_NEXT_SYNTAX"], [301, 302, 9, "enum_NEXT_SYNTAX"], [303, 251, 10, "enum_LAST_LEXICAL_USE"], [302, 303, 9, "enum_NEXT_SYNTAX"], [303, 304, 9, "enum_NEXT_SYNTAX"], [305, 274, 10, "enum_LAST_LEXICAL_USE"], [304, 305, 9, "enum_NEXT_SYNTAX"], [305, 306, 9, "enum_NEXT_SYNTAX"], [306, 307, 9, "enum_NEXT_SYNTAX"], [308, 218, 10, "enum_LAST_LEXICAL_USE"], [307, 308, 9, "enum_NEXT_SYNTAX"], [308, 309, 9, "enum_NEXT_SYNTAX"], [309, 310, 9, "enum_NEXT_SYNTAX"], [311, 260, 10, "enum_LAST_LEXICAL_USE"], [310, 311, 9, "enum_NEXT_SYNTAX"], [311, 312, 9, "enum_NEXT_SYNTAX"], [313, 283, 10, "enum_LAST_LEXICAL_USE"], [312, 313, 9, "enum_NEXT_SYNTAX"], [313, 314, 9, "enum_NEXT_SYNTAX"], [314, 315, 9, "enum_NEXT_SYNTAX"], [315, 316, 9, "enum_NEXT_SYNTAX"], [317, 297, 10, "enum_LAST_LEXICAL_USE"], [316, 317, 9, "enum_NEXT_SYNTAX"], [317, 321, 9, "enum_NEXT_SYNTAX"], [322, 308, 10, "enum_LAST_LEXICAL_USE"], [321, 322, 9, "enum_NEXT_SYNTAX"], [322, 325, 9, "enum_NEXT_SYNTAX"], [325, 326, 9, "enum_NEXT_SYNTAX"], [326, 329, 9, "enum_NEXT_SYNTAX"], [329, 330, 9, "enum_NEXT_SYNTAX"], [331, 207, 10, "enum_LAST_LEXICAL_USE"], [330, 331, 9, "enum_NEXT_SYNTAX"], [331, 332, 9, "enum_NEXT_SYNTAX"], [332, 333, 9, "enum_NEXT_SYNTAX"], [333, 334, 9, "enum_NEXT_SYNTAX"], [334, 335, 9, "enum_NEXT_SYNTAX"], [335, 338, 9, "enum_NEXT_SYNTAX"], [338, 339, 9, "enum_NEXT_SYNTAX"], [339, 342, 9, "enum_NEXT_SYNTAX"], [342, 343, 9, "enum_NEXT_SYNTAX"], [343, 344, 9, "enum_NEXT_SYNTAX"], [344, 347, 9, "enum_NEXT_SYNTAX"], [347, 348, 9, "enum_NEXT_SYNTAX"], [348, 351, 9, "enum_NEXT_SYNTAX"], [351, 352, 9, "enum_NEXT_SYNTAX"], [352, 353, 9, "enum_NEXT_SYNTAX"], [353, 354, 9, "enum_NEXT_SYNTAX"], [354, 355, 9, "enum_NEXT_SYNTAX"], [355, 358, 9, "enum_NEXT_SYNTAX"], [358, 359, 9, "enum_NEXT_SYNTAX"], [359, 362, 9, "enum_NEXT_SYNTAX"], [362, 363, 9, "enum_NEXT_SYNTAX"], [363, 364, 9, "enum_NEXT_SYNTAX"], [364, 367, 9, "enum_NEXT_SYNTAX"], [367, 368, 9, "enum_NEXT_SYNTAX"], [368, 371, 9, "enum_NEXT_SYNTAX"], [371, 372, 9, "enum_NEXT_SYNTAX"], [372, 373, 9, "enum_NEXT_SYNTAX"], [373, 374, 9, "enum_NEXT_SYNTAX"], [374, 375, 9, "enum_NEXT_SYNTAX"], [375, 377, 9, "enum_NEXT_SYNTAX"], [377, 378, 9, "enum_NEXT_SYNTAX"], [378, 379, 9, "enum_NEXT_SYNTAX"], [379, 380, 9, "enum_NEXT_SYNTAX"], [380, 381, 9, "enum_NEXT_SYNTAX"], [381, 382, 9, "enum_NEXT_SYNTAX"], [382, 383, 9, "enum_NEXT_SYNTAX"], [383, 384, 9, "enum_NEXT_SYNTAX"], [384, 385, 9, "enum_NEXT_SYNTAX"], [385, 386, 9, "enum_NEXT_SYNTAX"], [387, 246, 10, "enum_LAST_LEXICAL_USE"], [386, 387, 9, "enum_NEXT_SYNTAX"], [387, 388, 9, "enum_NEXT_SYNTAX"], [389, 286, 10, "enum_LAST_LEXICAL_USE"], [388, 389, 9, "enum_NEXT_SYNTAX"], [389, 390, 9, "enum_NEXT_SYNTAX"], [390, 391, 9, "enum_NEXT_SYNTAX"], [391, 392, 9, "enum_NEXT_SYNTAX"], [392, 393, 9, "enum_NEXT_SYNTAX"], [393, 394, 9, "enum_NEXT_SYNTAX"], [394, 395, 9, "enum_NEXT_SYNTAX"], [395, 396, 9, "enum_NEXT_SYNTAX"], [396, 397, 9, "enum_NEXT_SYNTAX"], [397, 398, 9, "enum_NEXT_SYNTAX"], [398, 399, 9, "enum_NEXT_SYNTAX"], [399, 400, 9, "enum_NEXT_SYNTAX"], [400, 401, 9, "enum_NEXT_SYNTAX"], [401, 402, 9, "enum_NEXT_SYNTAX"], [402, 403, 9, "enum_NEXT_SYNTAX"], [403, 404, 9, "enum_NEXT_SYNTAX"], [404, 405, 9, "enum_NEXT_SYNTAX"], [405, 406, 9, "enum_NEXT_SYNTAX"], [406, 407, 9, "enum_NEXT_SYNTAX"], [407, 408, 9, "enum_NEXT_SYNTAX"], [409, 378, 10, "enum_LAST_LEXICAL_USE"], [408, 409, 9, "enum_NEXT_SYNTAX"], [409, 410, 9, "enum_NEXT_SYNTAX"], [410, 411, 9, "enum_NEXT_SYNTAX"], [412, 10, 10, "enum_LAST_LEXICAL_USE"], [411, 412, 9, "enum_NEXT_SYNTAX"], [412, 413, 9, "enum_NEXT_SYNTAX"], [414, 12, 10, "enum_LAST_LEXICAL_USE"], [413, 414, 9, "enum_NEXT_SYNTAX"], [414, 416, 9, "enum_NEXT_SYNTAX"], [417, 311, 10, "enum_LAST_LEXICAL_USE"], [416, 417, 9, "enum_NEXT_SYNTAX"], [417, 418, 9, "enum_NEXT_SYNTAX"], [419, 244, 10, "enum_LAST_LEXICAL_USE"], [418, 419, 9, "enum_NEXT_SYNTAX"], [419, 420, 9, "enum_NEXT_SYNTAX"], [421, 389, 10, "enum_LAST_LEXICAL_USE"], [420, 421, 9, "enum_NEXT_SYNTAX"], [421, 422, 9, "enum_NEXT_SYNTAX"], [422, 423, 9, "enum_NEXT_SYNTAX"], [423, 426, 9, "enum_NEXT_SYNTAX"], [427, 313, 10, "enum_LAST_LEXICAL_USE"], [426, 427, 9, "enum_NEXT_SYNTAX"], [427, 428, 9, "enum_NEXT_SYNTAX"], [429, 419, 10, "enum_LAST_LEXICAL_USE"], [428, 429, 9, "enum_NEXT_SYNTAX"], [429, 430, 9, "enum_NEXT_SYNTAX"], [431, 387, 10, "enum_LAST_LEXICAL_USE"], [430, 431, 9, "enum_NEXT_SYNTAX"], [431, 432, 9, "enum_NEXT_SYNTAX"], [432, 433, 9, "enum_NEXT_SYNTAX"], [433, 435, 9, "enum_NEXT_SYNTAX"], [436, 303, 10, "enum_LAST_LEXICAL_USE"], [435, 436, 9, "enum_NEXT_SYNTAX"], [436, 437, 9, "enum_NEXT_SYNTAX"], [437, 438, 9, "enum_NEXT_SYNTAX"], [439, 269, 10, "enum_LAST_LEXICAL_USE"], [438, 439, 9, "enum_NEXT_SYNTAX"], [439, 440, 9, "enum_NEXT_SYNTAX"], [440, 441, 9, "enum_NEXT_SYNTAX"], [441, 442, 9, "enum_NEXT_SYNTAX"], [443, 281, 10, "enum_LAST_LEXICAL_USE"], [442, 443, 9, "enum_NEXT_SYNTAX"], [443, 444, 9, "enum_NEXT_SYNTAX"], [445, 417, 10, "enum_LAST_LEXICAL_USE"], [444, 445, 9, "enum_NEXT_SYNTAX"], [445, 446, 9, "enum_NEXT_SYNTAX"], [446, 447, 9, "enum_NEXT_SYNTAX"], [448, 421, 10, "enum_LAST_LEXICAL_USE"], [447, 448, 9, "enum_NEXT_SYNTAX"], [448, 449, 9, "enum_NEXT_SYNTAX"], [449, 450, 9, "enum_NEXT_SYNTAX"], [450, 451, 9, "enum_NEXT_SYNTAX"], [452, 267, 10, "enum_LAST_LEXICAL_USE"], [451, 452, 9, "enum_NEXT_SYNTAX"], [452, 453, 9, "enum_NEXT_SYNTAX"], [454, 439, 10, "enum_LAST_LEXICAL_USE"], [453, 454, 9, "enum_NEXT_SYNTAX"], [454, 455, 9, "enum_NEXT_SYNTAX"], [455, 456, 9, "enum_NEXT_SYNTAX"], [456, 457, 9, "enum_NEXT_SYNTAX"], [457, 458, 9, "enum_NEXT_SYNTAX"], [459, 305, 10, "enum_LAST_LEXICAL_USE"], [458, 459, 9, "enum_NEXT_SYNTAX"], [459, 460, 9, "enum_NEXT_SYNTAX"], [460, 461, 9, "enum_NEXT_SYNTAX"], [462, 292, 10, "enum_LAST_LEXICAL_USE"], [461, 462, 9, "enum_NEXT_SYNTAX"], [462, 463, 9, "enum_NEXT_SYNTAX"], [463, 464, 9, "enum_NEXT_SYNTAX"], [464, 465, 9, "enum_NEXT_SYNTAX"], [466, 443, 10, "enum_LAST_LEXICAL_USE"], [465, 466, 9, "enum_NEXT_SYNTAX"], [466, 467, 9, "enum_NEXT_SYNTAX"], [468, 427, 10, "enum_LAST_LEXICAL_USE"], [467, 468, 9, "enum_NEXT_SYNTAX"], [468, 469, 9, "enum_NEXT_SYNTAX"], [469, 470, 9, "enum_NEXT_SYNTAX"], [471, 448, 10, "enum_LAST_LEXICAL_USE"], [470, 471, 9, "enum_NEXT_SYNTAX"], [471, 472, 9, "enum_NEXT_SYNTAX"], [472, 473, 9, "enum_NEXT_SYNTAX"], [473, 474, 9, "enum_NEXT_SYNTAX"], [475, 290, 10, "enum_LAST_LEXICAL_USE"], [474, 475, 9, "enum_NEXT_SYNTAX"], [475, 476, 9, "enum_NEXT_SYNTAX"], [477, 462, 10, "enum_LAST_LEXICAL_USE"], [476, 477, 9, "enum_NEXT_SYNTAX"], [477, 478, 9, "enum_NEXT_SYNTAX"], [478, 479, 9, "enum_NEXT_SYNTAX"], [479, 480, 9, "enum_NEXT_SYNTAX"], [480, 481, 9, "enum_NEXT_SYNTAX"], [482, 317, 10, "enum_LAST_LEXICAL_USE"], [481, 482, 9, "enum_NEXT_SYNTAX"], [482, 483, 9, "enum_NEXT_SYNTAX"], [484, 299, 10, "enum_LAST_LEXICAL_USE"], [483, 484, 9, "enum_NEXT_SYNTAX"], [484, 485, 9, "enum_NEXT_SYNTAX"], [485, 486, 9, "enum_NEXT_SYNTAX"], [486, 487, 9, "enum_NEXT_SYNTAX"], [488, 436, 10, "enum_LAST_LEXICAL_USE"], [487, 488, 9, "enum_NEXT_SYNTAX"], [488, 489, 9, "enum_NEXT_SYNTAX"], [490, 459, 10, "enum_LAST_LEXICAL_USE"], [489, 490, 9, "enum_NEXT_SYNTAX"], [490, 491, 9, "enum_NEXT_SYNTAX"], [491, 493, 9, "enum_NEXT_SYNTAX"], [493, 494, 9, "enum_NEXT_SYNTAX"], [495, 482, 10, "enum_LAST_LEXICAL_USE"], [494, 495, 9, "enum_NEXT_SYNTAX"], [495, 496, 9, "enum_NEXT_SYNTAX"], [496, 497, 9, "enum_NEXT_SYNTAX"], [497, 498, 9, "enum_NEXT_SYNTAX"], [498, 499, 9, "enum_NEXT_SYNTAX"], [499, 501, 9, "enum_NEXT_SYNTAX"], [501, 502, 9, "enum_NEXT_SYNTAX"], [502, 503, 9, "enum_NEXT_SYNTAX"], [504, 16, 10, "enum_LAST_LEXICAL_USE"], [503, 504, 9, "enum_NEXT_SYNTAX"], [504, 507, 9, "enum_NEXT_SYNTAX"], [507, 508, 9, "enum_NEXT_SYNTAX"], [508, 510, 9, "enum_NEXT_SYNTAX"], [510, 511, 9, "enum_NEXT_SYNTAX"], [511, 512, 9, "enum_NEXT_SYNTAX"], [512, 513, 9, "enum_NEXT_SYNTAX"], [513, 514, 9, "enum_NEXT_SYNTAX"], [515, 495, 10, "enum_LAST_LEXICAL_USE"], [514, 515, 9, "enum_NEXT_SYNTAX"], [515, 516, 9, "enum_NEXT_SYNTAX"], [517, 414, 10, "enum_LAST_LEXICAL_USE"], [516, 517, 9, "enum_NEXT_SYNTAX"], [517, 518, 9, "enum_NEXT_SYNTAX"], [518, 519, 9, "enum_NEXT_SYNTAX"], [520, 466, 10, "enum_LAST_LEXICAL_USE"], [519, 520, 9, "enum_NEXT_SYNTAX"], [520, 521, 9, "enum_NEXT_SYNTAX"], [522, 412, 10, "enum_LAST_LEXICAL_USE"], [521, 522, 9, "enum_NEXT_SYNTAX"], [522, 523, 9, "enum_NEXT_SYNTAX"], [523, 524, 9, "enum_NEXT_SYNTAX"], [524, 526, 9, "enum_NEXT_SYNTAX"], [526, 527, 9, "enum_NEXT_SYNTAX"], [528, 511, 10, "enum_LAST_LEXICAL_USE"], [527, 528, 9, "enum_NEXT_SYNTAX"], [528, 529, 9, "enum_NEXT_SYNTAX"], [529, 530, 9, "enum_NEXT_SYNTAX"], [530, 531, 9, "enum_NEXT_SYNTAX"], [531, 532, 9, "enum_NEXT_SYNTAX"], [532, 534, 9, "enum_NEXT_SYNTAX"], [535, 528, 10, "enum_LAST_LEXICAL_USE"], [534, 535, 9, "enum_NEXT_SYNTAX"], [535, 536, 9, "enum_NEXT_SYNTAX"], [536, 537, 9, "enum_NEXT_SYNTAX"], [537, 540, 9, "enum_NEXT_SYNTAX"], [540, 541, 9, "enum_NEXT_SYNTAX"], [542, 535, 10, "enum_LAST_LEXICAL_USE"], [541, 542, 9, "enum_NEXT_SYNTAX"], [542, 543, 9, "enum_NEXT_SYNTAX"], [543, 544, 9, "enum_NEXT_SYNTAX"], [544, 545, 9, "enum_NEXT_SYNTAX"], [545, 546, 9, "enum_NEXT_SYNTAX"], [546, 548, 9, "enum_NEXT_SYNTAX"], [549, 542, 10, "enum_LAST_LEXICAL_USE"], [548, 549, 9, "enum_NEXT_SYNTAX"], [549, 550, 9, "enum_NEXT_SYNTAX"], [550, 551, 9, "enum_NEXT_SYNTAX"], [551, 553, 9, "enum_NEXT_SYNTAX"], [554, 502, 10, "enum_LAST_LEXICAL_USE"], [553, 554, 9, "enum_NEXT_SYNTAX"], [554, 555, 9, "enum_NEXT_SYNTAX"], [555, 556, 9, "enum_NEXT_SYNTAX"], [556, 557, 9, "enum_NEXT_SYNTAX"], [557, 558, 9, "enum_NEXT_SYNTAX"], [558, 559, 9, "enum_NEXT_SYNTAX"], [560, 40, 10, "enum_LAST_LEXICAL_USE"], [559, 560, 9, "enum_NEXT_SYNTAX"], [560, 561, 9, "enum_NEXT_SYNTAX"], [562, 52, 10, "enum_LAST_LEXICAL_USE"], [561, 562, 9, "enum_NEXT_SYNTAX"], [562, 563, 9, "enum_NEXT_SYNTAX"], [564, 549, 10, "enum_LAST_LEXICAL_USE"], [563, 564, 9, "enum_NEXT_SYNTAX"], [564, 565, 9, "enum_NEXT_SYNTAX"], [565, 567, 9, "enum_NEXT_SYNTAX"], [567, 568, 9, "enum_NEXT_SYNTAX"], [569, 515, 10, "enum_LAST_LEXICAL_USE"], [568, 569, 9, "enum_NEXT_SYNTAX"], [569, 570, 9, "enum_NEXT_SYNTAX"], [570, 571, 9, "enum_NEXT_SYNTAX"], [571, 572, 9, "enum_NEXT_SYNTAX"], [572, 573, 9, "enum_NEXT_SYNTAX"], [573, 575, 9, "enum_NEXT_SYNTAX"], [576, 554, 10, "enum_LAST_LEXICAL_USE"], [575, 576, 9, "enum_NEXT_SYNTAX"], [576, 577, 9, "enum_NEXT_SYNTAX"], [578, 28, 10, "enum_LAST_LEXICAL_USE"], [577, 578, 9, "enum_NEXT_SYNTAX"], [578, 581, 9, "enum_NEXT_SYNTAX"], [582, 403, 10, "enum_LAST_LEXICAL_USE"], [581, 582, 9, "enum_NEXT_SYNTAX"], [582, 583, 9, "enum_NEXT_SYNTAX"], [583, 584, 9, "enum_NEXT_SYNTAX"], [584, 585, 9, "enum_NEXT_SYNTAX"], [585, 586, 9, "enum_NEXT_SYNTAX"], [587, 468, 10, "enum_LAST_LEXICAL_USE"], [586, 587, 9, "enum_NEXT_SYNTAX"], [587, 588, 9, "enum_NEXT_SYNTAX"], [588, 589, 9, "enum_NEXT_SYNTAX"], [590, 471, 10, "enum_LAST_LEXICAL_USE"], [589, 590, 9, "enum_NEXT_SYNTAX"], [590, 591, 9, "enum_NEXT_SYNTAX"], [592, 445, 10, "enum_LAST_LEXICAL_USE"], [591, 592, 9, "enum_NEXT_SYNTAX"], [592, 593, 9, "enum_NEXT_SYNTAX"], [593, 594, 9, "enum_NEXT_SYNTAX"], [594, 595, 9, "enum_NEXT_SYNTAX"], [596, 576, 10, "enum_LAST_LEXICAL_USE"], [595, 596, 9, "enum_NEXT_SYNTAX"], [596, 597, 9, "enum_NEXT_SYNTAX"], [597, 601, 9, "enum_NEXT_SYNTAX"], [602, 409, 10, "enum_LAST_LEXICAL_USE"], [601, 602, 9, "enum_NEXT_SYNTAX"], [602, 605, 9, "enum_NEXT_SYNTAX"], [605, 606, 9, "enum_NEXT_SYNTAX"], [606, 609, 9, "enum_NEXT_SYNTAX"], [610, 153, 10, "enum_LAST_LEXICAL_USE"], [609, 610, 9, "enum_NEXT_SYNTAX"], [610, 611, 9, "enum_NEXT_SYNTAX"], [611, 612, 9, "enum_NEXT_SYNTAX"], [612, 613, 9, "enum_NEXT_SYNTAX"], [613, 614, 9, "enum_NEXT_SYNTAX"], [615, 331, 10, "enum_LAST_LEXICAL_USE"], [614, 615, 9, "enum_NEXT_SYNTAX"], [615, 616, 9, "enum_NEXT_SYNTAX"], [616, 617, 9, "enum_NEXT_SYNTAX"], [14, 22, 1, "enum_CFG_NEXT"], [22, 34, 1, "enum_CFG_NEXT"], [34, 46, 1, "enum_CFG_NEXT"], [46, 58, 1, "enum_CFG_NEXT"], [58, 66, 1, "enum_CFG_NEXT"], [66, 1, 1, "enum_CFG_NEXT"], [17, 70, 1, "enum_CFG_NEXT"], [70, 79, 1, "enum_CFG_NEXT"], [79, 92, 1, "enum_CFG_NEXT"], [79, 109, 1, "enum_CFG_NEXT"], [109, 139, 1, "enum_CFG_NEXT"], [109, 122, 1, "enum_CFG_NEXT"], [139, 162, 1, "enum_CFG_NEXT"], [139, 152, 1, "enum_CFG_NEXT"], [162, 170, 1, "enum_CFG_NEXT"], [170, 188, 1, "enum_CFG_NEXT"], [188, 196, 1, "enum_CFG_NEXT"], [196, 208, 1, "enum_CFG_NEXT"], [208, 332, 1, "enum_CFG_NEXT"], [208, 214, 1, "enum_CFG_NEXT"], [214, 217, 1, "enum_CFG_NEXT"], [217, 235, 1, "enum_CFG_NEXT"], [235, 232, 1, "enum_CFG_NEXT"], [232, 245, 1, "enum_CFG_NEXT"], [232, 321, 1, "enum_CFG_NEXT"], [245, 242, 1, "enum_CFG_NEXT"], [242, 232, 1, "enum_CFG_NEXT"], [242, 250, 1, "enum_CFG_NEXT"], [250, 273, 1, "enum_CFG_NEXT"], [273, 296, 1, "enum_CFG_NEXT"], [296, 307, 1, "enum_CFG_NEXT"], [307, 242, 1, "enum_CFG_NEXT"], [332, 609, 1, "enum_CFG_NEXT"], [332, 342, 1, "enum_CFG_NEXT"], [342, 362, 1, "enum_CFG_NEXT"], [342, 352, 1, "enum_CFG_NEXT"], [352, 362, 1, "enum_CFG_NEXT"], [362, 377, 1, "enum_CFG_NEXT"], [362, 372, 1, "enum_CFG_NEXT"], [372, 377, 1, "enum_CFG_NEXT"], [377, 402, 1, "enum_CFG_NEXT"], [402, 411, 1, "enum_CFG_NEXT"], [411, 420, 1, "enum_CFG_NEXT"], [420, 417, 1, "enum_CFG_NEXT"], [417, 430, 1, "enum_CFG_NEXT"], [417, 601, 1, "enum_CFG_NEXT"], [430, 427, 1, "enum_CFG_NEXT"], [427, 417, 1, "enum_CFG_NEXT"], [427, 435, 1, "enum_CFG_NEXT"], [435, 458, 1, "enum_CFG_NEXT"], [458, 481, 1, "enum_CFG_NEXT"], [481, 496, 1, "enum_CFG_NEXT"], [496, 501, 1, "enum_CFG_NEXT"], [496, 510, 1, "enum_CFG_NEXT"], [501, 581, 1, "enum_CFG_NEXT"], [510, 529, 1, "enum_CFG_NEXT"], [529, 543, 1, "enum_CFG_NEXT"], [529, 534, 1, "enum_CFG_NEXT"], [534, 543, 1, "enum_CFG_NEXT"], [543, 548, 1, "enum_CFG_NEXT"], [543, 553, 1, "enum_CFG_NEXT"], [548, 553, 1, "enum_CFG_NEXT"], [553, 570, 1, "enum_CFG_NEXT"], [570, 575, 1, "enum_CFG_NEXT"], [570, 581, 1, "enum_CFG_NEXT"], [575, 581, 1, "enum_CFG_NEXT"], [581, 427, 1, "enum_CFG_NEXT"], [77, 4, 3, "enum_LAST_WRITE"], [83, 77, 2, "enum_LAST_READ"], [83, 4, 3, "enum_LAST_WRITE"], [98, 83, 2, "enum_LAST_READ"], [98, 4, 3, "enum_LAST_WRITE"], [107, 6, 3, "enum_LAST_WRITE"], [111, 81, 2, "enum_LAST_READ"], [113, 107, 2, "enum_LAST_READ"], [113, 6, 3, "enum_LAST_WRITE"], [128, 113, 2, "enum_LAST_READ"], [128, 6, 3, "enum_LAST_WRITE"], [137, 8, 3, "enum_LAST_WRITE"], [141, 111, 2, "enum_LAST_READ"], [143, 137, 2, "enum_LAST_READ"], [143, 8, 3, "enum_LAST_WRITE"], [158, 143, 2, "enum_LAST_READ"], [158, 8, 3, "enum_LAST_WRITE"], [169, 83, 2, "enum_LAST_READ"], [169, 4, 3, "enum_LAST_WRITE"], [180, 164, 3, "enum_LAST_WRITE"], [183, 178, 2, "enum_LAST_READ"], [185, 166, 3, "enum_LAST_WRITE"], [172, 180, 2, "enum_LAST_READ"], [172, 164, 3, "enum_LAST_WRITE"], [174, 185, 2, "enum_LAST_READ"], [174, 166, 3, "enum_LAST_WRITE"], [195, 113, 2, "enum_LAST_READ"], [195, 6, 3, "enum_LAST_WRITE"], [203, 143, 2, "enum_LAST_READ"], [203, 8, 3, "enum_LAST_WRITE"], [207, 64, 3, "enum_LAST_WRITE"], [225, 185, 2, "enum_LAST_READ"], [225, 174, 3, "enum_LAST_WRITE"], [227, 180, 2, "enum_LAST_READ"], [227, 172, 3, "enum_LAST_WRITE"], [236, 225, 2, "enum_LAST_READ"], [236, 174, 3, "enum_LAST_WRITE"], [232, 311, 2, "enum_LAST_READ"], [232, 232, 3, "enum_LAST_WRITE"], [244, 244, 2, "enum_LAST_READ"], [244, 234, 2, "enum_LAST_READ"], [246, 227, 2, "enum_LAST_READ"], [246, 246, 2, "enum_LAST_READ"], [246, 172, 3, "enum_LAST_WRITE"], [242, 313, 2, "enum_LAST_READ"], [242, 242, 3, "enum_LAST_WRITE"], [254, 269, 2, "enum_LAST_READ"], [254, 190, 3, "enum_LAST_WRITE"], [258, 281, 2, "enum_LAST_READ"], [260, 311, 2, "enum_LAST_READ"], [260, 232, 3, "enum_LAST_WRITE"], [263, 286, 2, "enum_LAST_READ"], [263, 236, 2, "enum_LAST_READ"], [263, 174, 3, "enum_LAST_WRITE"], [267, 267, 2, "enum_LAST_READ"], [267, 192, 3, "enum_LAST_WRITE"], [269, 254, 2, "enum_LAST_READ"], [269, 190, 3, "enum_LAST_WRITE"], [251, 303, 2, "enum_LAST_READ"], [251, 251, 3, "enum_LAST_WRITE"], [277, 292, 2, "enum_LAST_READ"], [277, 198, 3, "enum_LAST_WRITE"], [281, 258, 2, "enum_LAST_READ"], [283, 313, 2, "enum_LAST_READ"], [283, 242, 3, "enum_LAST_WRITE"], [286, 263, 2, "enum_LAST_READ"], [286, 174, 3, "enum_LAST_WRITE"], [290, 290, 2, "enum_LAST_READ"], [290, 200, 3, "enum_LAST_WRITE"], [292, 277, 2, "enum_LAST_READ"], [292, 198, 3, "enum_LAST_WRITE"], [274, 305, 2, "enum_LAST_READ"], [274, 274, 3, "enum_LAST_WRITE"], [299, 299, 2, "enum_LAST_READ"], [299, 2, 3, "enum_LAST_WRITE"], [303, 303, 2, "enum_LAST_READ"], [303, 251, 3, "enum_LAST_WRITE"], [305, 305, 2, "enum_LAST_READ"], [305, 274, 3, "enum_LAST_WRITE"], [297, 317, 2, "enum_LAST_READ"], [297, 297, 3, "enum_LAST_WRITE"], [317, 317, 2, "enum_LAST_READ"], [317, 297, 3, "enum_LAST_WRITE"], [308, 308, 2, "enum_LAST_READ"], [308, 218, 3, "enum_LAST_WRITE"], [311, 260, 2, "enum_LAST_READ"], [311, 232, 3, "enum_LAST_WRITE"], [313, 283, 2, "enum_LAST_READ"], [313, 242, 3, "enum_LAST_WRITE"], [322, 308, 2, "enum_LAST_READ"], [322, 218, 3, "enum_LAST_WRITE"], [331, 207, 2, "enum_LAST_READ"], [331, 64, 3, "enum_LAST_WRITE"], [387, 180, 2, "enum_LAST_READ"], [387, 172, 3, "enum_LAST_WRITE"], [389, 185, 2, "enum_LAST_READ"], [389, 174, 3, "enum_LAST_WRITE"], [409, 378, 3, "enum_LAST_WRITE"], [414, 12, 3, "enum_LAST_WRITE"], [412, 10, 3, "enum_LAST_WRITE"], [412, 412, 2, "enum_LAST_READ"], [412, 10, 3, "enum_LAST_WRITE"], [421, 389, 2, "enum_LAST_READ"], [421, 174, 3, "enum_LAST_WRITE"], [417, 592, 2, "enum_LAST_READ"], [417, 417, 3, "enum_LAST_WRITE"], [429, 419, 2, "enum_LAST_READ"], [429, 429, 2, "enum_LAST_READ"], [431, 387, 2, "enum_LAST_READ"], [431, 431, 2, "enum_LAST_READ"], [431, 172, 3, "enum_LAST_WRITE"], [427, 587, 2, "enum_LAST_READ"], [427, 427, 3, "enum_LAST_WRITE"], [439, 454, 2, "enum_LAST_READ"], [439, 190, 3, "enum_LAST_WRITE"], [443, 520, 2, "enum_LAST_READ"], [443, 466, 2, "enum_LAST_READ"], [445, 592, 2, "enum_LAST_READ"], [445, 417, 3, "enum_LAST_WRITE"], [448, 421, 2, "enum_LAST_READ"], [448, 590, 2, "enum_LAST_READ"], [448, 174, 3, "enum_LAST_WRITE"], [452, 452, 2, "enum_LAST_READ"], [452, 192, 3, "enum_LAST_WRITE"], [454, 439, 2, "enum_LAST_READ"], [454, 190, 3, "enum_LAST_WRITE"], [436, 488, 2, "enum_LAST_READ"], [436, 436, 3, "enum_LAST_WRITE"], [462, 477, 2, "enum_LAST_READ"], [462, 198, 3, "enum_LAST_WRITE"], [466, 443, 2, "enum_LAST_READ"], [468, 587, 2, "enum_LAST_READ"], [468, 427, 3, "enum_LAST_WRITE"], [471, 448, 2, "enum_LAST_READ"], [471, 174, 3, "enum_LAST_WRITE"], [475, 475, 2, "enum_LAST_READ"], [475, 200, 3, "enum_LAST_WRITE"], [477, 462, 2, "enum_LAST_READ"], [477, 198, 3, "enum_LAST_WRITE"], [459, 490, 2, "enum_LAST_READ"], [459, 459, 3, "enum_LAST_WRITE"], [484, 484, 2, "enum_LAST_READ"], [484, 2, 3, "enum_LAST_WRITE"], [488, 488, 2, "enum_LAST_READ"], [488, 436, 3, "enum_LAST_WRITE"], [490, 490, 2, "enum_LAST_READ"], [490, 459, 3, "enum_LAST_WRITE"], [482, 495, 2, "enum_LAST_READ"], [482, 569, 2, "enum_LAST_READ"], [482, 482, 3, "enum_LAST_WRITE"], [495, 495, 2, "enum_LAST_READ"], [495, 569, 2, "enum_LAST_READ"], [495, 482, 3, "enum_LAST_WRITE"], [504, 504, 2, "enum_LAST_READ"], [504, 16, 3, "enum_LAST_WRITE"], [502, 596, 2, "enum_LAST_READ"], [502, 554, 3, "enum_LAST_WRITE"], [502, 502, 3, "enum_LAST_WRITE"], [502, 576, 3, "enum_LAST_WRITE"], [515, 495, 2, "enum_LAST_READ"], [515, 482, 3, "enum_LAST_WRITE"], [517, 414, 2, "enum_LAST_READ"], [517, 517, 2, "enum_LAST_READ"], [517, 12, 3, "enum_LAST_WRITE"], [520, 466, 2, "enum_LAST_READ"], [522, 522, 2, "enum_LAST_READ"], [522, 412, 2, "enum_LAST_READ"], [522, 412, 3, "enum_LAST_WRITE"], [511, 564, 2, "enum_LAST_READ"], [511, 511, 3, "enum_LAST_WRITE"], [511, 549, 3, "enum_LAST_WRITE"], [511, 535, 3, "enum_LAST_WRITE"], [528, 564, 2, "enum_LAST_READ"], [528, 511, 3, "enum_LAST_WRITE"], [535, 528, 2, "enum_LAST_READ"], [535, 511, 3, "enum_LAST_WRITE"], [542, 528, 2, "enum_LAST_READ"], [542, 511, 3, "enum_LAST_WRITE"], [542, 535, 3, "enum_LAST_WRITE"], [549, 542, 2, "enum_LAST_READ"], [549, 511, 3, "enum_LAST_WRITE"], [549, 535, 3, "enum_LAST_WRITE"], [556, 556, 2, "enum_LAST_READ"], [560, 560, 2, "enum_LAST_READ"], [560, 40, 3, "enum_LAST_WRITE"], [562, 562, 2, "enum_LAST_READ"], [562, 52, 3, "enum_LAST_WRITE"], [564, 542, 2, "enum_LAST_READ"], [564, 511, 3, "enum_LAST_WRITE"], [564, 549, 3, "enum_LAST_WRITE"], [564, 535, 3, "enum_LAST_WRITE"], [554, 596, 2, "enum_LAST_READ"], [554, 554, 3, "enum_LAST_WRITE"], [554, 576, 3, "enum_LAST_WRITE"], [554, 502, 3, "enum_LAST_WRITE"], [569, 515, 2, "enum_LAST_READ"], [569, 482, 3, "enum_LAST_WRITE"], [578, 578, 2, "enum_LAST_READ"], [578, 28, 3, "enum_LAST_WRITE"], [576, 596, 2, "enum_LAST_READ"], [576, 554, 3, "enum_LAST_WRITE"], [582, 582, 2, "enum_LAST_READ"], [582, 403, 3, "enum_LAST_WRITE"], [587, 468, 2, "enum_LAST_READ"], [587, 427, 3, "enum_LAST_WRITE"], [590, 471, 2, "enum_LAST_READ"], [590, 174, 3, "enum_LAST_WRITE"], [592, 445, 2, "enum_LAST_READ"], [592, 417, 3, "enum_LAST_WRITE"], [596, 596, 2, "enum_LAST_READ"], [596, 554, 3, "enum_LAST_WRITE"], [596, 502, 3, "enum_LAST_WRITE"], [596, 576, 3, "enum_LAST_WRITE"], [602, 409, 2, "enum_LAST_READ"], [602, 378, 3, "enum_LAST_WRITE"], [615, 331, 2, "enum_LAST_READ"], [615, 64, 3, "enum_LAST_WRITE"], [165, 169, 4, "enum_COMPUTED_FROM"], [173, 178, 4, "enum_COMPUTED_FROM"], [173, 180, 4, "enum_COMPUTED_FROM"], [173, 183, 4, "enum_COMPUTED_FROM"], [173, 185, 4, "enum_COMPUTED_FROM"], [191, 195, 4, "enum_COMPUTED_FROM"], [199, 203, 4, "enum_COMPUTED_FROM"], [218, 220, 4, "enum_COMPUTED_FROM"], [218, 225, 4, "enum_COMPUTED_FROM"], [218, 227, 4, "enum_COMPUTED_FROM"], [378, 380, 4, "enum_COMPUTED_FROM"], [378, 387, 4, "enum_COMPUTED_FROM"], [378, 389, 4, "enum_COMPUTED_FROM"], [403, 409, 4, "enum_COMPUTED_FROM"], [403, 405, 4, "enum_COMPUTED_FROM"], [251, 254, 4, "enum_COMPUTED_FROM"], [251, 263, 4, "enum_COMPUTED_FROM"], [251, 267, 4, "enum_COMPUTED_FROM"], [251, 269, 4, "enum_COMPUTED_FROM"], [251, 258, 4, "enum_COMPUTED_FROM"], [251, 260, 4, "enum_COMPUTED_FROM"], [274, 277, 4, "enum_COMPUTED_FROM"], [274, 286, 4, "enum_COMPUTED_FROM"], [274, 290, 4, "enum_COMPUTED_FROM"], [274, 292, 4, "enum_COMPUTED_FROM"], [274, 281, 4, "enum_COMPUTED_FROM"], [274, 283, 4, "enum_COMPUTED_FROM"], [297, 303, 4, "enum_COMPUTED_FROM"], [297, 305, 4, "enum_COMPUTED_FROM"], [297, 299, 4, "enum_COMPUTED_FROM"], [309, 317, 4, "enum_COMPUTED_FROM"], [436, 439, 4, "enum_COMPUTED_FROM"], [436, 448, 4, "enum_COMPUTED_FROM"], [436, 452, 4, "enum_COMPUTED_FROM"], [436, 454, 4, "enum_COMPUTED_FROM"], [436, 443, 4, "enum_COMPUTED_FROM"], [436, 445, 4, "enum_COMPUTED_FROM"], [459, 462, 4, "enum_COMPUTED_FROM"], [459, 471, 4, "enum_COMPUTED_FROM"], [459, 475, 4, "enum_COMPUTED_FROM"], [459, 477, 4, "enum_COMPUTED_FROM"], [459, 466, 4, "enum_COMPUTED_FROM"], [459, 468, 4, "enum_COMPUTED_FROM"], [482, 488, 4, "enum_COMPUTED_FROM"], [482, 490, 4, "enum_COMPUTED_FROM"], [482, 484, 4, "enum_COMPUTED_FROM"], [502, 504, 4, "enum_COMPUTED_FROM"], [511, 515, 4, "enum_COMPUTED_FROM"], [511, 517, 4, "enum_COMPUTED_FROM"], [511, 520, 4, "enum_COMPUTED_FROM"], [511, 522, 4, "enum_COMPUTED_FROM"], [554, 560, 4, "enum_COMPUTED_FROM"], [554, 562, 4, "enum_COMPUTED_FROM"], [554, 564, 4, "enum_COMPUTED_FROM"], [554, 556, 4, "enum_COMPUTED_FROM"], [576, 578, 4, "enum_COMPUTED_FROM"]], "error_location": 286, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/tkrajina/srtm.py.git", "old_path": "srtm/data.py", "hash": "b1e1c673b613780c6a7151ab3db53461e2b668c7", "code": "def get_image(self, size: Optional[Tuple[int, int]], latitude_interval: Optional[Tuple[float, float]], longitude_interval: Optional[Tuple[float, float]], max_elevation: float, min_elevation: float=0,\n            unknown_color: Tuple[int, int, int, int] = (255, 255, 255, 255), zero_color: Tuple[int, int, int, int] = (0, 0, 255, 255),\n            min_color: Tuple[int, int, int, int] = (0, 0, 0, 255), max_color: Tuple[int, int, int, int] = (0, 255, 0, 255),\n            mode: str='image') -> Union[np.ndarray, Image.Image]:\n    \"\"\"\n    Returns a numpy array or PIL image.\n    \"\"\"\n\n    if not size or len(size) != 2:\n        raise Exception('Invalid size %s' % size)\n    if not latitude_interval or len(latitude_interval) != 2:\n        raise Exception('Invalid latitude interval %s' % latitude_interval)\n    if not longitude_interval or len(longitude_interval) != 2:\n        raise Exception('Invalid longitude interval %s' % longitude_interval)\n\n    width: int\n    height: int\n    width, height = size\n    width, height = int(width), int(height)\n\n    latitude_from: float\n    latitude_to: float\n    longitude_from: float\n    longitude_to: float\n    latitude_from,  latitude_to  = latitude_interval\n    longitude_from, longitude_to = longitude_interval\n\n\n    if mode == 'array':\n        import numpy as np\n        array: np.ndarray = np.empty((height,width))\n        for row in range(height):\n            for column in range(width):\n                latitude: float  = latitude_from  + float(row) / height * (latitude_to  - latitude_from)\n                longitude: float = longitude_from + float(column) / height * (longitude_to - longitude_from)\n                elevation: Optional[float] = self.get_elevation(latitude, longitude)\n                array[row,column] = elevation\n\n        return array\n\n    elif mode == 'image':\n        try:    import Image as mod_image\n        except: from PIL import Image as mod_image\n        try:    import ImageDraw as mod_imagedraw\n        except: from PIL import ImageDraw as mod_imagedraw\n\n        image: Image.Image = mod_image.new('RGBA', (width, height),\n                        (255, 255, 255, 255))\n        draw: ImageDraw.ImageDraw = mod_imagedraw.Draw(image)\n\n        max_elevation -= min_elevation\n\n        for row in range(height):\n            for column in range(width):\n                latitude: float  = latitude_from  + float(row) / height * (latitude_to  - latitude_from)\n                longitude: float = longitude_from + float(column) / height * (longitude_to - longitude_from)\n                elevation: Optional[float] = self.get_elevation(latitude, longitude)\n                if elevation == None:\n                    color: Tuple[int, int, int, int] = unknown_color\n                else:\n                    elevation_coef: float = (elevation - min_elevation) / float(max_elevation)\n                    if elevation_coef < 0: elevation_coef = 0\n                    if elevation_coef > 1: elevation_coef = 1\n                    color = mod_utils.get_color_between(min_color, max_color, elevation_coef)\n                    if elevation <= 0:\n                        color = zero_color\n                draw.point((column, height - row), color)\n\n        return image\n    else:\n        raise Exception('Invalid mode ' + mode)\n", "rewrite": "ReplaceText(target='width' @(190,65)->(190,71))", "error_line": 28, "has_bug": true, "code_full": "from typing import List, Optional, Tuple, Union\n\nimport numpy as np\nfrom PIL import Image, ImageDraw\n\n\ndef get_color_between(color1: Tuple[int, int, int, int], color2: Tuple[int, int, int, int], coef: float) -> Tuple[int, int, int, int]:\n    return 0, 0, 0, 0\n\n\nclass mod_utils:\n    @staticmethod\n    def get_color_between(color1: Tuple[int, int, int, int], color2: Tuple[int, int, int, int], coef: float) -> Tuple[int, int, int, int]:\n        return 0, 0, 0, 0\n\n\nclass GeoElevationData:\n    def get_elevation(self, latitude: float, longitude: float) -> Optional[float]:\n        return 0.0\n\n    def get_image(self, size: Optional[Tuple[int, int]], latitude_interval: Optional[Tuple[float, float]], longitude_interval: Optional[Tuple[float, float]], max_elevation: float, min_elevation: float=0,\n                unknown_color: Tuple[int, int, int, int] = (255, 255, 255, 255), zero_color: Tuple[int, int, int, int] = (0, 0, 255, 255),\n                min_color: Tuple[int, int, int, int] = (0, 0, 0, 255), max_color: Tuple[int, int, int, int] = (0, 255, 0, 255),\n                mode: str='image') -> Union[np.ndarray, Image.Image]:\n        \"\"\"\n        Returns a numpy array or PIL image.\n        \"\"\"\n\n        if not size or len(size) != 2:\n            raise Exception('Invalid size %s' % size)\n        if not latitude_interval or len(latitude_interval) != 2:\n            raise Exception('Invalid latitude interval %s' % latitude_interval)\n        if not longitude_interval or len(longitude_interval) != 2:\n            raise Exception('Invalid longitude interval %s' % longitude_interval)\n\n        width: int\n        height: int\n        width, height = size\n        width, height = int(width), int(height)\n\n        latitude_from: float\n        latitude_to: float\n        longitude_from: float\n        longitude_to: float\n        latitude_from,  latitude_to  = latitude_interval\n        longitude_from, longitude_to = longitude_interval\n\n\n        if mode == 'array':\n            import numpy as np\n            array: np.ndarray = np.empty((height,width))\n            for row in range(height):\n                for column in range(width):\n                    latitude: float  = latitude_from  + float(row) / height * (latitude_to  - latitude_from)\n                    longitude: float = longitude_from + float(column) / height * (longitude_to - longitude_from)\n                    elevation: Optional[float] = self.get_elevation(latitude, longitude)\n                    array[row,column] = elevation\n\n            return array\n\n        elif mode == 'image':\n            try:    import Image as mod_image\n            except: from PIL import Image as mod_image\n            try:    import ImageDraw as mod_imagedraw\n            except: from PIL import ImageDraw as mod_imagedraw\n\n            image: Image.Image = mod_image.new('RGBA', (width, height),\n                            (255, 255, 255, 255))\n            draw: ImageDraw.ImageDraw = mod_imagedraw.Draw(image)\n\n            max_elevation -= min_elevation\n\n            for row in range(height):\n                for column in range(width):\n                    latitude: float  = latitude_from  + float(row) / height * (latitude_to  - latitude_from)\n                    longitude: float = longitude_from + float(column) / height * (longitude_to - longitude_from)\n                    elevation: Optional[float] = self.get_elevation(latitude, longitude)\n                    if elevation == None:\n                        color: Tuple[int, int, int, int] = unknown_color\n                    else:\n                        elevation_coef: float = (elevation - min_elevation) / float(max_elevation)\n                        if elevation_coef < 0: elevation_coef = 0\n                        if elevation_coef > 1: elevation_coef = 1\n                        color = mod_utils.get_color_between(min_color, max_color, elevation_coef)\n                        if elevation <= 0:\n                            color = zero_color\n                    draw.point((column, height - row), color)\n\n            return image\n        else:\n            raise Exception('Invalid mode ' + mode)\n", "error_location_char": [1605, 1611], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def _handler(", "self", ",", "request", ",", "response", ")", ":", "#NEWLINE#", "#INDENT#", "def monitor(", "message", ",", "progress", ")", ":", "#NEWLINE#", "#INDENT#", "response", ".", "update_status", "(", "message", ",", "progress", ")", "#NEWLINE#", "#UNINDENT#", "files", "=", "download", ".", "download_files_from_thredds", "(", "url", "=", "request", ".", "inputs", "[", "'url'", "]", ".", "data", ",", "monitor", "=", "monitor", ")", "#NEWLINE#", "with", "open", "(", "'out.json'", ",", "'w'", ")", "as", "fp", ":", "#NEWLINE#", "#INDENT#", "json", ".", "dump", "(", "obj", "=", "files", ",", "fp", "=", "fp", ",", "indent", "=", "4", ",", "sort_keys", "=", "True", ")", "#NEWLINE#", "request", ".", "outputs", "[", "'outputs'", "]", ".", "file", "=", "fp", ".", "name", "#NEWLINE#", "#UNINDENT#", "return", "response"], "edges": [[1, 3, 7, "enum_FIELD"], [15, 13, 7, "enum_FIELD"], [28, 45, 7, "enum_FIELD"], [98, 99, 7, "enum_FIELD"], [18, 24, 7, "enum_FIELD"], [45, 32, 7, "enum_FIELD"], [58, 55, 7, "enum_FIELD"], [58, 59, 7, "enum_FIELD"], [62, 74, 7, "enum_FIELD"], [83, 94, 7, "enum_FIELD"], [24, 20, 7, "enum_FIELD"], [32, 31, 7, "enum_FIELD"], [35, 43, 7, "enum_FIELD"], [46, 48, 7, "enum_FIELD"], [55, 52, 7, "enum_FIELD"], [74, 64, 7, "enum_FIELD"], [90, 87, 7, "enum_FIELD"], [94, 93, 7, "enum_FIELD"], [20, 19, 7, "enum_FIELD"], [43, 40, 7, "enum_FIELD"], [64, 63, 7, "enum_FIELD"], [67, 69, 7, "enum_FIELD"], [71, 73, 7, "enum_FIELD"], [75, 77, 7, "enum_FIELD"], [79, 81, 7, "enum_FIELD"], [87, 85, 7, "enum_FIELD"], [87, 88, 7, "enum_FIELD"], [40, 38, 7, "enum_FIELD"], [40, 41, 7, "enum_FIELD"], [85, 84, 7, "enum_FIELD"], [38, 37, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 18, 9, "enum_NEXT_SYNTAX"], [19, 6, 10, "enum_LAST_LEXICAL_USE"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [23, 12, 10, "enum_LAST_LEXICAL_USE"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [25, 14, 10, "enum_LAST_LEXICAL_USE"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [37, 4, 10, "enum_LAST_LEXICAL_USE"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [69, 29, 10, "enum_LAST_LEXICAL_USE"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [73, 59, 10, "enum_LAST_LEXICAL_USE"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [84, 37, 10, "enum_LAST_LEXICAL_USE"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [93, 73, 10, "enum_LAST_LEXICAL_USE"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 98, 9, "enum_NEXT_SYNTAX"], [99, 19, 10, "enum_LAST_LEXICAL_USE"], [98, 99, 9, "enum_NEXT_SYNTAX"], [3, 15, 1, "enum_CFG_NEXT"], [15, 28, 1, "enum_CFG_NEXT"], [13, 18, 1, "enum_CFG_NEXT"], [28, 98, 1, "enum_CFG_NEXT"], [23, 12, 3, "enum_LAST_WRITE"], [25, 14, 3, "enum_LAST_WRITE"], [37, 4, 3, "enum_LAST_WRITE"], [48, 15, 3, "enum_LAST_WRITE"], [99, 6, 3, "enum_LAST_WRITE"], [29, 31, 4, "enum_COMPUTED_FROM"], [29, 48, 4, "enum_COMPUTED_FROM"], [29, 37, 4, "enum_COMPUTED_FROM"], [90, 93, 4, "enum_COMPUTED_FROM"]], "error_location": 84, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/bird-house/malleefowl.git", "old_path": "malleefowl/processes/wps_thredds.py", "hash": "279479a4cba930e14803ea4a748faa57d884399f", "code": "def _handler(self, request: Request, response: Response) -> Response:\n    def monitor(message: Any, progress: Any):\n        response.update_status(message, progress)\n    files: List[str] = download.download_files_from_thredds(\n        url=request.inputs['url'].data,\n        monitor=monitor)\n\n    with open('out.json', 'w') as fp:\n        json.dump(obj=files, fp=fp, indent=4, sort_keys=True)\n        request.outputs['outputs'].file = fp.name\n    return response\n", "rewrite": "ReplaceText(target='response' @(55,12)->(55,19))", "error_line": 9, "has_bug": true, "code_full": "import json\nfrom typing import Any, Callable, Dict, List\n\n\nclass Request:\n    inputs: Dict[str, Any]\n\n\nclass Response:\n    outputs: Dict[str, Any]\n\n    def update_status(self, message: str, progress: int):\n        pass\n\n\nclass Download:\n    def download_files_from_thredds(self, url: str, monitor: Callable[[str, int], None]) -> List[str]:\n        return []\n    \n\ndownload = Download()\n\n\nclass ThreddsDownload:\n    def _handler(self, request: Request, response: Response) -> Response:\n        def monitor(message: Any, progress: Any):\n            response.update_status(message, progress)\n        files: List[str] = download.download_files_from_thredds(\n            url=request.inputs['url'].data,\n            monitor=monitor)\n\n        with open('out.json', 'w') as fp:\n            json.dump(obj=files, fp=fp, indent=4, sort_keys=True)\n            request.outputs['outputs'].file = fp.name\n        return response\n", "error_location_char": [401, 408], "type_checked_pytype": false, "type_error_label": "attribute-error", "type_checked_mypy": false}
{"source_tokens": ["#NEWLINE#", "def xml_convert(", "records", ",", "file_hash", ",", "recovered", "=", "True", ")", ":", "#NEWLINE#", "#INDENT#", "for", "record", "in", "records", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "d", "=", "xmltodict", ".", "parse", "(", "record", ")", "#NEWLINE#", "#UNINDENT#", "except", "ExpatError", ":", "#NEWLINE#", "#INDENT#", "record", "=", "record", ".", "replace", "(", "'\\x00'", ",", "''", ")", "#NEWLINE#", "d", "=", "xmltodict", ".", "parse", "(", "record", ")", "#NEWLINE#", "#UNINDENT#", "sys", "=", "d", "[", "'Event'", "]", "[", "'System'", "]", "#NEWLINE#", "dictionary", "=", "parser", "(", "record", ",", "{", "'timestamp_utc'", ":", "sys", "[", "'TimeCreated'", "]", "[", "'@SystemTime'", "]", ",", "'event_id'", ":", "sys", "[", "'EventID'", "]", ",", "'description'", ":", "''", ",", "'details'", ":", "''", ",", "'event_source'", ":", "sys", "[", "'Provider'", "]", "[", "'@Name'", "]", ",", "'event_log'", ":", "sys", "[", "'Channel'", "]", ",", "'session_id'", ":", "''", ",", "'account'", ":", "''", ",", "'computer_name'", ":", "sys", "[", "'Computer'", "]", ",", "'record_number'", ":", "sys", "[", "'EventRecordID'", "]", ",", "'recovered'", ":", "recovered", ",", "'source_file_hash'", ":", "file_hash", "}", ")", "#NEWLINE#", "if", "(", "dictionary", "!=", "None", ")", ":", "#NEWLINE#", "#INDENT#", "(", "yield", "dictionary", ")"], "edges": [[1, 5, 7, "enum_FIELD"], [15, 14, 7, "enum_FIELD"], [15, 16, 7, "enum_FIELD"], [59, 66, 7, "enum_FIELD"], [69, 75, 7, "enum_FIELD"], [151, 154, 7, "enum_FIELD"], [23, 29, 7, "enum_FIELD"], [34, 35, 7, "enum_FIELD"], [66, 63, 7, "enum_FIELD"], [66, 67, 7, "enum_FIELD"], [75, 72, 7, "enum_FIELD"], [154, 153, 7, "enum_FIELD"], [159, 161, 7, "enum_FIELD"], [29, 27, 7, "enum_FIELD"], [38, 46, 7, "enum_FIELD"], [49, 55, 7, "enum_FIELD"], [63, 62, 7, "enum_FIELD"], [63, 64, 7, "enum_FIELD"], [161, 162, 7, "enum_FIELD"], [27, 26, 7, "enum_FIELD"], [46, 42, 7, "enum_FIELD"], [55, 53, 7, "enum_FIELD"], [83, 80, 7, "enum_FIELD"], [83, 84, 7, "enum_FIELD"], [90, 89, 7, "enum_FIELD"], [90, 91, 7, "enum_FIELD"], [108, 105, 7, "enum_FIELD"], [108, 109, 7, "enum_FIELD"], [115, 114, 7, "enum_FIELD"], [115, 116, 7, "enum_FIELD"], [130, 129, 7, "enum_FIELD"], [130, 131, 7, "enum_FIELD"], [137, 136, 7, "enum_FIELD"], [137, 138, 7, "enum_FIELD"], [42, 41, 7, "enum_FIELD"], [53, 52, 7, "enum_FIELD"], [80, 79, 7, "enum_FIELD"], [80, 81, 7, "enum_FIELD"], [105, 104, 7, "enum_FIELD"], [105, 106, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [16, 2, 10, "enum_LAST_LEXICAL_USE"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [30, 14, 10, "enum_LAST_LEXICAL_USE"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 38, 9, "enum_NEXT_SYNTAX"], [39, 30, 10, "enum_LAST_LEXICAL_USE"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [41, 39, 10, "enum_LAST_LEXICAL_USE"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [50, 24, 10, "enum_LAST_LEXICAL_USE"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [52, 26, 10, "enum_LAST_LEXICAL_USE"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [56, 41, 10, "enum_LAST_LEXICAL_USE"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [62, 50, 10, "enum_LAST_LEXICAL_USE"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [74, 56, 10, "enum_LAST_LEXICAL_USE"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [79, 60, 10, "enum_LAST_LEXICAL_USE"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [89, 79, 10, "enum_LAST_LEXICAL_USE"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [104, 89, 10, "enum_LAST_LEXICAL_USE"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [114, 104, 10, "enum_LAST_LEXICAL_USE"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [129, 114, 10, "enum_LAST_LEXICAL_USE"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [136, 129, 10, "enum_LAST_LEXICAL_USE"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [143, 6, 10, "enum_LAST_LEXICAL_USE"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [147, 4, 10, "enum_LAST_LEXICAL_USE"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [153, 70, 10, "enum_LAST_LEXICAL_USE"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [162, 153, 10, "enum_LAST_LEXICAL_USE"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [8, 1, 1, "enum_CFG_NEXT"], [5, 16, 1, "enum_CFG_NEXT"], [16, 14, 1, "enum_CFG_NEXT"], [14, 23, 1, "enum_CFG_NEXT"], [23, 35, 1, "enum_CFG_NEXT"], [23, 59, 1, "enum_CFG_NEXT"], [35, 38, 1, "enum_CFG_NEXT"], [38, 49, 1, "enum_CFG_NEXT"], [49, 59, 1, "enum_CFG_NEXT"], [59, 69, 1, "enum_CFG_NEXT"], [69, 154, 1, "enum_CFG_NEXT"], [154, 14, 1, "enum_CFG_NEXT"], [154, 159, 1, "enum_CFG_NEXT"], [159, 14, 1, "enum_CFG_NEXT"], [16, 2, 3, "enum_LAST_WRITE"], [14, 74, 2, "enum_LAST_READ"], [14, 14, 3, "enum_LAST_WRITE"], [14, 39, 3, "enum_LAST_WRITE"], [26, 26, 2, "enum_LAST_READ"], [26, 52, 2, "enum_LAST_READ"], [30, 74, 2, "enum_LAST_READ"], [30, 14, 3, "enum_LAST_WRITE"], [24, 62, 2, "enum_LAST_READ"], [24, 50, 3, "enum_LAST_WRITE"], [24, 24, 3, "enum_LAST_WRITE"], [35, 35, 2, "enum_LAST_READ"], [41, 30, 2, "enum_LAST_READ"], [41, 14, 3, "enum_LAST_WRITE"], [39, 41, 2, "enum_LAST_READ"], [39, 14, 3, "enum_LAST_WRITE"], [52, 26, 2, "enum_LAST_READ"], [56, 41, 2, "enum_LAST_READ"], [56, 39, 3, "enum_LAST_WRITE"], [50, 62, 2, "enum_LAST_READ"], [50, 24, 3, "enum_LAST_WRITE"], [62, 62, 2, "enum_LAST_READ"], [62, 50, 3, "enum_LAST_WRITE"], [62, 24, 3, "enum_LAST_WRITE"], [60, 136, 2, "enum_LAST_READ"], [60, 60, 3, "enum_LAST_WRITE"], [72, 72, 2, "enum_LAST_READ"], [74, 56, 2, "enum_LAST_READ"], [74, 30, 2, "enum_LAST_READ"], [74, 14, 3, "enum_LAST_WRITE"], [74, 39, 3, "enum_LAST_WRITE"], [79, 136, 2, "enum_LAST_READ"], [79, 60, 3, "enum_LAST_WRITE"], [89, 79, 2, "enum_LAST_READ"], [89, 60, 3, "enum_LAST_WRITE"], [104, 89, 2, "enum_LAST_READ"], [104, 60, 3, "enum_LAST_WRITE"], [114, 104, 2, "enum_LAST_READ"], [114, 60, 3, "enum_LAST_WRITE"], [129, 114, 2, "enum_LAST_READ"], [129, 60, 3, "enum_LAST_WRITE"], [136, 129, 2, "enum_LAST_READ"], [136, 60, 3, "enum_LAST_WRITE"], [143, 143, 2, "enum_LAST_READ"], [143, 6, 3, "enum_LAST_WRITE"], [147, 147, 2, "enum_LAST_READ"], [147, 4, 3, "enum_LAST_WRITE"], [70, 162, 2, "enum_LAST_READ"], [70, 153, 2, "enum_LAST_READ"], [70, 70, 3, "enum_LAST_WRITE"], [153, 162, 2, "enum_LAST_READ"], [153, 153, 2, "enum_LAST_READ"], [153, 70, 3, "enum_LAST_WRITE"], [162, 153, 2, "enum_LAST_READ"], [162, 70, 3, "enum_LAST_WRITE"], [60, 62, 4, "enum_COMPUTED_FROM"], [70, 72, 4, "enum_COMPUTED_FROM"], [70, 74, 4, "enum_COMPUTED_FROM"], [70, 143, 4, "enum_COMPUTED_FROM"], [70, 147, 4, "enum_COMPUTED_FROM"], [70, 89, 4, "enum_COMPUTED_FROM"], [70, 114, 4, "enum_COMPUTED_FROM"], [70, 129, 4, "enum_COMPUTED_FROM"], [70, 136, 4, "enum_COMPUTED_FROM"], [70, 79, 4, "enum_COMPUTED_FROM"], [70, 104, 4, "enum_COMPUTED_FROM"], [24, 30, 4, "enum_COMPUTED_FROM"], [24, 26, 4, "enum_COMPUTED_FROM"], [39, 41, 4, "enum_COMPUTED_FROM"], [50, 56, 4, "enum_COMPUTED_FROM"], [50, 52, 4, "enum_COMPUTED_FROM"]], "error_location": 74, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/ShaneKent/PyEventLogViewer.git", "old_path": "winlogtimeline/collector/collect.py", "hash": "f97696fbe0a5bb94461ccfa2951667ab788aefd5", "code": "def xml_convert(records: List[str], file_hash: str, recovered: bool=True) -> Generator[Dict[str, Any], None, None]:\n    for record in records:\n        try:\n            d = xmltodict.parse(record)\n        except ExpatError:\n            record = record.replace(\"\u0000\", \"\")  # This can not be the best way to do this...\n            d = xmltodict.parse(record)\n\n        sys = d['Event']['System']\n\n        dictionary = parser(record, {\n            'timestamp_utc': sys['TimeCreated']['@SystemTime'],\n            'event_id': sys['EventID'],\n            'description': '',\n            'details': '',\n            'event_source': sys['Provider']['@Name'],\n            'event_log': sys['Channel'],\n            'session_id': '',\n            'account': '',\n            'computer_name': sys['Computer'],\n            'record_number': sys['EventRecordID'],\n            'recovered': recovered,\n            'source_file_hash': file_hash\n        })\n\n        if dictionary != None:\n            yield dictionary\n", "rewrite": "ReplaceText(target='d' @(56,28)->(56,34))", "error_line": 10, "has_bug": true, "code_full": "from typing import Any, Dict, Generator, List, Union\nfrom xml.parsers.expat import ExpatError\n\n\nclass xmltodict:\n    @staticmethod\n    def parse(xml: str) -> Dict[str, Any]:\n        return {}\n\n\ndef parser(record: Dict[str, Any], dictionary: Dict[str, Union[str, bool]]) -> Dict[str, Any]:\n    return {}\n\n\ndef xml_convert(records: List[str], file_hash: str, recovered: bool=True) -> Generator[Dict[str, Any], None, None]:\n    for record in records:\n        try:\n            d = xmltodict.parse(record)\n        except ExpatError:\n            record = record.replace(\"\u0000\", \"\")  # This can not be the best way to do this...\n            d = xmltodict.parse(record)\n\n        sys = d['Event']['System']\n\n        dictionary = parser(record, {\n            'timestamp_utc': sys['TimeCreated']['@SystemTime'],\n            'event_id': sys['EventID'],\n            'description': '',\n            'details': '',\n            'event_source': sys['Provider']['@Name'],\n            'event_log': sys['Channel'],\n            'session_id': '',\n            'account': '',\n            'computer_name': sys['Computer'],\n            'record_number': sys['EventRecordID'],\n            'recovered': recovered,\n            'source_file_hash': file_hash\n        })\n\n        if dictionary != None:\n            yield dictionary\n", "error_location_char": [419, 425], "type_checked_pytype": false, "type_error_label": "wrong-arg-types", "type_checked_mypy": false}
{"source_tokens": ["#NEWLINE#", "def update_view(", "self", ",", "steno_layout", ",", "stroke", ")", ":", "#NEWLINE#", "#INDENT#", "' Updates the layout display for the provided layout and stroke '", "#NEWLINE#", "scene", "=", "self", ".", "graphics_scene", "#NEWLINE#", "pen", "=", "self", ".", "_scene_pen", "#NEWLINE#", "font", "=", "(", "QFont", "(", "steno_layout", ".", "font", ")", "if", "steno_layout", ".", "font", "else", "QFont", "(", ")", ")", "#NEWLINE#", "scene", ".", "clear", "(", ")", "#NEWLINE#", "scene", ".", "setBackgroundBrush", "(", "QBrush", "(", "QColor", "(", "steno_layout", ".", "background_color", ")", ")", ")", "#NEWLINE#", "for", "key", "in", "steno_layout", ".", "keys", ":", "#NEWLINE#", "#INDENT#", "path", "=", "LayoutDisplayView", ".", "_create_key_path", "(", "steno_layout", ",", "key", ")", "#NEWLINE#", "brush", "=", "LayoutDisplayView", ".", "_get_key_path_brush", "(", "key", ",", "(", "key", ".", "name", "in", "stroke", ")", ")", "#NEWLINE#", "scene", ".", "addPath", "(", "path", ",", "pen", ",", "brush", ")", "#NEWLINE#", "if", "key", ".", "label", ":", "#NEWLINE#", "#INDENT#", "label", "=", "QGraphicsTextItem", "(", "key", ".", "label", ")", "#NEWLINE#", "label", ".", "setFont", "(", "font", ")", "#NEWLINE#", "label", ".", "setDefaultTextColor", "(", "QColor", "(", "steno_layout", ".", "font_color", ")", ")", "#NEWLINE#", "label_rect", "=", "label", ".", "boundingRect", "(", ")", "#NEWLINE#", "label_rect", ".", "moveCenter", "(", "path", ".", "boundingRect", "(", ")", ".", "center", "(", ")", ")", "#NEWLINE#", "label", ".", "setPos", "(", "label_rect", ".", "x", "(", ")", ",", "label_rect", ".", "y", "(", ")", ")", "#NEWLINE#", "scene", ".", "addItem", "(", "label", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "margin", "=", "steno_layout", ".", "margin", "#NEWLINE#", "scene_rect", "=", "scene", ".", "itemsBoundingRect", "(", ")", "#NEWLINE#", "scene_rect", "=", "scene_rect", ".", "marginsAdded", "(", "QMarginsF", "(", "margin", ",", "margin", ",", "margin", ",", "margin", ")", ")", "#NEWLINE#", "scene", ".", "setSceneRect", "(", "scene_rect", ")", "#NEWLINE#", "self", ".", "fitInView", "(", "scene", ".", "sceneRect", "(", ")", ",", "Qt", ".", "KeepAspectRatio", ")", "#NEWLINE#", "self", ".", "setScene", "(", "scene", ")", "#NEWLINE#", "self", ".", "show", "(", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [10, 11, 7, "enum_FIELD"], [12, 16, 7, "enum_FIELD"], [18, 22, 7, "enum_FIELD"], [24, 34, 7, "enum_FIELD"], [43, 47, 7, "enum_FIELD"], [49, 53, 7, "enum_FIELD"], [67, 66, 7, "enum_FIELD"], [67, 69, 7, "enum_FIELD"], [196, 200, 7, "enum_FIELD"], [202, 208, 7, "enum_FIELD"], [210, 216, 7, "enum_FIELD"], [228, 232, 7, "enum_FIELD"], [235, 245, 7, "enum_FIELD"], [250, 254, 7, "enum_FIELD"], [257, 261, 7, "enum_FIELD"], [16, 15, 7, "enum_FIELD"], [22, 21, 7, "enum_FIELD"], [34, 36, 7, "enum_FIELD"], [34, 29, 7, "enum_FIELD"], [34, 40, 7, "enum_FIELD"], [47, 45, 7, "enum_FIELD"], [53, 51, 7, "enum_FIELD"], [69, 68, 7, "enum_FIELD"], [73, 81, 7, "enum_FIELD"], [84, 92, 7, "enum_FIELD"], [101, 107, 7, "enum_FIELD"], [113, 115, 7, "enum_FIELD"], [200, 199, 7, "enum_FIELD"], [208, 206, 7, "enum_FIELD"], [216, 214, 7, "enum_FIELD"], [232, 230, 7, "enum_FIELD"], [245, 237, 7, "enum_FIELD"], [254, 252, 7, "enum_FIELD"], [261, 259, 7, "enum_FIELD"], [36, 35, 7, "enum_FIELD"], [29, 28, 7, "enum_FIELD"], [40, 39, 7, "enum_FIELD"], [45, 44, 7, "enum_FIELD"], [51, 50, 7, "enum_FIELD"], [55, 54, 7, "enum_FIELD"], [81, 77, 7, "enum_FIELD"], [92, 88, 7, "enum_FIELD"], [107, 103, 7, "enum_FIELD"], [115, 114, 7, "enum_FIELD"], [119, 123, 7, "enum_FIELD"], [128, 132, 7, "enum_FIELD"], [135, 139, 7, "enum_FIELD"], [147, 153, 7, "enum_FIELD"], [155, 159, 7, "enum_FIELD"], [170, 180, 7, "enum_FIELD"], [187, 191, 7, "enum_FIELD"], [206, 205, 7, "enum_FIELD"], [214, 213, 7, "enum_FIELD"], [222, 217, 7, "enum_FIELD"], [230, 229, 7, "enum_FIELD"], [237, 236, 7, "enum_FIELD"], [243, 241, 7, "enum_FIELD"], [247, 246, 7, "enum_FIELD"], [252, 251, 7, "enum_FIELD"], [259, 258, 7, "enum_FIELD"], [31, 30, 7, "enum_FIELD"], [57, 56, 7, "enum_FIELD"], [77, 76, 7, "enum_FIELD"], [88, 87, 7, "enum_FIELD"], [97, 95, 7, "enum_FIELD"], [103, 102, 7, "enum_FIELD"], [123, 122, 7, "enum_FIELD"], [132, 130, 7, "enum_FIELD"], [139, 137, 7, "enum_FIELD"], [153, 151, 7, "enum_FIELD"], [159, 157, 7, "enum_FIELD"], [180, 172, 7, "enum_FIELD"], [191, 189, 7, "enum_FIELD"], [241, 240, 7, "enum_FIELD"], [59, 58, 7, "enum_FIELD"], [95, 94, 7, "enum_FIELD"], [125, 124, 7, "enum_FIELD"], [130, 129, 7, "enum_FIELD"], [137, 136, 7, "enum_FIELD"], [141, 140, 7, "enum_FIELD"], [151, 150, 7, "enum_FIELD"], [157, 156, 7, "enum_FIELD"], [167, 165, 7, "enum_FIELD"], [172, 171, 7, "enum_FIELD"], [178, 176, 7, "enum_FIELD"], [184, 182, 7, "enum_FIELD"], [189, 188, 7, "enum_FIELD"], [143, 142, 7, "enum_FIELD"], [165, 163, 7, "enum_FIELD"], [176, 175, 7, "enum_FIELD"], [182, 181, 7, "enum_FIELD"], [163, 161, 7, "enum_FIELD"], [161, 160, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [15, 2, 10, "enum_LAST_LEXICAL_USE"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [21, 15, 10, "enum_LAST_LEXICAL_USE"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [30, 4, 10, "enum_LAST_LEXICAL_USE"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [35, 30, 10, "enum_LAST_LEXICAL_USE"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [39, 28, 10, "enum_LAST_LEXICAL_USE"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [44, 13, 10, "enum_LAST_LEXICAL_USE"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [50, 44, 10, "enum_LAST_LEXICAL_USE"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [58, 35, 10, "enum_LAST_LEXICAL_USE"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [68, 58, 10, "enum_LAST_LEXICAL_USE"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [80, 68, 10, "enum_LAST_LEXICAL_USE"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [82, 66, 10, "enum_LAST_LEXICAL_USE"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [87, 76, 10, "enum_LAST_LEXICAL_USE"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [91, 82, 10, "enum_LAST_LEXICAL_USE"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [94, 91, 10, "enum_LAST_LEXICAL_USE"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [98, 6, 10, "enum_LAST_LEXICAL_USE"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [102, 50, 10, "enum_LAST_LEXICAL_USE"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [106, 74, 10, "enum_LAST_LEXICAL_USE"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [108, 19, 10, "enum_LAST_LEXICAL_USE"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [110, 85, 10, "enum_LAST_LEXICAL_USE"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 113, 9, "enum_NEXT_SYNTAX"], [114, 94, 10, "enum_LAST_LEXICAL_USE"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [124, 114, 10, "enum_LAST_LEXICAL_USE"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [129, 120, 10, "enum_LAST_LEXICAL_USE"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [133, 25, 10, "enum_LAST_LEXICAL_USE"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [136, 129, 10, "enum_LAST_LEXICAL_USE"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [140, 56, 10, "enum_LAST_LEXICAL_USE"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [142, 80, 10, "enum_LAST_LEXICAL_USE"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [150, 136, 10, "enum_LAST_LEXICAL_USE"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [156, 148, 10, "enum_LAST_LEXICAL_USE"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [160, 106, 10, "enum_LAST_LEXICAL_USE"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [171, 150, 10, "enum_LAST_LEXICAL_USE"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [175, 156, 10, "enum_LAST_LEXICAL_USE"], [174, 175, 9, "enum_NEXT_SYNTAX"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 180, 9, "enum_NEXT_SYNTAX"], [181, 175, 10, "enum_LAST_LEXICAL_USE"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 184, 9, "enum_NEXT_SYNTAX"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [188, 102, 10, "enum_LAST_LEXICAL_USE"], [187, 188, 9, "enum_NEXT_SYNTAX"], [188, 189, 9, "enum_NEXT_SYNTAX"], [189, 190, 9, "enum_NEXT_SYNTAX"], [190, 191, 9, "enum_NEXT_SYNTAX"], [192, 171, 10, "enum_LAST_LEXICAL_USE"], [191, 192, 9, "enum_NEXT_SYNTAX"], [192, 193, 9, "enum_NEXT_SYNTAX"], [193, 196, 9, "enum_NEXT_SYNTAX"], [196, 197, 9, "enum_NEXT_SYNTAX"], [197, 198, 9, "enum_NEXT_SYNTAX"], [199, 142, 10, "enum_LAST_LEXICAL_USE"], [198, 199, 9, "enum_NEXT_SYNTAX"], [199, 200, 9, "enum_NEXT_SYNTAX"], [200, 201, 9, "enum_NEXT_SYNTAX"], [201, 202, 9, "enum_NEXT_SYNTAX"], [202, 203, 9, "enum_NEXT_SYNTAX"], [203, 204, 9, "enum_NEXT_SYNTAX"], [205, 188, 10, "enum_LAST_LEXICAL_USE"], [204, 205, 9, "enum_NEXT_SYNTAX"], [205, 206, 9, "enum_NEXT_SYNTAX"], [206, 207, 9, "enum_NEXT_SYNTAX"], [207, 208, 9, "enum_NEXT_SYNTAX"], [208, 209, 9, "enum_NEXT_SYNTAX"], [209, 210, 9, "enum_NEXT_SYNTAX"], [211, 203, 10, "enum_LAST_LEXICAL_USE"], [210, 211, 9, "enum_NEXT_SYNTAX"], [211, 212, 9, "enum_NEXT_SYNTAX"], [213, 211, 10, "enum_LAST_LEXICAL_USE"], [212, 213, 9, "enum_NEXT_SYNTAX"], [213, 214, 9, "enum_NEXT_SYNTAX"], [214, 215, 9, "enum_NEXT_SYNTAX"], [215, 216, 9, "enum_NEXT_SYNTAX"], [216, 217, 9, "enum_NEXT_SYNTAX"], [217, 218, 9, "enum_NEXT_SYNTAX"], [219, 197, 10, "enum_LAST_LEXICAL_USE"], [218, 219, 9, "enum_NEXT_SYNTAX"], [219, 220, 9, "enum_NEXT_SYNTAX"], [221, 219, 10, "enum_LAST_LEXICAL_USE"], [220, 221, 9, "enum_NEXT_SYNTAX"], [221, 222, 9, "enum_NEXT_SYNTAX"], [223, 221, 10, "enum_LAST_LEXICAL_USE"], [222, 223, 9, "enum_NEXT_SYNTAX"], [223, 224, 9, "enum_NEXT_SYNTAX"], [225, 223, 10, "enum_LAST_LEXICAL_USE"], [224, 225, 9, "enum_NEXT_SYNTAX"], [225, 226, 9, "enum_NEXT_SYNTAX"], [226, 227, 9, "enum_NEXT_SYNTAX"], [227, 228, 9, "enum_NEXT_SYNTAX"], [229, 205, 10, "enum_LAST_LEXICAL_USE"], [228, 229, 9, "enum_NEXT_SYNTAX"], [229, 230, 9, "enum_NEXT_SYNTAX"], [230, 231, 9, "enum_NEXT_SYNTAX"], [231, 232, 9, "enum_NEXT_SYNTAX"], [233, 213, 10, "enum_LAST_LEXICAL_USE"], [232, 233, 9, "enum_NEXT_SYNTAX"], [233, 234, 9, "enum_NEXT_SYNTAX"], [234, 235, 9, "enum_NEXT_SYNTAX"], [236, 21, 10, "enum_LAST_LEXICAL_USE"], [235, 236, 9, "enum_NEXT_SYNTAX"], [236, 237, 9, "enum_NEXT_SYNTAX"], [237, 238, 9, "enum_NEXT_SYNTAX"], [238, 239, 9, "enum_NEXT_SYNTAX"], [240, 229, 10, "enum_LAST_LEXICAL_USE"], [239, 240, 9, "enum_NEXT_SYNTAX"], [240, 241, 9, "enum_NEXT_SYNTAX"], [241, 242, 9, "enum_NEXT_SYNTAX"], [242, 243, 9, "enum_NEXT_SYNTAX"], [243, 244, 9, "enum_NEXT_SYNTAX"], [244, 245, 9, "enum_NEXT_SYNTAX"], [245, 246, 9, "enum_NEXT_SYNTAX"], [246, 247, 9, "enum_NEXT_SYNTAX"], [247, 248, 9, "enum_NEXT_SYNTAX"], [248, 249, 9, "enum_NEXT_SYNTAX"], [249, 250, 9, "enum_NEXT_SYNTAX"], [251, 236, 10, "enum_LAST_LEXICAL_USE"], [250, 251, 9, "enum_NEXT_SYNTAX"], [251, 252, 9, "enum_NEXT_SYNTAX"], [252, 253, 9, "enum_NEXT_SYNTAX"], [253, 254, 9, "enum_NEXT_SYNTAX"], [255, 240, 10, "enum_LAST_LEXICAL_USE"], [254, 255, 9, "enum_NEXT_SYNTAX"], [255, 256, 9, "enum_NEXT_SYNTAX"], [256, 257, 9, "enum_NEXT_SYNTAX"], [258, 251, 10, "enum_LAST_LEXICAL_USE"], [257, 258, 9, "enum_NEXT_SYNTAX"], [258, 259, 9, "enum_NEXT_SYNTAX"], [259, 260, 9, "enum_NEXT_SYNTAX"], [260, 261, 9, "enum_NEXT_SYNTAX"], [261, 262, 9, "enum_NEXT_SYNTAX"], [3, 10, 1, "enum_CFG_NEXT"], [10, 12, 1, "enum_CFG_NEXT"], [12, 18, 1, "enum_CFG_NEXT"], [18, 24, 1, "enum_CFG_NEXT"], [24, 43, 1, "enum_CFG_NEXT"], [43, 49, 1, "enum_CFG_NEXT"], [49, 69, 1, "enum_CFG_NEXT"], [69, 66, 1, "enum_CFG_NEXT"], [66, 196, 1, "enum_CFG_NEXT"], [66, 73, 1, "enum_CFG_NEXT"], [73, 84, 1, "enum_CFG_NEXT"], [84, 101, 1, "enum_CFG_NEXT"], [101, 115, 1, "enum_CFG_NEXT"], [115, 66, 1, "enum_CFG_NEXT"], [115, 119, 1, "enum_CFG_NEXT"], [119, 128, 1, "enum_CFG_NEXT"], [128, 135, 1, "enum_CFG_NEXT"], [135, 147, 1, "enum_CFG_NEXT"], [147, 155, 1, "enum_CFG_NEXT"], [155, 170, 1, "enum_CFG_NEXT"], [170, 187, 1, "enum_CFG_NEXT"], [187, 66, 1, "enum_CFG_NEXT"], [196, 202, 1, "enum_CFG_NEXT"], [202, 210, 1, "enum_CFG_NEXT"], [210, 228, 1, "enum_CFG_NEXT"], [228, 235, 1, "enum_CFG_NEXT"], [235, 250, 1, "enum_CFG_NEXT"], [250, 257, 1, "enum_CFG_NEXT"], [15, 2, 3, "enum_LAST_WRITE"], [21, 15, 2, "enum_LAST_READ"], [21, 2, 3, "enum_LAST_WRITE"], [35, 4, 3, "enum_LAST_WRITE"], [30, 35, 2, "enum_LAST_READ"], [30, 4, 3, "enum_LAST_WRITE"], [39, 28, 2, "enum_LAST_READ"], [44, 13, 3, "enum_LAST_WRITE"], [50, 44, 2, "enum_LAST_READ"], [50, 13, 3, "enum_LAST_WRITE"], [58, 30, 2, "enum_LAST_READ"], [58, 4, 3, "enum_LAST_WRITE"], [68, 58, 2, "enum_LAST_READ"], [68, 4, 3, "enum_LAST_WRITE"], [66, 114, 2, "enum_LAST_READ"], [66, 124, 2, "enum_LAST_READ"], [66, 66, 3, "enum_LAST_WRITE"], [76, 87, 2, "enum_LAST_READ"], [80, 142, 2, "enum_LAST_READ"], [80, 68, 2, "enum_LAST_READ"], [80, 80, 2, "enum_LAST_READ"], [80, 4, 3, "enum_LAST_WRITE"], [82, 114, 2, "enum_LAST_READ"], [82, 124, 2, "enum_LAST_READ"], [82, 66, 3, "enum_LAST_WRITE"], [74, 106, 2, "enum_LAST_READ"], [74, 160, 2, "enum_LAST_READ"], [74, 74, 3, "enum_LAST_WRITE"], [87, 76, 2, "enum_LAST_READ"], [91, 82, 2, "enum_LAST_READ"], [91, 66, 3, "enum_LAST_WRITE"], [94, 91, 2, "enum_LAST_READ"], [94, 66, 3, "enum_LAST_WRITE"], [98, 98, 2, "enum_LAST_READ"], [98, 6, 3, "enum_LAST_WRITE"], [85, 110, 2, "enum_LAST_READ"], [85, 85, 3, "enum_LAST_WRITE"], [102, 188, 2, "enum_LAST_READ"], [102, 50, 2, "enum_LAST_READ"], [102, 102, 2, "enum_LAST_READ"], [102, 13, 3, "enum_LAST_WRITE"], [106, 106, 2, "enum_LAST_READ"], [106, 160, 2, "enum_LAST_READ"], [106, 74, 3, "enum_LAST_WRITE"], [108, 108, 2, "enum_LAST_READ"], [108, 19, 3, "enum_LAST_WRITE"], [110, 110, 2, "enum_LAST_READ"], [110, 85, 3, "enum_LAST_WRITE"], [114, 94, 2, "enum_LAST_READ"], [114, 66, 3, "enum_LAST_WRITE"], [122, 122, 2, "enum_LAST_READ"], [124, 114, 2, "enum_LAST_READ"], [124, 66, 3, "enum_LAST_WRITE"], [120, 192, 2, "enum_LAST_READ"], [120, 120, 3, "enum_LAST_WRITE"], [129, 192, 2, "enum_LAST_READ"], [129, 120, 3, "enum_LAST_WRITE"], [133, 133, 2, "enum_LAST_READ"], [133, 25, 3, "enum_LAST_WRITE"], [136, 129, 2, "enum_LAST_READ"], [136, 120, 3, "enum_LAST_WRITE"], [140, 140, 2, "enum_LAST_READ"], [140, 56, 2, "enum_LAST_READ"], [142, 80, 2, "enum_LAST_READ"], [142, 4, 3, "enum_LAST_WRITE"], [150, 136, 2, "enum_LAST_READ"], [150, 120, 3, "enum_LAST_WRITE"], [148, 181, 2, "enum_LAST_READ"], [148, 148, 3, "enum_LAST_WRITE"], [156, 181, 2, "enum_LAST_READ"], [156, 148, 3, "enum_LAST_WRITE"], [160, 106, 2, "enum_LAST_READ"], [160, 74, 3, "enum_LAST_WRITE"], [171, 150, 2, "enum_LAST_READ"], [171, 120, 3, "enum_LAST_WRITE"], [175, 156, 2, "enum_LAST_READ"], [175, 148, 3, "enum_LAST_WRITE"], [181, 175, 2, "enum_LAST_READ"], [181, 148, 3, "enum_LAST_WRITE"], [188, 102, 2, "enum_LAST_READ"], [188, 13, 3, "enum_LAST_WRITE"], [192, 171, 2, "enum_LAST_READ"], [192, 120, 3, "enum_LAST_WRITE"], [199, 142, 2, "enum_LAST_READ"], [199, 68, 2, "enum_LAST_READ"], [199, 80, 2, "enum_LAST_READ"], [199, 4, 3, "enum_LAST_WRITE"], [205, 188, 2, "enum_LAST_READ"], [205, 50, 2, "enum_LAST_READ"], [205, 102, 2, "enum_LAST_READ"], [205, 13, 3, "enum_LAST_WRITE"], [213, 203, 3, "enum_LAST_WRITE"], [219, 197, 3, "enum_LAST_WRITE"], [221, 219, 2, "enum_LAST_READ"], [221, 197, 3, "enum_LAST_WRITE"], [223, 221, 2, "enum_LAST_READ"], [223, 197, 3, "enum_LAST_WRITE"], [225, 223, 2, "enum_LAST_READ"], [225, 197, 3, "enum_LAST_WRITE"], [211, 213, 2, "enum_LAST_READ"], [211, 203, 3, "enum_LAST_WRITE"], [229, 205, 2, "enum_LAST_READ"], [229, 13, 3, "enum_LAST_WRITE"], [233, 213, 2, "enum_LAST_READ"], [233, 211, 3, "enum_LAST_WRITE"], [236, 21, 2, "enum_LAST_READ"], [236, 2, 3, "enum_LAST_WRITE"], [240, 229, 2, "enum_LAST_READ"], [240, 13, 3, "enum_LAST_WRITE"], [251, 236, 2, "enum_LAST_READ"], [251, 2, 3, "enum_LAST_WRITE"], [255, 240, 2, "enum_LAST_READ"], [255, 13, 3, "enum_LAST_WRITE"], [258, 251, 2, "enum_LAST_READ"], [258, 2, 3, "enum_LAST_WRITE"], [13, 15, 4, "enum_COMPUTED_FROM"], [19, 21, 4, "enum_COMPUTED_FROM"], [25, 35, 4, "enum_COMPUTED_FROM"], [25, 28, 4, "enum_COMPUTED_FROM"], [25, 39, 4, "enum_COMPUTED_FROM"], [25, 30, 4, "enum_COMPUTED_FROM"], [197, 199, 4, "enum_COMPUTED_FROM"], [203, 205, 4, "enum_COMPUTED_FROM"], [211, 213, 4, "enum_COMPUTED_FROM"], [211, 217, 4, "enum_COMPUTED_FROM"], [211, 219, 4, "enum_COMPUTED_FROM"], [211, 221, 4, "enum_COMPUTED_FROM"], [211, 223, 4, "enum_COMPUTED_FROM"], [211, 225, 4, "enum_COMPUTED_FROM"], [74, 80, 4, "enum_COMPUTED_FROM"], [74, 82, 4, "enum_COMPUTED_FROM"], [74, 76, 4, "enum_COMPUTED_FROM"], [85, 91, 4, "enum_COMPUTED_FROM"], [85, 87, 4, "enum_COMPUTED_FROM"], [85, 98, 4, "enum_COMPUTED_FROM"], [85, 94, 4, "enum_COMPUTED_FROM"], [120, 122, 4, "enum_COMPUTED_FROM"], [120, 124, 4, "enum_COMPUTED_FROM"], [148, 150, 4, "enum_COMPUTED_FROM"]], "error_location": 142, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/morinted/plover_layout_display.git", "old_path": "layout_display/layout_graphics.py", "hash": "8f071445dd2da69bfec2f5caf184627e713fd395", "code": "def update_view(self, steno_layout: StenoLayout, stroke: List[str]):\n    ''' Updates the layout display for the provided layout and stroke '''\n\n    scene: QGraphicsScene = self.graphics_scene\n    pen: Any = self._scene_pen\n    font = QFont(steno_layout.font) if steno_layout.font else QFont()\n    # Clear all items from the scene. Could be more efficient...\n    scene.clear()\n    scene.setBackgroundBrush(QBrush(QColor(steno_layout.background_color)))\n\n    for key in steno_layout.keys:\n        path: Any = LayoutDisplayView._create_key_path(steno_layout, key)\n        brush: QFont = LayoutDisplayView._get_key_path_brush(key, (key.name in stroke))\n\n        # Add the key path before its label, then center the label\n        scene.addPath(path, pen, brush)\n\n        if key.label:\n            label: QGraphicsTextItem = QGraphicsTextItem(key.label)\n            label.setFont(font)\n            label.setDefaultTextColor(QColor(steno_layout.font_color))\n\n            label_rect = label.boundingRect()\n            label_rect.moveCenter(path.boundingRect().center())\n            label.setPos(label_rect.x(), label_rect.y())\n            scene.addItem(label)\n\n    # Scene rects don't shrink when items are removed, so need to manually\n    # set it to the current size needed by the contained items + margin\n    margin: float = steno_layout.margin\n    scene_rect: Any = scene.itemsBoundingRect()\n    scene_rect = scene_rect.marginsAdded(QMarginsF(margin, margin,\n                                                margin, margin))\n    scene.setSceneRect(scene_rect)\n    self.fitInView(scene.sceneRect(), Qt.KeepAspectRatio)\n\n    self.setScene(scene)\n    self.show()\n", "rewrite": "ReplaceText(target='key' @(61,49)->(61,61))", "error_line": 20, "has_bug": true, "code_full": "from typing import Any, List, Optional\n\nfrom PyQt5.QtCore import QMarginsF, Qt\nfrom PyQt5.QtGui import QBrush, QColor, QFont\nfrom PyQt5.QtWidgets import QGraphicsScene, QGraphicsTextItem\n\n\nclass Key:\n    name: str\n    label: Optional[str]\n\nclass StenoLayout:\n    keys: List[Key]\n    font: str\n    background_color: str\n    font_color: str\n    margin: int\n\nclass LayoutDisplayView:\n    graphics_scene: QGraphicsScene\n    _scene_pen: Any\n\n    @staticmethod\n    def _create_key_path(steno_layout: StenoLayout, key: Key) -> Any:\n        pass\n\n    @staticmethod\n    def _get_key_path_brush(key: Key, is_stroked: bool) -> QBrush:\n        QBrush()\n\n    def fitInView(self, rect: Any, aspectRatioMode: int):\n        pass\n\n    def setScene(self, scene: QGraphicsScene):\n        pass\n\n    def show(self):\n        pass\n\n    def update_view(self, steno_layout: StenoLayout, stroke: List[str]):\n        ''' Updates the layout display for the provided layout and stroke '''\n\n        scene: QGraphicsScene = self.graphics_scene\n        pen: Any = self._scene_pen\n        font = QFont(steno_layout.font) if steno_layout.font else QFont()\n        # Clear all items from the scene. Could be more efficient...\n        scene.clear()\n        scene.setBackgroundBrush(QBrush(QColor(steno_layout.background_color)))\n\n        for key in steno_layout.keys:\n            path: Any = LayoutDisplayView._create_key_path(steno_layout, key)\n            brush: QFont = LayoutDisplayView._get_key_path_brush(key, (key.name in stroke))\n\n            # Add the key path before its label, then center the label\n            scene.addPath(path, pen, brush)\n\n            if key.label:\n                label: QGraphicsTextItem = QGraphicsTextItem(key.label)\n                label.setFont(font)\n                label.setDefaultTextColor(QColor(steno_layout.font_color))\n\n                label_rect = label.boundingRect()\n                label_rect.moveCenter(path.boundingRect().center())\n                label.setPos(label_rect.x(), label_rect.y())\n                scene.addItem(label)\n\n        # Scene rects don't shrink when items are removed, so need to manually\n        # set it to the current size needed by the contained items + margin\n        margin: float = steno_layout.margin\n        scene_rect: Any = scene.itemsBoundingRect()\n        scene_rect = scene_rect.marginsAdded(QMarginsF(margin, margin,\n                                                    margin, margin))\n        scene.setSceneRect(scene_rect)\n        self.fitInView(scene.sceneRect(), Qt.KeepAspectRatio)\n\n        self.setScene(scene)\n        self.show()\n", "error_location_char": [925, 937], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def inject_parameter_values(", "bricks", ",", "param_values", ")", ":", "#NEWLINE#", "#INDENT#", "'Inject parameter values into a bricks hierarchy.\\n\\n    Parameters\\n    ----------\\n    bricks : Brick or Selector\\n        The top bricks.\\n    param_values : dict of (parameter name, numpy array) pairs\\n        The parameter values.\\n\\n    '", "#NEWLINE#", "if", "isinstance", "(", "bricks", ",", "Brick", ")", ":", "#NEWLINE#", "#INDENT#", "bricks", "=", "Selector", "(", "[", "bricks", "]", ")", "#NEWLINE#", "#UNINDENT#", "if", "(", "not", "isinstance", "(", "bricks", ",", "Selector", ")", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "ValueError", "#NEWLINE#", "#UNINDENT#", "for", "(", "name", ",", "value", ")", "in", "param_values", ".", "items", "(", ")", ":", "#NEWLINE#", "#INDENT#", "selected", "=", "bricks", ".", "select", "(", "name", ")", "#NEWLINE#", "if", "(", "len", "(", "selected", ")", "==", "0", ")", ":", "#NEWLINE#", "#INDENT#", "logger", ".", "error", "(", "'Unknown parameter {}'", ".", "format", "(", "name", ")", ")", "#NEWLINE#", "#UNINDENT#", "if", "(", "not", "(", "len", "(", "selected", ")", "==", "1", ")", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "ValueError", "#NEWLINE#", "#UNINDENT#", "selected", "=", "selected", "[", "0", "]", "#NEWLINE#", "assert", "(", "selected", ".", "get_value", "(", "borrow", "=", "True", ",", "return_internal_type", "=", "True", ")", ".", "shape", "==", "value", ".", "shape", ")", "#NEWLINE#", "selected", ".", "set_value", "(", "value", ")", "#NEWLINE#", "#UNINDENT#", "params", "=", "bricks", ".", "get_params", "(", ")", "#NEWLINE#", "for", "name", "in", "params", ".", "keys", "(", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "name", "not in", "params", ")", ":", "#NEWLINE#", "#INDENT#", "logger", ".", "error", "(", "'No value is provided for the parameter {}'", ".", "format", "(", "name", ")", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [8, 9, 7, "enum_FIELD"], [11, 15, 7, "enum_FIELD"], [31, 33, 7, "enum_FIELD"], [54, 51, 7, "enum_FIELD"], [54, 58, 7, "enum_FIELD"], [152, 158, 7, "enum_FIELD"], [163, 162, 7, "enum_FIELD"], [163, 167, 7, "enum_FIELD"], [15, 12, 7, "enum_FIELD"], [20, 24, 7, "enum_FIELD"], [33, 37, 7, "enum_FIELD"], [44, 45, 7, "enum_FIELD"], [58, 56, 7, "enum_FIELD"], [62, 68, 7, "enum_FIELD"], [72, 78, 7, "enum_FIELD"], [97, 99, 7, "enum_FIELD"], [115, 119, 7, "enum_FIELD"], [123, 139, 7, "enum_FIELD"], [144, 148, 7, "enum_FIELD"], [158, 156, 7, "enum_FIELD"], [167, 165, 7, "enum_FIELD"], [172, 175, 7, "enum_FIELD"], [24, 23, 7, "enum_FIELD"], [37, 34, 7, "enum_FIELD"], [56, 55, 7, "enum_FIELD"], [68, 66, 7, "enum_FIELD"], [78, 75, 7, "enum_FIELD"], [83, 87, 7, "enum_FIELD"], [99, 105, 7, "enum_FIELD"], [112, 113, 7, "enum_FIELD"], [119, 118, 7, "enum_FIELD"], [119, 120, 7, "enum_FIELD"], [139, 137, 7, "enum_FIELD"], [148, 146, 7, "enum_FIELD"], [156, 155, 7, "enum_FIELD"], [165, 164, 7, "enum_FIELD"], [175, 174, 7, "enum_FIELD"], [180, 184, 7, "enum_FIELD"], [66, 65, 7, "enum_FIELD"], [75, 74, 7, "enum_FIELD"], [87, 85, 7, "enum_FIELD"], [105, 102, 7, "enum_FIELD"], [137, 132, 7, "enum_FIELD"], [141, 140, 7, "enum_FIELD"], [146, 145, 7, "enum_FIELD"], [184, 182, 7, "enum_FIELD"], [85, 84, 7, "enum_FIELD"], [91, 89, 7, "enum_FIELD"], [102, 101, 7, "enum_FIELD"], [132, 126, 7, "enum_FIELD"], [182, 181, 7, "enum_FIELD"], [188, 186, 7, "enum_FIELD"], [89, 88, 7, "enum_FIELD"], [126, 125, 7, "enum_FIELD"], [129, 131, 7, "enum_FIELD"], [133, 135, 7, "enum_FIELD"], [186, 185, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [14, 2, 10, "enum_LAST_LEXICAL_USE"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 20, 9, "enum_NEXT_SYNTAX"], [21, 14, 10, "enum_LAST_LEXICAL_USE"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [26, 21, 10, "enum_LAST_LEXICAL_USE"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [34, 12, 10, "enum_LAST_LEXICAL_USE"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [36, 26, 10, "enum_LAST_LEXICAL_USE"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [38, 23, 10, "enum_LAST_LEXICAL_USE"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [55, 4, 10, "enum_LAST_LEXICAL_USE"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [65, 36, 10, "enum_LAST_LEXICAL_USE"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [69, 50, 10, "enum_LAST_LEXICAL_USE"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [76, 63, 10, "enum_LAST_LEXICAL_USE"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [92, 69, 10, "enum_LAST_LEXICAL_USE"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [101, 74, 10, "enum_LAST_LEXICAL_USE"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [103, 76, 10, "enum_LAST_LEXICAL_USE"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 112, 9, "enum_NEXT_SYNTAX"], [113, 45, 10, "enum_LAST_LEXICAL_USE"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 115, 9, "enum_NEXT_SYNTAX"], [116, 103, 10, "enum_LAST_LEXICAL_USE"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [118, 116, 10, "enum_LAST_LEXICAL_USE"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [125, 118, 10, "enum_LAST_LEXICAL_USE"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [140, 52, 10, "enum_LAST_LEXICAL_USE"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [145, 125, 10, "enum_LAST_LEXICAL_USE"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [149, 140, 10, "enum_LAST_LEXICAL_USE"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [155, 65, 10, "enum_LAST_LEXICAL_USE"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 161, 9, "enum_NEXT_SYNTAX"], [162, 92, 10, "enum_LAST_LEXICAL_USE"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [164, 153, 10, "enum_LAST_LEXICAL_USE"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [174, 162, 10, "enum_LAST_LEXICAL_USE"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [176, 164, 10, "enum_LAST_LEXICAL_USE"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 180, 9, "enum_NEXT_SYNTAX"], [181, 84, 10, "enum_LAST_LEXICAL_USE"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 184, 9, "enum_NEXT_SYNTAX"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [187, 188, 9, "enum_NEXT_SYNTAX"], [189, 174, 10, "enum_LAST_LEXICAL_USE"], [188, 189, 9, "enum_NEXT_SYNTAX"], [189, 190, 9, "enum_NEXT_SYNTAX"], [190, 191, 9, "enum_NEXT_SYNTAX"], [3, 8, 1, "enum_CFG_NEXT"], [8, 15, 1, "enum_CFG_NEXT"], [15, 33, 1, "enum_CFG_NEXT"], [15, 20, 1, "enum_CFG_NEXT"], [20, 33, 1, "enum_CFG_NEXT"], [33, 44, 1, "enum_CFG_NEXT"], [33, 58, 1, "enum_CFG_NEXT"], [58, 51, 1, "enum_CFG_NEXT"], [51, 62, 1, "enum_CFG_NEXT"], [51, 152, 1, "enum_CFG_NEXT"], [62, 78, 1, "enum_CFG_NEXT"], [78, 99, 1, "enum_CFG_NEXT"], [78, 83, 1, "enum_CFG_NEXT"], [83, 99, 1, "enum_CFG_NEXT"], [99, 115, 1, "enum_CFG_NEXT"], [99, 112, 1, "enum_CFG_NEXT"], [115, 123, 1, "enum_CFG_NEXT"], [123, 144, 1, "enum_CFG_NEXT"], [144, 51, 1, "enum_CFG_NEXT"], [152, 167, 1, "enum_CFG_NEXT"], [167, 162, 1, "enum_CFG_NEXT"], [162, 175, 1, "enum_CFG_NEXT"], [175, 162, 1, "enum_CFG_NEXT"], [175, 180, 1, "enum_CFG_NEXT"], [180, 162, 1, "enum_CFG_NEXT"], [14, 2, 3, "enum_LAST_WRITE"], [26, 14, 2, "enum_LAST_READ"], [26, 2, 3, "enum_LAST_WRITE"], [21, 26, 2, "enum_LAST_READ"], [21, 2, 3, "enum_LAST_WRITE"], [34, 12, 2, "enum_LAST_READ"], [36, 14, 2, "enum_LAST_READ"], [36, 26, 2, "enum_LAST_READ"], [36, 2, 3, "enum_LAST_WRITE"], [36, 21, 3, "enum_LAST_WRITE"], [38, 23, 2, "enum_LAST_READ"], [55, 4, 3, "enum_LAST_WRITE"], [50, 69, 2, "enum_LAST_READ"], [50, 92, 2, "enum_LAST_READ"], [50, 50, 3, "enum_LAST_WRITE"], [52, 149, 2, "enum_LAST_READ"], [52, 52, 3, "enum_LAST_WRITE"], [65, 65, 2, "enum_LAST_READ"], [65, 36, 2, "enum_LAST_READ"], [65, 2, 3, "enum_LAST_WRITE"], [65, 21, 3, "enum_LAST_WRITE"], [69, 69, 2, "enum_LAST_READ"], [69, 92, 2, "enum_LAST_READ"], [69, 50, 3, "enum_LAST_WRITE"], [63, 145, 2, "enum_LAST_READ"], [63, 116, 3, "enum_LAST_WRITE"], [74, 101, 2, "enum_LAST_READ"], [76, 145, 2, "enum_LAST_READ"], [76, 63, 3, "enum_LAST_WRITE"], [84, 84, 2, "enum_LAST_READ"], [92, 69, 2, "enum_LAST_READ"], [92, 50, 3, "enum_LAST_WRITE"], [101, 74, 2, "enum_LAST_READ"], [103, 76, 2, "enum_LAST_READ"], [103, 63, 3, "enum_LAST_WRITE"], [118, 103, 2, "enum_LAST_READ"], [118, 63, 3, "enum_LAST_WRITE"], [116, 118, 2, "enum_LAST_READ"], [116, 63, 3, "enum_LAST_WRITE"], [125, 118, 2, "enum_LAST_READ"], [125, 116, 3, "enum_LAST_WRITE"], [140, 149, 2, "enum_LAST_READ"], [140, 52, 3, "enum_LAST_WRITE"], [145, 125, 2, "enum_LAST_READ"], [145, 116, 3, "enum_LAST_WRITE"], [149, 140, 2, "enum_LAST_READ"], [149, 52, 3, "enum_LAST_WRITE"], [155, 65, 2, "enum_LAST_READ"], [155, 36, 2, "enum_LAST_READ"], [155, 2, 3, "enum_LAST_WRITE"], [155, 21, 3, "enum_LAST_WRITE"], [164, 153, 3, "enum_LAST_WRITE"], [162, 189, 2, "enum_LAST_READ"], [162, 69, 2, "enum_LAST_READ"], [162, 174, 2, "enum_LAST_READ"], [162, 92, 2, "enum_LAST_READ"], [162, 162, 3, "enum_LAST_WRITE"], [162, 50, 3, "enum_LAST_WRITE"], [174, 189, 2, "enum_LAST_READ"], [174, 69, 2, "enum_LAST_READ"], [174, 174, 2, "enum_LAST_READ"], [174, 92, 2, "enum_LAST_READ"], [174, 162, 3, "enum_LAST_WRITE"], [176, 176, 2, "enum_LAST_READ"], [176, 164, 2, "enum_LAST_READ"], [176, 153, 3, "enum_LAST_WRITE"], [181, 84, 2, "enum_LAST_READ"], [181, 181, 2, "enum_LAST_READ"], [189, 174, 2, "enum_LAST_READ"], [189, 162, 3, "enum_LAST_WRITE"], [153, 155, 4, "enum_COMPUTED_FROM"], [21, 23, 4, "enum_COMPUTED_FROM"], [21, 26, 4, "enum_COMPUTED_FROM"], [63, 69, 4, "enum_COMPUTED_FROM"], [63, 65, 4, "enum_COMPUTED_FROM"], [116, 118, 4, "enum_COMPUTED_FROM"]], "error_location": 176, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/mila-udem/blocks.git", "old_path": "blocks/serialization.py", "hash": "a76f7c437ff32103fd9a66c31a1fbcc963dcc82e", "code": "def inject_parameter_values(bricks: Union[Brick, Selector, Any], param_values: Dict[str, np.ndarray]):\n    \"\"\"Inject parameter values into a bricks hierarchy.\n\n    Parameters\n    ----------\n    bricks : Brick or Selector\n        The top bricks.\n    param_values : dict of (parameter name, numpy array) pairs\n        The parameter values.\n\n    \"\"\"\n    if isinstance(bricks, Brick):\n        bricks = Selector([bricks])\n    if not isinstance(bricks, Selector):\n        raise ValueError\n\n    bricks: Selector = bricks\n    for name, value in param_values.items():\n        selected: List[Brick] = bricks.select(name)\n        if len(selected) == 0:\n            logger.error(\"Unknown parameter {}\".format(name))\n        if not len(selected) == 1:\n            raise ValueError\n        selected: Brick = selected[0]\n\n        assert selected.get_value(\n            borrow=True, return_internal_type=True).shape == value.shape\n        selected.set_value(value)\n\n    params = bricks.get_params()\n    for name in params.keys():\n        if name not in params:\n            logger.error(\"No value is provided for the parameter {}\"\n                         .format(name))\n", "rewrite": "ReplaceText(target='param_values' @(108,23)->(108,29))", "error_line": 30, "has_bug": true, "code_full": "import logging\nfrom typing import Any, Dict, List, Union\n\nimport numpy as np\n\nlogger = logging.getLogger(__name__)\n\n\nclass Brick:\n    def get_value(self, borrow: bool, return_internal_type: bool) -> np.ndarray:\n        return np.array([])\n    \n    def set_value(self, value: np.ndarray):\n        pass\n\n\nclass Selector:\n    bricks: List[Brick]\n\n    def __init__(self, bricks: List[Brick]):\n        pass\n\n    def select(self, name: str) -> List[Brick]:\n        return []\n    \n    def get_params(self) -> Dict[str, np.ndarray]:\n        return {}\n\n\ndef inject_parameter_values(bricks: Union[Brick, Selector, Any], param_values: Dict[str, np.ndarray]):\n    \"\"\"Inject parameter values into a bricks hierarchy.\n\n    Parameters\n    ----------\n    bricks : Brick or Selector\n        The top bricks.\n    param_values : dict of (parameter name, numpy array) pairs\n        The parameter values.\n\n    \"\"\"\n    if isinstance(bricks, Brick):\n        bricks = Selector([bricks])\n    if not isinstance(bricks, Selector):\n        raise ValueError\n\n    bricks: Selector = bricks\n    for name, value in param_values.items():\n        selected: List[Brick] = bricks.select(name)\n        if len(selected) == 0:\n            logger.error(\"Unknown parameter {}\".format(name))\n        if not len(selected) == 1:\n            raise ValueError\n        selected: Brick = selected[0]\n\n        assert selected.get_value(\n            borrow=True, return_internal_type=True).shape == value.shape\n        selected.set_value(value)\n\n    params = bricks.get_params()\n    for name in params.keys():\n        if name not in params:\n            logger.error(\"No value is provided for the parameter {}\"\n                         .format(name))\n", "error_location_char": [1037, 1043], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def set_local_address(", "ams_netid", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    :summary: Set the local NetID (**Linux only**).\\n\\n    :param str: new AmsNetID\\n    :rtype: None\\n\\n    '", "#NEWLINE#", "if", "isinstance", "(", "ams_netid", ",", "str", ")", ":", "#NEWLINE#", "#INDENT#", "ams_netid_st", "=", "parse_ams_netid", "(", "ams_netid", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "ams_netid_st", "=", "ams_netid", "#NEWLINE#", "#UNINDENT#", "assert", "isinstance", "(", "ams_netid", ",", "SAmsNetId", ")", "#NEWLINE#", "if", "linux", ":", "#NEWLINE#", "#INDENT#", "return", "adsSetLocalAddress", "(", "ams_netid_st", ")", "#NEWLINE#", "#UNINDENT#", "raise", "ADSError", "(", "'SetLocalAddress is not supported for Windows clients.'", ")"], "edges": [[6, 7, 7, "enum_FIELD"], [16, 13, 7, "enum_FIELD"], [36, 40, 7, "enum_FIELD"], [44, 45, 7, "enum_FIELD"], [56, 58, 7, "enum_FIELD"], [13, 10, 7, "enum_FIELD"], [18, 22, 7, "enum_FIELD"], [30, 33, 7, "enum_FIELD"], [40, 37, 7, "enum_FIELD"], [49, 51, 7, "enum_FIELD"], [58, 57, 7, "enum_FIELD"], [22, 21, 7, "enum_FIELD"], [51, 50, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [12, 2, 10, "enum_LAST_LEXICAL_USE"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [23, 12, 10, "enum_LAST_LEXICAL_USE"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 30, 9, "enum_NEXT_SYNTAX"], [31, 19, 10, "enum_LAST_LEXICAL_USE"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [33, 23, 10, "enum_LAST_LEXICAL_USE"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 36, 9, "enum_NEXT_SYNTAX"], [37, 10, 10, "enum_LAST_LEXICAL_USE"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [39, 33, 10, "enum_LAST_LEXICAL_USE"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [52, 31, 10, "enum_LAST_LEXICAL_USE"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [6, 13, 1, "enum_CFG_NEXT"], [13, 30, 1, "enum_CFG_NEXT"], [13, 18, 1, "enum_CFG_NEXT"], [18, 36, 1, "enum_CFG_NEXT"], [30, 36, 1, "enum_CFG_NEXT"], [36, 45, 1, "enum_CFG_NEXT"], [45, 56, 1, "enum_CFG_NEXT"], [45, 49, 1, "enum_CFG_NEXT"], [12, 2, 3, "enum_LAST_WRITE"], [23, 12, 2, "enum_LAST_READ"], [23, 2, 3, "enum_LAST_WRITE"], [33, 12, 2, "enum_LAST_READ"], [33, 2, 3, "enum_LAST_WRITE"], [37, 10, 2, "enum_LAST_READ"], [39, 33, 2, "enum_LAST_READ"], [39, 23, 2, "enum_LAST_READ"], [39, 2, 3, "enum_LAST_WRITE"], [52, 31, 3, "enum_LAST_WRITE"], [52, 19, 3, "enum_LAST_WRITE"], [19, 21, 4, "enum_COMPUTED_FROM"], [19, 23, 4, "enum_COMPUTED_FROM"], [31, 33, 4, "enum_COMPUTED_FROM"]], "error_location": 39, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/MrLeeh/pyads.git", "old_path": "pyads/ads.py", "hash": "d14fd2a7bb2d4b784a4f6a47b6981ba2a86b699c", "code": "def set_local_address(ams_netid: Union[str, SAmsNetId]):\n    \"\"\"\n    :summary: Set the local NetID (**Linux only**).\n\n    :param str: new AmsNetID\n    :rtype: None\n\n    \"\"\"\n    if isinstance(ams_netid, str):\n        ams_netid_st: SAmsNetId = parse_ams_netid(ams_netid)\n    else:\n        ams_netid_st: SAmsNetId = ams_netid\n\n    assert isinstance(ams_netid, SAmsNetId)\n\n    if linux:\n        return adsSetLocalAddress(ams_netid_st)\n    raise ADSError('SetLocalAddress is not supported for Windows clients.')\n", "rewrite": "ReplaceText(target='ams_netid_st' @(100,22)->(100,31))", "error_line": 13, "has_bug": true, "code_full": "from typing import Union\n\n\nclass SAmsNetId:\n    pass\n\nclass ADSError(Exception):\n    pass\n\n\ndef parse_ams_netid(ams_netid: str) -> SAmsNetId:\n    return SAmsNetId()\n\n\ndef adsSetLocalAddress(ams_netid: SAmsNetId):\n    pass\n\n\nlinux: bool = True\n\n\ndef set_local_address(ams_netid: Union[str, SAmsNetId]):\n    \"\"\"\n    :summary: Set the local NetID (**Linux only**).\n\n    :param str: new AmsNetID\n    :rtype: None\n\n    \"\"\"\n    if isinstance(ams_netid, str):\n        ams_netid_st: SAmsNetId = parse_ams_netid(ams_netid)\n    else:\n        ams_netid_st: SAmsNetId = ams_netid\n\n    assert isinstance(ams_netid, SAmsNetId)\n\n    if linux:\n        return adsSetLocalAddress(ams_netid_st)\n    raise ADSError('SetLocalAddress is not supported for Windows clients.')\n", "error_location_char": [346, 355], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def import_string(", "dotted_path", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    Import a dotted module path and return the attribute/class designated by the\\n    last name in the path. Raise ImportError if the import failed.\\n    '", "#NEWLINE#", "try", ":", "#NEWLINE#", "#INDENT#", "(", "module_path", ",", "class_name", ")", "=", "dotted_path", ".", "rsplit", "(", "'.'", ",", "1", ")", "#NEWLINE#", "#UNINDENT#", "except", "ValueError", ":", "#NEWLINE#", "#INDENT#", "msg", "=", "(", "\"%s doesn't look like a module path\"", "%", "dotted_path", ")", "#NEWLINE#", "six", ".", "reraise", "(", "ImportError", ",", "ImportError", "(", "msg", ")", ",", "sys", ".", "exc_info", "(", ")", "[", "2", "]", ")", "#NEWLINE#", "#UNINDENT#", "module", "=", "import_module", "(", "module_path", ")", "#NEWLINE#", "try", ":", "#NEWLINE#", "#INDENT#", "return", "getattr", "(", "module", ",", "class_name", ")", "#NEWLINE#", "#UNINDENT#", "except", "AttributeError", ":", "#NEWLINE#", "#INDENT#", "msg", "=", "(", "'Module \"%s\" does not define a \"%s\" attribute/class'", "%", "(", "dotted_path", ",", "class_name", ")", ")", "#NEWLINE#", "six", ".", "reraise", "(", "ImportError", ",", "ImportError", "(", "msg", ")", ",", "sys", ".", "exc_info", "(", ")", "[", "2", "]", ")"], "edges": [[6, 7, 7, "enum_FIELD"], [63, 67, 7, "enum_FIELD"], [12, 24, 7, "enum_FIELD"], [29, 30, 7, "enum_FIELD"], [67, 66, 7, "enum_FIELD"], [75, 79, 7, "enum_FIELD"], [84, 85, 7, "enum_FIELD"], [24, 20, 7, "enum_FIELD"], [33, 38, 7, "enum_FIELD"], [41, 47, 7, "enum_FIELD"], [79, 76, 7, "enum_FIELD"], [88, 93, 7, "enum_FIELD"], [100, 106, 7, "enum_FIELD"], [20, 19, 7, "enum_FIELD"], [38, 37, 7, "enum_FIELD"], [38, 39, 7, "enum_FIELD"], [47, 43, 7, "enum_FIELD"], [93, 92, 7, "enum_FIELD"], [93, 96, 7, "enum_FIELD"], [106, 102, 7, "enum_FIELD"], [43, 42, 7, "enum_FIELD"], [49, 48, 7, "enum_FIELD"], [58, 56, 7, "enum_FIELD"], [58, 59, 7, "enum_FIELD"], [102, 101, 7, "enum_FIELD"], [108, 107, 7, "enum_FIELD"], [117, 115, 7, "enum_FIELD"], [117, 118, 7, "enum_FIELD"], [56, 54, 7, "enum_FIELD"], [115, 113, 7, "enum_FIELD"], [54, 53, 7, "enum_FIELD"], [113, 112, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [19, 2, 10, "enum_LAST_LEXICAL_USE"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [39, 19, 10, "enum_LAST_LEXICAL_USE"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [48, 46, 10, "enum_LAST_LEXICAL_USE"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [50, 34, 10, "enum_LAST_LEXICAL_USE"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [68, 14, 10, "enum_LAST_LEXICAL_USE"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [78, 64, 10, "enum_LAST_LEXICAL_USE"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [80, 16, 10, "enum_LAST_LEXICAL_USE"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 88, 9, "enum_NEXT_SYNTAX"], [89, 50, 10, "enum_LAST_LEXICAL_USE"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [95, 39, 10, "enum_LAST_LEXICAL_USE"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [97, 80, 10, "enum_LAST_LEXICAL_USE"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [101, 42, 10, "enum_LAST_LEXICAL_USE"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [105, 48, 10, "enum_LAST_LEXICAL_USE"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [107, 105, 10, "enum_LAST_LEXICAL_USE"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [109, 89, 10, "enum_LAST_LEXICAL_USE"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [112, 53, 10, "enum_LAST_LEXICAL_USE"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [6, 12, 1, "enum_CFG_NEXT"], [12, 63, 1, "enum_CFG_NEXT"], [12, 30, 1, "enum_CFG_NEXT"], [30, 33, 1, "enum_CFG_NEXT"], [33, 41, 1, "enum_CFG_NEXT"], [41, 63, 1, "enum_CFG_NEXT"], [63, 75, 1, "enum_CFG_NEXT"], [75, 85, 1, "enum_CFG_NEXT"], [85, 88, 1, "enum_CFG_NEXT"], [88, 100, 1, "enum_CFG_NEXT"], [19, 2, 3, "enum_LAST_WRITE"], [39, 19, 2, "enum_LAST_READ"], [39, 2, 3, "enum_LAST_WRITE"], [48, 46, 2, "enum_LAST_READ"], [50, 34, 3, "enum_LAST_WRITE"], [68, 14, 3, "enum_LAST_WRITE"], [78, 64, 3, "enum_LAST_WRITE"], [80, 16, 3, "enum_LAST_WRITE"], [95, 39, 2, "enum_LAST_READ"], [95, 19, 2, "enum_LAST_READ"], [95, 2, 3, "enum_LAST_WRITE"], [97, 80, 2, "enum_LAST_READ"], [97, 16, 3, "enum_LAST_WRITE"], [89, 50, 2, "enum_LAST_READ"], [89, 34, 3, "enum_LAST_WRITE"], [101, 42, 2, "enum_LAST_READ"], [105, 48, 2, "enum_LAST_READ"], [107, 105, 2, "enum_LAST_READ"], [109, 50, 2, "enum_LAST_READ"], [109, 89, 3, "enum_LAST_WRITE"], [112, 53, 2, "enum_LAST_READ"], [64, 66, 4, "enum_COMPUTED_FROM"], [64, 68, 4, "enum_COMPUTED_FROM"], [15, 19, 4, "enum_COMPUTED_FROM"], [34, 39, 4, "enum_COMPUTED_FROM"], [89, 95, 4, "enum_COMPUTED_FROM"], [89, 97, 4, "enum_COMPUTED_FROM"]], "error_location": 95, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/iMerica/dj-models.git", "old_path": "django/utils/module_loading.py", "hash": "c2b4967e76fd671e6199e4dd54d2a2c1f096b8eb", "code": "def import_string(dotted_path: str) -> Any:\n    \"\"\"\n    Import a dotted module path and return the attribute/class designated by the\n    last name in the path. Raise ImportError if the import failed.\n    \"\"\"\n    try:\n        module_path: str\n        class_name: str\n        module_path, class_name = dotted_path.rsplit('.', 1)\n    except ValueError:\n        msg: str = \"%s doesn't look like a module path\" % dotted_path\n        six.reraise(ImportError, ImportError(msg), sys.exc_info()[2])\n\n    module: ModuleType = import_module(module_path)\n\n    try:\n        return getattr(module, class_name)\n    except AttributeError:\n        msg = 'Module \"%s\" does not define a \"%s\" attribute/class' % (\n            dotted_path, class_name)\n        six.reraise(ImportError, ImportError(msg), sys.exc_info()[2])\n", "rewrite": "ReplaceText(target='module_path' @(26,12)->(26,23))", "error_line": 17, "has_bug": true, "code_full": "import sys\nfrom importlib import import_module\nfrom types import ModuleType\nfrom typing import Any\n\nimport six\n\n\ndef import_string(dotted_path: str) -> Any:\n    \"\"\"\n    Import a dotted module path and return the attribute/class designated by the\n    last name in the path. Raise ImportError if the import failed.\n    \"\"\"\n    try:\n        module_path: str\n        class_name: str\n        module_path, class_name = dotted_path.rsplit('.', 1)\n    except ValueError:\n        msg: str = \"%s doesn't look like a module path\" % dotted_path\n        six.reraise(ImportError, ImportError(msg), sys.exc_info()[2])\n\n    module: ModuleType = import_module(module_path)\n\n    try:\n        return getattr(module, class_name)\n    except AttributeError:\n        msg = 'Module \"%s\" does not define a \"%s\" attribute/class' % (\n            dotted_path, class_name)\n        six.reraise(ImportError, ImportError(msg), sys.exc_info()[2])\n", "error_location_char": [706, 717], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def main(", ")", ":", "#NEWLINE#", "#INDENT#", "cwd", "=", "os", ".", "getcwd", "(", ")", "#NEWLINE#", "sys", ".", "path", ".", "append", "(", "cwd", ")", "#NEWLINE#", "try", ":", "#NEWLINE#", "#INDENT#", "git_info", "=", "git_info_from_directory", "(", "cwd", ")", "#NEWLINE#", "repo_directory", "=", "repository_root", "(", "cwd", ")", "#NEWLINE#", "if", "(", "'HDAT_ARCHIVE'", "in", "os", ".", "environ", ")", ":", "#NEWLINE#", "#INDENT#", "archive_location", "=", "os", ".", "environ", "[", "'HDAT_ARCHIVE'", "]", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "archive_location", "=", "os", ".", "path", ".", "join", "(", "repo_directory", ",", "'.hdatarchive'", ")", "#NEWLINE#", "#UNINDENT#", "archive", "=", "Archive", "(", "archive_location", ")", "#NEWLINE#", "golden_store_location", "=", "os", ".", "path", ".", "join", "(", "repo_directory", ",", "'golden_results'", ")", "#NEWLINE#", "golden_store", "=", "GoldenStore", "(", "golden_store_location", ")", "#NEWLINE#", "suites", "=", "collect_suites", "(", "cwd", ")", "#NEWLINE#", "hdat_cli", "(", "sys", ".", "argv", "[", "1", ":", "]", ",", "suites", ",", "golden_store", ",", "archive", ",", "git_info", ")", "#NEWLINE#", "sys", ".", "exit", "(", "0", ")", "#NEWLINE#", "#UNINDENT#", "except", "AbortError", "as", "e", ":", "#NEWLINE#", "#INDENT#", "print_error", "(", "e", ")", "#NEWLINE#", "sys", ".", "exit", "(", "1", ")"], "edges": [[5, 11, 7, "enum_FIELD"], [13, 19, 7, "enum_FIELD"], [11, 9, 7, "enum_FIELD"], [19, 17, 7, "enum_FIELD"], [26, 30, 7, "enum_FIELD"], [33, 37, 7, "enum_FIELD"], [49, 44, 7, "enum_FIELD"], [79, 83, 7, "enum_FIELD"], [86, 96, 7, "enum_FIELD"], [99, 103, 7, "enum_FIELD"], [106, 110, 7, "enum_FIELD"], [113, 125, 7, "enum_FIELD"], [132, 136, 7, "enum_FIELD"], [143, 142, 7, "enum_FIELD"], [143, 144, 7, "enum_FIELD"], [9, 8, 7, "enum_FIELD"], [17, 15, 7, "enum_FIELD"], [30, 29, 7, "enum_FIELD"], [37, 36, 7, "enum_FIELD"], [44, 43, 7, "enum_FIELD"], [51, 57, 7, "enum_FIELD"], [65, 75, 7, "enum_FIELD"], [83, 82, 7, "enum_FIELD"], [96, 92, 7, "enum_FIELD"], [103, 102, 7, "enum_FIELD"], [110, 109, 7, "enum_FIELD"], [125, 114, 7, "enum_FIELD"], [136, 134, 7, "enum_FIELD"], [147, 149, 7, "enum_FIELD"], [152, 156, 7, "enum_FIELD"], [15, 14, 7, "enum_FIELD"], [46, 45, 7, "enum_FIELD"], [57, 55, 7, "enum_FIELD"], [57, 58, 7, "enum_FIELD"], [75, 71, 7, "enum_FIELD"], [92, 90, 7, "enum_FIELD"], [119, 117, 7, "enum_FIELD"], [119, 121, 7, "enum_FIELD"], [134, 133, 7, "enum_FIELD"], [149, 148, 7, "enum_FIELD"], [156, 154, 7, "enum_FIELD"], [55, 54, 7, "enum_FIELD"], [71, 69, 7, "enum_FIELD"], [90, 89, 7, "enum_FIELD"], [117, 116, 7, "enum_FIELD"], [121, 120, 7, "enum_FIELD"], [154, 153, 7, "enum_FIELD"], [69, 68, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [20, 6, 10, "enum_LAST_LEXICAL_USE"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [31, 20, 10, "enum_LAST_LEXICAL_USE"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [38, 31, 10, "enum_LAST_LEXICAL_USE"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [45, 8, 10, "enum_LAST_LEXICAL_USE"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [54, 45, 10, "enum_LAST_LEXICAL_USE"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 65, 9, "enum_NEXT_SYNTAX"], [66, 52, 10, "enum_LAST_LEXICAL_USE"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [68, 54, 10, "enum_LAST_LEXICAL_USE"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [74, 34, 10, "enum_LAST_LEXICAL_USE"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [84, 66, 10, "enum_LAST_LEXICAL_USE"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [89, 68, 10, "enum_LAST_LEXICAL_USE"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [95, 74, 10, "enum_LAST_LEXICAL_USE"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [104, 87, 10, "enum_LAST_LEXICAL_USE"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [111, 38, 10, "enum_LAST_LEXICAL_USE"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [116, 14, 10, "enum_LAST_LEXICAL_USE"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [124, 107, 10, "enum_LAST_LEXICAL_USE"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [126, 100, 10, "enum_LAST_LEXICAL_USE"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [128, 80, 10, "enum_LAST_LEXICAL_USE"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [130, 27, 10, "enum_LAST_LEXICAL_USE"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [133, 116, 10, "enum_LAST_LEXICAL_USE"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [150, 144, 10, "enum_LAST_LEXICAL_USE"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [153, 133, 10, "enum_LAST_LEXICAL_USE"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [5, 13, 1, "enum_CFG_NEXT"], [13, 26, 1, "enum_CFG_NEXT"], [26, 33, 1, "enum_CFG_NEXT"], [33, 44, 1, "enum_CFG_NEXT"], [44, 142, 1, "enum_CFG_NEXT"], [44, 65, 1, "enum_CFG_NEXT"], [44, 51, 1, "enum_CFG_NEXT"], [51, 142, 1, "enum_CFG_NEXT"], [51, 79, 1, "enum_CFG_NEXT"], [65, 142, 1, "enum_CFG_NEXT"], [65, 79, 1, "enum_CFG_NEXT"], [79, 86, 1, "enum_CFG_NEXT"], [86, 99, 1, "enum_CFG_NEXT"], [99, 106, 1, "enum_CFG_NEXT"], [106, 113, 1, "enum_CFG_NEXT"], [113, 132, 1, "enum_CFG_NEXT"], [132, 142, 1, "enum_CFG_NEXT"], [142, 144, 1, "enum_CFG_NEXT"], [144, 147, 1, "enum_CFG_NEXT"], [147, 152, 1, "enum_CFG_NEXT"], [20, 6, 3, "enum_LAST_WRITE"], [31, 20, 2, "enum_LAST_READ"], [31, 6, 3, "enum_LAST_WRITE"], [38, 31, 2, "enum_LAST_READ"], [38, 6, 3, "enum_LAST_WRITE"], [45, 8, 2, "enum_LAST_READ"], [54, 45, 2, "enum_LAST_READ"], [68, 45, 2, "enum_LAST_READ"], [74, 34, 3, "enum_LAST_WRITE"], [84, 52, 3, "enum_LAST_WRITE"], [84, 66, 3, "enum_LAST_WRITE"], [89, 54, 2, "enum_LAST_READ"], [89, 68, 2, "enum_LAST_READ"], [95, 74, 2, "enum_LAST_READ"], [95, 34, 3, "enum_LAST_WRITE"], [104, 87, 3, "enum_LAST_WRITE"], [111, 38, 2, "enum_LAST_READ"], [111, 6, 3, "enum_LAST_WRITE"], [116, 14, 2, "enum_LAST_READ"], [124, 107, 3, "enum_LAST_WRITE"], [126, 100, 3, "enum_LAST_WRITE"], [128, 80, 3, "enum_LAST_WRITE"], [130, 27, 3, "enum_LAST_WRITE"], [133, 116, 2, "enum_LAST_READ"], [150, 144, 3, "enum_LAST_WRITE"], [153, 14, 2, "enum_LAST_READ"], [153, 133, 2, "enum_LAST_READ"], [6, 8, 4, "enum_COMPUTED_FROM"], [27, 29, 4, "enum_COMPUTED_FROM"], [27, 31, 4, "enum_COMPUTED_FROM"], [34, 36, 4, "enum_COMPUTED_FROM"], [34, 38, 4, "enum_COMPUTED_FROM"], [80, 82, 4, "enum_COMPUTED_FROM"], [80, 84, 4, "enum_COMPUTED_FROM"], [87, 95, 4, "enum_COMPUTED_FROM"], [87, 89, 4, "enum_COMPUTED_FROM"], [100, 102, 4, "enum_COMPUTED_FROM"], [100, 104, 4, "enum_COMPUTED_FROM"], [107, 109, 4, "enum_COMPUTED_FROM"], [107, 111, 4, "enum_COMPUTED_FROM"], [52, 54, 4, "enum_COMPUTED_FROM"], [66, 74, 4, "enum_COMPUTED_FROM"], [66, 68, 4, "enum_COMPUTED_FROM"]], "error_location": 111, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/innolitics/hdat.git", "old_path": "hdat/main.py", "hash": "37beec7e4e98b5787f87cb083d512c872a9a2ae6", "code": "def main():\n    cwd: str = os.getcwd()\n    sys.path.append(cwd)\n\n    try:\n        git_info: Any = git_info_from_directory(cwd)\n        repo_directory: str = repository_root(cwd)\n\n        if 'HDAT_ARCHIVE' in os.environ:\n            archive_location: str = os.environ['HDAT_ARCHIVE']\n        else:\n            archive_location = os.path.join(repo_directory, '.hdatarchive')\n        archive: Archive = Archive(archive_location)\n\n        golden_store_location: str = os.path.join(repo_directory, 'golden_results')\n        golden_store: GoldenStore = GoldenStore(golden_store_location)\n\n        suites: List[Any] = collect_suites(cwd)\n\n        hdat_cli(sys.argv[1:], suites, golden_store, archive, git_info)\n\n        sys.exit(0)\n\n    except AbortError as e:\n        print_error(e)\n\n        sys.exit(1)\n", "rewrite": "ReplaceText(target='repo_directory' @(29,32)->(29,35))", "error_line": 17, "has_bug": true, "code_full": "import os\nimport sys\nfrom typing import Any, List\n\n\nclass Archive:\n    def __init__(self, location: str):\n        pass\n\n\nclass GoldenStore:\n    def __init__(self, location: str):\n        pass\n\n\nclass AbortError(Exception):\n    pass\n\n\ndef git_info_from_directory(directory: str) -> Any:\n    pass\n\n\ndef repository_root(directory: str) -> str:\n    return \"\"\n\n\ndef collect_suites(directory: str) -> List[Any]:\n    return []\n\n\ndef hdat_cli(args: List[str], suites: List[Any], golden_store: GoldenStore, archive: Archive, git_info: Any):\n    pass\n\n\ndef print_error(e: AbortError):\n    pass\n\n\ndef main():\n    cwd: str = os.getcwd()\n    sys.path.append(cwd)\n\n    try:\n        git_info: Any = git_info_from_directory(cwd)\n        repo_directory: str = repository_root(cwd)\n\n        if 'HDAT_ARCHIVE' in os.environ:\n            archive_location: str = os.environ['HDAT_ARCHIVE']\n        else:\n            archive_location = os.path.join(repo_directory, '.hdatarchive')\n        archive: Archive = Archive(archive_location)\n\n        golden_store_location: str = os.path.join(repo_directory, 'golden_results')\n        golden_store: GoldenStore = GoldenStore(golden_store_location)\n\n        suites: List[Any] = collect_suites(cwd)\n\n        hdat_cli(sys.argv[1:], suites, golden_store, archive, git_info)\n\n        sys.exit(0)\n\n    except AbortError as e:\n        print_error(e)\n\n        sys.exit(1)\n", "error_location_char": [626, 629], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def write(", "cls", ",", "cache_path", ",", "cache", ")", ":", "#NEWLINE#", "#INDENT#", "'Write content to cache file.\\n\\n    Args:\\n        cache_path (unicode): Filename to save at.\\n        cache      (unicode): Content to be cached.\\n\\n    Returns:\\n        tuple: Boolean for success read and string for size or error.\\n    '", "#NEWLINE#", "if", "(", "len", "(", "cache", ")", "==", "0", ")", ":", "#NEWLINE#", "#INDENT#", "return", "(", "False", ",", "'missing cache path'", ")", "#NEWLINE#", "#UNINDENT#", "if", "(", "len", "(", "cache", ")", "==", "0", ")", ":", "#NEWLINE#", "#INDENT#", "return", "(", "False", ",", "'missing cache data'", ")", "#NEWLINE#", "#UNINDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "if", "(", "not", "path", ".", "isdir", "(", "cls", ".", "directory", ")", ")", ":", "#NEWLINE#", "#INDENT#", "makedirs", "(", "cls", ".", "directory", ")", "#NEWLINE#", "#UNINDENT#", "with", "open", "(", "cls", ".", "file_path", "(", "cache_path", ")", ",", "'wb'", ")", "as", "f", ":", "#NEWLINE#", "#INDENT#", "size", "=", "f", ".", "write", "(", "cache", ")", "#NEWLINE#", "return", "(", "True", ",", "size", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "except", "Exception", "as", "e", ":", "#NEWLINE#", "#INDENT#", "return", "(", "False", ",", "str", "(", "e", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "(", "False", ",", "'no cache to write'", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [10, 11, 7, "enum_FIELD"], [13, 19, 7, "enum_FIELD"], [33, 39, 7, "enum_FIELD"], [133, 136, 7, "enum_FIELD"], [19, 16, 7, "enum_FIELD"], [25, 28, 7, "enum_FIELD"], [39, 36, 7, "enum_FIELD"], [45, 48, 7, "enum_FIELD"], [57, 59, 7, "enum_FIELD"], [117, 116, 7, "enum_FIELD"], [117, 118, 7, "enum_FIELD"], [16, 15, 7, "enum_FIELD"], [36, 35, 7, "enum_FIELD"], [59, 63, 7, "enum_FIELD"], [71, 73, 7, "enum_FIELD"], [92, 89, 7, "enum_FIELD"], [92, 93, 7, "enum_FIELD"], [96, 102, 7, "enum_FIELD"], [106, 109, 7, "enum_FIELD"], [122, 125, 7, "enum_FIELD"], [63, 61, 7, "enum_FIELD"], [73, 72, 7, "enum_FIELD"], [89, 81, 7, "enum_FIELD"], [102, 100, 7, "enum_FIELD"], [61, 60, 7, "enum_FIELD"], [65, 64, 7, "enum_FIELD"], [75, 74, 7, "enum_FIELD"], [86, 84, 7, "enum_FIELD"], [100, 99, 7, "enum_FIELD"], [127, 126, 7, "enum_FIELD"], [84, 83, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [17, 6, 10, "enum_LAST_LEXICAL_USE"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [35, 15, 10, "enum_LAST_LEXICAL_USE"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [37, 17, 10, "enum_LAST_LEXICAL_USE"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [64, 2, 10, "enum_LAST_LEXICAL_USE"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [74, 64, 10, "enum_LAST_LEXICAL_USE"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [83, 74, 10, "enum_LAST_LEXICAL_USE"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [87, 4, 10, "enum_LAST_LEXICAL_USE"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [99, 93, 10, "enum_LAST_LEXICAL_USE"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [103, 37, 10, "enum_LAST_LEXICAL_USE"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [110, 97, 10, "enum_LAST_LEXICAL_USE"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [128, 118, 10, "enum_LAST_LEXICAL_USE"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [3, 10, 1, "enum_CFG_NEXT"], [10, 19, 1, "enum_CFG_NEXT"], [19, 25, 1, "enum_CFG_NEXT"], [19, 39, 1, "enum_CFG_NEXT"], [39, 59, 1, "enum_CFG_NEXT"], [39, 45, 1, "enum_CFG_NEXT"], [59, 116, 1, "enum_CFG_NEXT"], [59, 71, 1, "enum_CFG_NEXT"], [59, 133, 1, "enum_CFG_NEXT"], [71, 116, 1, "enum_CFG_NEXT"], [71, 133, 1, "enum_CFG_NEXT"], [116, 118, 1, "enum_CFG_NEXT"], [118, 122, 1, "enum_CFG_NEXT"], [17, 6, 3, "enum_LAST_WRITE"], [35, 15, 2, "enum_LAST_READ"], [37, 17, 2, "enum_LAST_READ"], [37, 6, 3, "enum_LAST_WRITE"], [64, 2, 3, "enum_LAST_WRITE"], [74, 64, 2, "enum_LAST_READ"], [74, 2, 3, "enum_LAST_WRITE"], [128, 118, 3, "enum_LAST_WRITE"], [97, 103, 4, "enum_COMPUTED_FROM"], [97, 99, 4, "enum_COMPUTED_FROM"]], "error_location": 17, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/lexndru/hap.git", "old_path": "hap/cache.py", "hash": "5ef18f88572400983578d8723663562329066779", "code": "@classmethod\ndef write(cls, cache_path: str, cache: bytes) -> Union[Tuple[bool, str], Tuple[bool, int]]:\n    \"\"\"Write content to cache file.\n\n    Args:\n        cache_path (unicode): Filename to save at.\n        cache      (unicode): Content to be cached.\n\n    Returns:\n        tuple: Boolean for success read and string for size or error.\n    \"\"\"\n\n    if len(cache) == 0:\n        return False, \"missing cache path\"\n    if len(cache) == 0:\n        return False, \"missing cache data\"\n    try:\n        if not path.isdir(cls.directory):\n            makedirs(cls.directory)\n        with open(cls.file_path(cache_path), \"wb\") as f:\n            size: int = f.write(cache)\n            return True, size\n    except Exception as e:\n        return False, str(e)\n    return False, \"no cache to write\"\n", "rewrite": "ReplaceText(target='cache_path' @(90,15)->(90,20))", "error_line": 11, "has_bug": true, "code_full": "\nfrom os import makedirs, path\nfrom typing import Tuple, Union\n\n\nclass Cache:\n    directory: str\n\n    @classmethod\n    def file_path(cls, cache_path: str) -> str:\n        return \"\"\n\n    @classmethod\n    def write(cls, cache_path: str, cache: bytes) -> Union[Tuple[bool, str], Tuple[bool, int]]:\n        \"\"\"Write content to cache file.\n\n        Args:\n            cache_path (unicode): Filename to save at.\n            cache      (unicode): Content to be cached.\n\n        Returns:\n            tuple: Boolean for success read and string for size or error.\n        \"\"\"\n\n        if len(cache) == 0:\n            return False, \"missing cache path\"\n        if len(cache) == 0:\n            return False, \"missing cache data\"\n        try:\n            if not path.isdir(cls.directory):\n                makedirs(cls.directory)\n            with open(cls.file_path(cache_path), \"wb\") as f:\n                size: int = f.write(cache)\n                return True, size\n        except Exception as e:\n            return False, str(e)\n        return False, \"no cache to write\"\n", "error_location_char": [359, 364], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def preprocess(", "self", ",", "nb", ",", "resources", ")", ":", "#NEWLINE#", "#INDENT#", "logging", ".", "info", "(", "resources", "[", "'filesfolder'", "]", ")", "#NEWLINE#", "logging", ".", "info", "(", "(", "'resolving external file paths'", "+", "' in latex_doc metadata to: {}'", ".", "format", "(", "self", ".", "metapath", ")", ")", ")", "#NEWLINE#", "external_files", "=", "[", "]", "#NEWLINE#", "if", "hasattr", "(", "nb", ".", "metadata", ",", "'latex_doc'", ")", ":", "#NEWLINE#", "#INDENT#", "if", "hasattr", "(", "nb", ".", "metadata", ".", "latex_doc", ",", "'files'", ")", ":", "#NEWLINE#", "#INDENT#", "mfiles", "=", "[", "]", "#NEWLINE#", "for", "fpath", "in", "nb", ".", "metadata", ".", "latex_doc", ".", "files", ":", "#NEWLINE#", "#INDENT#", "fpath", "=", "self", ".", "resolve_path", "(", "fpath", ",", "self", ".", "metapath", ")", "#NEWLINE#", "if", "(", "not", "os", ".", "path", ".", "exists", "(", "fpath", ")", ")", ":", "#NEWLINE#", "#INDENT#", "logging", ".", "warning", "(", "'file in metadata does not exist: {}'", ".", "format", "(", "fpath", ")", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "external_files", ".", "append", "(", "fpath", ")", "#NEWLINE#", "#UNINDENT#", "mfiles", ".", "append", "(", "os", ".", "path", ".", "join", "(", "self", ".", "filesfolder", ",", "os", ".", "path", ".", "basename", "(", "fpath", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "nb", ".", "metadata", ".", "latex_doc", ".", "files", "=", "mfiles", "#NEWLINE#", "#UNINDENT#", "if", "hasattr", "(", "nb", ".", "metadata", ".", "latex_doc", ",", "'bibliography'", ")", ":", "#NEWLINE#", "#INDENT#", "bib", "=", "nb", ".", "metadata", ".", "latex_doc", ".", "bibliography", "#NEWLINE#", "bib", "=", "self", ".", "resolve_path", "(", "bib", ",", "self", ".", "metapath", ")", "#NEWLINE#", "if", "(", "not", "os", ".", "path", ".", "exists", "(", "bib", ")", ")", ":", "#NEWLINE#", "#INDENT#", "logging", ".", "warning", "(", "'bib in metadata does not exist: {}'", ".", "format", "(", "bib", ")", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "external_files", ".", "append", "(", "bib", ")", "#NEWLINE#", "resources", "[", "'bibliopath'", "]", "=", "external_files", "#NEWLINE#", "#UNINDENT#", "nb", ".", "metadata", ".", "latex_doc", ".", "bibliography", "=", "os", ".", "path", ".", "join", "(", "self", ".", "filesfolder", ",", "os", ".", "path", ".", "basename", "(", "bib", ")", ")", "#NEWLINE#", "#UNINDENT#", "if", "hasattr", "(", "nb", ".", "metadata", ".", "latex_doc", ",", "'titlepage'", ")", ":", "#NEWLINE#", "#INDENT#", "if", "hasattr", "(", "nb", ".", "metadata", ".", "latex_doc", ".", "titlepage", ",", "'logo'", ")", ":", "#NEWLINE#", "#INDENT#", "logo", "=", "nb", ".", "metadata", ".", "latex_doc", ".", "titlepage", ".", "logo", "#NEWLINE#", "logo", "=", "self", ".", "resolve_path", "(", "logo", ",", "self", ".", "metapath", ")", "#NEWLINE#", "if", "(", "not", "os", ".", "path", ".", "exists", "(", "logo", ")", ")", ":", "#NEWLINE#", "#INDENT#", "logging", ".", "warning", "(", "'logo in metadata does not exist: {}'", ".", "format", "(", "logo", ")", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "external_files", ".", "append", "(", "logo", ")", "#NEWLINE#", "#UNINDENT#", "nb", ".", "metadata", ".", "latex_doc", ".", "titlepage", ".", "logo", "=", "os", ".", "path", ".", "join", "(", "self", ".", "filesfolder", ",", "os", ".", "path", ".", "basename", "(", "logo", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "resources", ".", "setdefault", "(", "'external_file_paths'", ",", "[", "]", ")", "#NEWLINE#", "resources", "[", "'external_file_paths'", "]", "+=", "external_files", "#NEWLINE#", "return", "(", "nb", ",", "resources", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [10, 14, 7, "enum_FIELD"], [20, 24, 7, "enum_FIELD"], [38, 41, 7, "enum_FIELD"], [44, 50, 7, "enum_FIELD"], [418, 424, 7, "enum_FIELD"], [428, 430, 7, "enum_FIELD"], [428, 434, 7, "enum_FIELD"], [436, 439, 7, "enum_FIELD"], [14, 12, 7, "enum_FIELD"], [24, 22, 7, "enum_FIELD"], [50, 45, 7, "enum_FIELD"], [56, 64, 7, "enum_FIELD"], [178, 186, 7, "enum_FIELD"], [291, 299, 7, "enum_FIELD"], [424, 420, 7, "enum_FIELD"], [430, 429, 7, "enum_FIELD"], [430, 431, 7, "enum_FIELD"], [12, 11, 7, "enum_FIELD"], [16, 15, 7, "enum_FIELD"], [16, 17, 7, "enum_FIELD"], [22, 21, 7, "enum_FIELD"], [27, 26, 7, "enum_FIELD"], [27, 31, 7, "enum_FIELD"], [48, 47, 7, "enum_FIELD"], [64, 57, 7, "enum_FIELD"], [69, 72, 7, "enum_FIELD"], [77, 76, 7, "enum_FIELD"], [77, 83, 7, "enum_FIELD"], [166, 175, 7, "enum_FIELD"], [186, 179, 7, "enum_FIELD"], [191, 199, 7, "enum_FIELD"], [201, 209, 7, "enum_FIELD"], [227, 217, 7, "enum_FIELD"], [261, 279, 7, "enum_FIELD"], [299, 292, 7, "enum_FIELD"], [305, 315, 7, "enum_FIELD"], [420, 419, 7, "enum_FIELD"], [31, 29, 7, "enum_FIELD"], [62, 60, 7, "enum_FIELD"], [83, 81, 7, "enum_FIELD"], [87, 95, 7, "enum_FIELD"], [113, 103, 7, "enum_FIELD"], [140, 144, 7, "enum_FIELD"], [172, 170, 7, "enum_FIELD"], [184, 182, 7, "enum_FIELD"], [199, 197, 7, "enum_FIELD"], [209, 205, 7, "enum_FIELD"], [217, 223, 7, "enum_FIELD"], [229, 233, 7, "enum_FIELD"], [246, 250, 7, "enum_FIELD"], [253, 259, 7, "enum_FIELD"], [267, 265, 7, "enum_FIELD"], [279, 273, 7, "enum_FIELD"], [297, 295, 7, "enum_FIELD"], [315, 306, 7, "enum_FIELD"], [320, 330, 7, "enum_FIELD"], [332, 340, 7, "enum_FIELD"], [358, 348, 7, "enum_FIELD"], [385, 405, 7, "enum_FIELD"], [29, 28, 7, "enum_FIELD"], [33, 32, 7, "enum_FIELD"], [60, 59, 7, "enum_FIELD"], [81, 79, 7, "enum_FIELD"], [95, 91, 7, "enum_FIELD"], [103, 109, 7, "enum_FIELD"], [115, 119, 7, "enum_FIELD"], [132, 136, 7, "enum_FIELD"], [144, 142, 7, "enum_FIELD"], [170, 168, 7, "enum_FIELD"], [182, 181, 7, "enum_FIELD"], [197, 195, 7, "enum_FIELD"], [205, 204, 7, "enum_FIELD"], [211, 210, 7, "enum_FIELD"], [223, 221, 7, "enum_FIELD"], [233, 231, 7, "enum_FIELD"], [250, 248, 7, "enum_FIELD"], [255, 254, 7, "enum_FIELD"], [255, 256, 7, "enum_FIELD"], [265, 263, 7, "enum_FIELD"], [273, 271, 7, "enum_FIELD"], [277, 276, 7, "enum_FIELD"], [285, 283, 7, "enum_FIELD"], [295, 294, 7, "enum_FIELD"], [313, 311, 7, "enum_FIELD"], [330, 328, 7, "enum_FIELD"], [340, 336, 7, "enum_FIELD"], [348, 354, 7, "enum_FIELD"], [360, 364, 7, "enum_FIELD"], [377, 381, 7, "enum_FIELD"], [393, 391, 7, "enum_FIELD"], [405, 399, 7, "enum_FIELD"], [79, 78, 7, "enum_FIELD"], [91, 90, 7, "enum_FIELD"], [97, 96, 7, "enum_FIELD"], [109, 107, 7, "enum_FIELD"], [119, 117, 7, "enum_FIELD"], [136, 134, 7, "enum_FIELD"], [142, 141, 7, "enum_FIELD"], [154, 148, 7, "enum_FIELD"], [168, 167, 7, "enum_FIELD"], [195, 194, 7, "enum_FIELD"], [221, 219, 7, "enum_FIELD"], [231, 230, 7, "enum_FIELD"], [237, 235, 7, "enum_FIELD"], [248, 247, 7, "enum_FIELD"], [263, 262, 7, "enum_FIELD"], [271, 270, 7, "enum_FIELD"], [283, 281, 7, "enum_FIELD"], [311, 309, 7, "enum_FIELD"], [328, 326, 7, "enum_FIELD"], [336, 335, 7, "enum_FIELD"], [342, 341, 7, "enum_FIELD"], [354, 352, 7, "enum_FIELD"], [364, 362, 7, "enum_FIELD"], [381, 379, 7, "enum_FIELD"], [391, 389, 7, "enum_FIELD"], [399, 397, 7, "enum_FIELD"], [403, 402, 7, "enum_FIELD"], [411, 409, 7, "enum_FIELD"], [107, 105, 7, "enum_FIELD"], [117, 116, 7, "enum_FIELD"], [123, 121, 7, "enum_FIELD"], [134, 133, 7, "enum_FIELD"], [148, 146, 7, "enum_FIELD"], [152, 151, 7, "enum_FIELD"], [160, 158, 7, "enum_FIELD"], [219, 218, 7, "enum_FIELD"], [235, 234, 7, "enum_FIELD"], [281, 280, 7, "enum_FIELD"], [309, 308, 7, "enum_FIELD"], [326, 324, 7, "enum_FIELD"], [352, 350, 7, "enum_FIELD"], [362, 361, 7, "enum_FIELD"], [368, 366, 7, "enum_FIELD"], [379, 378, 7, "enum_FIELD"], [389, 387, 7, "enum_FIELD"], [397, 396, 7, "enum_FIELD"], [409, 407, 7, "enum_FIELD"], [105, 104, 7, "enum_FIELD"], [121, 120, 7, "enum_FIELD"], [146, 145, 7, "enum_FIELD"], [158, 156, 7, "enum_FIELD"], [324, 323, 7, "enum_FIELD"], [350, 349, 7, "enum_FIELD"], [366, 365, 7, "enum_FIELD"], [387, 386, 7, "enum_FIELD"], [407, 406, 7, "enum_FIELD"], [156, 155, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [15, 6, 10, "enum_LAST_LEXICAL_USE"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [21, 11, 10, "enum_LAST_LEXICAL_USE"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [32, 2, 10, "enum_LAST_LEXICAL_USE"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [47, 4, 10, "enum_LAST_LEXICAL_USE"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 56, 9, "enum_NEXT_SYNTAX"], [57, 45, 10, "enum_LAST_LEXICAL_USE"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [59, 47, 10, "enum_LAST_LEXICAL_USE"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [78, 59, 10, "enum_LAST_LEXICAL_USE"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 87, 9, "enum_NEXT_SYNTAX"], [88, 76, 10, "enum_LAST_LEXICAL_USE"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [90, 32, 10, "enum_LAST_LEXICAL_USE"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [94, 88, 10, "enum_LAST_LEXICAL_USE"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [96, 90, 10, "enum_LAST_LEXICAL_USE"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [110, 94, 10, "enum_LAST_LEXICAL_USE"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 115, 9, "enum_NEXT_SYNTAX"], [116, 21, 10, "enum_LAST_LEXICAL_USE"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [124, 110, 10, "enum_LAST_LEXICAL_USE"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 132, 9, "enum_NEXT_SYNTAX"], [133, 39, 10, "enum_LAST_LEXICAL_USE"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [137, 124, 10, "enum_LAST_LEXICAL_USE"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 140, 9, "enum_NEXT_SYNTAX"], [141, 70, 10, "enum_LAST_LEXICAL_USE"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [145, 104, 10, "enum_LAST_LEXICAL_USE"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [151, 96, 10, "enum_LAST_LEXICAL_USE"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [155, 145, 10, "enum_LAST_LEXICAL_USE"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [161, 137, 10, "enum_LAST_LEXICAL_USE"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 166, 9, "enum_NEXT_SYNTAX"], [167, 78, 10, "enum_LAST_LEXICAL_USE"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [175, 141, 10, "enum_LAST_LEXICAL_USE"], [174, 175, 9, "enum_NEXT_SYNTAX"], [175, 178, 9, "enum_NEXT_SYNTAX"], [179, 57, 10, "enum_LAST_LEXICAL_USE"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 180, 9, "enum_NEXT_SYNTAX"], [181, 167, 10, "enum_LAST_LEXICAL_USE"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 184, 9, "enum_NEXT_SYNTAX"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [187, 188, 9, "enum_NEXT_SYNTAX"], [188, 189, 9, "enum_NEXT_SYNTAX"], [189, 191, 9, "enum_NEXT_SYNTAX"], [191, 192, 9, "enum_NEXT_SYNTAX"], [192, 193, 9, "enum_NEXT_SYNTAX"], [194, 181, 10, "enum_LAST_LEXICAL_USE"], [193, 194, 9, "enum_NEXT_SYNTAX"], [194, 195, 9, "enum_NEXT_SYNTAX"], [195, 196, 9, "enum_NEXT_SYNTAX"], [196, 197, 9, "enum_NEXT_SYNTAX"], [197, 198, 9, "enum_NEXT_SYNTAX"], [198, 199, 9, "enum_NEXT_SYNTAX"], [199, 200, 9, "enum_NEXT_SYNTAX"], [200, 201, 9, "enum_NEXT_SYNTAX"], [202, 192, 10, "enum_LAST_LEXICAL_USE"], [201, 202, 9, "enum_NEXT_SYNTAX"], [202, 203, 9, "enum_NEXT_SYNTAX"], [204, 151, 10, "enum_LAST_LEXICAL_USE"], [203, 204, 9, "enum_NEXT_SYNTAX"], [204, 205, 9, "enum_NEXT_SYNTAX"], [205, 206, 9, "enum_NEXT_SYNTAX"], [206, 207, 9, "enum_NEXT_SYNTAX"], [208, 202, 10, "enum_LAST_LEXICAL_USE"], [207, 208, 9, "enum_NEXT_SYNTAX"], [208, 209, 9, "enum_NEXT_SYNTAX"], [210, 204, 10, "enum_LAST_LEXICAL_USE"], [209, 210, 9, "enum_NEXT_SYNTAX"], [210, 211, 9, "enum_NEXT_SYNTAX"], [211, 212, 9, "enum_NEXT_SYNTAX"], [212, 213, 9, "enum_NEXT_SYNTAX"], [213, 215, 9, "enum_NEXT_SYNTAX"], [215, 216, 9, "enum_NEXT_SYNTAX"], [216, 217, 9, "enum_NEXT_SYNTAX"], [218, 155, 10, "enum_LAST_LEXICAL_USE"], [217, 218, 9, "enum_NEXT_SYNTAX"], [218, 219, 9, "enum_NEXT_SYNTAX"], [219, 220, 9, "enum_NEXT_SYNTAX"], [220, 221, 9, "enum_NEXT_SYNTAX"], [221, 222, 9, "enum_NEXT_SYNTAX"], [222, 223, 9, "enum_NEXT_SYNTAX"], [224, 208, 10, "enum_LAST_LEXICAL_USE"], [223, 224, 9, "enum_NEXT_SYNTAX"], [224, 225, 9, "enum_NEXT_SYNTAX"], [225, 226, 9, "enum_NEXT_SYNTAX"], [226, 227, 9, "enum_NEXT_SYNTAX"], [227, 229, 9, "enum_NEXT_SYNTAX"], [230, 116, 10, "enum_LAST_LEXICAL_USE"], [229, 230, 9, "enum_NEXT_SYNTAX"], [230, 231, 9, "enum_NEXT_SYNTAX"], [231, 232, 9, "enum_NEXT_SYNTAX"], [232, 233, 9, "enum_NEXT_SYNTAX"], [233, 234, 9, "enum_NEXT_SYNTAX"], [234, 235, 9, "enum_NEXT_SYNTAX"], [235, 236, 9, "enum_NEXT_SYNTAX"], [236, 237, 9, "enum_NEXT_SYNTAX"], [238, 224, 10, "enum_LAST_LEXICAL_USE"], [237, 238, 9, "enum_NEXT_SYNTAX"], [238, 239, 9, "enum_NEXT_SYNTAX"], [239, 240, 9, "enum_NEXT_SYNTAX"], [240, 243, 9, "enum_NEXT_SYNTAX"], [243, 244, 9, "enum_NEXT_SYNTAX"], [244, 246, 9, "enum_NEXT_SYNTAX"], [247, 133, 10, "enum_LAST_LEXICAL_USE"], [246, 247, 9, "enum_NEXT_SYNTAX"], [247, 248, 9, "enum_NEXT_SYNTAX"], [248, 249, 9, "enum_NEXT_SYNTAX"], [249, 250, 9, "enum_NEXT_SYNTAX"], [251, 238, 10, "enum_LAST_LEXICAL_USE"], [250, 251, 9, "enum_NEXT_SYNTAX"], [251, 252, 9, "enum_NEXT_SYNTAX"], [252, 253, 9, "enum_NEXT_SYNTAX"], [254, 15, 10, "enum_LAST_LEXICAL_USE"], [253, 254, 9, "enum_NEXT_SYNTAX"], [254, 255, 9, "enum_NEXT_SYNTAX"], [255, 256, 9, "enum_NEXT_SYNTAX"], [256, 257, 9, "enum_NEXT_SYNTAX"], [257, 258, 9, "enum_NEXT_SYNTAX"], [259, 247, 10, "enum_LAST_LEXICAL_USE"], [258, 259, 9, "enum_NEXT_SYNTAX"], [259, 261, 9, "enum_NEXT_SYNTAX"], [262, 194, 10, "enum_LAST_LEXICAL_USE"], [261, 262, 9, "enum_NEXT_SYNTAX"], [262, 263, 9, "enum_NEXT_SYNTAX"], [263, 264, 9, "enum_NEXT_SYNTAX"], [264, 265, 9, "enum_NEXT_SYNTAX"], [265, 266, 9, "enum_NEXT_SYNTAX"], [266, 267, 9, "enum_NEXT_SYNTAX"], [267, 268, 9, "enum_NEXT_SYNTAX"], [268, 269, 9, "enum_NEXT_SYNTAX"], [270, 218, 10, "enum_LAST_LEXICAL_USE"], [269, 270, 9, "enum_NEXT_SYNTAX"], [270, 271, 9, "enum_NEXT_SYNTAX"], [271, 272, 9, "enum_NEXT_SYNTAX"], [272, 273, 9, "enum_NEXT_SYNTAX"], [273, 274, 9, "enum_NEXT_SYNTAX"], [274, 275, 9, "enum_NEXT_SYNTAX"], [276, 210, 10, "enum_LAST_LEXICAL_USE"], [275, 276, 9, "enum_NEXT_SYNTAX"], [276, 277, 9, "enum_NEXT_SYNTAX"], [277, 278, 9, "enum_NEXT_SYNTAX"], [278, 279, 9, "enum_NEXT_SYNTAX"], [280, 270, 10, "enum_LAST_LEXICAL_USE"], [279, 280, 9, "enum_NEXT_SYNTAX"], [280, 281, 9, "enum_NEXT_SYNTAX"], [281, 282, 9, "enum_NEXT_SYNTAX"], [282, 283, 9, "enum_NEXT_SYNTAX"], [283, 284, 9, "enum_NEXT_SYNTAX"], [284, 285, 9, "enum_NEXT_SYNTAX"], [286, 251, 10, "enum_LAST_LEXICAL_USE"], [285, 286, 9, "enum_NEXT_SYNTAX"], [286, 287, 9, "enum_NEXT_SYNTAX"], [287, 288, 9, "enum_NEXT_SYNTAX"], [288, 291, 9, "enum_NEXT_SYNTAX"], [292, 179, 10, "enum_LAST_LEXICAL_USE"], [291, 292, 9, "enum_NEXT_SYNTAX"], [292, 293, 9, "enum_NEXT_SYNTAX"], [294, 262, 10, "enum_LAST_LEXICAL_USE"], [293, 294, 9, "enum_NEXT_SYNTAX"], [294, 295, 9, "enum_NEXT_SYNTAX"], [295, 296, 9, "enum_NEXT_SYNTAX"], [296, 297, 9, "enum_NEXT_SYNTAX"], [297, 298, 9, "enum_NEXT_SYNTAX"], [298, 299, 9, "enum_NEXT_SYNTAX"], [299, 300, 9, "enum_NEXT_SYNTAX"], [300, 301, 9, "enum_NEXT_SYNTAX"], [301, 302, 9, "enum_NEXT_SYNTAX"], [302, 305, 9, "enum_NEXT_SYNTAX"], [306, 292, 10, "enum_LAST_LEXICAL_USE"], [305, 306, 9, "enum_NEXT_SYNTAX"], [306, 307, 9, "enum_NEXT_SYNTAX"], [308, 294, 10, "enum_LAST_LEXICAL_USE"], [307, 308, 9, "enum_NEXT_SYNTAX"], [308, 309, 9, "enum_NEXT_SYNTAX"], [309, 310, 9, "enum_NEXT_SYNTAX"], [310, 311, 9, "enum_NEXT_SYNTAX"], [311, 312, 9, "enum_NEXT_SYNTAX"], [312, 313, 9, "enum_NEXT_SYNTAX"], [313, 314, 9, "enum_NEXT_SYNTAX"], [314, 315, 9, "enum_NEXT_SYNTAX"], [315, 316, 9, "enum_NEXT_SYNTAX"], [316, 317, 9, "enum_NEXT_SYNTAX"], [317, 318, 9, "enum_NEXT_SYNTAX"], [318, 320, 9, "enum_NEXT_SYNTAX"], [320, 321, 9, "enum_NEXT_SYNTAX"], [321, 322, 9, "enum_NEXT_SYNTAX"], [323, 308, 10, "enum_LAST_LEXICAL_USE"], [322, 323, 9, "enum_NEXT_SYNTAX"], [323, 324, 9, "enum_NEXT_SYNTAX"], [324, 325, 9, "enum_NEXT_SYNTAX"], [325, 326, 9, "enum_NEXT_SYNTAX"], [326, 327, 9, "enum_NEXT_SYNTAX"], [327, 328, 9, "enum_NEXT_SYNTAX"], [328, 329, 9, "enum_NEXT_SYNTAX"], [329, 330, 9, "enum_NEXT_SYNTAX"], [330, 331, 9, "enum_NEXT_SYNTAX"], [331, 332, 9, "enum_NEXT_SYNTAX"], [333, 321, 10, "enum_LAST_LEXICAL_USE"], [332, 333, 9, "enum_NEXT_SYNTAX"], [333, 334, 9, "enum_NEXT_SYNTAX"], [335, 276, 10, "enum_LAST_LEXICAL_USE"], [334, 335, 9, "enum_NEXT_SYNTAX"], [335, 336, 9, "enum_NEXT_SYNTAX"], [336, 337, 9, "enum_NEXT_SYNTAX"], [337, 338, 9, "enum_NEXT_SYNTAX"], [339, 333, 10, "enum_LAST_LEXICAL_USE"], [338, 339, 9, "enum_NEXT_SYNTAX"], [339, 340, 9, "enum_NEXT_SYNTAX"], [341, 335, 10, "enum_LAST_LEXICAL_USE"], [340, 341, 9, "enum_NEXT_SYNTAX"], [341, 342, 9, "enum_NEXT_SYNTAX"], [342, 343, 9, "enum_NEXT_SYNTAX"], [343, 344, 9, "enum_NEXT_SYNTAX"], [344, 346, 9, "enum_NEXT_SYNTAX"], [346, 347, 9, "enum_NEXT_SYNTAX"], [347, 348, 9, "enum_NEXT_SYNTAX"], [349, 280, 10, "enum_LAST_LEXICAL_USE"], [348, 349, 9, "enum_NEXT_SYNTAX"], [349, 350, 9, "enum_NEXT_SYNTAX"], [350, 351, 9, "enum_NEXT_SYNTAX"], [351, 352, 9, "enum_NEXT_SYNTAX"], [352, 353, 9, "enum_NEXT_SYNTAX"], [353, 354, 9, "enum_NEXT_SYNTAX"], [355, 339, 10, "enum_LAST_LEXICAL_USE"], [354, 355, 9, "enum_NEXT_SYNTAX"], [355, 356, 9, "enum_NEXT_SYNTAX"], [356, 357, 9, "enum_NEXT_SYNTAX"], [357, 358, 9, "enum_NEXT_SYNTAX"], [358, 360, 9, "enum_NEXT_SYNTAX"], [361, 230, 10, "enum_LAST_LEXICAL_USE"], [360, 361, 9, "enum_NEXT_SYNTAX"], [361, 362, 9, "enum_NEXT_SYNTAX"], [362, 363, 9, "enum_NEXT_SYNTAX"], [363, 364, 9, "enum_NEXT_SYNTAX"], [364, 365, 9, "enum_NEXT_SYNTAX"], [365, 366, 9, "enum_NEXT_SYNTAX"], [366, 367, 9, "enum_NEXT_SYNTAX"], [367, 368, 9, "enum_NEXT_SYNTAX"], [369, 355, 10, "enum_LAST_LEXICAL_USE"], [368, 369, 9, "enum_NEXT_SYNTAX"], [369, 370, 9, "enum_NEXT_SYNTAX"], [370, 371, 9, "enum_NEXT_SYNTAX"], [371, 374, 9, "enum_NEXT_SYNTAX"], [374, 375, 9, "enum_NEXT_SYNTAX"], [375, 377, 9, "enum_NEXT_SYNTAX"], [378, 259, 10, "enum_LAST_LEXICAL_USE"], [377, 378, 9, "enum_NEXT_SYNTAX"], [378, 379, 9, "enum_NEXT_SYNTAX"], [379, 380, 9, "enum_NEXT_SYNTAX"], [380, 381, 9, "enum_NEXT_SYNTAX"], [382, 369, 10, "enum_LAST_LEXICAL_USE"], [381, 382, 9, "enum_NEXT_SYNTAX"], [382, 383, 9, "enum_NEXT_SYNTAX"], [383, 385, 9, "enum_NEXT_SYNTAX"], [386, 323, 10, "enum_LAST_LEXICAL_USE"], [385, 386, 9, "enum_NEXT_SYNTAX"], [386, 387, 9, "enum_NEXT_SYNTAX"], [387, 388, 9, "enum_NEXT_SYNTAX"], [388, 389, 9, "enum_NEXT_SYNTAX"], [389, 390, 9, "enum_NEXT_SYNTAX"], [390, 391, 9, "enum_NEXT_SYNTAX"], [391, 392, 9, "enum_NEXT_SYNTAX"], [392, 393, 9, "enum_NEXT_SYNTAX"], [393, 394, 9, "enum_NEXT_SYNTAX"], [394, 395, 9, "enum_NEXT_SYNTAX"], [396, 349, 10, "enum_LAST_LEXICAL_USE"], [395, 396, 9, "enum_NEXT_SYNTAX"], [396, 397, 9, "enum_NEXT_SYNTAX"], [397, 398, 9, "enum_NEXT_SYNTAX"], [398, 399, 9, "enum_NEXT_SYNTAX"], [399, 400, 9, "enum_NEXT_SYNTAX"], [400, 401, 9, "enum_NEXT_SYNTAX"], [402, 341, 10, "enum_LAST_LEXICAL_USE"], [401, 402, 9, "enum_NEXT_SYNTAX"], [402, 403, 9, "enum_NEXT_SYNTAX"], [403, 404, 9, "enum_NEXT_SYNTAX"], [404, 405, 9, "enum_NEXT_SYNTAX"], [406, 396, 10, "enum_LAST_LEXICAL_USE"], [405, 406, 9, "enum_NEXT_SYNTAX"], [406, 407, 9, "enum_NEXT_SYNTAX"], [407, 408, 9, "enum_NEXT_SYNTAX"], [408, 409, 9, "enum_NEXT_SYNTAX"], [409, 410, 9, "enum_NEXT_SYNTAX"], [410, 411, 9, "enum_NEXT_SYNTAX"], [412, 382, 10, "enum_LAST_LEXICAL_USE"], [411, 412, 9, "enum_NEXT_SYNTAX"], [412, 413, 9, "enum_NEXT_SYNTAX"], [413, 414, 9, "enum_NEXT_SYNTAX"], [414, 418, 9, "enum_NEXT_SYNTAX"], [419, 254, 10, "enum_LAST_LEXICAL_USE"], [418, 419, 9, "enum_NEXT_SYNTAX"], [419, 420, 9, "enum_NEXT_SYNTAX"], [420, 421, 9, "enum_NEXT_SYNTAX"], [421, 422, 9, "enum_NEXT_SYNTAX"], [422, 423, 9, "enum_NEXT_SYNTAX"], [423, 424, 9, "enum_NEXT_SYNTAX"], [424, 425, 9, "enum_NEXT_SYNTAX"], [425, 426, 9, "enum_NEXT_SYNTAX"], [426, 427, 9, "enum_NEXT_SYNTAX"], [427, 428, 9, "enum_NEXT_SYNTAX"], [429, 419, 10, "enum_LAST_LEXICAL_USE"], [428, 429, 9, "enum_NEXT_SYNTAX"], [429, 430, 9, "enum_NEXT_SYNTAX"], [430, 431, 9, "enum_NEXT_SYNTAX"], [431, 432, 9, "enum_NEXT_SYNTAX"], [432, 433, 9, "enum_NEXT_SYNTAX"], [434, 378, 10, "enum_LAST_LEXICAL_USE"], [433, 434, 9, "enum_NEXT_SYNTAX"], [434, 436, 9, "enum_NEXT_SYNTAX"], [436, 437, 9, "enum_NEXT_SYNTAX"], [438, 386, 10, "enum_LAST_LEXICAL_USE"], [437, 438, 9, "enum_NEXT_SYNTAX"], [438, 439, 9, "enum_NEXT_SYNTAX"], [440, 429, 10, "enum_LAST_LEXICAL_USE"], [439, 440, 9, "enum_NEXT_SYNTAX"], [440, 441, 9, "enum_NEXT_SYNTAX"], [3, 10, 1, "enum_CFG_NEXT"], [10, 20, 1, "enum_CFG_NEXT"], [20, 38, 1, "enum_CFG_NEXT"], [38, 50, 1, "enum_CFG_NEXT"], [50, 64, 1, "enum_CFG_NEXT"], [50, 418, 1, "enum_CFG_NEXT"], [64, 69, 1, "enum_CFG_NEXT"], [64, 186, 1, "enum_CFG_NEXT"], [69, 83, 1, "enum_CFG_NEXT"], [83, 76, 1, "enum_CFG_NEXT"], [76, 87, 1, "enum_CFG_NEXT"], [76, 166, 1, "enum_CFG_NEXT"], [87, 103, 1, "enum_CFG_NEXT"], [103, 115, 1, "enum_CFG_NEXT"], [103, 132, 1, "enum_CFG_NEXT"], [115, 140, 1, "enum_CFG_NEXT"], [132, 140, 1, "enum_CFG_NEXT"], [140, 76, 1, "enum_CFG_NEXT"], [166, 186, 1, "enum_CFG_NEXT"], [186, 299, 1, "enum_CFG_NEXT"], [186, 191, 1, "enum_CFG_NEXT"], [191, 201, 1, "enum_CFG_NEXT"], [201, 217, 1, "enum_CFG_NEXT"], [217, 246, 1, "enum_CFG_NEXT"], [217, 229, 1, "enum_CFG_NEXT"], [229, 261, 1, "enum_CFG_NEXT"], [246, 253, 1, "enum_CFG_NEXT"], [253, 261, 1, "enum_CFG_NEXT"], [261, 299, 1, "enum_CFG_NEXT"], [299, 315, 1, "enum_CFG_NEXT"], [299, 418, 1, "enum_CFG_NEXT"], [315, 320, 1, "enum_CFG_NEXT"], [315, 418, 1, "enum_CFG_NEXT"], [320, 332, 1, "enum_CFG_NEXT"], [332, 348, 1, "enum_CFG_NEXT"], [348, 377, 1, "enum_CFG_NEXT"], [348, 360, 1, "enum_CFG_NEXT"], [360, 385, 1, "enum_CFG_NEXT"], [377, 385, 1, "enum_CFG_NEXT"], [385, 418, 1, "enum_CFG_NEXT"], [418, 428, 1, "enum_CFG_NEXT"], [428, 436, 1, "enum_CFG_NEXT"], [15, 6, 3, "enum_LAST_WRITE"], [21, 11, 2, "enum_LAST_READ"], [32, 2, 3, "enum_LAST_WRITE"], [47, 4, 3, "enum_LAST_WRITE"], [57, 45, 2, "enum_LAST_READ"], [59, 47, 2, "enum_LAST_READ"], [59, 4, 3, "enum_LAST_WRITE"], [78, 59, 2, "enum_LAST_READ"], [78, 4, 3, "enum_LAST_WRITE"], [76, 161, 2, "enum_LAST_READ"], [76, 88, 3, "enum_LAST_WRITE"], [90, 151, 2, "enum_LAST_READ"], [90, 32, 2, "enum_LAST_READ"], [90, 2, 3, "enum_LAST_WRITE"], [94, 161, 2, "enum_LAST_READ"], [94, 76, 3, "enum_LAST_WRITE"], [96, 90, 2, "enum_LAST_READ"], [96, 2, 3, "enum_LAST_WRITE"], [88, 94, 2, "enum_LAST_READ"], [88, 76, 3, "enum_LAST_WRITE"], [104, 155, 2, "enum_LAST_READ"], [110, 94, 2, "enum_LAST_READ"], [110, 88, 3, "enum_LAST_WRITE"], [116, 116, 2, "enum_LAST_READ"], [116, 21, 2, "enum_LAST_READ"], [124, 110, 2, "enum_LAST_READ"], [124, 88, 3, "enum_LAST_WRITE"], [133, 133, 2, "enum_LAST_READ"], [133, 39, 3, "enum_LAST_WRITE"], [137, 110, 2, "enum_LAST_READ"], [137, 88, 3, "enum_LAST_WRITE"], [141, 141, 2, "enum_LAST_READ"], [141, 70, 3, "enum_LAST_WRITE"], [145, 104, 2, "enum_LAST_READ"], [151, 96, 2, "enum_LAST_READ"], [151, 2, 3, "enum_LAST_WRITE"], [155, 145, 2, "enum_LAST_READ"], [161, 137, 2, "enum_LAST_READ"], [161, 124, 2, "enum_LAST_READ"], [161, 88, 3, "enum_LAST_WRITE"], [175, 141, 2, "enum_LAST_READ"], [175, 70, 3, "enum_LAST_WRITE"], [167, 78, 2, "enum_LAST_READ"], [167, 4, 3, "enum_LAST_WRITE"], [179, 57, 2, "enum_LAST_READ"], [181, 59, 2, "enum_LAST_READ"], [181, 167, 2, "enum_LAST_READ"], [181, 4, 3, "enum_LAST_WRITE"], [194, 181, 2, "enum_LAST_READ"], [194, 4, 3, "enum_LAST_WRITE"], [204, 151, 2, "enum_LAST_READ"], [204, 32, 2, "enum_LAST_READ"], [204, 2, 3, "enum_LAST_WRITE"], [208, 192, 3, "enum_LAST_WRITE"], [210, 204, 2, "enum_LAST_READ"], [210, 2, 3, "enum_LAST_WRITE"], [202, 208, 2, "enum_LAST_READ"], [202, 192, 3, "enum_LAST_WRITE"], [218, 155, 2, "enum_LAST_READ"], [224, 208, 2, "enum_LAST_READ"], [224, 202, 3, "enum_LAST_WRITE"], [230, 116, 2, "enum_LAST_READ"], [230, 21, 2, "enum_LAST_READ"], [238, 224, 2, "enum_LAST_READ"], [238, 202, 3, "enum_LAST_WRITE"], [247, 133, 2, "enum_LAST_READ"], [247, 39, 3, "enum_LAST_WRITE"], [251, 224, 2, "enum_LAST_READ"], [251, 202, 3, "enum_LAST_WRITE"], [259, 247, 2, "enum_LAST_READ"], [259, 39, 3, "enum_LAST_WRITE"], [254, 15, 2, "enum_LAST_READ"], [254, 6, 3, "enum_LAST_WRITE"], [270, 218, 2, "enum_LAST_READ"], [276, 210, 2, "enum_LAST_READ"], [276, 2, 3, "enum_LAST_WRITE"], [280, 270, 2, "enum_LAST_READ"], [286, 238, 2, "enum_LAST_READ"], [286, 251, 2, "enum_LAST_READ"], [286, 202, 3, "enum_LAST_WRITE"], [262, 194, 2, "enum_LAST_READ"], [262, 4, 3, "enum_LAST_WRITE"], [292, 179, 2, "enum_LAST_READ"], [294, 181, 2, "enum_LAST_READ"], [294, 262, 2, "enum_LAST_READ"], [294, 4, 3, "enum_LAST_WRITE"], [306, 292, 2, "enum_LAST_READ"], [308, 294, 2, "enum_LAST_READ"], [308, 4, 3, "enum_LAST_WRITE"], [323, 308, 2, "enum_LAST_READ"], [323, 4, 3, "enum_LAST_WRITE"], [335, 276, 2, "enum_LAST_READ"], [335, 151, 2, "enum_LAST_READ"], [335, 32, 2, "enum_LAST_READ"], [335, 2, 3, "enum_LAST_WRITE"], [339, 321, 3, "enum_LAST_WRITE"], [341, 335, 2, "enum_LAST_READ"], [341, 2, 3, "enum_LAST_WRITE"], [333, 339, 2, "enum_LAST_READ"], [333, 321, 3, "enum_LAST_WRITE"], [349, 280, 2, "enum_LAST_READ"], [349, 155, 2, "enum_LAST_READ"], [355, 339, 2, "enum_LAST_READ"], [355, 333, 3, "enum_LAST_WRITE"], [361, 116, 2, "enum_LAST_READ"], [361, 230, 2, "enum_LAST_READ"], [361, 21, 2, "enum_LAST_READ"], [369, 355, 2, "enum_LAST_READ"], [369, 333, 3, "enum_LAST_WRITE"], [378, 259, 2, "enum_LAST_READ"], [378, 133, 2, "enum_LAST_READ"], [378, 39, 3, "enum_LAST_WRITE"], [382, 355, 2, "enum_LAST_READ"], [382, 333, 3, "enum_LAST_WRITE"], [396, 349, 2, "enum_LAST_READ"], [402, 341, 2, "enum_LAST_READ"], [402, 2, 3, "enum_LAST_WRITE"], [406, 396, 2, "enum_LAST_READ"], [412, 369, 2, "enum_LAST_READ"], [412, 382, 2, "enum_LAST_READ"], [412, 333, 3, "enum_LAST_WRITE"], [386, 323, 2, "enum_LAST_READ"], [386, 4, 3, "enum_LAST_WRITE"], [419, 254, 2, "enum_LAST_READ"], [419, 15, 2, "enum_LAST_READ"], [419, 6, 3, "enum_LAST_WRITE"], [434, 259, 2, "enum_LAST_READ"], [434, 133, 2, "enum_LAST_READ"], [434, 378, 2, "enum_LAST_READ"], [434, 39, 3, "enum_LAST_WRITE"], [429, 419, 2, "enum_LAST_READ"], [429, 6, 3, "enum_LAST_WRITE"], [438, 294, 2, "enum_LAST_READ"], [438, 308, 2, "enum_LAST_READ"], [438, 47, 2, "enum_LAST_READ"], [438, 386, 2, "enum_LAST_READ"], [438, 4, 3, "enum_LAST_WRITE"], [440, 429, 2, "enum_LAST_READ"], [440, 6, 3, "enum_LAST_WRITE"], [172, 175, 4, "enum_COMPUTED_FROM"], [192, 194, 4, "enum_COMPUTED_FROM"], [202, 208, 4, "enum_COMPUTED_FROM"], [202, 204, 4, "enum_COMPUTED_FROM"], [202, 210, 4, "enum_COMPUTED_FROM"], [267, 276, 4, "enum_COMPUTED_FROM"], [267, 286, 4, "enum_COMPUTED_FROM"], [267, 270, 4, "enum_COMPUTED_FROM"], [267, 280, 4, "enum_COMPUTED_FROM"], [88, 94, 4, "enum_COMPUTED_FROM"], [88, 90, 4, "enum_COMPUTED_FROM"], [88, 96, 4, "enum_COMPUTED_FROM"], [255, 259, 4, "enum_COMPUTED_FROM"], [321, 323, 4, "enum_COMPUTED_FROM"], [333, 339, 4, "enum_COMPUTED_FROM"], [333, 335, 4, "enum_COMPUTED_FROM"], [333, 341, 4, "enum_COMPUTED_FROM"], [393, 402, 4, "enum_COMPUTED_FROM"], [393, 412, 4, "enum_COMPUTED_FROM"], [393, 396, 4, "enum_COMPUTED_FROM"], [393, 406, 4, "enum_COMPUTED_FROM"]], "error_location": 259, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/chrisjsewell/ipypublish.git", "old_path": "ipypublish/preprocessors/latex_doc.py", "hash": "cfb66fb74d48cbcc99c695b64fe6336213877e04", "code": "def preprocess(self, nb: Notebook, resources: Dict[str, Any]) -> Tuple[Notebook, Dict[str, Any]]:\n    \n    logging.info(resources['filesfolder'])\n    \n    logging.info('resolving external file paths'+\n                ' in latex_doc metadata to: {}'.format(self.metapath)) \n    external_files: List[str] = []\n    if hasattr(nb.metadata, 'latex_doc'):\n            \n        if hasattr(nb.metadata.latex_doc, 'files'):\n            mfiles: List[str] = []\n            for fpath in nb.metadata.latex_doc.files:\n                fpath: str = self.resolve_path(fpath, self.metapath)\n                if not os.path.exists(fpath):\n                    logging.warning('file in metadata does not exist'\n                                    ': {}'.format(fpath))\n                else:\n                    external_files.append(fpath)\n                mfiles.append(os.path.join(self.filesfolder, os.path.basename(fpath)))   \n\n            nb.metadata.latex_doc.files = mfiles\n    \n        if hasattr(nb.metadata.latex_doc, 'bibliography'):                    \n            bib: str = nb.metadata.latex_doc.bibliography\n            bib = self.resolve_path(bib, self.metapath)\n            if not os.path.exists(bib):\n                logging.warning('bib in metadata does not exist'\n                                ': {}'.format(bib))\n            else:\n                external_files.append(bib)\n                resources['bibliopath'] = external_files\n\n            nb.metadata.latex_doc.bibliography = os.path.join(self.filesfolder,\n                                                            os.path.basename(bib))\n        \n        if hasattr(nb.metadata.latex_doc, 'titlepage'):\n            if hasattr(nb.metadata.latex_doc.titlepage, 'logo'):\n                logo: str = nb.metadata.latex_doc.titlepage.logo\n                logo = self.resolve_path(logo, self.metapath)\n                if not os.path.exists(logo):\n                    logging.warning('logo in metadata does not exist'\n                                    ': {}'.format(logo))\n                else:\n                    external_files.append(logo)\n\n                nb.metadata.latex_doc.titlepage.logo = os.path.join(self.filesfolder,\n                                                        os.path.basename(logo))\n    resources.setdefault(\"external_file_paths\", [])\n    resources['external_file_paths'] += external_files\n    return nb, resources\n", "rewrite": "ReplaceText(target='bib' @(55,46)->(55,60))", "error_line": 30, "has_bug": true, "code_full": "import logging\nimport os\nfrom typing import Any, Dict, List, Tuple\n\n\nclass NotebookMetadata:\n    latex_doc: \"LatexDoc\"\n\n\nclass Notebook:\n    metadata: NotebookMetadata\n\n\nclass LatexDoc:\n    files: List[str]\n    bibliography: str\n    titlepage: \"TitlePage\"\n\n\nclass TitlePage:\n    logo: str\n\n\nclass LatexDocLinks:\n    metapath: str\n    filesfolder: str\n\n    def resolve_path(self, path: str, base_path: str) -> str:\n        return \"\"\n\n    def preprocess(self, nb: Notebook, resources: Dict[str, Any]) -> Tuple[Notebook, Dict[str, Any]]:\n        \n        logging.info(resources['filesfolder'])\n        \n        logging.info('resolving external file paths'+\n                    ' in latex_doc metadata to: {}'.format(self.metapath)) \n        external_files: List[str] = []\n        if hasattr(nb.metadata, 'latex_doc'):\n                \n            if hasattr(nb.metadata.latex_doc, 'files'):\n                mfiles: List[str] = []\n                for fpath in nb.metadata.latex_doc.files:\n                    fpath: str = self.resolve_path(fpath, self.metapath)\n                    if not os.path.exists(fpath):\n                        logging.warning('file in metadata does not exist'\n                                        ': {}'.format(fpath))\n                    else:\n                        external_files.append(fpath)\n                    mfiles.append(os.path.join(self.filesfolder, os.path.basename(fpath)))   \n\n                nb.metadata.latex_doc.files = mfiles\n        \n            if hasattr(nb.metadata.latex_doc, 'bibliography'):                    \n                bib: str = nb.metadata.latex_doc.bibliography\n                bib = self.resolve_path(bib, self.metapath)\n                if not os.path.exists(bib):\n                    logging.warning('bib in metadata does not exist'\n                                    ': {}'.format(bib))\n                else:\n                    external_files.append(bib)\n                    resources['bibliopath'] = external_files\n\n                nb.metadata.latex_doc.bibliography = os.path.join(self.filesfolder,\n                                                                os.path.basename(bib))\n            \n            if hasattr(nb.metadata.latex_doc, 'titlepage'):\n                if hasattr(nb.metadata.latex_doc.titlepage, 'logo'):\n                    logo: str = nb.metadata.latex_doc.titlepage.logo\n                    logo = self.resolve_path(logo, self.metapath)\n                    if not os.path.exists(logo):\n                        logging.warning('logo in metadata does not exist'\n                                        ': {}'.format(logo))\n                    else:\n                        external_files.append(logo)\n\n                    nb.metadata.latex_doc.titlepage.logo = os.path.join(self.filesfolder,\n                                                            os.path.basename(logo))\n        resources.setdefault(\"external_file_paths\", [])\n        resources['external_file_paths'] += external_files\n        return nb, resources\n", "error_location_char": [1416, 1430], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def test_simple(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "class Math", "(", "tfi", ".", "saved_model", ".", "Base", ")", ":", "#NEWLINE#", "#INDENT#", "def __init__(", "self", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "_x", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "#NEWLINE#", "self", ".", "_y", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "#NEWLINE#", "self", ".", "_w", "=", "(", "self", ".", "_x", "+", "self", ".", "_y", ")", "#NEWLINE#", "self", ".", "_z", "=", "(", "self", ".", "_x", "*", "self", ".", "_y", ")", "#NEWLINE#", "#UNINDENT#", "def add(", "self", ",", "*", ",", "x", ",", "y", ")", "->", "{", "'sum'", ":", "self", ".", "_w", "}", ":", "#NEWLINE#", "#INDENT#", "pass", "#NEWLINE#", "#UNINDENT#", "def mult(", "self", ",", "*", ",", "x", ",", "y", ")", "->", "{", "'prod'", ":", "self", ".", "_z", "}", ":", "#NEWLINE#", "#INDENT#", "pass", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "m", "=", "Math", "(", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "3.0", ",", "m", ".", "add", "(", "x", "=", "1.0", ",", "y", "=", "2.0", ")", ".", "sum", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "2.0", ",", "m", ".", "mult", "(", "x", "=", "1.0", ",", "y", "=", "2.0", ")", ".", "prod", ")", "#NEWLINE#", "tfi", ".", "saved_model", ".", "export", "(", "'math.saved_model'", ",", "Math", ")", "#NEWLINE#", "Math2", "=", "tfi", ".", "saved_model", ".", "as_class", "(", "'math.saved_model'", ")", "#NEWLINE#", "m2", "=", "Math2", "(", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "3.0", ",", "m2", ".", "add", "(", "x", "=", "1.0", ",", "y", "=", "2.0", ")", ".", "sum", ")", "#NEWLINE#", "self", ".", "assertEqual", "(", "2.0", ",", "m2", ".", "mult", "(", "x", "=", "1.0", ",", "y", "=", "2.0", ")", ".", "prod", ")"], "edges": [[125, 129, 7, "enum_FIELD"], [131, 137, 7, "enum_FIELD"], [153, 159, 7, "enum_FIELD"], [175, 183, 7, "enum_FIELD"], [186, 194, 7, "enum_FIELD"], [197, 201, 7, "enum_FIELD"], [203, 209, 7, "enum_FIELD"], [225, 231, 7, "enum_FIELD"], [12, 10, 7, "enum_FIELD"], [87, 82, 7, "enum_FIELD"], [87, 91, 7, "enum_FIELD"], [110, 105, 7, "enum_FIELD"], [110, 114, 7, "enum_FIELD"], [129, 128, 7, "enum_FIELD"], [137, 133, 7, "enum_FIELD"], [159, 155, 7, "enum_FIELD"], [183, 179, 7, "enum_FIELD"], [194, 192, 7, "enum_FIELD"], [201, 200, 7, "enum_FIELD"], [209, 205, 7, "enum_FIELD"], [231, 227, 7, "enum_FIELD"], [10, 9, 7, "enum_FIELD"], [23, 31, 7, "enum_FIELD"], [36, 44, 7, "enum_FIELD"], [49, 58, 7, "enum_FIELD"], [63, 72, 7, "enum_FIELD"], [133, 132, 7, "enum_FIELD"], [150, 145, 7, "enum_FIELD"], [155, 154, 7, "enum_FIELD"], [172, 167, 7, "enum_FIELD"], [179, 177, 7, "enum_FIELD"], [192, 190, 7, "enum_FIELD"], [205, 204, 7, "enum_FIELD"], [222, 217, 7, "enum_FIELD"], [227, 226, 7, "enum_FIELD"], [244, 239, 7, "enum_FIELD"], [25, 24, 7, "enum_FIELD"], [31, 29, 7, "enum_FIELD"], [38, 37, 7, "enum_FIELD"], [44, 42, 7, "enum_FIELD"], [51, 50, 7, "enum_FIELD"], [58, 56, 7, "enum_FIELD"], [58, 60, 7, "enum_FIELD"], [65, 64, 7, "enum_FIELD"], [72, 70, 7, "enum_FIELD"], [72, 74, 7, "enum_FIELD"], [93, 92, 7, "enum_FIELD"], [116, 115, 7, "enum_FIELD"], [145, 139, 7, "enum_FIELD"], [167, 161, 7, "enum_FIELD"], [177, 176, 7, "enum_FIELD"], [190, 189, 7, "enum_FIELD"], [217, 211, 7, "enum_FIELD"], [239, 233, 7, "enum_FIELD"], [29, 28, 7, "enum_FIELD"], [33, 32, 7, "enum_FIELD"], [42, 41, 7, "enum_FIELD"], [46, 45, 7, "enum_FIELD"], [56, 55, 7, "enum_FIELD"], [60, 59, 7, "enum_FIELD"], [70, 69, 7, "enum_FIELD"], [74, 73, 7, "enum_FIELD"], [139, 138, 7, "enum_FIELD"], [142, 144, 7, "enum_FIELD"], [146, 148, 7, "enum_FIELD"], [161, 160, 7, "enum_FIELD"], [164, 166, 7, "enum_FIELD"], [168, 170, 7, "enum_FIELD"], [211, 210, 7, "enum_FIELD"], [214, 216, 7, "enum_FIELD"], [218, 220, 7, "enum_FIELD"], [233, 232, 7, "enum_FIELD"], [236, 238, 7, "enum_FIELD"], [240, 242, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 18, 9, "enum_NEXT_SYNTAX"], [19, 2, 10, "enum_LAST_LEXICAL_USE"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 23, 9, "enum_NEXT_SYNTAX"], [24, 19, 10, "enum_LAST_LEXICAL_USE"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [32, 28, 10, "enum_LAST_LEXICAL_USE"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [37, 24, 10, "enum_LAST_LEXICAL_USE"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [41, 32, 10, "enum_LAST_LEXICAL_USE"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [45, 41, 10, "enum_LAST_LEXICAL_USE"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [50, 37, 10, "enum_LAST_LEXICAL_USE"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [55, 50, 10, "enum_LAST_LEXICAL_USE"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [59, 55, 10, "enum_LAST_LEXICAL_USE"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [64, 59, 10, "enum_LAST_LEXICAL_USE"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [69, 64, 10, "enum_LAST_LEXICAL_USE"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [73, 69, 10, "enum_LAST_LEXICAL_USE"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 79, 9, "enum_NEXT_SYNTAX"], [80, 73, 10, "enum_LAST_LEXICAL_USE"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [92, 80, 10, "enum_LAST_LEXICAL_USE"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 99, 9, "enum_NEXT_SYNTAX"], [99, 102, 9, "enum_NEXT_SYNTAX"], [103, 92, 10, "enum_LAST_LEXICAL_USE"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [107, 84, 10, "enum_LAST_LEXICAL_USE"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [109, 86, 10, "enum_LAST_LEXICAL_USE"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [115, 103, 10, "enum_LAST_LEXICAL_USE"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 122, 9, "enum_NEXT_SYNTAX"], [122, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [132, 115, 10, "enum_LAST_LEXICAL_USE"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [138, 126, 10, "enum_LAST_LEXICAL_USE"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [154, 132, 10, "enum_LAST_LEXICAL_USE"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [160, 138, 10, "enum_LAST_LEXICAL_USE"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [176, 9, 10, "enum_LAST_LEXICAL_USE"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [184, 128, 10, "enum_LAST_LEXICAL_USE"], [183, 184, 9, "enum_NEXT_SYNTAX"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [187, 188, 9, "enum_NEXT_SYNTAX"], [189, 176, 10, "enum_LAST_LEXICAL_USE"], [188, 189, 9, "enum_NEXT_SYNTAX"], [189, 190, 9, "enum_NEXT_SYNTAX"], [190, 191, 9, "enum_NEXT_SYNTAX"], [191, 192, 9, "enum_NEXT_SYNTAX"], [192, 193, 9, "enum_NEXT_SYNTAX"], [193, 194, 9, "enum_NEXT_SYNTAX"], [194, 195, 9, "enum_NEXT_SYNTAX"], [195, 196, 9, "enum_NEXT_SYNTAX"], [196, 197, 9, "enum_NEXT_SYNTAX"], [197, 198, 9, "enum_NEXT_SYNTAX"], [198, 199, 9, "enum_NEXT_SYNTAX"], [200, 187, 10, "enum_LAST_LEXICAL_USE"], [199, 200, 9, "enum_NEXT_SYNTAX"], [200, 201, 9, "enum_NEXT_SYNTAX"], [201, 202, 9, "enum_NEXT_SYNTAX"], [202, 203, 9, "enum_NEXT_SYNTAX"], [204, 154, 10, "enum_LAST_LEXICAL_USE"], [203, 204, 9, "enum_NEXT_SYNTAX"], [204, 205, 9, "enum_NEXT_SYNTAX"], [205, 206, 9, "enum_NEXT_SYNTAX"], [206, 207, 9, "enum_NEXT_SYNTAX"], [207, 208, 9, "enum_NEXT_SYNTAX"], [208, 209, 9, "enum_NEXT_SYNTAX"], [210, 198, 10, "enum_LAST_LEXICAL_USE"], [209, 210, 9, "enum_NEXT_SYNTAX"], [210, 211, 9, "enum_NEXT_SYNTAX"], [211, 212, 9, "enum_NEXT_SYNTAX"], [212, 213, 9, "enum_NEXT_SYNTAX"], [213, 214, 9, "enum_NEXT_SYNTAX"], [214, 215, 9, "enum_NEXT_SYNTAX"], [215, 216, 9, "enum_NEXT_SYNTAX"], [216, 217, 9, "enum_NEXT_SYNTAX"], [217, 218, 9, "enum_NEXT_SYNTAX"], [218, 219, 9, "enum_NEXT_SYNTAX"], [219, 220, 9, "enum_NEXT_SYNTAX"], [220, 221, 9, "enum_NEXT_SYNTAX"], [221, 222, 9, "enum_NEXT_SYNTAX"], [222, 223, 9, "enum_NEXT_SYNTAX"], [223, 224, 9, "enum_NEXT_SYNTAX"], [224, 225, 9, "enum_NEXT_SYNTAX"], [226, 204, 10, "enum_LAST_LEXICAL_USE"], [225, 226, 9, "enum_NEXT_SYNTAX"], [226, 227, 9, "enum_NEXT_SYNTAX"], [227, 228, 9, "enum_NEXT_SYNTAX"], [228, 229, 9, "enum_NEXT_SYNTAX"], [229, 230, 9, "enum_NEXT_SYNTAX"], [230, 231, 9, "enum_NEXT_SYNTAX"], [232, 210, 10, "enum_LAST_LEXICAL_USE"], [231, 232, 9, "enum_NEXT_SYNTAX"], [232, 233, 9, "enum_NEXT_SYNTAX"], [233, 234, 9, "enum_NEXT_SYNTAX"], [234, 235, 9, "enum_NEXT_SYNTAX"], [235, 236, 9, "enum_NEXT_SYNTAX"], [236, 237, 9, "enum_NEXT_SYNTAX"], [237, 238, 9, "enum_NEXT_SYNTAX"], [238, 239, 9, "enum_NEXT_SYNTAX"], [239, 240, 9, "enum_NEXT_SYNTAX"], [240, 241, 9, "enum_NEXT_SYNTAX"], [241, 242, 9, "enum_NEXT_SYNTAX"], [242, 243, 9, "enum_NEXT_SYNTAX"], [243, 244, 9, "enum_NEXT_SYNTAX"], [244, 245, 9, "enum_NEXT_SYNTAX"], [245, 246, 9, "enum_NEXT_SYNTAX"], [20, 87, 1, "enum_CFG_NEXT"], [23, 36, 1, "enum_CFG_NEXT"], [36, 49, 1, "enum_CFG_NEXT"], [49, 63, 1, "enum_CFG_NEXT"], [87, 110, 1, "enum_CFG_NEXT"], [110, 8, 1, "enum_CFG_NEXT"], [8, 125, 1, "enum_CFG_NEXT"], [125, 131, 1, "enum_CFG_NEXT"], [131, 153, 1, "enum_CFG_NEXT"], [153, 175, 1, "enum_CFG_NEXT"], [175, 186, 1, "enum_CFG_NEXT"], [186, 197, 1, "enum_CFG_NEXT"], [197, 203, 1, "enum_CFG_NEXT"], [203, 225, 1, "enum_CFG_NEXT"], [32, 28, 2, "enum_LAST_READ"], [24, 19, 3, "enum_LAST_WRITE"], [41, 32, 2, "enum_LAST_READ"], [45, 41, 2, "enum_LAST_READ"], [37, 24, 2, "enum_LAST_READ"], [37, 19, 3, "enum_LAST_WRITE"], [55, 37, 2, "enum_LAST_READ"], [55, 19, 3, "enum_LAST_WRITE"], [59, 55, 2, "enum_LAST_READ"], [59, 19, 3, "enum_LAST_WRITE"], [50, 59, 2, "enum_LAST_READ"], [50, 19, 3, "enum_LAST_WRITE"], [69, 50, 2, "enum_LAST_READ"], [69, 19, 3, "enum_LAST_WRITE"], [73, 69, 2, "enum_LAST_READ"], [73, 19, 3, "enum_LAST_WRITE"], [64, 73, 2, "enum_LAST_READ"], [64, 19, 3, "enum_LAST_WRITE"], [128, 8, 3, "enum_LAST_WRITE"], [132, 2, 3, "enum_LAST_WRITE"], [138, 126, 3, "enum_LAST_WRITE"], [154, 132, 2, "enum_LAST_READ"], [154, 2, 3, "enum_LAST_WRITE"], [160, 138, 2, "enum_LAST_READ"], [160, 126, 3, "enum_LAST_WRITE"], [184, 128, 2, "enum_LAST_READ"], [184, 8, 3, "enum_LAST_WRITE"], [189, 176, 2, "enum_LAST_READ"], [200, 187, 3, "enum_LAST_WRITE"], [204, 154, 2, "enum_LAST_READ"], [204, 2, 3, "enum_LAST_WRITE"], [210, 198, 3, "enum_LAST_WRITE"], [226, 204, 2, "enum_LAST_READ"], [226, 2, 3, "enum_LAST_WRITE"], [232, 210, 2, "enum_LAST_READ"], [232, 198, 3, "enum_LAST_WRITE"], [126, 128, 4, "enum_COMPUTED_FROM"], [187, 189, 4, "enum_COMPUTED_FROM"], [198, 200, 4, "enum_COMPUTED_FROM"], [25, 28, 4, "enum_COMPUTED_FROM"], [25, 32, 4, "enum_COMPUTED_FROM"], [38, 41, 4, "enum_COMPUTED_FROM"], [38, 45, 4, "enum_COMPUTED_FROM"], [51, 55, 4, "enum_COMPUTED_FROM"], [51, 59, 4, "enum_COMPUTED_FROM"], [65, 69, 4, "enum_COMPUTED_FROM"], [65, 73, 4, "enum_COMPUTED_FROM"]], "error_location": 184, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/ajbouh/tfi.git", "old_path": "tests/saved_model_test.py", "hash": "029bc838140ad2d9f9a24d8900a918a9ffc1eacd", "code": "def test_simple(self):\n    class Math(tfi.saved_model.Base):\n        _x: Any\n        _y: Any\n        _w: Any\n        _z: Any\n\n        def __init__(self):\n            self._x = tf.placeholder(tf.float32)\n            self._y = tf.placeholder(tf.float32)\n            self._w = self._x + self._y\n            self._z = self._x * self._y\n        def add(self, *, x: self._x, y: self._y) -> {'sum': self._w}:\n            pass\n        def mult(self, *, x: self._x, y: self._y) -> {'prod': self._z}:\n            pass\n\n    m: Math = Math()\n\n    # Prove that simple add and multiply work.\n    self.assertEqual(3.0, m.add(x=1.0, y=2.0).sum)\n    self.assertEqual(2.0, m.mult(x=1.0, y=2.0).prod)\n\n    tfi.saved_model.export(\"math.saved_model\", Math)\n    # Prove that we can save it.\n    # Prove that we can restore it to a new class.\n\n    Math2: Type = tfi.saved_model.as_class(\"math.saved_model\")\n    # Prove that we can save and restore it again.\n    m2: Any = Math2()\n    self.assertEqual(3.0, m2.add(x=1.0, y=2.0).sum)\n    self.assertEqual(2.0, m2.mult(x=1.0, y=2.0).prod)\n", "rewrite": "ReplaceText(target='m' @(24,51)->(24,55))", "error_line": 18, "has_bug": true, "code_full": "import unittest\nfrom typing import Any, Type\n\nimport tensorflow as tf\n\n\nclass tfi:\n    class saved_model:\n        class Base:\n            pass\n        @staticmethod\n        def export(path: str, model: \"tfi.saved_model.Base\"):\n            pass\n\n        @staticmethod\n        def as_class(path: str) -> Type:\n            return tfi.saved_model.Base\n\nclass SavedModelTest(unittest.TestCase):\n    def test_simple(self):\n        class Math(tfi.saved_model.Base):\n            _x: Any\n            _y: Any\n            _w: Any\n            _z: Any\n\n            def __init__(self):\n                self._x = tf.placeholder(tf.float32)\n                self._y = tf.placeholder(tf.float32)\n                self._w = self._x + self._y\n                self._z = self._x * self._y\n            def add(self, *, x: self._x, y: self._y) -> {'sum': self._w}:\n                pass\n            def mult(self, *, x: self._x, y: self._y) -> {'prod': self._z}:\n                pass\n\n        m: Math = Math()\n\n        # Prove that simple add and multiply work.\n        self.assertEqual(3.0, m.add(x=1.0, y=2.0).sum)\n        self.assertEqual(2.0, m.mult(x=1.0, y=2.0).prod)\n\n        tfi.saved_model.export(\"math.saved_model\", Math)\n        # Prove that we can save it.\n        # Prove that we can restore it to a new class.\n\n        Math2: Type = tfi.saved_model.as_class(\"math.saved_model\")\n        # Prove that we can save and restore it again.\n        m2: Any = Math2()\n        self.assertEqual(3.0, m2.add(x=1.0, y=2.0).sum)\n        self.assertEqual(2.0, m2.mult(x=1.0, y=2.0).prod)\n", "error_location_char": [730, 734], "type_checked_pytype": true, "type_error_label": "arg-type", "type_checked_mypy": false}
{"source_tokens": ["#NEWLINE#", "def createSwirlFile(", "self", ",", "fileName", ")", ":", "#NEWLINE#", "#INDENT#", "' given a fileName it return the associated swirlFile if present\\n    otherwise it creates a new one with all the symlinks resolved'", "#NEWLINE#", "links", "=", "[", "]", "#NEWLINE#", "while", "os", ".", "path", ".", "islink", "(", "fileName", ")", ":", "#NEWLINE#", "#INDENT#", "p", "=", "os", ".", "readlink", "(", "fileName", ")", "#NEWLINE#", "if", "(", "not", "os", ".", "path", ".", "isabs", "(", "p", ")", ")", ":", "#NEWLINE#", "#INDENT#", "p", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "fileName", ")", ",", "p", ")", "#NEWLINE#", "#UNINDENT#", "links", ".", "append", "(", "p", ")", "#NEWLINE#", "fileName", "=", "p", "#NEWLINE#", "#UNINDENT#", "for", "swirlFile", "in", "self", ".", "swirlFiles", ":", "#NEWLINE#", "#INDENT#", "if", "(", "swirlFile", ".", "path", "==", "fileName", ")", ":", "#NEWLINE#", "#INDENT#", "swirlFile", ".", "setLinks", "(", "links", ")", "#NEWLINE#", "return", "swirlFile", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "swirlFile", "=", "SwirlFile", "(", "fileName", ",", "links", ")", "#NEWLINE#", "self", ".", "swirlFiles", ".", "append", "(", "swirlFile", ")", "#NEWLINE#", "return", "swirlFile"], "edges": [[1, 3, 7, "enum_FIELD"], [8, 9, 7, "enum_FIELD"], [10, 13, 7, "enum_FIELD"], [16, 22, 7, "enum_FIELD"], [87, 86, 7, "enum_FIELD"], [87, 89, 7, "enum_FIELD"], [116, 122, 7, "enum_FIELD"], [125, 131, 7, "enum_FIELD"], [135, 136, 7, "enum_FIELD"], [22, 20, 7, "enum_FIELD"], [27, 33, 7, "enum_FIELD"], [37, 39, 7, "enum_FIELD"], [72, 76, 7, "enum_FIELD"], [79, 82, 7, "enum_FIELD"], [89, 88, 7, "enum_FIELD"], [94, 99, 7, "enum_FIELD"], [122, 119, 7, "enum_FIELD"], [131, 129, 7, "enum_FIELD"], [20, 18, 7, "enum_FIELD"], [33, 31, 7, "enum_FIELD"], [39, 45, 7, "enum_FIELD"], [51, 68, 7, "enum_FIELD"], [76, 74, 7, "enum_FIELD"], [99, 97, 7, "enum_FIELD"], [104, 108, 7, "enum_FIELD"], [112, 113, 7, "enum_FIELD"], [129, 127, 7, "enum_FIELD"], [18, 17, 7, "enum_FIELD"], [31, 30, 7, "enum_FIELD"], [45, 43, 7, "enum_FIELD"], [68, 57, 7, "enum_FIELD"], [74, 73, 7, "enum_FIELD"], [97, 96, 7, "enum_FIELD"], [108, 106, 7, "enum_FIELD"], [127, 126, 7, "enum_FIELD"], [43, 41, 7, "enum_FIELD"], [57, 55, 7, "enum_FIELD"], [65, 63, 7, "enum_FIELD"], [106, 105, 7, "enum_FIELD"], [41, 40, 7, "enum_FIELD"], [55, 54, 7, "enum_FIELD"], [63, 61, 7, "enum_FIELD"], [61, 60, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [23, 4, 10, "enum_LAST_LEXICAL_USE"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [30, 17, 10, "enum_LAST_LEXICAL_USE"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [34, 23, 10, "enum_LAST_LEXICAL_USE"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [40, 30, 10, "enum_LAST_LEXICAL_USE"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [46, 28, 10, "enum_LAST_LEXICAL_USE"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 51, 9, "enum_NEXT_SYNTAX"], [52, 46, 10, "enum_LAST_LEXICAL_USE"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [54, 40, 10, "enum_LAST_LEXICAL_USE"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [60, 54, 10, "enum_LAST_LEXICAL_USE"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [66, 34, 10, "enum_LAST_LEXICAL_USE"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [69, 52, 10, "enum_LAST_LEXICAL_USE"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 72, 9, "enum_NEXT_SYNTAX"], [73, 11, 10, "enum_LAST_LEXICAL_USE"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [77, 69, 10, "enum_LAST_LEXICAL_USE"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [80, 66, 10, "enum_LAST_LEXICAL_USE"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [82, 77, 10, "enum_LAST_LEXICAL_USE"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [88, 2, 10, "enum_LAST_LEXICAL_USE"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [96, 86, 10, "enum_LAST_LEXICAL_USE"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [100, 80, 10, "enum_LAST_LEXICAL_USE"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 104, 9, "enum_NEXT_SYNTAX"], [105, 96, 10, "enum_LAST_LEXICAL_USE"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [109, 73, 10, "enum_LAST_LEXICAL_USE"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 112, 9, "enum_NEXT_SYNTAX"], [113, 105, 10, "enum_LAST_LEXICAL_USE"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 116, 9, "enum_NEXT_SYNTAX"], [117, 113, 10, "enum_LAST_LEXICAL_USE"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [121, 100, 10, "enum_LAST_LEXICAL_USE"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [123, 109, 10, "enum_LAST_LEXICAL_USE"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [126, 88, 10, "enum_LAST_LEXICAL_USE"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [132, 117, 10, "enum_LAST_LEXICAL_USE"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 135, 9, "enum_NEXT_SYNTAX"], [136, 132, 10, "enum_LAST_LEXICAL_USE"], [135, 136, 9, "enum_NEXT_SYNTAX"], [3, 8, 1, "enum_CFG_NEXT"], [8, 10, 1, "enum_CFG_NEXT"], [10, 22, 1, "enum_CFG_NEXT"], [22, 27, 1, "enum_CFG_NEXT"], [22, 89, 1, "enum_CFG_NEXT"], [27, 39, 1, "enum_CFG_NEXT"], [39, 72, 1, "enum_CFG_NEXT"], [39, 51, 1, "enum_CFG_NEXT"], [51, 72, 1, "enum_CFG_NEXT"], [72, 79, 1, "enum_CFG_NEXT"], [79, 22, 1, "enum_CFG_NEXT"], [89, 86, 1, "enum_CFG_NEXT"], [86, 116, 1, "enum_CFG_NEXT"], [86, 99, 1, "enum_CFG_NEXT"], [99, 86, 1, "enum_CFG_NEXT"], [99, 104, 1, "enum_CFG_NEXT"], [104, 112, 1, "enum_CFG_NEXT"], [116, 125, 1, "enum_CFG_NEXT"], [125, 135, 1, "enum_CFG_NEXT"], [17, 60, 2, "enum_LAST_READ"], [17, 40, 2, "enum_LAST_READ"], [23, 66, 2, "enum_LAST_READ"], [23, 34, 2, "enum_LAST_READ"], [23, 80, 3, "enum_LAST_WRITE"], [23, 4, 3, "enum_LAST_WRITE"], [30, 17, 2, "enum_LAST_READ"], [34, 23, 2, "enum_LAST_READ"], [34, 80, 3, "enum_LAST_WRITE"], [34, 4, 3, "enum_LAST_WRITE"], [28, 82, 2, "enum_LAST_READ"], [28, 52, 3, "enum_LAST_WRITE"], [28, 28, 3, "enum_LAST_WRITE"], [40, 30, 2, "enum_LAST_READ"], [46, 82, 2, "enum_LAST_READ"], [46, 28, 3, "enum_LAST_WRITE"], [54, 40, 2, "enum_LAST_READ"], [60, 54, 2, "enum_LAST_READ"], [66, 34, 2, "enum_LAST_READ"], [66, 80, 3, "enum_LAST_WRITE"], [66, 4, 3, "enum_LAST_WRITE"], [69, 46, 2, "enum_LAST_READ"], [69, 28, 3, "enum_LAST_WRITE"], [52, 69, 2, "enum_LAST_READ"], [52, 28, 3, "enum_LAST_WRITE"], [73, 73, 2, "enum_LAST_READ"], [73, 11, 3, "enum_LAST_WRITE"], [77, 46, 2, "enum_LAST_READ"], [77, 69, 2, "enum_LAST_READ"], [77, 52, 3, "enum_LAST_WRITE"], [77, 28, 3, "enum_LAST_WRITE"], [82, 77, 2, "enum_LAST_READ"], [82, 52, 3, "enum_LAST_WRITE"], [82, 28, 3, "enum_LAST_WRITE"], [80, 66, 2, "enum_LAST_READ"], [80, 34, 2, "enum_LAST_READ"], [80, 80, 3, "enum_LAST_WRITE"], [80, 4, 3, "enum_LAST_WRITE"], [88, 2, 3, "enum_LAST_WRITE"], [86, 96, 2, "enum_LAST_READ"], [86, 86, 3, "enum_LAST_WRITE"], [96, 96, 2, "enum_LAST_READ"], [96, 86, 3, "enum_LAST_WRITE"], [100, 100, 2, "enum_LAST_READ"], [100, 23, 2, "enum_LAST_READ"], [100, 80, 3, "enum_LAST_WRITE"], [100, 4, 3, "enum_LAST_WRITE"], [105, 96, 2, "enum_LAST_READ"], [105, 86, 3, "enum_LAST_WRITE"], [109, 73, 2, "enum_LAST_READ"], [109, 11, 3, "enum_LAST_WRITE"], [113, 105, 2, "enum_LAST_READ"], [113, 86, 3, "enum_LAST_WRITE"], [121, 100, 2, "enum_LAST_READ"], [121, 23, 2, "enum_LAST_READ"], [121, 80, 3, "enum_LAST_WRITE"], [121, 4, 3, "enum_LAST_WRITE"], [123, 73, 2, "enum_LAST_READ"], [123, 11, 3, "enum_LAST_WRITE"], [117, 96, 2, "enum_LAST_READ"], [117, 86, 3, "enum_LAST_WRITE"], [126, 88, 2, "enum_LAST_READ"], [126, 2, 3, "enum_LAST_WRITE"], [132, 96, 2, "enum_LAST_READ"], [132, 117, 3, "enum_LAST_WRITE"], [136, 132, 2, "enum_LAST_READ"], [136, 117, 3, "enum_LAST_WRITE"], [117, 119, 4, "enum_COMPUTED_FROM"], [117, 121, 4, "enum_COMPUTED_FROM"], [117, 123, 4, "enum_COMPUTED_FROM"], [28, 34, 4, "enum_COMPUTED_FROM"], [28, 30, 4, "enum_COMPUTED_FROM"], [80, 82, 4, "enum_COMPUTED_FROM"], [52, 69, 4, "enum_COMPUTED_FROM"], [52, 66, 4, "enum_COMPUTED_FROM"], [52, 54, 4, "enum_COMPUTED_FROM"], [52, 60, 4, "enum_COMPUTED_FROM"]], "error_location": 77, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/rocksclusters/FingerPrint.git", "old_path": "FingerPrint/swirl.py", "hash": "ab31be4ea3ac33422656d36d635e30c0e9235757", "code": "def createSwirlFile(self, fileName: str) -> SwirlFile:\n    \"\"\" given a fileName it return the associated swirlFile if present\n    otherwise it creates a new one with all the symlinks resolved\"\"\"\n    links: List[str] = []\n    while os.path.islink(fileName) :\n        p: str = os.readlink(fileName)\n        if not os.path.isabs(p):\n            p: str = os.path.join( os.path.dirname(fileName), p)\n        links.append(p)\n        fileName = p\n    for swirlFile in self.swirlFiles:\n        if swirlFile.path == fileName:\n            #we found it\n            swirlFile.setLinks(links)\n            return swirlFile\n    swirlFile = SwirlFile(fileName, links)\n    self.swirlFiles.append(swirlFile)\n    return swirlFile\n", "rewrite": "ReplaceText(target='fileName' @(47,25)->(47,26))", "error_line": 8, "has_bug": true, "code_full": "import os\nfrom typing import List\n\n\nclass SwirlFile:\n    path: str\n    links: List[str]\n\n    def __init__(self, path: str, links: List[str]):\n        pass\n\n    def setLinks(self, links: List[str]):\n        pass\n\n\nclass Swirl:\n    swirlFiles: List[SwirlFile]\n\n    def createSwirlFile(self, fileName: str) -> SwirlFile:\n        \"\"\" given a fileName it return the associated swirlFile if present\n        otherwise it creates a new one with all the symlinks resolved\"\"\"\n        links: List[str] = []\n        while os.path.islink(fileName) :\n            p: str = os.readlink(fileName)\n            if not os.path.isabs(p):\n                p: str = os.path.join( os.path.dirname(fileName), p)\n            links.append(p)\n            fileName = p\n        for swirlFile in self.swirlFiles:\n            if swirlFile.path == fileName:\n                #we found it\n                swirlFile.setLinks(links)\n                return swirlFile\n        swirlFile = SwirlFile(fileName, links)\n        self.swirlFiles.append(swirlFile)\n        return swirlFile\n", "error_location_char": [416, 417], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def read(", "self", ",", "size", "=", "1", ")", ":", "#NEWLINE#", "#INDENT#", "'Read size bytes from the serial port. If a timeout is set it may\\n       return less characters as requested. With no timeout it will block\\n       until the requested number of bytes is read.'", "#NEWLINE#", "if", "(", "not", "self", ".", "hComPort", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "portNotOpenError", "#NEWLINE#", "#UNINDENT#", "if", "(", "size", ">", "0", ")", ":", "#NEWLINE#", "#INDENT#", "win32", ".", "ResetEvent", "(", "self", ".", "_overlappedRead", ".", "hEvent", ")", "#NEWLINE#", "flags", "=", "win32", ".", "DWORD", "(", ")", "#NEWLINE#", "comstat", "=", "win32", ".", "COMSTAT", "(", ")", "#NEWLINE#", "if", "(", "not", "win32", ".", "ClearCommError", "(", "self", ".", "hComPort", ",", "ctypes", ".", "byref", "(", "flags", ")", ",", "ctypes", ".", "byref", "(", "comstat", ")", ")", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "SerialException", "(", "'call to ClearCommError failed'", ")", "#NEWLINE#", "#UNINDENT#", "if", "(", "self", ".", "timeout", "==", "0", ")", ":", "#NEWLINE#", "#INDENT#", "n", "=", "min", "(", "comstat", ".", "cbInQue", ",", "size", ")", "#NEWLINE#", "if", "(", "n", ">", "0", ")", ":", "#NEWLINE#", "#INDENT#", "buf", "=", "ctypes", ".", "create_string_buffer", "(", "n", ")", "#NEWLINE#", "rc", "=", "win32", ".", "DWORD", "(", ")", "#NEWLINE#", "err", "=", "win32", ".", "ReadFile", "(", "self", ".", "hComPort", ",", "buf", ",", "size", ",", "ctypes", ".", "byref", "(", "rc", ")", ",", "ctypes", ".", "byref", "(", "self", ".", "_overlappedRead", ")", ")", "#NEWLINE#", "if", "(", "(", "not", "err", ")", "and", "(", "win32", ".", "GetLastError", "(", ")", "!=", "win32", ".", "ERROR_IO_PENDING", ")", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "SerialException", "(", "(", "'ReadFile failed (%s)'", "%", "ctypes", ".", "WinError", "(", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "err", "=", "win32", ".", "WaitForSingleObject", "(", "self", ".", "_overlappedRead", ".", "hEvent", ",", "win32", ".", "INFINITE", ")", "#NEWLINE#", "read", "=", "buf", ".", "raw", "[", ":", "rc", ".", "value", "]", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "read", "=", "bytes", "(", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "buf", "=", "ctypes", ".", "create_string_buffer", "(", "size", ")", "#NEWLINE#", "rc", "=", "win32", ".", "DWORD", "(", ")", "#NEWLINE#", "err", "=", "win32", ".", "ReadFile", "(", "self", ".", "hComPort", ",", "buf", ",", "size", ",", "ctypes", ".", "byref", "(", "rc", ")", ",", "ctypes", ".", "byref", "(", "self", ".", "_overlappedRead", ")", ")", "#NEWLINE#", "if", "(", "(", "not", "err", ")", "and", "(", "win32", ".", "GetLastError", "(", ")", "!=", "win32", ".", "ERROR_IO_PENDING", ")", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "SerialException", "(", "(", "'ReadFile failed (%s)'", "%", "ctypes", ".", "WinError", "(", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "err", "=", "win32", ".", "GetOverlappedResult", "(", "self", ".", "hComPort", ",", "ctypes", ".", "byref", "(", "self", ".", "_overlappedRead", ")", ",", "ctypes", ".", "byref", "(", "rc", ")", ",", "True", ")", "#NEWLINE#", "read", "=", "buf", ".", "raw", "[", ":", "rc", ".", "value", "]", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "read", "=", "bytes", "(", ")", "#NEWLINE#", "#UNINDENT#", "return", "bytes", "(", "read", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [10, 11, 7, "enum_FIELD"], [13, 15, 7, "enum_FIELD"], [33, 30, 7, "enum_FIELD"], [400, 402, 7, "enum_FIELD"], [15, 17, 7, "enum_FIELD"], [23, 24, 7, "enum_FIELD"], [30, 29, 7, "enum_FIELD"], [35, 39, 7, "enum_FIELD"], [46, 52, 7, "enum_FIELD"], [54, 60, 7, "enum_FIELD"], [63, 65, 7, "enum_FIELD"], [107, 104, 7, "enum_FIELD"], [392, 396, 7, "enum_FIELD"], [402, 401, 7, "enum_FIELD"], [17, 16, 7, "enum_FIELD"], [39, 37, 7, "enum_FIELD"], [52, 50, 7, "enum_FIELD"], [60, 58, 7, "enum_FIELD"], [65, 73, 7, "enum_FIELD"], [92, 94, 7, "enum_FIELD"], [104, 102, 7, "enum_FIELD"], [109, 117, 7, "enum_FIELD"], [127, 124, 7, "enum_FIELD"], [260, 266, 7, "enum_FIELD"], [269, 275, 7, "enum_FIELD"], [277, 289, 7, "enum_FIELD"], [309, 315, 7, "enum_FIELD"], [345, 364, 7, "enum_FIELD"], [374, 380, 7, "enum_FIELD"], [396, 395, 7, "enum_FIELD"], [37, 36, 7, "enum_FIELD"], [43, 41, 7, "enum_FIELD"], [50, 49, 7, "enum_FIELD"], [58, 57, 7, "enum_FIELD"], [73, 67, 7, "enum_FIELD"], [94, 93, 7, "enum_FIELD"], [102, 101, 7, "enum_FIELD"], [117, 112, 7, "enum_FIELD"], [124, 123, 7, "enum_FIELD"], [129, 135, 7, "enum_FIELD"], [138, 144, 7, "enum_FIELD"], [146, 158, 7, "enum_FIELD"], [178, 184, 7, "enum_FIELD"], [214, 226, 7, "enum_FIELD"], [231, 237, 7, "enum_FIELD"], [248, 252, 7, "enum_FIELD"], [266, 264, 7, "enum_FIELD"], [275, 273, 7, "enum_FIELD"], [289, 281, 7, "enum_FIELD"], [331, 333, 7, "enum_FIELD"], [364, 349, 7, "enum_FIELD"], [380, 378, 7, "enum_FIELD"], [380, 381, 7, "enum_FIELD"], [41, 40, 7, "enum_FIELD"], [67, 66, 7, "enum_FIELD"], [71, 70, 7, "enum_FIELD"], [77, 75, 7, "enum_FIELD"], [84, 82, 7, "enum_FIELD"], [115, 114, 7, "enum_FIELD"], [135, 133, 7, "enum_FIELD"], [144, 142, 7, "enum_FIELD"], [158, 150, 7, "enum_FIELD"], [200, 202, 7, "enum_FIELD"], [226, 218, 7, "enum_FIELD"], [237, 235, 7, "enum_FIELD"], [237, 238, 7, "enum_FIELD"], [252, 251, 7, "enum_FIELD"], [264, 263, 7, "enum_FIELD"], [273, 272, 7, "enum_FIELD"], [281, 280, 7, "enum_FIELD"], [285, 284, 7, "enum_FIELD"], [295, 293, 7, "enum_FIELD"], [302, 300, 7, "enum_FIELD"], [312, 313, 7, "enum_FIELD"], [322, 320, 7, "enum_FIELD"], [333, 332, 7, "enum_FIELD"], [349, 348, 7, "enum_FIELD"], [353, 352, 7, "enum_FIELD"], [359, 357, 7, "enum_FIELD"], [368, 366, 7, "enum_FIELD"], [378, 377, 7, "enum_FIELD"], [381, 383, 7, "enum_FIELD"], [75, 74, 7, "enum_FIELD"], [82, 81, 7, "enum_FIELD"], [133, 132, 7, "enum_FIELD"], [142, 141, 7, "enum_FIELD"], [150, 149, 7, "enum_FIELD"], [154, 153, 7, "enum_FIELD"], [164, 162, 7, "enum_FIELD"], [171, 169, 7, "enum_FIELD"], [181, 182, 7, "enum_FIELD"], [191, 189, 7, "enum_FIELD"], [202, 201, 7, "enum_FIELD"], [218, 217, 7, "enum_FIELD"], [224, 222, 7, "enum_FIELD"], [228, 227, 7, "enum_FIELD"], [235, 234, 7, "enum_FIELD"], [238, 240, 7, "enum_FIELD"], [293, 292, 7, "enum_FIELD"], [300, 299, 7, "enum_FIELD"], [304, 303, 7, "enum_FIELD"], [320, 318, 7, "enum_FIELD"], [324, 323, 7, "enum_FIELD"], [336, 335, 7, "enum_FIELD"], [336, 340, 7, "enum_FIELD"], [357, 356, 7, "enum_FIELD"], [361, 360, 7, "enum_FIELD"], [366, 365, 7, "enum_FIELD"], [383, 382, 7, "enum_FIELD"], [162, 161, 7, "enum_FIELD"], [169, 168, 7, "enum_FIELD"], [173, 172, 7, "enum_FIELD"], [189, 187, 7, "enum_FIELD"], [193, 192, 7, "enum_FIELD"], [205, 204, 7, "enum_FIELD"], [205, 209, 7, "enum_FIELD"], [222, 221, 7, "enum_FIELD"], [240, 239, 7, "enum_FIELD"], [318, 317, 7, "enum_FIELD"], [340, 338, 7, "enum_FIELD"], [187, 186, 7, "enum_FIELD"], [209, 207, 7, "enum_FIELD"], [338, 337, 7, "enum_FIELD"], [207, 206, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [16, 2, 10, "enum_LAST_LEXICAL_USE"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [29, 4, 10, "enum_LAST_LEXICAL_USE"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [40, 16, 10, "enum_LAST_LEXICAL_USE"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [49, 36, 10, "enum_LAST_LEXICAL_USE"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [57, 49, 10, "enum_LAST_LEXICAL_USE"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [66, 57, 10, "enum_LAST_LEXICAL_USE"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [70, 40, 10, "enum_LAST_LEXICAL_USE"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [78, 47, 10, "enum_LAST_LEXICAL_USE"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [81, 74, 10, "enum_LAST_LEXICAL_USE"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [85, 55, 10, "enum_LAST_LEXICAL_USE"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [101, 70, 10, "enum_LAST_LEXICAL_USE"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [114, 85, 10, "enum_LAST_LEXICAL_USE"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [118, 29, 10, "enum_LAST_LEXICAL_USE"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [123, 110, 10, "enum_LAST_LEXICAL_USE"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [132, 81, 10, "enum_LAST_LEXICAL_USE"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [136, 123, 10, "enum_LAST_LEXICAL_USE"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [141, 66, 10, "enum_LAST_LEXICAL_USE"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [149, 141, 10, "enum_LAST_LEXICAL_USE"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [153, 101, 10, "enum_LAST_LEXICAL_USE"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [157, 130, 10, "enum_LAST_LEXICAL_USE"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [159, 118, 10, "enum_LAST_LEXICAL_USE"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [161, 132, 10, "enum_LAST_LEXICAL_USE"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [165, 139, 10, "enum_LAST_LEXICAL_USE"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [168, 161, 10, "enum_LAST_LEXICAL_USE"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [172, 153, 10, "enum_LAST_LEXICAL_USE"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [182, 147, 10, "enum_LAST_LEXICAL_USE"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 184, 9, "enum_NEXT_SYNTAX"], [184, 185, 9, "enum_NEXT_SYNTAX"], [186, 149, 10, "enum_LAST_LEXICAL_USE"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [187, 188, 9, "enum_NEXT_SYNTAX"], [188, 189, 9, "enum_NEXT_SYNTAX"], [189, 190, 9, "enum_NEXT_SYNTAX"], [190, 191, 9, "enum_NEXT_SYNTAX"], [192, 186, 10, "enum_LAST_LEXICAL_USE"], [191, 192, 9, "enum_NEXT_SYNTAX"], [192, 193, 9, "enum_NEXT_SYNTAX"], [193, 194, 9, "enum_NEXT_SYNTAX"], [194, 195, 9, "enum_NEXT_SYNTAX"], [195, 196, 9, "enum_NEXT_SYNTAX"], [196, 197, 9, "enum_NEXT_SYNTAX"], [197, 200, 9, "enum_NEXT_SYNTAX"], [201, 93, 10, "enum_LAST_LEXICAL_USE"], [200, 201, 9, "enum_NEXT_SYNTAX"], [201, 202, 9, "enum_NEXT_SYNTAX"], [202, 203, 9, "enum_NEXT_SYNTAX"], [203, 204, 9, "enum_NEXT_SYNTAX"], [204, 205, 9, "enum_NEXT_SYNTAX"], [206, 168, 10, "enum_LAST_LEXICAL_USE"], [205, 206, 9, "enum_NEXT_SYNTAX"], [206, 207, 9, "enum_NEXT_SYNTAX"], [207, 208, 9, "enum_NEXT_SYNTAX"], [208, 209, 9, "enum_NEXT_SYNTAX"], [209, 210, 9, "enum_NEXT_SYNTAX"], [210, 211, 9, "enum_NEXT_SYNTAX"], [211, 212, 9, "enum_NEXT_SYNTAX"], [212, 214, 9, "enum_NEXT_SYNTAX"], [215, 182, 10, "enum_LAST_LEXICAL_USE"], [214, 215, 9, "enum_NEXT_SYNTAX"], [215, 216, 9, "enum_NEXT_SYNTAX"], [217, 192, 10, "enum_LAST_LEXICAL_USE"], [216, 217, 9, "enum_NEXT_SYNTAX"], [217, 218, 9, "enum_NEXT_SYNTAX"], [218, 219, 9, "enum_NEXT_SYNTAX"], [219, 220, 9, "enum_NEXT_SYNTAX"], [221, 172, 10, "enum_LAST_LEXICAL_USE"], [220, 221, 9, "enum_NEXT_SYNTAX"], [221, 222, 9, "enum_NEXT_SYNTAX"], [222, 223, 9, "enum_NEXT_SYNTAX"], [223, 224, 9, "enum_NEXT_SYNTAX"], [224, 225, 9, "enum_NEXT_SYNTAX"], [225, 226, 9, "enum_NEXT_SYNTAX"], [227, 217, 10, "enum_LAST_LEXICAL_USE"], [226, 227, 9, "enum_NEXT_SYNTAX"], [227, 228, 9, "enum_NEXT_SYNTAX"], [228, 229, 9, "enum_NEXT_SYNTAX"], [229, 230, 9, "enum_NEXT_SYNTAX"], [230, 231, 9, "enum_NEXT_SYNTAX"], [231, 232, 9, "enum_NEXT_SYNTAX"], [232, 233, 9, "enum_NEXT_SYNTAX"], [234, 157, 10, "enum_LAST_LEXICAL_USE"], [233, 234, 9, "enum_NEXT_SYNTAX"], [234, 235, 9, "enum_NEXT_SYNTAX"], [235, 236, 9, "enum_NEXT_SYNTAX"], [236, 237, 9, "enum_NEXT_SYNTAX"], [237, 238, 9, "enum_NEXT_SYNTAX"], [239, 165, 10, "enum_LAST_LEXICAL_USE"], [238, 239, 9, "enum_NEXT_SYNTAX"], [239, 240, 9, "enum_NEXT_SYNTAX"], [240, 241, 9, "enum_NEXT_SYNTAX"], [241, 242, 9, "enum_NEXT_SYNTAX"], [242, 245, 9, "enum_NEXT_SYNTAX"], [245, 246, 9, "enum_NEXT_SYNTAX"], [246, 248, 9, "enum_NEXT_SYNTAX"], [249, 232, 10, "enum_LAST_LEXICAL_USE"], [248, 249, 9, "enum_NEXT_SYNTAX"], [249, 250, 9, "enum_NEXT_SYNTAX"], [250, 251, 9, "enum_NEXT_SYNTAX"], [251, 252, 9, "enum_NEXT_SYNTAX"], [252, 253, 9, "enum_NEXT_SYNTAX"], [253, 257, 9, "enum_NEXT_SYNTAX"], [257, 258, 9, "enum_NEXT_SYNTAX"], [258, 260, 9, "enum_NEXT_SYNTAX"], [261, 234, 10, "enum_LAST_LEXICAL_USE"], [260, 261, 9, "enum_NEXT_SYNTAX"], [261, 262, 9, "enum_NEXT_SYNTAX"], [263, 206, 10, "enum_LAST_LEXICAL_USE"], [262, 263, 9, "enum_NEXT_SYNTAX"], [263, 264, 9, "enum_NEXT_SYNTAX"], [264, 265, 9, "enum_NEXT_SYNTAX"], [265, 266, 9, "enum_NEXT_SYNTAX"], [267, 159, 10, "enum_LAST_LEXICAL_USE"], [266, 267, 9, "enum_NEXT_SYNTAX"], [267, 268, 9, "enum_NEXT_SYNTAX"], [268, 269, 9, "enum_NEXT_SYNTAX"], [270, 239, 10, "enum_LAST_LEXICAL_USE"], [269, 270, 9, "enum_NEXT_SYNTAX"], [270, 271, 9, "enum_NEXT_SYNTAX"], [272, 227, 10, "enum_LAST_LEXICAL_USE"], [271, 272, 9, "enum_NEXT_SYNTAX"], [272, 273, 9, "enum_NEXT_SYNTAX"], [273, 274, 9, "enum_NEXT_SYNTAX"], [274, 275, 9, "enum_NEXT_SYNTAX"], [275, 276, 9, "enum_NEXT_SYNTAX"], [276, 277, 9, "enum_NEXT_SYNTAX"], [278, 215, 10, "enum_LAST_LEXICAL_USE"], [277, 278, 9, "enum_NEXT_SYNTAX"], [278, 279, 9, "enum_NEXT_SYNTAX"], [280, 272, 10, "enum_LAST_LEXICAL_USE"], [279, 280, 9, "enum_NEXT_SYNTAX"], [280, 281, 9, "enum_NEXT_SYNTAX"], [281, 282, 9, "enum_NEXT_SYNTAX"], [282, 283, 9, "enum_NEXT_SYNTAX"], [284, 221, 10, "enum_LAST_LEXICAL_USE"], [283, 284, 9, "enum_NEXT_SYNTAX"], [284, 285, 9, "enum_NEXT_SYNTAX"], [285, 286, 9, "enum_NEXT_SYNTAX"], [286, 287, 9, "enum_NEXT_SYNTAX"], [288, 261, 10, "enum_LAST_LEXICAL_USE"], [287, 288, 9, "enum_NEXT_SYNTAX"], [288, 289, 9, "enum_NEXT_SYNTAX"], [290, 267, 10, "enum_LAST_LEXICAL_USE"], [289, 290, 9, "enum_NEXT_SYNTAX"], [290, 291, 9, "enum_NEXT_SYNTAX"], [292, 263, 10, "enum_LAST_LEXICAL_USE"], [291, 292, 9, "enum_NEXT_SYNTAX"], [292, 293, 9, "enum_NEXT_SYNTAX"], [293, 294, 9, "enum_NEXT_SYNTAX"], [294, 295, 9, "enum_NEXT_SYNTAX"], [296, 270, 10, "enum_LAST_LEXICAL_USE"], [295, 296, 9, "enum_NEXT_SYNTAX"], [296, 297, 9, "enum_NEXT_SYNTAX"], [297, 298, 9, "enum_NEXT_SYNTAX"], [299, 292, 10, "enum_LAST_LEXICAL_USE"], [298, 299, 9, "enum_NEXT_SYNTAX"], [299, 300, 9, "enum_NEXT_SYNTAX"], [300, 301, 9, "enum_NEXT_SYNTAX"], [301, 302, 9, "enum_NEXT_SYNTAX"], [303, 284, 10, "enum_LAST_LEXICAL_USE"], [302, 303, 9, "enum_NEXT_SYNTAX"], [303, 304, 9, "enum_NEXT_SYNTAX"], [304, 305, 9, "enum_NEXT_SYNTAX"], [305, 306, 9, "enum_NEXT_SYNTAX"], [306, 307, 9, "enum_NEXT_SYNTAX"], [307, 309, 9, "enum_NEXT_SYNTAX"], [309, 310, 9, "enum_NEXT_SYNTAX"], [310, 311, 9, "enum_NEXT_SYNTAX"], [311, 312, 9, "enum_NEXT_SYNTAX"], [313, 278, 10, "enum_LAST_LEXICAL_USE"], [312, 313, 9, "enum_NEXT_SYNTAX"], [313, 314, 9, "enum_NEXT_SYNTAX"], [314, 315, 9, "enum_NEXT_SYNTAX"], [315, 316, 9, "enum_NEXT_SYNTAX"], [317, 280, 10, "enum_LAST_LEXICAL_USE"], [316, 317, 9, "enum_NEXT_SYNTAX"], [317, 318, 9, "enum_NEXT_SYNTAX"], [318, 319, 9, "enum_NEXT_SYNTAX"], [319, 320, 9, "enum_NEXT_SYNTAX"], [320, 321, 9, "enum_NEXT_SYNTAX"], [321, 322, 9, "enum_NEXT_SYNTAX"], [323, 317, 10, "enum_LAST_LEXICAL_USE"], [322, 323, 9, "enum_NEXT_SYNTAX"], [323, 324, 9, "enum_NEXT_SYNTAX"], [324, 325, 9, "enum_NEXT_SYNTAX"], [325, 326, 9, "enum_NEXT_SYNTAX"], [326, 327, 9, "enum_NEXT_SYNTAX"], [327, 328, 9, "enum_NEXT_SYNTAX"], [328, 331, 9, "enum_NEXT_SYNTAX"], [332, 201, 10, "enum_LAST_LEXICAL_USE"], [331, 332, 9, "enum_NEXT_SYNTAX"], [332, 333, 9, "enum_NEXT_SYNTAX"], [333, 334, 9, "enum_NEXT_SYNTAX"], [334, 335, 9, "enum_NEXT_SYNTAX"], [335, 336, 9, "enum_NEXT_SYNTAX"], [337, 299, 10, "enum_LAST_LEXICAL_USE"], [336, 337, 9, "enum_NEXT_SYNTAX"], [337, 338, 9, "enum_NEXT_SYNTAX"], [338, 339, 9, "enum_NEXT_SYNTAX"], [339, 340, 9, "enum_NEXT_SYNTAX"], [340, 341, 9, "enum_NEXT_SYNTAX"], [341, 342, 9, "enum_NEXT_SYNTAX"], [342, 343, 9, "enum_NEXT_SYNTAX"], [343, 345, 9, "enum_NEXT_SYNTAX"], [346, 313, 10, "enum_LAST_LEXICAL_USE"], [345, 346, 9, "enum_NEXT_SYNTAX"], [346, 347, 9, "enum_NEXT_SYNTAX"], [348, 323, 10, "enum_LAST_LEXICAL_USE"], [347, 348, 9, "enum_NEXT_SYNTAX"], [348, 349, 9, "enum_NEXT_SYNTAX"], [349, 350, 9, "enum_NEXT_SYNTAX"], [350, 351, 9, "enum_NEXT_SYNTAX"], [352, 303, 10, "enum_LAST_LEXICAL_USE"], [351, 352, 9, "enum_NEXT_SYNTAX"], [352, 353, 9, "enum_NEXT_SYNTAX"], [353, 354, 9, "enum_NEXT_SYNTAX"], [354, 355, 9, "enum_NEXT_SYNTAX"], [356, 337, 10, "enum_LAST_LEXICAL_USE"], [355, 356, 9, "enum_NEXT_SYNTAX"], [356, 357, 9, "enum_NEXT_SYNTAX"], [357, 358, 9, "enum_NEXT_SYNTAX"], [358, 359, 9, "enum_NEXT_SYNTAX"], [360, 352, 10, "enum_LAST_LEXICAL_USE"], [359, 360, 9, "enum_NEXT_SYNTAX"], [360, 361, 9, "enum_NEXT_SYNTAX"], [361, 362, 9, "enum_NEXT_SYNTAX"], [362, 363, 9, "enum_NEXT_SYNTAX"], [363, 364, 9, "enum_NEXT_SYNTAX"], [365, 356, 10, "enum_LAST_LEXICAL_USE"], [364, 365, 9, "enum_NEXT_SYNTAX"], [365, 366, 9, "enum_NEXT_SYNTAX"], [366, 367, 9, "enum_NEXT_SYNTAX"], [367, 368, 9, "enum_NEXT_SYNTAX"], [369, 296, 10, "enum_LAST_LEXICAL_USE"], [368, 369, 9, "enum_NEXT_SYNTAX"], [369, 370, 9, "enum_NEXT_SYNTAX"], [370, 371, 9, "enum_NEXT_SYNTAX"], [371, 372, 9, "enum_NEXT_SYNTAX"], [372, 373, 9, "enum_NEXT_SYNTAX"], [373, 374, 9, "enum_NEXT_SYNTAX"], [375, 249, 10, "enum_LAST_LEXICAL_USE"], [374, 375, 9, "enum_NEXT_SYNTAX"], [375, 376, 9, "enum_NEXT_SYNTAX"], [377, 288, 10, "enum_LAST_LEXICAL_USE"], [376, 377, 9, "enum_NEXT_SYNTAX"], [377, 378, 9, "enum_NEXT_SYNTAX"], [378, 379, 9, "enum_NEXT_SYNTAX"], [379, 380, 9, "enum_NEXT_SYNTAX"], [380, 381, 9, "enum_NEXT_SYNTAX"], [382, 369, 10, "enum_LAST_LEXICAL_USE"], [381, 382, 9, "enum_NEXT_SYNTAX"], [382, 383, 9, "enum_NEXT_SYNTAX"], [383, 384, 9, "enum_NEXT_SYNTAX"], [384, 385, 9, "enum_NEXT_SYNTAX"], [385, 389, 9, "enum_NEXT_SYNTAX"], [389, 390, 9, "enum_NEXT_SYNTAX"], [390, 392, 9, "enum_NEXT_SYNTAX"], [393, 375, 10, "enum_LAST_LEXICAL_USE"], [392, 393, 9, "enum_NEXT_SYNTAX"], [393, 394, 9, "enum_NEXT_SYNTAX"], [395, 251, 10, "enum_LAST_LEXICAL_USE"], [394, 395, 9, "enum_NEXT_SYNTAX"], [395, 396, 9, "enum_NEXT_SYNTAX"], [396, 397, 9, "enum_NEXT_SYNTAX"], [397, 400, 9, "enum_NEXT_SYNTAX"], [401, 395, 10, "enum_LAST_LEXICAL_USE"], [400, 401, 9, "enum_NEXT_SYNTAX"], [401, 402, 9, "enum_NEXT_SYNTAX"], [403, 393, 10, "enum_LAST_LEXICAL_USE"], [402, 403, 9, "enum_NEXT_SYNTAX"], [403, 404, 9, "enum_NEXT_SYNTAX"], [6, 1, 1, "enum_CFG_NEXT"], [3, 10, 1, "enum_CFG_NEXT"], [10, 15, 1, "enum_CFG_NEXT"], [15, 30, 1, "enum_CFG_NEXT"], [15, 23, 1, "enum_CFG_NEXT"], [30, 392, 1, "enum_CFG_NEXT"], [30, 35, 1, "enum_CFG_NEXT"], [35, 46, 1, "enum_CFG_NEXT"], [46, 54, 1, "enum_CFG_NEXT"], [54, 65, 1, "enum_CFG_NEXT"], [65, 104, 1, "enum_CFG_NEXT"], [65, 92, 1, "enum_CFG_NEXT"], [104, 260, 1, "enum_CFG_NEXT"], [104, 109, 1, "enum_CFG_NEXT"], [109, 124, 1, "enum_CFG_NEXT"], [124, 129, 1, "enum_CFG_NEXT"], [124, 248, 1, "enum_CFG_NEXT"], [129, 138, 1, "enum_CFG_NEXT"], [138, 146, 1, "enum_CFG_NEXT"], [146, 184, 1, "enum_CFG_NEXT"], [184, 200, 1, "enum_CFG_NEXT"], [184, 214, 1, "enum_CFG_NEXT"], [214, 231, 1, "enum_CFG_NEXT"], [231, 400, 1, "enum_CFG_NEXT"], [248, 400, 1, "enum_CFG_NEXT"], [260, 269, 1, "enum_CFG_NEXT"], [269, 277, 1, "enum_CFG_NEXT"], [277, 315, 1, "enum_CFG_NEXT"], [315, 345, 1, "enum_CFG_NEXT"], [315, 331, 1, "enum_CFG_NEXT"], [345, 374, 1, "enum_CFG_NEXT"], [374, 400, 1, "enum_CFG_NEXT"], [392, 400, 1, "enum_CFG_NEXT"], [16, 2, 3, "enum_LAST_WRITE"], [29, 4, 3, "enum_LAST_WRITE"], [40, 16, 2, "enum_LAST_READ"], [40, 2, 3, "enum_LAST_WRITE"], [49, 36, 2, "enum_LAST_READ"], [57, 49, 2, "enum_LAST_READ"], [66, 57, 2, "enum_LAST_READ"], [70, 40, 2, "enum_LAST_READ"], [70, 2, 3, "enum_LAST_WRITE"], [78, 47, 3, "enum_LAST_WRITE"], [81, 74, 2, "enum_LAST_READ"], [85, 55, 3, "enum_LAST_WRITE"], [101, 70, 2, "enum_LAST_READ"], [101, 2, 3, "enum_LAST_WRITE"], [114, 85, 2, "enum_LAST_READ"], [114, 55, 3, "enum_LAST_WRITE"], [118, 29, 2, "enum_LAST_READ"], [118, 4, 3, "enum_LAST_WRITE"], [123, 110, 3, "enum_LAST_WRITE"], [132, 81, 2, "enum_LAST_READ"], [136, 123, 2, "enum_LAST_READ"], [136, 110, 3, "enum_LAST_WRITE"], [141, 66, 2, "enum_LAST_READ"], [149, 141, 2, "enum_LAST_READ"], [153, 101, 2, "enum_LAST_READ"], [153, 2, 3, "enum_LAST_WRITE"], [157, 130, 3, "enum_LAST_WRITE"], [159, 118, 2, "enum_LAST_READ"], [159, 4, 3, "enum_LAST_WRITE"], [161, 132, 2, "enum_LAST_READ"], [165, 139, 3, "enum_LAST_WRITE"], [168, 161, 2, "enum_LAST_READ"], [172, 153, 2, "enum_LAST_READ"], [172, 2, 3, "enum_LAST_WRITE"], [182, 147, 3, "enum_LAST_WRITE"], [186, 149, 2, "enum_LAST_READ"], [192, 186, 2, "enum_LAST_READ"], [206, 168, 2, "enum_LAST_READ"], [217, 192, 2, "enum_LAST_READ"], [221, 172, 2, "enum_LAST_READ"], [221, 2, 3, "enum_LAST_WRITE"], [227, 217, 2, "enum_LAST_READ"], [215, 182, 2, "enum_LAST_READ"], [215, 147, 3, "enum_LAST_WRITE"], [234, 157, 2, "enum_LAST_READ"], [234, 130, 3, "enum_LAST_WRITE"], [239, 165, 2, "enum_LAST_READ"], [239, 139, 3, "enum_LAST_WRITE"], [263, 81, 2, "enum_LAST_READ"], [267, 29, 2, "enum_LAST_READ"], [267, 4, 3, "enum_LAST_WRITE"], [272, 66, 2, "enum_LAST_READ"], [280, 272, 2, "enum_LAST_READ"], [284, 101, 2, "enum_LAST_READ"], [284, 2, 3, "enum_LAST_WRITE"], [288, 261, 3, "enum_LAST_WRITE"], [290, 267, 2, "enum_LAST_READ"], [290, 4, 3, "enum_LAST_WRITE"], [292, 263, 2, "enum_LAST_READ"], [296, 270, 3, "enum_LAST_WRITE"], [299, 292, 2, "enum_LAST_READ"], [303, 284, 2, "enum_LAST_READ"], [303, 2, 3, "enum_LAST_WRITE"], [313, 278, 3, "enum_LAST_WRITE"], [317, 280, 2, "enum_LAST_READ"], [323, 317, 2, "enum_LAST_READ"], [337, 299, 2, "enum_LAST_READ"], [348, 323, 2, "enum_LAST_READ"], [352, 303, 2, "enum_LAST_READ"], [352, 2, 3, "enum_LAST_WRITE"], [356, 299, 2, "enum_LAST_READ"], [360, 352, 2, "enum_LAST_READ"], [360, 2, 3, "enum_LAST_WRITE"], [365, 356, 2, "enum_LAST_READ"], [369, 296, 2, "enum_LAST_READ"], [369, 270, 3, "enum_LAST_WRITE"], [346, 313, 2, "enum_LAST_READ"], [346, 278, 3, "enum_LAST_WRITE"], [377, 288, 2, "enum_LAST_READ"], [377, 261, 3, "enum_LAST_WRITE"], [382, 369, 2, "enum_LAST_READ"], [382, 270, 3, "enum_LAST_WRITE"], [401, 395, 2, "enum_LAST_READ"], [401, 251, 2, "enum_LAST_READ"], [403, 249, 3, "enum_LAST_WRITE"], [403, 393, 3, "enum_LAST_WRITE"], [403, 375, 3, "enum_LAST_WRITE"], [403, 232, 3, "enum_LAST_WRITE"], [47, 49, 4, "enum_COMPUTED_FROM"], [55, 57, 4, "enum_COMPUTED_FROM"], [393, 395, 4, "enum_COMPUTED_FROM"], [110, 112, 4, "enum_COMPUTED_FROM"], [110, 118, 4, "enum_COMPUTED_FROM"], [110, 114, 4, "enum_COMPUTED_FROM"], [261, 267, 4, "enum_COMPUTED_FROM"], [261, 263, 4, "enum_COMPUTED_FROM"], [270, 272, 4, "enum_COMPUTED_FROM"], [278, 288, 4, "enum_COMPUTED_FROM"], [278, 290, 4, "enum_COMPUTED_FROM"], [278, 280, 4, "enum_COMPUTED_FROM"], [278, 284, 4, "enum_COMPUTED_FROM"], [278, 296, 4, "enum_COMPUTED_FROM"], [278, 292, 4, "enum_COMPUTED_FROM"], [278, 299, 4, "enum_COMPUTED_FROM"], [278, 303, 4, "enum_COMPUTED_FROM"], [346, 348, 4, "enum_COMPUTED_FROM"], [346, 352, 4, "enum_COMPUTED_FROM"], [346, 369, 4, "enum_COMPUTED_FROM"], [346, 356, 4, "enum_COMPUTED_FROM"], [346, 360, 4, "enum_COMPUTED_FROM"], [346, 365, 4, "enum_COMPUTED_FROM"], [375, 377, 4, "enum_COMPUTED_FROM"], [375, 382, 4, "enum_COMPUTED_FROM"], [130, 136, 4, "enum_COMPUTED_FROM"], [130, 132, 4, "enum_COMPUTED_FROM"], [139, 141, 4, "enum_COMPUTED_FROM"], [147, 157, 4, "enum_COMPUTED_FROM"], [147, 159, 4, "enum_COMPUTED_FROM"], [147, 149, 4, "enum_COMPUTED_FROM"], [147, 153, 4, "enum_COMPUTED_FROM"], [147, 165, 4, "enum_COMPUTED_FROM"], [147, 161, 4, "enum_COMPUTED_FROM"], [147, 168, 4, "enum_COMPUTED_FROM"], [147, 172, 4, "enum_COMPUTED_FROM"], [215, 217, 4, "enum_COMPUTED_FROM"], [215, 227, 4, "enum_COMPUTED_FROM"], [215, 221, 4, "enum_COMPUTED_FROM"], [232, 234, 4, "enum_COMPUTED_FROM"], [232, 239, 4, "enum_COMPUTED_FROM"], [249, 251, 4, "enum_COMPUTED_FROM"]], "error_location": 159, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/pyserial/pyparallel.git", "old_path": "pyserial/serial/serialwin32.py", "hash": "14213e1c7dda2d62d952305ce0a116f86f77bae2", "code": "def read(self, size: int=1) -> bytes:\n    \"\"\"Read size bytes from the serial port. If a timeout is set it may\n    return less characters as requested. With no timeout it will block\n    until the requested number of bytes is read.\"\"\"\n    if not self.hComPort: raise portNotOpenError\n    if size > 0:\n        win32.ResetEvent(self._overlappedRead.hEvent)\n        flags: ctypes.c_ulong = win32.DWORD()\n        comstat: Any = win32.COMSTAT()\n        if not win32.ClearCommError(self.hComPort, ctypes.byref(flags), ctypes.byref(comstat)):\n            raise SerialException('call to ClearCommError failed')\n        if self.timeout == 0:\n            n: int = min(comstat.cbInQue, size)\n            if n > 0:\n                buf: ctypes.Array[ctypes.c_char] = ctypes.create_string_buffer(n)\n                rc: ctypes.c_ulong = win32.DWORD()\n                err: bool = win32.ReadFile(self.hComPort, buf, size, ctypes.byref(rc), ctypes.byref(self._overlappedRead))\n                if not err and win32.GetLastError() != win32.ERROR_IO_PENDING:\n                    raise SerialException(\"ReadFile failed (%s)\" % ctypes.WinError())\n                err = win32.WaitForSingleObject(self._overlappedRead.hEvent, win32.INFINITE)\n                read: Any = buf.raw[:rc.value]\n            else:\n                read = bytes()\n        else:\n            buf = ctypes.create_string_buffer(size)\n            rc = win32.DWORD()\n            err = win32.ReadFile(self.hComPort, buf, size, ctypes.byref(rc), ctypes.byref(self._overlappedRead))\n            if not err and win32.GetLastError() != win32.ERROR_IO_PENDING:\n                raise SerialException(\"ReadFile failed (%s)\" % ctypes.WinError())\n            err = win32.GetOverlappedResult(self.hComPort, ctypes.byref(self._overlappedRead), ctypes.byref(rc), True)\n            read = buf.raw[:rc.value]\n    else:\n        read = bytes()\n    return bytes(read)\n", "rewrite": "ReplaceText(target='n' @(224,61)->(224,65))", "error_line": 16, "has_bug": true, "code_full": "import ctypes\nfrom typing import Any, Dict, List, Type, Union\n\n\nclass portNotOpenError(Exception):\n    pass\n\n\nclass SerialException(Exception):\n    pass\n\n\nclass Win32:\n    DWORD: Type[ctypes.c_ulong]\n    ERROR_IO_PENDING: int\n    INFINITE: int\n\n    class OVERLAPPED(ctypes.Structure):\n        _fields_: List[Dict[str, Union[str, Type]]]\n\n    class COMSTAT(ctypes.Structure):\n        _fields_: List[Dict[str, Union[str, Type]]]\n\n    @staticmethod\n    def ResetEvent(hEvent: int):\n        pass\n\n    @staticmethod\n    def ClearCommError(hComPort: int, flags: Any, comstat: Any) -> bool:\n        return False\n    \n    @staticmethod\n    def ReadFile(hComPort: int, buf: Any, size: int, rc: Any, overlappedRead: Any) -> bool:\n        return False\n\n    @staticmethod\n    def GetLastError() -> int:\n        return 0\n\n    @staticmethod\n    def WaitForSingleObject(hEvent: int, timeout: int) -> bool:\n        return False\n\n    @staticmethod\n    def GetOverlappedResult(hComPort: int, overlappedRead: Any, rc: Any, wait: bool) -> bool:\n        return False\n\nwin32 = Win32()\n\n\nclass Serial:\n    hComPort: Any\n    timeout: int\n    _overlappedRead: Any\n\n    def read(self, size: int=1) -> bytes:\n        \"\"\"Read size bytes from the serial port. If a timeout is set it may\n        return less characters as requested. With no timeout it will block\n        until the requested number of bytes is read.\"\"\"\n        if not self.hComPort: raise portNotOpenError\n        if size > 0:\n            win32.ResetEvent(self._overlappedRead.hEvent)\n            flags: ctypes.c_ulong = win32.DWORD()\n            comstat: Any = win32.COMSTAT()\n            if not win32.ClearCommError(self.hComPort, ctypes.byref(flags), ctypes.byref(comstat)):\n                raise SerialException('call to ClearCommError failed')\n            if self.timeout == 0:\n                n: int = min(comstat.cbInQue, size)\n                if n > 0:\n                    buf: ctypes.Array[ctypes.c_char] = ctypes.create_string_buffer(n)\n                    rc: ctypes.c_ulong = win32.DWORD()\n                    err: bool = win32.ReadFile(self.hComPort, buf, size, ctypes.byref(rc), ctypes.byref(self._overlappedRead))\n                    if not err and win32.GetLastError() != win32.ERROR_IO_PENDING:\n                        raise SerialException(\"ReadFile failed (%s)\" % ctypes.WinError())\n                    err = win32.WaitForSingleObject(self._overlappedRead.hEvent, win32.INFINITE)\n                    read: Any = buf.raw[:rc.value]\n                else:\n                    read = bytes()\n            else:\n                buf = ctypes.create_string_buffer(size)\n                rc = win32.DWORD()\n                err = win32.ReadFile(self.hComPort, buf, size, ctypes.byref(rc), ctypes.byref(self._overlappedRead))\n                if not err and win32.GetLastError() != win32.ERROR_IO_PENDING:\n                    raise SerialException(\"ReadFile failed (%s)\" % ctypes.WinError())\n                err = win32.GetOverlappedResult(self.hComPort, ctypes.byref(self._overlappedRead), ctypes.byref(rc), True)\n                read = buf.raw[:rc.value]\n        else:\n            read = bytes()\n        return bytes(read)\n", "error_location_char": [897, 901], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def detect(", "name", ",", "ipfile", ",", "bgfile", ",", "mapfile", ",", "alpha", ",", "l_thresh", ",", "pickle_file", ")", ":", "#NEWLINE#", "#INDENT#", "'\\n    This function drives the peak detection workflow.\\n    '", "#NEWLINE#", "logfile", "=", "(", "name", "+", "'.log'", ")", "#NEWLINE#", "pique", ".", "msg", "(", "logfile", ",", "(", "'starting run for project : '", "+", "name", ")", ")", "#NEWLINE#", "pique", ".", "msg", "(", "logfile", ",", "(", "'  -> IP file  : '", "+", "ipfile", ")", ")", "#NEWLINE#", "pique", ".", "msg", "(", "logfile", ",", "(", "'  -> BG file  : '", "+", "ipfile", ")", ")", "#NEWLINE#", "pique", ".", "msg", "(", "logfile", ",", "(", "'  -> map file : '", "+", "mapfile", ")", ")", "#NEWLINE#", "pique", ".", "msg", "(", "logfile", ",", "(", "'  -> alpha    : '", "+", "str", "(", "alpha", ")", ")", ")", "#NEWLINE#", "pique", ".", "msg", "(", "logfile", ",", "(", "'  -> l_thresh : '", "+", "str", "(", "l_thresh", ")", ")", ")", "#NEWLINE#", "pique", ".", "msg", "(", "logfile", ",", "'loading data...'", ")", "#NEWLINE#", "D", "=", "pique", ".", "data", ".", "PiqueData", "(", "ipfile", ",", "bgfile", ",", "mapfile", ",", "name", "=", "name", ")", "#NEWLINE#", "pique", ".", "msg", "(", "logfile", ",", "'  found contigs :'", ")", "#NEWLINE#", "for", "contig", "in", "D", ".", "data", ".", "keys", "(", ")", ":", "#NEWLINE#", "#INDENT#", "pique", ".", "msg", "(", "logfile", ",", "(", "'    '", "+", "contig", ")", ")", "#NEWLINE#", "pique", ".", "msg", "(", "logfile", ",", "(", "'      length : '", "+", "str", "(", "D", ".", "data", "[", "contig", "]", "[", "'length'", "]", ")", ")", ")", "#NEWLINE#", "for", "r", "in", "D", ".", "data", "[", "contig", "]", "[", "'regions'", "]", ":", "#NEWLINE#", "#INDENT#", "start", "=", "str", "(", "r", "[", "'start'", "]", ")", "#NEWLINE#", "stop", "=", "str", "(", "r", "[", "'stop'", "]", ")", "#NEWLINE#", "pique", ".", "msg", "(", "logfile", ",", "(", "(", "(", "'      analysis region : '", "+", "start", ")", "+", "':'", ")", "+", "stop", ")", ")", "#NEWLINE#", "#UNINDENT#", "for", "m", "in", "D", ".", "data", "[", "contig", "]", "[", "'masks'", "]", ":", "#NEWLINE#", "#INDENT#", "start", "=", "str", "(", "m", "[", "'start'", "]", ")", "#NEWLINE#", "stop", "=", "str", "(", "m", "[", "'stop'", "]", ")", "#NEWLINE#", "pique", ".", "msg", "(", "logfile", ",", "(", "(", "(", "'      masking region  : '", "+", "start", ")", "+", "':'", ")", "+", "stop", ")", ")", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "pique", ".", "msg", "(", "logfile", ",", "'creating analysis workbench...'", ")", "#NEWLINE#", "PA", "=", "pique", ".", "analysis", ".", "PiqueAnalysis", "(", "D", ")", "#NEWLINE#", "pique", ".", "msg", "(", "logfile", ",", "'running filters...'", ")", "#NEWLINE#", "for", "ar_name", "in", "PA", ".", "data", ".", "keys", "(", ")", ":", "#NEWLINE#", "#INDENT#", "pique", ".", "msg", "(", "logfile", ",", "(", "'  :: applying filters to analysis region '", "+", "ar_name", ")", ")", "#NEWLINE#", "PA", ".", "apply_filter", "(", "ar_name", ",", "alpha", ",", "l_thresh", ")", "#NEWLINE#", "#UNINDENT#", "pique", ".", "msg", "(", "logfile", ",", "'finding peaks...'", ")", "#NEWLINE#", "for", "ar_name", "in", "PA", ".", "data", ".", "keys", "(", ")", ":", "#NEWLINE#", "#INDENT#", "PA", ".", "find_peaks", "(", "ar_name", ")", "#NEWLINE#", "pique", ".", "msg", "(", "logfile", ",", "(", "(", "(", "'  peaks '", "+", "ar_name", ")", "+", "' : '", ")", "+", "str", "(", "len", "(", "PA", ".", "data", "[", "ar_name", "]", "[", "'peaks'", "]", ")", ")", ")", ")", "#NEWLINE#", "pique", ".", "msg", "(", "logfile", ",", "(", "'     noise threshold  : '", "+", "str", "(", "PA", ".", "data", "[", "ar_name", "]", "[", "'N_thresh'", "]", ")", ")", ")", "#NEWLINE#", "pique", ".", "msg", "(", "logfile", ",", "(", "'     filter threshold : '", "+", "str", "(", "PA", ".", "data", "[", "ar_name", "]", "[", "'n_thresh'", "]", ")", ")", ")", "#NEWLINE#", "pique", ".", "msg", "(", "logfile", ",", "(", "'     normalizations   : '", "+", "', '", ".", "join", "(", "map", "(", "str", ",", "PA", ".", "data", "[", "ar_name", "]", "[", "'norms'", "]", ")", ")", ")", ")", "#NEWLINE#", "#UNINDENT#", "pique", ".", "msg", "(", "logfile", ",", "'pickling analysis workbench...'", ")", "#NEWLINE#", "if", "pickle_file", ":", "#NEWLINE#", "#INDENT#", "cPickle", ".", "dump", "(", "PA", ",", "open", "(", "(", "name", "+", "'.pickle'", ")", ",", "'w'", ")", ")", "#NEWLINE#", "#UNINDENT#", "pique", ".", "msg", "(", "logfile", ",", "'writing output files...'", ")", "#NEWLINE#", "pique", ".", "fileIO", ".", "writepeaksGFF", "(", "(", "name", "+", "'.gff'", ")", ",", "PA", ".", "data", ")", "#NEWLINE#", "pique", ".", "fileIO", ".", "writebookmarks", "(", "(", "name", "+", "'.bookmark'", ")", ",", "PA", ".", "data", ",", "name", "=", "name", ")", "#NEWLINE#", "pique", ".", "fileIO", ".", "writeQP", "(", "(", "name", "+", "'.qp'", ")", ",", "PA", ".", "data", ")", "#NEWLINE#", "pique", ".", "fileIO", ".", "writepeakTSV", "(", "(", "name", "+", "'.peak.tsv'", ")", ",", "PA", ".", "data", ")", "#NEWLINE#", "pique", ".", "fileIO", ".", "writetrack", "(", "(", "name", "+", "'.IP.track'", ")", ",", "D", ".", "data", ")", "#NEWLINE#", "pique", ".", "fileIO", ".", "writetrack", "(", "(", "name", "+", "'.BG.track'", ")", ",", "D", ".", "data", ",", "track", "=", "'BG'", ")", "#NEWLINE#", "pique", ".", "msg", "(", "logfile", ",", "'run completed.'", ")"], "edges": [[1, 7, 7, "enum_FIELD"], [18, 19, 7, "enum_FIELD"], [20, 25, 7, "enum_FIELD"], [28, 34, 7, "enum_FIELD"], [41, 47, 7, "enum_FIELD"], [54, 60, 7, "enum_FIELD"], [67, 73, 7, "enum_FIELD"], [80, 86, 7, "enum_FIELD"], [96, 102, 7, "enum_FIELD"], [112, 118, 7, "enum_FIELD"], [121, 133, 7, "enum_FIELD"], [140, 146, 7, "enum_FIELD"], [152, 151, 7, "enum_FIELD"], [152, 158, 7, "enum_FIELD"], [314, 320, 7, "enum_FIELD"], [323, 331, 7, "enum_FIELD"], [334, 340, 7, "enum_FIELD"], [346, 345, 7, "enum_FIELD"], [346, 352, 7, "enum_FIELD"], [381, 387, 7, "enum_FIELD"], [393, 392, 7, "enum_FIELD"], [393, 399, 7, "enum_FIELD"], [525, 531, 7, "enum_FIELD"], [535, 536, 7, "enum_FIELD"], [558, 564, 7, "enum_FIELD"], [567, 579, 7, "enum_FIELD"], [584, 596, 7, "enum_FIELD"], [605, 617, 7, "enum_FIELD"], [622, 634, 7, "enum_FIELD"], [639, 651, 7, "enum_FIELD"], [656, 668, 7, "enum_FIELD"], [677, 683, 7, "enum_FIELD"], [25, 24, 7, "enum_FIELD"], [25, 26, 7, "enum_FIELD"], [34, 30, 7, "enum_FIELD"], [47, 43, 7, "enum_FIELD"], [60, 56, 7, "enum_FIELD"], [73, 69, 7, "enum_FIELD"], [86, 82, 7, "enum_FIELD"], [102, 98, 7, "enum_FIELD"], [118, 114, 7, "enum_FIELD"], [133, 127, 7, "enum_FIELD"], [146, 142, 7, "enum_FIELD"], [158, 156, 7, "enum_FIELD"], [162, 168, 7, "enum_FIELD"], [175, 181, 7, "enum_FIELD"], [202, 201, 7, "enum_FIELD"], [202, 209, 7, "enum_FIELD"], [259, 258, 7, "enum_FIELD"], [259, 266, 7, "enum_FIELD"], [320, 316, 7, "enum_FIELD"], [331, 329, 7, "enum_FIELD"], [340, 336, 7, "enum_FIELD"], [352, 350, 7, "enum_FIELD"], [356, 362, 7, "enum_FIELD"], [369, 375, 7, "enum_FIELD"], [387, 383, 7, "enum_FIELD"], [399, 397, 7, "enum_FIELD"], [403, 407, 7, "enum_FIELD"], [410, 416, 7, "enum_FIELD"], [445, 451, 7, "enum_FIELD"], [469, 475, 7, "enum_FIELD"], [493, 499, 7, "enum_FIELD"], [531, 527, 7, "enum_FIELD"], [539, 545, 7, "enum_FIELD"], [564, 560, 7, "enum_FIELD"], [579, 571, 7, "enum_FIELD"], [596, 588, 7, "enum_FIELD"], [617, 609, 7, "enum_FIELD"], [634, 626, 7, "enum_FIELD"], [651, 643, 7, "enum_FIELD"], [668, 660, 7, "enum_FIELD"], [683, 679, 7, "enum_FIELD"], [30, 29, 7, "enum_FIELD"], [37, 36, 7, "enum_FIELD"], [37, 38, 7, "enum_FIELD"], [43, 42, 7, "enum_FIELD"], [50, 49, 7, "enum_FIELD"], [50, 51, 7, "enum_FIELD"], [56, 55, 7, "enum_FIELD"], [63, 62, 7, "enum_FIELD"], [63, 64, 7, "enum_FIELD"], [69, 68, 7, "enum_FIELD"], [76, 75, 7, "enum_FIELD"], [76, 77, 7, "enum_FIELD"], [82, 81, 7, "enum_FIELD"], [89, 88, 7, "enum_FIELD"], [89, 91, 7, "enum_FIELD"], [98, 97, 7, "enum_FIELD"], [105, 104, 7, "enum_FIELD"], [105, 107, 7, "enum_FIELD"], [114, 113, 7, "enum_FIELD"], [127, 125, 7, "enum_FIELD"], [136, 138, 7, "enum_FIELD"], [142, 141, 7, "enum_FIELD"], [156, 154, 7, "enum_FIELD"], [168, 164, 7, "enum_FIELD"], [181, 177, 7, "enum_FIELD"], [209, 206, 7, "enum_FIELD"], [209, 210, 7, "enum_FIELD"], [214, 218, 7, "enum_FIELD"], [224, 228, 7, "enum_FIELD"], [234, 240, 7, "enum_FIELD"], [266, 263, 7, "enum_FIELD"], [266, 267, 7, "enum_FIELD"], [271, 275, 7, "enum_FIELD"], [281, 285, 7, "enum_FIELD"], [291, 297, 7, "enum_FIELD"], [316, 315, 7, "enum_FIELD"], [329, 327, 7, "enum_FIELD"], [336, 335, 7, "enum_FIELD"], [350, 348, 7, "enum_FIELD"], [362, 358, 7, "enum_FIELD"], [375, 371, 7, "enum_FIELD"], [383, 382, 7, "enum_FIELD"], [397, 395, 7, "enum_FIELD"], [407, 405, 7, "enum_FIELD"], [416, 412, 7, "enum_FIELD"], [451, 447, 7, "enum_FIELD"], [475, 471, 7, "enum_FIELD"], [499, 495, 7, "enum_FIELD"], [527, 526, 7, "enum_FIELD"], [545, 541, 7, "enum_FIELD"], [560, 559, 7, "enum_FIELD"], [571, 569, 7, "enum_FIELD"], [576, 575, 7, "enum_FIELD"], [576, 577, 7, "enum_FIELD"], [581, 580, 7, "enum_FIELD"], [588, 586, 7, "enum_FIELD"], [593, 592, 7, "enum_FIELD"], [593, 594, 7, "enum_FIELD"], [598, 597, 7, "enum_FIELD"], [601, 603, 7, "enum_FIELD"], [609, 607, 7, "enum_FIELD"], [614, 613, 7, "enum_FIELD"], [614, 615, 7, "enum_FIELD"], [619, 618, 7, "enum_FIELD"], [626, 624, 7, "enum_FIELD"], [631, 630, 7, "enum_FIELD"], [631, 632, 7, "enum_FIELD"], [636, 635, 7, "enum_FIELD"], [643, 641, 7, "enum_FIELD"], [648, 647, 7, "enum_FIELD"], [648, 649, 7, "enum_FIELD"], [653, 652, 7, "enum_FIELD"], [660, 658, 7, "enum_FIELD"], [665, 664, 7, "enum_FIELD"], [665, 666, 7, "enum_FIELD"], [670, 669, 7, "enum_FIELD"], [673, 675, 7, "enum_FIELD"], [679, 678, 7, "enum_FIELD"], [91, 90, 7, "enum_FIELD"], [107, 106, 7, "enum_FIELD"], [125, 124, 7, "enum_FIELD"], [154, 153, 7, "enum_FIELD"], [164, 163, 7, "enum_FIELD"], [171, 170, 7, "enum_FIELD"], [171, 172, 7, "enum_FIELD"], [177, 176, 7, "enum_FIELD"], [184, 183, 7, "enum_FIELD"], [184, 186, 7, "enum_FIELD"], [206, 204, 7, "enum_FIELD"], [206, 207, 7, "enum_FIELD"], [218, 217, 7, "enum_FIELD"], [228, 227, 7, "enum_FIELD"], [240, 236, 7, "enum_FIELD"], [263, 261, 7, "enum_FIELD"], [263, 264, 7, "enum_FIELD"], [275, 274, 7, "enum_FIELD"], [285, 284, 7, "enum_FIELD"], [297, 293, 7, "enum_FIELD"], [327, 326, 7, "enum_FIELD"], [348, 347, 7, "enum_FIELD"], [358, 357, 7, "enum_FIELD"], [365, 364, 7, "enum_FIELD"], [365, 366, 7, "enum_FIELD"], [371, 370, 7, "enum_FIELD"], [395, 394, 7, "enum_FIELD"], [405, 404, 7, "enum_FIELD"], [412, 411, 7, "enum_FIELD"], [427, 424, 7, "enum_FIELD"], [427, 429, 7, "enum_FIELD"], [447, 446, 7, "enum_FIELD"], [454, 453, 7, "enum_FIELD"], [454, 456, 7, "enum_FIELD"], [471, 470, 7, "enum_FIELD"], [478, 477, 7, "enum_FIELD"], [478, 480, 7, "enum_FIELD"], [495, 494, 7, "enum_FIELD"], [502, 501, 7, "enum_FIELD"], [502, 506, 7, "enum_FIELD"], [541, 540, 7, "enum_FIELD"], [553, 546, 7, "enum_FIELD"], [569, 568, 7, "enum_FIELD"], [586, 585, 7, "enum_FIELD"], [607, 606, 7, "enum_FIELD"], [624, 623, 7, "enum_FIELD"], [641, 640, 7, "enum_FIELD"], [658, 657, 7, "enum_FIELD"], [186, 185, 7, "enum_FIELD"], [204, 203, 7, "enum_FIELD"], [220, 219, 7, "enum_FIELD"], [220, 221, 7, "enum_FIELD"], [230, 229, 7, "enum_FIELD"], [230, 231, 7, "enum_FIELD"], [236, 235, 7, "enum_FIELD"], [251, 248, 7, "enum_FIELD"], [251, 252, 7, "enum_FIELD"], [261, 260, 7, "enum_FIELD"], [277, 276, 7, "enum_FIELD"], [277, 278, 7, "enum_FIELD"], [287, 286, 7, "enum_FIELD"], [287, 288, 7, "enum_FIELD"], [293, 292, 7, "enum_FIELD"], [308, 305, 7, "enum_FIELD"], [308, 309, 7, "enum_FIELD"], [424, 421, 7, "enum_FIELD"], [424, 425, 7, "enum_FIELD"], [429, 428, 7, "enum_FIELD"], [456, 455, 7, "enum_FIELD"], [480, 479, 7, "enum_FIELD"], [506, 504, 7, "enum_FIELD"], [550, 549, 7, "enum_FIELD"], [550, 551, 7, "enum_FIELD"], [193, 190, 7, "enum_FIELD"], [193, 194, 7, "enum_FIELD"], [248, 245, 7, "enum_FIELD"], [248, 249, 7, "enum_FIELD"], [305, 302, 7, "enum_FIELD"], [305, 306, 7, "enum_FIELD"], [421, 420, 7, "enum_FIELD"], [421, 422, 7, "enum_FIELD"], [431, 430, 7, "enum_FIELD"], [463, 460, 7, "enum_FIELD"], [463, 464, 7, "enum_FIELD"], [487, 484, 7, "enum_FIELD"], [487, 488, 7, "enum_FIELD"], [504, 503, 7, "enum_FIELD"], [510, 507, 7, "enum_FIELD"], [190, 188, 7, "enum_FIELD"], [190, 191, 7, "enum_FIELD"], [245, 244, 7, "enum_FIELD"], [245, 246, 7, "enum_FIELD"], [302, 301, 7, "enum_FIELD"], [302, 303, 7, "enum_FIELD"], [438, 435, 7, "enum_FIELD"], [438, 439, 7, "enum_FIELD"], [460, 458, 7, "enum_FIELD"], [460, 461, 7, "enum_FIELD"], [484, 482, 7, "enum_FIELD"], [484, 485, 7, "enum_FIELD"], [517, 514, 7, "enum_FIELD"], [517, 518, 7, "enum_FIELD"], [188, 187, 7, "enum_FIELD"], [435, 433, 7, "enum_FIELD"], [435, 436, 7, "enum_FIELD"], [458, 457, 7, "enum_FIELD"], [482, 481, 7, "enum_FIELD"], [514, 512, 7, "enum_FIELD"], [514, 515, 7, "enum_FIELD"], [433, 432, 7, "enum_FIELD"], [512, 511, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [24, 2, 10, "enum_LAST_LEXICAL_USE"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [33, 21, 10, "enum_LAST_LEXICAL_USE"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [38, 24, 10, "enum_LAST_LEXICAL_USE"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [42, 29, 10, "enum_LAST_LEXICAL_USE"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [46, 33, 10, "enum_LAST_LEXICAL_USE"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [51, 4, 10, "enum_LAST_LEXICAL_USE"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [55, 42, 10, "enum_LAST_LEXICAL_USE"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [59, 46, 10, "enum_LAST_LEXICAL_USE"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [64, 51, 10, "enum_LAST_LEXICAL_USE"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [68, 55, 10, "enum_LAST_LEXICAL_USE"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [72, 59, 10, "enum_LAST_LEXICAL_USE"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [77, 8, 10, "enum_LAST_LEXICAL_USE"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [81, 68, 10, "enum_LAST_LEXICAL_USE"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [85, 72, 10, "enum_LAST_LEXICAL_USE"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [92, 10, 10, "enum_LAST_LEXICAL_USE"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [97, 81, 10, "enum_LAST_LEXICAL_USE"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [101, 85, 10, "enum_LAST_LEXICAL_USE"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [106, 90, 10, "enum_LAST_LEXICAL_USE"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [108, 12, 10, "enum_LAST_LEXICAL_USE"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [113, 97, 10, "enum_LAST_LEXICAL_USE"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [117, 101, 10, "enum_LAST_LEXICAL_USE"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [124, 113, 10, "enum_LAST_LEXICAL_USE"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 129, 9, "enum_NEXT_SYNTAX"], [130, 64, 10, "enum_LAST_LEXICAL_USE"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [132, 6, 10, "enum_LAST_LEXICAL_USE"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [134, 77, 10, "enum_LAST_LEXICAL_USE"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [138, 38, 10, "enum_LAST_LEXICAL_USE"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [141, 124, 10, "enum_LAST_LEXICAL_USE"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [145, 117, 10, "enum_LAST_LEXICAL_USE"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [153, 122, 10, "enum_LAST_LEXICAL_USE"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 162, 9, "enum_NEXT_SYNTAX"], [163, 141, 10, "enum_LAST_LEXICAL_USE"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [167, 145, 10, "enum_LAST_LEXICAL_USE"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [172, 151, 10, "enum_LAST_LEXICAL_USE"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [176, 163, 10, "enum_LAST_LEXICAL_USE"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [180, 167, 10, "enum_LAST_LEXICAL_USE"], [179, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 184, 9, "enum_NEXT_SYNTAX"], [185, 106, 10, "enum_LAST_LEXICAL_USE"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [187, 153, 10, "enum_LAST_LEXICAL_USE"], [186, 187, 9, "enum_NEXT_SYNTAX"], [187, 188, 9, "enum_NEXT_SYNTAX"], [188, 189, 9, "enum_NEXT_SYNTAX"], [189, 190, 9, "enum_NEXT_SYNTAX"], [191, 172, 10, "enum_LAST_LEXICAL_USE"], [190, 191, 9, "enum_NEXT_SYNTAX"], [191, 192, 9, "enum_NEXT_SYNTAX"], [192, 193, 9, "enum_NEXT_SYNTAX"], [193, 194, 9, "enum_NEXT_SYNTAX"], [194, 195, 9, "enum_NEXT_SYNTAX"], [195, 196, 9, "enum_NEXT_SYNTAX"], [196, 197, 9, "enum_NEXT_SYNTAX"], [197, 198, 9, "enum_NEXT_SYNTAX"], [198, 200, 9, "enum_NEXT_SYNTAX"], [200, 201, 9, "enum_NEXT_SYNTAX"], [201, 202, 9, "enum_NEXT_SYNTAX"], [203, 187, 10, "enum_LAST_LEXICAL_USE"], [202, 203, 9, "enum_NEXT_SYNTAX"], [203, 204, 9, "enum_NEXT_SYNTAX"], [204, 205, 9, "enum_NEXT_SYNTAX"], [205, 206, 9, "enum_NEXT_SYNTAX"], [207, 191, 10, "enum_LAST_LEXICAL_USE"], [206, 207, 9, "enum_NEXT_SYNTAX"], [207, 208, 9, "enum_NEXT_SYNTAX"], [208, 209, 9, "enum_NEXT_SYNTAX"], [209, 210, 9, "enum_NEXT_SYNTAX"], [210, 211, 9, "enum_NEXT_SYNTAX"], [211, 212, 9, "enum_NEXT_SYNTAX"], [212, 214, 9, "enum_NEXT_SYNTAX"], [214, 215, 9, "enum_NEXT_SYNTAX"], [215, 216, 9, "enum_NEXT_SYNTAX"], [217, 185, 10, "enum_LAST_LEXICAL_USE"], [216, 217, 9, "enum_NEXT_SYNTAX"], [217, 218, 9, "enum_NEXT_SYNTAX"], [219, 201, 10, "enum_LAST_LEXICAL_USE"], [218, 219, 9, "enum_NEXT_SYNTAX"], [219, 220, 9, "enum_NEXT_SYNTAX"], [220, 221, 9, "enum_NEXT_SYNTAX"], [221, 222, 9, "enum_NEXT_SYNTAX"], [222, 223, 9, "enum_NEXT_SYNTAX"], [223, 224, 9, "enum_NEXT_SYNTAX"], [224, 225, 9, "enum_NEXT_SYNTAX"], [225, 226, 9, "enum_NEXT_SYNTAX"], [227, 217, 10, "enum_LAST_LEXICAL_USE"], [226, 227, 9, "enum_NEXT_SYNTAX"], [227, 228, 9, "enum_NEXT_SYNTAX"], [229, 219, 10, "enum_LAST_LEXICAL_USE"], [228, 229, 9, "enum_NEXT_SYNTAX"], [229, 230, 9, "enum_NEXT_SYNTAX"], [230, 231, 9, "enum_NEXT_SYNTAX"], [231, 232, 9, "enum_NEXT_SYNTAX"], [232, 233, 9, "enum_NEXT_SYNTAX"], [233, 234, 9, "enum_NEXT_SYNTAX"], [235, 176, 10, "enum_LAST_LEXICAL_USE"], [234, 235, 9, "enum_NEXT_SYNTAX"], [235, 236, 9, "enum_NEXT_SYNTAX"], [236, 237, 9, "enum_NEXT_SYNTAX"], [237, 238, 9, "enum_NEXT_SYNTAX"], [239, 180, 10, "enum_LAST_LEXICAL_USE"], [238, 239, 9, "enum_NEXT_SYNTAX"], [239, 240, 9, "enum_NEXT_SYNTAX"], [240, 241, 9, "enum_NEXT_SYNTAX"], [241, 242, 9, "enum_NEXT_SYNTAX"], [242, 243, 9, "enum_NEXT_SYNTAX"], [243, 244, 9, "enum_NEXT_SYNTAX"], [244, 245, 9, "enum_NEXT_SYNTAX"], [246, 215, 10, "enum_LAST_LEXICAL_USE"], [245, 246, 9, "enum_NEXT_SYNTAX"], [246, 247, 9, "enum_NEXT_SYNTAX"], [247, 248, 9, "enum_NEXT_SYNTAX"], [248, 249, 9, "enum_NEXT_SYNTAX"], [249, 250, 9, "enum_NEXT_SYNTAX"], [250, 251, 9, "enum_NEXT_SYNTAX"], [252, 225, 10, "enum_LAST_LEXICAL_USE"], [251, 252, 9, "enum_NEXT_SYNTAX"], [252, 253, 9, "enum_NEXT_SYNTAX"], [253, 254, 9, "enum_NEXT_SYNTAX"], [254, 257, 9, "enum_NEXT_SYNTAX"], [257, 258, 9, "enum_NEXT_SYNTAX"], [258, 259, 9, "enum_NEXT_SYNTAX"], [260, 203, 10, "enum_LAST_LEXICAL_USE"], [259, 260, 9, "enum_NEXT_SYNTAX"], [260, 261, 9, "enum_NEXT_SYNTAX"], [261, 262, 9, "enum_NEXT_SYNTAX"], [262, 263, 9, "enum_NEXT_SYNTAX"], [264, 207, 10, "enum_LAST_LEXICAL_USE"], [263, 264, 9, "enum_NEXT_SYNTAX"], [264, 265, 9, "enum_NEXT_SYNTAX"], [265, 266, 9, "enum_NEXT_SYNTAX"], [266, 267, 9, "enum_NEXT_SYNTAX"], [267, 268, 9, "enum_NEXT_SYNTAX"], [268, 269, 9, "enum_NEXT_SYNTAX"], [269, 271, 9, "enum_NEXT_SYNTAX"], [272, 246, 10, "enum_LAST_LEXICAL_USE"], [271, 272, 9, "enum_NEXT_SYNTAX"], [272, 273, 9, "enum_NEXT_SYNTAX"], [274, 227, 10, "enum_LAST_LEXICAL_USE"], [273, 274, 9, "enum_NEXT_SYNTAX"], [274, 275, 9, "enum_NEXT_SYNTAX"], [276, 258, 10, "enum_LAST_LEXICAL_USE"], [275, 276, 9, "enum_NEXT_SYNTAX"], [276, 277, 9, "enum_NEXT_SYNTAX"], [277, 278, 9, "enum_NEXT_SYNTAX"], [278, 279, 9, "enum_NEXT_SYNTAX"], [279, 280, 9, "enum_NEXT_SYNTAX"], [280, 281, 9, "enum_NEXT_SYNTAX"], [282, 252, 10, "enum_LAST_LEXICAL_USE"], [281, 282, 9, "enum_NEXT_SYNTAX"], [282, 283, 9, "enum_NEXT_SYNTAX"], [284, 274, 10, "enum_LAST_LEXICAL_USE"], [283, 284, 9, "enum_NEXT_SYNTAX"], [284, 285, 9, "enum_NEXT_SYNTAX"], [286, 276, 10, "enum_LAST_LEXICAL_USE"], [285, 286, 9, "enum_NEXT_SYNTAX"], [286, 287, 9, "enum_NEXT_SYNTAX"], [287, 288, 9, "enum_NEXT_SYNTAX"], [288, 289, 9, "enum_NEXT_SYNTAX"], [289, 290, 9, "enum_NEXT_SYNTAX"], [290, 291, 9, "enum_NEXT_SYNTAX"], [292, 235, 10, "enum_LAST_LEXICAL_USE"], [291, 292, 9, "enum_NEXT_SYNTAX"], [292, 293, 9, "enum_NEXT_SYNTAX"], [293, 294, 9, "enum_NEXT_SYNTAX"], [294, 295, 9, "enum_NEXT_SYNTAX"], [296, 239, 10, "enum_LAST_LEXICAL_USE"], [295, 296, 9, "enum_NEXT_SYNTAX"], [296, 297, 9, "enum_NEXT_SYNTAX"], [297, 298, 9, "enum_NEXT_SYNTAX"], [298, 299, 9, "enum_NEXT_SYNTAX"], [299, 300, 9, "enum_NEXT_SYNTAX"], [300, 301, 9, "enum_NEXT_SYNTAX"], [301, 302, 9, "enum_NEXT_SYNTAX"], [303, 272, 10, "enum_LAST_LEXICAL_USE"], [302, 303, 9, "enum_NEXT_SYNTAX"], [303, 304, 9, "enum_NEXT_SYNTAX"], [304, 305, 9, "enum_NEXT_SYNTAX"], [305, 306, 9, "enum_NEXT_SYNTAX"], [306, 307, 9, "enum_NEXT_SYNTAX"], [307, 308, 9, "enum_NEXT_SYNTAX"], [309, 282, 10, "enum_LAST_LEXICAL_USE"], [308, 309, 9, "enum_NEXT_SYNTAX"], [309, 310, 9, "enum_NEXT_SYNTAX"], [310, 311, 9, "enum_NEXT_SYNTAX"], [311, 314, 9, "enum_NEXT_SYNTAX"], [315, 292, 10, "enum_LAST_LEXICAL_USE"], [314, 315, 9, "enum_NEXT_SYNTAX"], [315, 316, 9, "enum_NEXT_SYNTAX"], [316, 317, 9, "enum_NEXT_SYNTAX"], [317, 318, 9, "enum_NEXT_SYNTAX"], [319, 296, 10, "enum_LAST_LEXICAL_USE"], [318, 319, 9, "enum_NEXT_SYNTAX"], [319, 320, 9, "enum_NEXT_SYNTAX"], [320, 321, 9, "enum_NEXT_SYNTAX"], [321, 322, 9, "enum_NEXT_SYNTAX"], [322, 323, 9, "enum_NEXT_SYNTAX"], [323, 324, 9, "enum_NEXT_SYNTAX"], [324, 325, 9, "enum_NEXT_SYNTAX"], [326, 315, 10, "enum_LAST_LEXICAL_USE"], [325, 326, 9, "enum_NEXT_SYNTAX"], [326, 327, 9, "enum_NEXT_SYNTAX"], [327, 328, 9, "enum_NEXT_SYNTAX"], [328, 329, 9, "enum_NEXT_SYNTAX"], [329, 330, 9, "enum_NEXT_SYNTAX"], [330, 331, 9, "enum_NEXT_SYNTAX"], [332, 260, 10, "enum_LAST_LEXICAL_USE"], [331, 332, 9, "enum_NEXT_SYNTAX"], [332, 333, 9, "enum_NEXT_SYNTAX"], [333, 334, 9, "enum_NEXT_SYNTAX"], [335, 326, 10, "enum_LAST_LEXICAL_USE"], [334, 335, 9, "enum_NEXT_SYNTAX"], [335, 336, 9, "enum_NEXT_SYNTAX"], [336, 337, 9, "enum_NEXT_SYNTAX"], [337, 338, 9, "enum_NEXT_SYNTAX"], [339, 319, 10, "enum_LAST_LEXICAL_USE"], [338, 339, 9, "enum_NEXT_SYNTAX"], [339, 340, 9, "enum_NEXT_SYNTAX"], [340, 341, 9, "enum_NEXT_SYNTAX"], [341, 342, 9, "enum_NEXT_SYNTAX"], [342, 344, 9, "enum_NEXT_SYNTAX"], [344, 345, 9, "enum_NEXT_SYNTAX"], [345, 346, 9, "enum_NEXT_SYNTAX"], [347, 324, 10, "enum_LAST_LEXICAL_USE"], [346, 347, 9, "enum_NEXT_SYNTAX"], [347, 348, 9, "enum_NEXT_SYNTAX"], [348, 349, 9, "enum_NEXT_SYNTAX"], [349, 350, 9, "enum_NEXT_SYNTAX"], [350, 351, 9, "enum_NEXT_SYNTAX"], [351, 352, 9, "enum_NEXT_SYNTAX"], [352, 353, 9, "enum_NEXT_SYNTAX"], [353, 354, 9, "enum_NEXT_SYNTAX"], [354, 356, 9, "enum_NEXT_SYNTAX"], [357, 335, 10, "enum_LAST_LEXICAL_USE"], [356, 357, 9, "enum_NEXT_SYNTAX"], [357, 358, 9, "enum_NEXT_SYNTAX"], [358, 359, 9, "enum_NEXT_SYNTAX"], [359, 360, 9, "enum_NEXT_SYNTAX"], [361, 339, 10, "enum_LAST_LEXICAL_USE"], [360, 361, 9, "enum_NEXT_SYNTAX"], [361, 362, 9, "enum_NEXT_SYNTAX"], [362, 363, 9, "enum_NEXT_SYNTAX"], [363, 364, 9, "enum_NEXT_SYNTAX"], [364, 365, 9, "enum_NEXT_SYNTAX"], [366, 345, 10, "enum_LAST_LEXICAL_USE"], [365, 366, 9, "enum_NEXT_SYNTAX"], [366, 367, 9, "enum_NEXT_SYNTAX"], [367, 368, 9, "enum_NEXT_SYNTAX"], [368, 369, 9, "enum_NEXT_SYNTAX"], [370, 347, 10, "enum_LAST_LEXICAL_USE"], [369, 370, 9, "enum_NEXT_SYNTAX"], [370, 371, 9, "enum_NEXT_SYNTAX"], [371, 372, 9, "enum_NEXT_SYNTAX"], [372, 373, 9, "enum_NEXT_SYNTAX"], [374, 366, 10, "enum_LAST_LEXICAL_USE"], [373, 374, 9, "enum_NEXT_SYNTAX"], [374, 375, 9, "enum_NEXT_SYNTAX"], [376, 92, 10, "enum_LAST_LEXICAL_USE"], [375, 376, 9, "enum_NEXT_SYNTAX"], [376, 377, 9, "enum_NEXT_SYNTAX"], [378, 108, 10, "enum_LAST_LEXICAL_USE"], [377, 378, 9, "enum_NEXT_SYNTAX"], [378, 379, 9, "enum_NEXT_SYNTAX"], [379, 381, 9, "enum_NEXT_SYNTAX"], [382, 357, 10, "enum_LAST_LEXICAL_USE"], [381, 382, 9, "enum_NEXT_SYNTAX"], [382, 383, 9, "enum_NEXT_SYNTAX"], [383, 384, 9, "enum_NEXT_SYNTAX"], [384, 385, 9, "enum_NEXT_SYNTAX"], [386, 361, 10, "enum_LAST_LEXICAL_USE"], [385, 386, 9, "enum_NEXT_SYNTAX"], [386, 387, 9, "enum_NEXT_SYNTAX"], [387, 388, 9, "enum_NEXT_SYNTAX"], [388, 389, 9, "enum_NEXT_SYNTAX"], [389, 391, 9, "enum_NEXT_SYNTAX"], [392, 374, 10, "enum_LAST_LEXICAL_USE"], [391, 392, 9, "enum_NEXT_SYNTAX"], [392, 393, 9, "enum_NEXT_SYNTAX"], [394, 370, 10, "enum_LAST_LEXICAL_USE"], [393, 394, 9, "enum_NEXT_SYNTAX"], [394, 395, 9, "enum_NEXT_SYNTAX"], [395, 396, 9, "enum_NEXT_SYNTAX"], [396, 397, 9, "enum_NEXT_SYNTAX"], [397, 398, 9, "enum_NEXT_SYNTAX"], [398, 399, 9, "enum_NEXT_SYNTAX"], [399, 400, 9, "enum_NEXT_SYNTAX"], [400, 401, 9, "enum_NEXT_SYNTAX"], [401, 403, 9, "enum_NEXT_SYNTAX"], [404, 394, 10, "enum_LAST_LEXICAL_USE"], [403, 404, 9, "enum_NEXT_SYNTAX"], [404, 405, 9, "enum_NEXT_SYNTAX"], [405, 406, 9, "enum_NEXT_SYNTAX"], [406, 407, 9, "enum_NEXT_SYNTAX"], [408, 392, 10, "enum_LAST_LEXICAL_USE"], [407, 408, 9, "enum_NEXT_SYNTAX"], [408, 409, 9, "enum_NEXT_SYNTAX"], [409, 410, 9, "enum_NEXT_SYNTAX"], [411, 382, 10, "enum_LAST_LEXICAL_USE"], [410, 411, 9, "enum_NEXT_SYNTAX"], [411, 412, 9, "enum_NEXT_SYNTAX"], [412, 413, 9, "enum_NEXT_SYNTAX"], [413, 414, 9, "enum_NEXT_SYNTAX"], [415, 386, 10, "enum_LAST_LEXICAL_USE"], [414, 415, 9, "enum_NEXT_SYNTAX"], [415, 416, 9, "enum_NEXT_SYNTAX"], [416, 417, 9, "enum_NEXT_SYNTAX"], [417, 418, 9, "enum_NEXT_SYNTAX"], [418, 419, 9, "enum_NEXT_SYNTAX"], [419, 420, 9, "enum_NEXT_SYNTAX"], [420, 421, 9, "enum_NEXT_SYNTAX"], [422, 408, 10, "enum_LAST_LEXICAL_USE"], [421, 422, 9, "enum_NEXT_SYNTAX"], [422, 423, 9, "enum_NEXT_SYNTAX"], [423, 424, 9, "enum_NEXT_SYNTAX"], [424, 425, 9, "enum_NEXT_SYNTAX"], [425, 426, 9, "enum_NEXT_SYNTAX"], [426, 427, 9, "enum_NEXT_SYNTAX"], [428, 284, 10, "enum_LAST_LEXICAL_USE"], [427, 428, 9, "enum_NEXT_SYNTAX"], [428, 429, 9, "enum_NEXT_SYNTAX"], [429, 430, 9, "enum_NEXT_SYNTAX"], [430, 431, 9, "enum_NEXT_SYNTAX"], [432, 404, 10, "enum_LAST_LEXICAL_USE"], [431, 432, 9, "enum_NEXT_SYNTAX"], [432, 433, 9, "enum_NEXT_SYNTAX"], [433, 434, 9, "enum_NEXT_SYNTAX"], [434, 435, 9, "enum_NEXT_SYNTAX"], [436, 422, 10, "enum_LAST_LEXICAL_USE"], [435, 436, 9, "enum_NEXT_SYNTAX"], [436, 437, 9, "enum_NEXT_SYNTAX"], [437, 438, 9, "enum_NEXT_SYNTAX"], [438, 439, 9, "enum_NEXT_SYNTAX"], [439, 440, 9, "enum_NEXT_SYNTAX"], [440, 441, 9, "enum_NEXT_SYNTAX"], [441, 442, 9, "enum_NEXT_SYNTAX"], [442, 443, 9, "enum_NEXT_SYNTAX"], [443, 444, 9, "enum_NEXT_SYNTAX"], [444, 445, 9, "enum_NEXT_SYNTAX"], [446, 411, 10, "enum_LAST_LEXICAL_USE"], [445, 446, 9, "enum_NEXT_SYNTAX"], [446, 447, 9, "enum_NEXT_SYNTAX"], [447, 448, 9, "enum_NEXT_SYNTAX"], [448, 449, 9, "enum_NEXT_SYNTAX"], [450, 415, 10, "enum_LAST_LEXICAL_USE"], [449, 450, 9, "enum_NEXT_SYNTAX"], [450, 451, 9, "enum_NEXT_SYNTAX"], [451, 452, 9, "enum_NEXT_SYNTAX"], [452, 453, 9, "enum_NEXT_SYNTAX"], [453, 454, 9, "enum_NEXT_SYNTAX"], [455, 428, 10, "enum_LAST_LEXICAL_USE"], [454, 455, 9, "enum_NEXT_SYNTAX"], [455, 456, 9, "enum_NEXT_SYNTAX"], [457, 432, 10, "enum_LAST_LEXICAL_USE"], [456, 457, 9, "enum_NEXT_SYNTAX"], [457, 458, 9, "enum_NEXT_SYNTAX"], [458, 459, 9, "enum_NEXT_SYNTAX"], [459, 460, 9, "enum_NEXT_SYNTAX"], [461, 436, 10, "enum_LAST_LEXICAL_USE"], [460, 461, 9, "enum_NEXT_SYNTAX"], [461, 462, 9, "enum_NEXT_SYNTAX"], [462, 463, 9, "enum_NEXT_SYNTAX"], [463, 464, 9, "enum_NEXT_SYNTAX"], [464, 465, 9, "enum_NEXT_SYNTAX"], [465, 466, 9, "enum_NEXT_SYNTAX"], [466, 467, 9, "enum_NEXT_SYNTAX"], [467, 468, 9, "enum_NEXT_SYNTAX"], [468, 469, 9, "enum_NEXT_SYNTAX"], [470, 446, 10, "enum_LAST_LEXICAL_USE"], [469, 470, 9, "enum_NEXT_SYNTAX"], [470, 471, 9, "enum_NEXT_SYNTAX"], [471, 472, 9, "enum_NEXT_SYNTAX"], [472, 473, 9, "enum_NEXT_SYNTAX"], [474, 450, 10, "enum_LAST_LEXICAL_USE"], [473, 474, 9, "enum_NEXT_SYNTAX"], [474, 475, 9, "enum_NEXT_SYNTAX"], [475, 476, 9, "enum_NEXT_SYNTAX"], [476, 477, 9, "enum_NEXT_SYNTAX"], [477, 478, 9, "enum_NEXT_SYNTAX"], [479, 455, 10, "enum_LAST_LEXICAL_USE"], [478, 479, 9, "enum_NEXT_SYNTAX"], [479, 480, 9, "enum_NEXT_SYNTAX"], [481, 457, 10, "enum_LAST_LEXICAL_USE"], [480, 481, 9, "enum_NEXT_SYNTAX"], [481, 482, 9, "enum_NEXT_SYNTAX"], [482, 483, 9, "enum_NEXT_SYNTAX"], [483, 484, 9, "enum_NEXT_SYNTAX"], [485, 461, 10, "enum_LAST_LEXICAL_USE"], [484, 485, 9, "enum_NEXT_SYNTAX"], [485, 486, 9, "enum_NEXT_SYNTAX"], [486, 487, 9, "enum_NEXT_SYNTAX"], [487, 488, 9, "enum_NEXT_SYNTAX"], [488, 489, 9, "enum_NEXT_SYNTAX"], [489, 490, 9, "enum_NEXT_SYNTAX"], [490, 491, 9, "enum_NEXT_SYNTAX"], [491, 492, 9, "enum_NEXT_SYNTAX"], [492, 493, 9, "enum_NEXT_SYNTAX"], [494, 470, 10, "enum_LAST_LEXICAL_USE"], [493, 494, 9, "enum_NEXT_SYNTAX"], [494, 495, 9, "enum_NEXT_SYNTAX"], [495, 496, 9, "enum_NEXT_SYNTAX"], [496, 497, 9, "enum_NEXT_SYNTAX"], [498, 474, 10, "enum_LAST_LEXICAL_USE"], [497, 498, 9, "enum_NEXT_SYNTAX"], [498, 499, 9, "enum_NEXT_SYNTAX"], [499, 500, 9, "enum_NEXT_SYNTAX"], [500, 501, 9, "enum_NEXT_SYNTAX"], [501, 502, 9, "enum_NEXT_SYNTAX"], [502, 503, 9, "enum_NEXT_SYNTAX"], [503, 504, 9, "enum_NEXT_SYNTAX"], [504, 505, 9, "enum_NEXT_SYNTAX"], [505, 506, 9, "enum_NEXT_SYNTAX"], [506, 507, 9, "enum_NEXT_SYNTAX"], [507, 508, 9, "enum_NEXT_SYNTAX"], [509, 479, 10, "enum_LAST_LEXICAL_USE"], [508, 509, 9, "enum_NEXT_SYNTAX"], [509, 510, 9, "enum_NEXT_SYNTAX"], [511, 481, 10, "enum_LAST_LEXICAL_USE"], [510, 511, 9, "enum_NEXT_SYNTAX"], [511, 512, 9, "enum_NEXT_SYNTAX"], [512, 513, 9, "enum_NEXT_SYNTAX"], [513, 514, 9, "enum_NEXT_SYNTAX"], [515, 485, 10, "enum_LAST_LEXICAL_USE"], [514, 515, 9, "enum_NEXT_SYNTAX"], [515, 516, 9, "enum_NEXT_SYNTAX"], [516, 517, 9, "enum_NEXT_SYNTAX"], [517, 518, 9, "enum_NEXT_SYNTAX"], [518, 519, 9, "enum_NEXT_SYNTAX"], [519, 520, 9, "enum_NEXT_SYNTAX"], [520, 521, 9, "enum_NEXT_SYNTAX"], [521, 522, 9, "enum_NEXT_SYNTAX"], [522, 523, 9, "enum_NEXT_SYNTAX"], [523, 525, 9, "enum_NEXT_SYNTAX"], [526, 494, 10, "enum_LAST_LEXICAL_USE"], [525, 526, 9, "enum_NEXT_SYNTAX"], [526, 527, 9, "enum_NEXT_SYNTAX"], [527, 528, 9, "enum_NEXT_SYNTAX"], [528, 529, 9, "enum_NEXT_SYNTAX"], [530, 498, 10, "enum_LAST_LEXICAL_USE"], [529, 530, 9, "enum_NEXT_SYNTAX"], [530, 531, 9, "enum_NEXT_SYNTAX"], [531, 532, 9, "enum_NEXT_SYNTAX"], [532, 533, 9, "enum_NEXT_SYNTAX"], [533, 535, 9, "enum_NEXT_SYNTAX"], [536, 14, 10, "enum_LAST_LEXICAL_USE"], [535, 536, 9, "enum_NEXT_SYNTAX"], [536, 537, 9, "enum_NEXT_SYNTAX"], [537, 539, 9, "enum_NEXT_SYNTAX"], [539, 540, 9, "enum_NEXT_SYNTAX"], [540, 541, 9, "enum_NEXT_SYNTAX"], [541, 542, 9, "enum_NEXT_SYNTAX"], [542, 543, 9, "enum_NEXT_SYNTAX"], [544, 511, 10, "enum_LAST_LEXICAL_USE"], [543, 544, 9, "enum_NEXT_SYNTAX"], [544, 545, 9, "enum_NEXT_SYNTAX"], [545, 546, 9, "enum_NEXT_SYNTAX"], [546, 547, 9, "enum_NEXT_SYNTAX"], [547, 548, 9, "enum_NEXT_SYNTAX"], [549, 138, 10, "enum_LAST_LEXICAL_USE"], [548, 549, 9, "enum_NEXT_SYNTAX"], [549, 550, 9, "enum_NEXT_SYNTAX"], [550, 551, 9, "enum_NEXT_SYNTAX"], [551, 552, 9, "enum_NEXT_SYNTAX"], [552, 553, 9, "enum_NEXT_SYNTAX"], [553, 554, 9, "enum_NEXT_SYNTAX"], [554, 555, 9, "enum_NEXT_SYNTAX"], [555, 556, 9, "enum_NEXT_SYNTAX"], [556, 558, 9, "enum_NEXT_SYNTAX"], [559, 526, 10, "enum_LAST_LEXICAL_USE"], [558, 559, 9, "enum_NEXT_SYNTAX"], [559, 560, 9, "enum_NEXT_SYNTAX"], [560, 561, 9, "enum_NEXT_SYNTAX"], [561, 562, 9, "enum_NEXT_SYNTAX"], [563, 530, 10, "enum_LAST_LEXICAL_USE"], [562, 563, 9, "enum_NEXT_SYNTAX"], [563, 564, 9, "enum_NEXT_SYNTAX"], [564, 565, 9, "enum_NEXT_SYNTAX"], [565, 566, 9, "enum_NEXT_SYNTAX"], [566, 567, 9, "enum_NEXT_SYNTAX"], [568, 559, 10, "enum_LAST_LEXICAL_USE"], [567, 568, 9, "enum_NEXT_SYNTAX"], [568, 569, 9, "enum_NEXT_SYNTAX"], [569, 570, 9, "enum_NEXT_SYNTAX"], [570, 571, 9, "enum_NEXT_SYNTAX"], [571, 572, 9, "enum_NEXT_SYNTAX"], [572, 573, 9, "enum_NEXT_SYNTAX"], [573, 574, 9, "enum_NEXT_SYNTAX"], [575, 549, 10, "enum_LAST_LEXICAL_USE"], [574, 575, 9, "enum_NEXT_SYNTAX"], [575, 576, 9, "enum_NEXT_SYNTAX"], [576, 577, 9, "enum_NEXT_SYNTAX"], [577, 578, 9, "enum_NEXT_SYNTAX"], [578, 579, 9, "enum_NEXT_SYNTAX"], [580, 544, 10, "enum_LAST_LEXICAL_USE"], [579, 580, 9, "enum_NEXT_SYNTAX"], [580, 581, 9, "enum_NEXT_SYNTAX"], [581, 582, 9, "enum_NEXT_SYNTAX"], [582, 583, 9, "enum_NEXT_SYNTAX"], [583, 584, 9, "enum_NEXT_SYNTAX"], [585, 568, 10, "enum_LAST_LEXICAL_USE"], [584, 585, 9, "enum_NEXT_SYNTAX"], [585, 586, 9, "enum_NEXT_SYNTAX"], [586, 587, 9, "enum_NEXT_SYNTAX"], [587, 588, 9, "enum_NEXT_SYNTAX"], [588, 589, 9, "enum_NEXT_SYNTAX"], [589, 590, 9, "enum_NEXT_SYNTAX"], [590, 591, 9, "enum_NEXT_SYNTAX"], [592, 575, 10, "enum_LAST_LEXICAL_USE"], [591, 592, 9, "enum_NEXT_SYNTAX"], [592, 593, 9, "enum_NEXT_SYNTAX"], [593, 594, 9, "enum_NEXT_SYNTAX"], [594, 595, 9, "enum_NEXT_SYNTAX"], [595, 596, 9, "enum_NEXT_SYNTAX"], [597, 580, 10, "enum_LAST_LEXICAL_USE"], [596, 597, 9, "enum_NEXT_SYNTAX"], [597, 598, 9, "enum_NEXT_SYNTAX"], [598, 599, 9, "enum_NEXT_SYNTAX"], [599, 600, 9, "enum_NEXT_SYNTAX"], [600, 601, 9, "enum_NEXT_SYNTAX"], [601, 602, 9, "enum_NEXT_SYNTAX"], [603, 592, 10, "enum_LAST_LEXICAL_USE"], [602, 603, 9, "enum_NEXT_SYNTAX"], [603, 604, 9, "enum_NEXT_SYNTAX"], [604, 605, 9, "enum_NEXT_SYNTAX"], [606, 585, 10, "enum_LAST_LEXICAL_USE"], [605, 606, 9, "enum_NEXT_SYNTAX"], [606, 607, 9, "enum_NEXT_SYNTAX"], [607, 608, 9, "enum_NEXT_SYNTAX"], [608, 609, 9, "enum_NEXT_SYNTAX"], [609, 610, 9, "enum_NEXT_SYNTAX"], [610, 611, 9, "enum_NEXT_SYNTAX"], [611, 612, 9, "enum_NEXT_SYNTAX"], [613, 603, 10, "enum_LAST_LEXICAL_USE"], [612, 613, 9, "enum_NEXT_SYNTAX"], [613, 614, 9, "enum_NEXT_SYNTAX"], [614, 615, 9, "enum_NEXT_SYNTAX"], [615, 616, 9, "enum_NEXT_SYNTAX"], [616, 617, 9, "enum_NEXT_SYNTAX"], [618, 597, 10, "enum_LAST_LEXICAL_USE"], [617, 618, 9, "enum_NEXT_SYNTAX"], [618, 619, 9, "enum_NEXT_SYNTAX"], [619, 620, 9, "enum_NEXT_SYNTAX"], [620, 621, 9, "enum_NEXT_SYNTAX"], [621, 622, 9, "enum_NEXT_SYNTAX"], [623, 606, 10, "enum_LAST_LEXICAL_USE"], [622, 623, 9, "enum_NEXT_SYNTAX"], [623, 624, 9, "enum_NEXT_SYNTAX"], [624, 625, 9, "enum_NEXT_SYNTAX"], [625, 626, 9, "enum_NEXT_SYNTAX"], [626, 627, 9, "enum_NEXT_SYNTAX"], [627, 628, 9, "enum_NEXT_SYNTAX"], [628, 629, 9, "enum_NEXT_SYNTAX"], [630, 613, 10, "enum_LAST_LEXICAL_USE"], [629, 630, 9, "enum_NEXT_SYNTAX"], [630, 631, 9, "enum_NEXT_SYNTAX"], [631, 632, 9, "enum_NEXT_SYNTAX"], [632, 633, 9, "enum_NEXT_SYNTAX"], [633, 634, 9, "enum_NEXT_SYNTAX"], [635, 618, 10, "enum_LAST_LEXICAL_USE"], [634, 635, 9, "enum_NEXT_SYNTAX"], [635, 636, 9, "enum_NEXT_SYNTAX"], [636, 637, 9, "enum_NEXT_SYNTAX"], [637, 638, 9, "enum_NEXT_SYNTAX"], [638, 639, 9, "enum_NEXT_SYNTAX"], [640, 623, 10, "enum_LAST_LEXICAL_USE"], [639, 640, 9, "enum_NEXT_SYNTAX"], [640, 641, 9, "enum_NEXT_SYNTAX"], [641, 642, 9, "enum_NEXT_SYNTAX"], [642, 643, 9, "enum_NEXT_SYNTAX"], [643, 644, 9, "enum_NEXT_SYNTAX"], [644, 645, 9, "enum_NEXT_SYNTAX"], [645, 646, 9, "enum_NEXT_SYNTAX"], [647, 630, 10, "enum_LAST_LEXICAL_USE"], [646, 647, 9, "enum_NEXT_SYNTAX"], [647, 648, 9, "enum_NEXT_SYNTAX"], [648, 649, 9, "enum_NEXT_SYNTAX"], [649, 650, 9, "enum_NEXT_SYNTAX"], [650, 651, 9, "enum_NEXT_SYNTAX"], [652, 332, 10, "enum_LAST_LEXICAL_USE"], [651, 652, 9, "enum_NEXT_SYNTAX"], [652, 653, 9, "enum_NEXT_SYNTAX"], [653, 654, 9, "enum_NEXT_SYNTAX"], [654, 655, 9, "enum_NEXT_SYNTAX"], [655, 656, 9, "enum_NEXT_SYNTAX"], [657, 640, 10, "enum_LAST_LEXICAL_USE"], [656, 657, 9, "enum_NEXT_SYNTAX"], [657, 658, 9, "enum_NEXT_SYNTAX"], [658, 659, 9, "enum_NEXT_SYNTAX"], [659, 660, 9, "enum_NEXT_SYNTAX"], [660, 661, 9, "enum_NEXT_SYNTAX"], [661, 662, 9, "enum_NEXT_SYNTAX"], [662, 663, 9, "enum_NEXT_SYNTAX"], [664, 647, 10, "enum_LAST_LEXICAL_USE"], [663, 664, 9, "enum_NEXT_SYNTAX"], [664, 665, 9, "enum_NEXT_SYNTAX"], [665, 666, 9, "enum_NEXT_SYNTAX"], [666, 667, 9, "enum_NEXT_SYNTAX"], [667, 668, 9, "enum_NEXT_SYNTAX"], [669, 652, 10, "enum_LAST_LEXICAL_USE"], [668, 669, 9, "enum_NEXT_SYNTAX"], [669, 670, 9, "enum_NEXT_SYNTAX"], [670, 671, 9, "enum_NEXT_SYNTAX"], [671, 672, 9, "enum_NEXT_SYNTAX"], [672, 673, 9, "enum_NEXT_SYNTAX"], [673, 674, 9, "enum_NEXT_SYNTAX"], [674, 675, 9, "enum_NEXT_SYNTAX"], [675, 676, 9, "enum_NEXT_SYNTAX"], [676, 677, 9, "enum_NEXT_SYNTAX"], [678, 657, 10, "enum_LAST_LEXICAL_USE"], [677, 678, 9, "enum_NEXT_SYNTAX"], [678, 679, 9, "enum_NEXT_SYNTAX"], [679, 680, 9, "enum_NEXT_SYNTAX"], [680, 681, 9, "enum_NEXT_SYNTAX"], [682, 563, 10, "enum_LAST_LEXICAL_USE"], [681, 682, 9, "enum_NEXT_SYNTAX"], [682, 683, 9, "enum_NEXT_SYNTAX"], [683, 684, 9, "enum_NEXT_SYNTAX"], [684, 685, 9, "enum_NEXT_SYNTAX"], [7, 18, 1, "enum_CFG_NEXT"], [18, 20, 1, "enum_CFG_NEXT"], [20, 28, 1, "enum_CFG_NEXT"], [28, 41, 1, "enum_CFG_NEXT"], [41, 54, 1, "enum_CFG_NEXT"], [54, 67, 1, "enum_CFG_NEXT"], [67, 80, 1, "enum_CFG_NEXT"], [80, 96, 1, "enum_CFG_NEXT"], [96, 112, 1, "enum_CFG_NEXT"], [112, 121, 1, "enum_CFG_NEXT"], [121, 140, 1, "enum_CFG_NEXT"], [140, 158, 1, "enum_CFG_NEXT"], [158, 151, 1, "enum_CFG_NEXT"], [151, 314, 1, "enum_CFG_NEXT"], [151, 162, 1, "enum_CFG_NEXT"], [162, 175, 1, "enum_CFG_NEXT"], [175, 209, 1, "enum_CFG_NEXT"], [209, 201, 1, "enum_CFG_NEXT"], [201, 214, 1, "enum_CFG_NEXT"], [201, 266, 1, "enum_CFG_NEXT"], [214, 224, 1, "enum_CFG_NEXT"], [224, 234, 1, "enum_CFG_NEXT"], [234, 201, 1, "enum_CFG_NEXT"], [266, 258, 1, "enum_CFG_NEXT"], [258, 151, 1, "enum_CFG_NEXT"], [258, 271, 1, "enum_CFG_NEXT"], [271, 281, 1, "enum_CFG_NEXT"], [281, 291, 1, "enum_CFG_NEXT"], [291, 258, 1, "enum_CFG_NEXT"], [314, 323, 1, "enum_CFG_NEXT"], [323, 334, 1, "enum_CFG_NEXT"], [334, 352, 1, "enum_CFG_NEXT"], [352, 345, 1, "enum_CFG_NEXT"], [345, 381, 1, "enum_CFG_NEXT"], [345, 356, 1, "enum_CFG_NEXT"], [356, 369, 1, "enum_CFG_NEXT"], [369, 345, 1, "enum_CFG_NEXT"], [381, 399, 1, "enum_CFG_NEXT"], [399, 392, 1, "enum_CFG_NEXT"], [392, 403, 1, "enum_CFG_NEXT"], [392, 525, 1, "enum_CFG_NEXT"], [403, 410, 1, "enum_CFG_NEXT"], [410, 445, 1, "enum_CFG_NEXT"], [445, 469, 1, "enum_CFG_NEXT"], [469, 493, 1, "enum_CFG_NEXT"], [493, 392, 1, "enum_CFG_NEXT"], [525, 536, 1, "enum_CFG_NEXT"], [536, 558, 1, "enum_CFG_NEXT"], [536, 539, 1, "enum_CFG_NEXT"], [539, 558, 1, "enum_CFG_NEXT"], [558, 567, 1, "enum_CFG_NEXT"], [567, 584, 1, "enum_CFG_NEXT"], [584, 605, 1, "enum_CFG_NEXT"], [605, 622, 1, "enum_CFG_NEXT"], [622, 639, 1, "enum_CFG_NEXT"], [639, 656, 1, "enum_CFG_NEXT"], [656, 677, 1, "enum_CFG_NEXT"], [24, 2, 3, "enum_LAST_WRITE"], [33, 21, 3, "enum_LAST_WRITE"], [38, 24, 2, "enum_LAST_READ"], [38, 2, 3, "enum_LAST_WRITE"], [42, 29, 2, "enum_LAST_READ"], [46, 33, 2, "enum_LAST_READ"], [46, 21, 3, "enum_LAST_WRITE"], [51, 4, 3, "enum_LAST_WRITE"], [55, 42, 2, "enum_LAST_READ"], [59, 46, 2, "enum_LAST_READ"], [59, 21, 3, "enum_LAST_WRITE"], [64, 51, 2, "enum_LAST_READ"], [64, 4, 3, "enum_LAST_WRITE"], [68, 55, 2, "enum_LAST_READ"], [72, 59, 2, "enum_LAST_READ"], [72, 21, 3, "enum_LAST_WRITE"], [77, 8, 3, "enum_LAST_WRITE"], [81, 68, 2, "enum_LAST_READ"], [85, 72, 2, "enum_LAST_READ"], [85, 21, 3, "enum_LAST_WRITE"], [92, 10, 3, "enum_LAST_WRITE"], [97, 81, 2, "enum_LAST_READ"], [101, 85, 2, "enum_LAST_READ"], [101, 21, 3, "enum_LAST_WRITE"], [106, 90, 2, "enum_LAST_READ"], [108, 12, 3, "enum_LAST_WRITE"], [113, 97, 2, "enum_LAST_READ"], [117, 101, 2, "enum_LAST_READ"], [117, 21, 3, "enum_LAST_WRITE"], [124, 113, 2, "enum_LAST_READ"], [130, 64, 2, "enum_LAST_READ"], [130, 4, 3, "enum_LAST_WRITE"], [132, 6, 3, "enum_LAST_WRITE"], [134, 77, 2, "enum_LAST_READ"], [134, 8, 3, "enum_LAST_WRITE"], [138, 38, 2, "enum_LAST_READ"], [138, 2, 3, "enum_LAST_WRITE"], [141, 124, 2, "enum_LAST_READ"], [145, 117, 2, "enum_LAST_READ"], [145, 21, 3, "enum_LAST_WRITE"], [153, 122, 3, "enum_LAST_WRITE"], [151, 264, 2, "enum_LAST_READ"], [151, 151, 3, "enum_LAST_WRITE"], [163, 292, 2, "enum_LAST_READ"], [163, 141, 2, "enum_LAST_READ"], [163, 235, 2, "enum_LAST_READ"], [163, 176, 2, "enum_LAST_READ"], [167, 296, 2, "enum_LAST_READ"], [167, 239, 2, "enum_LAST_READ"], [167, 145, 2, "enum_LAST_READ"], [167, 180, 2, "enum_LAST_READ"], [167, 21, 3, "enum_LAST_WRITE"], [172, 264, 2, "enum_LAST_READ"], [172, 151, 3, "enum_LAST_WRITE"], [176, 163, 2, "enum_LAST_READ"], [180, 167, 2, "enum_LAST_READ"], [180, 21, 3, "enum_LAST_WRITE"], [185, 106, 2, "enum_LAST_READ"], [185, 227, 2, "enum_LAST_READ"], [185, 284, 2, "enum_LAST_READ"], [185, 185, 2, "enum_LAST_READ"], [187, 260, 2, "enum_LAST_READ"], [187, 153, 2, "enum_LAST_READ"], [187, 122, 3, "enum_LAST_WRITE"], [191, 172, 2, "enum_LAST_READ"], [191, 151, 3, "enum_LAST_WRITE"], [203, 187, 2, "enum_LAST_READ"], [203, 122, 3, "enum_LAST_WRITE"], [207, 191, 2, "enum_LAST_READ"], [207, 151, 3, "enum_LAST_WRITE"], [201, 229, 2, "enum_LAST_READ"], [201, 201, 3, "enum_LAST_WRITE"], [217, 227, 2, "enum_LAST_READ"], [217, 185, 2, "enum_LAST_READ"], [219, 229, 2, "enum_LAST_READ"], [219, 201, 3, "enum_LAST_WRITE"], [215, 303, 2, "enum_LAST_READ"], [215, 246, 2, "enum_LAST_READ"], [215, 272, 3, "enum_LAST_WRITE"], [215, 215, 3, "enum_LAST_WRITE"], [227, 217, 2, "enum_LAST_READ"], [229, 219, 2, "enum_LAST_READ"], [229, 201, 3, "enum_LAST_WRITE"], [225, 252, 2, "enum_LAST_READ"], [225, 309, 2, "enum_LAST_READ"], [225, 282, 3, "enum_LAST_WRITE"], [225, 225, 3, "enum_LAST_WRITE"], [235, 235, 2, "enum_LAST_READ"], [235, 176, 2, "enum_LAST_READ"], [239, 239, 2, "enum_LAST_READ"], [239, 180, 2, "enum_LAST_READ"], [239, 21, 3, "enum_LAST_WRITE"], [246, 303, 2, "enum_LAST_READ"], [246, 246, 2, "enum_LAST_READ"], [246, 215, 3, "enum_LAST_WRITE"], [252, 252, 2, "enum_LAST_READ"], [252, 309, 2, "enum_LAST_READ"], [252, 225, 3, "enum_LAST_WRITE"], [260, 203, 2, "enum_LAST_READ"], [260, 122, 3, "enum_LAST_WRITE"], [264, 207, 2, "enum_LAST_READ"], [264, 151, 3, "enum_LAST_WRITE"], [258, 286, 2, "enum_LAST_READ"], [258, 258, 3, "enum_LAST_WRITE"], [274, 227, 2, "enum_LAST_READ"], [274, 284, 2, "enum_LAST_READ"], [274, 185, 2, "enum_LAST_READ"], [276, 286, 2, "enum_LAST_READ"], [276, 258, 3, "enum_LAST_WRITE"], [272, 303, 2, "enum_LAST_READ"], [272, 246, 2, "enum_LAST_READ"], [272, 272, 3, "enum_LAST_WRITE"], [272, 215, 3, "enum_LAST_WRITE"], [284, 274, 2, "enum_LAST_READ"], [286, 276, 2, "enum_LAST_READ"], [286, 258, 3, "enum_LAST_WRITE"], [282, 252, 2, "enum_LAST_READ"], [282, 309, 2, "enum_LAST_READ"], [282, 282, 3, "enum_LAST_WRITE"], [282, 225, 3, "enum_LAST_WRITE"], [292, 292, 2, "enum_LAST_READ"], [292, 235, 2, "enum_LAST_READ"], [292, 176, 2, "enum_LAST_READ"], [296, 239, 2, "enum_LAST_READ"], [296, 296, 2, "enum_LAST_READ"], [296, 180, 2, "enum_LAST_READ"], [296, 21, 3, "enum_LAST_WRITE"], [303, 303, 2, "enum_LAST_READ"], [303, 246, 2, "enum_LAST_READ"], [303, 272, 3, "enum_LAST_WRITE"], [309, 252, 2, "enum_LAST_READ"], [309, 309, 2, "enum_LAST_READ"], [309, 282, 3, "enum_LAST_WRITE"], [315, 292, 2, "enum_LAST_READ"], [315, 141, 2, "enum_LAST_READ"], [315, 235, 2, "enum_LAST_READ"], [315, 176, 2, "enum_LAST_READ"], [319, 296, 2, "enum_LAST_READ"], [319, 239, 2, "enum_LAST_READ"], [319, 145, 2, "enum_LAST_READ"], [319, 180, 2, "enum_LAST_READ"], [319, 21, 3, "enum_LAST_WRITE"], [326, 315, 2, "enum_LAST_READ"], [332, 260, 2, "enum_LAST_READ"], [332, 153, 2, "enum_LAST_READ"], [332, 122, 3, "enum_LAST_WRITE"], [335, 326, 2, "enum_LAST_READ"], [339, 319, 2, "enum_LAST_READ"], [339, 21, 3, "enum_LAST_WRITE"], [347, 324, 3, "enum_LAST_WRITE"], [345, 374, 2, "enum_LAST_READ"], [345, 345, 3, "enum_LAST_WRITE"], [357, 357, 2, "enum_LAST_READ"], [357, 335, 2, "enum_LAST_READ"], [361, 339, 2, "enum_LAST_READ"], [361, 361, 2, "enum_LAST_READ"], [361, 21, 3, "enum_LAST_WRITE"], [366, 374, 2, "enum_LAST_READ"], [366, 345, 3, "enum_LAST_WRITE"], [370, 347, 2, "enum_LAST_READ"], [370, 370, 2, "enum_LAST_READ"], [370, 324, 3, "enum_LAST_WRITE"], [374, 366, 2, "enum_LAST_READ"], [374, 345, 3, "enum_LAST_WRITE"], [376, 376, 2, "enum_LAST_READ"], [376, 92, 2, "enum_LAST_READ"], [376, 10, 3, "enum_LAST_WRITE"], [378, 108, 2, "enum_LAST_READ"], [378, 378, 2, "enum_LAST_READ"], [378, 12, 3, "enum_LAST_WRITE"], [382, 357, 2, "enum_LAST_READ"], [382, 335, 2, "enum_LAST_READ"], [386, 339, 2, "enum_LAST_READ"], [386, 361, 2, "enum_LAST_READ"], [386, 21, 3, "enum_LAST_WRITE"], [394, 347, 2, "enum_LAST_READ"], [394, 370, 2, "enum_LAST_READ"], [394, 324, 3, "enum_LAST_WRITE"], [392, 374, 2, "enum_LAST_READ"], [392, 515, 2, "enum_LAST_READ"], [392, 345, 3, "enum_LAST_WRITE"], [392, 392, 3, "enum_LAST_WRITE"], [404, 511, 2, "enum_LAST_READ"], [404, 394, 2, "enum_LAST_READ"], [404, 324, 3, "enum_LAST_WRITE"], [408, 374, 2, "enum_LAST_READ"], [408, 515, 2, "enum_LAST_READ"], [408, 392, 3, "enum_LAST_WRITE"], [411, 382, 2, "enum_LAST_READ"], [411, 494, 2, "enum_LAST_READ"], [415, 498, 2, "enum_LAST_READ"], [415, 386, 2, "enum_LAST_READ"], [415, 21, 3, "enum_LAST_WRITE"], [422, 408, 2, "enum_LAST_READ"], [422, 392, 3, "enum_LAST_WRITE"], [428, 227, 2, "enum_LAST_READ"], [428, 284, 2, "enum_LAST_READ"], [428, 185, 2, "enum_LAST_READ"], [428, 509, 2, "enum_LAST_READ"], [428, 106, 2, "enum_LAST_READ"], [430, 430, 2, "enum_LAST_READ"], [432, 404, 2, "enum_LAST_READ"], [432, 324, 3, "enum_LAST_WRITE"], [436, 422, 2, "enum_LAST_READ"], [436, 392, 3, "enum_LAST_WRITE"], [446, 411, 2, "enum_LAST_READ"], [450, 415, 2, "enum_LAST_READ"], [450, 21, 3, "enum_LAST_WRITE"], [455, 428, 2, "enum_LAST_READ"], [457, 432, 2, "enum_LAST_READ"], [457, 324, 3, "enum_LAST_WRITE"], [461, 436, 2, "enum_LAST_READ"], [461, 392, 3, "enum_LAST_WRITE"], [470, 446, 2, "enum_LAST_READ"], [474, 450, 2, "enum_LAST_READ"], [474, 21, 3, "enum_LAST_WRITE"], [479, 455, 2, "enum_LAST_READ"], [481, 457, 2, "enum_LAST_READ"], [481, 324, 3, "enum_LAST_WRITE"], [485, 461, 2, "enum_LAST_READ"], [485, 392, 3, "enum_LAST_WRITE"], [494, 470, 2, "enum_LAST_READ"], [498, 474, 2, "enum_LAST_READ"], [498, 21, 3, "enum_LAST_WRITE"], [507, 507, 2, "enum_LAST_READ"], [509, 479, 2, "enum_LAST_READ"], [511, 481, 2, "enum_LAST_READ"], [511, 324, 3, "enum_LAST_WRITE"], [515, 485, 2, "enum_LAST_READ"], [515, 392, 3, "enum_LAST_WRITE"], [526, 382, 2, "enum_LAST_READ"], [526, 494, 2, "enum_LAST_READ"], [530, 498, 2, "enum_LAST_READ"], [530, 386, 2, "enum_LAST_READ"], [530, 21, 3, "enum_LAST_WRITE"], [536, 14, 3, "enum_LAST_WRITE"], [544, 511, 2, "enum_LAST_READ"], [544, 394, 2, "enum_LAST_READ"], [544, 324, 3, "enum_LAST_WRITE"], [549, 138, 2, "enum_LAST_READ"], [549, 2, 3, "enum_LAST_WRITE"], [559, 526, 2, "enum_LAST_READ"], [563, 530, 2, "enum_LAST_READ"], [563, 21, 3, "enum_LAST_WRITE"], [568, 559, 2, "enum_LAST_READ"], [575, 549, 2, "enum_LAST_READ"], [575, 138, 2, "enum_LAST_READ"], [575, 2, 3, "enum_LAST_WRITE"], [580, 511, 2, "enum_LAST_READ"], [580, 394, 2, "enum_LAST_READ"], [580, 544, 2, "enum_LAST_READ"], [580, 324, 3, "enum_LAST_WRITE"], [585, 568, 2, "enum_LAST_READ"], [592, 575, 2, "enum_LAST_READ"], [592, 2, 3, "enum_LAST_WRITE"], [597, 580, 2, "enum_LAST_READ"], [597, 324, 3, "enum_LAST_WRITE"], [603, 592, 2, "enum_LAST_READ"], [603, 2, 3, "enum_LAST_WRITE"], [606, 585, 2, "enum_LAST_READ"], [613, 603, 2, "enum_LAST_READ"], [613, 2, 3, "enum_LAST_WRITE"], [618, 597, 2, "enum_LAST_READ"], [618, 324, 3, "enum_LAST_WRITE"], [623, 606, 2, "enum_LAST_READ"], [630, 613, 2, "enum_LAST_READ"], [630, 2, 3, "enum_LAST_WRITE"], [635, 618, 2, "enum_LAST_READ"], [635, 324, 3, "enum_LAST_WRITE"], [640, 623, 2, "enum_LAST_READ"], [647, 630, 2, "enum_LAST_READ"], [647, 2, 3, "enum_LAST_WRITE"], [652, 332, 2, "enum_LAST_READ"], [652, 122, 3, "enum_LAST_WRITE"], [657, 640, 2, "enum_LAST_READ"], [664, 647, 2, "enum_LAST_READ"], [664, 2, 3, "enum_LAST_WRITE"], [669, 652, 2, "enum_LAST_READ"], [669, 122, 3, "enum_LAST_WRITE"], [678, 657, 2, "enum_LAST_READ"], [682, 563, 2, "enum_LAST_READ"], [682, 21, 3, "enum_LAST_WRITE"], [21, 24, 4, "enum_COMPUTED_FROM"], [122, 130, 4, "enum_COMPUTED_FROM"], [122, 132, 4, "enum_COMPUTED_FROM"], [122, 134, 4, "enum_COMPUTED_FROM"], [122, 138, 4, "enum_COMPUTED_FROM"], [122, 124, 4, "enum_COMPUTED_FROM"], [324, 332, 4, "enum_COMPUTED_FROM"], [324, 326, 4, "enum_COMPUTED_FROM"], [215, 217, 4, "enum_COMPUTED_FROM"], [215, 219, 4, "enum_COMPUTED_FROM"], [225, 227, 4, "enum_COMPUTED_FROM"], [225, 229, 4, "enum_COMPUTED_FROM"], [272, 274, 4, "enum_COMPUTED_FROM"], [272, 276, 4, "enum_COMPUTED_FROM"], [282, 284, 4, "enum_COMPUTED_FROM"], [282, 286, 4, "enum_COMPUTED_FROM"]], "error_location": 64, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/ryneches/pique.git", "old_path": "pique/runtime.py", "hash": "18e98cd6fcbf957012114313f108b7262fc5199d", "code": "def detect( name: str, ipfile: str, bgfile: str, mapfile: str, alpha: float, l_thresh: float, pickle_file: Optional[str]):\n    \"\"\"\n    This function drives the peak detection workflow.\n    \"\"\"\n    # set logfile\n    logfile: str = name + '.log'\n    \n    pique.msg( logfile, 'starting run for project : ' + name )\n    \n    # log inputs\n    pique.msg( logfile, '  -> IP file  : ' + ipfile   )\n    pique.msg( logfile, '  -> BG file  : ' + ipfile   )\n    pique.msg( logfile, '  -> map file : ' + mapfile  )\n    pique.msg( logfile, '  -> alpha    : ' + str(alpha)    )\n    pique.msg( logfile, '  -> l_thresh : ' + str(l_thresh) )\n    \n    # load the data\n    pique.msg( logfile, 'loading data...' )\n    D: pique.data.PiqueData = pique.data.PiqueData( ipfile, bgfile, mapfile, name=name )\n    \n    pique.msg( logfile, '  found contigs :' )\n    for contig in D.data.keys() :\n        pique.msg( logfile, '    ' + contig )\n        pique.msg( logfile, '      length : ' + str(D.data[contig]['length']) )\n        for r in D.data[contig]['regions'] :\n            start: str = str( r['start'] )\n            stop: str  = str( r['stop']  )\n            pique.msg( logfile, '      analysis region : ' + start + ':' + stop )\n        for m in D.data[contig]['masks'] :\n            start: str = str( m['start'] )\n            stop: str  = str( m['stop']  )\n            pique.msg( logfile, '      masking region  : ' + start + ':' + stop )\n    \n    # start analysis workbench\n    pique.msg( logfile, 'creating analysis workbench...' )\n    PA: pique.analysis.PiqueAnalysis = pique.analysis.PiqueAnalysis( D )\n    \n    # run filters\n    pique.msg( logfile, 'running filters...' )\n    \n    for ar_name in PA.data.keys() :\n        pique.msg( logfile, '  :: applying filters to analysis region ' + ar_name )\n        PA.apply_filter( ar_name, alpha, l_thresh )\n    \n    # find peaks\n    pique.msg( logfile, 'finding peaks...' )\n    for ar_name in PA.data.keys() :\n        PA.find_peaks(ar_name)\n        pique.msg( logfile, '  peaks ' + ar_name + ' : ' + str(len(PA.data[ar_name]['peaks'])) )\n        pique.msg( logfile, '     noise threshold  : ' + str(PA.data[ar_name]['N_thresh']) )\n        pique.msg( logfile, '     filter threshold : ' + str(PA.data[ar_name]['n_thresh']) )\n        pique.msg( logfile, '     normalizations   : ' + ', '.join( map(str, PA.data[ar_name]['norms']) ) )\n    \n    # if a pickle file was requested, write it\n    pique.msg( logfile, 'pickling analysis workbench...' )\n    if pickle_file :\n        cPickle.dump( PA, open( name + '.pickle', 'w' ) )\n    \n    # write output files\n    pique.msg( logfile, 'writing output files...' )\n    pique.fileIO.writepeaksGFF(  name + '.gff',      PA.data )\n    pique.fileIO.writebookmarks( name + '.bookmark', PA.data, name=name )\n    pique.fileIO.writeQP(        name + '.qp',       PA.data )\n    pique.fileIO.writepeakTSV(   name + '.peak.tsv', PA.data )\n    pique.fileIO.writetrack(     name + '.IP.track', D.data  )\n    pique.fileIO.writetrack(     name + '.BG.track', D.data, track='BG' )\n\n    # done!\n    pique.msg( logfile, 'run completed.' )\n", "rewrite": "ReplaceText(target='bgfile' @(75,45)->(75,51))", "error_line": 11, "has_bug": true, "code_full": "import os\nfrom typing import IO, Any, Dict, Optional\n\n\nclass pique:\n    class data:\n        class PiqueData:\n            data: Dict\n\n            def __init__(self, ipfile: str, bgfile: str, mapfile: str, name: str):\n                pass\n\n    class analysis:\n        class PiqueAnalysis:\n            data: Dict\n\n            def __init__(self, D: \"pique.data.PiqueData\"):\n                pass\n\n            def apply_filter(self, ar_name: str, alpha: float, l_thresh: float):\n                pass\n\n            def find_peaks(self, ar_name: str):\n                pass\n\n    class fileIO:\n        @staticmethod\n        def writepeaksGFF(name: str, data: Dict):\n            pass\n\n        @staticmethod\n        def writebookmarks(filename: str, data: Dict, name: str):\n            pass\n\n        @staticmethod\n        def writeQP(name: str, data: Dict):\n            pass\n\n        @staticmethod\n        def writepeakTSV(name: str, data: Dict):\n            pass\n\n        @staticmethod\n        def writetrack(name: str, data: Dict, track: str=\"\"):\n            pass\n\n    @staticmethod\n    def msg(logfile: str, message: str):\n        pass\n\n\nclass cPickle:\n    @staticmethod\n    def dump(data: Any, file: IO):\n        pass\n\n\ndef detect( name: str, ipfile: str, bgfile: str, mapfile: str, alpha: float, l_thresh: float, pickle_file: Optional[str]):\n    \"\"\"\n    This function drives the peak detection workflow.\n    \"\"\"\n    # set logfile\n    logfile: str = name + '.log'\n    \n    pique.msg( logfile, 'starting run for project : ' + name )\n    \n    # log inputs\n    pique.msg( logfile, '  -> IP file  : ' + ipfile   )\n    pique.msg( logfile, '  -> BG file  : ' + ipfile   )\n    pique.msg( logfile, '  -> map file : ' + mapfile  )\n    pique.msg( logfile, '  -> alpha    : ' + str(alpha)    )\n    pique.msg( logfile, '  -> l_thresh : ' + str(l_thresh) )\n    \n    # load the data\n    pique.msg( logfile, 'loading data...' )\n    D: pique.data.PiqueData = pique.data.PiqueData( ipfile, bgfile, mapfile, name=name )\n    \n    pique.msg( logfile, '  found contigs :' )\n    for contig in D.data.keys() :\n        pique.msg( logfile, '    ' + contig )\n        pique.msg( logfile, '      length : ' + str(D.data[contig]['length']) )\n        for r in D.data[contig]['regions'] :\n            start: str = str( r['start'] )\n            stop: str  = str( r['stop']  )\n            pique.msg( logfile, '      analysis region : ' + start + ':' + stop )\n        for m in D.data[contig]['masks'] :\n            start: str = str( m['start'] )\n            stop: str  = str( m['stop']  )\n            pique.msg( logfile, '      masking region  : ' + start + ':' + stop )\n    \n    # start analysis workbench\n    pique.msg( logfile, 'creating analysis workbench...' )\n    PA: pique.analysis.PiqueAnalysis = pique.analysis.PiqueAnalysis( D )\n    \n    # run filters\n    pique.msg( logfile, 'running filters...' )\n    \n    for ar_name in PA.data.keys() :\n        pique.msg( logfile, '  :: applying filters to analysis region ' + ar_name )\n        PA.apply_filter( ar_name, alpha, l_thresh )\n    \n    # find peaks\n    pique.msg( logfile, 'finding peaks...' )\n    for ar_name in PA.data.keys() :\n        PA.find_peaks(ar_name)\n        pique.msg( logfile, '  peaks ' + ar_name + ' : ' + str(len(PA.data[ar_name]['peaks'])) )\n        pique.msg( logfile, '     noise threshold  : ' + str(PA.data[ar_name]['N_thresh']) )\n        pique.msg( logfile, '     filter threshold : ' + str(PA.data[ar_name]['n_thresh']) )\n        pique.msg( logfile, '     normalizations   : ' + ', '.join( map(str, PA.data[ar_name]['norms']) ) )\n    \n    # if a pickle file was requested, write it\n    pique.msg( logfile, 'pickling analysis workbench...' )\n    if pickle_file :\n        cPickle.dump( PA, open( name + '.pickle', 'w' ) )\n    \n    # write output files\n    pique.msg( logfile, 'writing output files...' )\n    pique.fileIO.writepeaksGFF(  name + '.gff',      PA.data )\n    pique.fileIO.writebookmarks( name + '.bookmark', PA.data, name=name )\n    pique.fileIO.writeQP(        name + '.qp',       PA.data )\n    pique.fileIO.writepeakTSV(   name + '.peak.tsv', PA.data )\n    pique.fileIO.writetrack(     name + '.IP.track', D.data  )\n    pique.fileIO.writetrack(     name + '.BG.track', D.data, track='BG' )\n\n    # done!\n    pique.msg( logfile, 'run completed.' )\n", "error_location_char": [435, 441], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def get_relations(", "self", ",", "facade", ")", ":", "#NEWLINE#", "#INDENT#", "relations", "=", "{", "}", "#NEWLINE#", "for", "(", "field_name", ",", "info", ")", "in", "facade", ".", "get_relations", "(", ")", ".", "items", "(", ")", ":", "#NEWLINE#", "#INDENT#", "name", "=", "info", "[", "'name'", "]", "#NEWLINE#", "if", "info", "[", "'multiple'", "]", ":", "#NEWLINE#", "#INDENT#", "method_name", "=", "'{}_names'", ".", "format", "(", "name", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "method_name", "=", "'{}_name'", ".", "format", "(", "name", ")", "#NEWLINE#", "#UNINDENT#", "relations", "[", "name", "]", "=", "getattr", "(", "self", ",", "method_name", ",", "None", ")", "#NEWLINE#", "#UNINDENT#", "return", "relations"], "edges": [[1, 3, 7, "enum_FIELD"], [8, 11, 7, "enum_FIELD"], [20, 17, 7, "enum_FIELD"], [20, 28, 7, "enum_FIELD"], [87, 88, 7, "enum_FIELD"], [28, 26, 7, "enum_FIELD"], [32, 36, 7, "enum_FIELD"], [45, 42, 7, "enum_FIELD"], [71, 80, 7, "enum_FIELD"], [26, 24, 7, "enum_FIELD"], [36, 35, 7, "enum_FIELD"], [36, 37, 7, "enum_FIELD"], [42, 41, 7, "enum_FIELD"], [42, 43, 7, "enum_FIELD"], [47, 53, 7, "enum_FIELD"], [61, 67, 7, "enum_FIELD"], [73, 72, 7, "enum_FIELD"], [73, 74, 7, "enum_FIELD"], [80, 77, 7, "enum_FIELD"], [24, 22, 7, "enum_FIELD"], [53, 51, 7, "enum_FIELD"], [67, 65, 7, "enum_FIELD"], [22, 21, 7, "enum_FIELD"], [51, 50, 7, "enum_FIELD"], [65, 64, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [21, 4, 10, "enum_LAST_LEXICAL_USE"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [35, 18, 10, "enum_LAST_LEXICAL_USE"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 40, 9, "enum_NEXT_SYNTAX"], [41, 35, 10, "enum_LAST_LEXICAL_USE"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [54, 33, 10, "enum_LAST_LEXICAL_USE"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 61, 9, "enum_NEXT_SYNTAX"], [62, 48, 10, "enum_LAST_LEXICAL_USE"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [68, 54, 10, "enum_LAST_LEXICAL_USE"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 71, 9, "enum_NEXT_SYNTAX"], [72, 9, 10, "enum_LAST_LEXICAL_USE"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [74, 68, 10, "enum_LAST_LEXICAL_USE"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [79, 2, 10, "enum_LAST_LEXICAL_USE"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [81, 62, 10, "enum_LAST_LEXICAL_USE"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 87, 9, "enum_NEXT_SYNTAX"], [88, 72, 10, "enum_LAST_LEXICAL_USE"], [87, 88, 9, "enum_NEXT_SYNTAX"], [3, 8, 1, "enum_CFG_NEXT"], [8, 28, 1, "enum_CFG_NEXT"], [28, 17, 1, "enum_CFG_NEXT"], [17, 87, 1, "enum_CFG_NEXT"], [17, 32, 1, "enum_CFG_NEXT"], [32, 42, 1, "enum_CFG_NEXT"], [42, 47, 1, "enum_CFG_NEXT"], [42, 61, 1, "enum_CFG_NEXT"], [47, 71, 1, "enum_CFG_NEXT"], [61, 71, 1, "enum_CFG_NEXT"], [71, 17, 1, "enum_CFG_NEXT"], [21, 4, 3, "enum_LAST_WRITE"], [16, 16, 3, "enum_LAST_WRITE"], [18, 41, 2, "enum_LAST_READ"], [18, 18, 3, "enum_LAST_WRITE"], [35, 41, 2, "enum_LAST_READ"], [35, 18, 3, "enum_LAST_WRITE"], [33, 74, 2, "enum_LAST_READ"], [33, 33, 3, "enum_LAST_WRITE"], [41, 35, 2, "enum_LAST_READ"], [41, 18, 3, "enum_LAST_WRITE"], [54, 74, 2, "enum_LAST_READ"], [54, 33, 3, "enum_LAST_WRITE"], [48, 81, 2, "enum_LAST_READ"], [48, 48, 3, "enum_LAST_WRITE"], [48, 62, 3, "enum_LAST_WRITE"], [68, 74, 2, "enum_LAST_READ"], [68, 33, 3, "enum_LAST_WRITE"], [62, 81, 2, "enum_LAST_READ"], [62, 48, 3, "enum_LAST_WRITE"], [62, 62, 3, "enum_LAST_WRITE"], [77, 77, 2, "enum_LAST_READ"], [79, 79, 2, "enum_LAST_READ"], [79, 2, 3, "enum_LAST_WRITE"], [81, 81, 2, "enum_LAST_READ"], [81, 48, 3, "enum_LAST_WRITE"], [81, 62, 3, "enum_LAST_WRITE"], [72, 72, 2, "enum_LAST_READ"], [72, 9, 3, "enum_LAST_WRITE"], [74, 54, 2, "enum_LAST_READ"], [74, 68, 2, "enum_LAST_READ"], [74, 33, 3, "enum_LAST_WRITE"], [88, 72, 2, "enum_LAST_READ"], [88, 9, 3, "enum_LAST_WRITE"], [33, 35, 4, "enum_COMPUTED_FROM"], [73, 77, 4, "enum_COMPUTED_FROM"], [73, 79, 4, "enum_COMPUTED_FROM"], [73, 81, 4, "enum_COMPUTED_FROM"], [48, 54, 4, "enum_COMPUTED_FROM"], [62, 68, 4, "enum_COMPUTED_FROM"]], "error_location": 74, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/dccs-tech/mcmi.git", "old_path": "app/systems/command/mixins/base.py", "hash": "64aa5041a581b2f11782f09dedae15a0d188e5cd", "code": "def get_relations(self, facade: Facade) -> Dict[str, Any]:\n    relations: Dict[str, Any] = {}\n    for field_name, info in facade.get_relations().items():\n        name: str = info['name']\n\n        if info['multiple']:\n            method_name = \"{}_names\".format(name)\n        else:\n            method_name = \"{}_name\".format(name)\n\n        relations[name] = getattr(self, method_name, None)\n    return relations\n", "rewrite": "ReplaceText(target='field_name' @(179,22)->(179,26))", "error_line": 10, "has_bug": true, "code_full": "from typing import Any, Dict, Union\n\n\nclass Facade:\n    def get_relations(self) -> Dict[str, Dict[str, Any]]:\n        return {}\n\n\nclass DataMixin:\n    def get_relations(self, facade: Facade) -> Dict[str, Any]:\n        relations: Dict[str, Any] = {}\n        for field_name, info in facade.get_relations().items():\n            name: str = info['name']\n\n            if info['multiple']:\n                method_name = \"{}_names\".format(name)\n            else:\n                method_name = \"{}_name\".format(name)\n\n            relations[name] = getattr(self, method_name, None)\n        return relations\n", "error_location_char": [349, 353], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def onNext(", "self", ",", "value", ")", ":", "#NEWLINE#", "#INDENT#", "key", "=", "None", "#NEWLINE#", "try", ":", "#NEWLINE#", "#INDENT#", "key", "=", "self", ".", "parent", ".", "keySelector", "(", "value", ")", "#NEWLINE#", "#UNINDENT#", "except", "Exception", "as", "e", ":", "#NEWLINE#", "#INDENT#", "self", ".", "onError", "(", "e", ")", "#NEWLINE#", "return", "#NEWLINE#", "#UNINDENT#", "fireNewMapEntry", "=", "False", "#NEWLINE#", "writer", "=", "None", "#NEWLINE#", "try", ":", "#NEWLINE#", "#INDENT#", "if", "(", "key", "==", "None", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "self", ".", "null", "==", "None", ")", ":", "#NEWLINE#", "#INDENT#", "self", ".", "null", "=", "Subject", "(", ")", "#NEWLINE#", "fireNewMapEntry", "=", "True", "#NEWLINE#", "#UNINDENT#", "writer", "=", "self", ".", "null", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "if", "(", "not", "(", "key", "in", "self", ".", "map", ")", ")", ":", "#NEWLINE#", "#INDENT#", "writer", "=", "Subject", "(", ")", "#NEWLINE#", "self", ".", "map", "[", "key", "]", "=", "value", "#NEWLINE#", "fireNewMapEntry", "=", "True", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "#UNINDENT#", "except", "Exception", "as", "e", ":", "#NEWLINE#", "#INDENT#", "self", ".", "onError", "(", "e", ")", "#NEWLINE#", "return", "#NEWLINE#", "#UNINDENT#", "if", "fireNewMapEntry", ":", "#NEWLINE#", "#INDENT#", "group", "=", "GroupObservable", "(", "key", ",", "writer", ",", "self", ".", "parent", ".", "refCountDisposable", ")", "#NEWLINE#", "self", ".", "observer", ".", "onNext", "(", "group", ")", "#NEWLINE#", "#UNINDENT#", "element", "=", "None", "#NEWLINE#", "try", ":", "#NEWLINE#", "#INDENT#", "element", "=", "self", ".", "parent", ".", "elementSelector", "(", "value", ")", "#NEWLINE#", "#UNINDENT#", "except", "Exception", "as", "e", ":", "#NEWLINE#", "#INDENT#", "self", ".", "onError", "(", "e", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "writer", ".", "onNext", "(", "element", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [8, 11, 7, "enum_FIELD"], [45, 48, 7, "enum_FIELD"], [49, 52, 7, "enum_FIELD"], [155, 156, 7, "enum_FIELD"], [184, 187, 7, "enum_FIELD"], [16, 24, 7, "enum_FIELD"], [31, 30, 7, "enum_FIELD"], [31, 32, 7, "enum_FIELD"], [64, 61, 7, "enum_FIELD"], [140, 139, 7, "enum_FIELD"], [140, 141, 7, "enum_FIELD"], [159, 165, 7, "enum_FIELD"], [174, 180, 7, "enum_FIELD"], [192, 200, 7, "enum_FIELD"], [207, 206, 7, "enum_FIELD"], [207, 208, 7, "enum_FIELD"], [223, 227, 7, "enum_FIELD"], [24, 22, 7, "enum_FIELD"], [35, 39, 7, "enum_FIELD"], [61, 60, 7, "enum_FIELD"], [67, 72, 7, "enum_FIELD"], [90, 94, 7, "enum_FIELD"], [102, 104, 7, "enum_FIELD"], [144, 148, 7, "enum_FIELD"], [165, 162, 7, "enum_FIELD"], [180, 178, 7, "enum_FIELD"], [200, 198, 7, "enum_FIELD"], [211, 215, 7, "enum_FIELD"], [227, 225, 7, "enum_FIELD"], [22, 20, 7, "enum_FIELD"], [39, 37, 7, "enum_FIELD"], [72, 70, 7, "enum_FIELD"], [77, 83, 7, "enum_FIELD"], [85, 88, 7, "enum_FIELD"], [94, 93, 7, "enum_FIELD"], [104, 107, 7, "enum_FIELD"], [115, 119, 7, "enum_FIELD"], [121, 129, 7, "enum_FIELD"], [130, 133, 7, "enum_FIELD"], [148, 146, 7, "enum_FIELD"], [171, 169, 7, "enum_FIELD"], [178, 176, 7, "enum_FIELD"], [198, 196, 7, "enum_FIELD"], [215, 213, 7, "enum_FIELD"], [225, 224, 7, "enum_FIELD"], [20, 19, 7, "enum_FIELD"], [37, 36, 7, "enum_FIELD"], [70, 69, 7, "enum_FIELD"], [79, 78, 7, "enum_FIELD"], [83, 82, 7, "enum_FIELD"], [107, 106, 7, "enum_FIELD"], [119, 118, 7, "enum_FIELD"], [125, 123, 7, "enum_FIELD"], [125, 126, 7, "enum_FIELD"], [146, 145, 7, "enum_FIELD"], [169, 168, 7, "enum_FIELD"], [176, 175, 7, "enum_FIELD"], [196, 195, 7, "enum_FIELD"], [213, 212, 7, "enum_FIELD"], [109, 108, 7, "enum_FIELD"], [123, 122, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 16, 9, "enum_NEXT_SYNTAX"], [17, 9, 10, "enum_LAST_LEXICAL_USE"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [19, 2, 10, "enum_LAST_LEXICAL_USE"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [25, 4, 10, "enum_LAST_LEXICAL_USE"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 35, 9, "enum_NEXT_SYNTAX"], [36, 19, 10, "enum_LAST_LEXICAL_USE"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [40, 32, 10, "enum_LAST_LEXICAL_USE"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 43, 9, "enum_NEXT_SYNTAX"], [43, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [60, 17, 10, "enum_LAST_LEXICAL_USE"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [69, 36, 10, "enum_LAST_LEXICAL_USE"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 77, 9, "enum_NEXT_SYNTAX"], [78, 69, 10, "enum_LAST_LEXICAL_USE"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [86, 46, 10, "enum_LAST_LEXICAL_USE"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 90, 9, "enum_NEXT_SYNTAX"], [91, 50, 10, "enum_LAST_LEXICAL_USE"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [93, 78, 10, "enum_LAST_LEXICAL_USE"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [106, 60, 10, "enum_LAST_LEXICAL_USE"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [108, 93, 10, "enum_LAST_LEXICAL_USE"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 115, 9, "enum_NEXT_SYNTAX"], [116, 91, 10, "enum_LAST_LEXICAL_USE"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [118, 82, 10, "enum_LAST_LEXICAL_USE"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [122, 108, 10, "enum_LAST_LEXICAL_USE"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [126, 106, 10, "enum_LAST_LEXICAL_USE"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [129, 25, 10, "enum_LAST_LEXICAL_USE"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [131, 86, 10, "enum_LAST_LEXICAL_USE"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 138, 9, "enum_NEXT_SYNTAX"], [139, 30, 10, "enum_LAST_LEXICAL_USE"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [141, 40, 10, "enum_LAST_LEXICAL_USE"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 144, 9, "enum_NEXT_SYNTAX"], [145, 122, 10, "enum_LAST_LEXICAL_USE"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [149, 141, 10, "enum_LAST_LEXICAL_USE"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 152, 9, "enum_NEXT_SYNTAX"], [152, 155, 9, "enum_NEXT_SYNTAX"], [156, 131, 10, "enum_LAST_LEXICAL_USE"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [164, 126, 10, "enum_LAST_LEXICAL_USE"], [163, 164, 9, "enum_NEXT_SYNTAX"], [164, 165, 9, "enum_NEXT_SYNTAX"], [166, 116, 10, "enum_LAST_LEXICAL_USE"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [168, 145, 10, "enum_LAST_LEXICAL_USE"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [175, 168, 10, "enum_LAST_LEXICAL_USE"], [174, 175, 9, "enum_NEXT_SYNTAX"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 180, 9, "enum_NEXT_SYNTAX"], [181, 160, 10, "enum_LAST_LEXICAL_USE"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 184, 9, "enum_NEXT_SYNTAX"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [187, 189, 9, "enum_NEXT_SYNTAX"], [189, 190, 9, "enum_NEXT_SYNTAX"], [190, 192, 9, "enum_NEXT_SYNTAX"], [193, 185, 10, "enum_LAST_LEXICAL_USE"], [192, 193, 9, "enum_NEXT_SYNTAX"], [193, 194, 9, "enum_NEXT_SYNTAX"], [195, 175, 10, "enum_LAST_LEXICAL_USE"], [194, 195, 9, "enum_NEXT_SYNTAX"], [195, 196, 9, "enum_NEXT_SYNTAX"], [196, 197, 9, "enum_NEXT_SYNTAX"], [197, 198, 9, "enum_NEXT_SYNTAX"], [198, 199, 9, "enum_NEXT_SYNTAX"], [199, 200, 9, "enum_NEXT_SYNTAX"], [201, 129, 10, "enum_LAST_LEXICAL_USE"], [200, 201, 9, "enum_NEXT_SYNTAX"], [201, 202, 9, "enum_NEXT_SYNTAX"], [202, 205, 9, "enum_NEXT_SYNTAX"], [206, 139, 10, "enum_LAST_LEXICAL_USE"], [205, 206, 9, "enum_NEXT_SYNTAX"], [206, 207, 9, "enum_NEXT_SYNTAX"], [208, 149, 10, "enum_LAST_LEXICAL_USE"], [207, 208, 9, "enum_NEXT_SYNTAX"], [208, 209, 9, "enum_NEXT_SYNTAX"], [209, 211, 9, "enum_NEXT_SYNTAX"], [212, 195, 10, "enum_LAST_LEXICAL_USE"], [211, 212, 9, "enum_NEXT_SYNTAX"], [212, 213, 9, "enum_NEXT_SYNTAX"], [213, 214, 9, "enum_NEXT_SYNTAX"], [214, 215, 9, "enum_NEXT_SYNTAX"], [216, 208, 10, "enum_LAST_LEXICAL_USE"], [215, 216, 9, "enum_NEXT_SYNTAX"], [216, 217, 9, "enum_NEXT_SYNTAX"], [217, 220, 9, "enum_NEXT_SYNTAX"], [220, 221, 9, "enum_NEXT_SYNTAX"], [221, 223, 9, "enum_NEXT_SYNTAX"], [224, 166, 10, "enum_LAST_LEXICAL_USE"], [223, 224, 9, "enum_NEXT_SYNTAX"], [224, 225, 9, "enum_NEXT_SYNTAX"], [225, 226, 9, "enum_NEXT_SYNTAX"], [226, 227, 9, "enum_NEXT_SYNTAX"], [228, 193, 10, "enum_LAST_LEXICAL_USE"], [227, 228, 9, "enum_NEXT_SYNTAX"], [228, 229, 9, "enum_NEXT_SYNTAX"], [3, 8, 1, "enum_CFG_NEXT"], [8, 16, 1, "enum_CFG_NEXT"], [16, 30, 1, "enum_CFG_NEXT"], [16, 45, 1, "enum_CFG_NEXT"], [30, 32, 1, "enum_CFG_NEXT"], [32, 35, 1, "enum_CFG_NEXT"], [35, 43, 1, "enum_CFG_NEXT"], [45, 49, 1, "enum_CFG_NEXT"], [49, 61, 1, "enum_CFG_NEXT"], [61, 72, 1, "enum_CFG_NEXT"], [61, 104, 1, "enum_CFG_NEXT"], [61, 139, 1, "enum_CFG_NEXT"], [72, 139, 1, "enum_CFG_NEXT"], [72, 90, 1, "enum_CFG_NEXT"], [72, 77, 1, "enum_CFG_NEXT"], [77, 85, 1, "enum_CFG_NEXT"], [85, 139, 1, "enum_CFG_NEXT"], [85, 90, 1, "enum_CFG_NEXT"], [90, 139, 1, "enum_CFG_NEXT"], [90, 156, 1, "enum_CFG_NEXT"], [104, 139, 1, "enum_CFG_NEXT"], [104, 115, 1, "enum_CFG_NEXT"], [104, 156, 1, "enum_CFG_NEXT"], [115, 121, 1, "enum_CFG_NEXT"], [121, 130, 1, "enum_CFG_NEXT"], [130, 139, 1, "enum_CFG_NEXT"], [130, 156, 1, "enum_CFG_NEXT"], [139, 141, 1, "enum_CFG_NEXT"], [141, 144, 1, "enum_CFG_NEXT"], [144, 152, 1, "enum_CFG_NEXT"], [156, 159, 1, "enum_CFG_NEXT"], [156, 184, 1, "enum_CFG_NEXT"], [159, 174, 1, "enum_CFG_NEXT"], [174, 184, 1, "enum_CFG_NEXT"], [184, 192, 1, "enum_CFG_NEXT"], [192, 206, 1, "enum_CFG_NEXT"], [192, 223, 1, "enum_CFG_NEXT"], [206, 208, 1, "enum_CFG_NEXT"], [208, 211, 1, "enum_CFG_NEXT"], [19, 2, 3, "enum_LAST_WRITE"], [25, 4, 3, "enum_LAST_WRITE"], [17, 9, 3, "enum_LAST_WRITE"], [36, 19, 2, "enum_LAST_READ"], [36, 2, 3, "enum_LAST_WRITE"], [40, 32, 3, "enum_LAST_WRITE"], [60, 17, 3, "enum_LAST_WRITE"], [69, 19, 2, "enum_LAST_READ"], [69, 2, 3, "enum_LAST_WRITE"], [78, 69, 2, "enum_LAST_READ"], [78, 2, 3, "enum_LAST_WRITE"], [86, 46, 3, "enum_LAST_WRITE"], [93, 78, 2, "enum_LAST_READ"], [93, 69, 2, "enum_LAST_READ"], [93, 2, 3, "enum_LAST_WRITE"], [91, 50, 3, "enum_LAST_WRITE"], [106, 60, 2, "enum_LAST_READ"], [106, 17, 3, "enum_LAST_WRITE"], [108, 19, 2, "enum_LAST_READ"], [108, 2, 3, "enum_LAST_WRITE"], [116, 50, 3, "enum_LAST_WRITE"], [129, 25, 2, "enum_LAST_READ"], [129, 4, 3, "enum_LAST_WRITE"], [122, 108, 2, "enum_LAST_READ"], [122, 2, 3, "enum_LAST_WRITE"], [126, 106, 2, "enum_LAST_READ"], [126, 17, 3, "enum_LAST_WRITE"], [131, 46, 3, "enum_LAST_WRITE"], [145, 69, 2, "enum_LAST_READ"], [145, 19, 2, "enum_LAST_READ"], [145, 108, 2, "enum_LAST_READ"], [145, 78, 2, "enum_LAST_READ"], [145, 93, 2, "enum_LAST_READ"], [145, 122, 2, "enum_LAST_READ"], [145, 2, 3, "enum_LAST_WRITE"], [149, 141, 3, "enum_LAST_WRITE"], [156, 46, 3, "enum_LAST_WRITE"], [156, 86, 3, "enum_LAST_WRITE"], [156, 131, 3, "enum_LAST_WRITE"], [164, 126, 2, "enum_LAST_READ"], [164, 60, 2, "enum_LAST_READ"], [164, 106, 2, "enum_LAST_READ"], [164, 17, 3, "enum_LAST_WRITE"], [166, 116, 3, "enum_LAST_WRITE"], [166, 50, 3, "enum_LAST_WRITE"], [166, 91, 3, "enum_LAST_WRITE"], [168, 93, 2, "enum_LAST_READ"], [168, 108, 2, "enum_LAST_READ"], [168, 122, 2, "enum_LAST_READ"], [168, 2, 3, "enum_LAST_WRITE"], [175, 168, 2, "enum_LAST_READ"], [175, 2, 3, "enum_LAST_WRITE"], [181, 160, 3, "enum_LAST_WRITE"], [195, 93, 2, "enum_LAST_READ"], [195, 108, 2, "enum_LAST_READ"], [195, 122, 2, "enum_LAST_READ"], [195, 175, 2, "enum_LAST_READ"], [195, 2, 3, "enum_LAST_WRITE"], [201, 129, 2, "enum_LAST_READ"], [201, 25, 2, "enum_LAST_READ"], [201, 4, 3, "enum_LAST_WRITE"], [193, 185, 3, "enum_LAST_WRITE"], [212, 195, 2, "enum_LAST_READ"], [212, 2, 3, "enum_LAST_WRITE"], [216, 208, 3, "enum_LAST_WRITE"], [224, 166, 2, "enum_LAST_READ"], [224, 116, 3, "enum_LAST_WRITE"], [224, 50, 3, "enum_LAST_WRITE"], [224, 91, 3, "enum_LAST_WRITE"], [228, 193, 3, "enum_LAST_WRITE"], [17, 25, 4, "enum_COMPUTED_FROM"], [17, 19, 4, "enum_COMPUTED_FROM"], [160, 162, 4, "enum_COMPUTED_FROM"], [160, 164, 4, "enum_COMPUTED_FROM"], [160, 166, 4, "enum_COMPUTED_FROM"], [160, 168, 4, "enum_COMPUTED_FROM"], [193, 201, 4, "enum_COMPUTED_FROM"], [193, 195, 4, "enum_COMPUTED_FROM"], [91, 93, 4, "enum_COMPUTED_FROM"], [79, 82, 4, "enum_COMPUTED_FROM"], [116, 118, 4, "enum_COMPUTED_FROM"], [125, 129, 4, "enum_COMPUTED_FROM"]], "error_location": 129, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/akuendig/RxPython.git", "old_path": "linq/groupBy.py", "hash": "f1a5d48b5c22cf5d39e592299a3760be72ba79f1", "code": "def onNext(self, value: Any):\n    key: Optional[Any] = None\n\n    try:\n        key = self.parent.keySelector(value)\n    except Exception as e:\n        self.onError(e)\n        return\n\n    fireNewMapEntry: bool = False\n    writer: Optional[Subject] = None\n\n    try:\n        if key == None:\n            if self.null == None:\n                self.null = Subject()\n                fireNewMapEntry = True\n\n            writer = self.null\n        else:\n            if not key in self.map:\n                writer = Subject()\n                self.map[key] = value\n                fireNewMapEntry = True\n    except Exception as e:\n        self.onError(e)\n        return\n\n    if fireNewMapEntry:\n        group = GroupObservable(key, writer, self.parent.refCountDisposable)\n        self.observer.onNext(group)\n\n    element = None\n\n    try:\n        element = self.parent.elementSelector(value)\n    except Exception as e:\n        self.onError(e)\n    else:\n        writer.onNext(element)\n", "rewrite": "ReplaceText(target='writer' @(53,28)->(53,33))", "error_line": 22, "has_bug": true, "code_full": "from typing import Any, Dict, Optional\n\n\nclass Subject:\n    def onNext(self, value: Any):\n        pass\n\n\nclass GroupObservable:\n    def __init__(self, key: Any, writer: Optional[Subject], refCountDisposable: Any):\n        pass\n\n\nclass Observer:\n    def onNext(self, value: Any):\n        pass\n\n\nclass Parent:\n    def keySelector(self, value: Any) -> Any:\n        pass\n\n    def elementSelector(self, value: Any) -> Any:\n        pass\n\n    def refCountDisposable(self):\n        pass\n\n\nclass Sink:\n    parent: Parent\n    map: Dict[Any, Subject]\n    null: Optional[Subject]\n    observer: Observer\n\n    def onError(self, e: Exception):\n        pass\n\n    def onNext(self, value: Any):\n        key: Optional[Any] = None\n\n        try:\n            key = self.parent.keySelector(value)\n        except Exception as e:\n            self.onError(e)\n            return\n\n        fireNewMapEntry: bool = False\n        writer: Optional[Subject] = None\n\n        try:\n            if key == None:\n                if self.null == None:\n                    self.null = Subject()\n                    fireNewMapEntry = True\n\n                writer = self.null\n            else:\n                if not key in self.map:\n                    writer = Subject()\n                    self.map[key] = value\n                    fireNewMapEntry = True\n        except Exception as e:\n            self.onError(e)\n            return\n\n        if fireNewMapEntry:\n            group = GroupObservable(key, writer, self.parent.refCountDisposable)\n            self.observer.onNext(group)\n\n        element = None\n\n        try:\n            element = self.parent.elementSelector(value)\n        except Exception as e:\n            self.onError(e)\n        else:\n            writer.onNext(element)\n", "error_location_char": [547, 552], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def compute_step(", "self", ",", "param", ",", "previous_step", ")", ":", "#NEWLINE#", "#INDENT#", "if", "any", "(", "(", "(", "axis", ">=", "previous_step", ".", "ndim", ")", "for", "axis", "in", "self", ".", "axes", ")", ")", ":", "#NEWLINE#", "#INDENT#", "raise", "ValueError", "(", "'Invalid axes {} for {}, ndim={}'", ".", "format", "(", "self", ".", "axes", ",", "param", ",", "param", ".", "ndim", ")", ")", "#NEWLINE#", "#UNINDENT#", "squares", "=", "tensor", ".", "sqr", "(", "previous_step", ")", "#NEWLINE#", "if", "(", "len", "(", "self", ".", "axes", ")", "==", "0", ")", ":", "#NEWLINE#", "#INDENT#", "norms", "=", "l2_norm", "(", "[", "previous_step", "]", ")", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "norms", "=", "tensor", ".", "sqrt", "(", "reduce", "(", "(", "lambda", "t", ",", "a", ":", "t", ".", "sum", "(", "axis", "=", "a", ",", "keepdims", "=", "True", ")", ")", ",", "sorted", "(", "self", ".", "axes", ")", ",", "squares", ")", ")", "#NEWLINE#", "#UNINDENT#", "return", "(", "(", "previous_step", "*", "tensor", ".", "switch", "(", "(", "norms", ">", "self", ".", "threshold", ")", ",", "(", "self", ".", "threshold", "/", "norms", ")", ",", "1.0", ")", ")", ",", "(", ")", ")"], "edges": [[1, 3, 7, "enum_FIELD"], [11, 13, 7, "enum_FIELD"], [52, 58, 7, "enum_FIELD"], [73, 70, 7, "enum_FIELD"], [130, 158, 7, "enum_FIELD"], [13, 12, 7, "enum_FIELD"], [33, 35, 7, "enum_FIELD"], [58, 56, 7, "enum_FIELD"], [70, 65, 7, "enum_FIELD"], [75, 79, 7, "enum_FIELD"], [89, 95, 7, "enum_FIELD"], [14, 17, 7, "enum_FIELD"], [35, 34, 7, "enum_FIELD"], [56, 55, 7, "enum_FIELD"], [65, 64, 7, "enum_FIELD"], [79, 78, 7, "enum_FIELD"], [95, 93, 7, "enum_FIELD"], [134, 133, 7, "enum_FIELD"], [134, 146, 7, "enum_FIELD"], [17, 16, 7, "enum_FIELD"], [22, 23, 7, "enum_FIELD"], [22, 26, 7, "enum_FIELD"], [43, 37, 7, "enum_FIELD"], [67, 66, 7, "enum_FIELD"], [93, 92, 7, "enum_FIELD"], [117, 96, 7, "enum_FIELD"], [146, 136, 7, "enum_FIELD"], [19, 18, 7, "enum_FIELD"], [26, 25, 7, "enum_FIELD"], [37, 36, 7, "enum_FIELD"], [41, 40, 7, "enum_FIELD"], [47, 46, 7, "enum_FIELD"], [99, 101, 7, "enum_FIELD"], [99, 111, 7, "enum_FIELD"], [119, 118, 7, "enum_FIELD"], [136, 135, 7, "enum_FIELD"], [141, 140, 7, "enum_FIELD"], [151, 149, 7, "enum_FIELD"], [151, 152, 7, "enum_FIELD"], [111, 105, 7, "enum_FIELD"], [121, 120, 7, "enum_FIELD"], [143, 142, 7, "enum_FIELD"], [149, 148, 7, "enum_FIELD"], [105, 104, 7, "enum_FIELD"], [108, 110, 7, "enum_FIELD"], [112, 114, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [18, 6, 10, "enum_LAST_LEXICAL_USE"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [23, 16, 10, "enum_LAST_LEXICAL_USE"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [25, 2, 10, "enum_LAST_LEXICAL_USE"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [40, 25, 10, "enum_LAST_LEXICAL_USE"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [44, 4, 10, "enum_LAST_LEXICAL_USE"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [46, 44, 10, "enum_LAST_LEXICAL_USE"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [59, 18, 10, "enum_LAST_LEXICAL_USE"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [66, 40, 10, "enum_LAST_LEXICAL_USE"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 75, 9, "enum_NEXT_SYNTAX"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [81, 59, 10, "enum_LAST_LEXICAL_USE"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 89, 9, "enum_NEXT_SYNTAX"], [90, 76, 10, "enum_LAST_LEXICAL_USE"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [92, 55, 10, "enum_LAST_LEXICAL_USE"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [104, 100, 10, "enum_LAST_LEXICAL_USE"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [110, 102, 10, "enum_LAST_LEXICAL_USE"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [120, 66, 10, "enum_LAST_LEXICAL_USE"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [125, 53, 10, "enum_LAST_LEXICAL_USE"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [133, 81, 10, "enum_LAST_LEXICAL_USE"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [135, 92, 10, "enum_LAST_LEXICAL_USE"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [140, 90, 10, "enum_LAST_LEXICAL_USE"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [142, 120, 10, "enum_LAST_LEXICAL_USE"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [148, 142, 10, "enum_LAST_LEXICAL_USE"], [147, 148, 9, "enum_NEXT_SYNTAX"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [152, 140, 10, "enum_LAST_LEXICAL_USE"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [3, 13, 1, "enum_CFG_NEXT"], [13, 52, 1, "enum_CFG_NEXT"], [13, 33, 1, "enum_CFG_NEXT"], [52, 70, 1, "enum_CFG_NEXT"], [70, 75, 1, "enum_CFG_NEXT"], [70, 89, 1, "enum_CFG_NEXT"], [75, 130, 1, "enum_CFG_NEXT"], [89, 130, 1, "enum_CFG_NEXT"], [18, 6, 3, "enum_LAST_WRITE"], [23, 16, 2, "enum_LAST_READ"], [25, 2, 3, "enum_LAST_WRITE"], [40, 25, 2, "enum_LAST_READ"], [40, 2, 3, "enum_LAST_WRITE"], [44, 4, 3, "enum_LAST_WRITE"], [46, 44, 2, "enum_LAST_READ"], [46, 4, 3, "enum_LAST_WRITE"], [59, 18, 2, "enum_LAST_READ"], [59, 6, 3, "enum_LAST_WRITE"], [66, 25, 2, "enum_LAST_READ"], [66, 2, 3, "enum_LAST_WRITE"], [81, 59, 2, "enum_LAST_READ"], [81, 6, 3, "enum_LAST_WRITE"], [92, 55, 2, "enum_LAST_READ"], [104, 100, 3, "enum_LAST_WRITE"], [110, 102, 3, "enum_LAST_WRITE"], [120, 66, 2, "enum_LAST_READ"], [120, 2, 3, "enum_LAST_WRITE"], [125, 53, 3, "enum_LAST_WRITE"], [133, 81, 2, "enum_LAST_READ"], [133, 59, 2, "enum_LAST_READ"], [133, 6, 3, "enum_LAST_WRITE"], [135, 55, 2, "enum_LAST_READ"], [135, 92, 2, "enum_LAST_READ"], [140, 76, 3, "enum_LAST_WRITE"], [140, 90, 3, "enum_LAST_WRITE"], [142, 120, 2, "enum_LAST_READ"], [142, 66, 2, "enum_LAST_READ"], [142, 2, 3, "enum_LAST_WRITE"], [148, 142, 2, "enum_LAST_READ"], [148, 2, 3, "enum_LAST_WRITE"], [152, 140, 2, "enum_LAST_READ"], [152, 76, 3, "enum_LAST_WRITE"], [152, 90, 3, "enum_LAST_WRITE"], [53, 59, 4, "enum_COMPUTED_FROM"], [53, 55, 4, "enum_COMPUTED_FROM"], [76, 78, 4, "enum_COMPUTED_FROM"], [76, 81, 4, "enum_COMPUTED_FROM"], [90, 92, 4, "enum_COMPUTED_FROM"], [90, 96, 4, "enum_COMPUTED_FROM"], [90, 125, 4, "enum_COMPUTED_FROM"], [90, 118, 4, "enum_COMPUTED_FROM"], [90, 100, 4, "enum_COMPUTED_FROM"], [90, 102, 4, "enum_COMPUTED_FROM"], [90, 120, 4, "enum_COMPUTED_FROM"], [90, 104, 4, "enum_COMPUTED_FROM"], [90, 110, 4, "enum_COMPUTED_FROM"]], "error_location": 46, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/mila-udem/blocks.git", "old_path": "blocks/algorithms/__init__.py", "hash": "54dd52f080177aede81a63f58b276dd1e9cfc915", "code": "def compute_step(self, param: tensor, previous_step: tensor) -> Tuple[tensor, Tuple]:\n    if any(axis >= previous_step.ndim for axis in self.axes):\n        raise ValueError(\"Invalid axes {} for {}, ndim={}\".format(\n            self.axes, param, param.ndim))\n    squares: tensor = tensor.sqr(previous_step)\n    if len(self.axes) == 0:\n        norms: tensor = l2_norm([previous_step])\n    else:\n        norms: tensor = tensor.sqrt(\n            reduce(lambda t, a: t.sum(axis=a, keepdims=True),\n                sorted(self.axes), squares))\n    return (previous_step * tensor.switch(norms > self.threshold,\n                                        self.threshold / norms,\n                                        1.), ())\n", "rewrite": "ReplaceText(target='previous_step' @(625,34)->(625,39))", "error_line": 3, "has_bug": true, "code_full": "\nfrom functools import reduce\nfrom typing import Any, List, Tuple\n\n\nclass tensor:\n    ndim: int\n\n    @staticmethod\n    def sqr(x: \"tensor\") -> \"tensor\":\n        return x\n    \n    @staticmethod\n    def sqrt(x: \"tensor\") -> \"tensor\":\n        return x\n    \n    @staticmethod\n    def switch(cond: \"tensor\", ift: \"tensor\", iff: float) -> \"tensor\":\n        return cond\n    \n    def sum(self, axis: int, keepdims: bool) -> \"tensor\":\n        return self\n    \n    def __mul__(self, other: \"tensor\") -> \"tensor\":\n        return self\n    \n    def __gt__(self, other: \"tensor\") -> \"tensor\":\n        return self\n    \n    def __truediv__(self, other: \"tensor\") -> \"tensor\":\n        return self\n\n\ndef l2_norm(tensors: List[tensor]) -> tensor:\n    return tensor()\n\nclass VariableClipping:\n    axes: Tuple[int]\n    threshold: tensor\n\n    def compute_step(self, param: tensor, previous_step: tensor) -> Tuple[tensor, Tuple]:\n        if any(axis >= previous_step.ndim for axis in self.axes):\n            raise ValueError(\"Invalid axes {} for {}, ndim={}\".format(\n                self.axes, param, param.ndim))\n        squares: tensor = tensor.sqr(previous_step)\n        if len(self.axes) == 0:\n            norms: tensor = l2_norm([previous_step])\n        else:\n            norms: tensor = tensor.sqrt(\n                reduce(lambda t, a: t.sum(axis=a, keepdims=True),\n                    sorted(self.axes), squares))\n        return (previous_step * tensor.switch(norms > self.threshold,\n                                            self.threshold / norms,\n                                            1.), ())\n", "error_location_char": [245, 250], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def build(", "bloomfilter_filepaths", ",", "samples", ",", "graph", ")", ":", "#NEWLINE#", "#INDENT#", "bloomfilters", "=", "[", "]", "#NEWLINE#", "for", "f", "in", "bloomfilter_filepaths", ":", "#NEWLINE#", "#INDENT#", "bloomfilters", ".", "append", "(", "load_bloomfilter", "(", "f", ")", ")", "#NEWLINE#", "#UNINDENT#", "graph", ".", "build", "(", "bloomfilter_filepaths", ",", "samples", ")", "#NEWLINE#", "return", "{", "'result'", ":", "'success'", "}"], "edges": [[1, 3, 7, "enum_FIELD"], [10, 13, 7, "enum_FIELD"], [18, 17, 7, "enum_FIELD"], [18, 19, 7, "enum_FIELD"], [33, 39, 7, "enum_FIELD"], [43, 46, 7, "enum_FIELD"], [22, 26, 7, "enum_FIELD"], [39, 35, 7, "enum_FIELD"], [26, 24, 7, "enum_FIELD"], [35, 34, 7, "enum_FIELD"], [24, 23, 7, "enum_FIELD"], [28, 27, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [19, 2, 10, "enum_LAST_LEXICAL_USE"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 22, 9, "enum_NEXT_SYNTAX"], [23, 11, 10, "enum_LAST_LEXICAL_USE"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [29, 17, 10, "enum_LAST_LEXICAL_USE"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 30, 9, "enum_NEXT_SYNTAX"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 33, 9, "enum_NEXT_SYNTAX"], [34, 6, 10, "enum_LAST_LEXICAL_USE"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [38, 19, 10, "enum_LAST_LEXICAL_USE"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [40, 4, 10, "enum_LAST_LEXICAL_USE"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [3, 10, 1, "enum_CFG_NEXT"], [10, 19, 1, "enum_CFG_NEXT"], [19, 17, 1, "enum_CFG_NEXT"], [17, 22, 1, "enum_CFG_NEXT"], [17, 33, 1, "enum_CFG_NEXT"], [22, 17, 1, "enum_CFG_NEXT"], [33, 43, 1, "enum_CFG_NEXT"], [19, 2, 3, "enum_LAST_WRITE"], [17, 29, 2, "enum_LAST_READ"], [17, 17, 3, "enum_LAST_WRITE"], [23, 23, 2, "enum_LAST_READ"], [23, 11, 3, "enum_LAST_WRITE"], [27, 27, 2, "enum_LAST_READ"], [29, 29, 2, "enum_LAST_READ"], [29, 17, 3, "enum_LAST_WRITE"], [34, 6, 3, "enum_LAST_WRITE"], [38, 19, 2, "enum_LAST_READ"], [38, 2, 3, "enum_LAST_WRITE"], [40, 4, 3, "enum_LAST_WRITE"]], "error_location": 38, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/phelimb/cbg.git", "old_path": "bfg/cmds/build.py", "hash": "6aeae99e79fe215eac5e4fa1defcb77882760891", "code": "def build(bloomfilter_filepaths: List[str], samples: List[str], graph: Graph) -> Dict[str, str]:\n    bloomfilters: List[BloomFilter] = []\n    for f in bloomfilter_filepaths:\n        bloomfilters.append(load_bloomfilter(f))\n    graph.build(bloomfilter_filepaths, samples)\n    return {'result': 'success'}\n", "rewrite": "ReplaceText(target='bloomfilters' @(27,16)->(27,37))", "error_line": 4, "has_bug": true, "code_full": "from typing import Dict, List\n\n\nclass BloomFilter:\n    pass\n\n\nclass Graph:\n    def build(self, bloomfilters: List[BloomFilter], samples: List[str]):\n        pass\n\n\ndef load_bloomfilter(filepath: str) -> BloomFilter:\n    return BloomFilter()\n \n\ndef build(bloomfilter_filepaths: List[str], samples: List[str], graph: Graph) -> Dict[str, str]:\n    bloomfilters: List[BloomFilter] = []\n    for f in bloomfilter_filepaths:\n        bloomfilters.append(load_bloomfilter(f))\n    graph.build(bloomfilter_filepaths, samples)\n    return {'result': 'success'}\n", "error_location_char": [239, 260], "type_checked_pytype": false, "type_error_label": "wrong-arg-types", "type_checked_mypy": false}
{"source_tokens": ["#NEWLINE#", "def sync_slack_users(", "pks", ")", ":", "#NEWLINE#", "#INDENT#", "SLACK", "=", "Slacker", "(", "settings", ".", "SLACK_API_TOKEN", ")", "#NEWLINE#", "slack_users", "=", "SLACK", ".", "users", ".", "list", "(", ")", ".", "body", "[", "'members'", "]", "#NEWLINE#", "for", "pk", "in", "pks", ":", "#NEWLINE#", "#INDENT#", "user", "=", "User", ".", "objects", ".", "get", "(", "pk", "=", "pk", ")", "#NEWLINE#", "if", "(", "(", "not", "user", ".", "email", ")", "or", "(", "user", ".", "email", "[", "(", "-", "13", ")", ":", "]", "!=", "'@politico.com'", ")", ")", ":", "#NEWLINE#", "#INDENT#", "continue", "#NEWLINE#", "#UNINDENT#", "slack_user", "=", "get_slack_user", "(", "user", ",", "slack_users", ")", "#NEWLINE#", "if", "(", "not", "slack_user", ")", ":", "#NEWLINE#", "#INDENT#", "continue", "#NEWLINE#", "#UNINDENT#", "slack_profile", "=", "slack_user", "[", "'profile'", "]", "#NEWLINE#", "real_name", "=", "slack_profile", ".", "get", "(", "'real_name'", ",", "None", ")", "#NEWLINE#", "display_name", "=", "slack_profile", ".", "get", "(", "'display_name'", ",", "None", ")", "#NEWLINE#", "try", ":", "#NEWLINE#", "#INDENT#", "(", "first_name", ",", "last_name", ")", "=", "real_name", ".", "split", "(", "' '", ",", "1", ")", "#NEWLINE#", "#UNINDENT#", "except", "ValueError", ":", "#NEWLINE#", "#INDENT#", "try", ":", "#NEWLINE#", "#INDENT#", "(", "first_name", ",", "last_name", ")", "=", "display_name", ".", "split", "(", "' '", ",", "1", ")", "#NEWLINE#", "#UNINDENT#", "except", "ValueError", ":", "#NEWLINE#", "#INDENT#", "first_name", "=", "(", "real_name", "or", "display_name", "or", "''", ")", "#NEWLINE#", "last_name", "=", "''", "#NEWLINE#", "#UNINDENT#", "#UNINDENT#", "user", ".", "first_name", "=", "first_name", "#NEWLINE#", "user", ".", "last_name", "=", "last_name", "#NEWLINE#", "user", ".", "save", "(", ")", "#NEWLINE#", "(", "profile", ",", "created", ")", "=", "Profile", ".", "objects", ".", "update_or_create", "(", "user", "=", "user", ",", "defaults", "=", "{", "'slack_api_id'", ":", "slack_profile", "[", "'id'", "]", ",", "'politico_title'", ":", "slack_profile", ".", "get", "(", "'title'", ",", "'Staff writer'", ")", "}", ")", "#NEWLINE#", "if", "slack_profile", ".", "get", "(", "'image_192'", ",", "False", ")", ":", "#NEWLINE#", "#INDENT#", "r", "=", "requests", ".", "get", "(", "slack_profile", ".", "get", "(", "'image_192'", ")", ",", "stream", "=", "True", ")", "#NEWLINE#", "img", "=", "r", ".", "raw", ".", "read", "(", ")", "#NEWLINE#", "profile", ".", "slack_image", ".", "save", "(", "'slack-profile-{}.jpg'", ".", "format", "(", "uuid", ".", "uuid4", "(", ")", ".", "hex", "[", ":", "10", "]", ")", ",", "ContentFile", "(", "img", ")", ",", "save", "=", "True", ")", "#NEWLINE#", "profile", ".", "save", "(", ")"], "edges": [[6, 10, 7, "enum_FIELD"], [15, 27, 7, "enum_FIELD"], [33, 32, 7, "enum_FIELD"], [33, 34, 7, "enum_FIELD"], [10, 9, 7, "enum_FIELD"], [27, 25, 7, "enum_FIELD"], [27, 28, 7, "enum_FIELD"], [37, 45, 7, "enum_FIELD"], [51, 59, 7, "enum_FIELD"], [80, 86, 7, "enum_FIELD"], [90, 92, 7, "enum_FIELD"], [100, 104, 7, "enum_FIELD"], [107, 115, 7, "enum_FIELD"], [118, 126, 7, "enum_FIELD"], [195, 200, 7, "enum_FIELD"], [201, 206, 7, "enum_FIELD"], [207, 211, 7, "enum_FIELD"], [213, 229, 7, "enum_FIELD"], [253, 259, 7, "enum_FIELD"], [12, 11, 7, "enum_FIELD"], [25, 23, 7, "enum_FIELD"], [45, 43, 7, "enum_FIELD"], [86, 83, 7, "enum_FIELD"], [92, 93, 7, "enum_FIELD"], [104, 103, 7, "enum_FIELD"], [104, 105, 7, "enum_FIELD"], [115, 111, 7, "enum_FIELD"], [126, 122, 7, "enum_FIELD"], [133, 145, 7, "enum_FIELD"], [150, 151, 7, "enum_FIELD"], [197, 196, 7, "enum_FIELD"], [203, 202, 7, "enum_FIELD"], [211, 209, 7, "enum_FIELD"], [229, 223, 7, "enum_FIELD"], [259, 255, 7, "enum_FIELD"], [264, 277, 7, "enum_FIELD"], [282, 290, 7, "enum_FIELD"], [292, 315, 7, "enum_FIELD"], [325, 329, 7, "enum_FIELD"], [23, 21, 7, "enum_FIELD"], [43, 41, 7, "enum_FIELD"], [46, 48, 7, "enum_FIELD"], [54, 56, 7, "enum_FIELD"], [71, 64, 7, "enum_FIELD"], [111, 110, 7, "enum_FIELD"], [122, 121, 7, "enum_FIELD"], [145, 141, 7, "enum_FIELD"], [209, 208, 7, "enum_FIELD"], [223, 221, 7, "enum_FIELD"], [226, 228, 7, "enum_FIELD"], [230, 239, 7, "enum_FIELD"], [255, 254, 7, "enum_FIELD"], [277, 268, 7, "enum_FIELD"], [290, 288, 7, "enum_FIELD"], [315, 296, 7, "enum_FIELD"], [329, 327, 7, "enum_FIELD"], [21, 19, 7, "enum_FIELD"], [41, 40, 7, "enum_FIELD"], [56, 55, 7, "enum_FIELD"], [64, 62, 7, "enum_FIELD"], [64, 69, 7, "enum_FIELD"], [141, 140, 7, "enum_FIELD"], [158, 170, 7, "enum_FIELD"], [175, 176, 7, "enum_FIELD"], [221, 220, 7, "enum_FIELD"], [268, 267, 7, "enum_FIELD"], [274, 272, 7, "enum_FIELD"], [278, 280, 7, "enum_FIELD"], [288, 286, 7, "enum_FIELD"], [296, 294, 7, "enum_FIELD"], [302, 300, 7, "enum_FIELD"], [317, 316, 7, "enum_FIELD"], [321, 323, 7, "enum_FIELD"], [327, 326, 7, "enum_FIELD"], [19, 18, 7, "enum_FIELD"], [62, 61, 7, "enum_FIELD"], [69, 66, 7, "enum_FIELD"], [170, 166, 7, "enum_FIELD"], [179, 184, 7, "enum_FIELD"], [189, 192, 7, "enum_FIELD"], [236, 235, 7, "enum_FIELD"], [236, 237, 7, "enum_FIELD"], [247, 243, 7, "enum_FIELD"], [272, 271, 7, "enum_FIELD"], [286, 285, 7, "enum_FIELD"], [294, 293, 7, "enum_FIELD"], [300, 299, 7, "enum_FIELD"], [310, 308, 7, "enum_FIELD"], [310, 311, 7, "enum_FIELD"], [66, 67, 7, "enum_FIELD"], [166, 165, 7, "enum_FIELD"], [243, 242, 7, "enum_FIELD"], [308, 306, 7, "enum_FIELD"], [311, 312, 7, "enum_FIELD"], [306, 304, 7, "enum_FIELD"], [304, 303, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 11, 9, "enum_NEXT_SYNTAX"], [11, 12, 9, "enum_NEXT_SYNTAX"], [12, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [18, 7, 10, "enum_LAST_LEXICAL_USE"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 20, 9, "enum_NEXT_SYNTAX"], [20, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 25, 9, "enum_NEXT_SYNTAX"], [25, 26, 9, "enum_NEXT_SYNTAX"], [26, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 29, 9, "enum_NEXT_SYNTAX"], [29, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [32, 33, 9, "enum_NEXT_SYNTAX"], [34, 2, 10, "enum_LAST_LEXICAL_USE"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 37, 9, "enum_NEXT_SYNTAX"], [37, 38, 9, "enum_NEXT_SYNTAX"], [38, 39, 9, "enum_NEXT_SYNTAX"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [48, 32, 10, "enum_LAST_LEXICAL_USE"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [55, 38, 10, "enum_LAST_LEXICAL_USE"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [61, 55, 10, "enum_LAST_LEXICAL_USE"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [75, 78, 9, "enum_NEXT_SYNTAX"], [78, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [83, 84, 9, "enum_NEXT_SYNTAX"], [85, 61, 10, "enum_LAST_LEXICAL_USE"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [87, 16, 10, "enum_LAST_LEXICAL_USE"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [93, 81, 10, "enum_LAST_LEXICAL_USE"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [95, 98, 9, "enum_NEXT_SYNTAX"], [98, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [103, 93, 10, "enum_LAST_LEXICAL_USE"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [110, 101, 10, "enum_LAST_LEXICAL_USE"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [121, 110, 10, "enum_LAST_LEXICAL_USE"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [128, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [140, 108, 10, "enum_LAST_LEXICAL_USE"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [160, 135, 10, "enum_LAST_LEXICAL_USE"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [162, 137, 10, "enum_LAST_LEXICAL_USE"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [165, 119, 10, "enum_LAST_LEXICAL_USE"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [172, 175, 9, "enum_NEXT_SYNTAX"], [176, 151, 10, "enum_LAST_LEXICAL_USE"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [177, 179, 9, "enum_NEXT_SYNTAX"], [180, 160, 10, "enum_LAST_LEXICAL_USE"], [179, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [181, 182, 9, "enum_NEXT_SYNTAX"], [183, 140, 10, "enum_LAST_LEXICAL_USE"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 184, 9, "enum_NEXT_SYNTAX"], [185, 165, 10, "enum_LAST_LEXICAL_USE"], [184, 185, 9, "enum_NEXT_SYNTAX"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [187, 188, 9, "enum_NEXT_SYNTAX"], [188, 189, 9, "enum_NEXT_SYNTAX"], [190, 162, 10, "enum_LAST_LEXICAL_USE"], [189, 190, 9, "enum_NEXT_SYNTAX"], [190, 191, 9, "enum_NEXT_SYNTAX"], [191, 192, 9, "enum_NEXT_SYNTAX"], [192, 195, 9, "enum_NEXT_SYNTAX"], [196, 85, 10, "enum_LAST_LEXICAL_USE"], [195, 196, 9, "enum_NEXT_SYNTAX"], [196, 197, 9, "enum_NEXT_SYNTAX"], [197, 198, 9, "enum_NEXT_SYNTAX"], [198, 199, 9, "enum_NEXT_SYNTAX"], [200, 180, 10, "enum_LAST_LEXICAL_USE"], [199, 200, 9, "enum_NEXT_SYNTAX"], [200, 201, 9, "enum_NEXT_SYNTAX"], [202, 196, 10, "enum_LAST_LEXICAL_USE"], [201, 202, 9, "enum_NEXT_SYNTAX"], [202, 203, 9, "enum_NEXT_SYNTAX"], [203, 204, 9, "enum_NEXT_SYNTAX"], [204, 205, 9, "enum_NEXT_SYNTAX"], [206, 190, 10, "enum_LAST_LEXICAL_USE"], [205, 206, 9, "enum_NEXT_SYNTAX"], [206, 207, 9, "enum_NEXT_SYNTAX"], [208, 202, 10, "enum_LAST_LEXICAL_USE"], [207, 208, 9, "enum_NEXT_SYNTAX"], [208, 209, 9, "enum_NEXT_SYNTAX"], [209, 210, 9, "enum_NEXT_SYNTAX"], [210, 211, 9, "enum_NEXT_SYNTAX"], [211, 212, 9, "enum_NEXT_SYNTAX"], [212, 213, 9, "enum_NEXT_SYNTAX"], [213, 214, 9, "enum_NEXT_SYNTAX"], [214, 215, 9, "enum_NEXT_SYNTAX"], [215, 216, 9, "enum_NEXT_SYNTAX"], [216, 217, 9, "enum_NEXT_SYNTAX"], [217, 218, 9, "enum_NEXT_SYNTAX"], [218, 219, 9, "enum_NEXT_SYNTAX"], [219, 220, 9, "enum_NEXT_SYNTAX"], [220, 221, 9, "enum_NEXT_SYNTAX"], [221, 222, 9, "enum_NEXT_SYNTAX"], [222, 223, 9, "enum_NEXT_SYNTAX"], [223, 224, 9, "enum_NEXT_SYNTAX"], [224, 225, 9, "enum_NEXT_SYNTAX"], [225, 226, 9, "enum_NEXT_SYNTAX"], [226, 227, 9, "enum_NEXT_SYNTAX"], [228, 208, 10, "enum_LAST_LEXICAL_USE"], [227, 228, 9, "enum_NEXT_SYNTAX"], [228, 229, 9, "enum_NEXT_SYNTAX"], [229, 230, 9, "enum_NEXT_SYNTAX"], [230, 231, 9, "enum_NEXT_SYNTAX"], [231, 232, 9, "enum_NEXT_SYNTAX"], [232, 233, 9, "enum_NEXT_SYNTAX"], [233, 234, 9, "enum_NEXT_SYNTAX"], [235, 121, 10, "enum_LAST_LEXICAL_USE"], [234, 235, 9, "enum_NEXT_SYNTAX"], [235, 236, 9, "enum_NEXT_SYNTAX"], [236, 237, 9, "enum_NEXT_SYNTAX"], [237, 238, 9, "enum_NEXT_SYNTAX"], [238, 239, 9, "enum_NEXT_SYNTAX"], [239, 240, 9, "enum_NEXT_SYNTAX"], [240, 241, 9, "enum_NEXT_SYNTAX"], [242, 235, 10, "enum_LAST_LEXICAL_USE"], [241, 242, 9, "enum_NEXT_SYNTAX"], [242, 243, 9, "enum_NEXT_SYNTAX"], [243, 244, 9, "enum_NEXT_SYNTAX"], [244, 245, 9, "enum_NEXT_SYNTAX"], [245, 246, 9, "enum_NEXT_SYNTAX"], [246, 247, 9, "enum_NEXT_SYNTAX"], [247, 248, 9, "enum_NEXT_SYNTAX"], [248, 249, 9, "enum_NEXT_SYNTAX"], [249, 250, 9, "enum_NEXT_SYNTAX"], [250, 251, 9, "enum_NEXT_SYNTAX"], [251, 253, 9, "enum_NEXT_SYNTAX"], [254, 242, 10, "enum_LAST_LEXICAL_USE"], [253, 254, 9, "enum_NEXT_SYNTAX"], [254, 255, 9, "enum_NEXT_SYNTAX"], [255, 256, 9, "enum_NEXT_SYNTAX"], [256, 257, 9, "enum_NEXT_SYNTAX"], [257, 258, 9, "enum_NEXT_SYNTAX"], [258, 259, 9, "enum_NEXT_SYNTAX"], [259, 260, 9, "enum_NEXT_SYNTAX"], [260, 261, 9, "enum_NEXT_SYNTAX"], [261, 262, 9, "enum_NEXT_SYNTAX"], [262, 264, 9, "enum_NEXT_SYNTAX"], [264, 265, 9, "enum_NEXT_SYNTAX"], [265, 266, 9, "enum_NEXT_SYNTAX"], [266, 267, 9, "enum_NEXT_SYNTAX"], [267, 268, 9, "enum_NEXT_SYNTAX"], [268, 269, 9, "enum_NEXT_SYNTAX"], [269, 270, 9, "enum_NEXT_SYNTAX"], [271, 254, 10, "enum_LAST_LEXICAL_USE"], [270, 271, 9, "enum_NEXT_SYNTAX"], [271, 272, 9, "enum_NEXT_SYNTAX"], [272, 273, 9, "enum_NEXT_SYNTAX"], [273, 274, 9, "enum_NEXT_SYNTAX"], [274, 275, 9, "enum_NEXT_SYNTAX"], [275, 276, 9, "enum_NEXT_SYNTAX"], [276, 277, 9, "enum_NEXT_SYNTAX"], [277, 278, 9, "enum_NEXT_SYNTAX"], [278, 279, 9, "enum_NEXT_SYNTAX"], [279, 280, 9, "enum_NEXT_SYNTAX"], [280, 281, 9, "enum_NEXT_SYNTAX"], [281, 282, 9, "enum_NEXT_SYNTAX"], [282, 283, 9, "enum_NEXT_SYNTAX"], [283, 284, 9, "enum_NEXT_SYNTAX"], [285, 265, 10, "enum_LAST_LEXICAL_USE"], [284, 285, 9, "enum_NEXT_SYNTAX"], [285, 286, 9, "enum_NEXT_SYNTAX"], [286, 287, 9, "enum_NEXT_SYNTAX"], [287, 288, 9, "enum_NEXT_SYNTAX"], [288, 289, 9, "enum_NEXT_SYNTAX"], [289, 290, 9, "enum_NEXT_SYNTAX"], [290, 291, 9, "enum_NEXT_SYNTAX"], [291, 292, 9, "enum_NEXT_SYNTAX"], [293, 215, 10, "enum_LAST_LEXICAL_USE"], [292, 293, 9, "enum_NEXT_SYNTAX"], [293, 294, 9, "enum_NEXT_SYNTAX"], [294, 295, 9, "enum_NEXT_SYNTAX"], [295, 296, 9, "enum_NEXT_SYNTAX"], [296, 297, 9, "enum_NEXT_SYNTAX"], [297, 298, 9, "enum_NEXT_SYNTAX"], [298, 299, 9, "enum_NEXT_SYNTAX"], [299, 300, 9, "enum_NEXT_SYNTAX"], [300, 301, 9, "enum_NEXT_SYNTAX"], [301, 302, 9, "enum_NEXT_SYNTAX"], [302, 303, 9, "enum_NEXT_SYNTAX"], [303, 304, 9, "enum_NEXT_SYNTAX"], [304, 305, 9, "enum_NEXT_SYNTAX"], [305, 306, 9, "enum_NEXT_SYNTAX"], [306, 307, 9, "enum_NEXT_SYNTAX"], [307, 308, 9, "enum_NEXT_SYNTAX"], [308, 309, 9, "enum_NEXT_SYNTAX"], [309, 310, 9, "enum_NEXT_SYNTAX"], [310, 311, 9, "enum_NEXT_SYNTAX"], [311, 312, 9, "enum_NEXT_SYNTAX"], [312, 313, 9, "enum_NEXT_SYNTAX"], [313, 314, 9, "enum_NEXT_SYNTAX"], [314, 315, 9, "enum_NEXT_SYNTAX"], [315, 316, 9, "enum_NEXT_SYNTAX"], [316, 317, 9, "enum_NEXT_SYNTAX"], [318, 283, 10, "enum_LAST_LEXICAL_USE"], [317, 318, 9, "enum_NEXT_SYNTAX"], [318, 319, 9, "enum_NEXT_SYNTAX"], [319, 320, 9, "enum_NEXT_SYNTAX"], [320, 321, 9, "enum_NEXT_SYNTAX"], [321, 322, 9, "enum_NEXT_SYNTAX"], [322, 323, 9, "enum_NEXT_SYNTAX"], [323, 324, 9, "enum_NEXT_SYNTAX"], [324, 325, 9, "enum_NEXT_SYNTAX"], [326, 293, 10, "enum_LAST_LEXICAL_USE"], [325, 326, 9, "enum_NEXT_SYNTAX"], [326, 327, 9, "enum_NEXT_SYNTAX"], [327, 328, 9, "enum_NEXT_SYNTAX"], [328, 329, 9, "enum_NEXT_SYNTAX"], [329, 330, 9, "enum_NEXT_SYNTAX"], [6, 15, 1, "enum_CFG_NEXT"], [15, 34, 1, "enum_CFG_NEXT"], [34, 32, 1, "enum_CFG_NEXT"], [32, 37, 1, "enum_CFG_NEXT"], [37, 59, 1, "enum_CFG_NEXT"], [59, 32, 1, "enum_CFG_NEXT"], [59, 80, 1, "enum_CFG_NEXT"], [80, 92, 1, "enum_CFG_NEXT"], [92, 32, 1, "enum_CFG_NEXT"], [92, 100, 1, "enum_CFG_NEXT"], [100, 107, 1, "enum_CFG_NEXT"], [107, 118, 1, "enum_CFG_NEXT"], [118, 133, 1, "enum_CFG_NEXT"], [133, 151, 1, "enum_CFG_NEXT"], [133, 195, 1, "enum_CFG_NEXT"], [151, 158, 1, "enum_CFG_NEXT"], [158, 176, 1, "enum_CFG_NEXT"], [158, 195, 1, "enum_CFG_NEXT"], [176, 179, 1, "enum_CFG_NEXT"], [179, 189, 1, "enum_CFG_NEXT"], [189, 195, 1, "enum_CFG_NEXT"], [195, 201, 1, "enum_CFG_NEXT"], [201, 207, 1, "enum_CFG_NEXT"], [207, 213, 1, "enum_CFG_NEXT"], [213, 259, 1, "enum_CFG_NEXT"], [259, 264, 1, "enum_CFG_NEXT"], [259, 32, 1, "enum_CFG_NEXT"], [264, 282, 1, "enum_CFG_NEXT"], [282, 292, 1, "enum_CFG_NEXT"], [292, 325, 1, "enum_CFG_NEXT"], [325, 32, 1, "enum_CFG_NEXT"], [18, 7, 3, "enum_LAST_WRITE"], [34, 2, 3, "enum_LAST_WRITE"], [32, 48, 2, "enum_LAST_READ"], [32, 32, 3, "enum_LAST_WRITE"], [40, 40, 2, "enum_LAST_READ"], [48, 48, 2, "enum_LAST_READ"], [48, 32, 3, "enum_LAST_WRITE"], [38, 85, 2, "enum_LAST_READ"], [38, 228, 2, "enum_LAST_READ"], [38, 61, 2, "enum_LAST_READ"], [38, 38, 3, "enum_LAST_WRITE"], [55, 85, 2, "enum_LAST_READ"], [55, 228, 2, "enum_LAST_READ"], [55, 61, 2, "enum_LAST_READ"], [55, 38, 3, "enum_LAST_WRITE"], [61, 55, 2, "enum_LAST_READ"], [61, 38, 3, "enum_LAST_WRITE"], [83, 83, 2, "enum_LAST_READ"], [85, 61, 2, "enum_LAST_READ"], [85, 38, 3, "enum_LAST_WRITE"], [87, 87, 2, "enum_LAST_READ"], [87, 16, 3, "enum_LAST_WRITE"], [81, 103, 2, "enum_LAST_READ"], [81, 93, 2, "enum_LAST_READ"], [81, 81, 3, "enum_LAST_WRITE"], [93, 103, 2, "enum_LAST_READ"], [93, 93, 2, "enum_LAST_READ"], [93, 81, 3, "enum_LAST_WRITE"], [103, 93, 2, "enum_LAST_READ"], [103, 81, 3, "enum_LAST_WRITE"], [101, 271, 2, "enum_LAST_READ"], [101, 254, 2, "enum_LAST_READ"], [101, 101, 3, "enum_LAST_WRITE"], [110, 271, 2, "enum_LAST_READ"], [110, 254, 2, "enum_LAST_READ"], [110, 101, 3, "enum_LAST_WRITE"], [108, 140, 2, "enum_LAST_READ"], [108, 183, 2, "enum_LAST_READ"], [108, 108, 3, "enum_LAST_WRITE"], [121, 110, 2, "enum_LAST_READ"], [121, 101, 3, "enum_LAST_WRITE"], [119, 185, 2, "enum_LAST_READ"], [119, 165, 2, "enum_LAST_READ"], [119, 119, 3, "enum_LAST_WRITE"], [140, 140, 2, "enum_LAST_READ"], [140, 183, 2, "enum_LAST_READ"], [140, 108, 3, "enum_LAST_WRITE"], [135, 200, 2, "enum_LAST_READ"], [135, 160, 3, "enum_LAST_WRITE"], [135, 180, 3, "enum_LAST_WRITE"], [135, 135, 3, "enum_LAST_WRITE"], [137, 206, 2, "enum_LAST_READ"], [137, 190, 3, "enum_LAST_WRITE"], [137, 137, 3, "enum_LAST_WRITE"], [137, 162, 3, "enum_LAST_WRITE"], [151, 151, 2, "enum_LAST_READ"], [151, 176, 2, "enum_LAST_READ"], [165, 185, 2, "enum_LAST_READ"], [165, 165, 2, "enum_LAST_READ"], [165, 119, 3, "enum_LAST_WRITE"], [160, 200, 2, "enum_LAST_READ"], [160, 135, 3, "enum_LAST_WRITE"], [162, 206, 2, "enum_LAST_READ"], [162, 137, 3, "enum_LAST_WRITE"], [176, 151, 2, "enum_LAST_READ"], [183, 140, 2, "enum_LAST_READ"], [183, 108, 3, "enum_LAST_WRITE"], [185, 165, 2, "enum_LAST_READ"], [185, 119, 3, "enum_LAST_WRITE"], [180, 200, 2, "enum_LAST_READ"], [180, 160, 3, "enum_LAST_WRITE"], [190, 206, 2, "enum_LAST_READ"], [190, 162, 3, "enum_LAST_WRITE"], [200, 200, 2, "enum_LAST_READ"], [200, 160, 3, "enum_LAST_WRITE"], [200, 180, 3, "enum_LAST_WRITE"], [200, 135, 3, "enum_LAST_WRITE"], [196, 85, 2, "enum_LAST_READ"], [196, 38, 3, "enum_LAST_WRITE"], [206, 206, 2, "enum_LAST_READ"], [206, 190, 3, "enum_LAST_WRITE"], [206, 137, 3, "enum_LAST_WRITE"], [206, 162, 3, "enum_LAST_WRITE"], [202, 196, 2, "enum_LAST_READ"], [202, 38, 3, "enum_LAST_WRITE"], [208, 202, 2, "enum_LAST_READ"], [208, 38, 3, "enum_LAST_WRITE"], [220, 220, 2, "enum_LAST_READ"], [228, 208, 2, "enum_LAST_READ"], [228, 38, 3, "enum_LAST_WRITE"], [235, 121, 2, "enum_LAST_READ"], [235, 101, 3, "enum_LAST_WRITE"], [242, 235, 2, "enum_LAST_READ"], [242, 101, 3, "enum_LAST_WRITE"], [215, 326, 2, "enum_LAST_READ"], [215, 215, 3, "enum_LAST_WRITE"], [217, 217, 3, "enum_LAST_WRITE"], [254, 242, 2, "enum_LAST_READ"], [254, 101, 3, "enum_LAST_WRITE"], [267, 267, 2, "enum_LAST_READ"], [271, 254, 2, "enum_LAST_READ"], [271, 101, 3, "enum_LAST_WRITE"], [265, 285, 2, "enum_LAST_READ"], [265, 265, 3, "enum_LAST_WRITE"], [285, 285, 2, "enum_LAST_READ"], [285, 265, 3, "enum_LAST_WRITE"], [283, 318, 2, "enum_LAST_READ"], [283, 283, 3, "enum_LAST_WRITE"], [293, 326, 2, "enum_LAST_READ"], [293, 215, 3, "enum_LAST_WRITE"], [303, 303, 2, "enum_LAST_READ"], [316, 316, 2, "enum_LAST_READ"], [318, 318, 2, "enum_LAST_READ"], [318, 283, 3, "enum_LAST_WRITE"], [326, 293, 2, "enum_LAST_READ"], [326, 215, 3, "enum_LAST_WRITE"], [7, 9, 4, "enum_COMPUTED_FROM"], [7, 11, 4, "enum_COMPUTED_FROM"], [16, 18, 4, "enum_COMPUTED_FROM"], [38, 48, 4, "enum_COMPUTED_FROM"], [38, 40, 4, "enum_COMPUTED_FROM"], [81, 83, 4, "enum_COMPUTED_FROM"], [81, 85, 4, "enum_COMPUTED_FROM"], [81, 87, 4, "enum_COMPUTED_FROM"], [101, 103, 4, "enum_COMPUTED_FROM"], [108, 110, 4, "enum_COMPUTED_FROM"], [119, 121, 4, "enum_COMPUTED_FROM"], [197, 200, 4, "enum_COMPUTED_FROM"], [203, 206, 4, "enum_COMPUTED_FROM"], [216, 228, 4, "enum_COMPUTED_FROM"], [216, 220, 4, "enum_COMPUTED_FROM"], [216, 235, 4, "enum_COMPUTED_FROM"], [216, 242, 4, "enum_COMPUTED_FROM"], [136, 140, 4, "enum_COMPUTED_FROM"], [265, 267, 4, "enum_COMPUTED_FROM"], [265, 271, 4, "enum_COMPUTED_FROM"], [283, 285, 4, "enum_COMPUTED_FROM"], [161, 165, 4, "enum_COMPUTED_FROM"], [180, 183, 4, "enum_COMPUTED_FROM"], [180, 185, 4, "enum_COMPUTED_FROM"]], "error_location": 235, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/The-Politico/django-politico-staff.git", "old_path": "staff/tasks/user.py", "hash": "119c1cd3ba70d18e733d4c0cb2d4dc2f89be5428", "code": "def sync_slack_users(pks: List[int]):\n    SLACK: Slacker = Slacker(settings.SLACK_API_TOKEN)\n    slack_users: List[Dict] = SLACK.users.list().body[\"members\"]\n    for pk in pks:\n        user = User.objects.get(pk=pk)\n\n        if not user.email or user.email[-13:] != \"@politico.com\":\n            continue\n\n        slack_user: Optional[Dict] = get_slack_user(user, slack_users)\n\n        if not slack_user:\n            continue\n\n        slack_profile = slack_user[\"profile\"]\n\n        real_name: Optional[str] = slack_profile.get(\"real_name\", None)\n        display_name: Optional[str] = slack_profile.get(\"display_name\", None)\n        first_name: str\n        last_name: str\n        try:\n            first_name, last_name = real_name.split(\" \", 1)\n        except ValueError:\n            try:\n                first_name, last_name = display_name.split(\" \", 1)\n            except ValueError:\n                first_name = real_name or display_name or \"\"\n                last_name = \"\"\n\n        user.first_name = first_name\n        user.last_name = last_name\n        user.save()\n\n        profile: Profile\n        created: bool\n        profile, created = Profile.objects.update_or_create(\n            user=user,\n            defaults={\n                \"slack_api_id\": slack_profile[\"id\"],\n                \"politico_title\": slack_profile.get(\"title\", \"Staff writer\"),\n            },\n        )\n\n        if slack_profile.get(\"image_192\", False):\n            r: requests.Response = requests.get(slack_profile.get(\"image_192\"), stream=True)\n            img: Any = r.raw.read()\n            profile.slack_image.save(\n                \"slack-profile-{}.jpg\".format(uuid.uuid4().hex[:10]),\n                ContentFile(img),\n                save=True,\n            )\n            profile.save()\n", "rewrite": "ReplaceText(target='slack_user' @(67,32)->(67,45))", "error_line": 34, "has_bug": true, "code_full": "\n\nimport uuid\nfrom typing import Any, Dict, List, Optional, Tuple\n\nimport requests\nfrom django.conf import settings\nfrom django.core.files.base import ContentFile\n\n\nclass User:\n    email: str\n    first_name: str\n    last_name: str\n\n    def save(self):\n        pass\n\n    class objects:\n        @staticmethod\n        def get(pk) -> 'User':\n            return User()\n\n\nclass Slacker:\n    class Users:\n        def list(self) -> Any:\n            pass\n\n    users: \"Slacker.Users\"\n\n    def __init__(self, api_token):\n        pass\n\n\nclass Profile:\n    slack_api_id: str\n    slack_image: ContentFile\n    politico_title: str\n\n    class objects:\n        @staticmethod\n        def update_or_create(user: User, defaults: Dict[str, str]) -> Tuple['Profile', bool]:\n            return Profile(), False\n    \n    def save(self):\n        pass\n\n\ndef get_slack_user(user: User, slack_users: List[Dict]) -> Optional[Dict]:\n    return None\n\n\ndef sync_slack_users(pks: List[int]):\n    SLACK: Slacker = Slacker(settings.SLACK_API_TOKEN)\n    slack_users: List[Dict] = SLACK.users.list().body[\"members\"]\n    for pk in pks:\n        user = User.objects.get(pk=pk)\n\n        if not user.email or user.email[-13:] != \"@politico.com\":\n            continue\n\n        slack_user: Optional[Dict] = get_slack_user(user, slack_users)\n\n        if not slack_user:\n            continue\n\n        slack_profile = slack_user[\"profile\"]\n\n        real_name: Optional[str] = slack_profile.get(\"real_name\", None)\n        display_name: Optional[str] = slack_profile.get(\"display_name\", None)\n        first_name: str\n        last_name: str\n        try:\n            first_name, last_name = real_name.split(\" \", 1)\n        except ValueError:\n            try:\n                first_name, last_name = display_name.split(\" \", 1)\n            except ValueError:\n                first_name = real_name or display_name or \"\"\n                last_name = \"\"\n\n        user.first_name = first_name\n        user.last_name = last_name\n        user.save()\n\n        profile: Profile\n        created: bool\n        profile, created = Profile.objects.update_or_create(\n            user=user,\n            defaults={\n                \"slack_api_id\": slack_profile[\"id\"],\n                \"politico_title\": slack_profile.get(\"title\", \"Staff writer\"),\n            },\n        )\n\n        if slack_profile.get(\"image_192\", False):\n            r: requests.Response = requests.get(slack_profile.get(\"image_192\"), stream=True)\n            img: Any = r.raw.read()\n            profile.slack_image.save(\n                \"slack-profile-{}.jpg\".format(uuid.uuid4().hex[:10]),\n                ContentFile(img),\n                save=True,\n            )\n            profile.save()\n", "error_location_char": [1257, 1270], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
{"source_tokens": ["#NEWLINE#", "def __init__(", "self", ",", "widgetname", ",", "parent", ",", "**options", ")", ":", "#NEWLINE#", "#INDENT#", "if", "(", "parent", "is", "None", ")", ":", "#NEWLINE#", "#INDENT#", "parentpath", "=", "''", "#NEWLINE#", "#UNINDENT#", "else", ":", "#NEWLINE#", "#INDENT#", "parentpath", "=", "parent", ".", "to_tcl", "(", ")", "#NEWLINE#", "#UNINDENT#", "self", ".", "parent", "=", "parent", "#NEWLINE#", "safe_class_name", "=", "re", ".", "sub", "(", "'\\\\W'", ",", "'_'", ",", "type", "(", "self", ")", ".", "__name__", ")", ".", "lower", "(", ")", "#NEWLINE#", "self", ".", "_widget_path", "=", "(", "'%s.%s%d'", "%", "(", "parentpath", ",", "safe_class_name", ",", "next", "(", "counts", "[", "widgetname", "]", ")", ")", ")", "#NEWLINE#", "self", ".", "_call", "(", "None", ",", "widgetname", ",", "self", ".", "to_tcl", "(", ")", ")", "#NEWLINE#", "_widgets", "[", "self", ".", "to_tcl", "(", ")", "]", "=", "self", "#NEWLINE#", "self", ".", "config", "=", "ConfigDict", "(", "(", "lambda", "returntype", ",", "*", "args", ":", "self", ".", "_call", "(", "returntype", ",", "self", ",", "*", "args", ")", ")", ")", "#NEWLINE#", "self", ".", "_init_config", "(", ")", "#NEWLINE#", "self", ".", "config", ".", "update", "(", "options", ")", "#NEWLINE#", "self", ".", "_command_list", "=", "[", "]", "#NEWLINE#", "self", ".", "bindings", "=", "BindingDict", "(", "(", "lambda", "returntype", ",", "*", "args", ":", "self", ".", "_call", "(", "returntype", ",", "'bind'", ",", "self", ",", "*", "args", ")", ")", ",", "self", ".", "_command_list", ")"], "edges": [[1, 5, 7, "enum_FIELD"], [19, 16, 7, "enum_FIELD"], [39, 44, 7, "enum_FIELD"], [45, 65, 7, "enum_FIELD"], [67, 74, 7, "enum_FIELD"], [89, 95, 7, "enum_FIELD"], [104, 114, 7, "enum_FIELD"], [115, 121, 7, "enum_FIELD"], [142, 146, 7, "enum_FIELD"], [148, 154, 7, "enum_FIELD"], [157, 162, 7, "enum_FIELD"], [164, 192, 7, "enum_FIELD"], [16, 15, 7, "enum_FIELD"], [21, 24, 7, "enum_FIELD"], [30, 36, 7, "enum_FIELD"], [41, 40, 7, "enum_FIELD"], [65, 63, 7, "enum_FIELD"], [69, 68, 7, "enum_FIELD"], [74, 73, 7, "enum_FIELD"], [74, 77, 7, "enum_FIELD"], [95, 91, 7, "enum_FIELD"], [106, 105, 7, "enum_FIELD"], [106, 110, 7, "enum_FIELD"], [117, 116, 7, "enum_FIELD"], [121, 120, 7, "enum_FIELD"], [146, 144, 7, "enum_FIELD"], [154, 152, 7, "enum_FIELD"], [159, 158, 7, "enum_FIELD"], [166, 165, 7, "enum_FIELD"], [192, 169, 7, "enum_FIELD"], [36, 34, 7, "enum_FIELD"], [63, 53, 7, "enum_FIELD"], [91, 90, 7, "enum_FIELD"], [101, 99, 7, "enum_FIELD"], [110, 108, 7, "enum_FIELD"], [123, 125, 7, "enum_FIELD"], [123, 134, 7, "enum_FIELD"], [144, 143, 7, "enum_FIELD"], [152, 150, 7, "enum_FIELD"], [172, 174, 7, "enum_FIELD"], [172, 185, 7, "enum_FIELD"], [194, 193, 7, "enum_FIELD"], [34, 33, 7, "enum_FIELD"], [53, 49, 7, "enum_FIELD"], [81, 80, 7, "enum_FIELD"], [99, 98, 7, "enum_FIELD"], [108, 107, 7, "enum_FIELD"], [125, 127, 7, "enum_FIELD"], [134, 130, 7, "enum_FIELD"], [150, 149, 7, "enum_FIELD"], [174, 176, 7, "enum_FIELD"], [185, 179, 7, "enum_FIELD"], [49, 48, 7, "enum_FIELD"], [60, 57, 7, "enum_FIELD"], [83, 82, 7, "enum_FIELD"], [83, 84, 7, "enum_FIELD"], [130, 129, 7, "enum_FIELD"], [137, 138, 7, "enum_FIELD"], [179, 178, 7, "enum_FIELD"], [188, 189, 7, "enum_FIELD"], [57, 56, 7, "enum_FIELD"], [1, 2, 9, "enum_NEXT_SYNTAX"], [2, 3, 9, "enum_NEXT_SYNTAX"], [3, 4, 9, "enum_NEXT_SYNTAX"], [4, 5, 9, "enum_NEXT_SYNTAX"], [5, 6, 9, "enum_NEXT_SYNTAX"], [6, 7, 9, "enum_NEXT_SYNTAX"], [7, 8, 9, "enum_NEXT_SYNTAX"], [8, 9, 9, "enum_NEXT_SYNTAX"], [9, 10, 9, "enum_NEXT_SYNTAX"], [10, 13, 9, "enum_NEXT_SYNTAX"], [13, 14, 9, "enum_NEXT_SYNTAX"], [15, 6, 10, "enum_LAST_LEXICAL_USE"], [14, 15, 9, "enum_NEXT_SYNTAX"], [15, 16, 9, "enum_NEXT_SYNTAX"], [16, 17, 9, "enum_NEXT_SYNTAX"], [17, 18, 9, "enum_NEXT_SYNTAX"], [18, 19, 9, "enum_NEXT_SYNTAX"], [19, 21, 9, "enum_NEXT_SYNTAX"], [21, 22, 9, "enum_NEXT_SYNTAX"], [22, 23, 9, "enum_NEXT_SYNTAX"], [23, 24, 9, "enum_NEXT_SYNTAX"], [24, 27, 9, "enum_NEXT_SYNTAX"], [27, 28, 9, "enum_NEXT_SYNTAX"], [28, 30, 9, "enum_NEXT_SYNTAX"], [31, 22, 10, "enum_LAST_LEXICAL_USE"], [30, 31, 9, "enum_NEXT_SYNTAX"], [31, 32, 9, "enum_NEXT_SYNTAX"], [33, 15, 10, "enum_LAST_LEXICAL_USE"], [32, 33, 9, "enum_NEXT_SYNTAX"], [33, 34, 9, "enum_NEXT_SYNTAX"], [34, 35, 9, "enum_NEXT_SYNTAX"], [35, 36, 9, "enum_NEXT_SYNTAX"], [36, 37, 9, "enum_NEXT_SYNTAX"], [37, 39, 9, "enum_NEXT_SYNTAX"], [40, 2, 10, "enum_LAST_LEXICAL_USE"], [39, 40, 9, "enum_NEXT_SYNTAX"], [40, 41, 9, "enum_NEXT_SYNTAX"], [41, 42, 9, "enum_NEXT_SYNTAX"], [42, 43, 9, "enum_NEXT_SYNTAX"], [44, 33, 10, "enum_LAST_LEXICAL_USE"], [43, 44, 9, "enum_NEXT_SYNTAX"], [44, 45, 9, "enum_NEXT_SYNTAX"], [45, 46, 9, "enum_NEXT_SYNTAX"], [46, 47, 9, "enum_NEXT_SYNTAX"], [47, 48, 9, "enum_NEXT_SYNTAX"], [48, 49, 9, "enum_NEXT_SYNTAX"], [49, 50, 9, "enum_NEXT_SYNTAX"], [50, 51, 9, "enum_NEXT_SYNTAX"], [51, 52, 9, "enum_NEXT_SYNTAX"], [52, 53, 9, "enum_NEXT_SYNTAX"], [53, 54, 9, "enum_NEXT_SYNTAX"], [54, 55, 9, "enum_NEXT_SYNTAX"], [55, 56, 9, "enum_NEXT_SYNTAX"], [56, 57, 9, "enum_NEXT_SYNTAX"], [58, 40, 10, "enum_LAST_LEXICAL_USE"], [57, 58, 9, "enum_NEXT_SYNTAX"], [58, 59, 9, "enum_NEXT_SYNTAX"], [59, 60, 9, "enum_NEXT_SYNTAX"], [60, 61, 9, "enum_NEXT_SYNTAX"], [61, 62, 9, "enum_NEXT_SYNTAX"], [62, 63, 9, "enum_NEXT_SYNTAX"], [63, 64, 9, "enum_NEXT_SYNTAX"], [64, 65, 9, "enum_NEXT_SYNTAX"], [65, 66, 9, "enum_NEXT_SYNTAX"], [66, 67, 9, "enum_NEXT_SYNTAX"], [68, 58, 10, "enum_LAST_LEXICAL_USE"], [67, 68, 9, "enum_NEXT_SYNTAX"], [68, 69, 9, "enum_NEXT_SYNTAX"], [69, 70, 9, "enum_NEXT_SYNTAX"], [70, 71, 9, "enum_NEXT_SYNTAX"], [71, 72, 9, "enum_NEXT_SYNTAX"], [72, 73, 9, "enum_NEXT_SYNTAX"], [73, 74, 9, "enum_NEXT_SYNTAX"], [74, 75, 9, "enum_NEXT_SYNTAX"], [76, 31, 10, "enum_LAST_LEXICAL_USE"], [75, 76, 9, "enum_NEXT_SYNTAX"], [76, 77, 9, "enum_NEXT_SYNTAX"], [78, 46, 10, "enum_LAST_LEXICAL_USE"], [77, 78, 9, "enum_NEXT_SYNTAX"], [78, 79, 9, "enum_NEXT_SYNTAX"], [79, 80, 9, "enum_NEXT_SYNTAX"], [80, 81, 9, "enum_NEXT_SYNTAX"], [81, 82, 9, "enum_NEXT_SYNTAX"], [82, 83, 9, "enum_NEXT_SYNTAX"], [84, 4, 10, "enum_LAST_LEXICAL_USE"], [83, 84, 9, "enum_NEXT_SYNTAX"], [84, 85, 9, "enum_NEXT_SYNTAX"], [85, 86, 9, "enum_NEXT_SYNTAX"], [86, 87, 9, "enum_NEXT_SYNTAX"], [87, 88, 9, "enum_NEXT_SYNTAX"], [88, 89, 9, "enum_NEXT_SYNTAX"], [90, 68, 10, "enum_LAST_LEXICAL_USE"], [89, 90, 9, "enum_NEXT_SYNTAX"], [90, 91, 9, "enum_NEXT_SYNTAX"], [91, 92, 9, "enum_NEXT_SYNTAX"], [92, 93, 9, "enum_NEXT_SYNTAX"], [93, 94, 9, "enum_NEXT_SYNTAX"], [94, 95, 9, "enum_NEXT_SYNTAX"], [96, 84, 10, "enum_LAST_LEXICAL_USE"], [95, 96, 9, "enum_NEXT_SYNTAX"], [96, 97, 9, "enum_NEXT_SYNTAX"], [98, 90, 10, "enum_LAST_LEXICAL_USE"], [97, 98, 9, "enum_NEXT_SYNTAX"], [98, 99, 9, "enum_NEXT_SYNTAX"], [99, 100, 9, "enum_NEXT_SYNTAX"], [100, 101, 9, "enum_NEXT_SYNTAX"], [101, 102, 9, "enum_NEXT_SYNTAX"], [102, 103, 9, "enum_NEXT_SYNTAX"], [103, 104, 9, "enum_NEXT_SYNTAX"], [104, 105, 9, "enum_NEXT_SYNTAX"], [105, 106, 9, "enum_NEXT_SYNTAX"], [107, 98, 10, "enum_LAST_LEXICAL_USE"], [106, 107, 9, "enum_NEXT_SYNTAX"], [107, 108, 9, "enum_NEXT_SYNTAX"], [108, 109, 9, "enum_NEXT_SYNTAX"], [109, 110, 9, "enum_NEXT_SYNTAX"], [110, 111, 9, "enum_NEXT_SYNTAX"], [111, 112, 9, "enum_NEXT_SYNTAX"], [112, 113, 9, "enum_NEXT_SYNTAX"], [114, 107, 10, "enum_LAST_LEXICAL_USE"], [113, 114, 9, "enum_NEXT_SYNTAX"], [114, 115, 9, "enum_NEXT_SYNTAX"], [116, 114, 10, "enum_LAST_LEXICAL_USE"], [115, 116, 9, "enum_NEXT_SYNTAX"], [116, 117, 9, "enum_NEXT_SYNTAX"], [117, 118, 9, "enum_NEXT_SYNTAX"], [118, 119, 9, "enum_NEXT_SYNTAX"], [119, 120, 9, "enum_NEXT_SYNTAX"], [120, 121, 9, "enum_NEXT_SYNTAX"], [121, 122, 9, "enum_NEXT_SYNTAX"], [122, 123, 9, "enum_NEXT_SYNTAX"], [123, 124, 9, "enum_NEXT_SYNTAX"], [124, 125, 9, "enum_NEXT_SYNTAX"], [125, 126, 9, "enum_NEXT_SYNTAX"], [126, 127, 9, "enum_NEXT_SYNTAX"], [127, 128, 9, "enum_NEXT_SYNTAX"], [129, 116, 10, "enum_LAST_LEXICAL_USE"], [128, 129, 9, "enum_NEXT_SYNTAX"], [129, 130, 9, "enum_NEXT_SYNTAX"], [130, 131, 9, "enum_NEXT_SYNTAX"], [131, 132, 9, "enum_NEXT_SYNTAX"], [133, 124, 10, "enum_LAST_LEXICAL_USE"], [132, 133, 9, "enum_NEXT_SYNTAX"], [133, 134, 9, "enum_NEXT_SYNTAX"], [135, 129, 10, "enum_LAST_LEXICAL_USE"], [134, 135, 9, "enum_NEXT_SYNTAX"], [135, 136, 9, "enum_NEXT_SYNTAX"], [136, 137, 9, "enum_NEXT_SYNTAX"], [138, 127, 10, "enum_LAST_LEXICAL_USE"], [137, 138, 9, "enum_NEXT_SYNTAX"], [138, 139, 9, "enum_NEXT_SYNTAX"], [139, 140, 9, "enum_NEXT_SYNTAX"], [140, 141, 9, "enum_NEXT_SYNTAX"], [141, 142, 9, "enum_NEXT_SYNTAX"], [143, 135, 10, "enum_LAST_LEXICAL_USE"], [142, 143, 9, "enum_NEXT_SYNTAX"], [143, 144, 9, "enum_NEXT_SYNTAX"], [144, 145, 9, "enum_NEXT_SYNTAX"], [145, 146, 9, "enum_NEXT_SYNTAX"], [146, 147, 9, "enum_NEXT_SYNTAX"], [147, 148, 9, "enum_NEXT_SYNTAX"], [149, 143, 10, "enum_LAST_LEXICAL_USE"], [148, 149, 9, "enum_NEXT_SYNTAX"], [149, 150, 9, "enum_NEXT_SYNTAX"], [150, 151, 9, "enum_NEXT_SYNTAX"], [151, 152, 9, "enum_NEXT_SYNTAX"], [152, 153, 9, "enum_NEXT_SYNTAX"], [153, 154, 9, "enum_NEXT_SYNTAX"], [154, 155, 9, "enum_NEXT_SYNTAX"], [155, 156, 9, "enum_NEXT_SYNTAX"], [156, 157, 9, "enum_NEXT_SYNTAX"], [158, 149, 10, "enum_LAST_LEXICAL_USE"], [157, 158, 9, "enum_NEXT_SYNTAX"], [158, 159, 9, "enum_NEXT_SYNTAX"], [159, 160, 9, "enum_NEXT_SYNTAX"], [160, 161, 9, "enum_NEXT_SYNTAX"], [161, 162, 9, "enum_NEXT_SYNTAX"], [162, 163, 9, "enum_NEXT_SYNTAX"], [163, 164, 9, "enum_NEXT_SYNTAX"], [165, 158, 10, "enum_LAST_LEXICAL_USE"], [164, 165, 9, "enum_NEXT_SYNTAX"], [165, 166, 9, "enum_NEXT_SYNTAX"], [166, 167, 9, "enum_NEXT_SYNTAX"], [167, 168, 9, "enum_NEXT_SYNTAX"], [168, 169, 9, "enum_NEXT_SYNTAX"], [169, 170, 9, "enum_NEXT_SYNTAX"], [170, 171, 9, "enum_NEXT_SYNTAX"], [171, 172, 9, "enum_NEXT_SYNTAX"], [173, 133, 10, "enum_LAST_LEXICAL_USE"], [172, 173, 9, "enum_NEXT_SYNTAX"], [173, 174, 9, "enum_NEXT_SYNTAX"], [174, 175, 9, "enum_NEXT_SYNTAX"], [176, 138, 10, "enum_LAST_LEXICAL_USE"], [175, 176, 9, "enum_NEXT_SYNTAX"], [176, 177, 9, "enum_NEXT_SYNTAX"], [178, 165, 10, "enum_LAST_LEXICAL_USE"], [177, 178, 9, "enum_NEXT_SYNTAX"], [178, 179, 9, "enum_NEXT_SYNTAX"], [179, 180, 9, "enum_NEXT_SYNTAX"], [180, 181, 9, "enum_NEXT_SYNTAX"], [182, 173, 10, "enum_LAST_LEXICAL_USE"], [181, 182, 9, "enum_NEXT_SYNTAX"], [182, 183, 9, "enum_NEXT_SYNTAX"], [183, 184, 9, "enum_NEXT_SYNTAX"], [184, 185, 9, "enum_NEXT_SYNTAX"], [186, 178, 10, "enum_LAST_LEXICAL_USE"], [185, 186, 9, "enum_NEXT_SYNTAX"], [186, 187, 9, "enum_NEXT_SYNTAX"], [187, 188, 9, "enum_NEXT_SYNTAX"], [189, 176, 10, "enum_LAST_LEXICAL_USE"], [188, 189, 9, "enum_NEXT_SYNTAX"], [189, 190, 9, "enum_NEXT_SYNTAX"], [190, 191, 9, "enum_NEXT_SYNTAX"], [191, 192, 9, "enum_NEXT_SYNTAX"], [193, 186, 10, "enum_LAST_LEXICAL_USE"], [192, 193, 9, "enum_NEXT_SYNTAX"], [193, 194, 9, "enum_NEXT_SYNTAX"], [194, 195, 9, "enum_NEXT_SYNTAX"], [195, 196, 9, "enum_NEXT_SYNTAX"], [5, 16, 1, "enum_CFG_NEXT"], [16, 30, 1, "enum_CFG_NEXT"], [16, 21, 1, "enum_CFG_NEXT"], [21, 39, 1, "enum_CFG_NEXT"], [30, 39, 1, "enum_CFG_NEXT"], [39, 45, 1, "enum_CFG_NEXT"], [45, 67, 1, "enum_CFG_NEXT"], [67, 89, 1, "enum_CFG_NEXT"], [89, 104, 1, "enum_CFG_NEXT"], [104, 115, 1, "enum_CFG_NEXT"], [115, 142, 1, "enum_CFG_NEXT"], [142, 148, 1, "enum_CFG_NEXT"], [148, 157, 1, "enum_CFG_NEXT"], [157, 164, 1, "enum_CFG_NEXT"], [15, 6, 3, "enum_LAST_WRITE"], [33, 15, 2, "enum_LAST_READ"], [33, 6, 3, "enum_LAST_WRITE"], [44, 15, 2, "enum_LAST_READ"], [44, 33, 2, "enum_LAST_READ"], [44, 6, 3, "enum_LAST_WRITE"], [40, 2, 3, "enum_LAST_WRITE"], [58, 40, 2, "enum_LAST_READ"], [58, 2, 3, "enum_LAST_WRITE"], [76, 31, 3, "enum_LAST_WRITE"], [76, 22, 3, "enum_LAST_WRITE"], [78, 46, 3, "enum_LAST_WRITE"], [84, 4, 3, "enum_LAST_WRITE"], [68, 58, 2, "enum_LAST_READ"], [68, 2, 3, "enum_LAST_WRITE"], [90, 68, 2, "enum_LAST_READ"], [90, 2, 3, "enum_LAST_WRITE"], [96, 84, 2, "enum_LAST_READ"], [96, 4, 3, "enum_LAST_WRITE"], [98, 90, 2, "enum_LAST_READ"], [98, 2, 3, "enum_LAST_WRITE"], [114, 98, 2, "enum_LAST_READ"], [114, 2, 3, "enum_LAST_WRITE"], [107, 114, 2, "enum_LAST_READ"], [107, 2, 3, "enum_LAST_WRITE"], [129, 107, 2, "enum_LAST_READ"], [129, 2, 3, "enum_LAST_WRITE"], [133, 124, 3, "enum_LAST_WRITE"], [135, 129, 2, "enum_LAST_READ"], [135, 2, 3, "enum_LAST_WRITE"], [138, 127, 3, "enum_LAST_WRITE"], [116, 135, 2, "enum_LAST_READ"], [116, 2, 3, "enum_LAST_WRITE"], [143, 116, 2, "enum_LAST_READ"], [143, 2, 3, "enum_LAST_WRITE"], [149, 143, 2, "enum_LAST_READ"], [149, 2, 3, "enum_LAST_WRITE"], [158, 149, 2, "enum_LAST_READ"], [158, 2, 3, "enum_LAST_WRITE"], [173, 133, 2, "enum_LAST_READ"], [173, 124, 3, "enum_LAST_WRITE"], [176, 138, 2, "enum_LAST_READ"], [176, 127, 3, "enum_LAST_WRITE"], [178, 158, 2, "enum_LAST_READ"], [178, 2, 3, "enum_LAST_WRITE"], [182, 133, 2, "enum_LAST_READ"], [182, 173, 3, "enum_LAST_WRITE"], [186, 178, 2, "enum_LAST_READ"], [186, 2, 3, "enum_LAST_WRITE"], [189, 138, 2, "enum_LAST_READ"], [189, 176, 3, "enum_LAST_WRITE"], [193, 186, 2, "enum_LAST_READ"], [193, 2, 3, "enum_LAST_WRITE"], [165, 193, 2, "enum_LAST_READ"], [165, 2, 3, "enum_LAST_WRITE"], [41, 44, 4, "enum_COMPUTED_FROM"], [46, 48, 4, "enum_COMPUTED_FROM"], [46, 56, 4, "enum_COMPUTED_FROM"], [46, 58, 4, "enum_COMPUTED_FROM"], [69, 76, 4, "enum_COMPUTED_FROM"], [69, 78, 4, "enum_COMPUTED_FROM"], [69, 80, 4, "enum_COMPUTED_FROM"], [69, 82, 4, "enum_COMPUTED_FROM"], [69, 84, 4, "enum_COMPUTED_FROM"], [106, 114, 4, "enum_COMPUTED_FROM"], [117, 120, 4, "enum_COMPUTED_FROM"], [117, 124, 4, "enum_COMPUTED_FROM"], [117, 127, 4, "enum_COMPUTED_FROM"], [117, 133, 4, "enum_COMPUTED_FROM"], [117, 135, 4, "enum_COMPUTED_FROM"], [117, 129, 4, "enum_COMPUTED_FROM"], [117, 138, 4, "enum_COMPUTED_FROM"], [166, 169, 4, "enum_COMPUTED_FROM"], [166, 193, 4, "enum_COMPUTED_FROM"], [166, 173, 4, "enum_COMPUTED_FROM"], [166, 176, 4, "enum_COMPUTED_FROM"], [166, 182, 4, "enum_COMPUTED_FROM"], [166, 186, 4, "enum_COMPUTED_FROM"], [166, 178, 4, "enum_COMPUTED_FROM"], [166, 189, 4, "enum_COMPUTED_FROM"], [31, 33, 4, "enum_COMPUTED_FROM"]], "error_location": 84, "repair_targets": [0], "repair_candidates": [0], "repo": "https://:@github.com/Akuli/pythotk.git", "old_path": "pythotk/_widgets.py", "hash": "c16149611fdeb7017bf65828c54d4c5bdf9edcc4", "code": "def __init__(self, widgetname: str, parent: Optional[Parent], **options):\n    if parent is None:  \n        parentpath: str = ''\n    else:\n        parentpath = parent.to_tcl()\n    self.parent = parent\n\n    # yes, it must be lowercase\n    safe_class_name: str = re.sub(r'\\W', '_', type(self).__name__).lower()\n\n    # use some_widget.to_tcl() to access the _widget_path\n    self._widget_path = '%s.%s%d' % (\n        parentpath, safe_class_name, next(counts[widgetname]))\n\n    # TODO: some config options can only be given when the widget is\n    # created, add support for them\n    self._call(None, widgetname, self.to_tcl())\n    _widgets[self.to_tcl()] = self\n\n    self.config = ConfigDict(\n        lambda returntype, *args: self._call(returntype, self, *args))\n    self._init_config()\n    self.config.update(options)\n\n    # command strings that are deleted when the widget is destroyed\n    self._command_list = []\n\n    self.bindings = BindingDict(    # BindingDict is defined below\n    lambda returntype, *args: self._call(returntype, 'bind', self, *args),\n    self._command_list)\n", "rewrite": "ReplaceText(target='safe_class_name' @(135,53)->(135,63))", "error_line": 12, "has_bug": true, "code_full": "import re\nfrom typing import Any, Callable, Dict, Iterator, List, Optional\n\ncounts: Dict[str, Iterator] = {}\n_widgets: Dict[str, Any] = {}\n\n\nclass Parent:\n    def to_tcl(self) -> str:\n        return ''\n    \n\nclass ConfigDict:\n    def __init__(self, getter: Callable):\n        pass\n\n    def update(self, options: Dict[str, Any]):\n        pass\n\n\nclass BindingDict:\n    def __init__(self, getter: Callable, command_list: List[str]):\n        pass\n\n\nclass Widget:\n    parent: Optional[Parent]\n    _widget_path: str\n    config: ConfigDict\n    _command_list: List[str]\n    bindings: BindingDict\n\n    def _call(self, returntype: Optional[str], *args) -> Any:\n        pass\n\n    def _init_config(self):\n        pass\n\n    def to_tcl(self) -> str:\n        return \"\"\n\n    def __init__(self, widgetname: str, parent: Optional[Parent], **options):\n        if parent is None:  \n            parentpath: str = ''\n        else:\n            parentpath = parent.to_tcl()\n        self.parent = parent\n\n        # yes, it must be lowercase\n        safe_class_name: str = re.sub(r'\\W', '_', type(self).__name__).lower()\n\n        # use some_widget.to_tcl() to access the _widget_path\n        self._widget_path = '%s.%s%d' % (\n            parentpath, safe_class_name, next(counts[widgetname]))\n\n        # TODO: some config options can only be given when the widget is\n        # created, add support for them\n        self._call(None, widgetname, self.to_tcl())\n        _widgets[self.to_tcl()] = self\n\n        self.config = ConfigDict(\n            lambda returntype, *args: self._call(returntype, self, *args))\n        self._init_config()\n        self.config.update(options)\n\n        # command strings that are deleted when the widget is destroyed\n        self._command_list = []\n\n        self.bindings = BindingDict(    # BindingDict is defined below\n        lambda returntype, *args: self._call(returntype, 'bind', self, *args),\n        self._command_list)\n", "error_location_char": [454, 464], "type_checked_pytype": true, "type_error_label": "", "type_checked_mypy": true}
